/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpCacheControlResponseHeader.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpCacheControlResponseHeader::OAIHttpCacheControlResponseHeader(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpCacheControlResponseHeader::OAIHttpCacheControlResponseHeader() {
    this->initializeModel();
}

OAIHttpCacheControlResponseHeader::~OAIHttpCacheControlResponseHeader() {}

void OAIHttpCacheControlResponseHeader::initializeModel() {

    m_age_isSet = false;
    m_age_isValid = false;

    m_directive_isSet = false;
    m_directive_isValid = false;

    m_expires_isSet = false;
    m_expires_isValid = false;
}

void OAIHttpCacheControlResponseHeader::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpCacheControlResponseHeader::fromJsonObject(QJsonObject json) {

    m_age_isValid = ::OpenAPI::fromJsonValue(m_age, json[QString("age")]);
    m_age_isSet = !json[QString("age")].isNull() && m_age_isValid;

    m_directive_isValid = ::OpenAPI::fromJsonValue(m_directive, json[QString("directive")]);
    m_directive_isSet = !json[QString("directive")].isNull() && m_directive_isValid;

    m_expires_isValid = ::OpenAPI::fromJsonValue(m_expires, json[QString("expires")]);
    m_expires_isSet = !json[QString("expires")].isNull() && m_expires_isValid;
}

QString OAIHttpCacheControlResponseHeader::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpCacheControlResponseHeader::asJsonObject() const {
    QJsonObject obj;
    if (m_age_isSet) {
        obj.insert(QString("age"), ::OpenAPI::toJsonValue(m_age));
    }
    if (m_directive_isSet) {
        obj.insert(QString("directive"), ::OpenAPI::toJsonValue(m_directive));
    }
    if (m_expires_isSet) {
        obj.insert(QString("expires"), ::OpenAPI::toJsonValue(m_expires));
    }
    return obj;
}

QString OAIHttpCacheControlResponseHeader::getAge() const {
    return m_age;
}
void OAIHttpCacheControlResponseHeader::setAge(const QString &age) {
    m_age = age;
    m_age_isSet = true;
}

bool OAIHttpCacheControlResponseHeader::is_age_Set() const{
    return m_age_isSet;
}

bool OAIHttpCacheControlResponseHeader::is_age_Valid() const{
    return m_age_isValid;
}

QString OAIHttpCacheControlResponseHeader::getDirective() const {
    return m_directive;
}
void OAIHttpCacheControlResponseHeader::setDirective(const QString &directive) {
    m_directive = directive;
    m_directive_isSet = true;
}

bool OAIHttpCacheControlResponseHeader::is_directive_Set() const{
    return m_directive_isSet;
}

bool OAIHttpCacheControlResponseHeader::is_directive_Valid() const{
    return m_directive_isValid;
}

QString OAIHttpCacheControlResponseHeader::getExpires() const {
    return m_expires;
}
void OAIHttpCacheControlResponseHeader::setExpires(const QString &expires) {
    m_expires = expires;
    m_expires_isSet = true;
}

bool OAIHttpCacheControlResponseHeader::is_expires_Set() const{
    return m_expires_isSet;
}

bool OAIHttpCacheControlResponseHeader::is_expires_Valid() const{
    return m_expires_isValid;
}

bool OAIHttpCacheControlResponseHeader::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpCacheControlResponseHeader::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
