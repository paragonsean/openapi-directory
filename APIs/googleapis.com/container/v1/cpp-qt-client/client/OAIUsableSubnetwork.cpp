/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsableSubnetwork.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsableSubnetwork::OAIUsableSubnetwork(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsableSubnetwork::OAIUsableSubnetwork() {
    this->initializeModel();
}

OAIUsableSubnetwork::~OAIUsableSubnetwork() {}

void OAIUsableSubnetwork::initializeModel() {

    m_ip_cidr_range_isSet = false;
    m_ip_cidr_range_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_secondary_ip_ranges_isSet = false;
    m_secondary_ip_ranges_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_subnetwork_isSet = false;
    m_subnetwork_isValid = false;
}

void OAIUsableSubnetwork::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsableSubnetwork::fromJsonObject(QJsonObject json) {

    m_ip_cidr_range_isValid = ::OpenAPI::fromJsonValue(m_ip_cidr_range, json[QString("ipCidrRange")]);
    m_ip_cidr_range_isSet = !json[QString("ipCidrRange")].isNull() && m_ip_cidr_range_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_secondary_ip_ranges_isValid = ::OpenAPI::fromJsonValue(m_secondary_ip_ranges, json[QString("secondaryIpRanges")]);
    m_secondary_ip_ranges_isSet = !json[QString("secondaryIpRanges")].isNull() && m_secondary_ip_ranges_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_subnetwork_isValid = ::OpenAPI::fromJsonValue(m_subnetwork, json[QString("subnetwork")]);
    m_subnetwork_isSet = !json[QString("subnetwork")].isNull() && m_subnetwork_isValid;
}

QString OAIUsableSubnetwork::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsableSubnetwork::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_cidr_range_isSet) {
        obj.insert(QString("ipCidrRange"), ::OpenAPI::toJsonValue(m_ip_cidr_range));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_secondary_ip_ranges.size() > 0) {
        obj.insert(QString("secondaryIpRanges"), ::OpenAPI::toJsonValue(m_secondary_ip_ranges));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_subnetwork_isSet) {
        obj.insert(QString("subnetwork"), ::OpenAPI::toJsonValue(m_subnetwork));
    }
    return obj;
}

QString OAIUsableSubnetwork::getIpCidrRange() const {
    return m_ip_cidr_range;
}
void OAIUsableSubnetwork::setIpCidrRange(const QString &ip_cidr_range) {
    m_ip_cidr_range = ip_cidr_range;
    m_ip_cidr_range_isSet = true;
}

bool OAIUsableSubnetwork::is_ip_cidr_range_Set() const{
    return m_ip_cidr_range_isSet;
}

bool OAIUsableSubnetwork::is_ip_cidr_range_Valid() const{
    return m_ip_cidr_range_isValid;
}

QString OAIUsableSubnetwork::getNetwork() const {
    return m_network;
}
void OAIUsableSubnetwork::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIUsableSubnetwork::is_network_Set() const{
    return m_network_isSet;
}

bool OAIUsableSubnetwork::is_network_Valid() const{
    return m_network_isValid;
}

QList<OAIUsableSubnetworkSecondaryRange> OAIUsableSubnetwork::getSecondaryIpRanges() const {
    return m_secondary_ip_ranges;
}
void OAIUsableSubnetwork::setSecondaryIpRanges(const QList<OAIUsableSubnetworkSecondaryRange> &secondary_ip_ranges) {
    m_secondary_ip_ranges = secondary_ip_ranges;
    m_secondary_ip_ranges_isSet = true;
}

bool OAIUsableSubnetwork::is_secondary_ip_ranges_Set() const{
    return m_secondary_ip_ranges_isSet;
}

bool OAIUsableSubnetwork::is_secondary_ip_ranges_Valid() const{
    return m_secondary_ip_ranges_isValid;
}

QString OAIUsableSubnetwork::getStatusMessage() const {
    return m_status_message;
}
void OAIUsableSubnetwork::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIUsableSubnetwork::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIUsableSubnetwork::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QString OAIUsableSubnetwork::getSubnetwork() const {
    return m_subnetwork;
}
void OAIUsableSubnetwork::setSubnetwork(const QString &subnetwork) {
    m_subnetwork = subnetwork;
    m_subnetwork_isSet = true;
}

bool OAIUsableSubnetwork::is_subnetwork_Set() const{
    return m_subnetwork_isSet;
}

bool OAIUsableSubnetwork::is_subnetwork_Valid() const{
    return m_subnetwork_isValid;
}

bool OAIUsableSubnetwork::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_cidr_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_ip_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnetwork_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsableSubnetwork::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
