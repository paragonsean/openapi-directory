/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdditionalPodNetworkConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdditionalPodNetworkConfig::OAIAdditionalPodNetworkConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdditionalPodNetworkConfig::OAIAdditionalPodNetworkConfig() {
    this->initializeModel();
}

OAIAdditionalPodNetworkConfig::~OAIAdditionalPodNetworkConfig() {}

void OAIAdditionalPodNetworkConfig::initializeModel() {

    m_max_pods_per_node_isSet = false;
    m_max_pods_per_node_isValid = false;

    m_secondary_pod_range_isSet = false;
    m_secondary_pod_range_isValid = false;

    m_subnetwork_isSet = false;
    m_subnetwork_isValid = false;
}

void OAIAdditionalPodNetworkConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdditionalPodNetworkConfig::fromJsonObject(QJsonObject json) {

    m_max_pods_per_node_isValid = ::OpenAPI::fromJsonValue(m_max_pods_per_node, json[QString("maxPodsPerNode")]);
    m_max_pods_per_node_isSet = !json[QString("maxPodsPerNode")].isNull() && m_max_pods_per_node_isValid;

    m_secondary_pod_range_isValid = ::OpenAPI::fromJsonValue(m_secondary_pod_range, json[QString("secondaryPodRange")]);
    m_secondary_pod_range_isSet = !json[QString("secondaryPodRange")].isNull() && m_secondary_pod_range_isValid;

    m_subnetwork_isValid = ::OpenAPI::fromJsonValue(m_subnetwork, json[QString("subnetwork")]);
    m_subnetwork_isSet = !json[QString("subnetwork")].isNull() && m_subnetwork_isValid;
}

QString OAIAdditionalPodNetworkConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdditionalPodNetworkConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_max_pods_per_node.isSet()) {
        obj.insert(QString("maxPodsPerNode"), ::OpenAPI::toJsonValue(m_max_pods_per_node));
    }
    if (m_secondary_pod_range_isSet) {
        obj.insert(QString("secondaryPodRange"), ::OpenAPI::toJsonValue(m_secondary_pod_range));
    }
    if (m_subnetwork_isSet) {
        obj.insert(QString("subnetwork"), ::OpenAPI::toJsonValue(m_subnetwork));
    }
    return obj;
}

OAIMaxPodsConstraint OAIAdditionalPodNetworkConfig::getMaxPodsPerNode() const {
    return m_max_pods_per_node;
}
void OAIAdditionalPodNetworkConfig::setMaxPodsPerNode(const OAIMaxPodsConstraint &max_pods_per_node) {
    m_max_pods_per_node = max_pods_per_node;
    m_max_pods_per_node_isSet = true;
}

bool OAIAdditionalPodNetworkConfig::is_max_pods_per_node_Set() const{
    return m_max_pods_per_node_isSet;
}

bool OAIAdditionalPodNetworkConfig::is_max_pods_per_node_Valid() const{
    return m_max_pods_per_node_isValid;
}

QString OAIAdditionalPodNetworkConfig::getSecondaryPodRange() const {
    return m_secondary_pod_range;
}
void OAIAdditionalPodNetworkConfig::setSecondaryPodRange(const QString &secondary_pod_range) {
    m_secondary_pod_range = secondary_pod_range;
    m_secondary_pod_range_isSet = true;
}

bool OAIAdditionalPodNetworkConfig::is_secondary_pod_range_Set() const{
    return m_secondary_pod_range_isSet;
}

bool OAIAdditionalPodNetworkConfig::is_secondary_pod_range_Valid() const{
    return m_secondary_pod_range_isValid;
}

QString OAIAdditionalPodNetworkConfig::getSubnetwork() const {
    return m_subnetwork;
}
void OAIAdditionalPodNetworkConfig::setSubnetwork(const QString &subnetwork) {
    m_subnetwork = subnetwork;
    m_subnetwork_isSet = true;
}

bool OAIAdditionalPodNetworkConfig::is_subnetwork_Set() const{
    return m_subnetwork_isSet;
}

bool OAIAdditionalPodNetworkConfig::is_subnetwork_Valid() const{
    return m_subnetwork_isValid;
}

bool OAIAdditionalPodNetworkConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_pods_per_node.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_pod_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnetwork_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdditionalPodNetworkConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
