/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpgradeSettings.h
 *
 * These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable&#x3D;0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge&#x3D;2, maxUnavailable&#x3D;1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available. These upgrade settings configure the upgrade strategy for the node pool. Use strategy to switch between the strategies applied to the node pool. If the strategy is ROLLING, use max_surge and max_unavailable to control the level of parallelism and the level of disruption caused by upgrade. 1. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. 2. maxUnavailable controls the number of nodes that can be simultaneously unavailable. 3. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). If the strategy is BLUE_GREEN, use blue_green_settings to configure the blue-green upgrade related settings. 1. standard_rollout_policy is the default policy. The policy is used to control the way blue pool gets drained. The draining is executed in the batch mode. The batch size could be specified as either percentage of the node pool size or the number of nodes. batch_soak_duration is the soak time after each batch gets drained. 2. node_pool_soak_duration is the soak time after all blue nodes are drained. After this period, the blue pool nodes will be deleted.
 */

#ifndef OAIUpgradeSettings_H
#define OAIUpgradeSettings_H

#include <QJsonObject>

#include "OAIBlueGreenSettings.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBlueGreenSettings;

class OAIUpgradeSettings : public OAIObject {
public:
    OAIUpgradeSettings();
    OAIUpgradeSettings(QString json);
    ~OAIUpgradeSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBlueGreenSettings getBlueGreenSettings() const;
    void setBlueGreenSettings(const OAIBlueGreenSettings &blue_green_settings);
    bool is_blue_green_settings_Set() const;
    bool is_blue_green_settings_Valid() const;

    qint32 getMaxSurge() const;
    void setMaxSurge(const qint32 &max_surge);
    bool is_max_surge_Set() const;
    bool is_max_surge_Valid() const;

    qint32 getMaxUnavailable() const;
    void setMaxUnavailable(const qint32 &max_unavailable);
    bool is_max_unavailable_Set() const;
    bool is_max_unavailable_Valid() const;

    QString getStrategy() const;
    void setStrategy(const QString &strategy);
    bool is_strategy_Set() const;
    bool is_strategy_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBlueGreenSettings m_blue_green_settings;
    bool m_blue_green_settings_isSet;
    bool m_blue_green_settings_isValid;

    qint32 m_max_surge;
    bool m_max_surge_isSet;
    bool m_max_surge_isValid;

    qint32 m_max_unavailable;
    bool m_max_unavailable_isSet;
    bool m_max_unavailable_isValid;

    QString m_strategy;
    bool m_strategy_isSet;
    bool m_strategy_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpgradeSettings)

#endif // OAIUpgradeSettings_H
