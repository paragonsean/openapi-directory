/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaintenanceWindow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaintenanceWindow::OAIMaintenanceWindow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaintenanceWindow::OAIMaintenanceWindow() {
    this->initializeModel();
}

OAIMaintenanceWindow::~OAIMaintenanceWindow() {}

void OAIMaintenanceWindow::initializeModel() {

    m_daily_maintenance_window_isSet = false;
    m_daily_maintenance_window_isValid = false;

    m_maintenance_exclusions_isSet = false;
    m_maintenance_exclusions_isValid = false;

    m_recurring_window_isSet = false;
    m_recurring_window_isValid = false;
}

void OAIMaintenanceWindow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaintenanceWindow::fromJsonObject(QJsonObject json) {

    m_daily_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_daily_maintenance_window, json[QString("dailyMaintenanceWindow")]);
    m_daily_maintenance_window_isSet = !json[QString("dailyMaintenanceWindow")].isNull() && m_daily_maintenance_window_isValid;

    m_maintenance_exclusions_isValid = ::OpenAPI::fromJsonValue(m_maintenance_exclusions, json[QString("maintenanceExclusions")]);
    m_maintenance_exclusions_isSet = !json[QString("maintenanceExclusions")].isNull() && m_maintenance_exclusions_isValid;

    m_recurring_window_isValid = ::OpenAPI::fromJsonValue(m_recurring_window, json[QString("recurringWindow")]);
    m_recurring_window_isSet = !json[QString("recurringWindow")].isNull() && m_recurring_window_isValid;
}

QString OAIMaintenanceWindow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaintenanceWindow::asJsonObject() const {
    QJsonObject obj;
    if (m_daily_maintenance_window.isSet()) {
        obj.insert(QString("dailyMaintenanceWindow"), ::OpenAPI::toJsonValue(m_daily_maintenance_window));
    }
    if (m_maintenance_exclusions.size() > 0) {
        obj.insert(QString("maintenanceExclusions"), ::OpenAPI::toJsonValue(m_maintenance_exclusions));
    }
    if (m_recurring_window.isSet()) {
        obj.insert(QString("recurringWindow"), ::OpenAPI::toJsonValue(m_recurring_window));
    }
    return obj;
}

OAIDailyMaintenanceWindow OAIMaintenanceWindow::getDailyMaintenanceWindow() const {
    return m_daily_maintenance_window;
}
void OAIMaintenanceWindow::setDailyMaintenanceWindow(const OAIDailyMaintenanceWindow &daily_maintenance_window) {
    m_daily_maintenance_window = daily_maintenance_window;
    m_daily_maintenance_window_isSet = true;
}

bool OAIMaintenanceWindow::is_daily_maintenance_window_Set() const{
    return m_daily_maintenance_window_isSet;
}

bool OAIMaintenanceWindow::is_daily_maintenance_window_Valid() const{
    return m_daily_maintenance_window_isValid;
}

QMap<QString, OAITimeWindow> OAIMaintenanceWindow::getMaintenanceExclusions() const {
    return m_maintenance_exclusions;
}
void OAIMaintenanceWindow::setMaintenanceExclusions(const QMap<QString, OAITimeWindow> &maintenance_exclusions) {
    m_maintenance_exclusions = maintenance_exclusions;
    m_maintenance_exclusions_isSet = true;
}

bool OAIMaintenanceWindow::is_maintenance_exclusions_Set() const{
    return m_maintenance_exclusions_isSet;
}

bool OAIMaintenanceWindow::is_maintenance_exclusions_Valid() const{
    return m_maintenance_exclusions_isValid;
}

OAIRecurringTimeWindow OAIMaintenanceWindow::getRecurringWindow() const {
    return m_recurring_window;
}
void OAIMaintenanceWindow::setRecurringWindow(const OAIRecurringTimeWindow &recurring_window) {
    m_recurring_window = recurring_window;
    m_recurring_window_isSet = true;
}

bool OAIMaintenanceWindow::is_recurring_window_Set() const{
    return m_recurring_window_isSet;
}

bool OAIMaintenanceWindow::is_recurring_window_Valid() const{
    return m_recurring_window_isValid;
}

bool OAIMaintenanceWindow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_daily_maintenance_window.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_exclusions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_window.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaintenanceWindow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
