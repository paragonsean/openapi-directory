/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeManagement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeManagement::OAINodeManagement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeManagement::OAINodeManagement() {
    this->initializeModel();
}

OAINodeManagement::~OAINodeManagement() {}

void OAINodeManagement::initializeModel() {

    m_auto_repair_isSet = false;
    m_auto_repair_isValid = false;

    m_auto_upgrade_isSet = false;
    m_auto_upgrade_isValid = false;

    m_upgrade_options_isSet = false;
    m_upgrade_options_isValid = false;
}

void OAINodeManagement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeManagement::fromJsonObject(QJsonObject json) {

    m_auto_repair_isValid = ::OpenAPI::fromJsonValue(m_auto_repair, json[QString("autoRepair")]);
    m_auto_repair_isSet = !json[QString("autoRepair")].isNull() && m_auto_repair_isValid;

    m_auto_upgrade_isValid = ::OpenAPI::fromJsonValue(m_auto_upgrade, json[QString("autoUpgrade")]);
    m_auto_upgrade_isSet = !json[QString("autoUpgrade")].isNull() && m_auto_upgrade_isValid;

    m_upgrade_options_isValid = ::OpenAPI::fromJsonValue(m_upgrade_options, json[QString("upgradeOptions")]);
    m_upgrade_options_isSet = !json[QString("upgradeOptions")].isNull() && m_upgrade_options_isValid;
}

QString OAINodeManagement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeManagement::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_repair_isSet) {
        obj.insert(QString("autoRepair"), ::OpenAPI::toJsonValue(m_auto_repair));
    }
    if (m_auto_upgrade_isSet) {
        obj.insert(QString("autoUpgrade"), ::OpenAPI::toJsonValue(m_auto_upgrade));
    }
    if (m_upgrade_options.isSet()) {
        obj.insert(QString("upgradeOptions"), ::OpenAPI::toJsonValue(m_upgrade_options));
    }
    return obj;
}

bool OAINodeManagement::isAutoRepair() const {
    return m_auto_repair;
}
void OAINodeManagement::setAutoRepair(const bool &auto_repair) {
    m_auto_repair = auto_repair;
    m_auto_repair_isSet = true;
}

bool OAINodeManagement::is_auto_repair_Set() const{
    return m_auto_repair_isSet;
}

bool OAINodeManagement::is_auto_repair_Valid() const{
    return m_auto_repair_isValid;
}

bool OAINodeManagement::isAutoUpgrade() const {
    return m_auto_upgrade;
}
void OAINodeManagement::setAutoUpgrade(const bool &auto_upgrade) {
    m_auto_upgrade = auto_upgrade;
    m_auto_upgrade_isSet = true;
}

bool OAINodeManagement::is_auto_upgrade_Set() const{
    return m_auto_upgrade_isSet;
}

bool OAINodeManagement::is_auto_upgrade_Valid() const{
    return m_auto_upgrade_isValid;
}

OAIAutoUpgradeOptions OAINodeManagement::getUpgradeOptions() const {
    return m_upgrade_options;
}
void OAINodeManagement::setUpgradeOptions(const OAIAutoUpgradeOptions &upgrade_options) {
    m_upgrade_options = upgrade_options;
    m_upgrade_options_isSet = true;
}

bool OAINodeManagement::is_upgrade_options_Set() const{
    return m_upgrade_options_isSet;
}

bool OAINodeManagement::is_upgrade_options_Valid() const{
    return m_upgrade_options_isValid;
}

bool OAINodeManagement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_repair_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeManagement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
