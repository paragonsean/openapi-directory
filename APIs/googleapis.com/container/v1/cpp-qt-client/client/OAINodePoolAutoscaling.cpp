/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodePoolAutoscaling.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodePoolAutoscaling::OAINodePoolAutoscaling(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodePoolAutoscaling::OAINodePoolAutoscaling() {
    this->initializeModel();
}

OAINodePoolAutoscaling::~OAINodePoolAutoscaling() {}

void OAINodePoolAutoscaling::initializeModel() {

    m_autoprovisioned_isSet = false;
    m_autoprovisioned_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_location_policy_isSet = false;
    m_location_policy_isValid = false;

    m_max_node_count_isSet = false;
    m_max_node_count_isValid = false;

    m_min_node_count_isSet = false;
    m_min_node_count_isValid = false;

    m_total_max_node_count_isSet = false;
    m_total_max_node_count_isValid = false;

    m_total_min_node_count_isSet = false;
    m_total_min_node_count_isValid = false;
}

void OAINodePoolAutoscaling::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodePoolAutoscaling::fromJsonObject(QJsonObject json) {

    m_autoprovisioned_isValid = ::OpenAPI::fromJsonValue(m_autoprovisioned, json[QString("autoprovisioned")]);
    m_autoprovisioned_isSet = !json[QString("autoprovisioned")].isNull() && m_autoprovisioned_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_location_policy_isValid = ::OpenAPI::fromJsonValue(m_location_policy, json[QString("locationPolicy")]);
    m_location_policy_isSet = !json[QString("locationPolicy")].isNull() && m_location_policy_isValid;

    m_max_node_count_isValid = ::OpenAPI::fromJsonValue(m_max_node_count, json[QString("maxNodeCount")]);
    m_max_node_count_isSet = !json[QString("maxNodeCount")].isNull() && m_max_node_count_isValid;

    m_min_node_count_isValid = ::OpenAPI::fromJsonValue(m_min_node_count, json[QString("minNodeCount")]);
    m_min_node_count_isSet = !json[QString("minNodeCount")].isNull() && m_min_node_count_isValid;

    m_total_max_node_count_isValid = ::OpenAPI::fromJsonValue(m_total_max_node_count, json[QString("totalMaxNodeCount")]);
    m_total_max_node_count_isSet = !json[QString("totalMaxNodeCount")].isNull() && m_total_max_node_count_isValid;

    m_total_min_node_count_isValid = ::OpenAPI::fromJsonValue(m_total_min_node_count, json[QString("totalMinNodeCount")]);
    m_total_min_node_count_isSet = !json[QString("totalMinNodeCount")].isNull() && m_total_min_node_count_isValid;
}

QString OAINodePoolAutoscaling::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodePoolAutoscaling::asJsonObject() const {
    QJsonObject obj;
    if (m_autoprovisioned_isSet) {
        obj.insert(QString("autoprovisioned"), ::OpenAPI::toJsonValue(m_autoprovisioned));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_location_policy_isSet) {
        obj.insert(QString("locationPolicy"), ::OpenAPI::toJsonValue(m_location_policy));
    }
    if (m_max_node_count_isSet) {
        obj.insert(QString("maxNodeCount"), ::OpenAPI::toJsonValue(m_max_node_count));
    }
    if (m_min_node_count_isSet) {
        obj.insert(QString("minNodeCount"), ::OpenAPI::toJsonValue(m_min_node_count));
    }
    if (m_total_max_node_count_isSet) {
        obj.insert(QString("totalMaxNodeCount"), ::OpenAPI::toJsonValue(m_total_max_node_count));
    }
    if (m_total_min_node_count_isSet) {
        obj.insert(QString("totalMinNodeCount"), ::OpenAPI::toJsonValue(m_total_min_node_count));
    }
    return obj;
}

bool OAINodePoolAutoscaling::isAutoprovisioned() const {
    return m_autoprovisioned;
}
void OAINodePoolAutoscaling::setAutoprovisioned(const bool &autoprovisioned) {
    m_autoprovisioned = autoprovisioned;
    m_autoprovisioned_isSet = true;
}

bool OAINodePoolAutoscaling::is_autoprovisioned_Set() const{
    return m_autoprovisioned_isSet;
}

bool OAINodePoolAutoscaling::is_autoprovisioned_Valid() const{
    return m_autoprovisioned_isValid;
}

bool OAINodePoolAutoscaling::isEnabled() const {
    return m_enabled;
}
void OAINodePoolAutoscaling::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAINodePoolAutoscaling::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAINodePoolAutoscaling::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAINodePoolAutoscaling::getLocationPolicy() const {
    return m_location_policy;
}
void OAINodePoolAutoscaling::setLocationPolicy(const QString &location_policy) {
    m_location_policy = location_policy;
    m_location_policy_isSet = true;
}

bool OAINodePoolAutoscaling::is_location_policy_Set() const{
    return m_location_policy_isSet;
}

bool OAINodePoolAutoscaling::is_location_policy_Valid() const{
    return m_location_policy_isValid;
}

qint32 OAINodePoolAutoscaling::getMaxNodeCount() const {
    return m_max_node_count;
}
void OAINodePoolAutoscaling::setMaxNodeCount(const qint32 &max_node_count) {
    m_max_node_count = max_node_count;
    m_max_node_count_isSet = true;
}

bool OAINodePoolAutoscaling::is_max_node_count_Set() const{
    return m_max_node_count_isSet;
}

bool OAINodePoolAutoscaling::is_max_node_count_Valid() const{
    return m_max_node_count_isValid;
}

qint32 OAINodePoolAutoscaling::getMinNodeCount() const {
    return m_min_node_count;
}
void OAINodePoolAutoscaling::setMinNodeCount(const qint32 &min_node_count) {
    m_min_node_count = min_node_count;
    m_min_node_count_isSet = true;
}

bool OAINodePoolAutoscaling::is_min_node_count_Set() const{
    return m_min_node_count_isSet;
}

bool OAINodePoolAutoscaling::is_min_node_count_Valid() const{
    return m_min_node_count_isValid;
}

qint32 OAINodePoolAutoscaling::getTotalMaxNodeCount() const {
    return m_total_max_node_count;
}
void OAINodePoolAutoscaling::setTotalMaxNodeCount(const qint32 &total_max_node_count) {
    m_total_max_node_count = total_max_node_count;
    m_total_max_node_count_isSet = true;
}

bool OAINodePoolAutoscaling::is_total_max_node_count_Set() const{
    return m_total_max_node_count_isSet;
}

bool OAINodePoolAutoscaling::is_total_max_node_count_Valid() const{
    return m_total_max_node_count_isValid;
}

qint32 OAINodePoolAutoscaling::getTotalMinNodeCount() const {
    return m_total_min_node_count;
}
void OAINodePoolAutoscaling::setTotalMinNodeCount(const qint32 &total_min_node_count) {
    m_total_min_node_count = total_min_node_count;
    m_total_min_node_count_isSet = true;
}

bool OAINodePoolAutoscaling::is_total_min_node_count_Set() const{
    return m_total_min_node_count_isSet;
}

bool OAINodePoolAutoscaling::is_total_min_node_count_Valid() const{
    return m_total_min_node_count_isValid;
}

bool OAINodePoolAutoscaling::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_autoprovisioned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_max_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_min_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodePoolAutoscaling::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
