/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFleet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFleet::OAIFleet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFleet::OAIFleet() {
    this->initializeModel();
}

OAIFleet::~OAIFleet() {}

void OAIFleet::initializeModel() {

    m_membership_isSet = false;
    m_membership_isValid = false;

    m_pre_registered_isSet = false;
    m_pre_registered_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;
}

void OAIFleet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFleet::fromJsonObject(QJsonObject json) {

    m_membership_isValid = ::OpenAPI::fromJsonValue(m_membership, json[QString("membership")]);
    m_membership_isSet = !json[QString("membership")].isNull() && m_membership_isValid;

    m_pre_registered_isValid = ::OpenAPI::fromJsonValue(m_pre_registered, json[QString("preRegistered")]);
    m_pre_registered_isSet = !json[QString("preRegistered")].isNull() && m_pre_registered_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;
}

QString OAIFleet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFleet::asJsonObject() const {
    QJsonObject obj;
    if (m_membership_isSet) {
        obj.insert(QString("membership"), ::OpenAPI::toJsonValue(m_membership));
    }
    if (m_pre_registered_isSet) {
        obj.insert(QString("preRegistered"), ::OpenAPI::toJsonValue(m_pre_registered));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    return obj;
}

QString OAIFleet::getMembership() const {
    return m_membership;
}
void OAIFleet::setMembership(const QString &membership) {
    m_membership = membership;
    m_membership_isSet = true;
}

bool OAIFleet::is_membership_Set() const{
    return m_membership_isSet;
}

bool OAIFleet::is_membership_Valid() const{
    return m_membership_isValid;
}

bool OAIFleet::isPreRegistered() const {
    return m_pre_registered;
}
void OAIFleet::setPreRegistered(const bool &pre_registered) {
    m_pre_registered = pre_registered;
    m_pre_registered_isSet = true;
}

bool OAIFleet::is_pre_registered_Set() const{
    return m_pre_registered_isSet;
}

bool OAIFleet::is_pre_registered_Valid() const{
    return m_pre_registered_isValid;
}

QString OAIFleet::getProject() const {
    return m_project;
}
void OAIFleet::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIFleet::is_project_Set() const{
    return m_project_isSet;
}

bool OAIFleet::is_project_Valid() const{
    return m_project_isValid;
}

bool OAIFleet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_membership_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_registered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFleet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
