/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINodePool.h
 *
 * NodePool contains the name and configuration for a cluster&#39;s node pool. Node pools are a set of nodes (i.e. VM&#39;s), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.
 */

#ifndef OAINodePool_H
#define OAINodePool_H

#include <QJsonObject>

#include "OAIBestEffortProvisioning.h"
#include "OAIMaxPodsConstraint.h"
#include "OAINodeConfig.h"
#include "OAINodeManagement.h"
#include "OAINodeNetworkConfig.h"
#include "OAINodePoolAutoscaling.h"
#include "OAIPlacementPolicy.h"
#include "OAIQueuedProvisioning.h"
#include "OAIStatusCondition.h"
#include "OAIUpdateInfo.h"
#include "OAIUpgradeSettings.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINodePoolAutoscaling;
class OAIBestEffortProvisioning;
class OAIStatusCondition;
class OAINodeConfig;
class OAINodeManagement;
class OAIMaxPodsConstraint;
class OAINodeNetworkConfig;
class OAIPlacementPolicy;
class OAIQueuedProvisioning;
class OAIUpdateInfo;
class OAIUpgradeSettings;

class OAINodePool : public OAIObject {
public:
    OAINodePool();
    OAINodePool(QString json);
    ~OAINodePool() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAINodePoolAutoscaling getAutoscaling() const;
    void setAutoscaling(const OAINodePoolAutoscaling &autoscaling);
    bool is_autoscaling_Set() const;
    bool is_autoscaling_Valid() const;

    OAIBestEffortProvisioning getBestEffortProvisioning() const;
    void setBestEffortProvisioning(const OAIBestEffortProvisioning &best_effort_provisioning);
    bool is_best_effort_provisioning_Set() const;
    bool is_best_effort_provisioning_Valid() const;

    QList<OAIStatusCondition> getConditions() const;
    void setConditions(const QList<OAIStatusCondition> &conditions);
    bool is_conditions_Set() const;
    bool is_conditions_Valid() const;

    OAINodeConfig getConfig() const;
    void setConfig(const OAINodeConfig &config);
    bool is_config_Set() const;
    bool is_config_Valid() const;

    QString getEtag() const;
    void setEtag(const QString &etag);
    bool is_etag_Set() const;
    bool is_etag_Valid() const;

    qint32 getInitialNodeCount() const;
    void setInitialNodeCount(const qint32 &initial_node_count);
    bool is_initial_node_count_Set() const;
    bool is_initial_node_count_Valid() const;

    QList<QString> getInstanceGroupUrls() const;
    void setInstanceGroupUrls(const QList<QString> &instance_group_urls);
    bool is_instance_group_urls_Set() const;
    bool is_instance_group_urls_Valid() const;

    QList<QString> getLocations() const;
    void setLocations(const QList<QString> &locations);
    bool is_locations_Set() const;
    bool is_locations_Valid() const;

    OAINodeManagement getManagement() const;
    void setManagement(const OAINodeManagement &management);
    bool is_management_Set() const;
    bool is_management_Valid() const;

    OAIMaxPodsConstraint getMaxPodsConstraint() const;
    void setMaxPodsConstraint(const OAIMaxPodsConstraint &max_pods_constraint);
    bool is_max_pods_constraint_Set() const;
    bool is_max_pods_constraint_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAINodeNetworkConfig getNetworkConfig() const;
    void setNetworkConfig(const OAINodeNetworkConfig &network_config);
    bool is_network_config_Set() const;
    bool is_network_config_Valid() const;

    OAIPlacementPolicy getPlacementPolicy() const;
    void setPlacementPolicy(const OAIPlacementPolicy &placement_policy);
    bool is_placement_policy_Set() const;
    bool is_placement_policy_Valid() const;

    qint32 getPodIpv4CidrSize() const;
    void setPodIpv4CidrSize(const qint32 &pod_ipv4_cidr_size);
    bool is_pod_ipv4_cidr_size_Set() const;
    bool is_pod_ipv4_cidr_size_Valid() const;

    OAIQueuedProvisioning getQueuedProvisioning() const;
    void setQueuedProvisioning(const OAIQueuedProvisioning &queued_provisioning);
    bool is_queued_provisioning_Set() const;
    bool is_queued_provisioning_Valid() const;

    QString getSelfLink() const;
    void setSelfLink(const QString &self_link);
    bool is_self_link_Set() const;
    bool is_self_link_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    Q_DECL_DEPRECATED QString getStatusMessage() const;
    Q_DECL_DEPRECATED void setStatusMessage(const QString &status_message);
    Q_DECL_DEPRECATED bool is_status_message_Set() const;
    Q_DECL_DEPRECATED bool is_status_message_Valid() const;

    OAIUpdateInfo getUpdateInfo() const;
    void setUpdateInfo(const OAIUpdateInfo &update_info);
    bool is_update_info_Set() const;
    bool is_update_info_Valid() const;

    OAIUpgradeSettings getUpgradeSettings() const;
    void setUpgradeSettings(const OAIUpgradeSettings &upgrade_settings);
    bool is_upgrade_settings_Set() const;
    bool is_upgrade_settings_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAINodePoolAutoscaling m_autoscaling;
    bool m_autoscaling_isSet;
    bool m_autoscaling_isValid;

    OAIBestEffortProvisioning m_best_effort_provisioning;
    bool m_best_effort_provisioning_isSet;
    bool m_best_effort_provisioning_isValid;

    QList<OAIStatusCondition> m_conditions;
    bool m_conditions_isSet;
    bool m_conditions_isValid;

    OAINodeConfig m_config;
    bool m_config_isSet;
    bool m_config_isValid;

    QString m_etag;
    bool m_etag_isSet;
    bool m_etag_isValid;

    qint32 m_initial_node_count;
    bool m_initial_node_count_isSet;
    bool m_initial_node_count_isValid;

    QList<QString> m_instance_group_urls;
    bool m_instance_group_urls_isSet;
    bool m_instance_group_urls_isValid;

    QList<QString> m_locations;
    bool m_locations_isSet;
    bool m_locations_isValid;

    OAINodeManagement m_management;
    bool m_management_isSet;
    bool m_management_isValid;

    OAIMaxPodsConstraint m_max_pods_constraint;
    bool m_max_pods_constraint_isSet;
    bool m_max_pods_constraint_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAINodeNetworkConfig m_network_config;
    bool m_network_config_isSet;
    bool m_network_config_isValid;

    OAIPlacementPolicy m_placement_policy;
    bool m_placement_policy_isSet;
    bool m_placement_policy_isValid;

    qint32 m_pod_ipv4_cidr_size;
    bool m_pod_ipv4_cidr_size_isSet;
    bool m_pod_ipv4_cidr_size_isValid;

    OAIQueuedProvisioning m_queued_provisioning;
    bool m_queued_provisioning_isSet;
    bool m_queued_provisioning_isValid;

    QString m_self_link;
    bool m_self_link_isSet;
    bool m_self_link_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_status_message;
    bool m_status_message_isSet;
    bool m_status_message_isValid;

    OAIUpdateInfo m_update_info;
    bool m_update_info_isSet;
    bool m_update_info_isValid;

    OAIUpgradeSettings m_upgrade_settings;
    bool m_upgrade_settings_isSet;
    bool m_upgrade_settings_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINodePool)

#endif // OAINodePool_H
