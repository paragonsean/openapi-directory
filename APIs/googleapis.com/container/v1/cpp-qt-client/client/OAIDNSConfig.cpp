/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDNSConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDNSConfig::OAIDNSConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDNSConfig::OAIDNSConfig() {
    this->initializeModel();
}

OAIDNSConfig::~OAIDNSConfig() {}

void OAIDNSConfig::initializeModel() {

    m_cluster_dns_isSet = false;
    m_cluster_dns_isValid = false;

    m_cluster_dns_domain_isSet = false;
    m_cluster_dns_domain_isValid = false;

    m_cluster_dns_scope_isSet = false;
    m_cluster_dns_scope_isValid = false;
}

void OAIDNSConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDNSConfig::fromJsonObject(QJsonObject json) {

    m_cluster_dns_isValid = ::OpenAPI::fromJsonValue(m_cluster_dns, json[QString("clusterDns")]);
    m_cluster_dns_isSet = !json[QString("clusterDns")].isNull() && m_cluster_dns_isValid;

    m_cluster_dns_domain_isValid = ::OpenAPI::fromJsonValue(m_cluster_dns_domain, json[QString("clusterDnsDomain")]);
    m_cluster_dns_domain_isSet = !json[QString("clusterDnsDomain")].isNull() && m_cluster_dns_domain_isValid;

    m_cluster_dns_scope_isValid = ::OpenAPI::fromJsonValue(m_cluster_dns_scope, json[QString("clusterDnsScope")]);
    m_cluster_dns_scope_isSet = !json[QString("clusterDnsScope")].isNull() && m_cluster_dns_scope_isValid;
}

QString OAIDNSConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDNSConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_dns_isSet) {
        obj.insert(QString("clusterDns"), ::OpenAPI::toJsonValue(m_cluster_dns));
    }
    if (m_cluster_dns_domain_isSet) {
        obj.insert(QString("clusterDnsDomain"), ::OpenAPI::toJsonValue(m_cluster_dns_domain));
    }
    if (m_cluster_dns_scope_isSet) {
        obj.insert(QString("clusterDnsScope"), ::OpenAPI::toJsonValue(m_cluster_dns_scope));
    }
    return obj;
}

QString OAIDNSConfig::getClusterDns() const {
    return m_cluster_dns;
}
void OAIDNSConfig::setClusterDns(const QString &cluster_dns) {
    m_cluster_dns = cluster_dns;
    m_cluster_dns_isSet = true;
}

bool OAIDNSConfig::is_cluster_dns_Set() const{
    return m_cluster_dns_isSet;
}

bool OAIDNSConfig::is_cluster_dns_Valid() const{
    return m_cluster_dns_isValid;
}

QString OAIDNSConfig::getClusterDnsDomain() const {
    return m_cluster_dns_domain;
}
void OAIDNSConfig::setClusterDnsDomain(const QString &cluster_dns_domain) {
    m_cluster_dns_domain = cluster_dns_domain;
    m_cluster_dns_domain_isSet = true;
}

bool OAIDNSConfig::is_cluster_dns_domain_Set() const{
    return m_cluster_dns_domain_isSet;
}

bool OAIDNSConfig::is_cluster_dns_domain_Valid() const{
    return m_cluster_dns_domain_isValid;
}

QString OAIDNSConfig::getClusterDnsScope() const {
    return m_cluster_dns_scope;
}
void OAIDNSConfig::setClusterDnsScope(const QString &cluster_dns_scope) {
    m_cluster_dns_scope = cluster_dns_scope;
    m_cluster_dns_scope_isSet = true;
}

bool OAIDNSConfig::is_cluster_dns_scope_Set() const{
    return m_cluster_dns_scope_isSet;
}

bool OAIDNSConfig::is_cluster_dns_scope_Valid() const{
    return m_cluster_dns_scope_isValid;
}

bool OAIDNSConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_dns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_dns_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_dns_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDNSConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
