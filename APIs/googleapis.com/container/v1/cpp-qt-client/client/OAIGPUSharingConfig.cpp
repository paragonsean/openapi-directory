/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGPUSharingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGPUSharingConfig::OAIGPUSharingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGPUSharingConfig::OAIGPUSharingConfig() {
    this->initializeModel();
}

OAIGPUSharingConfig::~OAIGPUSharingConfig() {}

void OAIGPUSharingConfig::initializeModel() {

    m_gpu_sharing_strategy_isSet = false;
    m_gpu_sharing_strategy_isValid = false;

    m_max_shared_clients_per_gpu_isSet = false;
    m_max_shared_clients_per_gpu_isValid = false;
}

void OAIGPUSharingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGPUSharingConfig::fromJsonObject(QJsonObject json) {

    m_gpu_sharing_strategy_isValid = ::OpenAPI::fromJsonValue(m_gpu_sharing_strategy, json[QString("gpuSharingStrategy")]);
    m_gpu_sharing_strategy_isSet = !json[QString("gpuSharingStrategy")].isNull() && m_gpu_sharing_strategy_isValid;

    m_max_shared_clients_per_gpu_isValid = ::OpenAPI::fromJsonValue(m_max_shared_clients_per_gpu, json[QString("maxSharedClientsPerGpu")]);
    m_max_shared_clients_per_gpu_isSet = !json[QString("maxSharedClientsPerGpu")].isNull() && m_max_shared_clients_per_gpu_isValid;
}

QString OAIGPUSharingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGPUSharingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_gpu_sharing_strategy_isSet) {
        obj.insert(QString("gpuSharingStrategy"), ::OpenAPI::toJsonValue(m_gpu_sharing_strategy));
    }
    if (m_max_shared_clients_per_gpu_isSet) {
        obj.insert(QString("maxSharedClientsPerGpu"), ::OpenAPI::toJsonValue(m_max_shared_clients_per_gpu));
    }
    return obj;
}

QString OAIGPUSharingConfig::getGpuSharingStrategy() const {
    return m_gpu_sharing_strategy;
}
void OAIGPUSharingConfig::setGpuSharingStrategy(const QString &gpu_sharing_strategy) {
    m_gpu_sharing_strategy = gpu_sharing_strategy;
    m_gpu_sharing_strategy_isSet = true;
}

bool OAIGPUSharingConfig::is_gpu_sharing_strategy_Set() const{
    return m_gpu_sharing_strategy_isSet;
}

bool OAIGPUSharingConfig::is_gpu_sharing_strategy_Valid() const{
    return m_gpu_sharing_strategy_isValid;
}

QString OAIGPUSharingConfig::getMaxSharedClientsPerGpu() const {
    return m_max_shared_clients_per_gpu;
}
void OAIGPUSharingConfig::setMaxSharedClientsPerGpu(const QString &max_shared_clients_per_gpu) {
    m_max_shared_clients_per_gpu = max_shared_clients_per_gpu;
    m_max_shared_clients_per_gpu_isSet = true;
}

bool OAIGPUSharingConfig::is_max_shared_clients_per_gpu_Set() const{
    return m_max_shared_clients_per_gpu_isSet;
}

bool OAIGPUSharingConfig::is_max_shared_clients_per_gpu_Valid() const{
    return m_max_shared_clients_per_gpu_isValid;
}

bool OAIGPUSharingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gpu_sharing_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_shared_clients_per_gpu_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGPUSharingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
