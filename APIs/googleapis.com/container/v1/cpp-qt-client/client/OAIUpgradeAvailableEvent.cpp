/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpgradeAvailableEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpgradeAvailableEvent::OAIUpgradeAvailableEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpgradeAvailableEvent::OAIUpgradeAvailableEvent() {
    this->initializeModel();
}

OAIUpgradeAvailableEvent::~OAIUpgradeAvailableEvent() {}

void OAIUpgradeAvailableEvent::initializeModel() {

    m_release_channel_isSet = false;
    m_release_channel_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIUpgradeAvailableEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpgradeAvailableEvent::fromJsonObject(QJsonObject json) {

    m_release_channel_isValid = ::OpenAPI::fromJsonValue(m_release_channel, json[QString("releaseChannel")]);
    m_release_channel_isSet = !json[QString("releaseChannel")].isNull() && m_release_channel_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIUpgradeAvailableEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpgradeAvailableEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_release_channel.isSet()) {
        obj.insert(QString("releaseChannel"), ::OpenAPI::toJsonValue(m_release_channel));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIReleaseChannel OAIUpgradeAvailableEvent::getReleaseChannel() const {
    return m_release_channel;
}
void OAIUpgradeAvailableEvent::setReleaseChannel(const OAIReleaseChannel &release_channel) {
    m_release_channel = release_channel;
    m_release_channel_isSet = true;
}

bool OAIUpgradeAvailableEvent::is_release_channel_Set() const{
    return m_release_channel_isSet;
}

bool OAIUpgradeAvailableEvent::is_release_channel_Valid() const{
    return m_release_channel_isValid;
}

QString OAIUpgradeAvailableEvent::getResource() const {
    return m_resource;
}
void OAIUpgradeAvailableEvent::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIUpgradeAvailableEvent::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIUpgradeAvailableEvent::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIUpgradeAvailableEvent::getResourceType() const {
    return m_resource_type;
}
void OAIUpgradeAvailableEvent::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIUpgradeAvailableEvent::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIUpgradeAvailableEvent::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIUpgradeAvailableEvent::getVersion() const {
    return m_version;
}
void OAIUpgradeAvailableEvent::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIUpgradeAvailableEvent::is_version_Set() const{
    return m_version_isSet;
}

bool OAIUpgradeAvailableEvent::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIUpgradeAvailableEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_release_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpgradeAvailableEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
