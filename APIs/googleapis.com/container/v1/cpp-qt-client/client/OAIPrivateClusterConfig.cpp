/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateClusterConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateClusterConfig::OAIPrivateClusterConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateClusterConfig::OAIPrivateClusterConfig() {
    this->initializeModel();
}

OAIPrivateClusterConfig::~OAIPrivateClusterConfig() {}

void OAIPrivateClusterConfig::initializeModel() {

    m_enable_private_endpoint_isSet = false;
    m_enable_private_endpoint_isValid = false;

    m_enable_private_nodes_isSet = false;
    m_enable_private_nodes_isValid = false;

    m_master_global_access_config_isSet = false;
    m_master_global_access_config_isValid = false;

    m_master_ipv4_cidr_block_isSet = false;
    m_master_ipv4_cidr_block_isValid = false;

    m_peering_name_isSet = false;
    m_peering_name_isValid = false;

    m_private_endpoint_isSet = false;
    m_private_endpoint_isValid = false;

    m_private_endpoint_subnetwork_isSet = false;
    m_private_endpoint_subnetwork_isValid = false;

    m_public_endpoint_isSet = false;
    m_public_endpoint_isValid = false;
}

void OAIPrivateClusterConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateClusterConfig::fromJsonObject(QJsonObject json) {

    m_enable_private_endpoint_isValid = ::OpenAPI::fromJsonValue(m_enable_private_endpoint, json[QString("enablePrivateEndpoint")]);
    m_enable_private_endpoint_isSet = !json[QString("enablePrivateEndpoint")].isNull() && m_enable_private_endpoint_isValid;

    m_enable_private_nodes_isValid = ::OpenAPI::fromJsonValue(m_enable_private_nodes, json[QString("enablePrivateNodes")]);
    m_enable_private_nodes_isSet = !json[QString("enablePrivateNodes")].isNull() && m_enable_private_nodes_isValid;

    m_master_global_access_config_isValid = ::OpenAPI::fromJsonValue(m_master_global_access_config, json[QString("masterGlobalAccessConfig")]);
    m_master_global_access_config_isSet = !json[QString("masterGlobalAccessConfig")].isNull() && m_master_global_access_config_isValid;

    m_master_ipv4_cidr_block_isValid = ::OpenAPI::fromJsonValue(m_master_ipv4_cidr_block, json[QString("masterIpv4CidrBlock")]);
    m_master_ipv4_cidr_block_isSet = !json[QString("masterIpv4CidrBlock")].isNull() && m_master_ipv4_cidr_block_isValid;

    m_peering_name_isValid = ::OpenAPI::fromJsonValue(m_peering_name, json[QString("peeringName")]);
    m_peering_name_isSet = !json[QString("peeringName")].isNull() && m_peering_name_isValid;

    m_private_endpoint_isValid = ::OpenAPI::fromJsonValue(m_private_endpoint, json[QString("privateEndpoint")]);
    m_private_endpoint_isSet = !json[QString("privateEndpoint")].isNull() && m_private_endpoint_isValid;

    m_private_endpoint_subnetwork_isValid = ::OpenAPI::fromJsonValue(m_private_endpoint_subnetwork, json[QString("privateEndpointSubnetwork")]);
    m_private_endpoint_subnetwork_isSet = !json[QString("privateEndpointSubnetwork")].isNull() && m_private_endpoint_subnetwork_isValid;

    m_public_endpoint_isValid = ::OpenAPI::fromJsonValue(m_public_endpoint, json[QString("publicEndpoint")]);
    m_public_endpoint_isSet = !json[QString("publicEndpoint")].isNull() && m_public_endpoint_isValid;
}

QString OAIPrivateClusterConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateClusterConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_private_endpoint_isSet) {
        obj.insert(QString("enablePrivateEndpoint"), ::OpenAPI::toJsonValue(m_enable_private_endpoint));
    }
    if (m_enable_private_nodes_isSet) {
        obj.insert(QString("enablePrivateNodes"), ::OpenAPI::toJsonValue(m_enable_private_nodes));
    }
    if (m_master_global_access_config.isSet()) {
        obj.insert(QString("masterGlobalAccessConfig"), ::OpenAPI::toJsonValue(m_master_global_access_config));
    }
    if (m_master_ipv4_cidr_block_isSet) {
        obj.insert(QString("masterIpv4CidrBlock"), ::OpenAPI::toJsonValue(m_master_ipv4_cidr_block));
    }
    if (m_peering_name_isSet) {
        obj.insert(QString("peeringName"), ::OpenAPI::toJsonValue(m_peering_name));
    }
    if (m_private_endpoint_isSet) {
        obj.insert(QString("privateEndpoint"), ::OpenAPI::toJsonValue(m_private_endpoint));
    }
    if (m_private_endpoint_subnetwork_isSet) {
        obj.insert(QString("privateEndpointSubnetwork"), ::OpenAPI::toJsonValue(m_private_endpoint_subnetwork));
    }
    if (m_public_endpoint_isSet) {
        obj.insert(QString("publicEndpoint"), ::OpenAPI::toJsonValue(m_public_endpoint));
    }
    return obj;
}

bool OAIPrivateClusterConfig::isEnablePrivateEndpoint() const {
    return m_enable_private_endpoint;
}
void OAIPrivateClusterConfig::setEnablePrivateEndpoint(const bool &enable_private_endpoint) {
    m_enable_private_endpoint = enable_private_endpoint;
    m_enable_private_endpoint_isSet = true;
}

bool OAIPrivateClusterConfig::is_enable_private_endpoint_Set() const{
    return m_enable_private_endpoint_isSet;
}

bool OAIPrivateClusterConfig::is_enable_private_endpoint_Valid() const{
    return m_enable_private_endpoint_isValid;
}

bool OAIPrivateClusterConfig::isEnablePrivateNodes() const {
    return m_enable_private_nodes;
}
void OAIPrivateClusterConfig::setEnablePrivateNodes(const bool &enable_private_nodes) {
    m_enable_private_nodes = enable_private_nodes;
    m_enable_private_nodes_isSet = true;
}

bool OAIPrivateClusterConfig::is_enable_private_nodes_Set() const{
    return m_enable_private_nodes_isSet;
}

bool OAIPrivateClusterConfig::is_enable_private_nodes_Valid() const{
    return m_enable_private_nodes_isValid;
}

OAIPrivateClusterMasterGlobalAccessConfig OAIPrivateClusterConfig::getMasterGlobalAccessConfig() const {
    return m_master_global_access_config;
}
void OAIPrivateClusterConfig::setMasterGlobalAccessConfig(const OAIPrivateClusterMasterGlobalAccessConfig &master_global_access_config) {
    m_master_global_access_config = master_global_access_config;
    m_master_global_access_config_isSet = true;
}

bool OAIPrivateClusterConfig::is_master_global_access_config_Set() const{
    return m_master_global_access_config_isSet;
}

bool OAIPrivateClusterConfig::is_master_global_access_config_Valid() const{
    return m_master_global_access_config_isValid;
}

QString OAIPrivateClusterConfig::getMasterIpv4CidrBlock() const {
    return m_master_ipv4_cidr_block;
}
void OAIPrivateClusterConfig::setMasterIpv4CidrBlock(const QString &master_ipv4_cidr_block) {
    m_master_ipv4_cidr_block = master_ipv4_cidr_block;
    m_master_ipv4_cidr_block_isSet = true;
}

bool OAIPrivateClusterConfig::is_master_ipv4_cidr_block_Set() const{
    return m_master_ipv4_cidr_block_isSet;
}

bool OAIPrivateClusterConfig::is_master_ipv4_cidr_block_Valid() const{
    return m_master_ipv4_cidr_block_isValid;
}

QString OAIPrivateClusterConfig::getPeeringName() const {
    return m_peering_name;
}
void OAIPrivateClusterConfig::setPeeringName(const QString &peering_name) {
    m_peering_name = peering_name;
    m_peering_name_isSet = true;
}

bool OAIPrivateClusterConfig::is_peering_name_Set() const{
    return m_peering_name_isSet;
}

bool OAIPrivateClusterConfig::is_peering_name_Valid() const{
    return m_peering_name_isValid;
}

QString OAIPrivateClusterConfig::getPrivateEndpoint() const {
    return m_private_endpoint;
}
void OAIPrivateClusterConfig::setPrivateEndpoint(const QString &private_endpoint) {
    m_private_endpoint = private_endpoint;
    m_private_endpoint_isSet = true;
}

bool OAIPrivateClusterConfig::is_private_endpoint_Set() const{
    return m_private_endpoint_isSet;
}

bool OAIPrivateClusterConfig::is_private_endpoint_Valid() const{
    return m_private_endpoint_isValid;
}

QString OAIPrivateClusterConfig::getPrivateEndpointSubnetwork() const {
    return m_private_endpoint_subnetwork;
}
void OAIPrivateClusterConfig::setPrivateEndpointSubnetwork(const QString &private_endpoint_subnetwork) {
    m_private_endpoint_subnetwork = private_endpoint_subnetwork;
    m_private_endpoint_subnetwork_isSet = true;
}

bool OAIPrivateClusterConfig::is_private_endpoint_subnetwork_Set() const{
    return m_private_endpoint_subnetwork_isSet;
}

bool OAIPrivateClusterConfig::is_private_endpoint_subnetwork_Valid() const{
    return m_private_endpoint_subnetwork_isValid;
}

QString OAIPrivateClusterConfig::getPublicEndpoint() const {
    return m_public_endpoint;
}
void OAIPrivateClusterConfig::setPublicEndpoint(const QString &public_endpoint) {
    m_public_endpoint = public_endpoint;
    m_public_endpoint_isSet = true;
}

bool OAIPrivateClusterConfig::is_public_endpoint_Set() const{
    return m_public_endpoint_isSet;
}

bool OAIPrivateClusterConfig::is_public_endpoint_Valid() const{
    return m_public_endpoint_isValid;
}

bool OAIPrivateClusterConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_private_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_private_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_global_access_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_ipv4_cidr_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peering_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_endpoint_subnetwork_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateClusterConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
