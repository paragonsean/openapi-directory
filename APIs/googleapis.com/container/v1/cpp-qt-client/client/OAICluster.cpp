/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICluster::OAICluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICluster::OAICluster() {
    this->initializeModel();
}

OAICluster::~OAICluster() {}

void OAICluster::initializeModel() {

    m_addons_config_isSet = false;
    m_addons_config_isValid = false;

    m_authenticator_groups_config_isSet = false;
    m_authenticator_groups_config_isValid = false;

    m_autopilot_isSet = false;
    m_autopilot_isValid = false;

    m_autoscaling_isSet = false;
    m_autoscaling_isValid = false;

    m_binary_authorization_isSet = false;
    m_binary_authorization_isValid = false;

    m_cluster_ipv4_cidr_isSet = false;
    m_cluster_ipv4_cidr_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_confidential_nodes_isSet = false;
    m_confidential_nodes_isValid = false;

    m_cost_management_config_isSet = false;
    m_cost_management_config_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_current_master_version_isSet = false;
    m_current_master_version_isValid = false;

    m_current_node_count_isSet = false;
    m_current_node_count_isValid = false;

    m_current_node_version_isSet = false;
    m_current_node_version_isValid = false;

    m_database_encryption_isSet = false;
    m_database_encryption_isValid = false;

    m_default_max_pods_constraint_isSet = false;
    m_default_max_pods_constraint_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enable_k8s_beta_apis_isSet = false;
    m_enable_k8s_beta_apis_isValid = false;

    m_enable_kubernetes_alpha_isSet = false;
    m_enable_kubernetes_alpha_isValid = false;

    m_enable_tpu_isSet = false;
    m_enable_tpu_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_enterprise_config_isSet = false;
    m_enterprise_config_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_fleet_isSet = false;
    m_fleet_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identity_service_config_isSet = false;
    m_identity_service_config_isValid = false;

    m_initial_cluster_version_isSet = false;
    m_initial_cluster_version_isValid = false;

    m_initial_node_count_isSet = false;
    m_initial_node_count_isValid = false;

    m_instance_group_urls_isSet = false;
    m_instance_group_urls_isValid = false;

    m_ip_allocation_policy_isSet = false;
    m_ip_allocation_policy_isValid = false;

    m_label_fingerprint_isSet = false;
    m_label_fingerprint_isValid = false;

    m_legacy_abac_isSet = false;
    m_legacy_abac_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_logging_config_isSet = false;
    m_logging_config_isValid = false;

    m_logging_service_isSet = false;
    m_logging_service_isValid = false;

    m_maintenance_policy_isSet = false;
    m_maintenance_policy_isValid = false;

    m_master_auth_isSet = false;
    m_master_auth_isValid = false;

    m_master_authorized_networks_config_isSet = false;
    m_master_authorized_networks_config_isValid = false;

    m_mesh_certificates_isSet = false;
    m_mesh_certificates_isValid = false;

    m_monitoring_config_isSet = false;
    m_monitoring_config_isValid = false;

    m_monitoring_service_isSet = false;
    m_monitoring_service_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_network_config_isSet = false;
    m_network_config_isValid = false;

    m_network_policy_isSet = false;
    m_network_policy_isValid = false;

    m_node_config_isSet = false;
    m_node_config_isValid = false;

    m_node_ipv4_cidr_size_isSet = false;
    m_node_ipv4_cidr_size_isValid = false;

    m_node_pool_auto_config_isSet = false;
    m_node_pool_auto_config_isValid = false;

    m_node_pool_defaults_isSet = false;
    m_node_pool_defaults_isValid = false;

    m_node_pools_isSet = false;
    m_node_pools_isValid = false;

    m_notification_config_isSet = false;
    m_notification_config_isValid = false;

    m_parent_product_config_isSet = false;
    m_parent_product_config_isValid = false;

    m_private_cluster_config_isSet = false;
    m_private_cluster_config_isValid = false;

    m_release_channel_isSet = false;
    m_release_channel_isValid = false;

    m_resource_labels_isSet = false;
    m_resource_labels_isValid = false;

    m_resource_usage_export_config_isSet = false;
    m_resource_usage_export_config_isValid = false;

    m_security_posture_config_isSet = false;
    m_security_posture_config_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_services_ipv4_cidr_isSet = false;
    m_services_ipv4_cidr_isValid = false;

    m_shielded_nodes_isSet = false;
    m_shielded_nodes_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_subnetwork_isSet = false;
    m_subnetwork_isValid = false;

    m_tpu_ipv4_cidr_block_isSet = false;
    m_tpu_ipv4_cidr_block_isValid = false;

    m_vertical_pod_autoscaling_isSet = false;
    m_vertical_pod_autoscaling_isValid = false;

    m_workload_identity_config_isSet = false;
    m_workload_identity_config_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAICluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICluster::fromJsonObject(QJsonObject json) {

    m_addons_config_isValid = ::OpenAPI::fromJsonValue(m_addons_config, json[QString("addonsConfig")]);
    m_addons_config_isSet = !json[QString("addonsConfig")].isNull() && m_addons_config_isValid;

    m_authenticator_groups_config_isValid = ::OpenAPI::fromJsonValue(m_authenticator_groups_config, json[QString("authenticatorGroupsConfig")]);
    m_authenticator_groups_config_isSet = !json[QString("authenticatorGroupsConfig")].isNull() && m_authenticator_groups_config_isValid;

    m_autopilot_isValid = ::OpenAPI::fromJsonValue(m_autopilot, json[QString("autopilot")]);
    m_autopilot_isSet = !json[QString("autopilot")].isNull() && m_autopilot_isValid;

    m_autoscaling_isValid = ::OpenAPI::fromJsonValue(m_autoscaling, json[QString("autoscaling")]);
    m_autoscaling_isSet = !json[QString("autoscaling")].isNull() && m_autoscaling_isValid;

    m_binary_authorization_isValid = ::OpenAPI::fromJsonValue(m_binary_authorization, json[QString("binaryAuthorization")]);
    m_binary_authorization_isSet = !json[QString("binaryAuthorization")].isNull() && m_binary_authorization_isValid;

    m_cluster_ipv4_cidr_isValid = ::OpenAPI::fromJsonValue(m_cluster_ipv4_cidr, json[QString("clusterIpv4Cidr")]);
    m_cluster_ipv4_cidr_isSet = !json[QString("clusterIpv4Cidr")].isNull() && m_cluster_ipv4_cidr_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_confidential_nodes_isValid = ::OpenAPI::fromJsonValue(m_confidential_nodes, json[QString("confidentialNodes")]);
    m_confidential_nodes_isSet = !json[QString("confidentialNodes")].isNull() && m_confidential_nodes_isValid;

    m_cost_management_config_isValid = ::OpenAPI::fromJsonValue(m_cost_management_config, json[QString("costManagementConfig")]);
    m_cost_management_config_isSet = !json[QString("costManagementConfig")].isNull() && m_cost_management_config_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_current_master_version_isValid = ::OpenAPI::fromJsonValue(m_current_master_version, json[QString("currentMasterVersion")]);
    m_current_master_version_isSet = !json[QString("currentMasterVersion")].isNull() && m_current_master_version_isValid;

    m_current_node_count_isValid = ::OpenAPI::fromJsonValue(m_current_node_count, json[QString("currentNodeCount")]);
    m_current_node_count_isSet = !json[QString("currentNodeCount")].isNull() && m_current_node_count_isValid;

    m_current_node_version_isValid = ::OpenAPI::fromJsonValue(m_current_node_version, json[QString("currentNodeVersion")]);
    m_current_node_version_isSet = !json[QString("currentNodeVersion")].isNull() && m_current_node_version_isValid;

    m_database_encryption_isValid = ::OpenAPI::fromJsonValue(m_database_encryption, json[QString("databaseEncryption")]);
    m_database_encryption_isSet = !json[QString("databaseEncryption")].isNull() && m_database_encryption_isValid;

    m_default_max_pods_constraint_isValid = ::OpenAPI::fromJsonValue(m_default_max_pods_constraint, json[QString("defaultMaxPodsConstraint")]);
    m_default_max_pods_constraint_isSet = !json[QString("defaultMaxPodsConstraint")].isNull() && m_default_max_pods_constraint_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enable_k8s_beta_apis_isValid = ::OpenAPI::fromJsonValue(m_enable_k8s_beta_apis, json[QString("enableK8sBetaApis")]);
    m_enable_k8s_beta_apis_isSet = !json[QString("enableK8sBetaApis")].isNull() && m_enable_k8s_beta_apis_isValid;

    m_enable_kubernetes_alpha_isValid = ::OpenAPI::fromJsonValue(m_enable_kubernetes_alpha, json[QString("enableKubernetesAlpha")]);
    m_enable_kubernetes_alpha_isSet = !json[QString("enableKubernetesAlpha")].isNull() && m_enable_kubernetes_alpha_isValid;

    m_enable_tpu_isValid = ::OpenAPI::fromJsonValue(m_enable_tpu, json[QString("enableTpu")]);
    m_enable_tpu_isSet = !json[QString("enableTpu")].isNull() && m_enable_tpu_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_enterprise_config_isValid = ::OpenAPI::fromJsonValue(m_enterprise_config, json[QString("enterpriseConfig")]);
    m_enterprise_config_isSet = !json[QString("enterpriseConfig")].isNull() && m_enterprise_config_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_fleet_isValid = ::OpenAPI::fromJsonValue(m_fleet, json[QString("fleet")]);
    m_fleet_isSet = !json[QString("fleet")].isNull() && m_fleet_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identity_service_config_isValid = ::OpenAPI::fromJsonValue(m_identity_service_config, json[QString("identityServiceConfig")]);
    m_identity_service_config_isSet = !json[QString("identityServiceConfig")].isNull() && m_identity_service_config_isValid;

    m_initial_cluster_version_isValid = ::OpenAPI::fromJsonValue(m_initial_cluster_version, json[QString("initialClusterVersion")]);
    m_initial_cluster_version_isSet = !json[QString("initialClusterVersion")].isNull() && m_initial_cluster_version_isValid;

    m_initial_node_count_isValid = ::OpenAPI::fromJsonValue(m_initial_node_count, json[QString("initialNodeCount")]);
    m_initial_node_count_isSet = !json[QString("initialNodeCount")].isNull() && m_initial_node_count_isValid;

    m_instance_group_urls_isValid = ::OpenAPI::fromJsonValue(m_instance_group_urls, json[QString("instanceGroupUrls")]);
    m_instance_group_urls_isSet = !json[QString("instanceGroupUrls")].isNull() && m_instance_group_urls_isValid;

    m_ip_allocation_policy_isValid = ::OpenAPI::fromJsonValue(m_ip_allocation_policy, json[QString("ipAllocationPolicy")]);
    m_ip_allocation_policy_isSet = !json[QString("ipAllocationPolicy")].isNull() && m_ip_allocation_policy_isValid;

    m_label_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_label_fingerprint, json[QString("labelFingerprint")]);
    m_label_fingerprint_isSet = !json[QString("labelFingerprint")].isNull() && m_label_fingerprint_isValid;

    m_legacy_abac_isValid = ::OpenAPI::fromJsonValue(m_legacy_abac, json[QString("legacyAbac")]);
    m_legacy_abac_isSet = !json[QString("legacyAbac")].isNull() && m_legacy_abac_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_logging_config_isValid = ::OpenAPI::fromJsonValue(m_logging_config, json[QString("loggingConfig")]);
    m_logging_config_isSet = !json[QString("loggingConfig")].isNull() && m_logging_config_isValid;

    m_logging_service_isValid = ::OpenAPI::fromJsonValue(m_logging_service, json[QString("loggingService")]);
    m_logging_service_isSet = !json[QString("loggingService")].isNull() && m_logging_service_isValid;

    m_maintenance_policy_isValid = ::OpenAPI::fromJsonValue(m_maintenance_policy, json[QString("maintenancePolicy")]);
    m_maintenance_policy_isSet = !json[QString("maintenancePolicy")].isNull() && m_maintenance_policy_isValid;

    m_master_auth_isValid = ::OpenAPI::fromJsonValue(m_master_auth, json[QString("masterAuth")]);
    m_master_auth_isSet = !json[QString("masterAuth")].isNull() && m_master_auth_isValid;

    m_master_authorized_networks_config_isValid = ::OpenAPI::fromJsonValue(m_master_authorized_networks_config, json[QString("masterAuthorizedNetworksConfig")]);
    m_master_authorized_networks_config_isSet = !json[QString("masterAuthorizedNetworksConfig")].isNull() && m_master_authorized_networks_config_isValid;

    m_mesh_certificates_isValid = ::OpenAPI::fromJsonValue(m_mesh_certificates, json[QString("meshCertificates")]);
    m_mesh_certificates_isSet = !json[QString("meshCertificates")].isNull() && m_mesh_certificates_isValid;

    m_monitoring_config_isValid = ::OpenAPI::fromJsonValue(m_monitoring_config, json[QString("monitoringConfig")]);
    m_monitoring_config_isSet = !json[QString("monitoringConfig")].isNull() && m_monitoring_config_isValid;

    m_monitoring_service_isValid = ::OpenAPI::fromJsonValue(m_monitoring_service, json[QString("monitoringService")]);
    m_monitoring_service_isSet = !json[QString("monitoringService")].isNull() && m_monitoring_service_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_network_config_isValid = ::OpenAPI::fromJsonValue(m_network_config, json[QString("networkConfig")]);
    m_network_config_isSet = !json[QString("networkConfig")].isNull() && m_network_config_isValid;

    m_network_policy_isValid = ::OpenAPI::fromJsonValue(m_network_policy, json[QString("networkPolicy")]);
    m_network_policy_isSet = !json[QString("networkPolicy")].isNull() && m_network_policy_isValid;

    m_node_config_isValid = ::OpenAPI::fromJsonValue(m_node_config, json[QString("nodeConfig")]);
    m_node_config_isSet = !json[QString("nodeConfig")].isNull() && m_node_config_isValid;

    m_node_ipv4_cidr_size_isValid = ::OpenAPI::fromJsonValue(m_node_ipv4_cidr_size, json[QString("nodeIpv4CidrSize")]);
    m_node_ipv4_cidr_size_isSet = !json[QString("nodeIpv4CidrSize")].isNull() && m_node_ipv4_cidr_size_isValid;

    m_node_pool_auto_config_isValid = ::OpenAPI::fromJsonValue(m_node_pool_auto_config, json[QString("nodePoolAutoConfig")]);
    m_node_pool_auto_config_isSet = !json[QString("nodePoolAutoConfig")].isNull() && m_node_pool_auto_config_isValid;

    m_node_pool_defaults_isValid = ::OpenAPI::fromJsonValue(m_node_pool_defaults, json[QString("nodePoolDefaults")]);
    m_node_pool_defaults_isSet = !json[QString("nodePoolDefaults")].isNull() && m_node_pool_defaults_isValid;

    m_node_pools_isValid = ::OpenAPI::fromJsonValue(m_node_pools, json[QString("nodePools")]);
    m_node_pools_isSet = !json[QString("nodePools")].isNull() && m_node_pools_isValid;

    m_notification_config_isValid = ::OpenAPI::fromJsonValue(m_notification_config, json[QString("notificationConfig")]);
    m_notification_config_isSet = !json[QString("notificationConfig")].isNull() && m_notification_config_isValid;

    m_parent_product_config_isValid = ::OpenAPI::fromJsonValue(m_parent_product_config, json[QString("parentProductConfig")]);
    m_parent_product_config_isSet = !json[QString("parentProductConfig")].isNull() && m_parent_product_config_isValid;

    m_private_cluster_config_isValid = ::OpenAPI::fromJsonValue(m_private_cluster_config, json[QString("privateClusterConfig")]);
    m_private_cluster_config_isSet = !json[QString("privateClusterConfig")].isNull() && m_private_cluster_config_isValid;

    m_release_channel_isValid = ::OpenAPI::fromJsonValue(m_release_channel, json[QString("releaseChannel")]);
    m_release_channel_isSet = !json[QString("releaseChannel")].isNull() && m_release_channel_isValid;

    m_resource_labels_isValid = ::OpenAPI::fromJsonValue(m_resource_labels, json[QString("resourceLabels")]);
    m_resource_labels_isSet = !json[QString("resourceLabels")].isNull() && m_resource_labels_isValid;

    m_resource_usage_export_config_isValid = ::OpenAPI::fromJsonValue(m_resource_usage_export_config, json[QString("resourceUsageExportConfig")]);
    m_resource_usage_export_config_isSet = !json[QString("resourceUsageExportConfig")].isNull() && m_resource_usage_export_config_isValid;

    m_security_posture_config_isValid = ::OpenAPI::fromJsonValue(m_security_posture_config, json[QString("securityPostureConfig")]);
    m_security_posture_config_isSet = !json[QString("securityPostureConfig")].isNull() && m_security_posture_config_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_services_ipv4_cidr_isValid = ::OpenAPI::fromJsonValue(m_services_ipv4_cidr, json[QString("servicesIpv4Cidr")]);
    m_services_ipv4_cidr_isSet = !json[QString("servicesIpv4Cidr")].isNull() && m_services_ipv4_cidr_isValid;

    m_shielded_nodes_isValid = ::OpenAPI::fromJsonValue(m_shielded_nodes, json[QString("shieldedNodes")]);
    m_shielded_nodes_isSet = !json[QString("shieldedNodes")].isNull() && m_shielded_nodes_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_subnetwork_isValid = ::OpenAPI::fromJsonValue(m_subnetwork, json[QString("subnetwork")]);
    m_subnetwork_isSet = !json[QString("subnetwork")].isNull() && m_subnetwork_isValid;

    m_tpu_ipv4_cidr_block_isValid = ::OpenAPI::fromJsonValue(m_tpu_ipv4_cidr_block, json[QString("tpuIpv4CidrBlock")]);
    m_tpu_ipv4_cidr_block_isSet = !json[QString("tpuIpv4CidrBlock")].isNull() && m_tpu_ipv4_cidr_block_isValid;

    m_vertical_pod_autoscaling_isValid = ::OpenAPI::fromJsonValue(m_vertical_pod_autoscaling, json[QString("verticalPodAutoscaling")]);
    m_vertical_pod_autoscaling_isSet = !json[QString("verticalPodAutoscaling")].isNull() && m_vertical_pod_autoscaling_isValid;

    m_workload_identity_config_isValid = ::OpenAPI::fromJsonValue(m_workload_identity_config, json[QString("workloadIdentityConfig")]);
    m_workload_identity_config_isSet = !json[QString("workloadIdentityConfig")].isNull() && m_workload_identity_config_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAICluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICluster::asJsonObject() const {
    QJsonObject obj;
    if (m_addons_config.isSet()) {
        obj.insert(QString("addonsConfig"), ::OpenAPI::toJsonValue(m_addons_config));
    }
    if (m_authenticator_groups_config.isSet()) {
        obj.insert(QString("authenticatorGroupsConfig"), ::OpenAPI::toJsonValue(m_authenticator_groups_config));
    }
    if (m_autopilot.isSet()) {
        obj.insert(QString("autopilot"), ::OpenAPI::toJsonValue(m_autopilot));
    }
    if (m_autoscaling.isSet()) {
        obj.insert(QString("autoscaling"), ::OpenAPI::toJsonValue(m_autoscaling));
    }
    if (m_binary_authorization.isSet()) {
        obj.insert(QString("binaryAuthorization"), ::OpenAPI::toJsonValue(m_binary_authorization));
    }
    if (m_cluster_ipv4_cidr_isSet) {
        obj.insert(QString("clusterIpv4Cidr"), ::OpenAPI::toJsonValue(m_cluster_ipv4_cidr));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_confidential_nodes.isSet()) {
        obj.insert(QString("confidentialNodes"), ::OpenAPI::toJsonValue(m_confidential_nodes));
    }
    if (m_cost_management_config.isSet()) {
        obj.insert(QString("costManagementConfig"), ::OpenAPI::toJsonValue(m_cost_management_config));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_current_master_version_isSet) {
        obj.insert(QString("currentMasterVersion"), ::OpenAPI::toJsonValue(m_current_master_version));
    }
    if (m_current_node_count_isSet) {
        obj.insert(QString("currentNodeCount"), ::OpenAPI::toJsonValue(m_current_node_count));
    }
    if (m_current_node_version_isSet) {
        obj.insert(QString("currentNodeVersion"), ::OpenAPI::toJsonValue(m_current_node_version));
    }
    if (m_database_encryption.isSet()) {
        obj.insert(QString("databaseEncryption"), ::OpenAPI::toJsonValue(m_database_encryption));
    }
    if (m_default_max_pods_constraint.isSet()) {
        obj.insert(QString("defaultMaxPodsConstraint"), ::OpenAPI::toJsonValue(m_default_max_pods_constraint));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enable_k8s_beta_apis.isSet()) {
        obj.insert(QString("enableK8sBetaApis"), ::OpenAPI::toJsonValue(m_enable_k8s_beta_apis));
    }
    if (m_enable_kubernetes_alpha_isSet) {
        obj.insert(QString("enableKubernetesAlpha"), ::OpenAPI::toJsonValue(m_enable_kubernetes_alpha));
    }
    if (m_enable_tpu_isSet) {
        obj.insert(QString("enableTpu"), ::OpenAPI::toJsonValue(m_enable_tpu));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_enterprise_config.isSet()) {
        obj.insert(QString("enterpriseConfig"), ::OpenAPI::toJsonValue(m_enterprise_config));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_fleet.isSet()) {
        obj.insert(QString("fleet"), ::OpenAPI::toJsonValue(m_fleet));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identity_service_config.isSet()) {
        obj.insert(QString("identityServiceConfig"), ::OpenAPI::toJsonValue(m_identity_service_config));
    }
    if (m_initial_cluster_version_isSet) {
        obj.insert(QString("initialClusterVersion"), ::OpenAPI::toJsonValue(m_initial_cluster_version));
    }
    if (m_initial_node_count_isSet) {
        obj.insert(QString("initialNodeCount"), ::OpenAPI::toJsonValue(m_initial_node_count));
    }
    if (m_instance_group_urls.size() > 0) {
        obj.insert(QString("instanceGroupUrls"), ::OpenAPI::toJsonValue(m_instance_group_urls));
    }
    if (m_ip_allocation_policy.isSet()) {
        obj.insert(QString("ipAllocationPolicy"), ::OpenAPI::toJsonValue(m_ip_allocation_policy));
    }
    if (m_label_fingerprint_isSet) {
        obj.insert(QString("labelFingerprint"), ::OpenAPI::toJsonValue(m_label_fingerprint));
    }
    if (m_legacy_abac.isSet()) {
        obj.insert(QString("legacyAbac"), ::OpenAPI::toJsonValue(m_legacy_abac));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_logging_config.isSet()) {
        obj.insert(QString("loggingConfig"), ::OpenAPI::toJsonValue(m_logging_config));
    }
    if (m_logging_service_isSet) {
        obj.insert(QString("loggingService"), ::OpenAPI::toJsonValue(m_logging_service));
    }
    if (m_maintenance_policy.isSet()) {
        obj.insert(QString("maintenancePolicy"), ::OpenAPI::toJsonValue(m_maintenance_policy));
    }
    if (m_master_auth.isSet()) {
        obj.insert(QString("masterAuth"), ::OpenAPI::toJsonValue(m_master_auth));
    }
    if (m_master_authorized_networks_config.isSet()) {
        obj.insert(QString("masterAuthorizedNetworksConfig"), ::OpenAPI::toJsonValue(m_master_authorized_networks_config));
    }
    if (m_mesh_certificates.isSet()) {
        obj.insert(QString("meshCertificates"), ::OpenAPI::toJsonValue(m_mesh_certificates));
    }
    if (m_monitoring_config.isSet()) {
        obj.insert(QString("monitoringConfig"), ::OpenAPI::toJsonValue(m_monitoring_config));
    }
    if (m_monitoring_service_isSet) {
        obj.insert(QString("monitoringService"), ::OpenAPI::toJsonValue(m_monitoring_service));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_network_config.isSet()) {
        obj.insert(QString("networkConfig"), ::OpenAPI::toJsonValue(m_network_config));
    }
    if (m_network_policy.isSet()) {
        obj.insert(QString("networkPolicy"), ::OpenAPI::toJsonValue(m_network_policy));
    }
    if (m_node_config.isSet()) {
        obj.insert(QString("nodeConfig"), ::OpenAPI::toJsonValue(m_node_config));
    }
    if (m_node_ipv4_cidr_size_isSet) {
        obj.insert(QString("nodeIpv4CidrSize"), ::OpenAPI::toJsonValue(m_node_ipv4_cidr_size));
    }
    if (m_node_pool_auto_config.isSet()) {
        obj.insert(QString("nodePoolAutoConfig"), ::OpenAPI::toJsonValue(m_node_pool_auto_config));
    }
    if (m_node_pool_defaults.isSet()) {
        obj.insert(QString("nodePoolDefaults"), ::OpenAPI::toJsonValue(m_node_pool_defaults));
    }
    if (m_node_pools.size() > 0) {
        obj.insert(QString("nodePools"), ::OpenAPI::toJsonValue(m_node_pools));
    }
    if (m_notification_config.isSet()) {
        obj.insert(QString("notificationConfig"), ::OpenAPI::toJsonValue(m_notification_config));
    }
    if (m_parent_product_config.isSet()) {
        obj.insert(QString("parentProductConfig"), ::OpenAPI::toJsonValue(m_parent_product_config));
    }
    if (m_private_cluster_config.isSet()) {
        obj.insert(QString("privateClusterConfig"), ::OpenAPI::toJsonValue(m_private_cluster_config));
    }
    if (m_release_channel.isSet()) {
        obj.insert(QString("releaseChannel"), ::OpenAPI::toJsonValue(m_release_channel));
    }
    if (m_resource_labels.size() > 0) {
        obj.insert(QString("resourceLabels"), ::OpenAPI::toJsonValue(m_resource_labels));
    }
    if (m_resource_usage_export_config.isSet()) {
        obj.insert(QString("resourceUsageExportConfig"), ::OpenAPI::toJsonValue(m_resource_usage_export_config));
    }
    if (m_security_posture_config.isSet()) {
        obj.insert(QString("securityPostureConfig"), ::OpenAPI::toJsonValue(m_security_posture_config));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_services_ipv4_cidr_isSet) {
        obj.insert(QString("servicesIpv4Cidr"), ::OpenAPI::toJsonValue(m_services_ipv4_cidr));
    }
    if (m_shielded_nodes.isSet()) {
        obj.insert(QString("shieldedNodes"), ::OpenAPI::toJsonValue(m_shielded_nodes));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_subnetwork_isSet) {
        obj.insert(QString("subnetwork"), ::OpenAPI::toJsonValue(m_subnetwork));
    }
    if (m_tpu_ipv4_cidr_block_isSet) {
        obj.insert(QString("tpuIpv4CidrBlock"), ::OpenAPI::toJsonValue(m_tpu_ipv4_cidr_block));
    }
    if (m_vertical_pod_autoscaling.isSet()) {
        obj.insert(QString("verticalPodAutoscaling"), ::OpenAPI::toJsonValue(m_vertical_pod_autoscaling));
    }
    if (m_workload_identity_config.isSet()) {
        obj.insert(QString("workloadIdentityConfig"), ::OpenAPI::toJsonValue(m_workload_identity_config));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

OAIAddonsConfig OAICluster::getAddonsConfig() const {
    return m_addons_config;
}
void OAICluster::setAddonsConfig(const OAIAddonsConfig &addons_config) {
    m_addons_config = addons_config;
    m_addons_config_isSet = true;
}

bool OAICluster::is_addons_config_Set() const{
    return m_addons_config_isSet;
}

bool OAICluster::is_addons_config_Valid() const{
    return m_addons_config_isValid;
}

OAIAuthenticatorGroupsConfig OAICluster::getAuthenticatorGroupsConfig() const {
    return m_authenticator_groups_config;
}
void OAICluster::setAuthenticatorGroupsConfig(const OAIAuthenticatorGroupsConfig &authenticator_groups_config) {
    m_authenticator_groups_config = authenticator_groups_config;
    m_authenticator_groups_config_isSet = true;
}

bool OAICluster::is_authenticator_groups_config_Set() const{
    return m_authenticator_groups_config_isSet;
}

bool OAICluster::is_authenticator_groups_config_Valid() const{
    return m_authenticator_groups_config_isValid;
}

OAIAutopilot OAICluster::getAutopilot() const {
    return m_autopilot;
}
void OAICluster::setAutopilot(const OAIAutopilot &autopilot) {
    m_autopilot = autopilot;
    m_autopilot_isSet = true;
}

bool OAICluster::is_autopilot_Set() const{
    return m_autopilot_isSet;
}

bool OAICluster::is_autopilot_Valid() const{
    return m_autopilot_isValid;
}

OAIClusterAutoscaling OAICluster::getAutoscaling() const {
    return m_autoscaling;
}
void OAICluster::setAutoscaling(const OAIClusterAutoscaling &autoscaling) {
    m_autoscaling = autoscaling;
    m_autoscaling_isSet = true;
}

bool OAICluster::is_autoscaling_Set() const{
    return m_autoscaling_isSet;
}

bool OAICluster::is_autoscaling_Valid() const{
    return m_autoscaling_isValid;
}

OAIBinaryAuthorization OAICluster::getBinaryAuthorization() const {
    return m_binary_authorization;
}
void OAICluster::setBinaryAuthorization(const OAIBinaryAuthorization &binary_authorization) {
    m_binary_authorization = binary_authorization;
    m_binary_authorization_isSet = true;
}

bool OAICluster::is_binary_authorization_Set() const{
    return m_binary_authorization_isSet;
}

bool OAICluster::is_binary_authorization_Valid() const{
    return m_binary_authorization_isValid;
}

QString OAICluster::getClusterIpv4Cidr() const {
    return m_cluster_ipv4_cidr;
}
void OAICluster::setClusterIpv4Cidr(const QString &cluster_ipv4_cidr) {
    m_cluster_ipv4_cidr = cluster_ipv4_cidr;
    m_cluster_ipv4_cidr_isSet = true;
}

bool OAICluster::is_cluster_ipv4_cidr_Set() const{
    return m_cluster_ipv4_cidr_isSet;
}

bool OAICluster::is_cluster_ipv4_cidr_Valid() const{
    return m_cluster_ipv4_cidr_isValid;
}

QList<OAIStatusCondition> OAICluster::getConditions() const {
    return m_conditions;
}
void OAICluster::setConditions(const QList<OAIStatusCondition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAICluster::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAICluster::is_conditions_Valid() const{
    return m_conditions_isValid;
}

OAIConfidentialNodes OAICluster::getConfidentialNodes() const {
    return m_confidential_nodes;
}
void OAICluster::setConfidentialNodes(const OAIConfidentialNodes &confidential_nodes) {
    m_confidential_nodes = confidential_nodes;
    m_confidential_nodes_isSet = true;
}

bool OAICluster::is_confidential_nodes_Set() const{
    return m_confidential_nodes_isSet;
}

bool OAICluster::is_confidential_nodes_Valid() const{
    return m_confidential_nodes_isValid;
}

OAICostManagementConfig OAICluster::getCostManagementConfig() const {
    return m_cost_management_config;
}
void OAICluster::setCostManagementConfig(const OAICostManagementConfig &cost_management_config) {
    m_cost_management_config = cost_management_config;
    m_cost_management_config_isSet = true;
}

bool OAICluster::is_cost_management_config_Set() const{
    return m_cost_management_config_isSet;
}

bool OAICluster::is_cost_management_config_Valid() const{
    return m_cost_management_config_isValid;
}

QString OAICluster::getCreateTime() const {
    return m_create_time;
}
void OAICluster::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAICluster::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAICluster::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAICluster::getCurrentMasterVersion() const {
    return m_current_master_version;
}
void OAICluster::setCurrentMasterVersion(const QString &current_master_version) {
    m_current_master_version = current_master_version;
    m_current_master_version_isSet = true;
}

bool OAICluster::is_current_master_version_Set() const{
    return m_current_master_version_isSet;
}

bool OAICluster::is_current_master_version_Valid() const{
    return m_current_master_version_isValid;
}

qint32 OAICluster::getCurrentNodeCount() const {
    return m_current_node_count;
}
void OAICluster::setCurrentNodeCount(const qint32 &current_node_count) {
    m_current_node_count = current_node_count;
    m_current_node_count_isSet = true;
}

bool OAICluster::is_current_node_count_Set() const{
    return m_current_node_count_isSet;
}

bool OAICluster::is_current_node_count_Valid() const{
    return m_current_node_count_isValid;
}

QString OAICluster::getCurrentNodeVersion() const {
    return m_current_node_version;
}
void OAICluster::setCurrentNodeVersion(const QString &current_node_version) {
    m_current_node_version = current_node_version;
    m_current_node_version_isSet = true;
}

bool OAICluster::is_current_node_version_Set() const{
    return m_current_node_version_isSet;
}

bool OAICluster::is_current_node_version_Valid() const{
    return m_current_node_version_isValid;
}

OAIDatabaseEncryption OAICluster::getDatabaseEncryption() const {
    return m_database_encryption;
}
void OAICluster::setDatabaseEncryption(const OAIDatabaseEncryption &database_encryption) {
    m_database_encryption = database_encryption;
    m_database_encryption_isSet = true;
}

bool OAICluster::is_database_encryption_Set() const{
    return m_database_encryption_isSet;
}

bool OAICluster::is_database_encryption_Valid() const{
    return m_database_encryption_isValid;
}

OAIMaxPodsConstraint OAICluster::getDefaultMaxPodsConstraint() const {
    return m_default_max_pods_constraint;
}
void OAICluster::setDefaultMaxPodsConstraint(const OAIMaxPodsConstraint &default_max_pods_constraint) {
    m_default_max_pods_constraint = default_max_pods_constraint;
    m_default_max_pods_constraint_isSet = true;
}

bool OAICluster::is_default_max_pods_constraint_Set() const{
    return m_default_max_pods_constraint_isSet;
}

bool OAICluster::is_default_max_pods_constraint_Valid() const{
    return m_default_max_pods_constraint_isValid;
}

QString OAICluster::getDescription() const {
    return m_description;
}
void OAICluster::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICluster::is_description_Set() const{
    return m_description_isSet;
}

bool OAICluster::is_description_Valid() const{
    return m_description_isValid;
}

OAIK8sBetaAPIConfig OAICluster::getEnableK8sBetaApis() const {
    return m_enable_k8s_beta_apis;
}
void OAICluster::setEnableK8sBetaApis(const OAIK8sBetaAPIConfig &enable_k8s_beta_apis) {
    m_enable_k8s_beta_apis = enable_k8s_beta_apis;
    m_enable_k8s_beta_apis_isSet = true;
}

bool OAICluster::is_enable_k8s_beta_apis_Set() const{
    return m_enable_k8s_beta_apis_isSet;
}

bool OAICluster::is_enable_k8s_beta_apis_Valid() const{
    return m_enable_k8s_beta_apis_isValid;
}

bool OAICluster::isEnableKubernetesAlpha() const {
    return m_enable_kubernetes_alpha;
}
void OAICluster::setEnableKubernetesAlpha(const bool &enable_kubernetes_alpha) {
    m_enable_kubernetes_alpha = enable_kubernetes_alpha;
    m_enable_kubernetes_alpha_isSet = true;
}

bool OAICluster::is_enable_kubernetes_alpha_Set() const{
    return m_enable_kubernetes_alpha_isSet;
}

bool OAICluster::is_enable_kubernetes_alpha_Valid() const{
    return m_enable_kubernetes_alpha_isValid;
}

bool OAICluster::isEnableTpu() const {
    return m_enable_tpu;
}
void OAICluster::setEnableTpu(const bool &enable_tpu) {
    m_enable_tpu = enable_tpu;
    m_enable_tpu_isSet = true;
}

bool OAICluster::is_enable_tpu_Set() const{
    return m_enable_tpu_isSet;
}

bool OAICluster::is_enable_tpu_Valid() const{
    return m_enable_tpu_isValid;
}

QString OAICluster::getEndpoint() const {
    return m_endpoint;
}
void OAICluster::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAICluster::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAICluster::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

OAIEnterpriseConfig OAICluster::getEnterpriseConfig() const {
    return m_enterprise_config;
}
void OAICluster::setEnterpriseConfig(const OAIEnterpriseConfig &enterprise_config) {
    m_enterprise_config = enterprise_config;
    m_enterprise_config_isSet = true;
}

bool OAICluster::is_enterprise_config_Set() const{
    return m_enterprise_config_isSet;
}

bool OAICluster::is_enterprise_config_Valid() const{
    return m_enterprise_config_isValid;
}

QString OAICluster::getEtag() const {
    return m_etag;
}
void OAICluster::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAICluster::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAICluster::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAICluster::getExpireTime() const {
    return m_expire_time;
}
void OAICluster::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAICluster::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAICluster::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

OAIFleet OAICluster::getFleet() const {
    return m_fleet;
}
void OAICluster::setFleet(const OAIFleet &fleet) {
    m_fleet = fleet;
    m_fleet_isSet = true;
}

bool OAICluster::is_fleet_Set() const{
    return m_fleet_isSet;
}

bool OAICluster::is_fleet_Valid() const{
    return m_fleet_isValid;
}

QString OAICluster::getId() const {
    return m_id;
}
void OAICluster::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICluster::is_id_Set() const{
    return m_id_isSet;
}

bool OAICluster::is_id_Valid() const{
    return m_id_isValid;
}

OAIIdentityServiceConfig OAICluster::getIdentityServiceConfig() const {
    return m_identity_service_config;
}
void OAICluster::setIdentityServiceConfig(const OAIIdentityServiceConfig &identity_service_config) {
    m_identity_service_config = identity_service_config;
    m_identity_service_config_isSet = true;
}

bool OAICluster::is_identity_service_config_Set() const{
    return m_identity_service_config_isSet;
}

bool OAICluster::is_identity_service_config_Valid() const{
    return m_identity_service_config_isValid;
}

QString OAICluster::getInitialClusterVersion() const {
    return m_initial_cluster_version;
}
void OAICluster::setInitialClusterVersion(const QString &initial_cluster_version) {
    m_initial_cluster_version = initial_cluster_version;
    m_initial_cluster_version_isSet = true;
}

bool OAICluster::is_initial_cluster_version_Set() const{
    return m_initial_cluster_version_isSet;
}

bool OAICluster::is_initial_cluster_version_Valid() const{
    return m_initial_cluster_version_isValid;
}

qint32 OAICluster::getInitialNodeCount() const {
    return m_initial_node_count;
}
void OAICluster::setInitialNodeCount(const qint32 &initial_node_count) {
    m_initial_node_count = initial_node_count;
    m_initial_node_count_isSet = true;
}

bool OAICluster::is_initial_node_count_Set() const{
    return m_initial_node_count_isSet;
}

bool OAICluster::is_initial_node_count_Valid() const{
    return m_initial_node_count_isValid;
}

QList<QString> OAICluster::getInstanceGroupUrls() const {
    return m_instance_group_urls;
}
void OAICluster::setInstanceGroupUrls(const QList<QString> &instance_group_urls) {
    m_instance_group_urls = instance_group_urls;
    m_instance_group_urls_isSet = true;
}

bool OAICluster::is_instance_group_urls_Set() const{
    return m_instance_group_urls_isSet;
}

bool OAICluster::is_instance_group_urls_Valid() const{
    return m_instance_group_urls_isValid;
}

OAIIPAllocationPolicy OAICluster::getIpAllocationPolicy() const {
    return m_ip_allocation_policy;
}
void OAICluster::setIpAllocationPolicy(const OAIIPAllocationPolicy &ip_allocation_policy) {
    m_ip_allocation_policy = ip_allocation_policy;
    m_ip_allocation_policy_isSet = true;
}

bool OAICluster::is_ip_allocation_policy_Set() const{
    return m_ip_allocation_policy_isSet;
}

bool OAICluster::is_ip_allocation_policy_Valid() const{
    return m_ip_allocation_policy_isValid;
}

QString OAICluster::getLabelFingerprint() const {
    return m_label_fingerprint;
}
void OAICluster::setLabelFingerprint(const QString &label_fingerprint) {
    m_label_fingerprint = label_fingerprint;
    m_label_fingerprint_isSet = true;
}

bool OAICluster::is_label_fingerprint_Set() const{
    return m_label_fingerprint_isSet;
}

bool OAICluster::is_label_fingerprint_Valid() const{
    return m_label_fingerprint_isValid;
}

OAILegacyAbac OAICluster::getLegacyAbac() const {
    return m_legacy_abac;
}
void OAICluster::setLegacyAbac(const OAILegacyAbac &legacy_abac) {
    m_legacy_abac = legacy_abac;
    m_legacy_abac_isSet = true;
}

bool OAICluster::is_legacy_abac_Set() const{
    return m_legacy_abac_isSet;
}

bool OAICluster::is_legacy_abac_Valid() const{
    return m_legacy_abac_isValid;
}

QString OAICluster::getLocation() const {
    return m_location;
}
void OAICluster::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICluster::is_location_Set() const{
    return m_location_isSet;
}

bool OAICluster::is_location_Valid() const{
    return m_location_isValid;
}

QList<QString> OAICluster::getLocations() const {
    return m_locations;
}
void OAICluster::setLocations(const QList<QString> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAICluster::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAICluster::is_locations_Valid() const{
    return m_locations_isValid;
}

OAILoggingConfig OAICluster::getLoggingConfig() const {
    return m_logging_config;
}
void OAICluster::setLoggingConfig(const OAILoggingConfig &logging_config) {
    m_logging_config = logging_config;
    m_logging_config_isSet = true;
}

bool OAICluster::is_logging_config_Set() const{
    return m_logging_config_isSet;
}

bool OAICluster::is_logging_config_Valid() const{
    return m_logging_config_isValid;
}

QString OAICluster::getLoggingService() const {
    return m_logging_service;
}
void OAICluster::setLoggingService(const QString &logging_service) {
    m_logging_service = logging_service;
    m_logging_service_isSet = true;
}

bool OAICluster::is_logging_service_Set() const{
    return m_logging_service_isSet;
}

bool OAICluster::is_logging_service_Valid() const{
    return m_logging_service_isValid;
}

OAIMaintenancePolicy OAICluster::getMaintenancePolicy() const {
    return m_maintenance_policy;
}
void OAICluster::setMaintenancePolicy(const OAIMaintenancePolicy &maintenance_policy) {
    m_maintenance_policy = maintenance_policy;
    m_maintenance_policy_isSet = true;
}

bool OAICluster::is_maintenance_policy_Set() const{
    return m_maintenance_policy_isSet;
}

bool OAICluster::is_maintenance_policy_Valid() const{
    return m_maintenance_policy_isValid;
}

OAIMasterAuth OAICluster::getMasterAuth() const {
    return m_master_auth;
}
void OAICluster::setMasterAuth(const OAIMasterAuth &master_auth) {
    m_master_auth = master_auth;
    m_master_auth_isSet = true;
}

bool OAICluster::is_master_auth_Set() const{
    return m_master_auth_isSet;
}

bool OAICluster::is_master_auth_Valid() const{
    return m_master_auth_isValid;
}

OAIMasterAuthorizedNetworksConfig OAICluster::getMasterAuthorizedNetworksConfig() const {
    return m_master_authorized_networks_config;
}
void OAICluster::setMasterAuthorizedNetworksConfig(const OAIMasterAuthorizedNetworksConfig &master_authorized_networks_config) {
    m_master_authorized_networks_config = master_authorized_networks_config;
    m_master_authorized_networks_config_isSet = true;
}

bool OAICluster::is_master_authorized_networks_config_Set() const{
    return m_master_authorized_networks_config_isSet;
}

bool OAICluster::is_master_authorized_networks_config_Valid() const{
    return m_master_authorized_networks_config_isValid;
}

OAIMeshCertificates OAICluster::getMeshCertificates() const {
    return m_mesh_certificates;
}
void OAICluster::setMeshCertificates(const OAIMeshCertificates &mesh_certificates) {
    m_mesh_certificates = mesh_certificates;
    m_mesh_certificates_isSet = true;
}

bool OAICluster::is_mesh_certificates_Set() const{
    return m_mesh_certificates_isSet;
}

bool OAICluster::is_mesh_certificates_Valid() const{
    return m_mesh_certificates_isValid;
}

OAIMonitoringConfig OAICluster::getMonitoringConfig() const {
    return m_monitoring_config;
}
void OAICluster::setMonitoringConfig(const OAIMonitoringConfig &monitoring_config) {
    m_monitoring_config = monitoring_config;
    m_monitoring_config_isSet = true;
}

bool OAICluster::is_monitoring_config_Set() const{
    return m_monitoring_config_isSet;
}

bool OAICluster::is_monitoring_config_Valid() const{
    return m_monitoring_config_isValid;
}

QString OAICluster::getMonitoringService() const {
    return m_monitoring_service;
}
void OAICluster::setMonitoringService(const QString &monitoring_service) {
    m_monitoring_service = monitoring_service;
    m_monitoring_service_isSet = true;
}

bool OAICluster::is_monitoring_service_Set() const{
    return m_monitoring_service_isSet;
}

bool OAICluster::is_monitoring_service_Valid() const{
    return m_monitoring_service_isValid;
}

QString OAICluster::getName() const {
    return m_name;
}
void OAICluster::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICluster::is_name_Set() const{
    return m_name_isSet;
}

bool OAICluster::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICluster::getNetwork() const {
    return m_network;
}
void OAICluster::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAICluster::is_network_Set() const{
    return m_network_isSet;
}

bool OAICluster::is_network_Valid() const{
    return m_network_isValid;
}

OAINetworkConfig OAICluster::getNetworkConfig() const {
    return m_network_config;
}
void OAICluster::setNetworkConfig(const OAINetworkConfig &network_config) {
    m_network_config = network_config;
    m_network_config_isSet = true;
}

bool OAICluster::is_network_config_Set() const{
    return m_network_config_isSet;
}

bool OAICluster::is_network_config_Valid() const{
    return m_network_config_isValid;
}

OAINetworkPolicy OAICluster::getNetworkPolicy() const {
    return m_network_policy;
}
void OAICluster::setNetworkPolicy(const OAINetworkPolicy &network_policy) {
    m_network_policy = network_policy;
    m_network_policy_isSet = true;
}

bool OAICluster::is_network_policy_Set() const{
    return m_network_policy_isSet;
}

bool OAICluster::is_network_policy_Valid() const{
    return m_network_policy_isValid;
}

OAINodeConfig OAICluster::getNodeConfig() const {
    return m_node_config;
}
void OAICluster::setNodeConfig(const OAINodeConfig &node_config) {
    m_node_config = node_config;
    m_node_config_isSet = true;
}

bool OAICluster::is_node_config_Set() const{
    return m_node_config_isSet;
}

bool OAICluster::is_node_config_Valid() const{
    return m_node_config_isValid;
}

qint32 OAICluster::getNodeIpv4CidrSize() const {
    return m_node_ipv4_cidr_size;
}
void OAICluster::setNodeIpv4CidrSize(const qint32 &node_ipv4_cidr_size) {
    m_node_ipv4_cidr_size = node_ipv4_cidr_size;
    m_node_ipv4_cidr_size_isSet = true;
}

bool OAICluster::is_node_ipv4_cidr_size_Set() const{
    return m_node_ipv4_cidr_size_isSet;
}

bool OAICluster::is_node_ipv4_cidr_size_Valid() const{
    return m_node_ipv4_cidr_size_isValid;
}

OAINodePoolAutoConfig OAICluster::getNodePoolAutoConfig() const {
    return m_node_pool_auto_config;
}
void OAICluster::setNodePoolAutoConfig(const OAINodePoolAutoConfig &node_pool_auto_config) {
    m_node_pool_auto_config = node_pool_auto_config;
    m_node_pool_auto_config_isSet = true;
}

bool OAICluster::is_node_pool_auto_config_Set() const{
    return m_node_pool_auto_config_isSet;
}

bool OAICluster::is_node_pool_auto_config_Valid() const{
    return m_node_pool_auto_config_isValid;
}

OAINodePoolDefaults OAICluster::getNodePoolDefaults() const {
    return m_node_pool_defaults;
}
void OAICluster::setNodePoolDefaults(const OAINodePoolDefaults &node_pool_defaults) {
    m_node_pool_defaults = node_pool_defaults;
    m_node_pool_defaults_isSet = true;
}

bool OAICluster::is_node_pool_defaults_Set() const{
    return m_node_pool_defaults_isSet;
}

bool OAICluster::is_node_pool_defaults_Valid() const{
    return m_node_pool_defaults_isValid;
}

QList<OAINodePool> OAICluster::getNodePools() const {
    return m_node_pools;
}
void OAICluster::setNodePools(const QList<OAINodePool> &node_pools) {
    m_node_pools = node_pools;
    m_node_pools_isSet = true;
}

bool OAICluster::is_node_pools_Set() const{
    return m_node_pools_isSet;
}

bool OAICluster::is_node_pools_Valid() const{
    return m_node_pools_isValid;
}

OAINotificationConfig OAICluster::getNotificationConfig() const {
    return m_notification_config;
}
void OAICluster::setNotificationConfig(const OAINotificationConfig &notification_config) {
    m_notification_config = notification_config;
    m_notification_config_isSet = true;
}

bool OAICluster::is_notification_config_Set() const{
    return m_notification_config_isSet;
}

bool OAICluster::is_notification_config_Valid() const{
    return m_notification_config_isValid;
}

OAIParentProductConfig OAICluster::getParentProductConfig() const {
    return m_parent_product_config;
}
void OAICluster::setParentProductConfig(const OAIParentProductConfig &parent_product_config) {
    m_parent_product_config = parent_product_config;
    m_parent_product_config_isSet = true;
}

bool OAICluster::is_parent_product_config_Set() const{
    return m_parent_product_config_isSet;
}

bool OAICluster::is_parent_product_config_Valid() const{
    return m_parent_product_config_isValid;
}

OAIPrivateClusterConfig OAICluster::getPrivateClusterConfig() const {
    return m_private_cluster_config;
}
void OAICluster::setPrivateClusterConfig(const OAIPrivateClusterConfig &private_cluster_config) {
    m_private_cluster_config = private_cluster_config;
    m_private_cluster_config_isSet = true;
}

bool OAICluster::is_private_cluster_config_Set() const{
    return m_private_cluster_config_isSet;
}

bool OAICluster::is_private_cluster_config_Valid() const{
    return m_private_cluster_config_isValid;
}

OAIReleaseChannel OAICluster::getReleaseChannel() const {
    return m_release_channel;
}
void OAICluster::setReleaseChannel(const OAIReleaseChannel &release_channel) {
    m_release_channel = release_channel;
    m_release_channel_isSet = true;
}

bool OAICluster::is_release_channel_Set() const{
    return m_release_channel_isSet;
}

bool OAICluster::is_release_channel_Valid() const{
    return m_release_channel_isValid;
}

QMap<QString, QString> OAICluster::getResourceLabels() const {
    return m_resource_labels;
}
void OAICluster::setResourceLabels(const QMap<QString, QString> &resource_labels) {
    m_resource_labels = resource_labels;
    m_resource_labels_isSet = true;
}

bool OAICluster::is_resource_labels_Set() const{
    return m_resource_labels_isSet;
}

bool OAICluster::is_resource_labels_Valid() const{
    return m_resource_labels_isValid;
}

OAIResourceUsageExportConfig OAICluster::getResourceUsageExportConfig() const {
    return m_resource_usage_export_config;
}
void OAICluster::setResourceUsageExportConfig(const OAIResourceUsageExportConfig &resource_usage_export_config) {
    m_resource_usage_export_config = resource_usage_export_config;
    m_resource_usage_export_config_isSet = true;
}

bool OAICluster::is_resource_usage_export_config_Set() const{
    return m_resource_usage_export_config_isSet;
}

bool OAICluster::is_resource_usage_export_config_Valid() const{
    return m_resource_usage_export_config_isValid;
}

OAISecurityPostureConfig OAICluster::getSecurityPostureConfig() const {
    return m_security_posture_config;
}
void OAICluster::setSecurityPostureConfig(const OAISecurityPostureConfig &security_posture_config) {
    m_security_posture_config = security_posture_config;
    m_security_posture_config_isSet = true;
}

bool OAICluster::is_security_posture_config_Set() const{
    return m_security_posture_config_isSet;
}

bool OAICluster::is_security_posture_config_Valid() const{
    return m_security_posture_config_isValid;
}

QString OAICluster::getSelfLink() const {
    return m_self_link;
}
void OAICluster::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAICluster::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAICluster::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAICluster::getServicesIpv4Cidr() const {
    return m_services_ipv4_cidr;
}
void OAICluster::setServicesIpv4Cidr(const QString &services_ipv4_cidr) {
    m_services_ipv4_cidr = services_ipv4_cidr;
    m_services_ipv4_cidr_isSet = true;
}

bool OAICluster::is_services_ipv4_cidr_Set() const{
    return m_services_ipv4_cidr_isSet;
}

bool OAICluster::is_services_ipv4_cidr_Valid() const{
    return m_services_ipv4_cidr_isValid;
}

OAIShieldedNodes OAICluster::getShieldedNodes() const {
    return m_shielded_nodes;
}
void OAICluster::setShieldedNodes(const OAIShieldedNodes &shielded_nodes) {
    m_shielded_nodes = shielded_nodes;
    m_shielded_nodes_isSet = true;
}

bool OAICluster::is_shielded_nodes_Set() const{
    return m_shielded_nodes_isSet;
}

bool OAICluster::is_shielded_nodes_Valid() const{
    return m_shielded_nodes_isValid;
}

QString OAICluster::getStatus() const {
    return m_status;
}
void OAICluster::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICluster::is_status_Set() const{
    return m_status_isSet;
}

bool OAICluster::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICluster::getStatusMessage() const {
    return m_status_message;
}
void OAICluster::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAICluster::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAICluster::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QString OAICluster::getSubnetwork() const {
    return m_subnetwork;
}
void OAICluster::setSubnetwork(const QString &subnetwork) {
    m_subnetwork = subnetwork;
    m_subnetwork_isSet = true;
}

bool OAICluster::is_subnetwork_Set() const{
    return m_subnetwork_isSet;
}

bool OAICluster::is_subnetwork_Valid() const{
    return m_subnetwork_isValid;
}

QString OAICluster::getTpuIpv4CidrBlock() const {
    return m_tpu_ipv4_cidr_block;
}
void OAICluster::setTpuIpv4CidrBlock(const QString &tpu_ipv4_cidr_block) {
    m_tpu_ipv4_cidr_block = tpu_ipv4_cidr_block;
    m_tpu_ipv4_cidr_block_isSet = true;
}

bool OAICluster::is_tpu_ipv4_cidr_block_Set() const{
    return m_tpu_ipv4_cidr_block_isSet;
}

bool OAICluster::is_tpu_ipv4_cidr_block_Valid() const{
    return m_tpu_ipv4_cidr_block_isValid;
}

OAIVerticalPodAutoscaling OAICluster::getVerticalPodAutoscaling() const {
    return m_vertical_pod_autoscaling;
}
void OAICluster::setVerticalPodAutoscaling(const OAIVerticalPodAutoscaling &vertical_pod_autoscaling) {
    m_vertical_pod_autoscaling = vertical_pod_autoscaling;
    m_vertical_pod_autoscaling_isSet = true;
}

bool OAICluster::is_vertical_pod_autoscaling_Set() const{
    return m_vertical_pod_autoscaling_isSet;
}

bool OAICluster::is_vertical_pod_autoscaling_Valid() const{
    return m_vertical_pod_autoscaling_isValid;
}

OAIWorkloadIdentityConfig OAICluster::getWorkloadIdentityConfig() const {
    return m_workload_identity_config;
}
void OAICluster::setWorkloadIdentityConfig(const OAIWorkloadIdentityConfig &workload_identity_config) {
    m_workload_identity_config = workload_identity_config;
    m_workload_identity_config_isSet = true;
}

bool OAICluster::is_workload_identity_config_Set() const{
    return m_workload_identity_config_isSet;
}

bool OAICluster::is_workload_identity_config_Valid() const{
    return m_workload_identity_config_isValid;
}

QString OAICluster::getZone() const {
    return m_zone;
}
void OAICluster::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAICluster::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAICluster::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAICluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addons_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authenticator_groups_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_autopilot.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_autoscaling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_binary_authorization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_ipv4_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidential_nodes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_management_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_master_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_node_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_max_pods_constraint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_k8s_beta_apis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_kubernetes_alpha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_tpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enterprise_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_service_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_cluster_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_group_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_allocation_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_abac.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_auth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_authorized_networks_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mesh_certificates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_ipv4_cidr_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_pool_auto_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_pool_defaults.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_pools.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_product_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_cluster_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_usage_export_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_posture_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_services_ipv4_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shielded_nodes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnetwork_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tpu_ipv4_cidr_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertical_pod_autoscaling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workload_identity_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
