/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterAutoscaling.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterAutoscaling::OAIClusterAutoscaling(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterAutoscaling::OAIClusterAutoscaling() {
    this->initializeModel();
}

OAIClusterAutoscaling::~OAIClusterAutoscaling() {}

void OAIClusterAutoscaling::initializeModel() {

    m_autoprovisioning_locations_isSet = false;
    m_autoprovisioning_locations_isValid = false;

    m_autoprovisioning_node_pool_defaults_isSet = false;
    m_autoprovisioning_node_pool_defaults_isValid = false;

    m_autoscaling_profile_isSet = false;
    m_autoscaling_profile_isValid = false;

    m_enable_node_autoprovisioning_isSet = false;
    m_enable_node_autoprovisioning_isValid = false;

    m_resource_limits_isSet = false;
    m_resource_limits_isValid = false;
}

void OAIClusterAutoscaling::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterAutoscaling::fromJsonObject(QJsonObject json) {

    m_autoprovisioning_locations_isValid = ::OpenAPI::fromJsonValue(m_autoprovisioning_locations, json[QString("autoprovisioningLocations")]);
    m_autoprovisioning_locations_isSet = !json[QString("autoprovisioningLocations")].isNull() && m_autoprovisioning_locations_isValid;

    m_autoprovisioning_node_pool_defaults_isValid = ::OpenAPI::fromJsonValue(m_autoprovisioning_node_pool_defaults, json[QString("autoprovisioningNodePoolDefaults")]);
    m_autoprovisioning_node_pool_defaults_isSet = !json[QString("autoprovisioningNodePoolDefaults")].isNull() && m_autoprovisioning_node_pool_defaults_isValid;

    m_autoscaling_profile_isValid = ::OpenAPI::fromJsonValue(m_autoscaling_profile, json[QString("autoscalingProfile")]);
    m_autoscaling_profile_isSet = !json[QString("autoscalingProfile")].isNull() && m_autoscaling_profile_isValid;

    m_enable_node_autoprovisioning_isValid = ::OpenAPI::fromJsonValue(m_enable_node_autoprovisioning, json[QString("enableNodeAutoprovisioning")]);
    m_enable_node_autoprovisioning_isSet = !json[QString("enableNodeAutoprovisioning")].isNull() && m_enable_node_autoprovisioning_isValid;

    m_resource_limits_isValid = ::OpenAPI::fromJsonValue(m_resource_limits, json[QString("resourceLimits")]);
    m_resource_limits_isSet = !json[QString("resourceLimits")].isNull() && m_resource_limits_isValid;
}

QString OAIClusterAutoscaling::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterAutoscaling::asJsonObject() const {
    QJsonObject obj;
    if (m_autoprovisioning_locations.size() > 0) {
        obj.insert(QString("autoprovisioningLocations"), ::OpenAPI::toJsonValue(m_autoprovisioning_locations));
    }
    if (m_autoprovisioning_node_pool_defaults.isSet()) {
        obj.insert(QString("autoprovisioningNodePoolDefaults"), ::OpenAPI::toJsonValue(m_autoprovisioning_node_pool_defaults));
    }
    if (m_autoscaling_profile_isSet) {
        obj.insert(QString("autoscalingProfile"), ::OpenAPI::toJsonValue(m_autoscaling_profile));
    }
    if (m_enable_node_autoprovisioning_isSet) {
        obj.insert(QString("enableNodeAutoprovisioning"), ::OpenAPI::toJsonValue(m_enable_node_autoprovisioning));
    }
    if (m_resource_limits.size() > 0) {
        obj.insert(QString("resourceLimits"), ::OpenAPI::toJsonValue(m_resource_limits));
    }
    return obj;
}

QList<QString> OAIClusterAutoscaling::getAutoprovisioningLocations() const {
    return m_autoprovisioning_locations;
}
void OAIClusterAutoscaling::setAutoprovisioningLocations(const QList<QString> &autoprovisioning_locations) {
    m_autoprovisioning_locations = autoprovisioning_locations;
    m_autoprovisioning_locations_isSet = true;
}

bool OAIClusterAutoscaling::is_autoprovisioning_locations_Set() const{
    return m_autoprovisioning_locations_isSet;
}

bool OAIClusterAutoscaling::is_autoprovisioning_locations_Valid() const{
    return m_autoprovisioning_locations_isValid;
}

OAIAutoprovisioningNodePoolDefaults OAIClusterAutoscaling::getAutoprovisioningNodePoolDefaults() const {
    return m_autoprovisioning_node_pool_defaults;
}
void OAIClusterAutoscaling::setAutoprovisioningNodePoolDefaults(const OAIAutoprovisioningNodePoolDefaults &autoprovisioning_node_pool_defaults) {
    m_autoprovisioning_node_pool_defaults = autoprovisioning_node_pool_defaults;
    m_autoprovisioning_node_pool_defaults_isSet = true;
}

bool OAIClusterAutoscaling::is_autoprovisioning_node_pool_defaults_Set() const{
    return m_autoprovisioning_node_pool_defaults_isSet;
}

bool OAIClusterAutoscaling::is_autoprovisioning_node_pool_defaults_Valid() const{
    return m_autoprovisioning_node_pool_defaults_isValid;
}

QString OAIClusterAutoscaling::getAutoscalingProfile() const {
    return m_autoscaling_profile;
}
void OAIClusterAutoscaling::setAutoscalingProfile(const QString &autoscaling_profile) {
    m_autoscaling_profile = autoscaling_profile;
    m_autoscaling_profile_isSet = true;
}

bool OAIClusterAutoscaling::is_autoscaling_profile_Set() const{
    return m_autoscaling_profile_isSet;
}

bool OAIClusterAutoscaling::is_autoscaling_profile_Valid() const{
    return m_autoscaling_profile_isValid;
}

bool OAIClusterAutoscaling::isEnableNodeAutoprovisioning() const {
    return m_enable_node_autoprovisioning;
}
void OAIClusterAutoscaling::setEnableNodeAutoprovisioning(const bool &enable_node_autoprovisioning) {
    m_enable_node_autoprovisioning = enable_node_autoprovisioning;
    m_enable_node_autoprovisioning_isSet = true;
}

bool OAIClusterAutoscaling::is_enable_node_autoprovisioning_Set() const{
    return m_enable_node_autoprovisioning_isSet;
}

bool OAIClusterAutoscaling::is_enable_node_autoprovisioning_Valid() const{
    return m_enable_node_autoprovisioning_isValid;
}

QList<OAIResourceLimit> OAIClusterAutoscaling::getResourceLimits() const {
    return m_resource_limits;
}
void OAIClusterAutoscaling::setResourceLimits(const QList<OAIResourceLimit> &resource_limits) {
    m_resource_limits = resource_limits;
    m_resource_limits_isSet = true;
}

bool OAIClusterAutoscaling::is_resource_limits_Set() const{
    return m_resource_limits_isSet;
}

bool OAIClusterAutoscaling::is_resource_limits_Valid() const{
    return m_resource_limits_isValid;
}

bool OAIClusterAutoscaling::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_autoprovisioning_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_autoprovisioning_node_pool_defaults.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_autoscaling_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_node_autoprovisioning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_limits.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterAutoscaling::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
