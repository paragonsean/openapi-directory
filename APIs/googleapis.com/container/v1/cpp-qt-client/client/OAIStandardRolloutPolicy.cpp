/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStandardRolloutPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStandardRolloutPolicy::OAIStandardRolloutPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStandardRolloutPolicy::OAIStandardRolloutPolicy() {
    this->initializeModel();
}

OAIStandardRolloutPolicy::~OAIStandardRolloutPolicy() {}

void OAIStandardRolloutPolicy::initializeModel() {

    m_batch_node_count_isSet = false;
    m_batch_node_count_isValid = false;

    m_batch_percentage_isSet = false;
    m_batch_percentage_isValid = false;

    m_batch_soak_duration_isSet = false;
    m_batch_soak_duration_isValid = false;
}

void OAIStandardRolloutPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStandardRolloutPolicy::fromJsonObject(QJsonObject json) {

    m_batch_node_count_isValid = ::OpenAPI::fromJsonValue(m_batch_node_count, json[QString("batchNodeCount")]);
    m_batch_node_count_isSet = !json[QString("batchNodeCount")].isNull() && m_batch_node_count_isValid;

    m_batch_percentage_isValid = ::OpenAPI::fromJsonValue(m_batch_percentage, json[QString("batchPercentage")]);
    m_batch_percentage_isSet = !json[QString("batchPercentage")].isNull() && m_batch_percentage_isValid;

    m_batch_soak_duration_isValid = ::OpenAPI::fromJsonValue(m_batch_soak_duration, json[QString("batchSoakDuration")]);
    m_batch_soak_duration_isSet = !json[QString("batchSoakDuration")].isNull() && m_batch_soak_duration_isValid;
}

QString OAIStandardRolloutPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStandardRolloutPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_node_count_isSet) {
        obj.insert(QString("batchNodeCount"), ::OpenAPI::toJsonValue(m_batch_node_count));
    }
    if (m_batch_percentage_isSet) {
        obj.insert(QString("batchPercentage"), ::OpenAPI::toJsonValue(m_batch_percentage));
    }
    if (m_batch_soak_duration_isSet) {
        obj.insert(QString("batchSoakDuration"), ::OpenAPI::toJsonValue(m_batch_soak_duration));
    }
    return obj;
}

qint32 OAIStandardRolloutPolicy::getBatchNodeCount() const {
    return m_batch_node_count;
}
void OAIStandardRolloutPolicy::setBatchNodeCount(const qint32 &batch_node_count) {
    m_batch_node_count = batch_node_count;
    m_batch_node_count_isSet = true;
}

bool OAIStandardRolloutPolicy::is_batch_node_count_Set() const{
    return m_batch_node_count_isSet;
}

bool OAIStandardRolloutPolicy::is_batch_node_count_Valid() const{
    return m_batch_node_count_isValid;
}

float OAIStandardRolloutPolicy::getBatchPercentage() const {
    return m_batch_percentage;
}
void OAIStandardRolloutPolicy::setBatchPercentage(const float &batch_percentage) {
    m_batch_percentage = batch_percentage;
    m_batch_percentage_isSet = true;
}

bool OAIStandardRolloutPolicy::is_batch_percentage_Set() const{
    return m_batch_percentage_isSet;
}

bool OAIStandardRolloutPolicy::is_batch_percentage_Valid() const{
    return m_batch_percentage_isValid;
}

QString OAIStandardRolloutPolicy::getBatchSoakDuration() const {
    return m_batch_soak_duration;
}
void OAIStandardRolloutPolicy::setBatchSoakDuration(const QString &batch_soak_duration) {
    m_batch_soak_duration = batch_soak_duration;
    m_batch_soak_duration_isSet = true;
}

bool OAIStandardRolloutPolicy::is_batch_soak_duration_Set() const{
    return m_batch_soak_duration_isSet;
}

bool OAIStandardRolloutPolicy::is_batch_soak_duration_Valid() const{
    return m_batch_soak_duration_isValid;
}

bool OAIStandardRolloutPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_soak_duration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStandardRolloutPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
