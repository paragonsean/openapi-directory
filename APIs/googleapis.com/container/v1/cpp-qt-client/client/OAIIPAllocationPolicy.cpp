/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIPAllocationPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIPAllocationPolicy::OAIIPAllocationPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIPAllocationPolicy::OAIIPAllocationPolicy() {
    this->initializeModel();
}

OAIIPAllocationPolicy::~OAIIPAllocationPolicy() {}

void OAIIPAllocationPolicy::initializeModel() {

    m_additional_pod_ranges_config_isSet = false;
    m_additional_pod_ranges_config_isValid = false;

    m_cluster_ipv4_cidr_isSet = false;
    m_cluster_ipv4_cidr_isValid = false;

    m_cluster_ipv4_cidr_block_isSet = false;
    m_cluster_ipv4_cidr_block_isValid = false;

    m_cluster_secondary_range_name_isSet = false;
    m_cluster_secondary_range_name_isValid = false;

    m_create_subnetwork_isSet = false;
    m_create_subnetwork_isValid = false;

    m_default_pod_ipv4_range_utilization_isSet = false;
    m_default_pod_ipv4_range_utilization_isValid = false;

    m_ipv6_access_type_isSet = false;
    m_ipv6_access_type_isValid = false;

    m_node_ipv4_cidr_isSet = false;
    m_node_ipv4_cidr_isValid = false;

    m_node_ipv4_cidr_block_isSet = false;
    m_node_ipv4_cidr_block_isValid = false;

    m_pod_cidr_overprovision_config_isSet = false;
    m_pod_cidr_overprovision_config_isValid = false;

    m_services_ipv4_cidr_isSet = false;
    m_services_ipv4_cidr_isValid = false;

    m_services_ipv4_cidr_block_isSet = false;
    m_services_ipv4_cidr_block_isValid = false;

    m_services_ipv6_cidr_block_isSet = false;
    m_services_ipv6_cidr_block_isValid = false;

    m_services_secondary_range_name_isSet = false;
    m_services_secondary_range_name_isValid = false;

    m_stack_type_isSet = false;
    m_stack_type_isValid = false;

    m_subnet_ipv6_cidr_block_isSet = false;
    m_subnet_ipv6_cidr_block_isValid = false;

    m_subnetwork_name_isSet = false;
    m_subnetwork_name_isValid = false;

    m_tpu_ipv4_cidr_block_isSet = false;
    m_tpu_ipv4_cidr_block_isValid = false;

    m_use_ip_aliases_isSet = false;
    m_use_ip_aliases_isValid = false;

    m_use_routes_isSet = false;
    m_use_routes_isValid = false;
}

void OAIIPAllocationPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIPAllocationPolicy::fromJsonObject(QJsonObject json) {

    m_additional_pod_ranges_config_isValid = ::OpenAPI::fromJsonValue(m_additional_pod_ranges_config, json[QString("additionalPodRangesConfig")]);
    m_additional_pod_ranges_config_isSet = !json[QString("additionalPodRangesConfig")].isNull() && m_additional_pod_ranges_config_isValid;

    m_cluster_ipv4_cidr_isValid = ::OpenAPI::fromJsonValue(m_cluster_ipv4_cidr, json[QString("clusterIpv4Cidr")]);
    m_cluster_ipv4_cidr_isSet = !json[QString("clusterIpv4Cidr")].isNull() && m_cluster_ipv4_cidr_isValid;

    m_cluster_ipv4_cidr_block_isValid = ::OpenAPI::fromJsonValue(m_cluster_ipv4_cidr_block, json[QString("clusterIpv4CidrBlock")]);
    m_cluster_ipv4_cidr_block_isSet = !json[QString("clusterIpv4CidrBlock")].isNull() && m_cluster_ipv4_cidr_block_isValid;

    m_cluster_secondary_range_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_secondary_range_name, json[QString("clusterSecondaryRangeName")]);
    m_cluster_secondary_range_name_isSet = !json[QString("clusterSecondaryRangeName")].isNull() && m_cluster_secondary_range_name_isValid;

    m_create_subnetwork_isValid = ::OpenAPI::fromJsonValue(m_create_subnetwork, json[QString("createSubnetwork")]);
    m_create_subnetwork_isSet = !json[QString("createSubnetwork")].isNull() && m_create_subnetwork_isValid;

    m_default_pod_ipv4_range_utilization_isValid = ::OpenAPI::fromJsonValue(m_default_pod_ipv4_range_utilization, json[QString("defaultPodIpv4RangeUtilization")]);
    m_default_pod_ipv4_range_utilization_isSet = !json[QString("defaultPodIpv4RangeUtilization")].isNull() && m_default_pod_ipv4_range_utilization_isValid;

    m_ipv6_access_type_isValid = ::OpenAPI::fromJsonValue(m_ipv6_access_type, json[QString("ipv6AccessType")]);
    m_ipv6_access_type_isSet = !json[QString("ipv6AccessType")].isNull() && m_ipv6_access_type_isValid;

    m_node_ipv4_cidr_isValid = ::OpenAPI::fromJsonValue(m_node_ipv4_cidr, json[QString("nodeIpv4Cidr")]);
    m_node_ipv4_cidr_isSet = !json[QString("nodeIpv4Cidr")].isNull() && m_node_ipv4_cidr_isValid;

    m_node_ipv4_cidr_block_isValid = ::OpenAPI::fromJsonValue(m_node_ipv4_cidr_block, json[QString("nodeIpv4CidrBlock")]);
    m_node_ipv4_cidr_block_isSet = !json[QString("nodeIpv4CidrBlock")].isNull() && m_node_ipv4_cidr_block_isValid;

    m_pod_cidr_overprovision_config_isValid = ::OpenAPI::fromJsonValue(m_pod_cidr_overprovision_config, json[QString("podCidrOverprovisionConfig")]);
    m_pod_cidr_overprovision_config_isSet = !json[QString("podCidrOverprovisionConfig")].isNull() && m_pod_cidr_overprovision_config_isValid;

    m_services_ipv4_cidr_isValid = ::OpenAPI::fromJsonValue(m_services_ipv4_cidr, json[QString("servicesIpv4Cidr")]);
    m_services_ipv4_cidr_isSet = !json[QString("servicesIpv4Cidr")].isNull() && m_services_ipv4_cidr_isValid;

    m_services_ipv4_cidr_block_isValid = ::OpenAPI::fromJsonValue(m_services_ipv4_cidr_block, json[QString("servicesIpv4CidrBlock")]);
    m_services_ipv4_cidr_block_isSet = !json[QString("servicesIpv4CidrBlock")].isNull() && m_services_ipv4_cidr_block_isValid;

    m_services_ipv6_cidr_block_isValid = ::OpenAPI::fromJsonValue(m_services_ipv6_cidr_block, json[QString("servicesIpv6CidrBlock")]);
    m_services_ipv6_cidr_block_isSet = !json[QString("servicesIpv6CidrBlock")].isNull() && m_services_ipv6_cidr_block_isValid;

    m_services_secondary_range_name_isValid = ::OpenAPI::fromJsonValue(m_services_secondary_range_name, json[QString("servicesSecondaryRangeName")]);
    m_services_secondary_range_name_isSet = !json[QString("servicesSecondaryRangeName")].isNull() && m_services_secondary_range_name_isValid;

    m_stack_type_isValid = ::OpenAPI::fromJsonValue(m_stack_type, json[QString("stackType")]);
    m_stack_type_isSet = !json[QString("stackType")].isNull() && m_stack_type_isValid;

    m_subnet_ipv6_cidr_block_isValid = ::OpenAPI::fromJsonValue(m_subnet_ipv6_cidr_block, json[QString("subnetIpv6CidrBlock")]);
    m_subnet_ipv6_cidr_block_isSet = !json[QString("subnetIpv6CidrBlock")].isNull() && m_subnet_ipv6_cidr_block_isValid;

    m_subnetwork_name_isValid = ::OpenAPI::fromJsonValue(m_subnetwork_name, json[QString("subnetworkName")]);
    m_subnetwork_name_isSet = !json[QString("subnetworkName")].isNull() && m_subnetwork_name_isValid;

    m_tpu_ipv4_cidr_block_isValid = ::OpenAPI::fromJsonValue(m_tpu_ipv4_cidr_block, json[QString("tpuIpv4CidrBlock")]);
    m_tpu_ipv4_cidr_block_isSet = !json[QString("tpuIpv4CidrBlock")].isNull() && m_tpu_ipv4_cidr_block_isValid;

    m_use_ip_aliases_isValid = ::OpenAPI::fromJsonValue(m_use_ip_aliases, json[QString("useIpAliases")]);
    m_use_ip_aliases_isSet = !json[QString("useIpAliases")].isNull() && m_use_ip_aliases_isValid;

    m_use_routes_isValid = ::OpenAPI::fromJsonValue(m_use_routes, json[QString("useRoutes")]);
    m_use_routes_isSet = !json[QString("useRoutes")].isNull() && m_use_routes_isValid;
}

QString OAIIPAllocationPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIPAllocationPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_pod_ranges_config.isSet()) {
        obj.insert(QString("additionalPodRangesConfig"), ::OpenAPI::toJsonValue(m_additional_pod_ranges_config));
    }
    if (m_cluster_ipv4_cidr_isSet) {
        obj.insert(QString("clusterIpv4Cidr"), ::OpenAPI::toJsonValue(m_cluster_ipv4_cidr));
    }
    if (m_cluster_ipv4_cidr_block_isSet) {
        obj.insert(QString("clusterIpv4CidrBlock"), ::OpenAPI::toJsonValue(m_cluster_ipv4_cidr_block));
    }
    if (m_cluster_secondary_range_name_isSet) {
        obj.insert(QString("clusterSecondaryRangeName"), ::OpenAPI::toJsonValue(m_cluster_secondary_range_name));
    }
    if (m_create_subnetwork_isSet) {
        obj.insert(QString("createSubnetwork"), ::OpenAPI::toJsonValue(m_create_subnetwork));
    }
    if (m_default_pod_ipv4_range_utilization_isSet) {
        obj.insert(QString("defaultPodIpv4RangeUtilization"), ::OpenAPI::toJsonValue(m_default_pod_ipv4_range_utilization));
    }
    if (m_ipv6_access_type_isSet) {
        obj.insert(QString("ipv6AccessType"), ::OpenAPI::toJsonValue(m_ipv6_access_type));
    }
    if (m_node_ipv4_cidr_isSet) {
        obj.insert(QString("nodeIpv4Cidr"), ::OpenAPI::toJsonValue(m_node_ipv4_cidr));
    }
    if (m_node_ipv4_cidr_block_isSet) {
        obj.insert(QString("nodeIpv4CidrBlock"), ::OpenAPI::toJsonValue(m_node_ipv4_cidr_block));
    }
    if (m_pod_cidr_overprovision_config.isSet()) {
        obj.insert(QString("podCidrOverprovisionConfig"), ::OpenAPI::toJsonValue(m_pod_cidr_overprovision_config));
    }
    if (m_services_ipv4_cidr_isSet) {
        obj.insert(QString("servicesIpv4Cidr"), ::OpenAPI::toJsonValue(m_services_ipv4_cidr));
    }
    if (m_services_ipv4_cidr_block_isSet) {
        obj.insert(QString("servicesIpv4CidrBlock"), ::OpenAPI::toJsonValue(m_services_ipv4_cidr_block));
    }
    if (m_services_ipv6_cidr_block_isSet) {
        obj.insert(QString("servicesIpv6CidrBlock"), ::OpenAPI::toJsonValue(m_services_ipv6_cidr_block));
    }
    if (m_services_secondary_range_name_isSet) {
        obj.insert(QString("servicesSecondaryRangeName"), ::OpenAPI::toJsonValue(m_services_secondary_range_name));
    }
    if (m_stack_type_isSet) {
        obj.insert(QString("stackType"), ::OpenAPI::toJsonValue(m_stack_type));
    }
    if (m_subnet_ipv6_cidr_block_isSet) {
        obj.insert(QString("subnetIpv6CidrBlock"), ::OpenAPI::toJsonValue(m_subnet_ipv6_cidr_block));
    }
    if (m_subnetwork_name_isSet) {
        obj.insert(QString("subnetworkName"), ::OpenAPI::toJsonValue(m_subnetwork_name));
    }
    if (m_tpu_ipv4_cidr_block_isSet) {
        obj.insert(QString("tpuIpv4CidrBlock"), ::OpenAPI::toJsonValue(m_tpu_ipv4_cidr_block));
    }
    if (m_use_ip_aliases_isSet) {
        obj.insert(QString("useIpAliases"), ::OpenAPI::toJsonValue(m_use_ip_aliases));
    }
    if (m_use_routes_isSet) {
        obj.insert(QString("useRoutes"), ::OpenAPI::toJsonValue(m_use_routes));
    }
    return obj;
}

OAIAdditionalPodRangesConfig OAIIPAllocationPolicy::getAdditionalPodRangesConfig() const {
    return m_additional_pod_ranges_config;
}
void OAIIPAllocationPolicy::setAdditionalPodRangesConfig(const OAIAdditionalPodRangesConfig &additional_pod_ranges_config) {
    m_additional_pod_ranges_config = additional_pod_ranges_config;
    m_additional_pod_ranges_config_isSet = true;
}

bool OAIIPAllocationPolicy::is_additional_pod_ranges_config_Set() const{
    return m_additional_pod_ranges_config_isSet;
}

bool OAIIPAllocationPolicy::is_additional_pod_ranges_config_Valid() const{
    return m_additional_pod_ranges_config_isValid;
}

QString OAIIPAllocationPolicy::getClusterIpv4Cidr() const {
    return m_cluster_ipv4_cidr;
}
void OAIIPAllocationPolicy::setClusterIpv4Cidr(const QString &cluster_ipv4_cidr) {
    m_cluster_ipv4_cidr = cluster_ipv4_cidr;
    m_cluster_ipv4_cidr_isSet = true;
}

bool OAIIPAllocationPolicy::is_cluster_ipv4_cidr_Set() const{
    return m_cluster_ipv4_cidr_isSet;
}

bool OAIIPAllocationPolicy::is_cluster_ipv4_cidr_Valid() const{
    return m_cluster_ipv4_cidr_isValid;
}

QString OAIIPAllocationPolicy::getClusterIpv4CidrBlock() const {
    return m_cluster_ipv4_cidr_block;
}
void OAIIPAllocationPolicy::setClusterIpv4CidrBlock(const QString &cluster_ipv4_cidr_block) {
    m_cluster_ipv4_cidr_block = cluster_ipv4_cidr_block;
    m_cluster_ipv4_cidr_block_isSet = true;
}

bool OAIIPAllocationPolicy::is_cluster_ipv4_cidr_block_Set() const{
    return m_cluster_ipv4_cidr_block_isSet;
}

bool OAIIPAllocationPolicy::is_cluster_ipv4_cidr_block_Valid() const{
    return m_cluster_ipv4_cidr_block_isValid;
}

QString OAIIPAllocationPolicy::getClusterSecondaryRangeName() const {
    return m_cluster_secondary_range_name;
}
void OAIIPAllocationPolicy::setClusterSecondaryRangeName(const QString &cluster_secondary_range_name) {
    m_cluster_secondary_range_name = cluster_secondary_range_name;
    m_cluster_secondary_range_name_isSet = true;
}

bool OAIIPAllocationPolicy::is_cluster_secondary_range_name_Set() const{
    return m_cluster_secondary_range_name_isSet;
}

bool OAIIPAllocationPolicy::is_cluster_secondary_range_name_Valid() const{
    return m_cluster_secondary_range_name_isValid;
}

bool OAIIPAllocationPolicy::isCreateSubnetwork() const {
    return m_create_subnetwork;
}
void OAIIPAllocationPolicy::setCreateSubnetwork(const bool &create_subnetwork) {
    m_create_subnetwork = create_subnetwork;
    m_create_subnetwork_isSet = true;
}

bool OAIIPAllocationPolicy::is_create_subnetwork_Set() const{
    return m_create_subnetwork_isSet;
}

bool OAIIPAllocationPolicy::is_create_subnetwork_Valid() const{
    return m_create_subnetwork_isValid;
}

double OAIIPAllocationPolicy::getDefaultPodIpv4RangeUtilization() const {
    return m_default_pod_ipv4_range_utilization;
}
void OAIIPAllocationPolicy::setDefaultPodIpv4RangeUtilization(const double &default_pod_ipv4_range_utilization) {
    m_default_pod_ipv4_range_utilization = default_pod_ipv4_range_utilization;
    m_default_pod_ipv4_range_utilization_isSet = true;
}

bool OAIIPAllocationPolicy::is_default_pod_ipv4_range_utilization_Set() const{
    return m_default_pod_ipv4_range_utilization_isSet;
}

bool OAIIPAllocationPolicy::is_default_pod_ipv4_range_utilization_Valid() const{
    return m_default_pod_ipv4_range_utilization_isValid;
}

QString OAIIPAllocationPolicy::getIpv6AccessType() const {
    return m_ipv6_access_type;
}
void OAIIPAllocationPolicy::setIpv6AccessType(const QString &ipv6_access_type) {
    m_ipv6_access_type = ipv6_access_type;
    m_ipv6_access_type_isSet = true;
}

bool OAIIPAllocationPolicy::is_ipv6_access_type_Set() const{
    return m_ipv6_access_type_isSet;
}

bool OAIIPAllocationPolicy::is_ipv6_access_type_Valid() const{
    return m_ipv6_access_type_isValid;
}

QString OAIIPAllocationPolicy::getNodeIpv4Cidr() const {
    return m_node_ipv4_cidr;
}
void OAIIPAllocationPolicy::setNodeIpv4Cidr(const QString &node_ipv4_cidr) {
    m_node_ipv4_cidr = node_ipv4_cidr;
    m_node_ipv4_cidr_isSet = true;
}

bool OAIIPAllocationPolicy::is_node_ipv4_cidr_Set() const{
    return m_node_ipv4_cidr_isSet;
}

bool OAIIPAllocationPolicy::is_node_ipv4_cidr_Valid() const{
    return m_node_ipv4_cidr_isValid;
}

QString OAIIPAllocationPolicy::getNodeIpv4CidrBlock() const {
    return m_node_ipv4_cidr_block;
}
void OAIIPAllocationPolicy::setNodeIpv4CidrBlock(const QString &node_ipv4_cidr_block) {
    m_node_ipv4_cidr_block = node_ipv4_cidr_block;
    m_node_ipv4_cidr_block_isSet = true;
}

bool OAIIPAllocationPolicy::is_node_ipv4_cidr_block_Set() const{
    return m_node_ipv4_cidr_block_isSet;
}

bool OAIIPAllocationPolicy::is_node_ipv4_cidr_block_Valid() const{
    return m_node_ipv4_cidr_block_isValid;
}

OAIPodCIDROverprovisionConfig OAIIPAllocationPolicy::getPodCidrOverprovisionConfig() const {
    return m_pod_cidr_overprovision_config;
}
void OAIIPAllocationPolicy::setPodCidrOverprovisionConfig(const OAIPodCIDROverprovisionConfig &pod_cidr_overprovision_config) {
    m_pod_cidr_overprovision_config = pod_cidr_overprovision_config;
    m_pod_cidr_overprovision_config_isSet = true;
}

bool OAIIPAllocationPolicy::is_pod_cidr_overprovision_config_Set() const{
    return m_pod_cidr_overprovision_config_isSet;
}

bool OAIIPAllocationPolicy::is_pod_cidr_overprovision_config_Valid() const{
    return m_pod_cidr_overprovision_config_isValid;
}

QString OAIIPAllocationPolicy::getServicesIpv4Cidr() const {
    return m_services_ipv4_cidr;
}
void OAIIPAllocationPolicy::setServicesIpv4Cidr(const QString &services_ipv4_cidr) {
    m_services_ipv4_cidr = services_ipv4_cidr;
    m_services_ipv4_cidr_isSet = true;
}

bool OAIIPAllocationPolicy::is_services_ipv4_cidr_Set() const{
    return m_services_ipv4_cidr_isSet;
}

bool OAIIPAllocationPolicy::is_services_ipv4_cidr_Valid() const{
    return m_services_ipv4_cidr_isValid;
}

QString OAIIPAllocationPolicy::getServicesIpv4CidrBlock() const {
    return m_services_ipv4_cidr_block;
}
void OAIIPAllocationPolicy::setServicesIpv4CidrBlock(const QString &services_ipv4_cidr_block) {
    m_services_ipv4_cidr_block = services_ipv4_cidr_block;
    m_services_ipv4_cidr_block_isSet = true;
}

bool OAIIPAllocationPolicy::is_services_ipv4_cidr_block_Set() const{
    return m_services_ipv4_cidr_block_isSet;
}

bool OAIIPAllocationPolicy::is_services_ipv4_cidr_block_Valid() const{
    return m_services_ipv4_cidr_block_isValid;
}

QString OAIIPAllocationPolicy::getServicesIpv6CidrBlock() const {
    return m_services_ipv6_cidr_block;
}
void OAIIPAllocationPolicy::setServicesIpv6CidrBlock(const QString &services_ipv6_cidr_block) {
    m_services_ipv6_cidr_block = services_ipv6_cidr_block;
    m_services_ipv6_cidr_block_isSet = true;
}

bool OAIIPAllocationPolicy::is_services_ipv6_cidr_block_Set() const{
    return m_services_ipv6_cidr_block_isSet;
}

bool OAIIPAllocationPolicy::is_services_ipv6_cidr_block_Valid() const{
    return m_services_ipv6_cidr_block_isValid;
}

QString OAIIPAllocationPolicy::getServicesSecondaryRangeName() const {
    return m_services_secondary_range_name;
}
void OAIIPAllocationPolicy::setServicesSecondaryRangeName(const QString &services_secondary_range_name) {
    m_services_secondary_range_name = services_secondary_range_name;
    m_services_secondary_range_name_isSet = true;
}

bool OAIIPAllocationPolicy::is_services_secondary_range_name_Set() const{
    return m_services_secondary_range_name_isSet;
}

bool OAIIPAllocationPolicy::is_services_secondary_range_name_Valid() const{
    return m_services_secondary_range_name_isValid;
}

QString OAIIPAllocationPolicy::getStackType() const {
    return m_stack_type;
}
void OAIIPAllocationPolicy::setStackType(const QString &stack_type) {
    m_stack_type = stack_type;
    m_stack_type_isSet = true;
}

bool OAIIPAllocationPolicy::is_stack_type_Set() const{
    return m_stack_type_isSet;
}

bool OAIIPAllocationPolicy::is_stack_type_Valid() const{
    return m_stack_type_isValid;
}

QString OAIIPAllocationPolicy::getSubnetIpv6CidrBlock() const {
    return m_subnet_ipv6_cidr_block;
}
void OAIIPAllocationPolicy::setSubnetIpv6CidrBlock(const QString &subnet_ipv6_cidr_block) {
    m_subnet_ipv6_cidr_block = subnet_ipv6_cidr_block;
    m_subnet_ipv6_cidr_block_isSet = true;
}

bool OAIIPAllocationPolicy::is_subnet_ipv6_cidr_block_Set() const{
    return m_subnet_ipv6_cidr_block_isSet;
}

bool OAIIPAllocationPolicy::is_subnet_ipv6_cidr_block_Valid() const{
    return m_subnet_ipv6_cidr_block_isValid;
}

QString OAIIPAllocationPolicy::getSubnetworkName() const {
    return m_subnetwork_name;
}
void OAIIPAllocationPolicy::setSubnetworkName(const QString &subnetwork_name) {
    m_subnetwork_name = subnetwork_name;
    m_subnetwork_name_isSet = true;
}

bool OAIIPAllocationPolicy::is_subnetwork_name_Set() const{
    return m_subnetwork_name_isSet;
}

bool OAIIPAllocationPolicy::is_subnetwork_name_Valid() const{
    return m_subnetwork_name_isValid;
}

QString OAIIPAllocationPolicy::getTpuIpv4CidrBlock() const {
    return m_tpu_ipv4_cidr_block;
}
void OAIIPAllocationPolicy::setTpuIpv4CidrBlock(const QString &tpu_ipv4_cidr_block) {
    m_tpu_ipv4_cidr_block = tpu_ipv4_cidr_block;
    m_tpu_ipv4_cidr_block_isSet = true;
}

bool OAIIPAllocationPolicy::is_tpu_ipv4_cidr_block_Set() const{
    return m_tpu_ipv4_cidr_block_isSet;
}

bool OAIIPAllocationPolicy::is_tpu_ipv4_cidr_block_Valid() const{
    return m_tpu_ipv4_cidr_block_isValid;
}

bool OAIIPAllocationPolicy::isUseIpAliases() const {
    return m_use_ip_aliases;
}
void OAIIPAllocationPolicy::setUseIpAliases(const bool &use_ip_aliases) {
    m_use_ip_aliases = use_ip_aliases;
    m_use_ip_aliases_isSet = true;
}

bool OAIIPAllocationPolicy::is_use_ip_aliases_Set() const{
    return m_use_ip_aliases_isSet;
}

bool OAIIPAllocationPolicy::is_use_ip_aliases_Valid() const{
    return m_use_ip_aliases_isValid;
}

bool OAIIPAllocationPolicy::isUseRoutes() const {
    return m_use_routes;
}
void OAIIPAllocationPolicy::setUseRoutes(const bool &use_routes) {
    m_use_routes = use_routes;
    m_use_routes_isSet = true;
}

bool OAIIPAllocationPolicy::is_use_routes_Set() const{
    return m_use_routes_isSet;
}

bool OAIIPAllocationPolicy::is_use_routes_Valid() const{
    return m_use_routes_isValid;
}

bool OAIIPAllocationPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_pod_ranges_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_ipv4_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_ipv4_cidr_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_secondary_range_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_subnetwork_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_pod_ipv4_range_utilization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv6_access_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_ipv4_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_ipv4_cidr_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_cidr_overprovision_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_services_ipv4_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_services_ipv4_cidr_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_services_ipv6_cidr_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_services_secondary_range_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ipv6_cidr_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnetwork_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tpu_ipv4_cidr_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_ip_aliases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_routes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIPAllocationPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
