/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPubSub.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPubSub::OAIPubSub(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPubSub::OAIPubSub() {
    this->initializeModel();
}

OAIPubSub::~OAIPubSub() {}

void OAIPubSub::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;
}

void OAIPubSub::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPubSub::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;
}

QString OAIPubSub::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPubSub::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    return obj;
}

bool OAIPubSub::isEnabled() const {
    return m_enabled;
}
void OAIPubSub::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIPubSub::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIPubSub::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIFilter OAIPubSub::getFilter() const {
    return m_filter;
}
void OAIPubSub::setFilter(const OAIFilter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIPubSub::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIPubSub::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIPubSub::getTopic() const {
    return m_topic;
}
void OAIPubSub::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIPubSub::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIPubSub::is_topic_Valid() const{
    return m_topic_isValid;
}

bool OAIPubSub::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPubSub::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
