/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkConfig::OAINetworkConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkConfig::OAINetworkConfig() {
    this->initializeModel();
}

OAINetworkConfig::~OAINetworkConfig() {}

void OAINetworkConfig::initializeModel() {

    m_datapath_provider_isSet = false;
    m_datapath_provider_isValid = false;

    m_default_snat_status_isSet = false;
    m_default_snat_status_isValid = false;

    m_dns_config_isSet = false;
    m_dns_config_isValid = false;

    m_enable_fqdn_network_policy_isSet = false;
    m_enable_fqdn_network_policy_isValid = false;

    m_enable_intra_node_visibility_isSet = false;
    m_enable_intra_node_visibility_isValid = false;

    m_enable_l4ilb_subsetting_isSet = false;
    m_enable_l4ilb_subsetting_isValid = false;

    m_enable_multi_networking_isSet = false;
    m_enable_multi_networking_isValid = false;

    m_gateway_api_config_isSet = false;
    m_gateway_api_config_isValid = false;

    m_in_transit_encryption_config_isSet = false;
    m_in_transit_encryption_config_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_network_performance_config_isSet = false;
    m_network_performance_config_isValid = false;

    m_private_ipv6_google_access_isSet = false;
    m_private_ipv6_google_access_isValid = false;

    m_service_external_ips_config_isSet = false;
    m_service_external_ips_config_isValid = false;

    m_subnetwork_isSet = false;
    m_subnetwork_isValid = false;
}

void OAINetworkConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkConfig::fromJsonObject(QJsonObject json) {

    m_datapath_provider_isValid = ::OpenAPI::fromJsonValue(m_datapath_provider, json[QString("datapathProvider")]);
    m_datapath_provider_isSet = !json[QString("datapathProvider")].isNull() && m_datapath_provider_isValid;

    m_default_snat_status_isValid = ::OpenAPI::fromJsonValue(m_default_snat_status, json[QString("defaultSnatStatus")]);
    m_default_snat_status_isSet = !json[QString("defaultSnatStatus")].isNull() && m_default_snat_status_isValid;

    m_dns_config_isValid = ::OpenAPI::fromJsonValue(m_dns_config, json[QString("dnsConfig")]);
    m_dns_config_isSet = !json[QString("dnsConfig")].isNull() && m_dns_config_isValid;

    m_enable_fqdn_network_policy_isValid = ::OpenAPI::fromJsonValue(m_enable_fqdn_network_policy, json[QString("enableFqdnNetworkPolicy")]);
    m_enable_fqdn_network_policy_isSet = !json[QString("enableFqdnNetworkPolicy")].isNull() && m_enable_fqdn_network_policy_isValid;

    m_enable_intra_node_visibility_isValid = ::OpenAPI::fromJsonValue(m_enable_intra_node_visibility, json[QString("enableIntraNodeVisibility")]);
    m_enable_intra_node_visibility_isSet = !json[QString("enableIntraNodeVisibility")].isNull() && m_enable_intra_node_visibility_isValid;

    m_enable_l4ilb_subsetting_isValid = ::OpenAPI::fromJsonValue(m_enable_l4ilb_subsetting, json[QString("enableL4ilbSubsetting")]);
    m_enable_l4ilb_subsetting_isSet = !json[QString("enableL4ilbSubsetting")].isNull() && m_enable_l4ilb_subsetting_isValid;

    m_enable_multi_networking_isValid = ::OpenAPI::fromJsonValue(m_enable_multi_networking, json[QString("enableMultiNetworking")]);
    m_enable_multi_networking_isSet = !json[QString("enableMultiNetworking")].isNull() && m_enable_multi_networking_isValid;

    m_gateway_api_config_isValid = ::OpenAPI::fromJsonValue(m_gateway_api_config, json[QString("gatewayApiConfig")]);
    m_gateway_api_config_isSet = !json[QString("gatewayApiConfig")].isNull() && m_gateway_api_config_isValid;

    m_in_transit_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_in_transit_encryption_config, json[QString("inTransitEncryptionConfig")]);
    m_in_transit_encryption_config_isSet = !json[QString("inTransitEncryptionConfig")].isNull() && m_in_transit_encryption_config_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_network_performance_config_isValid = ::OpenAPI::fromJsonValue(m_network_performance_config, json[QString("networkPerformanceConfig")]);
    m_network_performance_config_isSet = !json[QString("networkPerformanceConfig")].isNull() && m_network_performance_config_isValid;

    m_private_ipv6_google_access_isValid = ::OpenAPI::fromJsonValue(m_private_ipv6_google_access, json[QString("privateIpv6GoogleAccess")]);
    m_private_ipv6_google_access_isSet = !json[QString("privateIpv6GoogleAccess")].isNull() && m_private_ipv6_google_access_isValid;

    m_service_external_ips_config_isValid = ::OpenAPI::fromJsonValue(m_service_external_ips_config, json[QString("serviceExternalIpsConfig")]);
    m_service_external_ips_config_isSet = !json[QString("serviceExternalIpsConfig")].isNull() && m_service_external_ips_config_isValid;

    m_subnetwork_isValid = ::OpenAPI::fromJsonValue(m_subnetwork, json[QString("subnetwork")]);
    m_subnetwork_isSet = !json[QString("subnetwork")].isNull() && m_subnetwork_isValid;
}

QString OAINetworkConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_datapath_provider_isSet) {
        obj.insert(QString("datapathProvider"), ::OpenAPI::toJsonValue(m_datapath_provider));
    }
    if (m_default_snat_status.isSet()) {
        obj.insert(QString("defaultSnatStatus"), ::OpenAPI::toJsonValue(m_default_snat_status));
    }
    if (m_dns_config.isSet()) {
        obj.insert(QString("dnsConfig"), ::OpenAPI::toJsonValue(m_dns_config));
    }
    if (m_enable_fqdn_network_policy_isSet) {
        obj.insert(QString("enableFqdnNetworkPolicy"), ::OpenAPI::toJsonValue(m_enable_fqdn_network_policy));
    }
    if (m_enable_intra_node_visibility_isSet) {
        obj.insert(QString("enableIntraNodeVisibility"), ::OpenAPI::toJsonValue(m_enable_intra_node_visibility));
    }
    if (m_enable_l4ilb_subsetting_isSet) {
        obj.insert(QString("enableL4ilbSubsetting"), ::OpenAPI::toJsonValue(m_enable_l4ilb_subsetting));
    }
    if (m_enable_multi_networking_isSet) {
        obj.insert(QString("enableMultiNetworking"), ::OpenAPI::toJsonValue(m_enable_multi_networking));
    }
    if (m_gateway_api_config.isSet()) {
        obj.insert(QString("gatewayApiConfig"), ::OpenAPI::toJsonValue(m_gateway_api_config));
    }
    if (m_in_transit_encryption_config_isSet) {
        obj.insert(QString("inTransitEncryptionConfig"), ::OpenAPI::toJsonValue(m_in_transit_encryption_config));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_network_performance_config.isSet()) {
        obj.insert(QString("networkPerformanceConfig"), ::OpenAPI::toJsonValue(m_network_performance_config));
    }
    if (m_private_ipv6_google_access_isSet) {
        obj.insert(QString("privateIpv6GoogleAccess"), ::OpenAPI::toJsonValue(m_private_ipv6_google_access));
    }
    if (m_service_external_ips_config.isSet()) {
        obj.insert(QString("serviceExternalIpsConfig"), ::OpenAPI::toJsonValue(m_service_external_ips_config));
    }
    if (m_subnetwork_isSet) {
        obj.insert(QString("subnetwork"), ::OpenAPI::toJsonValue(m_subnetwork));
    }
    return obj;
}

QString OAINetworkConfig::getDatapathProvider() const {
    return m_datapath_provider;
}
void OAINetworkConfig::setDatapathProvider(const QString &datapath_provider) {
    m_datapath_provider = datapath_provider;
    m_datapath_provider_isSet = true;
}

bool OAINetworkConfig::is_datapath_provider_Set() const{
    return m_datapath_provider_isSet;
}

bool OAINetworkConfig::is_datapath_provider_Valid() const{
    return m_datapath_provider_isValid;
}

OAIDefaultSnatStatus OAINetworkConfig::getDefaultSnatStatus() const {
    return m_default_snat_status;
}
void OAINetworkConfig::setDefaultSnatStatus(const OAIDefaultSnatStatus &default_snat_status) {
    m_default_snat_status = default_snat_status;
    m_default_snat_status_isSet = true;
}

bool OAINetworkConfig::is_default_snat_status_Set() const{
    return m_default_snat_status_isSet;
}

bool OAINetworkConfig::is_default_snat_status_Valid() const{
    return m_default_snat_status_isValid;
}

OAIDNSConfig OAINetworkConfig::getDnsConfig() const {
    return m_dns_config;
}
void OAINetworkConfig::setDnsConfig(const OAIDNSConfig &dns_config) {
    m_dns_config = dns_config;
    m_dns_config_isSet = true;
}

bool OAINetworkConfig::is_dns_config_Set() const{
    return m_dns_config_isSet;
}

bool OAINetworkConfig::is_dns_config_Valid() const{
    return m_dns_config_isValid;
}

bool OAINetworkConfig::isEnableFqdnNetworkPolicy() const {
    return m_enable_fqdn_network_policy;
}
void OAINetworkConfig::setEnableFqdnNetworkPolicy(const bool &enable_fqdn_network_policy) {
    m_enable_fqdn_network_policy = enable_fqdn_network_policy;
    m_enable_fqdn_network_policy_isSet = true;
}

bool OAINetworkConfig::is_enable_fqdn_network_policy_Set() const{
    return m_enable_fqdn_network_policy_isSet;
}

bool OAINetworkConfig::is_enable_fqdn_network_policy_Valid() const{
    return m_enable_fqdn_network_policy_isValid;
}

bool OAINetworkConfig::isEnableIntraNodeVisibility() const {
    return m_enable_intra_node_visibility;
}
void OAINetworkConfig::setEnableIntraNodeVisibility(const bool &enable_intra_node_visibility) {
    m_enable_intra_node_visibility = enable_intra_node_visibility;
    m_enable_intra_node_visibility_isSet = true;
}

bool OAINetworkConfig::is_enable_intra_node_visibility_Set() const{
    return m_enable_intra_node_visibility_isSet;
}

bool OAINetworkConfig::is_enable_intra_node_visibility_Valid() const{
    return m_enable_intra_node_visibility_isValid;
}

bool OAINetworkConfig::isEnableL4ilbSubsetting() const {
    return m_enable_l4ilb_subsetting;
}
void OAINetworkConfig::setEnableL4ilbSubsetting(const bool &enable_l4ilb_subsetting) {
    m_enable_l4ilb_subsetting = enable_l4ilb_subsetting;
    m_enable_l4ilb_subsetting_isSet = true;
}

bool OAINetworkConfig::is_enable_l4ilb_subsetting_Set() const{
    return m_enable_l4ilb_subsetting_isSet;
}

bool OAINetworkConfig::is_enable_l4ilb_subsetting_Valid() const{
    return m_enable_l4ilb_subsetting_isValid;
}

bool OAINetworkConfig::isEnableMultiNetworking() const {
    return m_enable_multi_networking;
}
void OAINetworkConfig::setEnableMultiNetworking(const bool &enable_multi_networking) {
    m_enable_multi_networking = enable_multi_networking;
    m_enable_multi_networking_isSet = true;
}

bool OAINetworkConfig::is_enable_multi_networking_Set() const{
    return m_enable_multi_networking_isSet;
}

bool OAINetworkConfig::is_enable_multi_networking_Valid() const{
    return m_enable_multi_networking_isValid;
}

OAIGatewayAPIConfig OAINetworkConfig::getGatewayApiConfig() const {
    return m_gateway_api_config;
}
void OAINetworkConfig::setGatewayApiConfig(const OAIGatewayAPIConfig &gateway_api_config) {
    m_gateway_api_config = gateway_api_config;
    m_gateway_api_config_isSet = true;
}

bool OAINetworkConfig::is_gateway_api_config_Set() const{
    return m_gateway_api_config_isSet;
}

bool OAINetworkConfig::is_gateway_api_config_Valid() const{
    return m_gateway_api_config_isValid;
}

QString OAINetworkConfig::getInTransitEncryptionConfig() const {
    return m_in_transit_encryption_config;
}
void OAINetworkConfig::setInTransitEncryptionConfig(const QString &in_transit_encryption_config) {
    m_in_transit_encryption_config = in_transit_encryption_config;
    m_in_transit_encryption_config_isSet = true;
}

bool OAINetworkConfig::is_in_transit_encryption_config_Set() const{
    return m_in_transit_encryption_config_isSet;
}

bool OAINetworkConfig::is_in_transit_encryption_config_Valid() const{
    return m_in_transit_encryption_config_isValid;
}

QString OAINetworkConfig::getNetwork() const {
    return m_network;
}
void OAINetworkConfig::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAINetworkConfig::is_network_Set() const{
    return m_network_isSet;
}

bool OAINetworkConfig::is_network_Valid() const{
    return m_network_isValid;
}

OAIClusterNetworkPerformanceConfig OAINetworkConfig::getNetworkPerformanceConfig() const {
    return m_network_performance_config;
}
void OAINetworkConfig::setNetworkPerformanceConfig(const OAIClusterNetworkPerformanceConfig &network_performance_config) {
    m_network_performance_config = network_performance_config;
    m_network_performance_config_isSet = true;
}

bool OAINetworkConfig::is_network_performance_config_Set() const{
    return m_network_performance_config_isSet;
}

bool OAINetworkConfig::is_network_performance_config_Valid() const{
    return m_network_performance_config_isValid;
}

QString OAINetworkConfig::getPrivateIpv6GoogleAccess() const {
    return m_private_ipv6_google_access;
}
void OAINetworkConfig::setPrivateIpv6GoogleAccess(const QString &private_ipv6_google_access) {
    m_private_ipv6_google_access = private_ipv6_google_access;
    m_private_ipv6_google_access_isSet = true;
}

bool OAINetworkConfig::is_private_ipv6_google_access_Set() const{
    return m_private_ipv6_google_access_isSet;
}

bool OAINetworkConfig::is_private_ipv6_google_access_Valid() const{
    return m_private_ipv6_google_access_isValid;
}

OAIServiceExternalIPsConfig OAINetworkConfig::getServiceExternalIpsConfig() const {
    return m_service_external_ips_config;
}
void OAINetworkConfig::setServiceExternalIpsConfig(const OAIServiceExternalIPsConfig &service_external_ips_config) {
    m_service_external_ips_config = service_external_ips_config;
    m_service_external_ips_config_isSet = true;
}

bool OAINetworkConfig::is_service_external_ips_config_Set() const{
    return m_service_external_ips_config_isSet;
}

bool OAINetworkConfig::is_service_external_ips_config_Valid() const{
    return m_service_external_ips_config_isValid;
}

QString OAINetworkConfig::getSubnetwork() const {
    return m_subnetwork;
}
void OAINetworkConfig::setSubnetwork(const QString &subnetwork) {
    m_subnetwork = subnetwork;
    m_subnetwork_isSet = true;
}

bool OAINetworkConfig::is_subnetwork_Set() const{
    return m_subnetwork_isSet;
}

bool OAINetworkConfig::is_subnetwork_Valid() const{
    return m_subnetwork_isValid;
}

bool OAINetworkConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_datapath_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_snat_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_fqdn_network_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_intra_node_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_l4ilb_subsetting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_multi_networking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_api_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_transit_encryption_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_performance_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ipv6_google_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_external_ips_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnetwork_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
