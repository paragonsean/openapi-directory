/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAutoprovisioningNodePoolDefaults.h
 *
 * AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
 */

#ifndef OAIAutoprovisioningNodePoolDefaults_H
#define OAIAutoprovisioningNodePoolDefaults_H

#include <QJsonObject>

#include "OAINodeManagement.h"
#include "OAIShieldedInstanceConfig.h"
#include "OAIUpgradeSettings.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINodeManagement;
class OAIShieldedInstanceConfig;
class OAIUpgradeSettings;

class OAIAutoprovisioningNodePoolDefaults : public OAIObject {
public:
    OAIAutoprovisioningNodePoolDefaults();
    OAIAutoprovisioningNodePoolDefaults(QString json);
    ~OAIAutoprovisioningNodePoolDefaults() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBootDiskKmsKey() const;
    void setBootDiskKmsKey(const QString &boot_disk_kms_key);
    bool is_boot_disk_kms_key_Set() const;
    bool is_boot_disk_kms_key_Valid() const;

    qint32 getDiskSizeGb() const;
    void setDiskSizeGb(const qint32 &disk_size_gb);
    bool is_disk_size_gb_Set() const;
    bool is_disk_size_gb_Valid() const;

    QString getDiskType() const;
    void setDiskType(const QString &disk_type);
    bool is_disk_type_Set() const;
    bool is_disk_type_Valid() const;

    QString getImageType() const;
    void setImageType(const QString &image_type);
    bool is_image_type_Set() const;
    bool is_image_type_Valid() const;

    bool isInsecureKubeletReadonlyPortEnabled() const;
    void setInsecureKubeletReadonlyPortEnabled(const bool &insecure_kubelet_readonly_port_enabled);
    bool is_insecure_kubelet_readonly_port_enabled_Set() const;
    bool is_insecure_kubelet_readonly_port_enabled_Valid() const;

    OAINodeManagement getManagement() const;
    void setManagement(const OAINodeManagement &management);
    bool is_management_Set() const;
    bool is_management_Valid() const;

    Q_DECL_DEPRECATED QString getMinCpuPlatform() const;
    Q_DECL_DEPRECATED void setMinCpuPlatform(const QString &min_cpu_platform);
    Q_DECL_DEPRECATED bool is_min_cpu_platform_Set() const;
    Q_DECL_DEPRECATED bool is_min_cpu_platform_Valid() const;

    QList<QString> getOauthScopes() const;
    void setOauthScopes(const QList<QString> &oauth_scopes);
    bool is_oauth_scopes_Set() const;
    bool is_oauth_scopes_Valid() const;

    QString getServiceAccount() const;
    void setServiceAccount(const QString &service_account);
    bool is_service_account_Set() const;
    bool is_service_account_Valid() const;

    OAIShieldedInstanceConfig getShieldedInstanceConfig() const;
    void setShieldedInstanceConfig(const OAIShieldedInstanceConfig &shielded_instance_config);
    bool is_shielded_instance_config_Set() const;
    bool is_shielded_instance_config_Valid() const;

    OAIUpgradeSettings getUpgradeSettings() const;
    void setUpgradeSettings(const OAIUpgradeSettings &upgrade_settings);
    bool is_upgrade_settings_Set() const;
    bool is_upgrade_settings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_boot_disk_kms_key;
    bool m_boot_disk_kms_key_isSet;
    bool m_boot_disk_kms_key_isValid;

    qint32 m_disk_size_gb;
    bool m_disk_size_gb_isSet;
    bool m_disk_size_gb_isValid;

    QString m_disk_type;
    bool m_disk_type_isSet;
    bool m_disk_type_isValid;

    QString m_image_type;
    bool m_image_type_isSet;
    bool m_image_type_isValid;

    bool m_insecure_kubelet_readonly_port_enabled;
    bool m_insecure_kubelet_readonly_port_enabled_isSet;
    bool m_insecure_kubelet_readonly_port_enabled_isValid;

    OAINodeManagement m_management;
    bool m_management_isSet;
    bool m_management_isValid;

    QString m_min_cpu_platform;
    bool m_min_cpu_platform_isSet;
    bool m_min_cpu_platform_isValid;

    QList<QString> m_oauth_scopes;
    bool m_oauth_scopes_isSet;
    bool m_oauth_scopes_isValid;

    QString m_service_account;
    bool m_service_account_isSet;
    bool m_service_account_isValid;

    OAIShieldedInstanceConfig m_shielded_instance_config;
    bool m_shielded_instance_config_isSet;
    bool m_shielded_instance_config_isValid;

    OAIUpgradeSettings m_upgrade_settings;
    bool m_upgrade_settings_isSet;
    bool m_upgrade_settings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAutoprovisioningNodePoolDefaults)

#endif // OAIAutoprovisioningNodePoolDefaults_H
