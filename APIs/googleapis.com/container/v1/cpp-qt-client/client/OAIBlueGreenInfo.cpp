/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlueGreenInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlueGreenInfo::OAIBlueGreenInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlueGreenInfo::OAIBlueGreenInfo() {
    this->initializeModel();
}

OAIBlueGreenInfo::~OAIBlueGreenInfo() {}

void OAIBlueGreenInfo::initializeModel() {

    m_blue_instance_group_urls_isSet = false;
    m_blue_instance_group_urls_isValid = false;

    m_blue_pool_deletion_start_time_isSet = false;
    m_blue_pool_deletion_start_time_isValid = false;

    m_green_instance_group_urls_isSet = false;
    m_green_instance_group_urls_isValid = false;

    m_green_pool_version_isSet = false;
    m_green_pool_version_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;
}

void OAIBlueGreenInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlueGreenInfo::fromJsonObject(QJsonObject json) {

    m_blue_instance_group_urls_isValid = ::OpenAPI::fromJsonValue(m_blue_instance_group_urls, json[QString("blueInstanceGroupUrls")]);
    m_blue_instance_group_urls_isSet = !json[QString("blueInstanceGroupUrls")].isNull() && m_blue_instance_group_urls_isValid;

    m_blue_pool_deletion_start_time_isValid = ::OpenAPI::fromJsonValue(m_blue_pool_deletion_start_time, json[QString("bluePoolDeletionStartTime")]);
    m_blue_pool_deletion_start_time_isSet = !json[QString("bluePoolDeletionStartTime")].isNull() && m_blue_pool_deletion_start_time_isValid;

    m_green_instance_group_urls_isValid = ::OpenAPI::fromJsonValue(m_green_instance_group_urls, json[QString("greenInstanceGroupUrls")]);
    m_green_instance_group_urls_isSet = !json[QString("greenInstanceGroupUrls")].isNull() && m_green_instance_group_urls_isValid;

    m_green_pool_version_isValid = ::OpenAPI::fromJsonValue(m_green_pool_version, json[QString("greenPoolVersion")]);
    m_green_pool_version_isSet = !json[QString("greenPoolVersion")].isNull() && m_green_pool_version_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;
}

QString OAIBlueGreenInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlueGreenInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_blue_instance_group_urls.size() > 0) {
        obj.insert(QString("blueInstanceGroupUrls"), ::OpenAPI::toJsonValue(m_blue_instance_group_urls));
    }
    if (m_blue_pool_deletion_start_time_isSet) {
        obj.insert(QString("bluePoolDeletionStartTime"), ::OpenAPI::toJsonValue(m_blue_pool_deletion_start_time));
    }
    if (m_green_instance_group_urls.size() > 0) {
        obj.insert(QString("greenInstanceGroupUrls"), ::OpenAPI::toJsonValue(m_green_instance_group_urls));
    }
    if (m_green_pool_version_isSet) {
        obj.insert(QString("greenPoolVersion"), ::OpenAPI::toJsonValue(m_green_pool_version));
    }
    if (m_phase_isSet) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    return obj;
}

QList<QString> OAIBlueGreenInfo::getBlueInstanceGroupUrls() const {
    return m_blue_instance_group_urls;
}
void OAIBlueGreenInfo::setBlueInstanceGroupUrls(const QList<QString> &blue_instance_group_urls) {
    m_blue_instance_group_urls = blue_instance_group_urls;
    m_blue_instance_group_urls_isSet = true;
}

bool OAIBlueGreenInfo::is_blue_instance_group_urls_Set() const{
    return m_blue_instance_group_urls_isSet;
}

bool OAIBlueGreenInfo::is_blue_instance_group_urls_Valid() const{
    return m_blue_instance_group_urls_isValid;
}

QString OAIBlueGreenInfo::getBluePoolDeletionStartTime() const {
    return m_blue_pool_deletion_start_time;
}
void OAIBlueGreenInfo::setBluePoolDeletionStartTime(const QString &blue_pool_deletion_start_time) {
    m_blue_pool_deletion_start_time = blue_pool_deletion_start_time;
    m_blue_pool_deletion_start_time_isSet = true;
}

bool OAIBlueGreenInfo::is_blue_pool_deletion_start_time_Set() const{
    return m_blue_pool_deletion_start_time_isSet;
}

bool OAIBlueGreenInfo::is_blue_pool_deletion_start_time_Valid() const{
    return m_blue_pool_deletion_start_time_isValid;
}

QList<QString> OAIBlueGreenInfo::getGreenInstanceGroupUrls() const {
    return m_green_instance_group_urls;
}
void OAIBlueGreenInfo::setGreenInstanceGroupUrls(const QList<QString> &green_instance_group_urls) {
    m_green_instance_group_urls = green_instance_group_urls;
    m_green_instance_group_urls_isSet = true;
}

bool OAIBlueGreenInfo::is_green_instance_group_urls_Set() const{
    return m_green_instance_group_urls_isSet;
}

bool OAIBlueGreenInfo::is_green_instance_group_urls_Valid() const{
    return m_green_instance_group_urls_isValid;
}

QString OAIBlueGreenInfo::getGreenPoolVersion() const {
    return m_green_pool_version;
}
void OAIBlueGreenInfo::setGreenPoolVersion(const QString &green_pool_version) {
    m_green_pool_version = green_pool_version;
    m_green_pool_version_isSet = true;
}

bool OAIBlueGreenInfo::is_green_pool_version_Set() const{
    return m_green_pool_version_isSet;
}

bool OAIBlueGreenInfo::is_green_pool_version_Valid() const{
    return m_green_pool_version_isValid;
}

QString OAIBlueGreenInfo::getPhase() const {
    return m_phase;
}
void OAIBlueGreenInfo::setPhase(const QString &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAIBlueGreenInfo::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAIBlueGreenInfo::is_phase_Valid() const{
    return m_phase_isValid;
}

bool OAIBlueGreenInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blue_instance_group_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_blue_pool_deletion_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_green_instance_group_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_green_pool_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlueGreenInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
