/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinuxNodeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinuxNodeConfig::OAILinuxNodeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinuxNodeConfig::OAILinuxNodeConfig() {
    this->initializeModel();
}

OAILinuxNodeConfig::~OAILinuxNodeConfig() {}

void OAILinuxNodeConfig::initializeModel() {

    m_cgroup_mode_isSet = false;
    m_cgroup_mode_isValid = false;

    m_sysctls_isSet = false;
    m_sysctls_isValid = false;
}

void OAILinuxNodeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinuxNodeConfig::fromJsonObject(QJsonObject json) {

    m_cgroup_mode_isValid = ::OpenAPI::fromJsonValue(m_cgroup_mode, json[QString("cgroupMode")]);
    m_cgroup_mode_isSet = !json[QString("cgroupMode")].isNull() && m_cgroup_mode_isValid;

    m_sysctls_isValid = ::OpenAPI::fromJsonValue(m_sysctls, json[QString("sysctls")]);
    m_sysctls_isSet = !json[QString("sysctls")].isNull() && m_sysctls_isValid;
}

QString OAILinuxNodeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinuxNodeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_cgroup_mode_isSet) {
        obj.insert(QString("cgroupMode"), ::OpenAPI::toJsonValue(m_cgroup_mode));
    }
    if (m_sysctls.size() > 0) {
        obj.insert(QString("sysctls"), ::OpenAPI::toJsonValue(m_sysctls));
    }
    return obj;
}

QString OAILinuxNodeConfig::getCgroupMode() const {
    return m_cgroup_mode;
}
void OAILinuxNodeConfig::setCgroupMode(const QString &cgroup_mode) {
    m_cgroup_mode = cgroup_mode;
    m_cgroup_mode_isSet = true;
}

bool OAILinuxNodeConfig::is_cgroup_mode_Set() const{
    return m_cgroup_mode_isSet;
}

bool OAILinuxNodeConfig::is_cgroup_mode_Valid() const{
    return m_cgroup_mode_isValid;
}

QMap<QString, QString> OAILinuxNodeConfig::getSysctls() const {
    return m_sysctls;
}
void OAILinuxNodeConfig::setSysctls(const QMap<QString, QString> &sysctls) {
    m_sysctls = sysctls;
    m_sysctls_isSet = true;
}

bool OAILinuxNodeConfig::is_sysctls_Set() const{
    return m_sysctls_isSet;
}

bool OAILinuxNodeConfig::is_sysctls_Valid() const{
    return m_sysctls_isValid;
}

bool OAILinuxNodeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cgroup_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sysctls.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinuxNodeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
