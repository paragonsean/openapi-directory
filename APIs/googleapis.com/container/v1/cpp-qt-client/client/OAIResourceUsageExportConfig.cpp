/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceUsageExportConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceUsageExportConfig::OAIResourceUsageExportConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceUsageExportConfig::OAIResourceUsageExportConfig() {
    this->initializeModel();
}

OAIResourceUsageExportConfig::~OAIResourceUsageExportConfig() {}

void OAIResourceUsageExportConfig::initializeModel() {

    m_bigquery_destination_isSet = false;
    m_bigquery_destination_isValid = false;

    m_consumption_metering_config_isSet = false;
    m_consumption_metering_config_isValid = false;

    m_enable_network_egress_metering_isSet = false;
    m_enable_network_egress_metering_isValid = false;
}

void OAIResourceUsageExportConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceUsageExportConfig::fromJsonObject(QJsonObject json) {

    m_bigquery_destination_isValid = ::OpenAPI::fromJsonValue(m_bigquery_destination, json[QString("bigqueryDestination")]);
    m_bigquery_destination_isSet = !json[QString("bigqueryDestination")].isNull() && m_bigquery_destination_isValid;

    m_consumption_metering_config_isValid = ::OpenAPI::fromJsonValue(m_consumption_metering_config, json[QString("consumptionMeteringConfig")]);
    m_consumption_metering_config_isSet = !json[QString("consumptionMeteringConfig")].isNull() && m_consumption_metering_config_isValid;

    m_enable_network_egress_metering_isValid = ::OpenAPI::fromJsonValue(m_enable_network_egress_metering, json[QString("enableNetworkEgressMetering")]);
    m_enable_network_egress_metering_isSet = !json[QString("enableNetworkEgressMetering")].isNull() && m_enable_network_egress_metering_isValid;
}

QString OAIResourceUsageExportConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceUsageExportConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_bigquery_destination.isSet()) {
        obj.insert(QString("bigqueryDestination"), ::OpenAPI::toJsonValue(m_bigquery_destination));
    }
    if (m_consumption_metering_config.isSet()) {
        obj.insert(QString("consumptionMeteringConfig"), ::OpenAPI::toJsonValue(m_consumption_metering_config));
    }
    if (m_enable_network_egress_metering_isSet) {
        obj.insert(QString("enableNetworkEgressMetering"), ::OpenAPI::toJsonValue(m_enable_network_egress_metering));
    }
    return obj;
}

OAIBigQueryDestination OAIResourceUsageExportConfig::getBigqueryDestination() const {
    return m_bigquery_destination;
}
void OAIResourceUsageExportConfig::setBigqueryDestination(const OAIBigQueryDestination &bigquery_destination) {
    m_bigquery_destination = bigquery_destination;
    m_bigquery_destination_isSet = true;
}

bool OAIResourceUsageExportConfig::is_bigquery_destination_Set() const{
    return m_bigquery_destination_isSet;
}

bool OAIResourceUsageExportConfig::is_bigquery_destination_Valid() const{
    return m_bigquery_destination_isValid;
}

OAIConsumptionMeteringConfig OAIResourceUsageExportConfig::getConsumptionMeteringConfig() const {
    return m_consumption_metering_config;
}
void OAIResourceUsageExportConfig::setConsumptionMeteringConfig(const OAIConsumptionMeteringConfig &consumption_metering_config) {
    m_consumption_metering_config = consumption_metering_config;
    m_consumption_metering_config_isSet = true;
}

bool OAIResourceUsageExportConfig::is_consumption_metering_config_Set() const{
    return m_consumption_metering_config_isSet;
}

bool OAIResourceUsageExportConfig::is_consumption_metering_config_Valid() const{
    return m_consumption_metering_config_isValid;
}

bool OAIResourceUsageExportConfig::isEnableNetworkEgressMetering() const {
    return m_enable_network_egress_metering;
}
void OAIResourceUsageExportConfig::setEnableNetworkEgressMetering(const bool &enable_network_egress_metering) {
    m_enable_network_egress_metering = enable_network_egress_metering;
    m_enable_network_egress_metering_isSet = true;
}

bool OAIResourceUsageExportConfig::is_enable_network_egress_metering_Set() const{
    return m_enable_network_egress_metering_isSet;
}

bool OAIResourceUsageExportConfig::is_enable_network_egress_metering_Valid() const{
    return m_enable_network_egress_metering_isValid;
}

bool OAIResourceUsageExportConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bigquery_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumption_metering_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_network_egress_metering_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceUsageExportConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
