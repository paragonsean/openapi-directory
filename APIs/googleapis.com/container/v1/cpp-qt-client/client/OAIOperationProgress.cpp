/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationProgress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationProgress::OAIOperationProgress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationProgress::OAIOperationProgress() {
    this->initializeModel();
}

OAIOperationProgress::~OAIOperationProgress() {}

void OAIOperationProgress::initializeModel() {

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_stages_isSet = false;
    m_stages_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIOperationProgress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperationProgress::fromJsonObject(QJsonObject json) {

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_stages_isValid = ::OpenAPI::fromJsonValue(m_stages, json[QString("stages")]);
    m_stages_isSet = !json[QString("stages")].isNull() && m_stages_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIOperationProgress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperationProgress::asJsonObject() const {
    QJsonObject obj;
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_stages.size() > 0) {
        obj.insert(QString("stages"), ::OpenAPI::toJsonValue(m_stages));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList<OAIMetric> OAIOperationProgress::getMetrics() const {
    return m_metrics;
}
void OAIOperationProgress::setMetrics(const QList<OAIMetric> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIOperationProgress::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIOperationProgress::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QString OAIOperationProgress::getName() const {
    return m_name;
}
void OAIOperationProgress::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOperationProgress::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOperationProgress::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIOperationProgress> OAIOperationProgress::getStages() const {
    return m_stages;
}
void OAIOperationProgress::setStages(const QList<OAIOperationProgress> &stages) {
    m_stages = stages;
    m_stages_isSet = true;
}

bool OAIOperationProgress::is_stages_Set() const{
    return m_stages_isSet;
}

bool OAIOperationProgress::is_stages_Valid() const{
    return m_stages_isValid;
}

QString OAIOperationProgress::getStatus() const {
    return m_status;
}
void OAIOperationProgress::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOperationProgress::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOperationProgress::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIOperationProgress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperationProgress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
