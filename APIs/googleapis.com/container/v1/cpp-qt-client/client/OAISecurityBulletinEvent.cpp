/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecurityBulletinEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecurityBulletinEvent::OAISecurityBulletinEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecurityBulletinEvent::OAISecurityBulletinEvent() {
    this->initializeModel();
}

OAISecurityBulletinEvent::~OAISecurityBulletinEvent() {}

void OAISecurityBulletinEvent::initializeModel() {

    m_affected_supported_minors_isSet = false;
    m_affected_supported_minors_isValid = false;

    m_brief_description_isSet = false;
    m_brief_description_isValid = false;

    m_bulletin_id_isSet = false;
    m_bulletin_id_isValid = false;

    m_bulletin_uri_isSet = false;
    m_bulletin_uri_isValid = false;

    m_cve_ids_isSet = false;
    m_cve_ids_isValid = false;

    m_manual_steps_required_isSet = false;
    m_manual_steps_required_isValid = false;

    m_patched_versions_isSet = false;
    m_patched_versions_isValid = false;

    m_resource_type_affected_isSet = false;
    m_resource_type_affected_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_suggested_upgrade_target_isSet = false;
    m_suggested_upgrade_target_isValid = false;
}

void OAISecurityBulletinEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecurityBulletinEvent::fromJsonObject(QJsonObject json) {

    m_affected_supported_minors_isValid = ::OpenAPI::fromJsonValue(m_affected_supported_minors, json[QString("affectedSupportedMinors")]);
    m_affected_supported_minors_isSet = !json[QString("affectedSupportedMinors")].isNull() && m_affected_supported_minors_isValid;

    m_brief_description_isValid = ::OpenAPI::fromJsonValue(m_brief_description, json[QString("briefDescription")]);
    m_brief_description_isSet = !json[QString("briefDescription")].isNull() && m_brief_description_isValid;

    m_bulletin_id_isValid = ::OpenAPI::fromJsonValue(m_bulletin_id, json[QString("bulletinId")]);
    m_bulletin_id_isSet = !json[QString("bulletinId")].isNull() && m_bulletin_id_isValid;

    m_bulletin_uri_isValid = ::OpenAPI::fromJsonValue(m_bulletin_uri, json[QString("bulletinUri")]);
    m_bulletin_uri_isSet = !json[QString("bulletinUri")].isNull() && m_bulletin_uri_isValid;

    m_cve_ids_isValid = ::OpenAPI::fromJsonValue(m_cve_ids, json[QString("cveIds")]);
    m_cve_ids_isSet = !json[QString("cveIds")].isNull() && m_cve_ids_isValid;

    m_manual_steps_required_isValid = ::OpenAPI::fromJsonValue(m_manual_steps_required, json[QString("manualStepsRequired")]);
    m_manual_steps_required_isSet = !json[QString("manualStepsRequired")].isNull() && m_manual_steps_required_isValid;

    m_patched_versions_isValid = ::OpenAPI::fromJsonValue(m_patched_versions, json[QString("patchedVersions")]);
    m_patched_versions_isSet = !json[QString("patchedVersions")].isNull() && m_patched_versions_isValid;

    m_resource_type_affected_isValid = ::OpenAPI::fromJsonValue(m_resource_type_affected, json[QString("resourceTypeAffected")]);
    m_resource_type_affected_isSet = !json[QString("resourceTypeAffected")].isNull() && m_resource_type_affected_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_suggested_upgrade_target_isValid = ::OpenAPI::fromJsonValue(m_suggested_upgrade_target, json[QString("suggestedUpgradeTarget")]);
    m_suggested_upgrade_target_isSet = !json[QString("suggestedUpgradeTarget")].isNull() && m_suggested_upgrade_target_isValid;
}

QString OAISecurityBulletinEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecurityBulletinEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_affected_supported_minors.size() > 0) {
        obj.insert(QString("affectedSupportedMinors"), ::OpenAPI::toJsonValue(m_affected_supported_minors));
    }
    if (m_brief_description_isSet) {
        obj.insert(QString("briefDescription"), ::OpenAPI::toJsonValue(m_brief_description));
    }
    if (m_bulletin_id_isSet) {
        obj.insert(QString("bulletinId"), ::OpenAPI::toJsonValue(m_bulletin_id));
    }
    if (m_bulletin_uri_isSet) {
        obj.insert(QString("bulletinUri"), ::OpenAPI::toJsonValue(m_bulletin_uri));
    }
    if (m_cve_ids.size() > 0) {
        obj.insert(QString("cveIds"), ::OpenAPI::toJsonValue(m_cve_ids));
    }
    if (m_manual_steps_required_isSet) {
        obj.insert(QString("manualStepsRequired"), ::OpenAPI::toJsonValue(m_manual_steps_required));
    }
    if (m_patched_versions.size() > 0) {
        obj.insert(QString("patchedVersions"), ::OpenAPI::toJsonValue(m_patched_versions));
    }
    if (m_resource_type_affected_isSet) {
        obj.insert(QString("resourceTypeAffected"), ::OpenAPI::toJsonValue(m_resource_type_affected));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_suggested_upgrade_target_isSet) {
        obj.insert(QString("suggestedUpgradeTarget"), ::OpenAPI::toJsonValue(m_suggested_upgrade_target));
    }
    return obj;
}

QList<QString> OAISecurityBulletinEvent::getAffectedSupportedMinors() const {
    return m_affected_supported_minors;
}
void OAISecurityBulletinEvent::setAffectedSupportedMinors(const QList<QString> &affected_supported_minors) {
    m_affected_supported_minors = affected_supported_minors;
    m_affected_supported_minors_isSet = true;
}

bool OAISecurityBulletinEvent::is_affected_supported_minors_Set() const{
    return m_affected_supported_minors_isSet;
}

bool OAISecurityBulletinEvent::is_affected_supported_minors_Valid() const{
    return m_affected_supported_minors_isValid;
}

QString OAISecurityBulletinEvent::getBriefDescription() const {
    return m_brief_description;
}
void OAISecurityBulletinEvent::setBriefDescription(const QString &brief_description) {
    m_brief_description = brief_description;
    m_brief_description_isSet = true;
}

bool OAISecurityBulletinEvent::is_brief_description_Set() const{
    return m_brief_description_isSet;
}

bool OAISecurityBulletinEvent::is_brief_description_Valid() const{
    return m_brief_description_isValid;
}

QString OAISecurityBulletinEvent::getBulletinId() const {
    return m_bulletin_id;
}
void OAISecurityBulletinEvent::setBulletinId(const QString &bulletin_id) {
    m_bulletin_id = bulletin_id;
    m_bulletin_id_isSet = true;
}

bool OAISecurityBulletinEvent::is_bulletin_id_Set() const{
    return m_bulletin_id_isSet;
}

bool OAISecurityBulletinEvent::is_bulletin_id_Valid() const{
    return m_bulletin_id_isValid;
}

QString OAISecurityBulletinEvent::getBulletinUri() const {
    return m_bulletin_uri;
}
void OAISecurityBulletinEvent::setBulletinUri(const QString &bulletin_uri) {
    m_bulletin_uri = bulletin_uri;
    m_bulletin_uri_isSet = true;
}

bool OAISecurityBulletinEvent::is_bulletin_uri_Set() const{
    return m_bulletin_uri_isSet;
}

bool OAISecurityBulletinEvent::is_bulletin_uri_Valid() const{
    return m_bulletin_uri_isValid;
}

QList<QString> OAISecurityBulletinEvent::getCveIds() const {
    return m_cve_ids;
}
void OAISecurityBulletinEvent::setCveIds(const QList<QString> &cve_ids) {
    m_cve_ids = cve_ids;
    m_cve_ids_isSet = true;
}

bool OAISecurityBulletinEvent::is_cve_ids_Set() const{
    return m_cve_ids_isSet;
}

bool OAISecurityBulletinEvent::is_cve_ids_Valid() const{
    return m_cve_ids_isValid;
}

bool OAISecurityBulletinEvent::isManualStepsRequired() const {
    return m_manual_steps_required;
}
void OAISecurityBulletinEvent::setManualStepsRequired(const bool &manual_steps_required) {
    m_manual_steps_required = manual_steps_required;
    m_manual_steps_required_isSet = true;
}

bool OAISecurityBulletinEvent::is_manual_steps_required_Set() const{
    return m_manual_steps_required_isSet;
}

bool OAISecurityBulletinEvent::is_manual_steps_required_Valid() const{
    return m_manual_steps_required_isValid;
}

QList<QString> OAISecurityBulletinEvent::getPatchedVersions() const {
    return m_patched_versions;
}
void OAISecurityBulletinEvent::setPatchedVersions(const QList<QString> &patched_versions) {
    m_patched_versions = patched_versions;
    m_patched_versions_isSet = true;
}

bool OAISecurityBulletinEvent::is_patched_versions_Set() const{
    return m_patched_versions_isSet;
}

bool OAISecurityBulletinEvent::is_patched_versions_Valid() const{
    return m_patched_versions_isValid;
}

QString OAISecurityBulletinEvent::getResourceTypeAffected() const {
    return m_resource_type_affected;
}
void OAISecurityBulletinEvent::setResourceTypeAffected(const QString &resource_type_affected) {
    m_resource_type_affected = resource_type_affected;
    m_resource_type_affected_isSet = true;
}

bool OAISecurityBulletinEvent::is_resource_type_affected_Set() const{
    return m_resource_type_affected_isSet;
}

bool OAISecurityBulletinEvent::is_resource_type_affected_Valid() const{
    return m_resource_type_affected_isValid;
}

QString OAISecurityBulletinEvent::getSeverity() const {
    return m_severity;
}
void OAISecurityBulletinEvent::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAISecurityBulletinEvent::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAISecurityBulletinEvent::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAISecurityBulletinEvent::getSuggestedUpgradeTarget() const {
    return m_suggested_upgrade_target;
}
void OAISecurityBulletinEvent::setSuggestedUpgradeTarget(const QString &suggested_upgrade_target) {
    m_suggested_upgrade_target = suggested_upgrade_target;
    m_suggested_upgrade_target_isSet = true;
}

bool OAISecurityBulletinEvent::is_suggested_upgrade_target_Set() const{
    return m_suggested_upgrade_target_isSet;
}

bool OAISecurityBulletinEvent::is_suggested_upgrade_target_Valid() const{
    return m_suggested_upgrade_target_isValid;
}

bool OAISecurityBulletinEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affected_supported_minors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_brief_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bulletin_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bulletin_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cve_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_steps_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patched_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_affected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_upgrade_target_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecurityBulletinEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
