/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateClusterRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateClusterRequest::OAICreateClusterRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateClusterRequest::OAICreateClusterRequest() {
    this->initializeModel();
}

OAICreateClusterRequest::~OAICreateClusterRequest() {}

void OAICreateClusterRequest::initializeModel() {

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAICreateClusterRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateClusterRequest::fromJsonObject(QJsonObject json) {

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAICreateClusterRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateClusterRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster.isSet()) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

OAICluster OAICreateClusterRequest::getCluster() const {
    return m_cluster;
}
void OAICreateClusterRequest::setCluster(const OAICluster &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAICreateClusterRequest::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAICreateClusterRequest::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QString OAICreateClusterRequest::getParent() const {
    return m_parent;
}
void OAICreateClusterRequest::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAICreateClusterRequest::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAICreateClusterRequest::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAICreateClusterRequest::getProjectId() const {
    return m_project_id;
}
void OAICreateClusterRequest::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAICreateClusterRequest::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAICreateClusterRequest::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAICreateClusterRequest::getZone() const {
    return m_zone;
}
void OAICreateClusterRequest::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAICreateClusterRequest::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAICreateClusterRequest::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAICreateClusterRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateClusterRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
