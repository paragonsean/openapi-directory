/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PrivateClusterMasterGlobalAccessConfig from './PrivateClusterMasterGlobalAccessConfig';

/**
 * The PrivateClusterConfig model module.
 * @module model/PrivateClusterConfig
 * @version v1
 */
class PrivateClusterConfig {
    /**
     * Constructs a new <code>PrivateClusterConfig</code>.
     * Configuration options for private clusters.
     * @alias module:model/PrivateClusterConfig
     */
    constructor() { 
        
        PrivateClusterConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PrivateClusterConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrivateClusterConfig} obj Optional instance to populate.
     * @return {module:model/PrivateClusterConfig} The populated <code>PrivateClusterConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PrivateClusterConfig();

            if (data.hasOwnProperty('enablePrivateEndpoint')) {
                obj['enablePrivateEndpoint'] = ApiClient.convertToType(data['enablePrivateEndpoint'], 'Boolean');
            }
            if (data.hasOwnProperty('enablePrivateNodes')) {
                obj['enablePrivateNodes'] = ApiClient.convertToType(data['enablePrivateNodes'], 'Boolean');
            }
            if (data.hasOwnProperty('masterGlobalAccessConfig')) {
                obj['masterGlobalAccessConfig'] = PrivateClusterMasterGlobalAccessConfig.constructFromObject(data['masterGlobalAccessConfig']);
            }
            if (data.hasOwnProperty('masterIpv4CidrBlock')) {
                obj['masterIpv4CidrBlock'] = ApiClient.convertToType(data['masterIpv4CidrBlock'], 'String');
            }
            if (data.hasOwnProperty('peeringName')) {
                obj['peeringName'] = ApiClient.convertToType(data['peeringName'], 'String');
            }
            if (data.hasOwnProperty('privateEndpoint')) {
                obj['privateEndpoint'] = ApiClient.convertToType(data['privateEndpoint'], 'String');
            }
            if (data.hasOwnProperty('privateEndpointSubnetwork')) {
                obj['privateEndpointSubnetwork'] = ApiClient.convertToType(data['privateEndpointSubnetwork'], 'String');
            }
            if (data.hasOwnProperty('publicEndpoint')) {
                obj['publicEndpoint'] = ApiClient.convertToType(data['publicEndpoint'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PrivateClusterConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PrivateClusterConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `masterGlobalAccessConfig`
        if (data['masterGlobalAccessConfig']) { // data not null
          PrivateClusterMasterGlobalAccessConfig.validateJSON(data['masterGlobalAccessConfig']);
        }
        // ensure the json data is a string
        if (data['masterIpv4CidrBlock'] && !(typeof data['masterIpv4CidrBlock'] === 'string' || data['masterIpv4CidrBlock'] instanceof String)) {
            throw new Error("Expected the field `masterIpv4CidrBlock` to be a primitive type in the JSON string but got " + data['masterIpv4CidrBlock']);
        }
        // ensure the json data is a string
        if (data['peeringName'] && !(typeof data['peeringName'] === 'string' || data['peeringName'] instanceof String)) {
            throw new Error("Expected the field `peeringName` to be a primitive type in the JSON string but got " + data['peeringName']);
        }
        // ensure the json data is a string
        if (data['privateEndpoint'] && !(typeof data['privateEndpoint'] === 'string' || data['privateEndpoint'] instanceof String)) {
            throw new Error("Expected the field `privateEndpoint` to be a primitive type in the JSON string but got " + data['privateEndpoint']);
        }
        // ensure the json data is a string
        if (data['privateEndpointSubnetwork'] && !(typeof data['privateEndpointSubnetwork'] === 'string' || data['privateEndpointSubnetwork'] instanceof String)) {
            throw new Error("Expected the field `privateEndpointSubnetwork` to be a primitive type in the JSON string but got " + data['privateEndpointSubnetwork']);
        }
        // ensure the json data is a string
        if (data['publicEndpoint'] && !(typeof data['publicEndpoint'] === 'string' || data['publicEndpoint'] instanceof String)) {
            throw new Error("Expected the field `publicEndpoint` to be a primitive type in the JSON string but got " + data['publicEndpoint']);
        }

        return true;
    }


}



/**
 * Whether the master's internal IP address is used as the cluster endpoint.
 * @member {Boolean} enablePrivateEndpoint
 */
PrivateClusterConfig.prototype['enablePrivateEndpoint'] = undefined;

/**
 * Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.
 * @member {Boolean} enablePrivateNodes
 */
PrivateClusterConfig.prototype['enablePrivateNodes'] = undefined;

/**
 * @member {module:model/PrivateClusterMasterGlobalAccessConfig} masterGlobalAccessConfig
 */
PrivateClusterConfig.prototype['masterGlobalAccessConfig'] = undefined;

/**
 * The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.
 * @member {String} masterIpv4CidrBlock
 */
PrivateClusterConfig.prototype['masterIpv4CidrBlock'] = undefined;

/**
 * Output only. The peering name in the customer VPC used by this cluster.
 * @member {String} peeringName
 */
PrivateClusterConfig.prototype['peeringName'] = undefined;

/**
 * Output only. The internal IP address of this cluster's master endpoint.
 * @member {String} privateEndpoint
 */
PrivateClusterConfig.prototype['privateEndpoint'] = undefined;

/**
 * Subnet to provision the master's private endpoint during cluster creation. Specified in projects/_*_/regions/_*_/subnetworks/_* format.
 * @member {String} privateEndpointSubnetwork
 */
PrivateClusterConfig.prototype['privateEndpointSubnetwork'] = undefined;

/**
 * Output only. The external IP address of this cluster's master endpoint.
 * @member {String} publicEndpoint
 */
PrivateClusterConfig.prototype['publicEndpoint'] = undefined;






export default PrivateClusterConfig;

