/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpgradeEvent model module.
 * @module model/UpgradeEvent
 * @version v1
 */
class UpgradeEvent {
    /**
     * Constructs a new <code>UpgradeEvent</code>.
     * UpgradeEvent is a notification sent to customers by the cluster server when a resource is upgrading.
     * @alias module:model/UpgradeEvent
     */
    constructor() { 
        
        UpgradeEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpgradeEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpgradeEvent} obj Optional instance to populate.
     * @return {module:model/UpgradeEvent} The populated <code>UpgradeEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpgradeEvent();

            if (data.hasOwnProperty('currentVersion')) {
                obj['currentVersion'] = ApiClient.convertToType(data['currentVersion'], 'String');
            }
            if (data.hasOwnProperty('operation')) {
                obj['operation'] = ApiClient.convertToType(data['operation'], 'String');
            }
            if (data.hasOwnProperty('operationStartTime')) {
                obj['operationStartTime'] = ApiClient.convertToType(data['operationStartTime'], 'String');
            }
            if (data.hasOwnProperty('resource')) {
                obj['resource'] = ApiClient.convertToType(data['resource'], 'String');
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = ApiClient.convertToType(data['resourceType'], 'String');
            }
            if (data.hasOwnProperty('targetVersion')) {
                obj['targetVersion'] = ApiClient.convertToType(data['targetVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpgradeEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpgradeEvent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currentVersion'] && !(typeof data['currentVersion'] === 'string' || data['currentVersion'] instanceof String)) {
            throw new Error("Expected the field `currentVersion` to be a primitive type in the JSON string but got " + data['currentVersion']);
        }
        // ensure the json data is a string
        if (data['operation'] && !(typeof data['operation'] === 'string' || data['operation'] instanceof String)) {
            throw new Error("Expected the field `operation` to be a primitive type in the JSON string but got " + data['operation']);
        }
        // ensure the json data is a string
        if (data['operationStartTime'] && !(typeof data['operationStartTime'] === 'string' || data['operationStartTime'] instanceof String)) {
            throw new Error("Expected the field `operationStartTime` to be a primitive type in the JSON string but got " + data['operationStartTime']);
        }
        // ensure the json data is a string
        if (data['resource'] && !(typeof data['resource'] === 'string' || data['resource'] instanceof String)) {
            throw new Error("Expected the field `resource` to be a primitive type in the JSON string but got " + data['resource']);
        }
        // ensure the json data is a string
        if (data['resourceType'] && !(typeof data['resourceType'] === 'string' || data['resourceType'] instanceof String)) {
            throw new Error("Expected the field `resourceType` to be a primitive type in the JSON string but got " + data['resourceType']);
        }
        // ensure the json data is a string
        if (data['targetVersion'] && !(typeof data['targetVersion'] === 'string' || data['targetVersion'] instanceof String)) {
            throw new Error("Expected the field `targetVersion` to be a primitive type in the JSON string but got " + data['targetVersion']);
        }

        return true;
    }


}



/**
 * The current version before the upgrade.
 * @member {String} currentVersion
 */
UpgradeEvent.prototype['currentVersion'] = undefined;

/**
 * The operation associated with this upgrade.
 * @member {String} operation
 */
UpgradeEvent.prototype['operation'] = undefined;

/**
 * The time when the operation was started.
 * @member {String} operationStartTime
 */
UpgradeEvent.prototype['operationStartTime'] = undefined;

/**
 * Optional relative path to the resource. For example in node pool upgrades, the relative path of the node pool.
 * @member {String} resource
 */
UpgradeEvent.prototype['resource'] = undefined;

/**
 * The resource type that is upgrading.
 * @member {module:model/UpgradeEvent.ResourceTypeEnum} resourceType
 */
UpgradeEvent.prototype['resourceType'] = undefined;

/**
 * The target version for the upgrade.
 * @member {String} targetVersion
 */
UpgradeEvent.prototype['targetVersion'] = undefined;





/**
 * Allowed values for the <code>resourceType</code> property.
 * @enum {String}
 * @readonly
 */
UpgradeEvent['ResourceTypeEnum'] = {

    /**
     * value: "UPGRADE_RESOURCE_TYPE_UNSPECIFIED"
     * @const
     */
    "UPGRADE_RESOURCE_TYPE_UNSPECIFIED": "UPGRADE_RESOURCE_TYPE_UNSPECIFIED",

    /**
     * value: "MASTER"
     * @const
     */
    "MASTER": "MASTER",

    /**
     * value: "NODE_POOL"
     * @const
     */
    "NODE_POOL": "NODE_POOL"
};



export default UpgradeEvent;

