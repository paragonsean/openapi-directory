/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AutopilotCompatibilityIssue model module.
 * @module model/AutopilotCompatibilityIssue
 * @version v1
 */
class AutopilotCompatibilityIssue {
    /**
     * Constructs a new <code>AutopilotCompatibilityIssue</code>.
     * AutopilotCompatibilityIssue contains information about a specific compatibility issue with Autopilot mode.
     * @alias module:model/AutopilotCompatibilityIssue
     */
    constructor() { 
        
        AutopilotCompatibilityIssue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AutopilotCompatibilityIssue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AutopilotCompatibilityIssue} obj Optional instance to populate.
     * @return {module:model/AutopilotCompatibilityIssue} The populated <code>AutopilotCompatibilityIssue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AutopilotCompatibilityIssue();

            if (data.hasOwnProperty('constraintType')) {
                obj['constraintType'] = ApiClient.convertToType(data['constraintType'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('documentationUrl')) {
                obj['documentationUrl'] = ApiClient.convertToType(data['documentationUrl'], 'String');
            }
            if (data.hasOwnProperty('incompatibilityType')) {
                obj['incompatibilityType'] = ApiClient.convertToType(data['incompatibilityType'], 'String');
            }
            if (data.hasOwnProperty('lastObservation')) {
                obj['lastObservation'] = ApiClient.convertToType(data['lastObservation'], 'String');
            }
            if (data.hasOwnProperty('subjects')) {
                obj['subjects'] = ApiClient.convertToType(data['subjects'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AutopilotCompatibilityIssue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AutopilotCompatibilityIssue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['constraintType'] && !(typeof data['constraintType'] === 'string' || data['constraintType'] instanceof String)) {
            throw new Error("Expected the field `constraintType` to be a primitive type in the JSON string but got " + data['constraintType']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['documentationUrl'] && !(typeof data['documentationUrl'] === 'string' || data['documentationUrl'] instanceof String)) {
            throw new Error("Expected the field `documentationUrl` to be a primitive type in the JSON string but got " + data['documentationUrl']);
        }
        // ensure the json data is a string
        if (data['incompatibilityType'] && !(typeof data['incompatibilityType'] === 'string' || data['incompatibilityType'] instanceof String)) {
            throw new Error("Expected the field `incompatibilityType` to be a primitive type in the JSON string but got " + data['incompatibilityType']);
        }
        // ensure the json data is a string
        if (data['lastObservation'] && !(typeof data['lastObservation'] === 'string' || data['lastObservation'] instanceof String)) {
            throw new Error("Expected the field `lastObservation` to be a primitive type in the JSON string but got " + data['lastObservation']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['subjects'])) {
            throw new Error("Expected the field `subjects` to be an array in the JSON data but got " + data['subjects']);
        }

        return true;
    }


}



/**
 * The constraint type of the issue.
 * @member {String} constraintType
 */
AutopilotCompatibilityIssue.prototype['constraintType'] = undefined;

/**
 * The description of the issue.
 * @member {String} description
 */
AutopilotCompatibilityIssue.prototype['description'] = undefined;

/**
 * A URL to a public documnetation, which addresses resolving this issue.
 * @member {String} documentationUrl
 */
AutopilotCompatibilityIssue.prototype['documentationUrl'] = undefined;

/**
 * The incompatibility type of this issue.
 * @member {module:model/AutopilotCompatibilityIssue.IncompatibilityTypeEnum} incompatibilityType
 */
AutopilotCompatibilityIssue.prototype['incompatibilityType'] = undefined;

/**
 * The last time when this issue was observed.
 * @member {String} lastObservation
 */
AutopilotCompatibilityIssue.prototype['lastObservation'] = undefined;

/**
 * The name of the resources which are subject to this issue.
 * @member {Array.<String>} subjects
 */
AutopilotCompatibilityIssue.prototype['subjects'] = undefined;





/**
 * Allowed values for the <code>incompatibilityType</code> property.
 * @enum {String}
 * @readonly
 */
AutopilotCompatibilityIssue['IncompatibilityTypeEnum'] = {

    /**
     * value: "UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "UNSPECIFIED",

    /**
     * value: "INCOMPATIBILITY"
     * @const
     */
    "INCOMPATIBILITY": "INCOMPATIBILITY",

    /**
     * value: "ADDITIONAL_CONFIG_REQUIRED"
     * @const
     */
    "ADDITIONAL_CONFIG_REQUIRED": "ADDITIONAL_CONFIG_REQUIRED",

    /**
     * value: "PASSED_WITH_OPTIONAL_CONFIG"
     * @const
     */
    "PASSED_WITH_OPTIONAL_CONFIG": "PASSED_WITH_OPTIONAL_CONFIG"
};



export default AutopilotCompatibilityIssue;

