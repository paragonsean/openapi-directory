/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LinuxNodeConfig model module.
 * @module model/LinuxNodeConfig
 * @version v1
 */
class LinuxNodeConfig {
    /**
     * Constructs a new <code>LinuxNodeConfig</code>.
     * Parameters that can be configured on Linux nodes.
     * @alias module:model/LinuxNodeConfig
     */
    constructor() { 
        
        LinuxNodeConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LinuxNodeConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinuxNodeConfig} obj Optional instance to populate.
     * @return {module:model/LinuxNodeConfig} The populated <code>LinuxNodeConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinuxNodeConfig();

            if (data.hasOwnProperty('cgroupMode')) {
                obj['cgroupMode'] = ApiClient.convertToType(data['cgroupMode'], 'String');
            }
            if (data.hasOwnProperty('sysctls')) {
                obj['sysctls'] = ApiClient.convertToType(data['sysctls'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinuxNodeConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinuxNodeConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cgroupMode'] && !(typeof data['cgroupMode'] === 'string' || data['cgroupMode'] instanceof String)) {
            throw new Error("Expected the field `cgroupMode` to be a primitive type in the JSON string but got " + data['cgroupMode']);
        }

        return true;
    }


}



/**
 * cgroup_mode specifies the cgroup mode to be used on the node.
 * @member {module:model/LinuxNodeConfig.CgroupModeEnum} cgroupMode
 */
LinuxNodeConfig.prototype['cgroupMode'] = undefined;

/**
 * The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.busy_poll net.core.busy_read net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse
 * @member {Object.<String, String>} sysctls
 */
LinuxNodeConfig.prototype['sysctls'] = undefined;





/**
 * Allowed values for the <code>cgroupMode</code> property.
 * @enum {String}
 * @readonly
 */
LinuxNodeConfig['CgroupModeEnum'] = {

    /**
     * value: "CGROUP_MODE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "CGROUP_MODE_UNSPECIFIED",

    /**
     * value: "CGROUP_MODE_V1"
     * @const
     */
    "V1": "CGROUP_MODE_V1",

    /**
     * value: "CGROUP_MODE_V2"
     * @const
     */
    "V2": "CGROUP_MODE_V2"
};



export default LinuxNodeConfig;

