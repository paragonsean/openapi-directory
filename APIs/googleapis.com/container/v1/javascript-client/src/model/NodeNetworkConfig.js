/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalNodeNetworkConfig from './AdditionalNodeNetworkConfig';
import AdditionalPodNetworkConfig from './AdditionalPodNetworkConfig';
import NetworkPerformanceConfig from './NetworkPerformanceConfig';
import PodCIDROverprovisionConfig from './PodCIDROverprovisionConfig';

/**
 * The NodeNetworkConfig model module.
 * @module model/NodeNetworkConfig
 * @version v1
 */
class NodeNetworkConfig {
    /**
     * Constructs a new <code>NodeNetworkConfig</code>.
     * Parameters for node pool-level network config.
     * @alias module:model/NodeNetworkConfig
     */
    constructor() { 
        
        NodeNetworkConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodeNetworkConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeNetworkConfig} obj Optional instance to populate.
     * @return {module:model/NodeNetworkConfig} The populated <code>NodeNetworkConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeNetworkConfig();

            if (data.hasOwnProperty('additionalNodeNetworkConfigs')) {
                obj['additionalNodeNetworkConfigs'] = ApiClient.convertToType(data['additionalNodeNetworkConfigs'], [AdditionalNodeNetworkConfig]);
            }
            if (data.hasOwnProperty('additionalPodNetworkConfigs')) {
                obj['additionalPodNetworkConfigs'] = ApiClient.convertToType(data['additionalPodNetworkConfigs'], [AdditionalPodNetworkConfig]);
            }
            if (data.hasOwnProperty('createPodRange')) {
                obj['createPodRange'] = ApiClient.convertToType(data['createPodRange'], 'Boolean');
            }
            if (data.hasOwnProperty('enablePrivateNodes')) {
                obj['enablePrivateNodes'] = ApiClient.convertToType(data['enablePrivateNodes'], 'Boolean');
            }
            if (data.hasOwnProperty('networkPerformanceConfig')) {
                obj['networkPerformanceConfig'] = NetworkPerformanceConfig.constructFromObject(data['networkPerformanceConfig']);
            }
            if (data.hasOwnProperty('podCidrOverprovisionConfig')) {
                obj['podCidrOverprovisionConfig'] = PodCIDROverprovisionConfig.constructFromObject(data['podCidrOverprovisionConfig']);
            }
            if (data.hasOwnProperty('podIpv4CidrBlock')) {
                obj['podIpv4CidrBlock'] = ApiClient.convertToType(data['podIpv4CidrBlock'], 'String');
            }
            if (data.hasOwnProperty('podIpv4RangeUtilization')) {
                obj['podIpv4RangeUtilization'] = ApiClient.convertToType(data['podIpv4RangeUtilization'], 'Number');
            }
            if (data.hasOwnProperty('podRange')) {
                obj['podRange'] = ApiClient.convertToType(data['podRange'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeNetworkConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeNetworkConfig</code>.
     */
    static validateJSON(data) {
        if (data['additionalNodeNetworkConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalNodeNetworkConfigs'])) {
                throw new Error("Expected the field `additionalNodeNetworkConfigs` to be an array in the JSON data but got " + data['additionalNodeNetworkConfigs']);
            }
            // validate the optional field `additionalNodeNetworkConfigs` (array)
            for (const item of data['additionalNodeNetworkConfigs']) {
                AdditionalNodeNetworkConfig.validateJSON(item);
            };
        }
        if (data['additionalPodNetworkConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalPodNetworkConfigs'])) {
                throw new Error("Expected the field `additionalPodNetworkConfigs` to be an array in the JSON data but got " + data['additionalPodNetworkConfigs']);
            }
            // validate the optional field `additionalPodNetworkConfigs` (array)
            for (const item of data['additionalPodNetworkConfigs']) {
                AdditionalPodNetworkConfig.validateJSON(item);
            };
        }
        // validate the optional field `networkPerformanceConfig`
        if (data['networkPerformanceConfig']) { // data not null
          NetworkPerformanceConfig.validateJSON(data['networkPerformanceConfig']);
        }
        // validate the optional field `podCidrOverprovisionConfig`
        if (data['podCidrOverprovisionConfig']) { // data not null
          PodCIDROverprovisionConfig.validateJSON(data['podCidrOverprovisionConfig']);
        }
        // ensure the json data is a string
        if (data['podIpv4CidrBlock'] && !(typeof data['podIpv4CidrBlock'] === 'string' || data['podIpv4CidrBlock'] instanceof String)) {
            throw new Error("Expected the field `podIpv4CidrBlock` to be a primitive type in the JSON string but got " + data['podIpv4CidrBlock']);
        }
        // ensure the json data is a string
        if (data['podRange'] && !(typeof data['podRange'] === 'string' || data['podRange'] instanceof String)) {
            throw new Error("Expected the field `podRange` to be a primitive type in the JSON string but got " + data['podRange']);
        }

        return true;
    }


}



/**
 * We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface
 * @member {Array.<module:model/AdditionalNodeNetworkConfig>} additionalNodeNetworkConfigs
 */
NodeNetworkConfig.prototype['additionalNodeNetworkConfigs'] = undefined;

/**
 * We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node
 * @member {Array.<module:model/AdditionalPodNetworkConfig>} additionalPodNetworkConfigs
 */
NodeNetworkConfig.prototype['additionalPodNetworkConfigs'] = undefined;

/**
 * Input only. Whether to create a new range for pod IPs in this node pool. Defaults are provided for `pod_range` and `pod_ipv4_cidr_block` if they are not specified. If neither `create_pod_range` or `pod_range` are specified, the cluster-level default (`ip_allocation_policy.cluster_ipv4_cidr_block`) is used. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
 * @member {Boolean} createPodRange
 */
NodeNetworkConfig.prototype['createPodRange'] = undefined;

/**
 * Whether nodes have internal IP addresses only. If enable_private_nodes is not specified, then the value is derived from cluster.privateClusterConfig.enablePrivateNodes
 * @member {Boolean} enablePrivateNodes
 */
NodeNetworkConfig.prototype['enablePrivateNodes'] = undefined;

/**
 * @member {module:model/NetworkPerformanceConfig} networkPerformanceConfig
 */
NodeNetworkConfig.prototype['networkPerformanceConfig'] = undefined;

/**
 * @member {module:model/PodCIDROverprovisionConfig} podCidrOverprovisionConfig
 */
NodeNetworkConfig.prototype['podCidrOverprovisionConfig'] = undefined;

/**
 * The IP address range for pod IPs in this node pool. Only applicable if `create_pod_range` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) to pick a specific range to use. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
 * @member {String} podIpv4CidrBlock
 */
NodeNetworkConfig.prototype['podIpv4CidrBlock'] = undefined;

/**
 * Output only. [Output only] The utilization of the IPv4 range for the pod. The ratio is Usage/[Total number of IPs in the secondary range], Usage=numNodes*numZones*podIPsPerNode.
 * @member {Number} podIpv4RangeUtilization
 */
NodeNetworkConfig.prototype['podIpv4RangeUtilization'] = undefined;

/**
 * The ID of the secondary range for pod IPs. If `create_pod_range` is true, this ID is used for the new range. If `create_pod_range` is false, uses an existing secondary range with this ID. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.
 * @member {String} podRange
 */
NodeNetworkConfig.prototype['podRange'] = undefined;






export default NodeNetworkConfig;

