/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AcceleratorConfig from './AcceleratorConfig';
import AdvancedMachineFeatures from './AdvancedMachineFeatures';
import ConfidentialNodes from './ConfidentialNodes';
import EphemeralStorageLocalSsdConfig from './EphemeralStorageLocalSsdConfig';
import FastSocket from './FastSocket';
import GcfsConfig from './GcfsConfig';
import LinuxNodeConfig from './LinuxNodeConfig';
import LocalNvmeSsdBlockConfig from './LocalNvmeSsdBlockConfig';
import NodeKubeletConfig from './NodeKubeletConfig';
import NodePoolLoggingConfig from './NodePoolLoggingConfig';
import NodeTaint from './NodeTaint';
import ReservationAffinity from './ReservationAffinity';
import ResourceManagerTags from './ResourceManagerTags';
import SandboxConfig from './SandboxConfig';
import SecondaryBootDisk from './SecondaryBootDisk';
import ShieldedInstanceConfig from './ShieldedInstanceConfig';
import SoleTenantConfig from './SoleTenantConfig';
import VirtualNIC from './VirtualNIC';
import WindowsNodeConfig from './WindowsNodeConfig';
import WorkloadMetadataConfig from './WorkloadMetadataConfig';

/**
 * The NodeConfig model module.
 * @module model/NodeConfig
 * @version v1
 */
class NodeConfig {
    /**
     * Constructs a new <code>NodeConfig</code>.
     * Parameters that describe the nodes in a cluster. GKE Autopilot clusters do not recognize parameters in &#x60;NodeConfig&#x60;. Use AutoprovisioningNodePoolDefaults instead.
     * @alias module:model/NodeConfig
     */
    constructor() { 
        
        NodeConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodeConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeConfig} obj Optional instance to populate.
     * @return {module:model/NodeConfig} The populated <code>NodeConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeConfig();

            if (data.hasOwnProperty('accelerators')) {
                obj['accelerators'] = ApiClient.convertToType(data['accelerators'], [AcceleratorConfig]);
            }
            if (data.hasOwnProperty('advancedMachineFeatures')) {
                obj['advancedMachineFeatures'] = AdvancedMachineFeatures.constructFromObject(data['advancedMachineFeatures']);
            }
            if (data.hasOwnProperty('bootDiskKmsKey')) {
                obj['bootDiskKmsKey'] = ApiClient.convertToType(data['bootDiskKmsKey'], 'String');
            }
            if (data.hasOwnProperty('confidentialNodes')) {
                obj['confidentialNodes'] = ConfidentialNodes.constructFromObject(data['confidentialNodes']);
            }
            if (data.hasOwnProperty('diskSizeGb')) {
                obj['diskSizeGb'] = ApiClient.convertToType(data['diskSizeGb'], 'Number');
            }
            if (data.hasOwnProperty('diskType')) {
                obj['diskType'] = ApiClient.convertToType(data['diskType'], 'String');
            }
            if (data.hasOwnProperty('enableConfidentialStorage')) {
                obj['enableConfidentialStorage'] = ApiClient.convertToType(data['enableConfidentialStorage'], 'Boolean');
            }
            if (data.hasOwnProperty('ephemeralStorageLocalSsdConfig')) {
                obj['ephemeralStorageLocalSsdConfig'] = EphemeralStorageLocalSsdConfig.constructFromObject(data['ephemeralStorageLocalSsdConfig']);
            }
            if (data.hasOwnProperty('fastSocket')) {
                obj['fastSocket'] = FastSocket.constructFromObject(data['fastSocket']);
            }
            if (data.hasOwnProperty('gcfsConfig')) {
                obj['gcfsConfig'] = GcfsConfig.constructFromObject(data['gcfsConfig']);
            }
            if (data.hasOwnProperty('gvnic')) {
                obj['gvnic'] = VirtualNIC.constructFromObject(data['gvnic']);
            }
            if (data.hasOwnProperty('imageType')) {
                obj['imageType'] = ApiClient.convertToType(data['imageType'], 'String');
            }
            if (data.hasOwnProperty('kubeletConfig')) {
                obj['kubeletConfig'] = NodeKubeletConfig.constructFromObject(data['kubeletConfig']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('linuxNodeConfig')) {
                obj['linuxNodeConfig'] = LinuxNodeConfig.constructFromObject(data['linuxNodeConfig']);
            }
            if (data.hasOwnProperty('localNvmeSsdBlockConfig')) {
                obj['localNvmeSsdBlockConfig'] = LocalNvmeSsdBlockConfig.constructFromObject(data['localNvmeSsdBlockConfig']);
            }
            if (data.hasOwnProperty('localSsdCount')) {
                obj['localSsdCount'] = ApiClient.convertToType(data['localSsdCount'], 'Number');
            }
            if (data.hasOwnProperty('loggingConfig')) {
                obj['loggingConfig'] = NodePoolLoggingConfig.constructFromObject(data['loggingConfig']);
            }
            if (data.hasOwnProperty('machineType')) {
                obj['machineType'] = ApiClient.convertToType(data['machineType'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('minCpuPlatform')) {
                obj['minCpuPlatform'] = ApiClient.convertToType(data['minCpuPlatform'], 'String');
            }
            if (data.hasOwnProperty('nodeGroup')) {
                obj['nodeGroup'] = ApiClient.convertToType(data['nodeGroup'], 'String');
            }
            if (data.hasOwnProperty('oauthScopes')) {
                obj['oauthScopes'] = ApiClient.convertToType(data['oauthScopes'], ['String']);
            }
            if (data.hasOwnProperty('preemptible')) {
                obj['preemptible'] = ApiClient.convertToType(data['preemptible'], 'Boolean');
            }
            if (data.hasOwnProperty('reservationAffinity')) {
                obj['reservationAffinity'] = ReservationAffinity.constructFromObject(data['reservationAffinity']);
            }
            if (data.hasOwnProperty('resourceLabels')) {
                obj['resourceLabels'] = ApiClient.convertToType(data['resourceLabels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('resourceManagerTags')) {
                obj['resourceManagerTags'] = ResourceManagerTags.constructFromObject(data['resourceManagerTags']);
            }
            if (data.hasOwnProperty('sandboxConfig')) {
                obj['sandboxConfig'] = SandboxConfig.constructFromObject(data['sandboxConfig']);
            }
            if (data.hasOwnProperty('secondaryBootDisks')) {
                obj['secondaryBootDisks'] = ApiClient.convertToType(data['secondaryBootDisks'], [SecondaryBootDisk]);
            }
            if (data.hasOwnProperty('serviceAccount')) {
                obj['serviceAccount'] = ApiClient.convertToType(data['serviceAccount'], 'String');
            }
            if (data.hasOwnProperty('shieldedInstanceConfig')) {
                obj['shieldedInstanceConfig'] = ShieldedInstanceConfig.constructFromObject(data['shieldedInstanceConfig']);
            }
            if (data.hasOwnProperty('soleTenantConfig')) {
                obj['soleTenantConfig'] = SoleTenantConfig.constructFromObject(data['soleTenantConfig']);
            }
            if (data.hasOwnProperty('spot')) {
                obj['spot'] = ApiClient.convertToType(data['spot'], 'Boolean');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('taints')) {
                obj['taints'] = ApiClient.convertToType(data['taints'], [NodeTaint]);
            }
            if (data.hasOwnProperty('windowsNodeConfig')) {
                obj['windowsNodeConfig'] = WindowsNodeConfig.constructFromObject(data['windowsNodeConfig']);
            }
            if (data.hasOwnProperty('workloadMetadataConfig')) {
                obj['workloadMetadataConfig'] = WorkloadMetadataConfig.constructFromObject(data['workloadMetadataConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeConfig</code>.
     */
    static validateJSON(data) {
        if (data['accelerators']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['accelerators'])) {
                throw new Error("Expected the field `accelerators` to be an array in the JSON data but got " + data['accelerators']);
            }
            // validate the optional field `accelerators` (array)
            for (const item of data['accelerators']) {
                AcceleratorConfig.validateJSON(item);
            };
        }
        // validate the optional field `advancedMachineFeatures`
        if (data['advancedMachineFeatures']) { // data not null
          AdvancedMachineFeatures.validateJSON(data['advancedMachineFeatures']);
        }
        // ensure the json data is a string
        if (data['bootDiskKmsKey'] && !(typeof data['bootDiskKmsKey'] === 'string' || data['bootDiskKmsKey'] instanceof String)) {
            throw new Error("Expected the field `bootDiskKmsKey` to be a primitive type in the JSON string but got " + data['bootDiskKmsKey']);
        }
        // validate the optional field `confidentialNodes`
        if (data['confidentialNodes']) { // data not null
          ConfidentialNodes.validateJSON(data['confidentialNodes']);
        }
        // ensure the json data is a string
        if (data['diskType'] && !(typeof data['diskType'] === 'string' || data['diskType'] instanceof String)) {
            throw new Error("Expected the field `diskType` to be a primitive type in the JSON string but got " + data['diskType']);
        }
        // validate the optional field `ephemeralStorageLocalSsdConfig`
        if (data['ephemeralStorageLocalSsdConfig']) { // data not null
          EphemeralStorageLocalSsdConfig.validateJSON(data['ephemeralStorageLocalSsdConfig']);
        }
        // validate the optional field `fastSocket`
        if (data['fastSocket']) { // data not null
          FastSocket.validateJSON(data['fastSocket']);
        }
        // validate the optional field `gcfsConfig`
        if (data['gcfsConfig']) { // data not null
          GcfsConfig.validateJSON(data['gcfsConfig']);
        }
        // validate the optional field `gvnic`
        if (data['gvnic']) { // data not null
          VirtualNIC.validateJSON(data['gvnic']);
        }
        // ensure the json data is a string
        if (data['imageType'] && !(typeof data['imageType'] === 'string' || data['imageType'] instanceof String)) {
            throw new Error("Expected the field `imageType` to be a primitive type in the JSON string but got " + data['imageType']);
        }
        // validate the optional field `kubeletConfig`
        if (data['kubeletConfig']) { // data not null
          NodeKubeletConfig.validateJSON(data['kubeletConfig']);
        }
        // validate the optional field `linuxNodeConfig`
        if (data['linuxNodeConfig']) { // data not null
          LinuxNodeConfig.validateJSON(data['linuxNodeConfig']);
        }
        // validate the optional field `localNvmeSsdBlockConfig`
        if (data['localNvmeSsdBlockConfig']) { // data not null
          LocalNvmeSsdBlockConfig.validateJSON(data['localNvmeSsdBlockConfig']);
        }
        // validate the optional field `loggingConfig`
        if (data['loggingConfig']) { // data not null
          NodePoolLoggingConfig.validateJSON(data['loggingConfig']);
        }
        // ensure the json data is a string
        if (data['machineType'] && !(typeof data['machineType'] === 'string' || data['machineType'] instanceof String)) {
            throw new Error("Expected the field `machineType` to be a primitive type in the JSON string but got " + data['machineType']);
        }
        // ensure the json data is a string
        if (data['minCpuPlatform'] && !(typeof data['minCpuPlatform'] === 'string' || data['minCpuPlatform'] instanceof String)) {
            throw new Error("Expected the field `minCpuPlatform` to be a primitive type in the JSON string but got " + data['minCpuPlatform']);
        }
        // ensure the json data is a string
        if (data['nodeGroup'] && !(typeof data['nodeGroup'] === 'string' || data['nodeGroup'] instanceof String)) {
            throw new Error("Expected the field `nodeGroup` to be a primitive type in the JSON string but got " + data['nodeGroup']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['oauthScopes'])) {
            throw new Error("Expected the field `oauthScopes` to be an array in the JSON data but got " + data['oauthScopes']);
        }
        // validate the optional field `reservationAffinity`
        if (data['reservationAffinity']) { // data not null
          ReservationAffinity.validateJSON(data['reservationAffinity']);
        }
        // validate the optional field `resourceManagerTags`
        if (data['resourceManagerTags']) { // data not null
          ResourceManagerTags.validateJSON(data['resourceManagerTags']);
        }
        // validate the optional field `sandboxConfig`
        if (data['sandboxConfig']) { // data not null
          SandboxConfig.validateJSON(data['sandboxConfig']);
        }
        if (data['secondaryBootDisks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['secondaryBootDisks'])) {
                throw new Error("Expected the field `secondaryBootDisks` to be an array in the JSON data but got " + data['secondaryBootDisks']);
            }
            // validate the optional field `secondaryBootDisks` (array)
            for (const item of data['secondaryBootDisks']) {
                SecondaryBootDisk.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['serviceAccount'] && !(typeof data['serviceAccount'] === 'string' || data['serviceAccount'] instanceof String)) {
            throw new Error("Expected the field `serviceAccount` to be a primitive type in the JSON string but got " + data['serviceAccount']);
        }
        // validate the optional field `shieldedInstanceConfig`
        if (data['shieldedInstanceConfig']) { // data not null
          ShieldedInstanceConfig.validateJSON(data['shieldedInstanceConfig']);
        }
        // validate the optional field `soleTenantConfig`
        if (data['soleTenantConfig']) { // data not null
          SoleTenantConfig.validateJSON(data['soleTenantConfig']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        if (data['taints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taints'])) {
                throw new Error("Expected the field `taints` to be an array in the JSON data but got " + data['taints']);
            }
            // validate the optional field `taints` (array)
            for (const item of data['taints']) {
                NodeTaint.validateJSON(item);
            };
        }
        // validate the optional field `windowsNodeConfig`
        if (data['windowsNodeConfig']) { // data not null
          WindowsNodeConfig.validateJSON(data['windowsNodeConfig']);
        }
        // validate the optional field `workloadMetadataConfig`
        if (data['workloadMetadataConfig']) { // data not null
          WorkloadMetadataConfig.validateJSON(data['workloadMetadataConfig']);
        }

        return true;
    }


}



/**
 * A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.
 * @member {Array.<module:model/AcceleratorConfig>} accelerators
 */
NodeConfig.prototype['accelerators'] = undefined;

/**
 * @member {module:model/AdvancedMachineFeatures} advancedMachineFeatures
 */
NodeConfig.prototype['advancedMachineFeatures'] = undefined;

/**
 *  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
 * @member {String} bootDiskKmsKey
 */
NodeConfig.prototype['bootDiskKmsKey'] = undefined;

/**
 * @member {module:model/ConfidentialNodes} confidentialNodes
 */
NodeConfig.prototype['confidentialNodes'] = undefined;

/**
 * Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
 * @member {Number} diskSizeGb
 */
NodeConfig.prototype['diskSizeGb'] = undefined;

/**
 * Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
 * @member {String} diskType
 */
NodeConfig.prototype['diskType'] = undefined;

/**
 * Optional. Reserved for future use.
 * @member {Boolean} enableConfidentialStorage
 */
NodeConfig.prototype['enableConfidentialStorage'] = undefined;

/**
 * @member {module:model/EphemeralStorageLocalSsdConfig} ephemeralStorageLocalSsdConfig
 */
NodeConfig.prototype['ephemeralStorageLocalSsdConfig'] = undefined;

/**
 * @member {module:model/FastSocket} fastSocket
 */
NodeConfig.prototype['fastSocket'] = undefined;

/**
 * @member {module:model/GcfsConfig} gcfsConfig
 */
NodeConfig.prototype['gcfsConfig'] = undefined;

/**
 * @member {module:model/VirtualNIC} gvnic
 */
NodeConfig.prototype['gvnic'] = undefined;

/**
 * The image type to use for this node. Note that for a given image type, the latest version of it will be used. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.
 * @member {String} imageType
 */
NodeConfig.prototype['imageType'] = undefined;

/**
 * @member {module:model/NodeKubeletConfig} kubeletConfig
 */
NodeConfig.prototype['kubeletConfig'] = undefined;

/**
 * The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
 * @member {Object.<String, String>} labels
 */
NodeConfig.prototype['labels'] = undefined;

/**
 * @member {module:model/LinuxNodeConfig} linuxNodeConfig
 */
NodeConfig.prototype['linuxNodeConfig'] = undefined;

/**
 * @member {module:model/LocalNvmeSsdBlockConfig} localNvmeSsdBlockConfig
 */
NodeConfig.prototype['localNvmeSsdBlockConfig'] = undefined;

/**
 * The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.
 * @member {Number} localSsdCount
 */
NodeConfig.prototype['localSsdCount'] = undefined;

/**
 * @member {module:model/NodePoolLoggingConfig} loggingConfig
 */
NodeConfig.prototype['loggingConfig'] = undefined;

/**
 * The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`.
 * @member {String} machineType
 */
NodeConfig.prototype['machineType'] = undefined;

/**
 * The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - \"cluster-location\" - \"cluster-name\" - \"cluster-uid\" - \"configure-sh\" - \"containerd-configure-sh\" - \"enable-os-login\" - \"gci-ensure-gke-docker\" - \"gci-metrics-enabled\" - \"gci-update-strategy\" - \"instance-template\" - \"kube-env\" - \"startup-script\" - \"user-data\" - \"disable-address-manager\" - \"windows-startup-script-ps1\" - \"common-psm1\" - \"k8s-node-setup-psm1\" - \"install-ssh-psm1\" - \"user-profile-psm1\" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.
 * @member {Object.<String, String>} metadata
 */
NodeConfig.prototype['metadata'] = undefined;

/**
 * Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: \"Intel Haswell\"` or `minCpuPlatform: \"Intel Sandy Bridge\"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)
 * @member {String} minCpuPlatform
 */
NodeConfig.prototype['minCpuPlatform'] = undefined;

/**
 * Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).
 * @member {String} nodeGroup
 */
NodeConfig.prototype['nodeGroup'] = undefined;

/**
 * The set of Google API scopes to be made available on all of the node VMs under the \"default\" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.
 * @member {Array.<String>} oauthScopes
 */
NodeConfig.prototype['oauthScopes'] = undefined;

/**
 * Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.
 * @member {Boolean} preemptible
 */
NodeConfig.prototype['preemptible'] = undefined;

/**
 * @member {module:model/ReservationAffinity} reservationAffinity
 */
NodeConfig.prototype['reservationAffinity'] = undefined;

/**
 * The resource labels for the node pool to use to annotate any related Google Compute Engine resources.
 * @member {Object.<String, String>} resourceLabels
 */
NodeConfig.prototype['resourceLabels'] = undefined;

/**
 * @member {module:model/ResourceManagerTags} resourceManagerTags
 */
NodeConfig.prototype['resourceManagerTags'] = undefined;

/**
 * @member {module:model/SandboxConfig} sandboxConfig
 */
NodeConfig.prototype['sandboxConfig'] = undefined;

/**
 * List of secondary boot disks attached to the nodes.
 * @member {Array.<module:model/SecondaryBootDisk>} secondaryBootDisks
 */
NodeConfig.prototype['secondaryBootDisks'] = undefined;

/**
 * The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the \"default\" service account is used.
 * @member {String} serviceAccount
 */
NodeConfig.prototype['serviceAccount'] = undefined;

/**
 * @member {module:model/ShieldedInstanceConfig} shieldedInstanceConfig
 */
NodeConfig.prototype['shieldedInstanceConfig'] = undefined;

/**
 * @member {module:model/SoleTenantConfig} soleTenantConfig
 */
NodeConfig.prototype['soleTenantConfig'] = undefined;

/**
 * Spot flag for enabling Spot VM, which is a rebrand of the existing preemptible flag.
 * @member {Boolean} spot
 */
NodeConfig.prototype['spot'] = undefined;

/**
 * The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.
 * @member {Array.<String>} tags
 */
NodeConfig.prototype['tags'] = undefined;

/**
 * List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
 * @member {Array.<module:model/NodeTaint>} taints
 */
NodeConfig.prototype['taints'] = undefined;

/**
 * @member {module:model/WindowsNodeConfig} windowsNodeConfig
 */
NodeConfig.prototype['windowsNodeConfig'] = undefined;

/**
 * @member {module:model/WorkloadMetadataConfig} workloadMetadataConfig
 */
NodeConfig.prototype['workloadMetadataConfig'] = undefined;






export default NodeConfig;

