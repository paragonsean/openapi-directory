/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BestEffortProvisioning from './BestEffortProvisioning';
import MaxPodsConstraint from './MaxPodsConstraint';
import NodeConfig from './NodeConfig';
import NodeManagement from './NodeManagement';
import NodeNetworkConfig from './NodeNetworkConfig';
import NodePoolAutoscaling from './NodePoolAutoscaling';
import PlacementPolicy from './PlacementPolicy';
import QueuedProvisioning from './QueuedProvisioning';
import StatusCondition from './StatusCondition';
import UpdateInfo from './UpdateInfo';
import UpgradeSettings from './UpgradeSettings';

/**
 * The NodePool model module.
 * @module model/NodePool
 * @version v1
 */
class NodePool {
    /**
     * Constructs a new <code>NodePool</code>.
     * NodePool contains the name and configuration for a cluster&#39;s node pool. Node pools are a set of nodes (i.e. VM&#39;s), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.
     * @alias module:model/NodePool
     */
    constructor() { 
        
        NodePool.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodePool</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodePool} obj Optional instance to populate.
     * @return {module:model/NodePool} The populated <code>NodePool</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodePool();

            if (data.hasOwnProperty('autoscaling')) {
                obj['autoscaling'] = NodePoolAutoscaling.constructFromObject(data['autoscaling']);
            }
            if (data.hasOwnProperty('bestEffortProvisioning')) {
                obj['bestEffortProvisioning'] = BestEffortProvisioning.constructFromObject(data['bestEffortProvisioning']);
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [StatusCondition]);
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = NodeConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('initialNodeCount')) {
                obj['initialNodeCount'] = ApiClient.convertToType(data['initialNodeCount'], 'Number');
            }
            if (data.hasOwnProperty('instanceGroupUrls')) {
                obj['instanceGroupUrls'] = ApiClient.convertToType(data['instanceGroupUrls'], ['String']);
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], ['String']);
            }
            if (data.hasOwnProperty('management')) {
                obj['management'] = NodeManagement.constructFromObject(data['management']);
            }
            if (data.hasOwnProperty('maxPodsConstraint')) {
                obj['maxPodsConstraint'] = MaxPodsConstraint.constructFromObject(data['maxPodsConstraint']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('networkConfig')) {
                obj['networkConfig'] = NodeNetworkConfig.constructFromObject(data['networkConfig']);
            }
            if (data.hasOwnProperty('placementPolicy')) {
                obj['placementPolicy'] = PlacementPolicy.constructFromObject(data['placementPolicy']);
            }
            if (data.hasOwnProperty('podIpv4CidrSize')) {
                obj['podIpv4CidrSize'] = ApiClient.convertToType(data['podIpv4CidrSize'], 'Number');
            }
            if (data.hasOwnProperty('queuedProvisioning')) {
                obj['queuedProvisioning'] = QueuedProvisioning.constructFromObject(data['queuedProvisioning']);
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('statusMessage')) {
                obj['statusMessage'] = ApiClient.convertToType(data['statusMessage'], 'String');
            }
            if (data.hasOwnProperty('updateInfo')) {
                obj['updateInfo'] = UpdateInfo.constructFromObject(data['updateInfo']);
            }
            if (data.hasOwnProperty('upgradeSettings')) {
                obj['upgradeSettings'] = UpgradeSettings.constructFromObject(data['upgradeSettings']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodePool</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodePool</code>.
     */
    static validateJSON(data) {
        // validate the optional field `autoscaling`
        if (data['autoscaling']) { // data not null
          NodePoolAutoscaling.validateJSON(data['autoscaling']);
        }
        // validate the optional field `bestEffortProvisioning`
        if (data['bestEffortProvisioning']) { // data not null
          BestEffortProvisioning.validateJSON(data['bestEffortProvisioning']);
        }
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                StatusCondition.validateJSON(item);
            };
        }
        // validate the optional field `config`
        if (data['config']) { // data not null
          NodeConfig.validateJSON(data['config']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['instanceGroupUrls'])) {
            throw new Error("Expected the field `instanceGroupUrls` to be an array in the JSON data but got " + data['instanceGroupUrls']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['locations'])) {
            throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
        }
        // validate the optional field `management`
        if (data['management']) { // data not null
          NodeManagement.validateJSON(data['management']);
        }
        // validate the optional field `maxPodsConstraint`
        if (data['maxPodsConstraint']) { // data not null
          MaxPodsConstraint.validateJSON(data['maxPodsConstraint']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `networkConfig`
        if (data['networkConfig']) { // data not null
          NodeNetworkConfig.validateJSON(data['networkConfig']);
        }
        // validate the optional field `placementPolicy`
        if (data['placementPolicy']) { // data not null
          PlacementPolicy.validateJSON(data['placementPolicy']);
        }
        // validate the optional field `queuedProvisioning`
        if (data['queuedProvisioning']) { // data not null
          QueuedProvisioning.validateJSON(data['queuedProvisioning']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['statusMessage'] && !(typeof data['statusMessage'] === 'string' || data['statusMessage'] instanceof String)) {
            throw new Error("Expected the field `statusMessage` to be a primitive type in the JSON string but got " + data['statusMessage']);
        }
        // validate the optional field `updateInfo`
        if (data['updateInfo']) { // data not null
          UpdateInfo.validateJSON(data['updateInfo']);
        }
        // validate the optional field `upgradeSettings`
        if (data['upgradeSettings']) { // data not null
          UpgradeSettings.validateJSON(data['upgradeSettings']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * @member {module:model/NodePoolAutoscaling} autoscaling
 */
NodePool.prototype['autoscaling'] = undefined;

/**
 * @member {module:model/BestEffortProvisioning} bestEffortProvisioning
 */
NodePool.prototype['bestEffortProvisioning'] = undefined;

/**
 * Which conditions caused the current node pool state.
 * @member {Array.<module:model/StatusCondition>} conditions
 */
NodePool.prototype['conditions'] = undefined;

/**
 * @member {module:model/NodeConfig} config
 */
NodePool.prototype['config'] = undefined;

/**
 * This checksum is computed by the server based on the value of node pool fields, and may be sent on update requests to ensure the client has an up-to-date value before proceeding.
 * @member {String} etag
 */
NodePool.prototype['etag'] = undefined;

/**
 * The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.
 * @member {Number} initialNodeCount
 */
NodePool.prototype['initialNodeCount'] = undefined;

/**
 * [Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool. During the node pool blue-green upgrade operation, the URLs contain both blue and green resources.
 * @member {Array.<String>} instanceGroupUrls
 */
NodePool.prototype['instanceGroupUrls'] = undefined;

/**
 * The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.
 * @member {Array.<String>} locations
 */
NodePool.prototype['locations'] = undefined;

/**
 * @member {module:model/NodeManagement} management
 */
NodePool.prototype['management'] = undefined;

/**
 * @member {module:model/MaxPodsConstraint} maxPodsConstraint
 */
NodePool.prototype['maxPodsConstraint'] = undefined;

/**
 * The name of the node pool.
 * @member {String} name
 */
NodePool.prototype['name'] = undefined;

/**
 * @member {module:model/NodeNetworkConfig} networkConfig
 */
NodePool.prototype['networkConfig'] = undefined;

/**
 * @member {module:model/PlacementPolicy} placementPolicy
 */
NodePool.prototype['placementPolicy'] = undefined;

/**
 * [Output only] The pod CIDR block size per node in this node pool.
 * @member {Number} podIpv4CidrSize
 */
NodePool.prototype['podIpv4CidrSize'] = undefined;

/**
 * @member {module:model/QueuedProvisioning} queuedProvisioning
 */
NodePool.prototype['queuedProvisioning'] = undefined;

/**
 * [Output only] Server-defined URL for the resource.
 * @member {String} selfLink
 */
NodePool.prototype['selfLink'] = undefined;

/**
 * [Output only] The status of the nodes in this pool instance.
 * @member {module:model/NodePool.StatusEnum} status
 */
NodePool.prototype['status'] = undefined;

/**
 * [Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available.
 * @member {String} statusMessage
 */
NodePool.prototype['statusMessage'] = undefined;

/**
 * @member {module:model/UpdateInfo} updateInfo
 */
NodePool.prototype['updateInfo'] = undefined;

/**
 * @member {module:model/UpgradeSettings} upgradeSettings
 */
NodePool.prototype['upgradeSettings'] = undefined;

/**
 * The version of Kubernetes running on this NodePool's nodes. If unspecified, it defaults as described [here](https://cloud.google.com/kubernetes-engine/versioning#specifying_node_version).
 * @member {String} version
 */
NodePool.prototype['version'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
NodePool['StatusEnum'] = {

    /**
     * value: "STATUS_UNSPECIFIED"
     * @const
     */
    "STATUS_UNSPECIFIED": "STATUS_UNSPECIFIED",

    /**
     * value: "PROVISIONING"
     * @const
     */
    "PROVISIONING": "PROVISIONING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "RUNNING_WITH_ERROR"
     * @const
     */
    "RUNNING_WITH_ERROR": "RUNNING_WITH_ERROR",

    /**
     * value: "RECONCILING"
     * @const
     */
    "RECONCILING": "RECONCILING",

    /**
     * value: "STOPPING"
     * @const
     */
    "STOPPING": "STOPPING",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR"
};



export default NodePool;

