/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NodeAffinity from './NodeAffinity';

/**
 * The SoleTenantConfig model module.
 * @module model/SoleTenantConfig
 * @version v1
 */
class SoleTenantConfig {
    /**
     * Constructs a new <code>SoleTenantConfig</code>.
     * SoleTenantConfig contains the NodeAffinities to specify what shared sole tenant node groups should back the node pool.
     * @alias module:model/SoleTenantConfig
     */
    constructor() { 
        
        SoleTenantConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SoleTenantConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SoleTenantConfig} obj Optional instance to populate.
     * @return {module:model/SoleTenantConfig} The populated <code>SoleTenantConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SoleTenantConfig();

            if (data.hasOwnProperty('nodeAffinities')) {
                obj['nodeAffinities'] = ApiClient.convertToType(data['nodeAffinities'], [NodeAffinity]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SoleTenantConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SoleTenantConfig</code>.
     */
    static validateJSON(data) {
        if (data['nodeAffinities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nodeAffinities'])) {
                throw new Error("Expected the field `nodeAffinities` to be an array in the JSON data but got " + data['nodeAffinities']);
            }
            // validate the optional field `nodeAffinities` (array)
            for (const item of data['nodeAffinities']) {
                NodeAffinity.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * NodeAffinities used to match to a shared sole tenant node group.
 * @member {Array.<module:model/NodeAffinity>} nodeAffinities
 */
SoleTenantConfig.prototype['nodeAffinities'] = undefined;






export default SoleTenantConfig;

