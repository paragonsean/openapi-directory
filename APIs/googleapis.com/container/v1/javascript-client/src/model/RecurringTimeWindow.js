/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TimeWindow from './TimeWindow';

/**
 * The RecurringTimeWindow model module.
 * @module model/RecurringTimeWindow
 * @version v1
 */
class RecurringTimeWindow {
    /**
     * Constructs a new <code>RecurringTimeWindow</code>.
     * Represents an arbitrary window of time that recurs.
     * @alias module:model/RecurringTimeWindow
     */
    constructor() { 
        
        RecurringTimeWindow.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RecurringTimeWindow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecurringTimeWindow} obj Optional instance to populate.
     * @return {module:model/RecurringTimeWindow} The populated <code>RecurringTimeWindow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecurringTimeWindow();

            if (data.hasOwnProperty('recurrence')) {
                obj['recurrence'] = ApiClient.convertToType(data['recurrence'], 'String');
            }
            if (data.hasOwnProperty('window')) {
                obj['window'] = TimeWindow.constructFromObject(data['window']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecurringTimeWindow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecurringTimeWindow</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['recurrence'] && !(typeof data['recurrence'] === 'string' || data['recurrence'] instanceof String)) {
            throw new Error("Expected the field `recurrence` to be a primitive type in the JSON string but got " + data['recurrence']);
        }
        // validate the optional field `window`
        if (data['window']) { // data not null
          TimeWindow.validateJSON(data['window']);
        }

        return true;
    }


}



/**
 * An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ``` start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR ``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ``` start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA ``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.
 * @member {String} recurrence
 */
RecurringTimeWindow.prototype['recurrence'] = undefined;

/**
 * @member {module:model/TimeWindow} window
 */
RecurringTimeWindow.prototype['window'] = undefined;






export default RecurringTimeWindow;

