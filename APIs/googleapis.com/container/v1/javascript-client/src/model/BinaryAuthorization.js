/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BinaryAuthorization model module.
 * @module model/BinaryAuthorization
 * @version v1
 */
class BinaryAuthorization {
    /**
     * Constructs a new <code>BinaryAuthorization</code>.
     * Configuration for Binary Authorization.
     * @alias module:model/BinaryAuthorization
     */
    constructor() { 
        
        BinaryAuthorization.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BinaryAuthorization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BinaryAuthorization} obj Optional instance to populate.
     * @return {module:model/BinaryAuthorization} The populated <code>BinaryAuthorization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BinaryAuthorization();

            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('evaluationMode')) {
                obj['evaluationMode'] = ApiClient.convertToType(data['evaluationMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BinaryAuthorization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BinaryAuthorization</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['evaluationMode'] && !(typeof data['evaluationMode'] === 'string' || data['evaluationMode'] instanceof String)) {
            throw new Error("Expected the field `evaluationMode` to be a primitive type in the JSON string but got " + data['evaluationMode']);
        }

        return true;
    }


}



/**
 * This field is deprecated. Leave this unset and instead configure BinaryAuthorization using evaluation_mode. If evaluation_mode is set to anything other than EVALUATION_MODE_UNSPECIFIED, this field is ignored.
 * @member {Boolean} enabled
 */
BinaryAuthorization.prototype['enabled'] = undefined;

/**
 * Mode of operation for binauthz policy evaluation. If unspecified, defaults to DISABLED.
 * @member {module:model/BinaryAuthorization.EvaluationModeEnum} evaluationMode
 */
BinaryAuthorization.prototype['evaluationMode'] = undefined;





/**
 * Allowed values for the <code>evaluationMode</code> property.
 * @enum {String}
 * @readonly
 */
BinaryAuthorization['EvaluationModeEnum'] = {

    /**
     * value: "EVALUATION_MODE_UNSPECIFIED"
     * @const
     */
    "EVALUATION_MODE_UNSPECIFIED": "EVALUATION_MODE_UNSPECIFIED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "PROJECT_SINGLETON_POLICY_ENFORCE"
     * @const
     */
    "PROJECT_SINGLETON_POLICY_ENFORCE": "PROJECT_SINGLETON_POLICY_ENFORCE"
};



export default BinaryAuthorization;

