/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BlueGreenSettings from './BlueGreenSettings';

/**
 * The UpgradeSettings model module.
 * @module model/UpgradeSettings
 * @version v1
 */
class UpgradeSettings {
    /**
     * Constructs a new <code>UpgradeSettings</code>.
     * These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable&#x3D;0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge&#x3D;2, maxUnavailable&#x3D;1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available. These upgrade settings configure the upgrade strategy for the node pool. Use strategy to switch between the strategies applied to the node pool. If the strategy is ROLLING, use max_surge and max_unavailable to control the level of parallelism and the level of disruption caused by upgrade. 1. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. 2. maxUnavailable controls the number of nodes that can be simultaneously unavailable. 3. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). If the strategy is BLUE_GREEN, use blue_green_settings to configure the blue-green upgrade related settings. 1. standard_rollout_policy is the default policy. The policy is used to control the way blue pool gets drained. The draining is executed in the batch mode. The batch size could be specified as either percentage of the node pool size or the number of nodes. batch_soak_duration is the soak time after each batch gets drained. 2. node_pool_soak_duration is the soak time after all blue nodes are drained. After this period, the blue pool nodes will be deleted.
     * @alias module:model/UpgradeSettings
     */
    constructor() { 
        
        UpgradeSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpgradeSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpgradeSettings} obj Optional instance to populate.
     * @return {module:model/UpgradeSettings} The populated <code>UpgradeSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpgradeSettings();

            if (data.hasOwnProperty('blueGreenSettings')) {
                obj['blueGreenSettings'] = BlueGreenSettings.constructFromObject(data['blueGreenSettings']);
            }
            if (data.hasOwnProperty('maxSurge')) {
                obj['maxSurge'] = ApiClient.convertToType(data['maxSurge'], 'Number');
            }
            if (data.hasOwnProperty('maxUnavailable')) {
                obj['maxUnavailable'] = ApiClient.convertToType(data['maxUnavailable'], 'Number');
            }
            if (data.hasOwnProperty('strategy')) {
                obj['strategy'] = ApiClient.convertToType(data['strategy'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpgradeSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpgradeSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `blueGreenSettings`
        if (data['blueGreenSettings']) { // data not null
          BlueGreenSettings.validateJSON(data['blueGreenSettings']);
        }
        // ensure the json data is a string
        if (data['strategy'] && !(typeof data['strategy'] === 'string' || data['strategy'] instanceof String)) {
            throw new Error("Expected the field `strategy` to be a primitive type in the JSON string but got " + data['strategy']);
        }

        return true;
    }


}



/**
 * @member {module:model/BlueGreenSettings} blueGreenSettings
 */
UpgradeSettings.prototype['blueGreenSettings'] = undefined;

/**
 * The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
 * @member {Number} maxSurge
 */
UpgradeSettings.prototype['maxSurge'] = undefined;

/**
 * The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
 * @member {Number} maxUnavailable
 */
UpgradeSettings.prototype['maxUnavailable'] = undefined;

/**
 * Update strategy of the node pool.
 * @member {module:model/UpgradeSettings.StrategyEnum} strategy
 */
UpgradeSettings.prototype['strategy'] = undefined;





/**
 * Allowed values for the <code>strategy</code> property.
 * @enum {String}
 * @readonly
 */
UpgradeSettings['StrategyEnum'] = {

    /**
     * value: "NODE_POOL_UPDATE_STRATEGY_UNSPECIFIED"
     * @const
     */
    "NODE_POOL_UPDATE_STRATEGY_UNSPECIFIED": "NODE_POOL_UPDATE_STRATEGY_UNSPECIFIED",

    /**
     * value: "BLUE_GREEN"
     * @const
     */
    "BLUE_GREEN": "BLUE_GREEN",

    /**
     * value: "SURGE"
     * @const
     */
    "SURGE": "SURGE"
};



export default UpgradeSettings;

