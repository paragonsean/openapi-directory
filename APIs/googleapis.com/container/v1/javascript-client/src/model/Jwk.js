/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Jwk model module.
 * @module model/Jwk
 * @version v1
 */
class Jwk {
    /**
     * Constructs a new <code>Jwk</code>.
     * Jwk is a JSON Web Key as specified in RFC 7517
     * @alias module:model/Jwk
     */
    constructor() { 
        
        Jwk.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Jwk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Jwk} obj Optional instance to populate.
     * @return {module:model/Jwk} The populated <code>Jwk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Jwk();

            if (data.hasOwnProperty('alg')) {
                obj['alg'] = ApiClient.convertToType(data['alg'], 'String');
            }
            if (data.hasOwnProperty('crv')) {
                obj['crv'] = ApiClient.convertToType(data['crv'], 'String');
            }
            if (data.hasOwnProperty('e')) {
                obj['e'] = ApiClient.convertToType(data['e'], 'String');
            }
            if (data.hasOwnProperty('kid')) {
                obj['kid'] = ApiClient.convertToType(data['kid'], 'String');
            }
            if (data.hasOwnProperty('kty')) {
                obj['kty'] = ApiClient.convertToType(data['kty'], 'String');
            }
            if (data.hasOwnProperty('n')) {
                obj['n'] = ApiClient.convertToType(data['n'], 'String');
            }
            if (data.hasOwnProperty('use')) {
                obj['use'] = ApiClient.convertToType(data['use'], 'String');
            }
            if (data.hasOwnProperty('x')) {
                obj['x'] = ApiClient.convertToType(data['x'], 'String');
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = ApiClient.convertToType(data['y'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Jwk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Jwk</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alg'] && !(typeof data['alg'] === 'string' || data['alg'] instanceof String)) {
            throw new Error("Expected the field `alg` to be a primitive type in the JSON string but got " + data['alg']);
        }
        // ensure the json data is a string
        if (data['crv'] && !(typeof data['crv'] === 'string' || data['crv'] instanceof String)) {
            throw new Error("Expected the field `crv` to be a primitive type in the JSON string but got " + data['crv']);
        }
        // ensure the json data is a string
        if (data['e'] && !(typeof data['e'] === 'string' || data['e'] instanceof String)) {
            throw new Error("Expected the field `e` to be a primitive type in the JSON string but got " + data['e']);
        }
        // ensure the json data is a string
        if (data['kid'] && !(typeof data['kid'] === 'string' || data['kid'] instanceof String)) {
            throw new Error("Expected the field `kid` to be a primitive type in the JSON string but got " + data['kid']);
        }
        // ensure the json data is a string
        if (data['kty'] && !(typeof data['kty'] === 'string' || data['kty'] instanceof String)) {
            throw new Error("Expected the field `kty` to be a primitive type in the JSON string but got " + data['kty']);
        }
        // ensure the json data is a string
        if (data['n'] && !(typeof data['n'] === 'string' || data['n'] instanceof String)) {
            throw new Error("Expected the field `n` to be a primitive type in the JSON string but got " + data['n']);
        }
        // ensure the json data is a string
        if (data['use'] && !(typeof data['use'] === 'string' || data['use'] instanceof String)) {
            throw new Error("Expected the field `use` to be a primitive type in the JSON string but got " + data['use']);
        }
        // ensure the json data is a string
        if (data['x'] && !(typeof data['x'] === 'string' || data['x'] instanceof String)) {
            throw new Error("Expected the field `x` to be a primitive type in the JSON string but got " + data['x']);
        }
        // ensure the json data is a string
        if (data['y'] && !(typeof data['y'] === 'string' || data['y'] instanceof String)) {
            throw new Error("Expected the field `y` to be a primitive type in the JSON string but got " + data['y']);
        }

        return true;
    }


}



/**
 * Algorithm.
 * @member {String} alg
 */
Jwk.prototype['alg'] = undefined;

/**
 * Used for ECDSA keys.
 * @member {String} crv
 */
Jwk.prototype['crv'] = undefined;

/**
 * Used for RSA keys.
 * @member {String} e
 */
Jwk.prototype['e'] = undefined;

/**
 * Key ID.
 * @member {String} kid
 */
Jwk.prototype['kid'] = undefined;

/**
 * Key Type.
 * @member {String} kty
 */
Jwk.prototype['kty'] = undefined;

/**
 * Used for RSA keys.
 * @member {String} n
 */
Jwk.prototype['n'] = undefined;

/**
 * Permitted uses for the public keys.
 * @member {String} use
 */
Jwk.prototype['use'] = undefined;

/**
 * Used for ECDSA keys.
 * @member {String} x
 */
Jwk.prototype['x'] = undefined;

/**
 * Used for ECDSA keys.
 * @member {String} y
 */
Jwk.prototype['y'] = undefined;






export default Jwk;

