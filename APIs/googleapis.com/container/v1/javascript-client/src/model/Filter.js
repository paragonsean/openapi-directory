/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Filter model module.
 * @module model/Filter
 * @version v1
 */
class Filter {
    /**
     * Constructs a new <code>Filter</code>.
     * Allows filtering to one or more specific event types. If event types are present, those and only those event types will be transmitted to the cluster. Other types will be skipped. If no filter is specified, or no event types are present, all event types will be sent
     * @alias module:model/Filter
     */
    constructor() { 
        
        Filter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Filter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Filter} obj Optional instance to populate.
     * @return {module:model/Filter} The populated <code>Filter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Filter();

            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Filter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Filter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['eventType'])) {
            throw new Error("Expected the field `eventType` to be an array in the JSON data but got " + data['eventType']);
        }

        return true;
    }


}



/**
 * Event types to allowlist.
 * @member {Array.<module:model/Filter.EventTypeEnum>} eventType
 */
Filter.prototype['eventType'] = undefined;





/**
 * Allowed values for the <code>eventType</code> property.
 * @enum {String}
 * @readonly
 */
Filter['EventTypeEnum'] = {

    /**
     * value: "EVENT_TYPE_UNSPECIFIED"
     * @const
     */
    "EVENT_TYPE_UNSPECIFIED": "EVENT_TYPE_UNSPECIFIED",

    /**
     * value: "UPGRADE_AVAILABLE_EVENT"
     * @const
     */
    "UPGRADE_AVAILABLE_EVENT": "UPGRADE_AVAILABLE_EVENT",

    /**
     * value: "UPGRADE_EVENT"
     * @const
     */
    "UPGRADE_EVENT": "UPGRADE_EVENT",

    /**
     * value: "SECURITY_BULLETIN_EVENT"
     * @const
     */
    "SECURITY_BULLETIN_EVENT": "SECURITY_BULLETIN_EVENT"
};



export default Filter;

