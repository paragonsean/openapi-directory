/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KubernetesEngineApi);
  }
}(this, function(expect, KubernetesEngineApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KubernetesEngineApi.NodeConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NodeConfig', function() {
    it('should create an instance of NodeConfig', function() {
      // uncomment below and update the code to test NodeConfig
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be.a(KubernetesEngineApi.NodeConfig);
    });

    it('should have the property accelerators (base name: "accelerators")', function() {
      // uncomment below and update the code to test the property accelerators
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property advancedMachineFeatures (base name: "advancedMachineFeatures")', function() {
      // uncomment below and update the code to test the property advancedMachineFeatures
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property bootDiskKmsKey (base name: "bootDiskKmsKey")', function() {
      // uncomment below and update the code to test the property bootDiskKmsKey
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property confidentialNodes (base name: "confidentialNodes")', function() {
      // uncomment below and update the code to test the property confidentialNodes
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property diskSizeGb (base name: "diskSizeGb")', function() {
      // uncomment below and update the code to test the property diskSizeGb
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property diskType (base name: "diskType")', function() {
      // uncomment below and update the code to test the property diskType
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property enableConfidentialStorage (base name: "enableConfidentialStorage")', function() {
      // uncomment below and update the code to test the property enableConfidentialStorage
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property ephemeralStorageLocalSsdConfig (base name: "ephemeralStorageLocalSsdConfig")', function() {
      // uncomment below and update the code to test the property ephemeralStorageLocalSsdConfig
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property fastSocket (base name: "fastSocket")', function() {
      // uncomment below and update the code to test the property fastSocket
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property gcfsConfig (base name: "gcfsConfig")', function() {
      // uncomment below and update the code to test the property gcfsConfig
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property gvnic (base name: "gvnic")', function() {
      // uncomment below and update the code to test the property gvnic
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property imageType (base name: "imageType")', function() {
      // uncomment below and update the code to test the property imageType
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property kubeletConfig (base name: "kubeletConfig")', function() {
      // uncomment below and update the code to test the property kubeletConfig
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property linuxNodeConfig (base name: "linuxNodeConfig")', function() {
      // uncomment below and update the code to test the property linuxNodeConfig
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property localNvmeSsdBlockConfig (base name: "localNvmeSsdBlockConfig")', function() {
      // uncomment below and update the code to test the property localNvmeSsdBlockConfig
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property localSsdCount (base name: "localSsdCount")', function() {
      // uncomment below and update the code to test the property localSsdCount
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property loggingConfig (base name: "loggingConfig")', function() {
      // uncomment below and update the code to test the property loggingConfig
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property machineType (base name: "machineType")', function() {
      // uncomment below and update the code to test the property machineType
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property minCpuPlatform (base name: "minCpuPlatform")', function() {
      // uncomment below and update the code to test the property minCpuPlatform
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property nodeGroup (base name: "nodeGroup")', function() {
      // uncomment below and update the code to test the property nodeGroup
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property oauthScopes (base name: "oauthScopes")', function() {
      // uncomment below and update the code to test the property oauthScopes
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property preemptible (base name: "preemptible")', function() {
      // uncomment below and update the code to test the property preemptible
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property reservationAffinity (base name: "reservationAffinity")', function() {
      // uncomment below and update the code to test the property reservationAffinity
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property resourceLabels (base name: "resourceLabels")', function() {
      // uncomment below and update the code to test the property resourceLabels
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property resourceManagerTags (base name: "resourceManagerTags")', function() {
      // uncomment below and update the code to test the property resourceManagerTags
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property sandboxConfig (base name: "sandboxConfig")', function() {
      // uncomment below and update the code to test the property sandboxConfig
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property secondaryBootDisks (base name: "secondaryBootDisks")', function() {
      // uncomment below and update the code to test the property secondaryBootDisks
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property serviceAccount (base name: "serviceAccount")', function() {
      // uncomment below and update the code to test the property serviceAccount
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property shieldedInstanceConfig (base name: "shieldedInstanceConfig")', function() {
      // uncomment below and update the code to test the property shieldedInstanceConfig
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property soleTenantConfig (base name: "soleTenantConfig")', function() {
      // uncomment below and update the code to test the property soleTenantConfig
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property spot (base name: "spot")', function() {
      // uncomment below and update the code to test the property spot
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property taints (base name: "taints")', function() {
      // uncomment below and update the code to test the property taints
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property windowsNodeConfig (base name: "windowsNodeConfig")', function() {
      // uncomment below and update the code to test the property windowsNodeConfig
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

    it('should have the property workloadMetadataConfig (base name: "workloadMetadataConfig")', function() {
      // uncomment below and update the code to test the property workloadMetadataConfig
      //var instance = new KubernetesEngineApi.NodeConfig();
      //expect(instance).to.be();
    });

  });

}));
