/**
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KubernetesEngineApi);
  }
}(this, function(expect, KubernetesEngineApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KubernetesEngineApi.Cluster();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Cluster', function() {
    it('should create an instance of Cluster', function() {
      // uncomment below and update the code to test Cluster
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be.a(KubernetesEngineApi.Cluster);
    });

    it('should have the property addonsConfig (base name: "addonsConfig")', function() {
      // uncomment below and update the code to test the property addonsConfig
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property authenticatorGroupsConfig (base name: "authenticatorGroupsConfig")', function() {
      // uncomment below and update the code to test the property authenticatorGroupsConfig
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property autopilot (base name: "autopilot")', function() {
      // uncomment below and update the code to test the property autopilot
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property autoscaling (base name: "autoscaling")', function() {
      // uncomment below and update the code to test the property autoscaling
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property binaryAuthorization (base name: "binaryAuthorization")', function() {
      // uncomment below and update the code to test the property binaryAuthorization
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property clusterIpv4Cidr (base name: "clusterIpv4Cidr")', function() {
      // uncomment below and update the code to test the property clusterIpv4Cidr
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property conditions (base name: "conditions")', function() {
      // uncomment below and update the code to test the property conditions
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property confidentialNodes (base name: "confidentialNodes")', function() {
      // uncomment below and update the code to test the property confidentialNodes
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property costManagementConfig (base name: "costManagementConfig")', function() {
      // uncomment below and update the code to test the property costManagementConfig
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property createTime (base name: "createTime")', function() {
      // uncomment below and update the code to test the property createTime
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property currentMasterVersion (base name: "currentMasterVersion")', function() {
      // uncomment below and update the code to test the property currentMasterVersion
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property currentNodeCount (base name: "currentNodeCount")', function() {
      // uncomment below and update the code to test the property currentNodeCount
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property currentNodeVersion (base name: "currentNodeVersion")', function() {
      // uncomment below and update the code to test the property currentNodeVersion
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property databaseEncryption (base name: "databaseEncryption")', function() {
      // uncomment below and update the code to test the property databaseEncryption
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property defaultMaxPodsConstraint (base name: "defaultMaxPodsConstraint")', function() {
      // uncomment below and update the code to test the property defaultMaxPodsConstraint
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property enableK8sBetaApis (base name: "enableK8sBetaApis")', function() {
      // uncomment below and update the code to test the property enableK8sBetaApis
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property enableKubernetesAlpha (base name: "enableKubernetesAlpha")', function() {
      // uncomment below and update the code to test the property enableKubernetesAlpha
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property enableTpu (base name: "enableTpu")', function() {
      // uncomment below and update the code to test the property enableTpu
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property endpoint (base name: "endpoint")', function() {
      // uncomment below and update the code to test the property endpoint
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property enterpriseConfig (base name: "enterpriseConfig")', function() {
      // uncomment below and update the code to test the property enterpriseConfig
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property etag (base name: "etag")', function() {
      // uncomment below and update the code to test the property etag
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property expireTime (base name: "expireTime")', function() {
      // uncomment below and update the code to test the property expireTime
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property fleet (base name: "fleet")', function() {
      // uncomment below and update the code to test the property fleet
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property identityServiceConfig (base name: "identityServiceConfig")', function() {
      // uncomment below and update the code to test the property identityServiceConfig
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property initialClusterVersion (base name: "initialClusterVersion")', function() {
      // uncomment below and update the code to test the property initialClusterVersion
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property initialNodeCount (base name: "initialNodeCount")', function() {
      // uncomment below and update the code to test the property initialNodeCount
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property instanceGroupUrls (base name: "instanceGroupUrls")', function() {
      // uncomment below and update the code to test the property instanceGroupUrls
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property ipAllocationPolicy (base name: "ipAllocationPolicy")', function() {
      // uncomment below and update the code to test the property ipAllocationPolicy
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property labelFingerprint (base name: "labelFingerprint")', function() {
      // uncomment below and update the code to test the property labelFingerprint
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property legacyAbac (base name: "legacyAbac")', function() {
      // uncomment below and update the code to test the property legacyAbac
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property locations (base name: "locations")', function() {
      // uncomment below and update the code to test the property locations
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property loggingConfig (base name: "loggingConfig")', function() {
      // uncomment below and update the code to test the property loggingConfig
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property loggingService (base name: "loggingService")', function() {
      // uncomment below and update the code to test the property loggingService
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property maintenancePolicy (base name: "maintenancePolicy")', function() {
      // uncomment below and update the code to test the property maintenancePolicy
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property masterAuth (base name: "masterAuth")', function() {
      // uncomment below and update the code to test the property masterAuth
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property masterAuthorizedNetworksConfig (base name: "masterAuthorizedNetworksConfig")', function() {
      // uncomment below and update the code to test the property masterAuthorizedNetworksConfig
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property meshCertificates (base name: "meshCertificates")', function() {
      // uncomment below and update the code to test the property meshCertificates
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property monitoringConfig (base name: "monitoringConfig")', function() {
      // uncomment below and update the code to test the property monitoringConfig
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property monitoringService (base name: "monitoringService")', function() {
      // uncomment below and update the code to test the property monitoringService
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property network (base name: "network")', function() {
      // uncomment below and update the code to test the property network
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property networkConfig (base name: "networkConfig")', function() {
      // uncomment below and update the code to test the property networkConfig
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property networkPolicy (base name: "networkPolicy")', function() {
      // uncomment below and update the code to test the property networkPolicy
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property nodeConfig (base name: "nodeConfig")', function() {
      // uncomment below and update the code to test the property nodeConfig
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property nodeIpv4CidrSize (base name: "nodeIpv4CidrSize")', function() {
      // uncomment below and update the code to test the property nodeIpv4CidrSize
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property nodePoolAutoConfig (base name: "nodePoolAutoConfig")', function() {
      // uncomment below and update the code to test the property nodePoolAutoConfig
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property nodePoolDefaults (base name: "nodePoolDefaults")', function() {
      // uncomment below and update the code to test the property nodePoolDefaults
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property nodePools (base name: "nodePools")', function() {
      // uncomment below and update the code to test the property nodePools
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property notificationConfig (base name: "notificationConfig")', function() {
      // uncomment below and update the code to test the property notificationConfig
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property parentProductConfig (base name: "parentProductConfig")', function() {
      // uncomment below and update the code to test the property parentProductConfig
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property privateClusterConfig (base name: "privateClusterConfig")', function() {
      // uncomment below and update the code to test the property privateClusterConfig
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property releaseChannel (base name: "releaseChannel")', function() {
      // uncomment below and update the code to test the property releaseChannel
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property resourceLabels (base name: "resourceLabels")', function() {
      // uncomment below and update the code to test the property resourceLabels
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property resourceUsageExportConfig (base name: "resourceUsageExportConfig")', function() {
      // uncomment below and update the code to test the property resourceUsageExportConfig
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property securityPostureConfig (base name: "securityPostureConfig")', function() {
      // uncomment below and update the code to test the property securityPostureConfig
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property selfLink (base name: "selfLink")', function() {
      // uncomment below and update the code to test the property selfLink
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property servicesIpv4Cidr (base name: "servicesIpv4Cidr")', function() {
      // uncomment below and update the code to test the property servicesIpv4Cidr
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property shieldedNodes (base name: "shieldedNodes")', function() {
      // uncomment below and update the code to test the property shieldedNodes
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property statusMessage (base name: "statusMessage")', function() {
      // uncomment below and update the code to test the property statusMessage
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property subnetwork (base name: "subnetwork")', function() {
      // uncomment below and update the code to test the property subnetwork
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property tpuIpv4CidrBlock (base name: "tpuIpv4CidrBlock")', function() {
      // uncomment below and update the code to test the property tpuIpv4CidrBlock
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property verticalPodAutoscaling (base name: "verticalPodAutoscaling")', function() {
      // uncomment below and update the code to test the property verticalPodAutoscaling
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property workloadIdentityConfig (base name: "workloadIdentityConfig")', function() {
      // uncomment below and update the code to test the property workloadIdentityConfig
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

    it('should have the property zone (base name: "zone")', function() {
      // uncomment below and update the code to test the property zone
      //var instance = new KubernetesEngineApi.Cluster();
      //expect(instance).to.be();
    });

  });

}));
