# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeKubeletConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpu_cfs_quota: bool=None, cpu_cfs_quota_period: str=None, cpu_manager_policy: str=None, insecure_kubelet_readonly_port_enabled: bool=None, pod_pids_limit: str=None):
        """NodeKubeletConfig - a model defined in OpenAPI

        :param cpu_cfs_quota: The cpu_cfs_quota of this NodeKubeletConfig.
        :param cpu_cfs_quota_period: The cpu_cfs_quota_period of this NodeKubeletConfig.
        :param cpu_manager_policy: The cpu_manager_policy of this NodeKubeletConfig.
        :param insecure_kubelet_readonly_port_enabled: The insecure_kubelet_readonly_port_enabled of this NodeKubeletConfig.
        :param pod_pids_limit: The pod_pids_limit of this NodeKubeletConfig.
        """
        self.openapi_types = {
            'cpu_cfs_quota': bool,
            'cpu_cfs_quota_period': str,
            'cpu_manager_policy': str,
            'insecure_kubelet_readonly_port_enabled': bool,
            'pod_pids_limit': str
        }

        self.attribute_map = {
            'cpu_cfs_quota': 'cpuCfsQuota',
            'cpu_cfs_quota_period': 'cpuCfsQuotaPeriod',
            'cpu_manager_policy': 'cpuManagerPolicy',
            'insecure_kubelet_readonly_port_enabled': 'insecureKubeletReadonlyPortEnabled',
            'pod_pids_limit': 'podPidsLimit'
        }

        self._cpu_cfs_quota = cpu_cfs_quota
        self._cpu_cfs_quota_period = cpu_cfs_quota_period
        self._cpu_manager_policy = cpu_manager_policy
        self._insecure_kubelet_readonly_port_enabled = insecure_kubelet_readonly_port_enabled
        self._pod_pids_limit = pod_pids_limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeKubeletConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeKubeletConfig of this NodeKubeletConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu_cfs_quota(self):
        """Gets the cpu_cfs_quota of this NodeKubeletConfig.

        Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.

        :return: The cpu_cfs_quota of this NodeKubeletConfig.
        :rtype: bool
        """
        return self._cpu_cfs_quota

    @cpu_cfs_quota.setter
    def cpu_cfs_quota(self, cpu_cfs_quota):
        """Sets the cpu_cfs_quota of this NodeKubeletConfig.

        Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.

        :param cpu_cfs_quota: The cpu_cfs_quota of this NodeKubeletConfig.
        :type cpu_cfs_quota: bool
        """

        self._cpu_cfs_quota = cpu_cfs_quota

    @property
    def cpu_cfs_quota_period(self):
        """Gets the cpu_cfs_quota_period of this NodeKubeletConfig.

        Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". The value must be a positive duration.

        :return: The cpu_cfs_quota_period of this NodeKubeletConfig.
        :rtype: str
        """
        return self._cpu_cfs_quota_period

    @cpu_cfs_quota_period.setter
    def cpu_cfs_quota_period(self, cpu_cfs_quota_period):
        """Sets the cpu_cfs_quota_period of this NodeKubeletConfig.

        Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". The value must be a positive duration.

        :param cpu_cfs_quota_period: The cpu_cfs_quota_period of this NodeKubeletConfig.
        :type cpu_cfs_quota_period: str
        """

        self._cpu_cfs_quota_period = cpu_cfs_quota_period

    @property
    def cpu_manager_policy(self):
        """Gets the cpu_manager_policy of this NodeKubeletConfig.

        Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. * \"none\": the default, which represents the existing scheduling behavior. * \"static\": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.

        :return: The cpu_manager_policy of this NodeKubeletConfig.
        :rtype: str
        """
        return self._cpu_manager_policy

    @cpu_manager_policy.setter
    def cpu_manager_policy(self, cpu_manager_policy):
        """Sets the cpu_manager_policy of this NodeKubeletConfig.

        Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. * \"none\": the default, which represents the existing scheduling behavior. * \"static\": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.

        :param cpu_manager_policy: The cpu_manager_policy of this NodeKubeletConfig.
        :type cpu_manager_policy: str
        """

        self._cpu_manager_policy = cpu_manager_policy

    @property
    def insecure_kubelet_readonly_port_enabled(self):
        """Gets the insecure_kubelet_readonly_port_enabled of this NodeKubeletConfig.

        Enable or disable Kubelet read only port.

        :return: The insecure_kubelet_readonly_port_enabled of this NodeKubeletConfig.
        :rtype: bool
        """
        return self._insecure_kubelet_readonly_port_enabled

    @insecure_kubelet_readonly_port_enabled.setter
    def insecure_kubelet_readonly_port_enabled(self, insecure_kubelet_readonly_port_enabled):
        """Sets the insecure_kubelet_readonly_port_enabled of this NodeKubeletConfig.

        Enable or disable Kubelet read only port.

        :param insecure_kubelet_readonly_port_enabled: The insecure_kubelet_readonly_port_enabled of this NodeKubeletConfig.
        :type insecure_kubelet_readonly_port_enabled: bool
        """

        self._insecure_kubelet_readonly_port_enabled = insecure_kubelet_readonly_port_enabled

    @property
    def pod_pids_limit(self):
        """Gets the pod_pids_limit of this NodeKubeletConfig.

        Set the Pod PID limits. See https://kubernetes.io/docs/concepts/policy/pid-limiting/#pod-pid-limits Controls the maximum number of processes allowed to run in a pod. The value must be greater than or equal to 1024 and less than 4194304.

        :return: The pod_pids_limit of this NodeKubeletConfig.
        :rtype: str
        """
        return self._pod_pids_limit

    @pod_pids_limit.setter
    def pod_pids_limit(self, pod_pids_limit):
        """Sets the pod_pids_limit of this NodeKubeletConfig.

        Set the Pod PID limits. See https://kubernetes.io/docs/concepts/policy/pid-limiting/#pod-pid-limits Controls the maximum number of processes allowed to run in a pod. The value must be greater than or equal to 1024 and less than 4194304.

        :param pod_pids_limit: The pod_pids_limit of this NodeKubeletConfig.
        :type pod_pids_limit: str
        """

        self._pod_pids_limit = pod_pids_limit
