# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.big_query_destination import BigQueryDestination
from openapi_server.models.consumption_metering_config import ConsumptionMeteringConfig
from openapi_server import util


class ResourceUsageExportConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bigquery_destination: BigQueryDestination=None, consumption_metering_config: ConsumptionMeteringConfig=None, enable_network_egress_metering: bool=None):
        """ResourceUsageExportConfig - a model defined in OpenAPI

        :param bigquery_destination: The bigquery_destination of this ResourceUsageExportConfig.
        :param consumption_metering_config: The consumption_metering_config of this ResourceUsageExportConfig.
        :param enable_network_egress_metering: The enable_network_egress_metering of this ResourceUsageExportConfig.
        """
        self.openapi_types = {
            'bigquery_destination': BigQueryDestination,
            'consumption_metering_config': ConsumptionMeteringConfig,
            'enable_network_egress_metering': bool
        }

        self.attribute_map = {
            'bigquery_destination': 'bigqueryDestination',
            'consumption_metering_config': 'consumptionMeteringConfig',
            'enable_network_egress_metering': 'enableNetworkEgressMetering'
        }

        self._bigquery_destination = bigquery_destination
        self._consumption_metering_config = consumption_metering_config
        self._enable_network_egress_metering = enable_network_egress_metering

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceUsageExportConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceUsageExportConfig of this ResourceUsageExportConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bigquery_destination(self):
        """Gets the bigquery_destination of this ResourceUsageExportConfig.


        :return: The bigquery_destination of this ResourceUsageExportConfig.
        :rtype: BigQueryDestination
        """
        return self._bigquery_destination

    @bigquery_destination.setter
    def bigquery_destination(self, bigquery_destination):
        """Sets the bigquery_destination of this ResourceUsageExportConfig.


        :param bigquery_destination: The bigquery_destination of this ResourceUsageExportConfig.
        :type bigquery_destination: BigQueryDestination
        """

        self._bigquery_destination = bigquery_destination

    @property
    def consumption_metering_config(self):
        """Gets the consumption_metering_config of this ResourceUsageExportConfig.


        :return: The consumption_metering_config of this ResourceUsageExportConfig.
        :rtype: ConsumptionMeteringConfig
        """
        return self._consumption_metering_config

    @consumption_metering_config.setter
    def consumption_metering_config(self, consumption_metering_config):
        """Sets the consumption_metering_config of this ResourceUsageExportConfig.


        :param consumption_metering_config: The consumption_metering_config of this ResourceUsageExportConfig.
        :type consumption_metering_config: ConsumptionMeteringConfig
        """

        self._consumption_metering_config = consumption_metering_config

    @property
    def enable_network_egress_metering(self):
        """Gets the enable_network_egress_metering of this ResourceUsageExportConfig.

        Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.

        :return: The enable_network_egress_metering of this ResourceUsageExportConfig.
        :rtype: bool
        """
        return self._enable_network_egress_metering

    @enable_network_egress_metering.setter
    def enable_network_egress_metering(self, enable_network_egress_metering):
        """Sets the enable_network_egress_metering of this ResourceUsageExportConfig.

        Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic.

        :param enable_network_egress_metering: The enable_network_egress_metering of this ResourceUsageExportConfig.
        :type enable_network_egress_metering: bool
        """

        self._enable_network_egress_metering = enable_network_egress_metering
