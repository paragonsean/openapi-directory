# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LinuxNodeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cgroup_mode: str=None, sysctls: Dict[str, str]=None):
        """LinuxNodeConfig - a model defined in OpenAPI

        :param cgroup_mode: The cgroup_mode of this LinuxNodeConfig.
        :param sysctls: The sysctls of this LinuxNodeConfig.
        """
        self.openapi_types = {
            'cgroup_mode': str,
            'sysctls': Dict[str, str]
        }

        self.attribute_map = {
            'cgroup_mode': 'cgroupMode',
            'sysctls': 'sysctls'
        }

        self._cgroup_mode = cgroup_mode
        self._sysctls = sysctls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinuxNodeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinuxNodeConfig of this LinuxNodeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cgroup_mode(self):
        """Gets the cgroup_mode of this LinuxNodeConfig.

        cgroup_mode specifies the cgroup mode to be used on the node.

        :return: The cgroup_mode of this LinuxNodeConfig.
        :rtype: str
        """
        return self._cgroup_mode

    @cgroup_mode.setter
    def cgroup_mode(self, cgroup_mode):
        """Sets the cgroup_mode of this LinuxNodeConfig.

        cgroup_mode specifies the cgroup mode to be used on the node.

        :param cgroup_mode: The cgroup_mode of this LinuxNodeConfig.
        :type cgroup_mode: str
        """
        allowed_values = ["CGROUP_MODE_UNSPECIFIED", "CGROUP_MODE_V1", "CGROUP_MODE_V2"]  # noqa: E501
        if cgroup_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `cgroup_mode` ({0}), must be one of {1}"
                .format(cgroup_mode, allowed_values)
            )

        self._cgroup_mode = cgroup_mode

    @property
    def sysctls(self):
        """Gets the sysctls of this LinuxNodeConfig.

        The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.busy_poll net.core.busy_read net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse

        :return: The sysctls of this LinuxNodeConfig.
        :rtype: Dict[str, str]
        """
        return self._sysctls

    @sysctls.setter
    def sysctls(self, sysctls):
        """Sets the sysctls of this LinuxNodeConfig.

        The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.busy_poll net.core.busy_read net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse

        :param sysctls: The sysctls of this LinuxNodeConfig.
        :type sysctls: Dict[str, str]
        """

        self._sysctls = sysctls
