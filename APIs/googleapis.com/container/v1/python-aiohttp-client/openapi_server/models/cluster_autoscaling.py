# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.autoprovisioning_node_pool_defaults import AutoprovisioningNodePoolDefaults
from openapi_server.models.resource_limit import ResourceLimit
from openapi_server import util


class ClusterAutoscaling(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autoprovisioning_locations: List[str]=None, autoprovisioning_node_pool_defaults: AutoprovisioningNodePoolDefaults=None, autoscaling_profile: str=None, enable_node_autoprovisioning: bool=None, resource_limits: List[ResourceLimit]=None):
        """ClusterAutoscaling - a model defined in OpenAPI

        :param autoprovisioning_locations: The autoprovisioning_locations of this ClusterAutoscaling.
        :param autoprovisioning_node_pool_defaults: The autoprovisioning_node_pool_defaults of this ClusterAutoscaling.
        :param autoscaling_profile: The autoscaling_profile of this ClusterAutoscaling.
        :param enable_node_autoprovisioning: The enable_node_autoprovisioning of this ClusterAutoscaling.
        :param resource_limits: The resource_limits of this ClusterAutoscaling.
        """
        self.openapi_types = {
            'autoprovisioning_locations': List[str],
            'autoprovisioning_node_pool_defaults': AutoprovisioningNodePoolDefaults,
            'autoscaling_profile': str,
            'enable_node_autoprovisioning': bool,
            'resource_limits': List[ResourceLimit]
        }

        self.attribute_map = {
            'autoprovisioning_locations': 'autoprovisioningLocations',
            'autoprovisioning_node_pool_defaults': 'autoprovisioningNodePoolDefaults',
            'autoscaling_profile': 'autoscalingProfile',
            'enable_node_autoprovisioning': 'enableNodeAutoprovisioning',
            'resource_limits': 'resourceLimits'
        }

        self._autoprovisioning_locations = autoprovisioning_locations
        self._autoprovisioning_node_pool_defaults = autoprovisioning_node_pool_defaults
        self._autoscaling_profile = autoscaling_profile
        self._enable_node_autoprovisioning = enable_node_autoprovisioning
        self._resource_limits = resource_limits

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterAutoscaling':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterAutoscaling of this ClusterAutoscaling.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autoprovisioning_locations(self):
        """Gets the autoprovisioning_locations of this ClusterAutoscaling.

        The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.

        :return: The autoprovisioning_locations of this ClusterAutoscaling.
        :rtype: List[str]
        """
        return self._autoprovisioning_locations

    @autoprovisioning_locations.setter
    def autoprovisioning_locations(self, autoprovisioning_locations):
        """Sets the autoprovisioning_locations of this ClusterAutoscaling.

        The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.

        :param autoprovisioning_locations: The autoprovisioning_locations of this ClusterAutoscaling.
        :type autoprovisioning_locations: List[str]
        """

        self._autoprovisioning_locations = autoprovisioning_locations

    @property
    def autoprovisioning_node_pool_defaults(self):
        """Gets the autoprovisioning_node_pool_defaults of this ClusterAutoscaling.


        :return: The autoprovisioning_node_pool_defaults of this ClusterAutoscaling.
        :rtype: AutoprovisioningNodePoolDefaults
        """
        return self._autoprovisioning_node_pool_defaults

    @autoprovisioning_node_pool_defaults.setter
    def autoprovisioning_node_pool_defaults(self, autoprovisioning_node_pool_defaults):
        """Sets the autoprovisioning_node_pool_defaults of this ClusterAutoscaling.


        :param autoprovisioning_node_pool_defaults: The autoprovisioning_node_pool_defaults of this ClusterAutoscaling.
        :type autoprovisioning_node_pool_defaults: AutoprovisioningNodePoolDefaults
        """

        self._autoprovisioning_node_pool_defaults = autoprovisioning_node_pool_defaults

    @property
    def autoscaling_profile(self):
        """Gets the autoscaling_profile of this ClusterAutoscaling.

        Defines autoscaling behaviour.

        :return: The autoscaling_profile of this ClusterAutoscaling.
        :rtype: str
        """
        return self._autoscaling_profile

    @autoscaling_profile.setter
    def autoscaling_profile(self, autoscaling_profile):
        """Sets the autoscaling_profile of this ClusterAutoscaling.

        Defines autoscaling behaviour.

        :param autoscaling_profile: The autoscaling_profile of this ClusterAutoscaling.
        :type autoscaling_profile: str
        """
        allowed_values = ["PROFILE_UNSPECIFIED", "OPTIMIZE_UTILIZATION", "BALANCED"]  # noqa: E501
        if autoscaling_profile not in allowed_values:
            raise ValueError(
                "Invalid value for `autoscaling_profile` ({0}), must be one of {1}"
                .format(autoscaling_profile, allowed_values)
            )

        self._autoscaling_profile = autoscaling_profile

    @property
    def enable_node_autoprovisioning(self):
        """Gets the enable_node_autoprovisioning of this ClusterAutoscaling.

        Enables automatic node pool creation and deletion.

        :return: The enable_node_autoprovisioning of this ClusterAutoscaling.
        :rtype: bool
        """
        return self._enable_node_autoprovisioning

    @enable_node_autoprovisioning.setter
    def enable_node_autoprovisioning(self, enable_node_autoprovisioning):
        """Sets the enable_node_autoprovisioning of this ClusterAutoscaling.

        Enables automatic node pool creation and deletion.

        :param enable_node_autoprovisioning: The enable_node_autoprovisioning of this ClusterAutoscaling.
        :type enable_node_autoprovisioning: bool
        """

        self._enable_node_autoprovisioning = enable_node_autoprovisioning

    @property
    def resource_limits(self):
        """Gets the resource_limits of this ClusterAutoscaling.

        Contains global constraints regarding minimum and maximum amount of resources in the cluster.

        :return: The resource_limits of this ClusterAutoscaling.
        :rtype: List[ResourceLimit]
        """
        return self._resource_limits

    @resource_limits.setter
    def resource_limits(self, resource_limits):
        """Sets the resource_limits of this ClusterAutoscaling.

        Contains global constraints regarding minimum and maximum amount of resources in the cluster.

        :param resource_limits: The resource_limits of this ClusterAutoscaling.
        :type resource_limits: List[ResourceLimit]
        """

        self._resource_limits = resource_limits
