# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BestEffortProvisioning(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, min_provision_nodes: int=None):
        """BestEffortProvisioning - a model defined in OpenAPI

        :param enabled: The enabled of this BestEffortProvisioning.
        :param min_provision_nodes: The min_provision_nodes of this BestEffortProvisioning.
        """
        self.openapi_types = {
            'enabled': bool,
            'min_provision_nodes': int
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'min_provision_nodes': 'minProvisionNodes'
        }

        self._enabled = enabled
        self._min_provision_nodes = min_provision_nodes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BestEffortProvisioning':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BestEffortProvisioning of this BestEffortProvisioning.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this BestEffortProvisioning.

        When this is enabled, cluster/node pool creations will ignore non-fatal errors like stockout to best provision as many nodes as possible right now and eventually bring up all target number of nodes

        :return: The enabled of this BestEffortProvisioning.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BestEffortProvisioning.

        When this is enabled, cluster/node pool creations will ignore non-fatal errors like stockout to best provision as many nodes as possible right now and eventually bring up all target number of nodes

        :param enabled: The enabled of this BestEffortProvisioning.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def min_provision_nodes(self):
        """Gets the min_provision_nodes of this BestEffortProvisioning.

        Minimum number of nodes to be provisioned to be considered as succeeded, and the rest of nodes will be provisioned gradually and eventually when stockout issue has been resolved.

        :return: The min_provision_nodes of this BestEffortProvisioning.
        :rtype: int
        """
        return self._min_provision_nodes

    @min_provision_nodes.setter
    def min_provision_nodes(self, min_provision_nodes):
        """Sets the min_provision_nodes of this BestEffortProvisioning.

        Minimum number of nodes to be provisioned to be considered as succeeded, and the rest of nodes will be provisioned gradually and eventually when stockout issue has been resolved.

        :param min_provision_nodes: The min_provision_nodes of this BestEffortProvisioning.
        :type min_provision_nodes: int
        """

        self._min_provision_nodes = min_provision_nodes
