# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter import Filter
from openapi_server import util


class PubSub(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, filter: Filter=None, topic: str=None):
        """PubSub - a model defined in OpenAPI

        :param enabled: The enabled of this PubSub.
        :param filter: The filter of this PubSub.
        :param topic: The topic of this PubSub.
        """
        self.openapi_types = {
            'enabled': bool,
            'filter': Filter,
            'topic': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'filter': 'filter',
            'topic': 'topic'
        }

        self._enabled = enabled
        self._filter = filter
        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PubSub':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PubSub of this PubSub.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this PubSub.

        Enable notifications for Pub/Sub.

        :return: The enabled of this PubSub.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this PubSub.

        Enable notifications for Pub/Sub.

        :param enabled: The enabled of this PubSub.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def filter(self):
        """Gets the filter of this PubSub.


        :return: The filter of this PubSub.
        :rtype: Filter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this PubSub.


        :param filter: The filter of this PubSub.
        :type filter: Filter
        """

        self._filter = filter

    @property
    def topic(self):
        """Gets the topic of this PubSub.

        The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.

        :return: The topic of this PubSub.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this PubSub.

        The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`.

        :param topic: The topic of this PubSub.
        :type topic: str
        """

        self._topic = topic
