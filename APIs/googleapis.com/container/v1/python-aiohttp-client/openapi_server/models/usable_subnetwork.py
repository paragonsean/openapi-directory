# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.usable_subnetwork_secondary_range import UsableSubnetworkSecondaryRange
from openapi_server import util


class UsableSubnetwork(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_cidr_range: str=None, network: str=None, secondary_ip_ranges: List[UsableSubnetworkSecondaryRange]=None, status_message: str=None, subnetwork: str=None):
        """UsableSubnetwork - a model defined in OpenAPI

        :param ip_cidr_range: The ip_cidr_range of this UsableSubnetwork.
        :param network: The network of this UsableSubnetwork.
        :param secondary_ip_ranges: The secondary_ip_ranges of this UsableSubnetwork.
        :param status_message: The status_message of this UsableSubnetwork.
        :param subnetwork: The subnetwork of this UsableSubnetwork.
        """
        self.openapi_types = {
            'ip_cidr_range': str,
            'network': str,
            'secondary_ip_ranges': List[UsableSubnetworkSecondaryRange],
            'status_message': str,
            'subnetwork': str
        }

        self.attribute_map = {
            'ip_cidr_range': 'ipCidrRange',
            'network': 'network',
            'secondary_ip_ranges': 'secondaryIpRanges',
            'status_message': 'statusMessage',
            'subnetwork': 'subnetwork'
        }

        self._ip_cidr_range = ip_cidr_range
        self._network = network
        self._secondary_ip_ranges = secondary_ip_ranges
        self._status_message = status_message
        self._subnetwork = subnetwork

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsableSubnetwork':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsableSubnetwork of this UsableSubnetwork.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_cidr_range(self):
        """Gets the ip_cidr_range of this UsableSubnetwork.

        The range of internal addresses that are owned by this subnetwork.

        :return: The ip_cidr_range of this UsableSubnetwork.
        :rtype: str
        """
        return self._ip_cidr_range

    @ip_cidr_range.setter
    def ip_cidr_range(self, ip_cidr_range):
        """Sets the ip_cidr_range of this UsableSubnetwork.

        The range of internal addresses that are owned by this subnetwork.

        :param ip_cidr_range: The ip_cidr_range of this UsableSubnetwork.
        :type ip_cidr_range: str
        """

        self._ip_cidr_range = ip_cidr_range

    @property
    def network(self):
        """Gets the network of this UsableSubnetwork.

        Network Name. Example: projects/my-project/global/networks/my-network

        :return: The network of this UsableSubnetwork.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this UsableSubnetwork.

        Network Name. Example: projects/my-project/global/networks/my-network

        :param network: The network of this UsableSubnetwork.
        :type network: str
        """

        self._network = network

    @property
    def secondary_ip_ranges(self):
        """Gets the secondary_ip_ranges of this UsableSubnetwork.

        Secondary IP ranges.

        :return: The secondary_ip_ranges of this UsableSubnetwork.
        :rtype: List[UsableSubnetworkSecondaryRange]
        """
        return self._secondary_ip_ranges

    @secondary_ip_ranges.setter
    def secondary_ip_ranges(self, secondary_ip_ranges):
        """Sets the secondary_ip_ranges of this UsableSubnetwork.

        Secondary IP ranges.

        :param secondary_ip_ranges: The secondary_ip_ranges of this UsableSubnetwork.
        :type secondary_ip_ranges: List[UsableSubnetworkSecondaryRange]
        """

        self._secondary_ip_ranges = secondary_ip_ranges

    @property
    def status_message(self):
        """Gets the status_message of this UsableSubnetwork.

        A human readable status message representing the reasons for cases where the caller cannot use the secondary ranges under the subnet. For example if the secondary_ip_ranges is empty due to a permission issue, an insufficient permission message will be given by status_message.

        :return: The status_message of this UsableSubnetwork.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this UsableSubnetwork.

        A human readable status message representing the reasons for cases where the caller cannot use the secondary ranges under the subnet. For example if the secondary_ip_ranges is empty due to a permission issue, an insufficient permission message will be given by status_message.

        :param status_message: The status_message of this UsableSubnetwork.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def subnetwork(self):
        """Gets the subnetwork of this UsableSubnetwork.

        Subnetwork Name. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet

        :return: The subnetwork of this UsableSubnetwork.
        :rtype: str
        """
        return self._subnetwork

    @subnetwork.setter
    def subnetwork(self, subnetwork):
        """Sets the subnetwork of this UsableSubnetwork.

        Subnetwork Name. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet

        :param subnetwork: The subnetwork of this UsableSubnetwork.
        :type subnetwork: str
        """

        self._subnetwork = subnetwork
