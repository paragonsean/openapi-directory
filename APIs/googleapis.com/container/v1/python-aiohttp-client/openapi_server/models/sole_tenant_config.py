# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_affinity import NodeAffinity
from openapi_server import util


class SoleTenantConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_affinities: List[NodeAffinity]=None):
        """SoleTenantConfig - a model defined in OpenAPI

        :param node_affinities: The node_affinities of this SoleTenantConfig.
        """
        self.openapi_types = {
            'node_affinities': List[NodeAffinity]
        }

        self.attribute_map = {
            'node_affinities': 'nodeAffinities'
        }

        self._node_affinities = node_affinities

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SoleTenantConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SoleTenantConfig of this SoleTenantConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_affinities(self):
        """Gets the node_affinities of this SoleTenantConfig.

        NodeAffinities used to match to a shared sole tenant node group.

        :return: The node_affinities of this SoleTenantConfig.
        :rtype: List[NodeAffinity]
        """
        return self._node_affinities

    @node_affinities.setter
    def node_affinities(self, node_affinities):
        """Sets the node_affinities of this SoleTenantConfig.

        NodeAffinities used to match to a shared sole tenant node group.

        :param node_affinities: The node_affinities of this SoleTenantConfig.
        :type node_affinities: List[NodeAffinity]
        """

        self._node_affinities = node_affinities
