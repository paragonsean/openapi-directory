# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutopilotCompatibilityIssue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, constraint_type: str=None, description: str=None, documentation_url: str=None, incompatibility_type: str=None, last_observation: str=None, subjects: List[str]=None):
        """AutopilotCompatibilityIssue - a model defined in OpenAPI

        :param constraint_type: The constraint_type of this AutopilotCompatibilityIssue.
        :param description: The description of this AutopilotCompatibilityIssue.
        :param documentation_url: The documentation_url of this AutopilotCompatibilityIssue.
        :param incompatibility_type: The incompatibility_type of this AutopilotCompatibilityIssue.
        :param last_observation: The last_observation of this AutopilotCompatibilityIssue.
        :param subjects: The subjects of this AutopilotCompatibilityIssue.
        """
        self.openapi_types = {
            'constraint_type': str,
            'description': str,
            'documentation_url': str,
            'incompatibility_type': str,
            'last_observation': str,
            'subjects': List[str]
        }

        self.attribute_map = {
            'constraint_type': 'constraintType',
            'description': 'description',
            'documentation_url': 'documentationUrl',
            'incompatibility_type': 'incompatibilityType',
            'last_observation': 'lastObservation',
            'subjects': 'subjects'
        }

        self._constraint_type = constraint_type
        self._description = description
        self._documentation_url = documentation_url
        self._incompatibility_type = incompatibility_type
        self._last_observation = last_observation
        self._subjects = subjects

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutopilotCompatibilityIssue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutopilotCompatibilityIssue of this AutopilotCompatibilityIssue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def constraint_type(self):
        """Gets the constraint_type of this AutopilotCompatibilityIssue.

        The constraint type of the issue.

        :return: The constraint_type of this AutopilotCompatibilityIssue.
        :rtype: str
        """
        return self._constraint_type

    @constraint_type.setter
    def constraint_type(self, constraint_type):
        """Sets the constraint_type of this AutopilotCompatibilityIssue.

        The constraint type of the issue.

        :param constraint_type: The constraint_type of this AutopilotCompatibilityIssue.
        :type constraint_type: str
        """

        self._constraint_type = constraint_type

    @property
    def description(self):
        """Gets the description of this AutopilotCompatibilityIssue.

        The description of the issue.

        :return: The description of this AutopilotCompatibilityIssue.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AutopilotCompatibilityIssue.

        The description of the issue.

        :param description: The description of this AutopilotCompatibilityIssue.
        :type description: str
        """

        self._description = description

    @property
    def documentation_url(self):
        """Gets the documentation_url of this AutopilotCompatibilityIssue.

        A URL to a public documnetation, which addresses resolving this issue.

        :return: The documentation_url of this AutopilotCompatibilityIssue.
        :rtype: str
        """
        return self._documentation_url

    @documentation_url.setter
    def documentation_url(self, documentation_url):
        """Sets the documentation_url of this AutopilotCompatibilityIssue.

        A URL to a public documnetation, which addresses resolving this issue.

        :param documentation_url: The documentation_url of this AutopilotCompatibilityIssue.
        :type documentation_url: str
        """

        self._documentation_url = documentation_url

    @property
    def incompatibility_type(self):
        """Gets the incompatibility_type of this AutopilotCompatibilityIssue.

        The incompatibility type of this issue.

        :return: The incompatibility_type of this AutopilotCompatibilityIssue.
        :rtype: str
        """
        return self._incompatibility_type

    @incompatibility_type.setter
    def incompatibility_type(self, incompatibility_type):
        """Sets the incompatibility_type of this AutopilotCompatibilityIssue.

        The incompatibility type of this issue.

        :param incompatibility_type: The incompatibility_type of this AutopilotCompatibilityIssue.
        :type incompatibility_type: str
        """
        allowed_values = ["UNSPECIFIED", "INCOMPATIBILITY", "ADDITIONAL_CONFIG_REQUIRED", "PASSED_WITH_OPTIONAL_CONFIG"]  # noqa: E501
        if incompatibility_type not in allowed_values:
            raise ValueError(
                "Invalid value for `incompatibility_type` ({0}), must be one of {1}"
                .format(incompatibility_type, allowed_values)
            )

        self._incompatibility_type = incompatibility_type

    @property
    def last_observation(self):
        """Gets the last_observation of this AutopilotCompatibilityIssue.

        The last time when this issue was observed.

        :return: The last_observation of this AutopilotCompatibilityIssue.
        :rtype: str
        """
        return self._last_observation

    @last_observation.setter
    def last_observation(self, last_observation):
        """Sets the last_observation of this AutopilotCompatibilityIssue.

        The last time when this issue was observed.

        :param last_observation: The last_observation of this AutopilotCompatibilityIssue.
        :type last_observation: str
        """

        self._last_observation = last_observation

    @property
    def subjects(self):
        """Gets the subjects of this AutopilotCompatibilityIssue.

        The name of the resources which are subject to this issue.

        :return: The subjects of this AutopilotCompatibilityIssue.
        :rtype: List[str]
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects):
        """Sets the subjects of this AutopilotCompatibilityIssue.

        The name of the resources which are subject to this issue.

        :param subjects: The subjects of this AutopilotCompatibilityIssue.
        :type subjects: List[str]
        """

        self._subjects = subjects
