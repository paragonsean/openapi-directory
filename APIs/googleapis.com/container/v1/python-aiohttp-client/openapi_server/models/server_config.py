# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.release_channel_config import ReleaseChannelConfig
from openapi_server import util


class ServerConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channels: List[ReleaseChannelConfig]=None, default_cluster_version: str=None, default_image_type: str=None, valid_image_types: List[str]=None, valid_master_versions: List[str]=None, valid_node_versions: List[str]=None):
        """ServerConfig - a model defined in OpenAPI

        :param channels: The channels of this ServerConfig.
        :param default_cluster_version: The default_cluster_version of this ServerConfig.
        :param default_image_type: The default_image_type of this ServerConfig.
        :param valid_image_types: The valid_image_types of this ServerConfig.
        :param valid_master_versions: The valid_master_versions of this ServerConfig.
        :param valid_node_versions: The valid_node_versions of this ServerConfig.
        """
        self.openapi_types = {
            'channels': List[ReleaseChannelConfig],
            'default_cluster_version': str,
            'default_image_type': str,
            'valid_image_types': List[str],
            'valid_master_versions': List[str],
            'valid_node_versions': List[str]
        }

        self.attribute_map = {
            'channels': 'channels',
            'default_cluster_version': 'defaultClusterVersion',
            'default_image_type': 'defaultImageType',
            'valid_image_types': 'validImageTypes',
            'valid_master_versions': 'validMasterVersions',
            'valid_node_versions': 'validNodeVersions'
        }

        self._channels = channels
        self._default_cluster_version = default_cluster_version
        self._default_image_type = default_image_type
        self._valid_image_types = valid_image_types
        self._valid_master_versions = valid_master_versions
        self._valid_node_versions = valid_node_versions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerConfig of this ServerConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channels(self):
        """Gets the channels of this ServerConfig.

        List of release channel configurations.

        :return: The channels of this ServerConfig.
        :rtype: List[ReleaseChannelConfig]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this ServerConfig.

        List of release channel configurations.

        :param channels: The channels of this ServerConfig.
        :type channels: List[ReleaseChannelConfig]
        """

        self._channels = channels

    @property
    def default_cluster_version(self):
        """Gets the default_cluster_version of this ServerConfig.

        Version of Kubernetes the service deploys by default.

        :return: The default_cluster_version of this ServerConfig.
        :rtype: str
        """
        return self._default_cluster_version

    @default_cluster_version.setter
    def default_cluster_version(self, default_cluster_version):
        """Sets the default_cluster_version of this ServerConfig.

        Version of Kubernetes the service deploys by default.

        :param default_cluster_version: The default_cluster_version of this ServerConfig.
        :type default_cluster_version: str
        """

        self._default_cluster_version = default_cluster_version

    @property
    def default_image_type(self):
        """Gets the default_image_type of this ServerConfig.

        Default image type.

        :return: The default_image_type of this ServerConfig.
        :rtype: str
        """
        return self._default_image_type

    @default_image_type.setter
    def default_image_type(self, default_image_type):
        """Sets the default_image_type of this ServerConfig.

        Default image type.

        :param default_image_type: The default_image_type of this ServerConfig.
        :type default_image_type: str
        """

        self._default_image_type = default_image_type

    @property
    def valid_image_types(self):
        """Gets the valid_image_types of this ServerConfig.

        List of valid image types.

        :return: The valid_image_types of this ServerConfig.
        :rtype: List[str]
        """
        return self._valid_image_types

    @valid_image_types.setter
    def valid_image_types(self, valid_image_types):
        """Sets the valid_image_types of this ServerConfig.

        List of valid image types.

        :param valid_image_types: The valid_image_types of this ServerConfig.
        :type valid_image_types: List[str]
        """

        self._valid_image_types = valid_image_types

    @property
    def valid_master_versions(self):
        """Gets the valid_master_versions of this ServerConfig.

        List of valid master versions, in descending order.

        :return: The valid_master_versions of this ServerConfig.
        :rtype: List[str]
        """
        return self._valid_master_versions

    @valid_master_versions.setter
    def valid_master_versions(self, valid_master_versions):
        """Sets the valid_master_versions of this ServerConfig.

        List of valid master versions, in descending order.

        :param valid_master_versions: The valid_master_versions of this ServerConfig.
        :type valid_master_versions: List[str]
        """

        self._valid_master_versions = valid_master_versions

    @property
    def valid_node_versions(self):
        """Gets the valid_node_versions of this ServerConfig.

        List of valid node upgrade target versions, in descending order.

        :return: The valid_node_versions of this ServerConfig.
        :rtype: List[str]
        """
        return self._valid_node_versions

    @valid_node_versions.setter
    def valid_node_versions(self, valid_node_versions):
        """Sets the valid_node_versions of this ServerConfig.

        List of valid node upgrade target versions, in descending order.

        :param valid_node_versions: The valid_node_versions of this ServerConfig.
        :type valid_node_versions: List[str]
        """

        self._valid_node_versions = valid_node_versions
