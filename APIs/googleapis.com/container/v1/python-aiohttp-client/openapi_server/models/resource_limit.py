# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceLimit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, maximum: str=None, minimum: str=None, resource_type: str=None):
        """ResourceLimit - a model defined in OpenAPI

        :param maximum: The maximum of this ResourceLimit.
        :param minimum: The minimum of this ResourceLimit.
        :param resource_type: The resource_type of this ResourceLimit.
        """
        self.openapi_types = {
            'maximum': str,
            'minimum': str,
            'resource_type': str
        }

        self.attribute_map = {
            'maximum': 'maximum',
            'minimum': 'minimum',
            'resource_type': 'resourceType'
        }

        self._maximum = maximum
        self._minimum = minimum
        self._resource_type = resource_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceLimit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceLimit of this ResourceLimit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def maximum(self):
        """Gets the maximum of this ResourceLimit.

        Maximum amount of the resource in the cluster.

        :return: The maximum of this ResourceLimit.
        :rtype: str
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this ResourceLimit.

        Maximum amount of the resource in the cluster.

        :param maximum: The maximum of this ResourceLimit.
        :type maximum: str
        """

        self._maximum = maximum

    @property
    def minimum(self):
        """Gets the minimum of this ResourceLimit.

        Minimum amount of the resource in the cluster.

        :return: The minimum of this ResourceLimit.
        :rtype: str
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this ResourceLimit.

        Minimum amount of the resource in the cluster.

        :param minimum: The minimum of this ResourceLimit.
        :type minimum: str
        """

        self._minimum = minimum

    @property
    def resource_type(self):
        """Gets the resource_type of this ResourceLimit.

        Resource name \"cpu\", \"memory\" or gpu-specific string.

        :return: The resource_type of this ResourceLimit.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ResourceLimit.

        Resource name \"cpu\", \"memory\" or gpu-specific string.

        :param resource_type: The resource_type of this ResourceLimit.
        :type resource_type: str
        """

        self._resource_type = resource_type
