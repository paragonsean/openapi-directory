# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReleaseChannelConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: str=None, default_version: str=None, valid_versions: List[str]=None):
        """ReleaseChannelConfig - a model defined in OpenAPI

        :param channel: The channel of this ReleaseChannelConfig.
        :param default_version: The default_version of this ReleaseChannelConfig.
        :param valid_versions: The valid_versions of this ReleaseChannelConfig.
        """
        self.openapi_types = {
            'channel': str,
            'default_version': str,
            'valid_versions': List[str]
        }

        self.attribute_map = {
            'channel': 'channel',
            'default_version': 'defaultVersion',
            'valid_versions': 'validVersions'
        }

        self._channel = channel
        self._default_version = default_version
        self._valid_versions = valid_versions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReleaseChannelConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReleaseChannelConfig of this ReleaseChannelConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this ReleaseChannelConfig.

        The release channel this configuration applies to.

        :return: The channel of this ReleaseChannelConfig.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this ReleaseChannelConfig.

        The release channel this configuration applies to.

        :param channel: The channel of this ReleaseChannelConfig.
        :type channel: str
        """
        allowed_values = ["UNSPECIFIED", "RAPID", "REGULAR", "STABLE"]  # noqa: E501
        if channel not in allowed_values:
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def default_version(self):
        """Gets the default_version of this ReleaseChannelConfig.

        The default version for newly created clusters on the channel.

        :return: The default_version of this ReleaseChannelConfig.
        :rtype: str
        """
        return self._default_version

    @default_version.setter
    def default_version(self, default_version):
        """Sets the default_version of this ReleaseChannelConfig.

        The default version for newly created clusters on the channel.

        :param default_version: The default_version of this ReleaseChannelConfig.
        :type default_version: str
        """

        self._default_version = default_version

    @property
    def valid_versions(self):
        """Gets the valid_versions of this ReleaseChannelConfig.

        List of valid versions for the channel.

        :return: The valid_versions of this ReleaseChannelConfig.
        :rtype: List[str]
        """
        return self._valid_versions

    @valid_versions.setter
    def valid_versions(self, valid_versions):
        """Sets the valid_versions of this ReleaseChannelConfig.

        List of valid versions for the channel.

        :param valid_versions: The valid_versions of this ReleaseChannelConfig.
        :type valid_versions: List[str]
        """

        self._valid_versions = valid_versions
