# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeTaint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, effect: str=None, key: str=None, value: str=None):
        """NodeTaint - a model defined in OpenAPI

        :param effect: The effect of this NodeTaint.
        :param key: The key of this NodeTaint.
        :param value: The value of this NodeTaint.
        """
        self.openapi_types = {
            'effect': str,
            'key': str,
            'value': str
        }

        self.attribute_map = {
            'effect': 'effect',
            'key': 'key',
            'value': 'value'
        }

        self._effect = effect
        self._key = key
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeTaint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeTaint of this NodeTaint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def effect(self):
        """Gets the effect of this NodeTaint.

        Effect for taint.

        :return: The effect of this NodeTaint.
        :rtype: str
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """Sets the effect of this NodeTaint.

        Effect for taint.

        :param effect: The effect of this NodeTaint.
        :type effect: str
        """
        allowed_values = ["EFFECT_UNSPECIFIED", "NO_SCHEDULE", "PREFER_NO_SCHEDULE", "NO_EXECUTE"]  # noqa: E501
        if effect not in allowed_values:
            raise ValueError(
                "Invalid value for `effect` ({0}), must be one of {1}"
                .format(effect, allowed_values)
            )

        self._effect = effect

    @property
    def key(self):
        """Gets the key of this NodeTaint.

        Key for taint.

        :return: The key of this NodeTaint.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this NodeTaint.

        Key for taint.

        :param key: The key of this NodeTaint.
        :type key: str
        """

        self._key = key

    @property
    def value(self):
        """Gets the value of this NodeTaint.

        Value for taint.

        :return: The value of this NodeTaint.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this NodeTaint.

        Value for taint.

        :param value: The value of this NodeTaint.
        :type value: str
        """

        self._value = value
