# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.addons_config import AddonsConfig
from openapi_server.models.authenticator_groups_config import AuthenticatorGroupsConfig
from openapi_server.models.autopilot import Autopilot
from openapi_server.models.binary_authorization import BinaryAuthorization
from openapi_server.models.cluster_autoscaling import ClusterAutoscaling
from openapi_server.models.confidential_nodes import ConfidentialNodes
from openapi_server.models.cost_management_config import CostManagementConfig
from openapi_server.models.database_encryption import DatabaseEncryption
from openapi_server.models.enterprise_config import EnterpriseConfig
from openapi_server.models.fleet import Fleet
from openapi_server.models.ip_allocation_policy import IPAllocationPolicy
from openapi_server.models.identity_service_config import IdentityServiceConfig
from openapi_server.models.k8s_beta_api_config import K8sBetaAPIConfig
from openapi_server.models.legacy_abac import LegacyAbac
from openapi_server.models.logging_config import LoggingConfig
from openapi_server.models.maintenance_policy import MaintenancePolicy
from openapi_server.models.master_auth import MasterAuth
from openapi_server.models.master_authorized_networks_config import MasterAuthorizedNetworksConfig
from openapi_server.models.max_pods_constraint import MaxPodsConstraint
from openapi_server.models.mesh_certificates import MeshCertificates
from openapi_server.models.monitoring_config import MonitoringConfig
from openapi_server.models.network_config import NetworkConfig
from openapi_server.models.network_policy import NetworkPolicy
from openapi_server.models.node_config import NodeConfig
from openapi_server.models.node_pool import NodePool
from openapi_server.models.node_pool_auto_config import NodePoolAutoConfig
from openapi_server.models.node_pool_defaults import NodePoolDefaults
from openapi_server.models.notification_config import NotificationConfig
from openapi_server.models.parent_product_config import ParentProductConfig
from openapi_server.models.private_cluster_config import PrivateClusterConfig
from openapi_server.models.release_channel import ReleaseChannel
from openapi_server.models.resource_usage_export_config import ResourceUsageExportConfig
from openapi_server.models.security_posture_config import SecurityPostureConfig
from openapi_server.models.shielded_nodes import ShieldedNodes
from openapi_server.models.status_condition import StatusCondition
from openapi_server.models.vertical_pod_autoscaling import VerticalPodAutoscaling
from openapi_server.models.workload_identity_config import WorkloadIdentityConfig
from openapi_server import util


class Cluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addons_config: AddonsConfig=None, authenticator_groups_config: AuthenticatorGroupsConfig=None, autopilot: Autopilot=None, autoscaling: ClusterAutoscaling=None, binary_authorization: BinaryAuthorization=None, cluster_ipv4_cidr: str=None, conditions: List[StatusCondition]=None, confidential_nodes: ConfidentialNodes=None, cost_management_config: CostManagementConfig=None, create_time: str=None, current_master_version: str=None, current_node_count: int=None, current_node_version: str=None, database_encryption: DatabaseEncryption=None, default_max_pods_constraint: MaxPodsConstraint=None, description: str=None, enable_k8s_beta_apis: K8sBetaAPIConfig=None, enable_kubernetes_alpha: bool=None, enable_tpu: bool=None, endpoint: str=None, enterprise_config: EnterpriseConfig=None, etag: str=None, expire_time: str=None, fleet: Fleet=None, id: str=None, identity_service_config: IdentityServiceConfig=None, initial_cluster_version: str=None, initial_node_count: int=None, instance_group_urls: List[str]=None, ip_allocation_policy: IPAllocationPolicy=None, label_fingerprint: str=None, legacy_abac: LegacyAbac=None, location: str=None, locations: List[str]=None, logging_config: LoggingConfig=None, logging_service: str=None, maintenance_policy: MaintenancePolicy=None, master_auth: MasterAuth=None, master_authorized_networks_config: MasterAuthorizedNetworksConfig=None, mesh_certificates: MeshCertificates=None, monitoring_config: MonitoringConfig=None, monitoring_service: str=None, name: str=None, network: str=None, network_config: NetworkConfig=None, network_policy: NetworkPolicy=None, node_config: NodeConfig=None, node_ipv4_cidr_size: int=None, node_pool_auto_config: NodePoolAutoConfig=None, node_pool_defaults: NodePoolDefaults=None, node_pools: List[NodePool]=None, notification_config: NotificationConfig=None, parent_product_config: ParentProductConfig=None, private_cluster_config: PrivateClusterConfig=None, release_channel: ReleaseChannel=None, resource_labels: Dict[str, str]=None, resource_usage_export_config: ResourceUsageExportConfig=None, security_posture_config: SecurityPostureConfig=None, self_link: str=None, services_ipv4_cidr: str=None, shielded_nodes: ShieldedNodes=None, status: str=None, status_message: str=None, subnetwork: str=None, tpu_ipv4_cidr_block: str=None, vertical_pod_autoscaling: VerticalPodAutoscaling=None, workload_identity_config: WorkloadIdentityConfig=None, zone: str=None):
        """Cluster - a model defined in OpenAPI

        :param addons_config: The addons_config of this Cluster.
        :param authenticator_groups_config: The authenticator_groups_config of this Cluster.
        :param autopilot: The autopilot of this Cluster.
        :param autoscaling: The autoscaling of this Cluster.
        :param binary_authorization: The binary_authorization of this Cluster.
        :param cluster_ipv4_cidr: The cluster_ipv4_cidr of this Cluster.
        :param conditions: The conditions of this Cluster.
        :param confidential_nodes: The confidential_nodes of this Cluster.
        :param cost_management_config: The cost_management_config of this Cluster.
        :param create_time: The create_time of this Cluster.
        :param current_master_version: The current_master_version of this Cluster.
        :param current_node_count: The current_node_count of this Cluster.
        :param current_node_version: The current_node_version of this Cluster.
        :param database_encryption: The database_encryption of this Cluster.
        :param default_max_pods_constraint: The default_max_pods_constraint of this Cluster.
        :param description: The description of this Cluster.
        :param enable_k8s_beta_apis: The enable_k8s_beta_apis of this Cluster.
        :param enable_kubernetes_alpha: The enable_kubernetes_alpha of this Cluster.
        :param enable_tpu: The enable_tpu of this Cluster.
        :param endpoint: The endpoint of this Cluster.
        :param enterprise_config: The enterprise_config of this Cluster.
        :param etag: The etag of this Cluster.
        :param expire_time: The expire_time of this Cluster.
        :param fleet: The fleet of this Cluster.
        :param id: The id of this Cluster.
        :param identity_service_config: The identity_service_config of this Cluster.
        :param initial_cluster_version: The initial_cluster_version of this Cluster.
        :param initial_node_count: The initial_node_count of this Cluster.
        :param instance_group_urls: The instance_group_urls of this Cluster.
        :param ip_allocation_policy: The ip_allocation_policy of this Cluster.
        :param label_fingerprint: The label_fingerprint of this Cluster.
        :param legacy_abac: The legacy_abac of this Cluster.
        :param location: The location of this Cluster.
        :param locations: The locations of this Cluster.
        :param logging_config: The logging_config of this Cluster.
        :param logging_service: The logging_service of this Cluster.
        :param maintenance_policy: The maintenance_policy of this Cluster.
        :param master_auth: The master_auth of this Cluster.
        :param master_authorized_networks_config: The master_authorized_networks_config of this Cluster.
        :param mesh_certificates: The mesh_certificates of this Cluster.
        :param monitoring_config: The monitoring_config of this Cluster.
        :param monitoring_service: The monitoring_service of this Cluster.
        :param name: The name of this Cluster.
        :param network: The network of this Cluster.
        :param network_config: The network_config of this Cluster.
        :param network_policy: The network_policy of this Cluster.
        :param node_config: The node_config of this Cluster.
        :param node_ipv4_cidr_size: The node_ipv4_cidr_size of this Cluster.
        :param node_pool_auto_config: The node_pool_auto_config of this Cluster.
        :param node_pool_defaults: The node_pool_defaults of this Cluster.
        :param node_pools: The node_pools of this Cluster.
        :param notification_config: The notification_config of this Cluster.
        :param parent_product_config: The parent_product_config of this Cluster.
        :param private_cluster_config: The private_cluster_config of this Cluster.
        :param release_channel: The release_channel of this Cluster.
        :param resource_labels: The resource_labels of this Cluster.
        :param resource_usage_export_config: The resource_usage_export_config of this Cluster.
        :param security_posture_config: The security_posture_config of this Cluster.
        :param self_link: The self_link of this Cluster.
        :param services_ipv4_cidr: The services_ipv4_cidr of this Cluster.
        :param shielded_nodes: The shielded_nodes of this Cluster.
        :param status: The status of this Cluster.
        :param status_message: The status_message of this Cluster.
        :param subnetwork: The subnetwork of this Cluster.
        :param tpu_ipv4_cidr_block: The tpu_ipv4_cidr_block of this Cluster.
        :param vertical_pod_autoscaling: The vertical_pod_autoscaling of this Cluster.
        :param workload_identity_config: The workload_identity_config of this Cluster.
        :param zone: The zone of this Cluster.
        """
        self.openapi_types = {
            'addons_config': AddonsConfig,
            'authenticator_groups_config': AuthenticatorGroupsConfig,
            'autopilot': Autopilot,
            'autoscaling': ClusterAutoscaling,
            'binary_authorization': BinaryAuthorization,
            'cluster_ipv4_cidr': str,
            'conditions': List[StatusCondition],
            'confidential_nodes': ConfidentialNodes,
            'cost_management_config': CostManagementConfig,
            'create_time': str,
            'current_master_version': str,
            'current_node_count': int,
            'current_node_version': str,
            'database_encryption': DatabaseEncryption,
            'default_max_pods_constraint': MaxPodsConstraint,
            'description': str,
            'enable_k8s_beta_apis': K8sBetaAPIConfig,
            'enable_kubernetes_alpha': bool,
            'enable_tpu': bool,
            'endpoint': str,
            'enterprise_config': EnterpriseConfig,
            'etag': str,
            'expire_time': str,
            'fleet': Fleet,
            'id': str,
            'identity_service_config': IdentityServiceConfig,
            'initial_cluster_version': str,
            'initial_node_count': int,
            'instance_group_urls': List[str],
            'ip_allocation_policy': IPAllocationPolicy,
            'label_fingerprint': str,
            'legacy_abac': LegacyAbac,
            'location': str,
            'locations': List[str],
            'logging_config': LoggingConfig,
            'logging_service': str,
            'maintenance_policy': MaintenancePolicy,
            'master_auth': MasterAuth,
            'master_authorized_networks_config': MasterAuthorizedNetworksConfig,
            'mesh_certificates': MeshCertificates,
            'monitoring_config': MonitoringConfig,
            'monitoring_service': str,
            'name': str,
            'network': str,
            'network_config': NetworkConfig,
            'network_policy': NetworkPolicy,
            'node_config': NodeConfig,
            'node_ipv4_cidr_size': int,
            'node_pool_auto_config': NodePoolAutoConfig,
            'node_pool_defaults': NodePoolDefaults,
            'node_pools': List[NodePool],
            'notification_config': NotificationConfig,
            'parent_product_config': ParentProductConfig,
            'private_cluster_config': PrivateClusterConfig,
            'release_channel': ReleaseChannel,
            'resource_labels': Dict[str, str],
            'resource_usage_export_config': ResourceUsageExportConfig,
            'security_posture_config': SecurityPostureConfig,
            'self_link': str,
            'services_ipv4_cidr': str,
            'shielded_nodes': ShieldedNodes,
            'status': str,
            'status_message': str,
            'subnetwork': str,
            'tpu_ipv4_cidr_block': str,
            'vertical_pod_autoscaling': VerticalPodAutoscaling,
            'workload_identity_config': WorkloadIdentityConfig,
            'zone': str
        }

        self.attribute_map = {
            'addons_config': 'addonsConfig',
            'authenticator_groups_config': 'authenticatorGroupsConfig',
            'autopilot': 'autopilot',
            'autoscaling': 'autoscaling',
            'binary_authorization': 'binaryAuthorization',
            'cluster_ipv4_cidr': 'clusterIpv4Cidr',
            'conditions': 'conditions',
            'confidential_nodes': 'confidentialNodes',
            'cost_management_config': 'costManagementConfig',
            'create_time': 'createTime',
            'current_master_version': 'currentMasterVersion',
            'current_node_count': 'currentNodeCount',
            'current_node_version': 'currentNodeVersion',
            'database_encryption': 'databaseEncryption',
            'default_max_pods_constraint': 'defaultMaxPodsConstraint',
            'description': 'description',
            'enable_k8s_beta_apis': 'enableK8sBetaApis',
            'enable_kubernetes_alpha': 'enableKubernetesAlpha',
            'enable_tpu': 'enableTpu',
            'endpoint': 'endpoint',
            'enterprise_config': 'enterpriseConfig',
            'etag': 'etag',
            'expire_time': 'expireTime',
            'fleet': 'fleet',
            'id': 'id',
            'identity_service_config': 'identityServiceConfig',
            'initial_cluster_version': 'initialClusterVersion',
            'initial_node_count': 'initialNodeCount',
            'instance_group_urls': 'instanceGroupUrls',
            'ip_allocation_policy': 'ipAllocationPolicy',
            'label_fingerprint': 'labelFingerprint',
            'legacy_abac': 'legacyAbac',
            'location': 'location',
            'locations': 'locations',
            'logging_config': 'loggingConfig',
            'logging_service': 'loggingService',
            'maintenance_policy': 'maintenancePolicy',
            'master_auth': 'masterAuth',
            'master_authorized_networks_config': 'masterAuthorizedNetworksConfig',
            'mesh_certificates': 'meshCertificates',
            'monitoring_config': 'monitoringConfig',
            'monitoring_service': 'monitoringService',
            'name': 'name',
            'network': 'network',
            'network_config': 'networkConfig',
            'network_policy': 'networkPolicy',
            'node_config': 'nodeConfig',
            'node_ipv4_cidr_size': 'nodeIpv4CidrSize',
            'node_pool_auto_config': 'nodePoolAutoConfig',
            'node_pool_defaults': 'nodePoolDefaults',
            'node_pools': 'nodePools',
            'notification_config': 'notificationConfig',
            'parent_product_config': 'parentProductConfig',
            'private_cluster_config': 'privateClusterConfig',
            'release_channel': 'releaseChannel',
            'resource_labels': 'resourceLabels',
            'resource_usage_export_config': 'resourceUsageExportConfig',
            'security_posture_config': 'securityPostureConfig',
            'self_link': 'selfLink',
            'services_ipv4_cidr': 'servicesIpv4Cidr',
            'shielded_nodes': 'shieldedNodes',
            'status': 'status',
            'status_message': 'statusMessage',
            'subnetwork': 'subnetwork',
            'tpu_ipv4_cidr_block': 'tpuIpv4CidrBlock',
            'vertical_pod_autoscaling': 'verticalPodAutoscaling',
            'workload_identity_config': 'workloadIdentityConfig',
            'zone': 'zone'
        }

        self._addons_config = addons_config
        self._authenticator_groups_config = authenticator_groups_config
        self._autopilot = autopilot
        self._autoscaling = autoscaling
        self._binary_authorization = binary_authorization
        self._cluster_ipv4_cidr = cluster_ipv4_cidr
        self._conditions = conditions
        self._confidential_nodes = confidential_nodes
        self._cost_management_config = cost_management_config
        self._create_time = create_time
        self._current_master_version = current_master_version
        self._current_node_count = current_node_count
        self._current_node_version = current_node_version
        self._database_encryption = database_encryption
        self._default_max_pods_constraint = default_max_pods_constraint
        self._description = description
        self._enable_k8s_beta_apis = enable_k8s_beta_apis
        self._enable_kubernetes_alpha = enable_kubernetes_alpha
        self._enable_tpu = enable_tpu
        self._endpoint = endpoint
        self._enterprise_config = enterprise_config
        self._etag = etag
        self._expire_time = expire_time
        self._fleet = fleet
        self._id = id
        self._identity_service_config = identity_service_config
        self._initial_cluster_version = initial_cluster_version
        self._initial_node_count = initial_node_count
        self._instance_group_urls = instance_group_urls
        self._ip_allocation_policy = ip_allocation_policy
        self._label_fingerprint = label_fingerprint
        self._legacy_abac = legacy_abac
        self._location = location
        self._locations = locations
        self._logging_config = logging_config
        self._logging_service = logging_service
        self._maintenance_policy = maintenance_policy
        self._master_auth = master_auth
        self._master_authorized_networks_config = master_authorized_networks_config
        self._mesh_certificates = mesh_certificates
        self._monitoring_config = monitoring_config
        self._monitoring_service = monitoring_service
        self._name = name
        self._network = network
        self._network_config = network_config
        self._network_policy = network_policy
        self._node_config = node_config
        self._node_ipv4_cidr_size = node_ipv4_cidr_size
        self._node_pool_auto_config = node_pool_auto_config
        self._node_pool_defaults = node_pool_defaults
        self._node_pools = node_pools
        self._notification_config = notification_config
        self._parent_product_config = parent_product_config
        self._private_cluster_config = private_cluster_config
        self._release_channel = release_channel
        self._resource_labels = resource_labels
        self._resource_usage_export_config = resource_usage_export_config
        self._security_posture_config = security_posture_config
        self._self_link = self_link
        self._services_ipv4_cidr = services_ipv4_cidr
        self._shielded_nodes = shielded_nodes
        self._status = status
        self._status_message = status_message
        self._subnetwork = subnetwork
        self._tpu_ipv4_cidr_block = tpu_ipv4_cidr_block
        self._vertical_pod_autoscaling = vertical_pod_autoscaling
        self._workload_identity_config = workload_identity_config
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cluster of this Cluster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addons_config(self):
        """Gets the addons_config of this Cluster.


        :return: The addons_config of this Cluster.
        :rtype: AddonsConfig
        """
        return self._addons_config

    @addons_config.setter
    def addons_config(self, addons_config):
        """Sets the addons_config of this Cluster.


        :param addons_config: The addons_config of this Cluster.
        :type addons_config: AddonsConfig
        """

        self._addons_config = addons_config

    @property
    def authenticator_groups_config(self):
        """Gets the authenticator_groups_config of this Cluster.


        :return: The authenticator_groups_config of this Cluster.
        :rtype: AuthenticatorGroupsConfig
        """
        return self._authenticator_groups_config

    @authenticator_groups_config.setter
    def authenticator_groups_config(self, authenticator_groups_config):
        """Sets the authenticator_groups_config of this Cluster.


        :param authenticator_groups_config: The authenticator_groups_config of this Cluster.
        :type authenticator_groups_config: AuthenticatorGroupsConfig
        """

        self._authenticator_groups_config = authenticator_groups_config

    @property
    def autopilot(self):
        """Gets the autopilot of this Cluster.


        :return: The autopilot of this Cluster.
        :rtype: Autopilot
        """
        return self._autopilot

    @autopilot.setter
    def autopilot(self, autopilot):
        """Sets the autopilot of this Cluster.


        :param autopilot: The autopilot of this Cluster.
        :type autopilot: Autopilot
        """

        self._autopilot = autopilot

    @property
    def autoscaling(self):
        """Gets the autoscaling of this Cluster.


        :return: The autoscaling of this Cluster.
        :rtype: ClusterAutoscaling
        """
        return self._autoscaling

    @autoscaling.setter
    def autoscaling(self, autoscaling):
        """Sets the autoscaling of this Cluster.


        :param autoscaling: The autoscaling of this Cluster.
        :type autoscaling: ClusterAutoscaling
        """

        self._autoscaling = autoscaling

    @property
    def binary_authorization(self):
        """Gets the binary_authorization of this Cluster.


        :return: The binary_authorization of this Cluster.
        :rtype: BinaryAuthorization
        """
        return self._binary_authorization

    @binary_authorization.setter
    def binary_authorization(self, binary_authorization):
        """Sets the binary_authorization of this Cluster.


        :param binary_authorization: The binary_authorization of this Cluster.
        :type binary_authorization: BinaryAuthorization
        """

        self._binary_authorization = binary_authorization

    @property
    def cluster_ipv4_cidr(self):
        """Gets the cluster_ipv4_cidr of this Cluster.

        The IP address range of the container pods in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`). Leave blank to have one automatically chosen or specify a `/14` block in `10.0.0.0/8`.

        :return: The cluster_ipv4_cidr of this Cluster.
        :rtype: str
        """
        return self._cluster_ipv4_cidr

    @cluster_ipv4_cidr.setter
    def cluster_ipv4_cidr(self, cluster_ipv4_cidr):
        """Sets the cluster_ipv4_cidr of this Cluster.

        The IP address range of the container pods in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`). Leave blank to have one automatically chosen or specify a `/14` block in `10.0.0.0/8`.

        :param cluster_ipv4_cidr: The cluster_ipv4_cidr of this Cluster.
        :type cluster_ipv4_cidr: str
        """

        self._cluster_ipv4_cidr = cluster_ipv4_cidr

    @property
    def conditions(self):
        """Gets the conditions of this Cluster.

        Which conditions caused the current cluster state.

        :return: The conditions of this Cluster.
        :rtype: List[StatusCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this Cluster.

        Which conditions caused the current cluster state.

        :param conditions: The conditions of this Cluster.
        :type conditions: List[StatusCondition]
        """

        self._conditions = conditions

    @property
    def confidential_nodes(self):
        """Gets the confidential_nodes of this Cluster.


        :return: The confidential_nodes of this Cluster.
        :rtype: ConfidentialNodes
        """
        return self._confidential_nodes

    @confidential_nodes.setter
    def confidential_nodes(self, confidential_nodes):
        """Sets the confidential_nodes of this Cluster.


        :param confidential_nodes: The confidential_nodes of this Cluster.
        :type confidential_nodes: ConfidentialNodes
        """

        self._confidential_nodes = confidential_nodes

    @property
    def cost_management_config(self):
        """Gets the cost_management_config of this Cluster.


        :return: The cost_management_config of this Cluster.
        :rtype: CostManagementConfig
        """
        return self._cost_management_config

    @cost_management_config.setter
    def cost_management_config(self, cost_management_config):
        """Sets the cost_management_config of this Cluster.


        :param cost_management_config: The cost_management_config of this Cluster.
        :type cost_management_config: CostManagementConfig
        """

        self._cost_management_config = cost_management_config

    @property
    def create_time(self):
        """Gets the create_time of this Cluster.

        [Output only] The time the cluster was created, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.

        :return: The create_time of this Cluster.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Cluster.

        [Output only] The time the cluster was created, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.

        :param create_time: The create_time of this Cluster.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def current_master_version(self):
        """Gets the current_master_version of this Cluster.

        [Output only] The current software version of the master endpoint.

        :return: The current_master_version of this Cluster.
        :rtype: str
        """
        return self._current_master_version

    @current_master_version.setter
    def current_master_version(self, current_master_version):
        """Sets the current_master_version of this Cluster.

        [Output only] The current software version of the master endpoint.

        :param current_master_version: The current_master_version of this Cluster.
        :type current_master_version: str
        """

        self._current_master_version = current_master_version

    @property
    def current_node_count(self):
        """Gets the current_node_count of this Cluster.

        [Output only] The number of nodes currently in the cluster. Deprecated. Call Kubernetes API directly to retrieve node information.

        :return: The current_node_count of this Cluster.
        :rtype: int
        """
        return self._current_node_count

    @current_node_count.setter
    def current_node_count(self, current_node_count):
        """Sets the current_node_count of this Cluster.

        [Output only] The number of nodes currently in the cluster. Deprecated. Call Kubernetes API directly to retrieve node information.

        :param current_node_count: The current_node_count of this Cluster.
        :type current_node_count: int
        """

        self._current_node_count = current_node_count

    @property
    def current_node_version(self):
        """Gets the current_node_version of this Cluster.

        [Output only] Deprecated, use [NodePools.version](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools) instead. The current version of the node software components. If they are currently at multiple versions because they're in the process of being upgraded, this reflects the minimum version of all nodes.

        :return: The current_node_version of this Cluster.
        :rtype: str
        """
        return self._current_node_version

    @current_node_version.setter
    def current_node_version(self, current_node_version):
        """Sets the current_node_version of this Cluster.

        [Output only] Deprecated, use [NodePools.version](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools) instead. The current version of the node software components. If they are currently at multiple versions because they're in the process of being upgraded, this reflects the minimum version of all nodes.

        :param current_node_version: The current_node_version of this Cluster.
        :type current_node_version: str
        """

        self._current_node_version = current_node_version

    @property
    def database_encryption(self):
        """Gets the database_encryption of this Cluster.


        :return: The database_encryption of this Cluster.
        :rtype: DatabaseEncryption
        """
        return self._database_encryption

    @database_encryption.setter
    def database_encryption(self, database_encryption):
        """Sets the database_encryption of this Cluster.


        :param database_encryption: The database_encryption of this Cluster.
        :type database_encryption: DatabaseEncryption
        """

        self._database_encryption = database_encryption

    @property
    def default_max_pods_constraint(self):
        """Gets the default_max_pods_constraint of this Cluster.


        :return: The default_max_pods_constraint of this Cluster.
        :rtype: MaxPodsConstraint
        """
        return self._default_max_pods_constraint

    @default_max_pods_constraint.setter
    def default_max_pods_constraint(self, default_max_pods_constraint):
        """Sets the default_max_pods_constraint of this Cluster.


        :param default_max_pods_constraint: The default_max_pods_constraint of this Cluster.
        :type default_max_pods_constraint: MaxPodsConstraint
        """

        self._default_max_pods_constraint = default_max_pods_constraint

    @property
    def description(self):
        """Gets the description of this Cluster.

        An optional description of this cluster.

        :return: The description of this Cluster.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Cluster.

        An optional description of this cluster.

        :param description: The description of this Cluster.
        :type description: str
        """

        self._description = description

    @property
    def enable_k8s_beta_apis(self):
        """Gets the enable_k8s_beta_apis of this Cluster.


        :return: The enable_k8s_beta_apis of this Cluster.
        :rtype: K8sBetaAPIConfig
        """
        return self._enable_k8s_beta_apis

    @enable_k8s_beta_apis.setter
    def enable_k8s_beta_apis(self, enable_k8s_beta_apis):
        """Sets the enable_k8s_beta_apis of this Cluster.


        :param enable_k8s_beta_apis: The enable_k8s_beta_apis of this Cluster.
        :type enable_k8s_beta_apis: K8sBetaAPIConfig
        """

        self._enable_k8s_beta_apis = enable_k8s_beta_apis

    @property
    def enable_kubernetes_alpha(self):
        """Gets the enable_kubernetes_alpha of this Cluster.

        Kubernetes alpha features are enabled on this cluster. This includes alpha API groups (e.g. v1alpha1) and features that may not be production ready in the kubernetes version of the master and nodes. The cluster has no SLA for uptime and master/node upgrades are disabled. Alpha enabled clusters are automatically deleted thirty days after creation.

        :return: The enable_kubernetes_alpha of this Cluster.
        :rtype: bool
        """
        return self._enable_kubernetes_alpha

    @enable_kubernetes_alpha.setter
    def enable_kubernetes_alpha(self, enable_kubernetes_alpha):
        """Sets the enable_kubernetes_alpha of this Cluster.

        Kubernetes alpha features are enabled on this cluster. This includes alpha API groups (e.g. v1alpha1) and features that may not be production ready in the kubernetes version of the master and nodes. The cluster has no SLA for uptime and master/node upgrades are disabled. Alpha enabled clusters are automatically deleted thirty days after creation.

        :param enable_kubernetes_alpha: The enable_kubernetes_alpha of this Cluster.
        :type enable_kubernetes_alpha: bool
        """

        self._enable_kubernetes_alpha = enable_kubernetes_alpha

    @property
    def enable_tpu(self):
        """Gets the enable_tpu of this Cluster.

        Enable the ability to use Cloud TPUs in this cluster.

        :return: The enable_tpu of this Cluster.
        :rtype: bool
        """
        return self._enable_tpu

    @enable_tpu.setter
    def enable_tpu(self, enable_tpu):
        """Sets the enable_tpu of this Cluster.

        Enable the ability to use Cloud TPUs in this cluster.

        :param enable_tpu: The enable_tpu of this Cluster.
        :type enable_tpu: bool
        """

        self._enable_tpu = enable_tpu

    @property
    def endpoint(self):
        """Gets the endpoint of this Cluster.

        [Output only] The IP address of this cluster's master endpoint. The endpoint can be accessed from the internet at `https://username:password@endpoint/`. See the `masterAuth` property of this resource for username and password information.

        :return: The endpoint of this Cluster.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this Cluster.

        [Output only] The IP address of this cluster's master endpoint. The endpoint can be accessed from the internet at `https://username:password@endpoint/`. See the `masterAuth` property of this resource for username and password information.

        :param endpoint: The endpoint of this Cluster.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def enterprise_config(self):
        """Gets the enterprise_config of this Cluster.


        :return: The enterprise_config of this Cluster.
        :rtype: EnterpriseConfig
        """
        return self._enterprise_config

    @enterprise_config.setter
    def enterprise_config(self, enterprise_config):
        """Sets the enterprise_config of this Cluster.


        :param enterprise_config: The enterprise_config of this Cluster.
        :type enterprise_config: EnterpriseConfig
        """

        self._enterprise_config = enterprise_config

    @property
    def etag(self):
        """Gets the etag of this Cluster.

        This checksum is computed by the server based on the value of cluster fields, and may be sent on update requests to ensure the client has an up-to-date value before proceeding.

        :return: The etag of this Cluster.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Cluster.

        This checksum is computed by the server based on the value of cluster fields, and may be sent on update requests to ensure the client has an up-to-date value before proceeding.

        :param etag: The etag of this Cluster.
        :type etag: str
        """

        self._etag = etag

    @property
    def expire_time(self):
        """Gets the expire_time of this Cluster.

        [Output only] The time the cluster will be automatically deleted in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.

        :return: The expire_time of this Cluster.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this Cluster.

        [Output only] The time the cluster will be automatically deleted in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.

        :param expire_time: The expire_time of this Cluster.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def fleet(self):
        """Gets the fleet of this Cluster.


        :return: The fleet of this Cluster.
        :rtype: Fleet
        """
        return self._fleet

    @fleet.setter
    def fleet(self, fleet):
        """Sets the fleet of this Cluster.


        :param fleet: The fleet of this Cluster.
        :type fleet: Fleet
        """

        self._fleet = fleet

    @property
    def id(self):
        """Gets the id of this Cluster.

        Output only. Unique id for the cluster.

        :return: The id of this Cluster.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Cluster.

        Output only. Unique id for the cluster.

        :param id: The id of this Cluster.
        :type id: str
        """

        self._id = id

    @property
    def identity_service_config(self):
        """Gets the identity_service_config of this Cluster.


        :return: The identity_service_config of this Cluster.
        :rtype: IdentityServiceConfig
        """
        return self._identity_service_config

    @identity_service_config.setter
    def identity_service_config(self, identity_service_config):
        """Sets the identity_service_config of this Cluster.


        :param identity_service_config: The identity_service_config of this Cluster.
        :type identity_service_config: IdentityServiceConfig
        """

        self._identity_service_config = identity_service_config

    @property
    def initial_cluster_version(self):
        """Gets the initial_cluster_version of this Cluster.

        The initial Kubernetes version for this cluster. Valid versions are those found in validMasterVersions returned by getServerConfig. The version can be upgraded over time; such upgrades are reflected in currentMasterVersion and currentNodeVersion. Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - \"latest\": picks the highest valid Kubernetes version - \"1.X\": picks the highest valid patch+gke.N patch in the 1.X version - \"1.X.Y\": picks the highest valid gke.N patch in the 1.X.Y version - \"1.X.Y-gke.N\": picks an explicit Kubernetes version - \"\",\"-\": picks the default Kubernetes version

        :return: The initial_cluster_version of this Cluster.
        :rtype: str
        """
        return self._initial_cluster_version

    @initial_cluster_version.setter
    def initial_cluster_version(self, initial_cluster_version):
        """Sets the initial_cluster_version of this Cluster.

        The initial Kubernetes version for this cluster. Valid versions are those found in validMasterVersions returned by getServerConfig. The version can be upgraded over time; such upgrades are reflected in currentMasterVersion and currentNodeVersion. Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - \"latest\": picks the highest valid Kubernetes version - \"1.X\": picks the highest valid patch+gke.N patch in the 1.X version - \"1.X.Y\": picks the highest valid gke.N patch in the 1.X.Y version - \"1.X.Y-gke.N\": picks an explicit Kubernetes version - \"\",\"-\": picks the default Kubernetes version

        :param initial_cluster_version: The initial_cluster_version of this Cluster.
        :type initial_cluster_version: str
        """

        self._initial_cluster_version = initial_cluster_version

    @property
    def initial_node_count(self):
        """Gets the initial_node_count of this Cluster.

        The number of nodes to create in this cluster. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota. For requests, this field should only be used in lieu of a \"node_pool\" object, since this configuration (along with the \"node_config\") will be used to create a \"NodePool\" object with an auto-generated name. Do not use this and a node_pool at the same time. This field is deprecated, use node_pool.initial_node_count instead.

        :return: The initial_node_count of this Cluster.
        :rtype: int
        """
        return self._initial_node_count

    @initial_node_count.setter
    def initial_node_count(self, initial_node_count):
        """Sets the initial_node_count of this Cluster.

        The number of nodes to create in this cluster. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota. For requests, this field should only be used in lieu of a \"node_pool\" object, since this configuration (along with the \"node_config\") will be used to create a \"NodePool\" object with an auto-generated name. Do not use this and a node_pool at the same time. This field is deprecated, use node_pool.initial_node_count instead.

        :param initial_node_count: The initial_node_count of this Cluster.
        :type initial_node_count: int
        """

        self._initial_node_count = initial_node_count

    @property
    def instance_group_urls(self):
        """Gets the instance_group_urls of this Cluster.

        Deprecated. Use node_pools.instance_group_urls.

        :return: The instance_group_urls of this Cluster.
        :rtype: List[str]
        """
        return self._instance_group_urls

    @instance_group_urls.setter
    def instance_group_urls(self, instance_group_urls):
        """Sets the instance_group_urls of this Cluster.

        Deprecated. Use node_pools.instance_group_urls.

        :param instance_group_urls: The instance_group_urls of this Cluster.
        :type instance_group_urls: List[str]
        """

        self._instance_group_urls = instance_group_urls

    @property
    def ip_allocation_policy(self):
        """Gets the ip_allocation_policy of this Cluster.


        :return: The ip_allocation_policy of this Cluster.
        :rtype: IPAllocationPolicy
        """
        return self._ip_allocation_policy

    @ip_allocation_policy.setter
    def ip_allocation_policy(self, ip_allocation_policy):
        """Sets the ip_allocation_policy of this Cluster.


        :param ip_allocation_policy: The ip_allocation_policy of this Cluster.
        :type ip_allocation_policy: IPAllocationPolicy
        """

        self._ip_allocation_policy = ip_allocation_policy

    @property
    def label_fingerprint(self):
        """Gets the label_fingerprint of this Cluster.

        The fingerprint of the set of labels for this cluster.

        :return: The label_fingerprint of this Cluster.
        :rtype: str
        """
        return self._label_fingerprint

    @label_fingerprint.setter
    def label_fingerprint(self, label_fingerprint):
        """Sets the label_fingerprint of this Cluster.

        The fingerprint of the set of labels for this cluster.

        :param label_fingerprint: The label_fingerprint of this Cluster.
        :type label_fingerprint: str
        """

        self._label_fingerprint = label_fingerprint

    @property
    def legacy_abac(self):
        """Gets the legacy_abac of this Cluster.


        :return: The legacy_abac of this Cluster.
        :rtype: LegacyAbac
        """
        return self._legacy_abac

    @legacy_abac.setter
    def legacy_abac(self, legacy_abac):
        """Sets the legacy_abac of this Cluster.


        :param legacy_abac: The legacy_abac of this Cluster.
        :type legacy_abac: LegacyAbac
        """

        self._legacy_abac = legacy_abac

    @property
    def location(self):
        """Gets the location of this Cluster.

        [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides.

        :return: The location of this Cluster.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Cluster.

        [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides.

        :param location: The location of this Cluster.
        :type location: str
        """

        self._location = location

    @property
    def locations(self):
        """Gets the locations of this Cluster.

        The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the cluster's nodes should be located. This field provides a default value if [NodePool.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations) are not specified during node pool creation. Warning: changing cluster locations will update the [NodePool.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations) of all node pools and will result in nodes being added and/or removed.

        :return: The locations of this Cluster.
        :rtype: List[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this Cluster.

        The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the cluster's nodes should be located. This field provides a default value if [NodePool.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations) are not specified during node pool creation. Warning: changing cluster locations will update the [NodePool.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations) of all node pools and will result in nodes being added and/or removed.

        :param locations: The locations of this Cluster.
        :type locations: List[str]
        """

        self._locations = locations

    @property
    def logging_config(self):
        """Gets the logging_config of this Cluster.


        :return: The logging_config of this Cluster.
        :rtype: LoggingConfig
        """
        return self._logging_config

    @logging_config.setter
    def logging_config(self, logging_config):
        """Sets the logging_config of this Cluster.


        :param logging_config: The logging_config of this Cluster.
        :type logging_config: LoggingConfig
        """

        self._logging_config = logging_config

    @property
    def logging_service(self):
        """Gets the logging_service of this Cluster.

        The logging service the cluster should use to write logs. Currently available options: * `logging.googleapis.com/kubernetes` - The Cloud Logging service with a Kubernetes-native resource model * `logging.googleapis.com` - The legacy Cloud Logging service (no longer available as of GKE 1.15). * `none` - no logs will be exported from the cluster. If left as an empty string,`logging.googleapis.com/kubernetes` will be used for GKE 1.14+ or `logging.googleapis.com` for earlier versions.

        :return: The logging_service of this Cluster.
        :rtype: str
        """
        return self._logging_service

    @logging_service.setter
    def logging_service(self, logging_service):
        """Sets the logging_service of this Cluster.

        The logging service the cluster should use to write logs. Currently available options: * `logging.googleapis.com/kubernetes` - The Cloud Logging service with a Kubernetes-native resource model * `logging.googleapis.com` - The legacy Cloud Logging service (no longer available as of GKE 1.15). * `none` - no logs will be exported from the cluster. If left as an empty string,`logging.googleapis.com/kubernetes` will be used for GKE 1.14+ or `logging.googleapis.com` for earlier versions.

        :param logging_service: The logging_service of this Cluster.
        :type logging_service: str
        """

        self._logging_service = logging_service

    @property
    def maintenance_policy(self):
        """Gets the maintenance_policy of this Cluster.


        :return: The maintenance_policy of this Cluster.
        :rtype: MaintenancePolicy
        """
        return self._maintenance_policy

    @maintenance_policy.setter
    def maintenance_policy(self, maintenance_policy):
        """Sets the maintenance_policy of this Cluster.


        :param maintenance_policy: The maintenance_policy of this Cluster.
        :type maintenance_policy: MaintenancePolicy
        """

        self._maintenance_policy = maintenance_policy

    @property
    def master_auth(self):
        """Gets the master_auth of this Cluster.


        :return: The master_auth of this Cluster.
        :rtype: MasterAuth
        """
        return self._master_auth

    @master_auth.setter
    def master_auth(self, master_auth):
        """Sets the master_auth of this Cluster.


        :param master_auth: The master_auth of this Cluster.
        :type master_auth: MasterAuth
        """

        self._master_auth = master_auth

    @property
    def master_authorized_networks_config(self):
        """Gets the master_authorized_networks_config of this Cluster.


        :return: The master_authorized_networks_config of this Cluster.
        :rtype: MasterAuthorizedNetworksConfig
        """
        return self._master_authorized_networks_config

    @master_authorized_networks_config.setter
    def master_authorized_networks_config(self, master_authorized_networks_config):
        """Sets the master_authorized_networks_config of this Cluster.


        :param master_authorized_networks_config: The master_authorized_networks_config of this Cluster.
        :type master_authorized_networks_config: MasterAuthorizedNetworksConfig
        """

        self._master_authorized_networks_config = master_authorized_networks_config

    @property
    def mesh_certificates(self):
        """Gets the mesh_certificates of this Cluster.


        :return: The mesh_certificates of this Cluster.
        :rtype: MeshCertificates
        """
        return self._mesh_certificates

    @mesh_certificates.setter
    def mesh_certificates(self, mesh_certificates):
        """Sets the mesh_certificates of this Cluster.


        :param mesh_certificates: The mesh_certificates of this Cluster.
        :type mesh_certificates: MeshCertificates
        """

        self._mesh_certificates = mesh_certificates

    @property
    def monitoring_config(self):
        """Gets the monitoring_config of this Cluster.


        :return: The monitoring_config of this Cluster.
        :rtype: MonitoringConfig
        """
        return self._monitoring_config

    @monitoring_config.setter
    def monitoring_config(self, monitoring_config):
        """Sets the monitoring_config of this Cluster.


        :param monitoring_config: The monitoring_config of this Cluster.
        :type monitoring_config: MonitoringConfig
        """

        self._monitoring_config = monitoring_config

    @property
    def monitoring_service(self):
        """Gets the monitoring_service of this Cluster.

        The monitoring service the cluster should use to write metrics. Currently available options: * \"monitoring.googleapis.com/kubernetes\" - The Cloud Monitoring service with a Kubernetes-native resource model * `monitoring.googleapis.com` - The legacy Cloud Monitoring service (no longer available as of GKE 1.15). * `none` - No metrics will be exported from the cluster. If left as an empty string,`monitoring.googleapis.com/kubernetes` will be used for GKE 1.14+ or `monitoring.googleapis.com` for earlier versions.

        :return: The monitoring_service of this Cluster.
        :rtype: str
        """
        return self._monitoring_service

    @monitoring_service.setter
    def monitoring_service(self, monitoring_service):
        """Sets the monitoring_service of this Cluster.

        The monitoring service the cluster should use to write metrics. Currently available options: * \"monitoring.googleapis.com/kubernetes\" - The Cloud Monitoring service with a Kubernetes-native resource model * `monitoring.googleapis.com` - The legacy Cloud Monitoring service (no longer available as of GKE 1.15). * `none` - No metrics will be exported from the cluster. If left as an empty string,`monitoring.googleapis.com/kubernetes` will be used for GKE 1.14+ or `monitoring.googleapis.com` for earlier versions.

        :param monitoring_service: The monitoring_service of this Cluster.
        :type monitoring_service: str
        """

        self._monitoring_service = monitoring_service

    @property
    def name(self):
        """Gets the name of this Cluster.

        The name of this cluster. The name must be unique within this project and location (e.g. zone or region), and can be up to 40 characters with the following restrictions: * Lowercase letters, numbers, and hyphens only. * Must start with a letter. * Must end with a number or a letter.

        :return: The name of this Cluster.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cluster.

        The name of this cluster. The name must be unique within this project and location (e.g. zone or region), and can be up to 40 characters with the following restrictions: * Lowercase letters, numbers, and hyphens only. * Must start with a letter. * Must end with a number or a letter.

        :param name: The name of this Cluster.
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this Cluster.

        The name of the Google Compute Engine [network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. If left unspecified, the `default` network will be used.

        :return: The network of this Cluster.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Cluster.

        The name of the Google Compute Engine [network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. If left unspecified, the `default` network will be used.

        :param network: The network of this Cluster.
        :type network: str
        """

        self._network = network

    @property
    def network_config(self):
        """Gets the network_config of this Cluster.


        :return: The network_config of this Cluster.
        :rtype: NetworkConfig
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config):
        """Sets the network_config of this Cluster.


        :param network_config: The network_config of this Cluster.
        :type network_config: NetworkConfig
        """

        self._network_config = network_config

    @property
    def network_policy(self):
        """Gets the network_policy of this Cluster.


        :return: The network_policy of this Cluster.
        :rtype: NetworkPolicy
        """
        return self._network_policy

    @network_policy.setter
    def network_policy(self, network_policy):
        """Sets the network_policy of this Cluster.


        :param network_policy: The network_policy of this Cluster.
        :type network_policy: NetworkPolicy
        """

        self._network_policy = network_policy

    @property
    def node_config(self):
        """Gets the node_config of this Cluster.


        :return: The node_config of this Cluster.
        :rtype: NodeConfig
        """
        return self._node_config

    @node_config.setter
    def node_config(self, node_config):
        """Sets the node_config of this Cluster.


        :param node_config: The node_config of this Cluster.
        :type node_config: NodeConfig
        """

        self._node_config = node_config

    @property
    def node_ipv4_cidr_size(self):
        """Gets the node_ipv4_cidr_size of this Cluster.

        [Output only] The size of the address space on each node for hosting containers. This is provisioned from within the `container_ipv4_cidr` range. This field will only be set when cluster is in route-based network mode.

        :return: The node_ipv4_cidr_size of this Cluster.
        :rtype: int
        """
        return self._node_ipv4_cidr_size

    @node_ipv4_cidr_size.setter
    def node_ipv4_cidr_size(self, node_ipv4_cidr_size):
        """Sets the node_ipv4_cidr_size of this Cluster.

        [Output only] The size of the address space on each node for hosting containers. This is provisioned from within the `container_ipv4_cidr` range. This field will only be set when cluster is in route-based network mode.

        :param node_ipv4_cidr_size: The node_ipv4_cidr_size of this Cluster.
        :type node_ipv4_cidr_size: int
        """

        self._node_ipv4_cidr_size = node_ipv4_cidr_size

    @property
    def node_pool_auto_config(self):
        """Gets the node_pool_auto_config of this Cluster.


        :return: The node_pool_auto_config of this Cluster.
        :rtype: NodePoolAutoConfig
        """
        return self._node_pool_auto_config

    @node_pool_auto_config.setter
    def node_pool_auto_config(self, node_pool_auto_config):
        """Sets the node_pool_auto_config of this Cluster.


        :param node_pool_auto_config: The node_pool_auto_config of this Cluster.
        :type node_pool_auto_config: NodePoolAutoConfig
        """

        self._node_pool_auto_config = node_pool_auto_config

    @property
    def node_pool_defaults(self):
        """Gets the node_pool_defaults of this Cluster.


        :return: The node_pool_defaults of this Cluster.
        :rtype: NodePoolDefaults
        """
        return self._node_pool_defaults

    @node_pool_defaults.setter
    def node_pool_defaults(self, node_pool_defaults):
        """Sets the node_pool_defaults of this Cluster.


        :param node_pool_defaults: The node_pool_defaults of this Cluster.
        :type node_pool_defaults: NodePoolDefaults
        """

        self._node_pool_defaults = node_pool_defaults

    @property
    def node_pools(self):
        """Gets the node_pools of this Cluster.

        The node pools associated with this cluster. This field should not be set if \"node_config\" or \"initial_node_count\" are specified.

        :return: The node_pools of this Cluster.
        :rtype: List[NodePool]
        """
        return self._node_pools

    @node_pools.setter
    def node_pools(self, node_pools):
        """Sets the node_pools of this Cluster.

        The node pools associated with this cluster. This field should not be set if \"node_config\" or \"initial_node_count\" are specified.

        :param node_pools: The node_pools of this Cluster.
        :type node_pools: List[NodePool]
        """

        self._node_pools = node_pools

    @property
    def notification_config(self):
        """Gets the notification_config of this Cluster.


        :return: The notification_config of this Cluster.
        :rtype: NotificationConfig
        """
        return self._notification_config

    @notification_config.setter
    def notification_config(self, notification_config):
        """Sets the notification_config of this Cluster.


        :param notification_config: The notification_config of this Cluster.
        :type notification_config: NotificationConfig
        """

        self._notification_config = notification_config

    @property
    def parent_product_config(self):
        """Gets the parent_product_config of this Cluster.


        :return: The parent_product_config of this Cluster.
        :rtype: ParentProductConfig
        """
        return self._parent_product_config

    @parent_product_config.setter
    def parent_product_config(self, parent_product_config):
        """Sets the parent_product_config of this Cluster.


        :param parent_product_config: The parent_product_config of this Cluster.
        :type parent_product_config: ParentProductConfig
        """

        self._parent_product_config = parent_product_config

    @property
    def private_cluster_config(self):
        """Gets the private_cluster_config of this Cluster.


        :return: The private_cluster_config of this Cluster.
        :rtype: PrivateClusterConfig
        """
        return self._private_cluster_config

    @private_cluster_config.setter
    def private_cluster_config(self, private_cluster_config):
        """Sets the private_cluster_config of this Cluster.


        :param private_cluster_config: The private_cluster_config of this Cluster.
        :type private_cluster_config: PrivateClusterConfig
        """

        self._private_cluster_config = private_cluster_config

    @property
    def release_channel(self):
        """Gets the release_channel of this Cluster.


        :return: The release_channel of this Cluster.
        :rtype: ReleaseChannel
        """
        return self._release_channel

    @release_channel.setter
    def release_channel(self, release_channel):
        """Sets the release_channel of this Cluster.


        :param release_channel: The release_channel of this Cluster.
        :type release_channel: ReleaseChannel
        """

        self._release_channel = release_channel

    @property
    def resource_labels(self):
        """Gets the resource_labels of this Cluster.

        The resource labels for the cluster to use to annotate any related Google Compute Engine resources.

        :return: The resource_labels of this Cluster.
        :rtype: Dict[str, str]
        """
        return self._resource_labels

    @resource_labels.setter
    def resource_labels(self, resource_labels):
        """Sets the resource_labels of this Cluster.

        The resource labels for the cluster to use to annotate any related Google Compute Engine resources.

        :param resource_labels: The resource_labels of this Cluster.
        :type resource_labels: Dict[str, str]
        """

        self._resource_labels = resource_labels

    @property
    def resource_usage_export_config(self):
        """Gets the resource_usage_export_config of this Cluster.


        :return: The resource_usage_export_config of this Cluster.
        :rtype: ResourceUsageExportConfig
        """
        return self._resource_usage_export_config

    @resource_usage_export_config.setter
    def resource_usage_export_config(self, resource_usage_export_config):
        """Sets the resource_usage_export_config of this Cluster.


        :param resource_usage_export_config: The resource_usage_export_config of this Cluster.
        :type resource_usage_export_config: ResourceUsageExportConfig
        """

        self._resource_usage_export_config = resource_usage_export_config

    @property
    def security_posture_config(self):
        """Gets the security_posture_config of this Cluster.


        :return: The security_posture_config of this Cluster.
        :rtype: SecurityPostureConfig
        """
        return self._security_posture_config

    @security_posture_config.setter
    def security_posture_config(self, security_posture_config):
        """Sets the security_posture_config of this Cluster.


        :param security_posture_config: The security_posture_config of this Cluster.
        :type security_posture_config: SecurityPostureConfig
        """

        self._security_posture_config = security_posture_config

    @property
    def self_link(self):
        """Gets the self_link of this Cluster.

        [Output only] Server-defined URL for the resource.

        :return: The self_link of this Cluster.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Cluster.

        [Output only] Server-defined URL for the resource.

        :param self_link: The self_link of this Cluster.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def services_ipv4_cidr(self):
        """Gets the services_ipv4_cidr of this Cluster.

        [Output only] The IP address range of the Kubernetes services in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `1.2.3.4/29`). Service addresses are typically put in the last `/16` from the container CIDR.

        :return: The services_ipv4_cidr of this Cluster.
        :rtype: str
        """
        return self._services_ipv4_cidr

    @services_ipv4_cidr.setter
    def services_ipv4_cidr(self, services_ipv4_cidr):
        """Sets the services_ipv4_cidr of this Cluster.

        [Output only] The IP address range of the Kubernetes services in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `1.2.3.4/29`). Service addresses are typically put in the last `/16` from the container CIDR.

        :param services_ipv4_cidr: The services_ipv4_cidr of this Cluster.
        :type services_ipv4_cidr: str
        """

        self._services_ipv4_cidr = services_ipv4_cidr

    @property
    def shielded_nodes(self):
        """Gets the shielded_nodes of this Cluster.


        :return: The shielded_nodes of this Cluster.
        :rtype: ShieldedNodes
        """
        return self._shielded_nodes

    @shielded_nodes.setter
    def shielded_nodes(self, shielded_nodes):
        """Sets the shielded_nodes of this Cluster.


        :param shielded_nodes: The shielded_nodes of this Cluster.
        :type shielded_nodes: ShieldedNodes
        """

        self._shielded_nodes = shielded_nodes

    @property
    def status(self):
        """Gets the status of this Cluster.

        [Output only] The current status of this cluster.

        :return: The status of this Cluster.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Cluster.

        [Output only] The current status of this cluster.

        :param status: The status of this Cluster.
        :type status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "PROVISIONING", "RUNNING", "RECONCILING", "STOPPING", "ERROR", "DEGRADED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this Cluster.

        [Output only] Deprecated. Use conditions instead. Additional information about the current status of this cluster, if available.

        :return: The status_message of this Cluster.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this Cluster.

        [Output only] Deprecated. Use conditions instead. Additional information about the current status of this cluster, if available.

        :param status_message: The status_message of this Cluster.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def subnetwork(self):
        """Gets the subnetwork of this Cluster.

        The name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/subnetworks) to which the cluster is connected.

        :return: The subnetwork of this Cluster.
        :rtype: str
        """
        return self._subnetwork

    @subnetwork.setter
    def subnetwork(self, subnetwork):
        """Sets the subnetwork of this Cluster.

        The name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/subnetworks) to which the cluster is connected.

        :param subnetwork: The subnetwork of this Cluster.
        :type subnetwork: str
        """

        self._subnetwork = subnetwork

    @property
    def tpu_ipv4_cidr_block(self):
        """Gets the tpu_ipv4_cidr_block of this Cluster.

        [Output only] The IP address range of the Cloud TPUs in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `1.2.3.4/29`).

        :return: The tpu_ipv4_cidr_block of this Cluster.
        :rtype: str
        """
        return self._tpu_ipv4_cidr_block

    @tpu_ipv4_cidr_block.setter
    def tpu_ipv4_cidr_block(self, tpu_ipv4_cidr_block):
        """Sets the tpu_ipv4_cidr_block of this Cluster.

        [Output only] The IP address range of the Cloud TPUs in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `1.2.3.4/29`).

        :param tpu_ipv4_cidr_block: The tpu_ipv4_cidr_block of this Cluster.
        :type tpu_ipv4_cidr_block: str
        """

        self._tpu_ipv4_cidr_block = tpu_ipv4_cidr_block

    @property
    def vertical_pod_autoscaling(self):
        """Gets the vertical_pod_autoscaling of this Cluster.


        :return: The vertical_pod_autoscaling of this Cluster.
        :rtype: VerticalPodAutoscaling
        """
        return self._vertical_pod_autoscaling

    @vertical_pod_autoscaling.setter
    def vertical_pod_autoscaling(self, vertical_pod_autoscaling):
        """Sets the vertical_pod_autoscaling of this Cluster.


        :param vertical_pod_autoscaling: The vertical_pod_autoscaling of this Cluster.
        :type vertical_pod_autoscaling: VerticalPodAutoscaling
        """

        self._vertical_pod_autoscaling = vertical_pod_autoscaling

    @property
    def workload_identity_config(self):
        """Gets the workload_identity_config of this Cluster.


        :return: The workload_identity_config of this Cluster.
        :rtype: WorkloadIdentityConfig
        """
        return self._workload_identity_config

    @workload_identity_config.setter
    def workload_identity_config(self, workload_identity_config):
        """Sets the workload_identity_config of this Cluster.


        :param workload_identity_config: The workload_identity_config of this Cluster.
        :type workload_identity_config: WorkloadIdentityConfig
        """

        self._workload_identity_config = workload_identity_config

    @property
    def zone(self):
        """Gets the zone of this Cluster.

        [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field is deprecated, use location instead.

        :return: The zone of this Cluster.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this Cluster.

        [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field is deprecated, use location instead.

        :param zone: The zone of this Cluster.
        :type zone: str
        """

        self._zone = zone
