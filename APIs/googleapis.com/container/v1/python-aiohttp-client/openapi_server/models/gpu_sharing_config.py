# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GPUSharingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gpu_sharing_strategy: str=None, max_shared_clients_per_gpu: str=None):
        """GPUSharingConfig - a model defined in OpenAPI

        :param gpu_sharing_strategy: The gpu_sharing_strategy of this GPUSharingConfig.
        :param max_shared_clients_per_gpu: The max_shared_clients_per_gpu of this GPUSharingConfig.
        """
        self.openapi_types = {
            'gpu_sharing_strategy': str,
            'max_shared_clients_per_gpu': str
        }

        self.attribute_map = {
            'gpu_sharing_strategy': 'gpuSharingStrategy',
            'max_shared_clients_per_gpu': 'maxSharedClientsPerGpu'
        }

        self._gpu_sharing_strategy = gpu_sharing_strategy
        self._max_shared_clients_per_gpu = max_shared_clients_per_gpu

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GPUSharingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GPUSharingConfig of this GPUSharingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gpu_sharing_strategy(self):
        """Gets the gpu_sharing_strategy of this GPUSharingConfig.

        The type of GPU sharing strategy to enable on the GPU node.

        :return: The gpu_sharing_strategy of this GPUSharingConfig.
        :rtype: str
        """
        return self._gpu_sharing_strategy

    @gpu_sharing_strategy.setter
    def gpu_sharing_strategy(self, gpu_sharing_strategy):
        """Sets the gpu_sharing_strategy of this GPUSharingConfig.

        The type of GPU sharing strategy to enable on the GPU node.

        :param gpu_sharing_strategy: The gpu_sharing_strategy of this GPUSharingConfig.
        :type gpu_sharing_strategy: str
        """
        allowed_values = ["GPU_SHARING_STRATEGY_UNSPECIFIED", "TIME_SHARING"]  # noqa: E501
        if gpu_sharing_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `gpu_sharing_strategy` ({0}), must be one of {1}"
                .format(gpu_sharing_strategy, allowed_values)
            )

        self._gpu_sharing_strategy = gpu_sharing_strategy

    @property
    def max_shared_clients_per_gpu(self):
        """Gets the max_shared_clients_per_gpu of this GPUSharingConfig.

        The max number of containers that can share a physical GPU.

        :return: The max_shared_clients_per_gpu of this GPUSharingConfig.
        :rtype: str
        """
        return self._max_shared_clients_per_gpu

    @max_shared_clients_per_gpu.setter
    def max_shared_clients_per_gpu(self, max_shared_clients_per_gpu):
        """Sets the max_shared_clients_per_gpu of this GPUSharingConfig.

        The max number of containers that can share a physical GPU.

        :param max_shared_clients_per_gpu: The max_shared_clients_per_gpu of this GPUSharingConfig.
        :type max_shared_clients_per_gpu: str
        """

        self._max_shared_clients_per_gpu = max_shared_clients_per_gpu
