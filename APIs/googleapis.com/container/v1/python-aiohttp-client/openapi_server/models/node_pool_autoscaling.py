# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodePoolAutoscaling(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autoprovisioned: bool=None, enabled: bool=None, location_policy: str=None, max_node_count: int=None, min_node_count: int=None, total_max_node_count: int=None, total_min_node_count: int=None):
        """NodePoolAutoscaling - a model defined in OpenAPI

        :param autoprovisioned: The autoprovisioned of this NodePoolAutoscaling.
        :param enabled: The enabled of this NodePoolAutoscaling.
        :param location_policy: The location_policy of this NodePoolAutoscaling.
        :param max_node_count: The max_node_count of this NodePoolAutoscaling.
        :param min_node_count: The min_node_count of this NodePoolAutoscaling.
        :param total_max_node_count: The total_max_node_count of this NodePoolAutoscaling.
        :param total_min_node_count: The total_min_node_count of this NodePoolAutoscaling.
        """
        self.openapi_types = {
            'autoprovisioned': bool,
            'enabled': bool,
            'location_policy': str,
            'max_node_count': int,
            'min_node_count': int,
            'total_max_node_count': int,
            'total_min_node_count': int
        }

        self.attribute_map = {
            'autoprovisioned': 'autoprovisioned',
            'enabled': 'enabled',
            'location_policy': 'locationPolicy',
            'max_node_count': 'maxNodeCount',
            'min_node_count': 'minNodeCount',
            'total_max_node_count': 'totalMaxNodeCount',
            'total_min_node_count': 'totalMinNodeCount'
        }

        self._autoprovisioned = autoprovisioned
        self._enabled = enabled
        self._location_policy = location_policy
        self._max_node_count = max_node_count
        self._min_node_count = min_node_count
        self._total_max_node_count = total_max_node_count
        self._total_min_node_count = total_min_node_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodePoolAutoscaling':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodePoolAutoscaling of this NodePoolAutoscaling.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autoprovisioned(self):
        """Gets the autoprovisioned of this NodePoolAutoscaling.

        Can this node pool be deleted automatically.

        :return: The autoprovisioned of this NodePoolAutoscaling.
        :rtype: bool
        """
        return self._autoprovisioned

    @autoprovisioned.setter
    def autoprovisioned(self, autoprovisioned):
        """Sets the autoprovisioned of this NodePoolAutoscaling.

        Can this node pool be deleted automatically.

        :param autoprovisioned: The autoprovisioned of this NodePoolAutoscaling.
        :type autoprovisioned: bool
        """

        self._autoprovisioned = autoprovisioned

    @property
    def enabled(self):
        """Gets the enabled of this NodePoolAutoscaling.

        Is autoscaling enabled for this node pool.

        :return: The enabled of this NodePoolAutoscaling.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this NodePoolAutoscaling.

        Is autoscaling enabled for this node pool.

        :param enabled: The enabled of this NodePoolAutoscaling.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def location_policy(self):
        """Gets the location_policy of this NodePoolAutoscaling.

        Location policy used when scaling up a nodepool.

        :return: The location_policy of this NodePoolAutoscaling.
        :rtype: str
        """
        return self._location_policy

    @location_policy.setter
    def location_policy(self, location_policy):
        """Sets the location_policy of this NodePoolAutoscaling.

        Location policy used when scaling up a nodepool.

        :param location_policy: The location_policy of this NodePoolAutoscaling.
        :type location_policy: str
        """
        allowed_values = ["LOCATION_POLICY_UNSPECIFIED", "BALANCED", "ANY"]  # noqa: E501
        if location_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `location_policy` ({0}), must be one of {1}"
                .format(location_policy, allowed_values)
            )

        self._location_policy = location_policy

    @property
    def max_node_count(self):
        """Gets the max_node_count of this NodePoolAutoscaling.

        Maximum number of nodes for one location in the NodePool. Must be >= min_node_count. There has to be enough quota to scale up the cluster.

        :return: The max_node_count of this NodePoolAutoscaling.
        :rtype: int
        """
        return self._max_node_count

    @max_node_count.setter
    def max_node_count(self, max_node_count):
        """Sets the max_node_count of this NodePoolAutoscaling.

        Maximum number of nodes for one location in the NodePool. Must be >= min_node_count. There has to be enough quota to scale up the cluster.

        :param max_node_count: The max_node_count of this NodePoolAutoscaling.
        :type max_node_count: int
        """

        self._max_node_count = max_node_count

    @property
    def min_node_count(self):
        """Gets the min_node_count of this NodePoolAutoscaling.

        Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= max_node_count.

        :return: The min_node_count of this NodePoolAutoscaling.
        :rtype: int
        """
        return self._min_node_count

    @min_node_count.setter
    def min_node_count(self, min_node_count):
        """Sets the min_node_count of this NodePoolAutoscaling.

        Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= max_node_count.

        :param min_node_count: The min_node_count of this NodePoolAutoscaling.
        :type min_node_count: int
        """

        self._min_node_count = min_node_count

    @property
    def total_max_node_count(self):
        """Gets the total_max_node_count of this NodePoolAutoscaling.

        Maximum number of nodes in the node pool. Must be greater than total_min_node_count. There has to be enough quota to scale up the cluster. The total_*_node_count fields are mutually exclusive with the *_node_count fields.

        :return: The total_max_node_count of this NodePoolAutoscaling.
        :rtype: int
        """
        return self._total_max_node_count

    @total_max_node_count.setter
    def total_max_node_count(self, total_max_node_count):
        """Sets the total_max_node_count of this NodePoolAutoscaling.

        Maximum number of nodes in the node pool. Must be greater than total_min_node_count. There has to be enough quota to scale up the cluster. The total_*_node_count fields are mutually exclusive with the *_node_count fields.

        :param total_max_node_count: The total_max_node_count of this NodePoolAutoscaling.
        :type total_max_node_count: int
        """

        self._total_max_node_count = total_max_node_count

    @property
    def total_min_node_count(self):
        """Gets the total_min_node_count of this NodePoolAutoscaling.

        Minimum number of nodes in the node pool. Must be greater than 1 less than total_max_node_count. The total_*_node_count fields are mutually exclusive with the *_node_count fields.

        :return: The total_min_node_count of this NodePoolAutoscaling.
        :rtype: int
        """
        return self._total_min_node_count

    @total_min_node_count.setter
    def total_min_node_count(self, total_min_node_count):
        """Sets the total_min_node_count of this NodePoolAutoscaling.

        Minimum number of nodes in the node pool. Must be greater than 1 less than total_max_node_count. The total_*_node_count fields are mutually exclusive with the *_node_count fields.

        :param total_min_node_count: The total_min_node_count of this NodePoolAutoscaling.
        :type total_min_node_count: int
        """

        self._total_min_node_count = total_min_node_count
