# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MaxPodsConstraint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_pods_per_node: str=None):
        """MaxPodsConstraint - a model defined in OpenAPI

        :param max_pods_per_node: The max_pods_per_node of this MaxPodsConstraint.
        """
        self.openapi_types = {
            'max_pods_per_node': str
        }

        self.attribute_map = {
            'max_pods_per_node': 'maxPodsPerNode'
        }

        self._max_pods_per_node = max_pods_per_node

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MaxPodsConstraint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MaxPodsConstraint of this MaxPodsConstraint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_pods_per_node(self):
        """Gets the max_pods_per_node of this MaxPodsConstraint.

        Constraint enforced on the max num of pods per node.

        :return: The max_pods_per_node of this MaxPodsConstraint.
        :rtype: str
        """
        return self._max_pods_per_node

    @max_pods_per_node.setter
    def max_pods_per_node(self, max_pods_per_node):
        """Sets the max_pods_per_node of this MaxPodsConstraint.

        Constraint enforced on the max num of pods per node.

        :param max_pods_per_node: The max_pods_per_node of this MaxPodsConstraint.
        :type max_pods_per_node: str
        """

        self._max_pods_per_node = max_pods_per_node
