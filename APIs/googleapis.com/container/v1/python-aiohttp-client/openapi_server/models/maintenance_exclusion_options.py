# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MaintenanceExclusionOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scope: str=None):
        """MaintenanceExclusionOptions - a model defined in OpenAPI

        :param scope: The scope of this MaintenanceExclusionOptions.
        """
        self.openapi_types = {
            'scope': str
        }

        self.attribute_map = {
            'scope': 'scope'
        }

        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MaintenanceExclusionOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MaintenanceExclusionOptions of this MaintenanceExclusionOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scope(self):
        """Gets the scope of this MaintenanceExclusionOptions.

        Scope specifies the upgrade scope which upgrades are blocked by the exclusion.

        :return: The scope of this MaintenanceExclusionOptions.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this MaintenanceExclusionOptions.

        Scope specifies the upgrade scope which upgrades are blocked by the exclusion.

        :param scope: The scope of this MaintenanceExclusionOptions.
        :type scope: str
        """
        allowed_values = ["NO_UPGRADES", "NO_MINOR_UPGRADES", "NO_MINOR_OR_NODE_UPGRADES"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope
