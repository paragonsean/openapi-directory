# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DNSConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_dns: str=None, cluster_dns_domain: str=None, cluster_dns_scope: str=None):
        """DNSConfig - a model defined in OpenAPI

        :param cluster_dns: The cluster_dns of this DNSConfig.
        :param cluster_dns_domain: The cluster_dns_domain of this DNSConfig.
        :param cluster_dns_scope: The cluster_dns_scope of this DNSConfig.
        """
        self.openapi_types = {
            'cluster_dns': str,
            'cluster_dns_domain': str,
            'cluster_dns_scope': str
        }

        self.attribute_map = {
            'cluster_dns': 'clusterDns',
            'cluster_dns_domain': 'clusterDnsDomain',
            'cluster_dns_scope': 'clusterDnsScope'
        }

        self._cluster_dns = cluster_dns
        self._cluster_dns_domain = cluster_dns_domain
        self._cluster_dns_scope = cluster_dns_scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DNSConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DNSConfig of this DNSConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_dns(self):
        """Gets the cluster_dns of this DNSConfig.

        cluster_dns indicates which in-cluster DNS provider should be used.

        :return: The cluster_dns of this DNSConfig.
        :rtype: str
        """
        return self._cluster_dns

    @cluster_dns.setter
    def cluster_dns(self, cluster_dns):
        """Sets the cluster_dns of this DNSConfig.

        cluster_dns indicates which in-cluster DNS provider should be used.

        :param cluster_dns: The cluster_dns of this DNSConfig.
        :type cluster_dns: str
        """
        allowed_values = ["PROVIDER_UNSPECIFIED", "PLATFORM_DEFAULT", "CLOUD_DNS", "KUBE_DNS"]  # noqa: E501
        if cluster_dns not in allowed_values:
            raise ValueError(
                "Invalid value for `cluster_dns` ({0}), must be one of {1}"
                .format(cluster_dns, allowed_values)
            )

        self._cluster_dns = cluster_dns

    @property
    def cluster_dns_domain(self):
        """Gets the cluster_dns_domain of this DNSConfig.

        cluster_dns_domain is the suffix used for all cluster service records.

        :return: The cluster_dns_domain of this DNSConfig.
        :rtype: str
        """
        return self._cluster_dns_domain

    @cluster_dns_domain.setter
    def cluster_dns_domain(self, cluster_dns_domain):
        """Sets the cluster_dns_domain of this DNSConfig.

        cluster_dns_domain is the suffix used for all cluster service records.

        :param cluster_dns_domain: The cluster_dns_domain of this DNSConfig.
        :type cluster_dns_domain: str
        """

        self._cluster_dns_domain = cluster_dns_domain

    @property
    def cluster_dns_scope(self):
        """Gets the cluster_dns_scope of this DNSConfig.

        cluster_dns_scope indicates the scope of access to cluster DNS records.

        :return: The cluster_dns_scope of this DNSConfig.
        :rtype: str
        """
        return self._cluster_dns_scope

    @cluster_dns_scope.setter
    def cluster_dns_scope(self, cluster_dns_scope):
        """Sets the cluster_dns_scope of this DNSConfig.

        cluster_dns_scope indicates the scope of access to cluster DNS records.

        :param cluster_dns_scope: The cluster_dns_scope of this DNSConfig.
        :type cluster_dns_scope: str
        """
        allowed_values = ["DNS_SCOPE_UNSPECIFIED", "CLUSTER_SCOPE", "VPC_SCOPE"]  # noqa: E501
        if cluster_dns_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `cluster_dns_scope` ({0}), must be one of {1}"
                .format(cluster_dns_scope, allowed_values)
            )

        self._cluster_dns_scope = cluster_dns_scope
