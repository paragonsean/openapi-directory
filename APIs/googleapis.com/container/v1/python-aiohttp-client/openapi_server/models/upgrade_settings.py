# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.blue_green_settings import BlueGreenSettings
from openapi_server import util


class UpgradeSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blue_green_settings: BlueGreenSettings=None, max_surge: int=None, max_unavailable: int=None, strategy: str=None):
        """UpgradeSettings - a model defined in OpenAPI

        :param blue_green_settings: The blue_green_settings of this UpgradeSettings.
        :param max_surge: The max_surge of this UpgradeSettings.
        :param max_unavailable: The max_unavailable of this UpgradeSettings.
        :param strategy: The strategy of this UpgradeSettings.
        """
        self.openapi_types = {
            'blue_green_settings': BlueGreenSettings,
            'max_surge': int,
            'max_unavailable': int,
            'strategy': str
        }

        self.attribute_map = {
            'blue_green_settings': 'blueGreenSettings',
            'max_surge': 'maxSurge',
            'max_unavailable': 'maxUnavailable',
            'strategy': 'strategy'
        }

        self._blue_green_settings = blue_green_settings
        self._max_surge = max_surge
        self._max_unavailable = max_unavailable
        self._strategy = strategy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpgradeSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpgradeSettings of this UpgradeSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blue_green_settings(self):
        """Gets the blue_green_settings of this UpgradeSettings.


        :return: The blue_green_settings of this UpgradeSettings.
        :rtype: BlueGreenSettings
        """
        return self._blue_green_settings

    @blue_green_settings.setter
    def blue_green_settings(self, blue_green_settings):
        """Sets the blue_green_settings of this UpgradeSettings.


        :param blue_green_settings: The blue_green_settings of this UpgradeSettings.
        :type blue_green_settings: BlueGreenSettings
        """

        self._blue_green_settings = blue_green_settings

    @property
    def max_surge(self):
        """Gets the max_surge of this UpgradeSettings.

        The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.

        :return: The max_surge of this UpgradeSettings.
        :rtype: int
        """
        return self._max_surge

    @max_surge.setter
    def max_surge(self, max_surge):
        """Sets the max_surge of this UpgradeSettings.

        The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.

        :param max_surge: The max_surge of this UpgradeSettings.
        :type max_surge: int
        """

        self._max_surge = max_surge

    @property
    def max_unavailable(self):
        """Gets the max_unavailable of this UpgradeSettings.

        The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.

        :return: The max_unavailable of this UpgradeSettings.
        :rtype: int
        """
        return self._max_unavailable

    @max_unavailable.setter
    def max_unavailable(self, max_unavailable):
        """Sets the max_unavailable of this UpgradeSettings.

        The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.

        :param max_unavailable: The max_unavailable of this UpgradeSettings.
        :type max_unavailable: int
        """

        self._max_unavailable = max_unavailable

    @property
    def strategy(self):
        """Gets the strategy of this UpgradeSettings.

        Update strategy of the node pool.

        :return: The strategy of this UpgradeSettings.
        :rtype: str
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this UpgradeSettings.

        Update strategy of the node pool.

        :param strategy: The strategy of this UpgradeSettings.
        :type strategy: str
        """
        allowed_values = ["NODE_POOL_UPDATE_STRATEGY_UNSPECIFIED", "BLUE_GREEN", "SURGE"]  # noqa: E501
        if strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `strategy` ({0}), must be one of {1}"
                .format(strategy, allowed_values)
            )

        self._strategy = strategy
