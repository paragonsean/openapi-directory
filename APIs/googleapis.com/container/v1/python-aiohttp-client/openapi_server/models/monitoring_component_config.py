# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MonitoringComponentConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_components: List[str]=None):
        """MonitoringComponentConfig - a model defined in OpenAPI

        :param enable_components: The enable_components of this MonitoringComponentConfig.
        """
        self.openapi_types = {
            'enable_components': List[str]
        }

        self.attribute_map = {
            'enable_components': 'enableComponents'
        }

        self._enable_components = enable_components

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitoringComponentConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonitoringComponentConfig of this MonitoringComponentConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_components(self):
        """Gets the enable_components of this MonitoringComponentConfig.

        Select components to collect metrics. An empty set would disable all monitoring.

        :return: The enable_components of this MonitoringComponentConfig.
        :rtype: List[str]
        """
        return self._enable_components

    @enable_components.setter
    def enable_components(self, enable_components):
        """Sets the enable_components of this MonitoringComponentConfig.

        Select components to collect metrics. An empty set would disable all monitoring.

        :param enable_components: The enable_components of this MonitoringComponentConfig.
        :type enable_components: List[str]
        """
        allowed_values = ["COMPONENT_UNSPECIFIED", "SYSTEM_COMPONENTS", "APISERVER", "SCHEDULER", "CONTROLLER_MANAGER", "STORAGE", "HPA", "POD", "DAEMONSET", "DEPLOYMENT", "STATEFULSET"]  # noqa: E501
        if not set(enable_components).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `enable_components` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(enable_components) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._enable_components = enable_components
