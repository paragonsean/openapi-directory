# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, provider: str=None):
        """NetworkPolicy - a model defined in OpenAPI

        :param enabled: The enabled of this NetworkPolicy.
        :param provider: The provider of this NetworkPolicy.
        """
        self.openapi_types = {
            'enabled': bool,
            'provider': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'provider': 'provider'
        }

        self._enabled = enabled
        self._provider = provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkPolicy of this NetworkPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this NetworkPolicy.

        Whether network policy is enabled on the cluster.

        :return: The enabled of this NetworkPolicy.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this NetworkPolicy.

        Whether network policy is enabled on the cluster.

        :param enabled: The enabled of this NetworkPolicy.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def provider(self):
        """Gets the provider of this NetworkPolicy.

        The selected network policy provider.

        :return: The provider of this NetworkPolicy.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this NetworkPolicy.

        The selected network policy provider.

        :param provider: The provider of this NetworkPolicy.
        :type provider: str
        """
        allowed_values = ["PROVIDER_UNSPECIFIED", "CALICO"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"
                .format(provider, allowed_values)
            )

        self._provider = provider
