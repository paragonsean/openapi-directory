# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.max_pods_constraint import MaxPodsConstraint
from openapi_server import util


class AdditionalPodNetworkConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_pods_per_node: MaxPodsConstraint=None, secondary_pod_range: str=None, subnetwork: str=None):
        """AdditionalPodNetworkConfig - a model defined in OpenAPI

        :param max_pods_per_node: The max_pods_per_node of this AdditionalPodNetworkConfig.
        :param secondary_pod_range: The secondary_pod_range of this AdditionalPodNetworkConfig.
        :param subnetwork: The subnetwork of this AdditionalPodNetworkConfig.
        """
        self.openapi_types = {
            'max_pods_per_node': MaxPodsConstraint,
            'secondary_pod_range': str,
            'subnetwork': str
        }

        self.attribute_map = {
            'max_pods_per_node': 'maxPodsPerNode',
            'secondary_pod_range': 'secondaryPodRange',
            'subnetwork': 'subnetwork'
        }

        self._max_pods_per_node = max_pods_per_node
        self._secondary_pod_range = secondary_pod_range
        self._subnetwork = subnetwork

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalPodNetworkConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdditionalPodNetworkConfig of this AdditionalPodNetworkConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_pods_per_node(self):
        """Gets the max_pods_per_node of this AdditionalPodNetworkConfig.


        :return: The max_pods_per_node of this AdditionalPodNetworkConfig.
        :rtype: MaxPodsConstraint
        """
        return self._max_pods_per_node

    @max_pods_per_node.setter
    def max_pods_per_node(self, max_pods_per_node):
        """Sets the max_pods_per_node of this AdditionalPodNetworkConfig.


        :param max_pods_per_node: The max_pods_per_node of this AdditionalPodNetworkConfig.
        :type max_pods_per_node: MaxPodsConstraint
        """

        self._max_pods_per_node = max_pods_per_node

    @property
    def secondary_pod_range(self):
        """Gets the secondary_pod_range of this AdditionalPodNetworkConfig.

        The name of the secondary range on the subnet which provides IP address for this pod range

        :return: The secondary_pod_range of this AdditionalPodNetworkConfig.
        :rtype: str
        """
        return self._secondary_pod_range

    @secondary_pod_range.setter
    def secondary_pod_range(self, secondary_pod_range):
        """Sets the secondary_pod_range of this AdditionalPodNetworkConfig.

        The name of the secondary range on the subnet which provides IP address for this pod range

        :param secondary_pod_range: The secondary_pod_range of this AdditionalPodNetworkConfig.
        :type secondary_pod_range: str
        """

        self._secondary_pod_range = secondary_pod_range

    @property
    def subnetwork(self):
        """Gets the subnetwork of this AdditionalPodNetworkConfig.

        Name of the subnetwork where the additional pod network belongs

        :return: The subnetwork of this AdditionalPodNetworkConfig.
        :rtype: str
        """
        return self._subnetwork

    @subnetwork.setter
    def subnetwork(self, subnetwork):
        """Sets the subnetwork of this AdditionalPodNetworkConfig.

        Name of the subnetwork where the additional pod network belongs

        :param subnetwork: The subnetwork of this AdditionalPodNetworkConfig.
        :type subnetwork: str
        """

        self._subnetwork = subnetwork
