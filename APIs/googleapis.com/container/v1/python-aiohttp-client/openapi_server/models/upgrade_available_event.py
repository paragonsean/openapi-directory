# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.release_channel import ReleaseChannel
from openapi_server import util


class UpgradeAvailableEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, release_channel: ReleaseChannel=None, resource: str=None, resource_type: str=None, version: str=None):
        """UpgradeAvailableEvent - a model defined in OpenAPI

        :param release_channel: The release_channel of this UpgradeAvailableEvent.
        :param resource: The resource of this UpgradeAvailableEvent.
        :param resource_type: The resource_type of this UpgradeAvailableEvent.
        :param version: The version of this UpgradeAvailableEvent.
        """
        self.openapi_types = {
            'release_channel': ReleaseChannel,
            'resource': str,
            'resource_type': str,
            'version': str
        }

        self.attribute_map = {
            'release_channel': 'releaseChannel',
            'resource': 'resource',
            'resource_type': 'resourceType',
            'version': 'version'
        }

        self._release_channel = release_channel
        self._resource = resource
        self._resource_type = resource_type
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpgradeAvailableEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpgradeAvailableEvent of this UpgradeAvailableEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def release_channel(self):
        """Gets the release_channel of this UpgradeAvailableEvent.


        :return: The release_channel of this UpgradeAvailableEvent.
        :rtype: ReleaseChannel
        """
        return self._release_channel

    @release_channel.setter
    def release_channel(self, release_channel):
        """Sets the release_channel of this UpgradeAvailableEvent.


        :param release_channel: The release_channel of this UpgradeAvailableEvent.
        :type release_channel: ReleaseChannel
        """

        self._release_channel = release_channel

    @property
    def resource(self):
        """Gets the resource of this UpgradeAvailableEvent.

        Optional relative path to the resource. For example, the relative path of the node pool.

        :return: The resource of this UpgradeAvailableEvent.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this UpgradeAvailableEvent.

        Optional relative path to the resource. For example, the relative path of the node pool.

        :param resource: The resource of this UpgradeAvailableEvent.
        :type resource: str
        """

        self._resource = resource

    @property
    def resource_type(self):
        """Gets the resource_type of this UpgradeAvailableEvent.

        The resource type of the release version.

        :return: The resource_type of this UpgradeAvailableEvent.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this UpgradeAvailableEvent.

        The resource type of the release version.

        :param resource_type: The resource_type of this UpgradeAvailableEvent.
        :type resource_type: str
        """
        allowed_values = ["UPGRADE_RESOURCE_TYPE_UNSPECIFIED", "MASTER", "NODE_POOL"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def version(self):
        """Gets the version of this UpgradeAvailableEvent.

        The release version available for upgrade.

        :return: The version of this UpgradeAvailableEvent.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UpgradeAvailableEvent.

        The release version available for upgrade.

        :param version: The version of this UpgradeAvailableEvent.
        :type version: str
        """

        self._version = version
