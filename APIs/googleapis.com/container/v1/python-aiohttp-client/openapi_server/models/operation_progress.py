# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric import Metric
from openapi_server import util


class OperationProgress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metrics: List[Metric]=None, name: str=None, stages: List[OperationProgress]=None, status: str=None):
        """OperationProgress - a model defined in OpenAPI

        :param metrics: The metrics of this OperationProgress.
        :param name: The name of this OperationProgress.
        :param stages: The stages of this OperationProgress.
        :param status: The status of this OperationProgress.
        """
        self.openapi_types = {
            'metrics': List[Metric],
            'name': str,
            'stages': List[OperationProgress],
            'status': str
        }

        self.attribute_map = {
            'metrics': 'metrics',
            'name': 'name',
            'stages': 'stages',
            'status': 'status'
        }

        self._metrics = metrics
        self._name = name
        self._stages = stages
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationProgress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationProgress of this OperationProgress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metrics(self):
        """Gets the metrics of this OperationProgress.

        Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]

        :return: The metrics of this OperationProgress.
        :rtype: List[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this OperationProgress.

        Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]

        :param metrics: The metrics of this OperationProgress.
        :type metrics: List[Metric]
        """

        self._metrics = metrics

    @property
    def name(self):
        """Gets the name of this OperationProgress.

        A non-parameterized string describing an operation stage. Unset for single-stage operations.

        :return: The name of this OperationProgress.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OperationProgress.

        A non-parameterized string describing an operation stage. Unset for single-stage operations.

        :param name: The name of this OperationProgress.
        :type name: str
        """

        self._name = name

    @property
    def stages(self):
        """Gets the stages of this OperationProgress.

        Substages of an operation or a stage.

        :return: The stages of this OperationProgress.
        :rtype: List[OperationProgress]
        """
        return self._stages

    @stages.setter
    def stages(self, stages):
        """Sets the stages of this OperationProgress.

        Substages of an operation or a stage.

        :param stages: The stages of this OperationProgress.
        :type stages: List[OperationProgress]
        """

        self._stages = stages

    @property
    def status(self):
        """Gets the status of this OperationProgress.

        Status of an operation stage. Unset for single-stage operations.

        :return: The status of this OperationProgress.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OperationProgress.

        Status of an operation stage. Unset for single-stage operations.

        :param status: The status of this OperationProgress.
        :type status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "PENDING", "RUNNING", "DONE", "ABORTING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
