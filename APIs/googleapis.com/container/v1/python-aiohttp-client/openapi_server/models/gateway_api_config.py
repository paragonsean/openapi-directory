# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GatewayAPIConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: str=None):
        """GatewayAPIConfig - a model defined in OpenAPI

        :param channel: The channel of this GatewayAPIConfig.
        """
        self.openapi_types = {
            'channel': str
        }

        self.attribute_map = {
            'channel': 'channel'
        }

        self._channel = channel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GatewayAPIConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GatewayAPIConfig of this GatewayAPIConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this GatewayAPIConfig.

        The Gateway API release channel to use for Gateway API.

        :return: The channel of this GatewayAPIConfig.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this GatewayAPIConfig.

        The Gateway API release channel to use for Gateway API.

        :param channel: The channel of this GatewayAPIConfig.
        :type channel: str
        """
        allowed_values = ["CHANNEL_UNSPECIFIED", "CHANNEL_DISABLED", "CHANNEL_EXPERIMENTAL", "CHANNEL_STANDARD"]  # noqa: E501
        if channel not in allowed_values:
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"
                .format(channel, allowed_values)
            )

        self._channel = channel
