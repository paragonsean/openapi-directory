/*
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReleaseChannelConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Kubernetes Engine service configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:25.935819-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServerConfig {
  public static final String SERIALIZED_NAME_CHANNELS = "channels";
  @SerializedName(SERIALIZED_NAME_CHANNELS)
  private List<ReleaseChannelConfig> channels = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_CLUSTER_VERSION = "defaultClusterVersion";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CLUSTER_VERSION)
  private String defaultClusterVersion;

  public static final String SERIALIZED_NAME_DEFAULT_IMAGE_TYPE = "defaultImageType";
  @SerializedName(SERIALIZED_NAME_DEFAULT_IMAGE_TYPE)
  private String defaultImageType;

  public static final String SERIALIZED_NAME_VALID_IMAGE_TYPES = "validImageTypes";
  @SerializedName(SERIALIZED_NAME_VALID_IMAGE_TYPES)
  private List<String> validImageTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALID_MASTER_VERSIONS = "validMasterVersions";
  @SerializedName(SERIALIZED_NAME_VALID_MASTER_VERSIONS)
  private List<String> validMasterVersions = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALID_NODE_VERSIONS = "validNodeVersions";
  @SerializedName(SERIALIZED_NAME_VALID_NODE_VERSIONS)
  private List<String> validNodeVersions = new ArrayList<>();

  public ServerConfig() {
  }

  public ServerConfig channels(List<ReleaseChannelConfig> channels) {
    this.channels = channels;
    return this;
  }

  public ServerConfig addChannelsItem(ReleaseChannelConfig channelsItem) {
    if (this.channels == null) {
      this.channels = new ArrayList<>();
    }
    this.channels.add(channelsItem);
    return this;
  }

  /**
   * List of release channel configurations.
   * @return channels
   */
  @javax.annotation.Nullable
  public List<ReleaseChannelConfig> getChannels() {
    return channels;
  }

  public void setChannels(List<ReleaseChannelConfig> channels) {
    this.channels = channels;
  }


  public ServerConfig defaultClusterVersion(String defaultClusterVersion) {
    this.defaultClusterVersion = defaultClusterVersion;
    return this;
  }

  /**
   * Version of Kubernetes the service deploys by default.
   * @return defaultClusterVersion
   */
  @javax.annotation.Nullable
  public String getDefaultClusterVersion() {
    return defaultClusterVersion;
  }

  public void setDefaultClusterVersion(String defaultClusterVersion) {
    this.defaultClusterVersion = defaultClusterVersion;
  }


  public ServerConfig defaultImageType(String defaultImageType) {
    this.defaultImageType = defaultImageType;
    return this;
  }

  /**
   * Default image type.
   * @return defaultImageType
   */
  @javax.annotation.Nullable
  public String getDefaultImageType() {
    return defaultImageType;
  }

  public void setDefaultImageType(String defaultImageType) {
    this.defaultImageType = defaultImageType;
  }


  public ServerConfig validImageTypes(List<String> validImageTypes) {
    this.validImageTypes = validImageTypes;
    return this;
  }

  public ServerConfig addValidImageTypesItem(String validImageTypesItem) {
    if (this.validImageTypes == null) {
      this.validImageTypes = new ArrayList<>();
    }
    this.validImageTypes.add(validImageTypesItem);
    return this;
  }

  /**
   * List of valid image types.
   * @return validImageTypes
   */
  @javax.annotation.Nullable
  public List<String> getValidImageTypes() {
    return validImageTypes;
  }

  public void setValidImageTypes(List<String> validImageTypes) {
    this.validImageTypes = validImageTypes;
  }


  public ServerConfig validMasterVersions(List<String> validMasterVersions) {
    this.validMasterVersions = validMasterVersions;
    return this;
  }

  public ServerConfig addValidMasterVersionsItem(String validMasterVersionsItem) {
    if (this.validMasterVersions == null) {
      this.validMasterVersions = new ArrayList<>();
    }
    this.validMasterVersions.add(validMasterVersionsItem);
    return this;
  }

  /**
   * List of valid master versions, in descending order.
   * @return validMasterVersions
   */
  @javax.annotation.Nullable
  public List<String> getValidMasterVersions() {
    return validMasterVersions;
  }

  public void setValidMasterVersions(List<String> validMasterVersions) {
    this.validMasterVersions = validMasterVersions;
  }


  public ServerConfig validNodeVersions(List<String> validNodeVersions) {
    this.validNodeVersions = validNodeVersions;
    return this;
  }

  public ServerConfig addValidNodeVersionsItem(String validNodeVersionsItem) {
    if (this.validNodeVersions == null) {
      this.validNodeVersions = new ArrayList<>();
    }
    this.validNodeVersions.add(validNodeVersionsItem);
    return this;
  }

  /**
   * List of valid node upgrade target versions, in descending order.
   * @return validNodeVersions
   */
  @javax.annotation.Nullable
  public List<String> getValidNodeVersions() {
    return validNodeVersions;
  }

  public void setValidNodeVersions(List<String> validNodeVersions) {
    this.validNodeVersions = validNodeVersions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerConfig serverConfig = (ServerConfig) o;
    return Objects.equals(this.channels, serverConfig.channels) &&
        Objects.equals(this.defaultClusterVersion, serverConfig.defaultClusterVersion) &&
        Objects.equals(this.defaultImageType, serverConfig.defaultImageType) &&
        Objects.equals(this.validImageTypes, serverConfig.validImageTypes) &&
        Objects.equals(this.validMasterVersions, serverConfig.validMasterVersions) &&
        Objects.equals(this.validNodeVersions, serverConfig.validNodeVersions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channels, defaultClusterVersion, defaultImageType, validImageTypes, validMasterVersions, validNodeVersions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerConfig {\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    defaultClusterVersion: ").append(toIndentedString(defaultClusterVersion)).append("\n");
    sb.append("    defaultImageType: ").append(toIndentedString(defaultImageType)).append("\n");
    sb.append("    validImageTypes: ").append(toIndentedString(validImageTypes)).append("\n");
    sb.append("    validMasterVersions: ").append(toIndentedString(validMasterVersions)).append("\n");
    sb.append("    validNodeVersions: ").append(toIndentedString(validNodeVersions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channels");
    openapiFields.add("defaultClusterVersion");
    openapiFields.add("defaultImageType");
    openapiFields.add("validImageTypes");
    openapiFields.add("validMasterVersions");
    openapiFields.add("validNodeVersions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServerConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServerConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerConfig is not found in the empty JSON string", ServerConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServerConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServerConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("channels") != null && !jsonObj.get("channels").isJsonNull()) {
        JsonArray jsonArraychannels = jsonObj.getAsJsonArray("channels");
        if (jsonArraychannels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("channels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `channels` to be an array in the JSON string but got `%s`", jsonObj.get("channels").toString()));
          }

          // validate the optional field `channels` (array)
          for (int i = 0; i < jsonArraychannels.size(); i++) {
            ReleaseChannelConfig.validateJsonElement(jsonArraychannels.get(i));
          };
        }
      }
      if ((jsonObj.get("defaultClusterVersion") != null && !jsonObj.get("defaultClusterVersion").isJsonNull()) && !jsonObj.get("defaultClusterVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultClusterVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultClusterVersion").toString()));
      }
      if ((jsonObj.get("defaultImageType") != null && !jsonObj.get("defaultImageType").isJsonNull()) && !jsonObj.get("defaultImageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultImageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultImageType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("validImageTypes") != null && !jsonObj.get("validImageTypes").isJsonNull() && !jsonObj.get("validImageTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validImageTypes` to be an array in the JSON string but got `%s`", jsonObj.get("validImageTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("validMasterVersions") != null && !jsonObj.get("validMasterVersions").isJsonNull() && !jsonObj.get("validMasterVersions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validMasterVersions` to be an array in the JSON string but got `%s`", jsonObj.get("validMasterVersions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("validNodeVersions") != null && !jsonObj.get("validNodeVersions").isJsonNull() && !jsonObj.get("validNodeVersions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validNodeVersions` to be an array in the JSON string but got `%s`", jsonObj.get("validNodeVersions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServerConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServerConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServerConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServerConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ServerConfig>() {
           @Override
           public void write(JsonWriter out, ServerConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServerConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServerConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServerConfig
   * @throws IOException if the JSON string is invalid with respect to ServerConfig
   */
  public static ServerConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerConfig.class);
  }

  /**
   * Convert an instance of ServerConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

