/*
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:25.935819-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NodePoolAutoscaling {
  public static final String SERIALIZED_NAME_AUTOPROVISIONED = "autoprovisioned";
  @SerializedName(SERIALIZED_NAME_AUTOPROVISIONED)
  private Boolean autoprovisioned;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  /**
   * Location policy used when scaling up a nodepool.
   */
  @JsonAdapter(LocationPolicyEnum.Adapter.class)
  public enum LocationPolicyEnum {
    LOCATION_POLICY_UNSPECIFIED("LOCATION_POLICY_UNSPECIFIED"),
    
    BALANCED("BALANCED"),
    
    ANY("ANY");

    private String value;

    LocationPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocationPolicyEnum fromValue(String value) {
      for (LocationPolicyEnum b : LocationPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocationPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocationPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocationPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocationPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocationPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCATION_POLICY = "locationPolicy";
  @SerializedName(SERIALIZED_NAME_LOCATION_POLICY)
  private LocationPolicyEnum locationPolicy;

  public static final String SERIALIZED_NAME_MAX_NODE_COUNT = "maxNodeCount";
  @SerializedName(SERIALIZED_NAME_MAX_NODE_COUNT)
  private Integer maxNodeCount;

  public static final String SERIALIZED_NAME_MIN_NODE_COUNT = "minNodeCount";
  @SerializedName(SERIALIZED_NAME_MIN_NODE_COUNT)
  private Integer minNodeCount;

  public static final String SERIALIZED_NAME_TOTAL_MAX_NODE_COUNT = "totalMaxNodeCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_MAX_NODE_COUNT)
  private Integer totalMaxNodeCount;

  public static final String SERIALIZED_NAME_TOTAL_MIN_NODE_COUNT = "totalMinNodeCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_MIN_NODE_COUNT)
  private Integer totalMinNodeCount;

  public NodePoolAutoscaling() {
  }

  public NodePoolAutoscaling autoprovisioned(Boolean autoprovisioned) {
    this.autoprovisioned = autoprovisioned;
    return this;
  }

  /**
   * Can this node pool be deleted automatically.
   * @return autoprovisioned
   */
  @javax.annotation.Nullable
  public Boolean getAutoprovisioned() {
    return autoprovisioned;
  }

  public void setAutoprovisioned(Boolean autoprovisioned) {
    this.autoprovisioned = autoprovisioned;
  }


  public NodePoolAutoscaling enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Is autoscaling enabled for this node pool.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public NodePoolAutoscaling locationPolicy(LocationPolicyEnum locationPolicy) {
    this.locationPolicy = locationPolicy;
    return this;
  }

  /**
   * Location policy used when scaling up a nodepool.
   * @return locationPolicy
   */
  @javax.annotation.Nullable
  public LocationPolicyEnum getLocationPolicy() {
    return locationPolicy;
  }

  public void setLocationPolicy(LocationPolicyEnum locationPolicy) {
    this.locationPolicy = locationPolicy;
  }


  public NodePoolAutoscaling maxNodeCount(Integer maxNodeCount) {
    this.maxNodeCount = maxNodeCount;
    return this;
  }

  /**
   * Maximum number of nodes for one location in the NodePool. Must be &gt;&#x3D; min_node_count. There has to be enough quota to scale up the cluster.
   * @return maxNodeCount
   */
  @javax.annotation.Nullable
  public Integer getMaxNodeCount() {
    return maxNodeCount;
  }

  public void setMaxNodeCount(Integer maxNodeCount) {
    this.maxNodeCount = maxNodeCount;
  }


  public NodePoolAutoscaling minNodeCount(Integer minNodeCount) {
    this.minNodeCount = minNodeCount;
    return this;
  }

  /**
   * Minimum number of nodes for one location in the NodePool. Must be &gt;&#x3D; 1 and &lt;&#x3D; max_node_count.
   * @return minNodeCount
   */
  @javax.annotation.Nullable
  public Integer getMinNodeCount() {
    return minNodeCount;
  }

  public void setMinNodeCount(Integer minNodeCount) {
    this.minNodeCount = minNodeCount;
  }


  public NodePoolAutoscaling totalMaxNodeCount(Integer totalMaxNodeCount) {
    this.totalMaxNodeCount = totalMaxNodeCount;
    return this;
  }

  /**
   * Maximum number of nodes in the node pool. Must be greater than total_min_node_count. There has to be enough quota to scale up the cluster. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
   * @return totalMaxNodeCount
   */
  @javax.annotation.Nullable
  public Integer getTotalMaxNodeCount() {
    return totalMaxNodeCount;
  }

  public void setTotalMaxNodeCount(Integer totalMaxNodeCount) {
    this.totalMaxNodeCount = totalMaxNodeCount;
  }


  public NodePoolAutoscaling totalMinNodeCount(Integer totalMinNodeCount) {
    this.totalMinNodeCount = totalMinNodeCount;
    return this;
  }

  /**
   * Minimum number of nodes in the node pool. Must be greater than 1 less than total_max_node_count. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
   * @return totalMinNodeCount
   */
  @javax.annotation.Nullable
  public Integer getTotalMinNodeCount() {
    return totalMinNodeCount;
  }

  public void setTotalMinNodeCount(Integer totalMinNodeCount) {
    this.totalMinNodeCount = totalMinNodeCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodePoolAutoscaling nodePoolAutoscaling = (NodePoolAutoscaling) o;
    return Objects.equals(this.autoprovisioned, nodePoolAutoscaling.autoprovisioned) &&
        Objects.equals(this.enabled, nodePoolAutoscaling.enabled) &&
        Objects.equals(this.locationPolicy, nodePoolAutoscaling.locationPolicy) &&
        Objects.equals(this.maxNodeCount, nodePoolAutoscaling.maxNodeCount) &&
        Objects.equals(this.minNodeCount, nodePoolAutoscaling.minNodeCount) &&
        Objects.equals(this.totalMaxNodeCount, nodePoolAutoscaling.totalMaxNodeCount) &&
        Objects.equals(this.totalMinNodeCount, nodePoolAutoscaling.totalMinNodeCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoprovisioned, enabled, locationPolicy, maxNodeCount, minNodeCount, totalMaxNodeCount, totalMinNodeCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodePoolAutoscaling {\n");
    sb.append("    autoprovisioned: ").append(toIndentedString(autoprovisioned)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    locationPolicy: ").append(toIndentedString(locationPolicy)).append("\n");
    sb.append("    maxNodeCount: ").append(toIndentedString(maxNodeCount)).append("\n");
    sb.append("    minNodeCount: ").append(toIndentedString(minNodeCount)).append("\n");
    sb.append("    totalMaxNodeCount: ").append(toIndentedString(totalMaxNodeCount)).append("\n");
    sb.append("    totalMinNodeCount: ").append(toIndentedString(totalMinNodeCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoprovisioned");
    openapiFields.add("enabled");
    openapiFields.add("locationPolicy");
    openapiFields.add("maxNodeCount");
    openapiFields.add("minNodeCount");
    openapiFields.add("totalMaxNodeCount");
    openapiFields.add("totalMinNodeCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NodePoolAutoscaling
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodePoolAutoscaling.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodePoolAutoscaling is not found in the empty JSON string", NodePoolAutoscaling.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NodePoolAutoscaling.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodePoolAutoscaling` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("locationPolicy") != null && !jsonObj.get("locationPolicy").isJsonNull()) && !jsonObj.get("locationPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationPolicy").toString()));
      }
      // validate the optional field `locationPolicy`
      if (jsonObj.get("locationPolicy") != null && !jsonObj.get("locationPolicy").isJsonNull()) {
        LocationPolicyEnum.validateJsonElement(jsonObj.get("locationPolicy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodePoolAutoscaling.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodePoolAutoscaling' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodePoolAutoscaling> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodePoolAutoscaling.class));

       return (TypeAdapter<T>) new TypeAdapter<NodePoolAutoscaling>() {
           @Override
           public void write(JsonWriter out, NodePoolAutoscaling value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodePoolAutoscaling read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NodePoolAutoscaling given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NodePoolAutoscaling
   * @throws IOException if the JSON string is invalid with respect to NodePoolAutoscaling
   */
  public static NodePoolAutoscaling fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodePoolAutoscaling.class);
  }

  /**
   * Convert an instance of NodePoolAutoscaling to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

