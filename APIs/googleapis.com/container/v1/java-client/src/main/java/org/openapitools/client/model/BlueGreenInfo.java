/*
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information relevant to blue-green upgrade.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:25.935819-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BlueGreenInfo {
  public static final String SERIALIZED_NAME_BLUE_INSTANCE_GROUP_URLS = "blueInstanceGroupUrls";
  @SerializedName(SERIALIZED_NAME_BLUE_INSTANCE_GROUP_URLS)
  private List<String> blueInstanceGroupUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_BLUE_POOL_DELETION_START_TIME = "bluePoolDeletionStartTime";
  @SerializedName(SERIALIZED_NAME_BLUE_POOL_DELETION_START_TIME)
  private String bluePoolDeletionStartTime;

  public static final String SERIALIZED_NAME_GREEN_INSTANCE_GROUP_URLS = "greenInstanceGroupUrls";
  @SerializedName(SERIALIZED_NAME_GREEN_INSTANCE_GROUP_URLS)
  private List<String> greenInstanceGroupUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_GREEN_POOL_VERSION = "greenPoolVersion";
  @SerializedName(SERIALIZED_NAME_GREEN_POOL_VERSION)
  private String greenPoolVersion;

  /**
   * Current blue-green upgrade phase.
   */
  @JsonAdapter(PhaseEnum.Adapter.class)
  public enum PhaseEnum {
    PHASE_UNSPECIFIED("PHASE_UNSPECIFIED"),
    
    UPDATE_STARTED("UPDATE_STARTED"),
    
    CREATING_GREEN_POOL("CREATING_GREEN_POOL"),
    
    CORDONING_BLUE_POOL("CORDONING_BLUE_POOL"),
    
    DRAINING_BLUE_POOL("DRAINING_BLUE_POOL"),
    
    NODE_POOL_SOAKING("NODE_POOL_SOAKING"),
    
    DELETING_BLUE_POOL("DELETING_BLUE_POOL"),
    
    ROLLBACK_STARTED("ROLLBACK_STARTED");

    private String value;

    PhaseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhaseEnum fromValue(String value) {
      for (PhaseEnum b : PhaseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhaseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhaseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhaseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PhaseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private PhaseEnum phase;

  public BlueGreenInfo() {
  }

  public BlueGreenInfo blueInstanceGroupUrls(List<String> blueInstanceGroupUrls) {
    this.blueInstanceGroupUrls = blueInstanceGroupUrls;
    return this;
  }

  public BlueGreenInfo addBlueInstanceGroupUrlsItem(String blueInstanceGroupUrlsItem) {
    if (this.blueInstanceGroupUrls == null) {
      this.blueInstanceGroupUrls = new ArrayList<>();
    }
    this.blueInstanceGroupUrls.add(blueInstanceGroupUrlsItem);
    return this;
  }

  /**
   * The resource URLs of the [managed instance groups] (/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with blue pool.
   * @return blueInstanceGroupUrls
   */
  @javax.annotation.Nullable
  public List<String> getBlueInstanceGroupUrls() {
    return blueInstanceGroupUrls;
  }

  public void setBlueInstanceGroupUrls(List<String> blueInstanceGroupUrls) {
    this.blueInstanceGroupUrls = blueInstanceGroupUrls;
  }


  public BlueGreenInfo bluePoolDeletionStartTime(String bluePoolDeletionStartTime) {
    this.bluePoolDeletionStartTime = bluePoolDeletionStartTime;
    return this;
  }

  /**
   * Time to start deleting blue pool to complete blue-green upgrade, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
   * @return bluePoolDeletionStartTime
   */
  @javax.annotation.Nullable
  public String getBluePoolDeletionStartTime() {
    return bluePoolDeletionStartTime;
  }

  public void setBluePoolDeletionStartTime(String bluePoolDeletionStartTime) {
    this.bluePoolDeletionStartTime = bluePoolDeletionStartTime;
  }


  public BlueGreenInfo greenInstanceGroupUrls(List<String> greenInstanceGroupUrls) {
    this.greenInstanceGroupUrls = greenInstanceGroupUrls;
    return this;
  }

  public BlueGreenInfo addGreenInstanceGroupUrlsItem(String greenInstanceGroupUrlsItem) {
    if (this.greenInstanceGroupUrls == null) {
      this.greenInstanceGroupUrls = new ArrayList<>();
    }
    this.greenInstanceGroupUrls.add(greenInstanceGroupUrlsItem);
    return this;
  }

  /**
   * The resource URLs of the [managed instance groups] (/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with green pool.
   * @return greenInstanceGroupUrls
   */
  @javax.annotation.Nullable
  public List<String> getGreenInstanceGroupUrls() {
    return greenInstanceGroupUrls;
  }

  public void setGreenInstanceGroupUrls(List<String> greenInstanceGroupUrls) {
    this.greenInstanceGroupUrls = greenInstanceGroupUrls;
  }


  public BlueGreenInfo greenPoolVersion(String greenPoolVersion) {
    this.greenPoolVersion = greenPoolVersion;
    return this;
  }

  /**
   * Version of green pool.
   * @return greenPoolVersion
   */
  @javax.annotation.Nullable
  public String getGreenPoolVersion() {
    return greenPoolVersion;
  }

  public void setGreenPoolVersion(String greenPoolVersion) {
    this.greenPoolVersion = greenPoolVersion;
  }


  public BlueGreenInfo phase(PhaseEnum phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Current blue-green upgrade phase.
   * @return phase
   */
  @javax.annotation.Nullable
  public PhaseEnum getPhase() {
    return phase;
  }

  public void setPhase(PhaseEnum phase) {
    this.phase = phase;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueGreenInfo blueGreenInfo = (BlueGreenInfo) o;
    return Objects.equals(this.blueInstanceGroupUrls, blueGreenInfo.blueInstanceGroupUrls) &&
        Objects.equals(this.bluePoolDeletionStartTime, blueGreenInfo.bluePoolDeletionStartTime) &&
        Objects.equals(this.greenInstanceGroupUrls, blueGreenInfo.greenInstanceGroupUrls) &&
        Objects.equals(this.greenPoolVersion, blueGreenInfo.greenPoolVersion) &&
        Objects.equals(this.phase, blueGreenInfo.phase);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blueInstanceGroupUrls, bluePoolDeletionStartTime, greenInstanceGroupUrls, greenPoolVersion, phase);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueGreenInfo {\n");
    sb.append("    blueInstanceGroupUrls: ").append(toIndentedString(blueInstanceGroupUrls)).append("\n");
    sb.append("    bluePoolDeletionStartTime: ").append(toIndentedString(bluePoolDeletionStartTime)).append("\n");
    sb.append("    greenInstanceGroupUrls: ").append(toIndentedString(greenInstanceGroupUrls)).append("\n");
    sb.append("    greenPoolVersion: ").append(toIndentedString(greenPoolVersion)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blueInstanceGroupUrls");
    openapiFields.add("bluePoolDeletionStartTime");
    openapiFields.add("greenInstanceGroupUrls");
    openapiFields.add("greenPoolVersion");
    openapiFields.add("phase");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BlueGreenInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlueGreenInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlueGreenInfo is not found in the empty JSON string", BlueGreenInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BlueGreenInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BlueGreenInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("blueInstanceGroupUrls") != null && !jsonObj.get("blueInstanceGroupUrls").isJsonNull() && !jsonObj.get("blueInstanceGroupUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blueInstanceGroupUrls` to be an array in the JSON string but got `%s`", jsonObj.get("blueInstanceGroupUrls").toString()));
      }
      if ((jsonObj.get("bluePoolDeletionStartTime") != null && !jsonObj.get("bluePoolDeletionStartTime").isJsonNull()) && !jsonObj.get("bluePoolDeletionStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bluePoolDeletionStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bluePoolDeletionStartTime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("greenInstanceGroupUrls") != null && !jsonObj.get("greenInstanceGroupUrls").isJsonNull() && !jsonObj.get("greenInstanceGroupUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `greenInstanceGroupUrls` to be an array in the JSON string but got `%s`", jsonObj.get("greenInstanceGroupUrls").toString()));
      }
      if ((jsonObj.get("greenPoolVersion") != null && !jsonObj.get("greenPoolVersion").isJsonNull()) && !jsonObj.get("greenPoolVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `greenPoolVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("greenPoolVersion").toString()));
      }
      if ((jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) && !jsonObj.get("phase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phase").toString()));
      }
      // validate the optional field `phase`
      if (jsonObj.get("phase") != null && !jsonObj.get("phase").isJsonNull()) {
        PhaseEnum.validateJsonElement(jsonObj.get("phase"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlueGreenInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlueGreenInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlueGreenInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlueGreenInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BlueGreenInfo>() {
           @Override
           public void write(JsonWriter out, BlueGreenInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlueGreenInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BlueGreenInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BlueGreenInfo
   * @throws IOException if the JSON string is invalid with respect to BlueGreenInfo
   */
  public static BlueGreenInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlueGreenInfo.class);
  }

  /**
   * Convert an instance of BlueGreenInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

