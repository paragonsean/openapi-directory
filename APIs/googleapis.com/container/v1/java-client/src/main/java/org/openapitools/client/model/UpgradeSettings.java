/*
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BlueGreenSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable&#x3D;0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge&#x3D;2, maxUnavailable&#x3D;1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available. These upgrade settings configure the upgrade strategy for the node pool. Use strategy to switch between the strategies applied to the node pool. If the strategy is ROLLING, use max_surge and max_unavailable to control the level of parallelism and the level of disruption caused by upgrade. 1. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. 2. maxUnavailable controls the number of nodes that can be simultaneously unavailable. 3. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). If the strategy is BLUE_GREEN, use blue_green_settings to configure the blue-green upgrade related settings. 1. standard_rollout_policy is the default policy. The policy is used to control the way blue pool gets drained. The draining is executed in the batch mode. The batch size could be specified as either percentage of the node pool size or the number of nodes. batch_soak_duration is the soak time after each batch gets drained. 2. node_pool_soak_duration is the soak time after all blue nodes are drained. After this period, the blue pool nodes will be deleted.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:25.935819-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpgradeSettings {
  public static final String SERIALIZED_NAME_BLUE_GREEN_SETTINGS = "blueGreenSettings";
  @SerializedName(SERIALIZED_NAME_BLUE_GREEN_SETTINGS)
  private BlueGreenSettings blueGreenSettings;

  public static final String SERIALIZED_NAME_MAX_SURGE = "maxSurge";
  @SerializedName(SERIALIZED_NAME_MAX_SURGE)
  private Integer maxSurge;

  public static final String SERIALIZED_NAME_MAX_UNAVAILABLE = "maxUnavailable";
  @SerializedName(SERIALIZED_NAME_MAX_UNAVAILABLE)
  private Integer maxUnavailable;

  /**
   * Update strategy of the node pool.
   */
  @JsonAdapter(StrategyEnum.Adapter.class)
  public enum StrategyEnum {
    NODE_POOL_UPDATE_STRATEGY_UNSPECIFIED("NODE_POOL_UPDATE_STRATEGY_UNSPECIFIED"),
    
    BLUE_GREEN("BLUE_GREEN"),
    
    SURGE("SURGE");

    private String value;

    StrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StrategyEnum fromValue(String value) {
      for (StrategyEnum b : StrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STRATEGY = "strategy";
  @SerializedName(SERIALIZED_NAME_STRATEGY)
  private StrategyEnum strategy;

  public UpgradeSettings() {
  }

  public UpgradeSettings blueGreenSettings(BlueGreenSettings blueGreenSettings) {
    this.blueGreenSettings = blueGreenSettings;
    return this;
  }

  /**
   * Get blueGreenSettings
   * @return blueGreenSettings
   */
  @javax.annotation.Nullable
  public BlueGreenSettings getBlueGreenSettings() {
    return blueGreenSettings;
  }

  public void setBlueGreenSettings(BlueGreenSettings blueGreenSettings) {
    this.blueGreenSettings = blueGreenSettings;
  }


  public UpgradeSettings maxSurge(Integer maxSurge) {
    this.maxSurge = maxSurge;
    return this;
  }

  /**
   * The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.
   * @return maxSurge
   */
  @javax.annotation.Nullable
  public Integer getMaxSurge() {
    return maxSurge;
  }

  public void setMaxSurge(Integer maxSurge) {
    this.maxSurge = maxSurge;
  }


  public UpgradeSettings maxUnavailable(Integer maxUnavailable) {
    this.maxUnavailable = maxUnavailable;
    return this;
  }

  /**
   * The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.
   * @return maxUnavailable
   */
  @javax.annotation.Nullable
  public Integer getMaxUnavailable() {
    return maxUnavailable;
  }

  public void setMaxUnavailable(Integer maxUnavailable) {
    this.maxUnavailable = maxUnavailable;
  }


  public UpgradeSettings strategy(StrategyEnum strategy) {
    this.strategy = strategy;
    return this;
  }

  /**
   * Update strategy of the node pool.
   * @return strategy
   */
  @javax.annotation.Nullable
  public StrategyEnum getStrategy() {
    return strategy;
  }

  public void setStrategy(StrategyEnum strategy) {
    this.strategy = strategy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpgradeSettings upgradeSettings = (UpgradeSettings) o;
    return Objects.equals(this.blueGreenSettings, upgradeSettings.blueGreenSettings) &&
        Objects.equals(this.maxSurge, upgradeSettings.maxSurge) &&
        Objects.equals(this.maxUnavailable, upgradeSettings.maxUnavailable) &&
        Objects.equals(this.strategy, upgradeSettings.strategy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blueGreenSettings, maxSurge, maxUnavailable, strategy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpgradeSettings {\n");
    sb.append("    blueGreenSettings: ").append(toIndentedString(blueGreenSettings)).append("\n");
    sb.append("    maxSurge: ").append(toIndentedString(maxSurge)).append("\n");
    sb.append("    maxUnavailable: ").append(toIndentedString(maxUnavailable)).append("\n");
    sb.append("    strategy: ").append(toIndentedString(strategy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blueGreenSettings");
    openapiFields.add("maxSurge");
    openapiFields.add("maxUnavailable");
    openapiFields.add("strategy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpgradeSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpgradeSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpgradeSettings is not found in the empty JSON string", UpgradeSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpgradeSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpgradeSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `blueGreenSettings`
      if (jsonObj.get("blueGreenSettings") != null && !jsonObj.get("blueGreenSettings").isJsonNull()) {
        BlueGreenSettings.validateJsonElement(jsonObj.get("blueGreenSettings"));
      }
      if ((jsonObj.get("strategy") != null && !jsonObj.get("strategy").isJsonNull()) && !jsonObj.get("strategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strategy").toString()));
      }
      // validate the optional field `strategy`
      if (jsonObj.get("strategy") != null && !jsonObj.get("strategy").isJsonNull()) {
        StrategyEnum.validateJsonElement(jsonObj.get("strategy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpgradeSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpgradeSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpgradeSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpgradeSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<UpgradeSettings>() {
           @Override
           public void write(JsonWriter out, UpgradeSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpgradeSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpgradeSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpgradeSettings
   * @throws IOException if the JSON string is invalid with respect to UpgradeSettings
   */
  public static UpgradeSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpgradeSettings.class);
  }

  /**
   * Convert an instance of UpgradeSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

