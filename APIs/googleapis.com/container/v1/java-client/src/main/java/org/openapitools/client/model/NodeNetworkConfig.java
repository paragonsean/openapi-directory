/*
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdditionalNodeNetworkConfig;
import org.openapitools.client.model.AdditionalPodNetworkConfig;
import org.openapitools.client.model.NetworkPerformanceConfig;
import org.openapitools.client.model.PodCIDROverprovisionConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters for node pool-level network config.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:25.935819-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NodeNetworkConfig {
  public static final String SERIALIZED_NAME_ADDITIONAL_NODE_NETWORK_CONFIGS = "additionalNodeNetworkConfigs";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_NODE_NETWORK_CONFIGS)
  private List<AdditionalNodeNetworkConfig> additionalNodeNetworkConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_POD_NETWORK_CONFIGS = "additionalPodNetworkConfigs";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_POD_NETWORK_CONFIGS)
  private List<AdditionalPodNetworkConfig> additionalPodNetworkConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_POD_RANGE = "createPodRange";
  @SerializedName(SERIALIZED_NAME_CREATE_POD_RANGE)
  private Boolean createPodRange;

  public static final String SERIALIZED_NAME_ENABLE_PRIVATE_NODES = "enablePrivateNodes";
  @SerializedName(SERIALIZED_NAME_ENABLE_PRIVATE_NODES)
  private Boolean enablePrivateNodes;

  public static final String SERIALIZED_NAME_NETWORK_PERFORMANCE_CONFIG = "networkPerformanceConfig";
  @SerializedName(SERIALIZED_NAME_NETWORK_PERFORMANCE_CONFIG)
  private NetworkPerformanceConfig networkPerformanceConfig;

  public static final String SERIALIZED_NAME_POD_CIDR_OVERPROVISION_CONFIG = "podCidrOverprovisionConfig";
  @SerializedName(SERIALIZED_NAME_POD_CIDR_OVERPROVISION_CONFIG)
  private PodCIDROverprovisionConfig podCidrOverprovisionConfig;

  public static final String SERIALIZED_NAME_POD_IPV4_CIDR_BLOCK = "podIpv4CidrBlock";
  @SerializedName(SERIALIZED_NAME_POD_IPV4_CIDR_BLOCK)
  private String podIpv4CidrBlock;

  public static final String SERIALIZED_NAME_POD_IPV4_RANGE_UTILIZATION = "podIpv4RangeUtilization";
  @SerializedName(SERIALIZED_NAME_POD_IPV4_RANGE_UTILIZATION)
  private Double podIpv4RangeUtilization;

  public static final String SERIALIZED_NAME_POD_RANGE = "podRange";
  @SerializedName(SERIALIZED_NAME_POD_RANGE)
  private String podRange;

  public NodeNetworkConfig() {
  }

  public NodeNetworkConfig(
     Double podIpv4RangeUtilization
  ) {
    this();
    this.podIpv4RangeUtilization = podIpv4RangeUtilization;
  }

  public NodeNetworkConfig additionalNodeNetworkConfigs(List<AdditionalNodeNetworkConfig> additionalNodeNetworkConfigs) {
    this.additionalNodeNetworkConfigs = additionalNodeNetworkConfigs;
    return this;
  }

  public NodeNetworkConfig addAdditionalNodeNetworkConfigsItem(AdditionalNodeNetworkConfig additionalNodeNetworkConfigsItem) {
    if (this.additionalNodeNetworkConfigs == null) {
      this.additionalNodeNetworkConfigs = new ArrayList<>();
    }
    this.additionalNodeNetworkConfigs.add(additionalNodeNetworkConfigsItem);
    return this;
  }

  /**
   * We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface
   * @return additionalNodeNetworkConfigs
   */
  @javax.annotation.Nullable
  public List<AdditionalNodeNetworkConfig> getAdditionalNodeNetworkConfigs() {
    return additionalNodeNetworkConfigs;
  }

  public void setAdditionalNodeNetworkConfigs(List<AdditionalNodeNetworkConfig> additionalNodeNetworkConfigs) {
    this.additionalNodeNetworkConfigs = additionalNodeNetworkConfigs;
  }


  public NodeNetworkConfig additionalPodNetworkConfigs(List<AdditionalPodNetworkConfig> additionalPodNetworkConfigs) {
    this.additionalPodNetworkConfigs = additionalPodNetworkConfigs;
    return this;
  }

  public NodeNetworkConfig addAdditionalPodNetworkConfigsItem(AdditionalPodNetworkConfig additionalPodNetworkConfigsItem) {
    if (this.additionalPodNetworkConfigs == null) {
      this.additionalPodNetworkConfigs = new ArrayList<>();
    }
    this.additionalPodNetworkConfigs.add(additionalPodNetworkConfigsItem);
    return this;
  }

  /**
   * We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node
   * @return additionalPodNetworkConfigs
   */
  @javax.annotation.Nullable
  public List<AdditionalPodNetworkConfig> getAdditionalPodNetworkConfigs() {
    return additionalPodNetworkConfigs;
  }

  public void setAdditionalPodNetworkConfigs(List<AdditionalPodNetworkConfig> additionalPodNetworkConfigs) {
    this.additionalPodNetworkConfigs = additionalPodNetworkConfigs;
  }


  public NodeNetworkConfig createPodRange(Boolean createPodRange) {
    this.createPodRange = createPodRange;
    return this;
  }

  /**
   * Input only. Whether to create a new range for pod IPs in this node pool. Defaults are provided for &#x60;pod_range&#x60; and &#x60;pod_ipv4_cidr_block&#x60; if they are not specified. If neither &#x60;create_pod_range&#x60; or &#x60;pod_range&#x60; are specified, the cluster-level default (&#x60;ip_allocation_policy.cluster_ipv4_cidr_block&#x60;) is used. Only applicable if &#x60;ip_allocation_policy.use_ip_aliases&#x60; is true. This field cannot be changed after the node pool has been created.
   * @return createPodRange
   */
  @javax.annotation.Nullable
  public Boolean getCreatePodRange() {
    return createPodRange;
  }

  public void setCreatePodRange(Boolean createPodRange) {
    this.createPodRange = createPodRange;
  }


  public NodeNetworkConfig enablePrivateNodes(Boolean enablePrivateNodes) {
    this.enablePrivateNodes = enablePrivateNodes;
    return this;
  }

  /**
   * Whether nodes have internal IP addresses only. If enable_private_nodes is not specified, then the value is derived from cluster.privateClusterConfig.enablePrivateNodes
   * @return enablePrivateNodes
   */
  @javax.annotation.Nullable
  public Boolean getEnablePrivateNodes() {
    return enablePrivateNodes;
  }

  public void setEnablePrivateNodes(Boolean enablePrivateNodes) {
    this.enablePrivateNodes = enablePrivateNodes;
  }


  public NodeNetworkConfig networkPerformanceConfig(NetworkPerformanceConfig networkPerformanceConfig) {
    this.networkPerformanceConfig = networkPerformanceConfig;
    return this;
  }

  /**
   * Get networkPerformanceConfig
   * @return networkPerformanceConfig
   */
  @javax.annotation.Nullable
  public NetworkPerformanceConfig getNetworkPerformanceConfig() {
    return networkPerformanceConfig;
  }

  public void setNetworkPerformanceConfig(NetworkPerformanceConfig networkPerformanceConfig) {
    this.networkPerformanceConfig = networkPerformanceConfig;
  }


  public NodeNetworkConfig podCidrOverprovisionConfig(PodCIDROverprovisionConfig podCidrOverprovisionConfig) {
    this.podCidrOverprovisionConfig = podCidrOverprovisionConfig;
    return this;
  }

  /**
   * Get podCidrOverprovisionConfig
   * @return podCidrOverprovisionConfig
   */
  @javax.annotation.Nullable
  public PodCIDROverprovisionConfig getPodCidrOverprovisionConfig() {
    return podCidrOverprovisionConfig;
  }

  public void setPodCidrOverprovisionConfig(PodCIDROverprovisionConfig podCidrOverprovisionConfig) {
    this.podCidrOverprovisionConfig = podCidrOverprovisionConfig;
  }


  public NodeNetworkConfig podIpv4CidrBlock(String podIpv4CidrBlock) {
    this.podIpv4CidrBlock = podIpv4CidrBlock;
    return this;
  }

  /**
   * The IP address range for pod IPs in this node pool. Only applicable if &#x60;create_pod_range&#x60; is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. &#x60;/14&#x60;) to have a range chosen with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. &#x60;10.96.0.0/14&#x60;) to pick a specific range to use. Only applicable if &#x60;ip_allocation_policy.use_ip_aliases&#x60; is true. This field cannot be changed after the node pool has been created.
   * @return podIpv4CidrBlock
   */
  @javax.annotation.Nullable
  public String getPodIpv4CidrBlock() {
    return podIpv4CidrBlock;
  }

  public void setPodIpv4CidrBlock(String podIpv4CidrBlock) {
    this.podIpv4CidrBlock = podIpv4CidrBlock;
  }


  /**
   * Output only. [Output only] The utilization of the IPv4 range for the pod. The ratio is Usage/[Total number of IPs in the secondary range], Usage&#x3D;numNodes*numZones*podIPsPerNode.
   * @return podIpv4RangeUtilization
   */
  @javax.annotation.Nullable
  public Double getPodIpv4RangeUtilization() {
    return podIpv4RangeUtilization;
  }



  public NodeNetworkConfig podRange(String podRange) {
    this.podRange = podRange;
    return this;
  }

  /**
   * The ID of the secondary range for pod IPs. If &#x60;create_pod_range&#x60; is true, this ID is used for the new range. If &#x60;create_pod_range&#x60; is false, uses an existing secondary range with this ID. Only applicable if &#x60;ip_allocation_policy.use_ip_aliases&#x60; is true. This field cannot be changed after the node pool has been created.
   * @return podRange
   */
  @javax.annotation.Nullable
  public String getPodRange() {
    return podRange;
  }

  public void setPodRange(String podRange) {
    this.podRange = podRange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeNetworkConfig nodeNetworkConfig = (NodeNetworkConfig) o;
    return Objects.equals(this.additionalNodeNetworkConfigs, nodeNetworkConfig.additionalNodeNetworkConfigs) &&
        Objects.equals(this.additionalPodNetworkConfigs, nodeNetworkConfig.additionalPodNetworkConfigs) &&
        Objects.equals(this.createPodRange, nodeNetworkConfig.createPodRange) &&
        Objects.equals(this.enablePrivateNodes, nodeNetworkConfig.enablePrivateNodes) &&
        Objects.equals(this.networkPerformanceConfig, nodeNetworkConfig.networkPerformanceConfig) &&
        Objects.equals(this.podCidrOverprovisionConfig, nodeNetworkConfig.podCidrOverprovisionConfig) &&
        Objects.equals(this.podIpv4CidrBlock, nodeNetworkConfig.podIpv4CidrBlock) &&
        Objects.equals(this.podIpv4RangeUtilization, nodeNetworkConfig.podIpv4RangeUtilization) &&
        Objects.equals(this.podRange, nodeNetworkConfig.podRange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalNodeNetworkConfigs, additionalPodNetworkConfigs, createPodRange, enablePrivateNodes, networkPerformanceConfig, podCidrOverprovisionConfig, podIpv4CidrBlock, podIpv4RangeUtilization, podRange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeNetworkConfig {\n");
    sb.append("    additionalNodeNetworkConfigs: ").append(toIndentedString(additionalNodeNetworkConfigs)).append("\n");
    sb.append("    additionalPodNetworkConfigs: ").append(toIndentedString(additionalPodNetworkConfigs)).append("\n");
    sb.append("    createPodRange: ").append(toIndentedString(createPodRange)).append("\n");
    sb.append("    enablePrivateNodes: ").append(toIndentedString(enablePrivateNodes)).append("\n");
    sb.append("    networkPerformanceConfig: ").append(toIndentedString(networkPerformanceConfig)).append("\n");
    sb.append("    podCidrOverprovisionConfig: ").append(toIndentedString(podCidrOverprovisionConfig)).append("\n");
    sb.append("    podIpv4CidrBlock: ").append(toIndentedString(podIpv4CidrBlock)).append("\n");
    sb.append("    podIpv4RangeUtilization: ").append(toIndentedString(podIpv4RangeUtilization)).append("\n");
    sb.append("    podRange: ").append(toIndentedString(podRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalNodeNetworkConfigs");
    openapiFields.add("additionalPodNetworkConfigs");
    openapiFields.add("createPodRange");
    openapiFields.add("enablePrivateNodes");
    openapiFields.add("networkPerformanceConfig");
    openapiFields.add("podCidrOverprovisionConfig");
    openapiFields.add("podIpv4CidrBlock");
    openapiFields.add("podIpv4RangeUtilization");
    openapiFields.add("podRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NodeNetworkConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodeNetworkConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeNetworkConfig is not found in the empty JSON string", NodeNetworkConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NodeNetworkConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeNetworkConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalNodeNetworkConfigs") != null && !jsonObj.get("additionalNodeNetworkConfigs").isJsonNull()) {
        JsonArray jsonArrayadditionalNodeNetworkConfigs = jsonObj.getAsJsonArray("additionalNodeNetworkConfigs");
        if (jsonArrayadditionalNodeNetworkConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalNodeNetworkConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalNodeNetworkConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("additionalNodeNetworkConfigs").toString()));
          }

          // validate the optional field `additionalNodeNetworkConfigs` (array)
          for (int i = 0; i < jsonArrayadditionalNodeNetworkConfigs.size(); i++) {
            AdditionalNodeNetworkConfig.validateJsonElement(jsonArrayadditionalNodeNetworkConfigs.get(i));
          };
        }
      }
      if (jsonObj.get("additionalPodNetworkConfigs") != null && !jsonObj.get("additionalPodNetworkConfigs").isJsonNull()) {
        JsonArray jsonArrayadditionalPodNetworkConfigs = jsonObj.getAsJsonArray("additionalPodNetworkConfigs");
        if (jsonArrayadditionalPodNetworkConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalPodNetworkConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalPodNetworkConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("additionalPodNetworkConfigs").toString()));
          }

          // validate the optional field `additionalPodNetworkConfigs` (array)
          for (int i = 0; i < jsonArrayadditionalPodNetworkConfigs.size(); i++) {
            AdditionalPodNetworkConfig.validateJsonElement(jsonArrayadditionalPodNetworkConfigs.get(i));
          };
        }
      }
      // validate the optional field `networkPerformanceConfig`
      if (jsonObj.get("networkPerformanceConfig") != null && !jsonObj.get("networkPerformanceConfig").isJsonNull()) {
        NetworkPerformanceConfig.validateJsonElement(jsonObj.get("networkPerformanceConfig"));
      }
      // validate the optional field `podCidrOverprovisionConfig`
      if (jsonObj.get("podCidrOverprovisionConfig") != null && !jsonObj.get("podCidrOverprovisionConfig").isJsonNull()) {
        PodCIDROverprovisionConfig.validateJsonElement(jsonObj.get("podCidrOverprovisionConfig"));
      }
      if ((jsonObj.get("podIpv4CidrBlock") != null && !jsonObj.get("podIpv4CidrBlock").isJsonNull()) && !jsonObj.get("podIpv4CidrBlock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `podIpv4CidrBlock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("podIpv4CidrBlock").toString()));
      }
      if ((jsonObj.get("podRange") != null && !jsonObj.get("podRange").isJsonNull()) && !jsonObj.get("podRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `podRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("podRange").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeNetworkConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeNetworkConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeNetworkConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeNetworkConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeNetworkConfig>() {
           @Override
           public void write(JsonWriter out, NodeNetworkConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeNetworkConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NodeNetworkConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NodeNetworkConfig
   * @throws IOException if the JSON string is invalid with respect to NodeNetworkConfig
   */
  public static NodeNetworkConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeNetworkConfig.class);
  }

  /**
   * Convert an instance of NodeNetworkConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

