/*
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NodeManagement;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SetNodePoolManagementRequest sets the node management properties of a node pool.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:25.935819-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SetNodePoolManagementRequest {
  public static final String SERIALIZED_NAME_CLUSTER_ID = "clusterId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CLUSTER_ID)
  private String clusterId;

  public static final String SERIALIZED_NAME_MANAGEMENT = "management";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT)
  private NodeManagement management;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_POOL_ID = "nodePoolId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_NODE_POOL_ID)
  private String nodePoolId;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ZONE)
  private String zone;

  public SetNodePoolManagementRequest() {
  }

  @Deprecated
  public SetNodePoolManagementRequest clusterId(String clusterId) {
    this.clusterId = clusterId;
    return this;
  }

  /**
   * Deprecated. The name of the cluster to update. This field has been deprecated and replaced by the name field.
   * @return clusterId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getClusterId() {
    return clusterId;
  }

  @Deprecated
  public void setClusterId(String clusterId) {
    this.clusterId = clusterId;
  }


  public SetNodePoolManagementRequest management(NodeManagement management) {
    this.management = management;
    return this;
  }

  /**
   * Get management
   * @return management
   */
  @javax.annotation.Nullable
  public NodeManagement getManagement() {
    return management;
  }

  public void setManagement(NodeManagement management) {
    this.management = management;
  }


  public SetNodePoolManagementRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name (project, location, cluster, node pool id) of the node pool to set management properties. Specified in the format &#x60;projects/_*_/locations/_*_/clusters/_*_/nodePools/_*&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Deprecated
  public SetNodePoolManagementRequest nodePoolId(String nodePoolId) {
    this.nodePoolId = nodePoolId;
    return this;
  }

  /**
   * Deprecated. The name of the node pool to update. This field has been deprecated and replaced by the name field.
   * @return nodePoolId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getNodePoolId() {
    return nodePoolId;
  }

  @Deprecated
  public void setNodePoolId(String nodePoolId) {
    this.nodePoolId = nodePoolId;
  }


  @Deprecated
  public SetNodePoolManagementRequest projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.
   * @return projectId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  @Deprecated
  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  @Deprecated
  public SetNodePoolManagementRequest zone(String zone) {
    this.zone = zone;
    return this;
  }

  /**
   * Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.
   * @return zone
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getZone() {
    return zone;
  }

  @Deprecated
  public void setZone(String zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SetNodePoolManagementRequest setNodePoolManagementRequest = (SetNodePoolManagementRequest) o;
    return Objects.equals(this.clusterId, setNodePoolManagementRequest.clusterId) &&
        Objects.equals(this.management, setNodePoolManagementRequest.management) &&
        Objects.equals(this.name, setNodePoolManagementRequest.name) &&
        Objects.equals(this.nodePoolId, setNodePoolManagementRequest.nodePoolId) &&
        Objects.equals(this.projectId, setNodePoolManagementRequest.projectId) &&
        Objects.equals(this.zone, setNodePoolManagementRequest.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterId, management, name, nodePoolId, projectId, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SetNodePoolManagementRequest {\n");
    sb.append("    clusterId: ").append(toIndentedString(clusterId)).append("\n");
    sb.append("    management: ").append(toIndentedString(management)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodePoolId: ").append(toIndentedString(nodePoolId)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clusterId");
    openapiFields.add("management");
    openapiFields.add("name");
    openapiFields.add("nodePoolId");
    openapiFields.add("projectId");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SetNodePoolManagementRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SetNodePoolManagementRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SetNodePoolManagementRequest is not found in the empty JSON string", SetNodePoolManagementRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SetNodePoolManagementRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SetNodePoolManagementRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clusterId") != null && !jsonObj.get("clusterId").isJsonNull()) && !jsonObj.get("clusterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterId").toString()));
      }
      // validate the optional field `management`
      if (jsonObj.get("management") != null && !jsonObj.get("management").isJsonNull()) {
        NodeManagement.validateJsonElement(jsonObj.get("management"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nodePoolId") != null && !jsonObj.get("nodePoolId").isJsonNull()) && !jsonObj.get("nodePoolId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodePoolId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodePoolId").toString()));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if ((jsonObj.get("zone") != null && !jsonObj.get("zone").isJsonNull()) && !jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SetNodePoolManagementRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SetNodePoolManagementRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SetNodePoolManagementRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SetNodePoolManagementRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SetNodePoolManagementRequest>() {
           @Override
           public void write(JsonWriter out, SetNodePoolManagementRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SetNodePoolManagementRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SetNodePoolManagementRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SetNodePoolManagementRequest
   * @throws IOException if the JSON string is invalid with respect to SetNodePoolManagementRequest
   */
  public static SetNodePoolManagementRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SetNodePoolManagementRequest.class);
  }

  /**
   * Convert an instance of SetNodePoolManagementRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

