/*
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AddonsConfig;
import org.openapitools.client.model.AuthenticatorGroupsConfig;
import org.openapitools.client.model.Autopilot;
import org.openapitools.client.model.BinaryAuthorization;
import org.openapitools.client.model.ClusterAutoscaling;
import org.openapitools.client.model.ConfidentialNodes;
import org.openapitools.client.model.CostManagementConfig;
import org.openapitools.client.model.DatabaseEncryption;
import org.openapitools.client.model.EnterpriseConfig;
import org.openapitools.client.model.Fleet;
import org.openapitools.client.model.IPAllocationPolicy;
import org.openapitools.client.model.IdentityServiceConfig;
import org.openapitools.client.model.K8sBetaAPIConfig;
import org.openapitools.client.model.LegacyAbac;
import org.openapitools.client.model.LoggingConfig;
import org.openapitools.client.model.MaintenancePolicy;
import org.openapitools.client.model.MasterAuth;
import org.openapitools.client.model.MasterAuthorizedNetworksConfig;
import org.openapitools.client.model.MaxPodsConstraint;
import org.openapitools.client.model.MeshCertificates;
import org.openapitools.client.model.MonitoringConfig;
import org.openapitools.client.model.NetworkConfig;
import org.openapitools.client.model.NetworkPolicy;
import org.openapitools.client.model.NodeConfig;
import org.openapitools.client.model.NodePool;
import org.openapitools.client.model.NodePoolAutoConfig;
import org.openapitools.client.model.NodePoolDefaults;
import org.openapitools.client.model.NotificationConfig;
import org.openapitools.client.model.ParentProductConfig;
import org.openapitools.client.model.PrivateClusterConfig;
import org.openapitools.client.model.ReleaseChannel;
import org.openapitools.client.model.ResourceUsageExportConfig;
import org.openapitools.client.model.SecurityPostureConfig;
import org.openapitools.client.model.ShieldedNodes;
import org.openapitools.client.model.StatusCondition;
import org.openapitools.client.model.VerticalPodAutoscaling;
import org.openapitools.client.model.WorkloadIdentityConfig;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Cluster
 */
public class ClusterTest {
    private final Cluster model = new Cluster();

    /**
     * Model tests for Cluster
     */
    @Test
    public void testCluster() {
        // TODO: test Cluster
    }

    /**
     * Test the property 'addonsConfig'
     */
    @Test
    public void addonsConfigTest() {
        // TODO: test addonsConfig
    }

    /**
     * Test the property 'authenticatorGroupsConfig'
     */
    @Test
    public void authenticatorGroupsConfigTest() {
        // TODO: test authenticatorGroupsConfig
    }

    /**
     * Test the property 'autopilot'
     */
    @Test
    public void autopilotTest() {
        // TODO: test autopilot
    }

    /**
     * Test the property 'autoscaling'
     */
    @Test
    public void autoscalingTest() {
        // TODO: test autoscaling
    }

    /**
     * Test the property 'binaryAuthorization'
     */
    @Test
    public void binaryAuthorizationTest() {
        // TODO: test binaryAuthorization
    }

    /**
     * Test the property 'clusterIpv4Cidr'
     */
    @Test
    public void clusterIpv4CidrTest() {
        // TODO: test clusterIpv4Cidr
    }

    /**
     * Test the property 'conditions'
     */
    @Test
    public void conditionsTest() {
        // TODO: test conditions
    }

    /**
     * Test the property 'confidentialNodes'
     */
    @Test
    public void confidentialNodesTest() {
        // TODO: test confidentialNodes
    }

    /**
     * Test the property 'costManagementConfig'
     */
    @Test
    public void costManagementConfigTest() {
        // TODO: test costManagementConfig
    }

    /**
     * Test the property 'createTime'
     */
    @Test
    public void createTimeTest() {
        // TODO: test createTime
    }

    /**
     * Test the property 'currentMasterVersion'
     */
    @Test
    public void currentMasterVersionTest() {
        // TODO: test currentMasterVersion
    }

    /**
     * Test the property 'currentNodeCount'
     */
    @Test
    public void currentNodeCountTest() {
        // TODO: test currentNodeCount
    }

    /**
     * Test the property 'currentNodeVersion'
     */
    @Test
    public void currentNodeVersionTest() {
        // TODO: test currentNodeVersion
    }

    /**
     * Test the property 'databaseEncryption'
     */
    @Test
    public void databaseEncryptionTest() {
        // TODO: test databaseEncryption
    }

    /**
     * Test the property 'defaultMaxPodsConstraint'
     */
    @Test
    public void defaultMaxPodsConstraintTest() {
        // TODO: test defaultMaxPodsConstraint
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'enableK8sBetaApis'
     */
    @Test
    public void enableK8sBetaApisTest() {
        // TODO: test enableK8sBetaApis
    }

    /**
     * Test the property 'enableKubernetesAlpha'
     */
    @Test
    public void enableKubernetesAlphaTest() {
        // TODO: test enableKubernetesAlpha
    }

    /**
     * Test the property 'enableTpu'
     */
    @Test
    public void enableTpuTest() {
        // TODO: test enableTpu
    }

    /**
     * Test the property 'endpoint'
     */
    @Test
    public void endpointTest() {
        // TODO: test endpoint
    }

    /**
     * Test the property 'enterpriseConfig'
     */
    @Test
    public void enterpriseConfigTest() {
        // TODO: test enterpriseConfig
    }

    /**
     * Test the property 'etag'
     */
    @Test
    public void etagTest() {
        // TODO: test etag
    }

    /**
     * Test the property 'expireTime'
     */
    @Test
    public void expireTimeTest() {
        // TODO: test expireTime
    }

    /**
     * Test the property 'fleet'
     */
    @Test
    public void fleetTest() {
        // TODO: test fleet
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'identityServiceConfig'
     */
    @Test
    public void identityServiceConfigTest() {
        // TODO: test identityServiceConfig
    }

    /**
     * Test the property 'initialClusterVersion'
     */
    @Test
    public void initialClusterVersionTest() {
        // TODO: test initialClusterVersion
    }

    /**
     * Test the property 'initialNodeCount'
     */
    @Test
    public void initialNodeCountTest() {
        // TODO: test initialNodeCount
    }

    /**
     * Test the property 'instanceGroupUrls'
     */
    @Test
    public void instanceGroupUrlsTest() {
        // TODO: test instanceGroupUrls
    }

    /**
     * Test the property 'ipAllocationPolicy'
     */
    @Test
    public void ipAllocationPolicyTest() {
        // TODO: test ipAllocationPolicy
    }

    /**
     * Test the property 'labelFingerprint'
     */
    @Test
    public void labelFingerprintTest() {
        // TODO: test labelFingerprint
    }

    /**
     * Test the property 'legacyAbac'
     */
    @Test
    public void legacyAbacTest() {
        // TODO: test legacyAbac
    }

    /**
     * Test the property 'location'
     */
    @Test
    public void locationTest() {
        // TODO: test location
    }

    /**
     * Test the property 'locations'
     */
    @Test
    public void locationsTest() {
        // TODO: test locations
    }

    /**
     * Test the property 'loggingConfig'
     */
    @Test
    public void loggingConfigTest() {
        // TODO: test loggingConfig
    }

    /**
     * Test the property 'loggingService'
     */
    @Test
    public void loggingServiceTest() {
        // TODO: test loggingService
    }

    /**
     * Test the property 'maintenancePolicy'
     */
    @Test
    public void maintenancePolicyTest() {
        // TODO: test maintenancePolicy
    }

    /**
     * Test the property 'masterAuth'
     */
    @Test
    public void masterAuthTest() {
        // TODO: test masterAuth
    }

    /**
     * Test the property 'masterAuthorizedNetworksConfig'
     */
    @Test
    public void masterAuthorizedNetworksConfigTest() {
        // TODO: test masterAuthorizedNetworksConfig
    }

    /**
     * Test the property 'meshCertificates'
     */
    @Test
    public void meshCertificatesTest() {
        // TODO: test meshCertificates
    }

    /**
     * Test the property 'monitoringConfig'
     */
    @Test
    public void monitoringConfigTest() {
        // TODO: test monitoringConfig
    }

    /**
     * Test the property 'monitoringService'
     */
    @Test
    public void monitoringServiceTest() {
        // TODO: test monitoringService
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'network'
     */
    @Test
    public void networkTest() {
        // TODO: test network
    }

    /**
     * Test the property 'networkConfig'
     */
    @Test
    public void networkConfigTest() {
        // TODO: test networkConfig
    }

    /**
     * Test the property 'networkPolicy'
     */
    @Test
    public void networkPolicyTest() {
        // TODO: test networkPolicy
    }

    /**
     * Test the property 'nodeConfig'
     */
    @Test
    public void nodeConfigTest() {
        // TODO: test nodeConfig
    }

    /**
     * Test the property 'nodeIpv4CidrSize'
     */
    @Test
    public void nodeIpv4CidrSizeTest() {
        // TODO: test nodeIpv4CidrSize
    }

    /**
     * Test the property 'nodePoolAutoConfig'
     */
    @Test
    public void nodePoolAutoConfigTest() {
        // TODO: test nodePoolAutoConfig
    }

    /**
     * Test the property 'nodePoolDefaults'
     */
    @Test
    public void nodePoolDefaultsTest() {
        // TODO: test nodePoolDefaults
    }

    /**
     * Test the property 'nodePools'
     */
    @Test
    public void nodePoolsTest() {
        // TODO: test nodePools
    }

    /**
     * Test the property 'notificationConfig'
     */
    @Test
    public void notificationConfigTest() {
        // TODO: test notificationConfig
    }

    /**
     * Test the property 'parentProductConfig'
     */
    @Test
    public void parentProductConfigTest() {
        // TODO: test parentProductConfig
    }

    /**
     * Test the property 'privateClusterConfig'
     */
    @Test
    public void privateClusterConfigTest() {
        // TODO: test privateClusterConfig
    }

    /**
     * Test the property 'releaseChannel'
     */
    @Test
    public void releaseChannelTest() {
        // TODO: test releaseChannel
    }

    /**
     * Test the property 'resourceLabels'
     */
    @Test
    public void resourceLabelsTest() {
        // TODO: test resourceLabels
    }

    /**
     * Test the property 'resourceUsageExportConfig'
     */
    @Test
    public void resourceUsageExportConfigTest() {
        // TODO: test resourceUsageExportConfig
    }

    /**
     * Test the property 'securityPostureConfig'
     */
    @Test
    public void securityPostureConfigTest() {
        // TODO: test securityPostureConfig
    }

    /**
     * Test the property 'selfLink'
     */
    @Test
    public void selfLinkTest() {
        // TODO: test selfLink
    }

    /**
     * Test the property 'servicesIpv4Cidr'
     */
    @Test
    public void servicesIpv4CidrTest() {
        // TODO: test servicesIpv4Cidr
    }

    /**
     * Test the property 'shieldedNodes'
     */
    @Test
    public void shieldedNodesTest() {
        // TODO: test shieldedNodes
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'statusMessage'
     */
    @Test
    public void statusMessageTest() {
        // TODO: test statusMessage
    }

    /**
     * Test the property 'subnetwork'
     */
    @Test
    public void subnetworkTest() {
        // TODO: test subnetwork
    }

    /**
     * Test the property 'tpuIpv4CidrBlock'
     */
    @Test
    public void tpuIpv4CidrBlockTest() {
        // TODO: test tpuIpv4CidrBlock
    }

    /**
     * Test the property 'verticalPodAutoscaling'
     */
    @Test
    public void verticalPodAutoscalingTest() {
        // TODO: test verticalPodAutoscaling
    }

    /**
     * Test the property 'workloadIdentityConfig'
     */
    @Test
    public void workloadIdentityConfigTest() {
        // TODO: test workloadIdentityConfig
    }

    /**
     * Test the property 'zone'
     */
    @Test
    public void zoneTest() {
        // TODO: test zone
    }

}
