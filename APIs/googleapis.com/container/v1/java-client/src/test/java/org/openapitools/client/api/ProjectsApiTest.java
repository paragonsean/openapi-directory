/*
 * Kubernetes Engine API
 * Builds and manages container-based applications, powered by the open source Kubernetes technology.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CancelOperationRequest;
import org.openapitools.client.model.CheckAutopilotCompatibilityResponse;
import org.openapitools.client.model.Cluster;
import org.openapitools.client.model.CompleteIPRotationRequest;
import org.openapitools.client.model.CreateClusterRequest;
import org.openapitools.client.model.CreateNodePoolRequest;
import org.openapitools.client.model.GetJSONWebKeysResponse;
import org.openapitools.client.model.GetOpenIDConfigResponse;
import org.openapitools.client.model.ListClustersResponse;
import org.openapitools.client.model.ListNodePoolsResponse;
import org.openapitools.client.model.ListOperationsResponse;
import org.openapitools.client.model.ListUsableSubnetworksResponse;
import org.openapitools.client.model.NodePool;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.RollbackNodePoolUpgradeRequest;
import org.openapitools.client.model.ServerConfig;
import org.openapitools.client.model.SetAddonsConfigRequest;
import org.openapitools.client.model.SetLabelsRequest;
import org.openapitools.client.model.SetLegacyAbacRequest;
import org.openapitools.client.model.SetLocationsRequest;
import org.openapitools.client.model.SetLoggingServiceRequest;
import org.openapitools.client.model.SetMaintenancePolicyRequest;
import org.openapitools.client.model.SetMasterAuthRequest;
import org.openapitools.client.model.SetMonitoringServiceRequest;
import org.openapitools.client.model.SetNetworkPolicyRequest;
import org.openapitools.client.model.SetNodePoolAutoscalingRequest;
import org.openapitools.client.model.SetNodePoolManagementRequest;
import org.openapitools.client.model.SetNodePoolSizeRequest;
import org.openapitools.client.model.StartIPRotationRequest;
import org.openapitools.client.model.UpdateClusterRequest;
import org.openapitools.client.model.UpdateMasterRequest;
import org.openapitools.client.model.UpdateNodePoolRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Lists subnetworks that are usable for creating clusters in a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsAggregatedUsableSubnetworksListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListUsableSubnetworksResponse response = api.containerProjectsAggregatedUsableSubnetworksList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Checks the cluster compatibility with Autopilot mode, and returns a list of compatibility issues.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersCheckAutopilotCompatibilityTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CheckAutopilotCompatibilityResponse response = api.containerProjectsLocationsClustersCheckAutopilotCompatibility(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Completes master IP rotation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersCompleteIpRotationTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CompleteIPRotationRequest completeIPRotationRequest = null;
        Operation response = api.containerProjectsLocationsClustersCompleteIpRotation(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, completeIPRotationRequest);
        // TODO: test validations
    }

    /**
     * Creates a cluster, consisting of the specified number and type of Google Compute Engine instances. By default, the cluster is created in the project&#39;s [default network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks). One firewall is added for the cluster. After cluster creation, the Kubelet creates routes for each node to allow the containers on that node to communicate with all other instances in the cluster. Finally, an entry is added to the project&#39;s global metadata indicating which CIDR range the cluster is using.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CreateClusterRequest createClusterRequest = null;
        Operation response = api.containerProjectsLocationsClustersCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, createClusterRequest);
        // TODO: test validations
    }

    /**
     * Gets the public component of the cluster signing keys in JSON Web Key format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersGetJwksTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GetJSONWebKeysResponse response = api.containerProjectsLocationsClustersGetJwks(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all clusters owned by a project in either the specified zone or all zones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String projectId = null;
        String zone = null;
        ListClustersResponse response = api.containerProjectsLocationsClustersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, projectId, zone);
        // TODO: test validations
    }

    /**
     * CompleteNodePoolUpgrade will signal an on-going node pool upgrade to complete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersNodePoolsCompleteUpgradeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.containerProjectsLocationsClustersNodePoolsCompleteUpgrade(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Creates a node pool for a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersNodePoolsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CreateNodePoolRequest createNodePoolRequest = null;
        Operation response = api.containerProjectsLocationsClustersNodePoolsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, createNodePoolRequest);
        // TODO: test validations
    }

    /**
     * Deletes a node pool from a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersNodePoolsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clusterId = null;
        String nodePoolId = null;
        String projectId = null;
        String zone = null;
        Operation response = api.containerProjectsLocationsClustersNodePoolsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clusterId, nodePoolId, projectId, zone);
        // TODO: test validations
    }

    /**
     * Lists the node pools for a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersNodePoolsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String clusterId = null;
        String projectId = null;
        String zone = null;
        ListNodePoolsResponse response = api.containerProjectsLocationsClustersNodePoolsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clusterId, projectId, zone);
        // TODO: test validations
    }

    /**
     * Rolls back a previously Aborted or Failed NodePool upgrade. This makes no changes if the last upgrade successfully completed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersNodePoolsRollbackTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RollbackNodePoolUpgradeRequest rollbackNodePoolUpgradeRequest = null;
        Operation response = api.containerProjectsLocationsClustersNodePoolsRollback(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, rollbackNodePoolUpgradeRequest);
        // TODO: test validations
    }

    /**
     * Sets the autoscaling settings for the specified node pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersNodePoolsSetAutoscalingTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetNodePoolAutoscalingRequest setNodePoolAutoscalingRequest = null;
        Operation response = api.containerProjectsLocationsClustersNodePoolsSetAutoscaling(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setNodePoolAutoscalingRequest);
        // TODO: test validations
    }

    /**
     * Sets the NodeManagement options for a node pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersNodePoolsSetManagementTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetNodePoolManagementRequest setNodePoolManagementRequest = null;
        Operation response = api.containerProjectsLocationsClustersNodePoolsSetManagement(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setNodePoolManagementRequest);
        // TODO: test validations
    }

    /**
     * Sets the size for a specific node pool. The new size will be used for all replicas, including future replicas created by modifying NodePool.locations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersNodePoolsSetSizeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetNodePoolSizeRequest setNodePoolSizeRequest = null;
        Operation response = api.containerProjectsLocationsClustersNodePoolsSetSize(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setNodePoolSizeRequest);
        // TODO: test validations
    }

    /**
     * Updates the version and/or image type for the specified node pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersNodePoolsUpdateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UpdateNodePoolRequest updateNodePoolRequest = null;
        Operation response = api.containerProjectsLocationsClustersNodePoolsUpdate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateNodePoolRequest);
        // TODO: test validations
    }

    /**
     * Sets the addons for a specific cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersSetAddonsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetAddonsConfigRequest setAddonsConfigRequest = null;
        Operation response = api.containerProjectsLocationsClustersSetAddons(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setAddonsConfigRequest);
        // TODO: test validations
    }

    /**
     * Enables or disables the ABAC authorization mechanism on a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersSetLegacyAbacTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetLegacyAbacRequest setLegacyAbacRequest = null;
        Operation response = api.containerProjectsLocationsClustersSetLegacyAbac(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setLegacyAbacRequest);
        // TODO: test validations
    }

    /**
     * Sets the locations for a specific cluster. Deprecated. Use [projects.locations.clusters.update](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/update) instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersSetLocationsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetLocationsRequest setLocationsRequest = null;
        Operation response = api.containerProjectsLocationsClustersSetLocations(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setLocationsRequest);
        // TODO: test validations
    }

    /**
     * Sets the logging service for a specific cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersSetLoggingTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetLoggingServiceRequest setLoggingServiceRequest = null;
        Operation response = api.containerProjectsLocationsClustersSetLogging(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setLoggingServiceRequest);
        // TODO: test validations
    }

    /**
     * Sets the maintenance policy for a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersSetMaintenancePolicyTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetMaintenancePolicyRequest setMaintenancePolicyRequest = null;
        Operation response = api.containerProjectsLocationsClustersSetMaintenancePolicy(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setMaintenancePolicyRequest);
        // TODO: test validations
    }

    /**
     * Sets master auth materials. Currently supports changing the admin password or a specific cluster, either via password generation or explicitly setting the password.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersSetMasterAuthTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetMasterAuthRequest setMasterAuthRequest = null;
        Operation response = api.containerProjectsLocationsClustersSetMasterAuth(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setMasterAuthRequest);
        // TODO: test validations
    }

    /**
     * Sets the monitoring service for a specific cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersSetMonitoringTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetMonitoringServiceRequest setMonitoringServiceRequest = null;
        Operation response = api.containerProjectsLocationsClustersSetMonitoring(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setMonitoringServiceRequest);
        // TODO: test validations
    }

    /**
     * Enables or disables Network Policy for a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersSetNetworkPolicyTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetNetworkPolicyRequest setNetworkPolicyRequest = null;
        Operation response = api.containerProjectsLocationsClustersSetNetworkPolicy(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setNetworkPolicyRequest);
        // TODO: test validations
    }

    /**
     * Sets labels on a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersSetResourceLabelsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetLabelsRequest setLabelsRequest = null;
        Operation response = api.containerProjectsLocationsClustersSetResourceLabels(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setLabelsRequest);
        // TODO: test validations
    }

    /**
     * Starts master IP rotation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersStartIpRotationTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        StartIPRotationRequest startIPRotationRequest = null;
        Operation response = api.containerProjectsLocationsClustersStartIpRotation(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, startIPRotationRequest);
        // TODO: test validations
    }

    /**
     * Updates the master for a specific cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersUpdateMasterTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UpdateMasterRequest updateMasterRequest = null;
        Operation response = api.containerProjectsLocationsClustersUpdateMaster(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMasterRequest);
        // TODO: test validations
    }

    /**
     * Gets the OIDC discovery document for the cluster. See the [OpenID Connect Discovery 1.0 specification](https://openid.net/specs/openid-connect-discovery-1_0.html) for details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsClustersWellKnownGetOpenidConfigurationTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GetOpenIDConfigResponse response = api.containerProjectsLocationsClustersWellKnownGetOpenidConfiguration(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns configuration info about the Google Kubernetes Engine service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsGetServerConfigTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String projectId = null;
        String zone = null;
        ServerConfig response = api.containerProjectsLocationsGetServerConfig(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, projectId, zone);
        // TODO: test validations
    }

    /**
     * Cancels the specified operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsOperationsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CancelOperationRequest cancelOperationRequest = null;
        Object response = api.containerProjectsLocationsOperationsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, cancelOperationRequest);
        // TODO: test validations
    }

    /**
     * Gets the specified operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsOperationsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String operationId = null;
        String projectId = null;
        String zone = null;
        Operation response = api.containerProjectsLocationsOperationsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, operationId, projectId, zone);
        // TODO: test validations
    }

    /**
     * Lists all operations in a project in a specific zone or all zones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsLocationsOperationsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String projectId = null;
        String zone = null;
        ListOperationsResponse response = api.containerProjectsLocationsOperationsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, projectId, zone);
        // TODO: test validations
    }

    /**
     * Sets the addons for a specific cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersAddonsTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetAddonsConfigRequest setAddonsConfigRequest = null;
        Operation response = api.containerProjectsZonesClustersAddons(projectId, zone, clusterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setAddonsConfigRequest);
        // TODO: test validations
    }

    /**
     * Completes master IP rotation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersCompleteIpRotationTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CompleteIPRotationRequest completeIPRotationRequest = null;
        Operation response = api.containerProjectsZonesClustersCompleteIpRotation(projectId, zone, clusterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, completeIPRotationRequest);
        // TODO: test validations
    }

    /**
     * Creates a cluster, consisting of the specified number and type of Google Compute Engine instances. By default, the cluster is created in the project&#39;s [default network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks). One firewall is added for the cluster. After cluster creation, the Kubelet creates routes for each node to allow the containers on that node to communicate with all other instances in the cluster. Finally, an entry is added to the project&#39;s global metadata indicating which CIDR range the cluster is using.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersCreateTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CreateClusterRequest createClusterRequest = null;
        Operation response = api.containerProjectsZonesClustersCreate(projectId, zone, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, createClusterRequest);
        // TODO: test validations
    }

    /**
     * Deletes the cluster, including the Kubernetes endpoint and all worker nodes. Firewalls and routes that were configured during cluster creation are also deleted. Other Google Compute Engine resources that might be in use by the cluster, such as load balancer resources, are not deleted if they weren&#39;t present when the cluster was initially created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersDeleteTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String name = null;
        Operation response = api.containerProjectsZonesClustersDelete(projectId, zone, clusterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, name);
        // TODO: test validations
    }

    /**
     * Gets the details of a specific cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersGetTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String name = null;
        Cluster response = api.containerProjectsZonesClustersGet(projectId, zone, clusterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, name);
        // TODO: test validations
    }

    /**
     * Enables or disables the ABAC authorization mechanism on a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersLegacyAbacTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetLegacyAbacRequest setLegacyAbacRequest = null;
        Operation response = api.containerProjectsZonesClustersLegacyAbac(projectId, zone, clusterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setLegacyAbacRequest);
        // TODO: test validations
    }

    /**
     * Lists all clusters owned by a project in either the specified zone or all zones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersListTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String parent = null;
        ListClustersResponse response = api.containerProjectsZonesClustersList(projectId, zone, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, parent);
        // TODO: test validations
    }

    /**
     * Sets the locations for a specific cluster. Deprecated. Use [projects.locations.clusters.update](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/update) instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersLocationsTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetLocationsRequest setLocationsRequest = null;
        Operation response = api.containerProjectsZonesClustersLocations(projectId, zone, clusterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setLocationsRequest);
        // TODO: test validations
    }

    /**
     * Sets the logging service for a specific cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersLoggingTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetLoggingServiceRequest setLoggingServiceRequest = null;
        Operation response = api.containerProjectsZonesClustersLogging(projectId, zone, clusterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setLoggingServiceRequest);
        // TODO: test validations
    }

    /**
     * Updates the master for a specific cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersMasterTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UpdateMasterRequest updateMasterRequest = null;
        Operation response = api.containerProjectsZonesClustersMaster(projectId, zone, clusterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMasterRequest);
        // TODO: test validations
    }

    /**
     * Sets the monitoring service for a specific cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersMonitoringTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetMonitoringServiceRequest setMonitoringServiceRequest = null;
        Operation response = api.containerProjectsZonesClustersMonitoring(projectId, zone, clusterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setMonitoringServiceRequest);
        // TODO: test validations
    }

    /**
     * Sets the autoscaling settings for the specified node pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersNodePoolsAutoscalingTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String nodePoolId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetNodePoolAutoscalingRequest setNodePoolAutoscalingRequest = null;
        Operation response = api.containerProjectsZonesClustersNodePoolsAutoscaling(projectId, zone, clusterId, nodePoolId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setNodePoolAutoscalingRequest);
        // TODO: test validations
    }

    /**
     * Creates a node pool for a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersNodePoolsCreateTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CreateNodePoolRequest createNodePoolRequest = null;
        Operation response = api.containerProjectsZonesClustersNodePoolsCreate(projectId, zone, clusterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, createNodePoolRequest);
        // TODO: test validations
    }

    /**
     * Deletes a node pool from a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersNodePoolsDeleteTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String nodePoolId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String name = null;
        Operation response = api.containerProjectsZonesClustersNodePoolsDelete(projectId, zone, clusterId, nodePoolId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, name);
        // TODO: test validations
    }

    /**
     * Retrieves the requested node pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersNodePoolsGetTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String nodePoolId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String name = null;
        NodePool response = api.containerProjectsZonesClustersNodePoolsGet(projectId, zone, clusterId, nodePoolId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, name);
        // TODO: test validations
    }

    /**
     * Lists the node pools for a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersNodePoolsListTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String parent = null;
        ListNodePoolsResponse response = api.containerProjectsZonesClustersNodePoolsList(projectId, zone, clusterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, parent);
        // TODO: test validations
    }

    /**
     * Rolls back a previously Aborted or Failed NodePool upgrade. This makes no changes if the last upgrade successfully completed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersNodePoolsRollbackTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String nodePoolId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RollbackNodePoolUpgradeRequest rollbackNodePoolUpgradeRequest = null;
        Operation response = api.containerProjectsZonesClustersNodePoolsRollback(projectId, zone, clusterId, nodePoolId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, rollbackNodePoolUpgradeRequest);
        // TODO: test validations
    }

    /**
     * Sets the NodeManagement options for a node pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersNodePoolsSetManagementTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String nodePoolId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetNodePoolManagementRequest setNodePoolManagementRequest = null;
        Operation response = api.containerProjectsZonesClustersNodePoolsSetManagement(projectId, zone, clusterId, nodePoolId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setNodePoolManagementRequest);
        // TODO: test validations
    }

    /**
     * Sets the size for a specific node pool. The new size will be used for all replicas, including future replicas created by modifying NodePool.locations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersNodePoolsSetSizeTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String nodePoolId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetNodePoolSizeRequest setNodePoolSizeRequest = null;
        Operation response = api.containerProjectsZonesClustersNodePoolsSetSize(projectId, zone, clusterId, nodePoolId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setNodePoolSizeRequest);
        // TODO: test validations
    }

    /**
     * Updates the version and/or image type for the specified node pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersNodePoolsUpdateTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String nodePoolId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UpdateNodePoolRequest updateNodePoolRequest = null;
        Operation response = api.containerProjectsZonesClustersNodePoolsUpdate(projectId, zone, clusterId, nodePoolId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateNodePoolRequest);
        // TODO: test validations
    }

    /**
     * Sets labels on a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersResourceLabelsTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetLabelsRequest setLabelsRequest = null;
        Operation response = api.containerProjectsZonesClustersResourceLabels(projectId, zone, clusterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setLabelsRequest);
        // TODO: test validations
    }

    /**
     * Sets the maintenance policy for a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersSetMaintenancePolicyTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetMaintenancePolicyRequest setMaintenancePolicyRequest = null;
        Operation response = api.containerProjectsZonesClustersSetMaintenancePolicy(projectId, zone, clusterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setMaintenancePolicyRequest);
        // TODO: test validations
    }

    /**
     * Sets master auth materials. Currently supports changing the admin password or a specific cluster, either via password generation or explicitly setting the password.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersSetMasterAuthTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetMasterAuthRequest setMasterAuthRequest = null;
        Operation response = api.containerProjectsZonesClustersSetMasterAuth(projectId, zone, clusterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setMasterAuthRequest);
        // TODO: test validations
    }

    /**
     * Enables or disables Network Policy for a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersSetNetworkPolicyTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetNetworkPolicyRequest setNetworkPolicyRequest = null;
        Operation response = api.containerProjectsZonesClustersSetNetworkPolicy(projectId, zone, clusterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setNetworkPolicyRequest);
        // TODO: test validations
    }

    /**
     * Starts master IP rotation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersStartIpRotationTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        StartIPRotationRequest startIPRotationRequest = null;
        Operation response = api.containerProjectsZonesClustersStartIpRotation(projectId, zone, clusterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, startIPRotationRequest);
        // TODO: test validations
    }

    /**
     * Updates the settings of a specific cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesClustersUpdateTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String clusterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UpdateClusterRequest updateClusterRequest = null;
        Operation response = api.containerProjectsZonesClustersUpdate(projectId, zone, clusterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateClusterRequest);
        // TODO: test validations
    }

    /**
     * Returns configuration info about the Google Kubernetes Engine service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesGetServerconfigTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String name = null;
        ServerConfig response = api.containerProjectsZonesGetServerconfig(projectId, zone, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, name);
        // TODO: test validations
    }

    /**
     * Cancels the specified operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesOperationsCancelTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String operationId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CancelOperationRequest cancelOperationRequest = null;
        Object response = api.containerProjectsZonesOperationsCancel(projectId, zone, operationId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, cancelOperationRequest);
        // TODO: test validations
    }

    /**
     * Gets the specified operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesOperationsGetTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String operationId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String name = null;
        Operation response = api.containerProjectsZonesOperationsGet(projectId, zone, operationId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, name);
        // TODO: test validations
    }

    /**
     * Lists all operations in a project in a specific zone or all zones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void containerProjectsZonesOperationsListTest() throws ApiException {
        String projectId = null;
        String zone = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String parent = null;
        ListOperationsResponse response = api.containerProjectsZonesOperationsList(projectId, zone, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, parent);
        // TODO: test validations
    }

}
