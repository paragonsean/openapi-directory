/**
 * KMS Inventory API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudKmsV1CryptoKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudKmsV1CryptoKey::OAIGoogleCloudKmsV1CryptoKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudKmsV1CryptoKey::OAIGoogleCloudKmsV1CryptoKey() {
    this->initializeModel();
}

OAIGoogleCloudKmsV1CryptoKey::~OAIGoogleCloudKmsV1CryptoKey() {}

void OAIGoogleCloudKmsV1CryptoKey::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_crypto_key_backend_isSet = false;
    m_crypto_key_backend_isValid = false;

    m_destroy_scheduled_duration_isSet = false;
    m_destroy_scheduled_duration_isValid = false;

    m_import_only_isSet = false;
    m_import_only_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_next_rotation_time_isSet = false;
    m_next_rotation_time_isValid = false;

    m_primary_isSet = false;
    m_primary_isValid = false;

    m_purpose_isSet = false;
    m_purpose_isValid = false;

    m_rotation_period_isSet = false;
    m_rotation_period_isValid = false;

    m_version_template_isSet = false;
    m_version_template_isValid = false;
}

void OAIGoogleCloudKmsV1CryptoKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudKmsV1CryptoKey::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_crypto_key_backend_isValid = ::OpenAPI::fromJsonValue(m_crypto_key_backend, json[QString("cryptoKeyBackend")]);
    m_crypto_key_backend_isSet = !json[QString("cryptoKeyBackend")].isNull() && m_crypto_key_backend_isValid;

    m_destroy_scheduled_duration_isValid = ::OpenAPI::fromJsonValue(m_destroy_scheduled_duration, json[QString("destroyScheduledDuration")]);
    m_destroy_scheduled_duration_isSet = !json[QString("destroyScheduledDuration")].isNull() && m_destroy_scheduled_duration_isValid;

    m_import_only_isValid = ::OpenAPI::fromJsonValue(m_import_only, json[QString("importOnly")]);
    m_import_only_isSet = !json[QString("importOnly")].isNull() && m_import_only_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_next_rotation_time_isValid = ::OpenAPI::fromJsonValue(m_next_rotation_time, json[QString("nextRotationTime")]);
    m_next_rotation_time_isSet = !json[QString("nextRotationTime")].isNull() && m_next_rotation_time_isValid;

    m_primary_isValid = ::OpenAPI::fromJsonValue(m_primary, json[QString("primary")]);
    m_primary_isSet = !json[QString("primary")].isNull() && m_primary_isValid;

    m_purpose_isValid = ::OpenAPI::fromJsonValue(m_purpose, json[QString("purpose")]);
    m_purpose_isSet = !json[QString("purpose")].isNull() && m_purpose_isValid;

    m_rotation_period_isValid = ::OpenAPI::fromJsonValue(m_rotation_period, json[QString("rotationPeriod")]);
    m_rotation_period_isSet = !json[QString("rotationPeriod")].isNull() && m_rotation_period_isValid;

    m_version_template_isValid = ::OpenAPI::fromJsonValue(m_version_template, json[QString("versionTemplate")]);
    m_version_template_isSet = !json[QString("versionTemplate")].isNull() && m_version_template_isValid;
}

QString OAIGoogleCloudKmsV1CryptoKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudKmsV1CryptoKey::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_crypto_key_backend_isSet) {
        obj.insert(QString("cryptoKeyBackend"), ::OpenAPI::toJsonValue(m_crypto_key_backend));
    }
    if (m_destroy_scheduled_duration_isSet) {
        obj.insert(QString("destroyScheduledDuration"), ::OpenAPI::toJsonValue(m_destroy_scheduled_duration));
    }
    if (m_import_only_isSet) {
        obj.insert(QString("importOnly"), ::OpenAPI::toJsonValue(m_import_only));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_next_rotation_time_isSet) {
        obj.insert(QString("nextRotationTime"), ::OpenAPI::toJsonValue(m_next_rotation_time));
    }
    if (m_primary.isSet()) {
        obj.insert(QString("primary"), ::OpenAPI::toJsonValue(m_primary));
    }
    if (m_purpose_isSet) {
        obj.insert(QString("purpose"), ::OpenAPI::toJsonValue(m_purpose));
    }
    if (m_rotation_period_isSet) {
        obj.insert(QString("rotationPeriod"), ::OpenAPI::toJsonValue(m_rotation_period));
    }
    if (m_version_template.isSet()) {
        obj.insert(QString("versionTemplate"), ::OpenAPI::toJsonValue(m_version_template));
    }
    return obj;
}

QString OAIGoogleCloudKmsV1CryptoKey::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudKmsV1CryptoKey::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudKmsV1CryptoKey::getCryptoKeyBackend() const {
    return m_crypto_key_backend;
}
void OAIGoogleCloudKmsV1CryptoKey::setCryptoKeyBackend(const QString &crypto_key_backend) {
    m_crypto_key_backend = crypto_key_backend;
    m_crypto_key_backend_isSet = true;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_crypto_key_backend_Set() const{
    return m_crypto_key_backend_isSet;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_crypto_key_backend_Valid() const{
    return m_crypto_key_backend_isValid;
}

QString OAIGoogleCloudKmsV1CryptoKey::getDestroyScheduledDuration() const {
    return m_destroy_scheduled_duration;
}
void OAIGoogleCloudKmsV1CryptoKey::setDestroyScheduledDuration(const QString &destroy_scheduled_duration) {
    m_destroy_scheduled_duration = destroy_scheduled_duration;
    m_destroy_scheduled_duration_isSet = true;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_destroy_scheduled_duration_Set() const{
    return m_destroy_scheduled_duration_isSet;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_destroy_scheduled_duration_Valid() const{
    return m_destroy_scheduled_duration_isValid;
}

bool OAIGoogleCloudKmsV1CryptoKey::isImportOnly() const {
    return m_import_only;
}
void OAIGoogleCloudKmsV1CryptoKey::setImportOnly(const bool &import_only) {
    m_import_only = import_only;
    m_import_only_isSet = true;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_import_only_Set() const{
    return m_import_only_isSet;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_import_only_Valid() const{
    return m_import_only_isValid;
}

QMap<QString, QString> OAIGoogleCloudKmsV1CryptoKey::getLabels() const {
    return m_labels;
}
void OAIGoogleCloudKmsV1CryptoKey::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIGoogleCloudKmsV1CryptoKey::getName() const {
    return m_name;
}
void OAIGoogleCloudKmsV1CryptoKey::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleCloudKmsV1CryptoKey::getNextRotationTime() const {
    return m_next_rotation_time;
}
void OAIGoogleCloudKmsV1CryptoKey::setNextRotationTime(const QString &next_rotation_time) {
    m_next_rotation_time = next_rotation_time;
    m_next_rotation_time_isSet = true;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_next_rotation_time_Set() const{
    return m_next_rotation_time_isSet;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_next_rotation_time_Valid() const{
    return m_next_rotation_time_isValid;
}

OAIGoogleCloudKmsV1CryptoKeyVersion OAIGoogleCloudKmsV1CryptoKey::getPrimary() const {
    return m_primary;
}
void OAIGoogleCloudKmsV1CryptoKey::setPrimary(const OAIGoogleCloudKmsV1CryptoKeyVersion &primary) {
    m_primary = primary;
    m_primary_isSet = true;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_primary_Set() const{
    return m_primary_isSet;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_primary_Valid() const{
    return m_primary_isValid;
}

QString OAIGoogleCloudKmsV1CryptoKey::getPurpose() const {
    return m_purpose;
}
void OAIGoogleCloudKmsV1CryptoKey::setPurpose(const QString &purpose) {
    m_purpose = purpose;
    m_purpose_isSet = true;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_purpose_Set() const{
    return m_purpose_isSet;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_purpose_Valid() const{
    return m_purpose_isValid;
}

QString OAIGoogleCloudKmsV1CryptoKey::getRotationPeriod() const {
    return m_rotation_period;
}
void OAIGoogleCloudKmsV1CryptoKey::setRotationPeriod(const QString &rotation_period) {
    m_rotation_period = rotation_period;
    m_rotation_period_isSet = true;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_rotation_period_Set() const{
    return m_rotation_period_isSet;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_rotation_period_Valid() const{
    return m_rotation_period_isValid;
}

OAIGoogleCloudKmsV1CryptoKeyVersionTemplate OAIGoogleCloudKmsV1CryptoKey::getVersionTemplate() const {
    return m_version_template;
}
void OAIGoogleCloudKmsV1CryptoKey::setVersionTemplate(const OAIGoogleCloudKmsV1CryptoKeyVersionTemplate &version_template) {
    m_version_template = version_template;
    m_version_template_isSet = true;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_version_template_Set() const{
    return m_version_template_isSet;
}

bool OAIGoogleCloudKmsV1CryptoKey::is_version_template_Valid() const{
    return m_version_template_isValid;
}

bool OAIGoogleCloudKmsV1CryptoKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crypto_key_backend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destroy_scheduled_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_rotation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purpose_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotation_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_template.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudKmsV1CryptoKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
