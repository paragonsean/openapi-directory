/*
 * Google Play Game Services Publishing API
 * The Google Play Game Services Publishing API allows developers to configure their games in Game Services.
 *
 * The version of the OpenAPI document: v1configuration
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AchievementConfigurationDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An achievement configuration resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:21.013927-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AchievementConfiguration {
  /**
   * The type of the achievement.
   */
  @JsonAdapter(AchievementTypeEnum.Adapter.class)
  public enum AchievementTypeEnum {
    ACHIEVEMENT_TYPE_UNSPECIFIED("ACHIEVEMENT_TYPE_UNSPECIFIED"),
    
    STANDARD("STANDARD"),
    
    INCREMENTAL("INCREMENTAL");

    private String value;

    AchievementTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AchievementTypeEnum fromValue(String value) {
      for (AchievementTypeEnum b : AchievementTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AchievementTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AchievementTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AchievementTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AchievementTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AchievementTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACHIEVEMENT_TYPE = "achievementType";
  @SerializedName(SERIALIZED_NAME_ACHIEVEMENT_TYPE)
  private AchievementTypeEnum achievementType;

  public static final String SERIALIZED_NAME_DRAFT = "draft";
  @SerializedName(SERIALIZED_NAME_DRAFT)
  private AchievementConfigurationDetail draft;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The initial state of the achievement.
   */
  @JsonAdapter(InitialStateEnum.Adapter.class)
  public enum InitialStateEnum {
    INITIAL_STATE_UNSPECIFIED("INITIAL_STATE_UNSPECIFIED"),
    
    HIDDEN("HIDDEN"),
    
    REVEALED("REVEALED");

    private String value;

    InitialStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InitialStateEnum fromValue(String value) {
      for (InitialStateEnum b : InitialStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InitialStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InitialStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InitialStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InitialStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InitialStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INITIAL_STATE = "initialState";
  @SerializedName(SERIALIZED_NAME_INITIAL_STATE)
  private InitialStateEnum initialState;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private AchievementConfigurationDetail published;

  public static final String SERIALIZED_NAME_STEPS_TO_UNLOCK = "stepsToUnlock";
  @SerializedName(SERIALIZED_NAME_STEPS_TO_UNLOCK)
  private Integer stepsToUnlock;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public AchievementConfiguration() {
  }

  public AchievementConfiguration achievementType(AchievementTypeEnum achievementType) {
    this.achievementType = achievementType;
    return this;
  }

  /**
   * The type of the achievement.
   * @return achievementType
   */
  @javax.annotation.Nullable
  public AchievementTypeEnum getAchievementType() {
    return achievementType;
  }

  public void setAchievementType(AchievementTypeEnum achievementType) {
    this.achievementType = achievementType;
  }


  public AchievementConfiguration draft(AchievementConfigurationDetail draft) {
    this.draft = draft;
    return this;
  }

  /**
   * Get draft
   * @return draft
   */
  @javax.annotation.Nullable
  public AchievementConfigurationDetail getDraft() {
    return draft;
  }

  public void setDraft(AchievementConfigurationDetail draft) {
    this.draft = draft;
  }


  public AchievementConfiguration id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the achievement.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AchievementConfiguration initialState(InitialStateEnum initialState) {
    this.initialState = initialState;
    return this;
  }

  /**
   * The initial state of the achievement.
   * @return initialState
   */
  @javax.annotation.Nullable
  public InitialStateEnum getInitialState() {
    return initialState;
  }

  public void setInitialState(InitialStateEnum initialState) {
    this.initialState = initialState;
  }


  public AchievementConfiguration kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Uniquely identifies the type of this resource. Value is always the fixed string &#x60;gamesConfiguration#achievementConfiguration&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public AchievementConfiguration published(AchievementConfigurationDetail published) {
    this.published = published;
    return this;
  }

  /**
   * Get published
   * @return published
   */
  @javax.annotation.Nullable
  public AchievementConfigurationDetail getPublished() {
    return published;
  }

  public void setPublished(AchievementConfigurationDetail published) {
    this.published = published;
  }


  public AchievementConfiguration stepsToUnlock(Integer stepsToUnlock) {
    this.stepsToUnlock = stepsToUnlock;
    return this;
  }

  /**
   * Steps to unlock. Only applicable to incremental achievements.
   * @return stepsToUnlock
   */
  @javax.annotation.Nullable
  public Integer getStepsToUnlock() {
    return stepsToUnlock;
  }

  public void setStepsToUnlock(Integer stepsToUnlock) {
    this.stepsToUnlock = stepsToUnlock;
  }


  public AchievementConfiguration token(String token) {
    this.token = token;
    return this;
  }

  /**
   * The token for this resource.
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AchievementConfiguration achievementConfiguration = (AchievementConfiguration) o;
    return Objects.equals(this.achievementType, achievementConfiguration.achievementType) &&
        Objects.equals(this.draft, achievementConfiguration.draft) &&
        Objects.equals(this.id, achievementConfiguration.id) &&
        Objects.equals(this.initialState, achievementConfiguration.initialState) &&
        Objects.equals(this.kind, achievementConfiguration.kind) &&
        Objects.equals(this.published, achievementConfiguration.published) &&
        Objects.equals(this.stepsToUnlock, achievementConfiguration.stepsToUnlock) &&
        Objects.equals(this.token, achievementConfiguration.token);
  }

  @Override
  public int hashCode() {
    return Objects.hash(achievementType, draft, id, initialState, kind, published, stepsToUnlock, token);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AchievementConfiguration {\n");
    sb.append("    achievementType: ").append(toIndentedString(achievementType)).append("\n");
    sb.append("    draft: ").append(toIndentedString(draft)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    initialState: ").append(toIndentedString(initialState)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    stepsToUnlock: ").append(toIndentedString(stepsToUnlock)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("achievementType");
    openapiFields.add("draft");
    openapiFields.add("id");
    openapiFields.add("initialState");
    openapiFields.add("kind");
    openapiFields.add("published");
    openapiFields.add("stepsToUnlock");
    openapiFields.add("token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AchievementConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AchievementConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AchievementConfiguration is not found in the empty JSON string", AchievementConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AchievementConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AchievementConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("achievementType") != null && !jsonObj.get("achievementType").isJsonNull()) && !jsonObj.get("achievementType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `achievementType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("achievementType").toString()));
      }
      // validate the optional field `achievementType`
      if (jsonObj.get("achievementType") != null && !jsonObj.get("achievementType").isJsonNull()) {
        AchievementTypeEnum.validateJsonElement(jsonObj.get("achievementType"));
      }
      // validate the optional field `draft`
      if (jsonObj.get("draft") != null && !jsonObj.get("draft").isJsonNull()) {
        AchievementConfigurationDetail.validateJsonElement(jsonObj.get("draft"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("initialState") != null && !jsonObj.get("initialState").isJsonNull()) && !jsonObj.get("initialState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initialState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initialState").toString()));
      }
      // validate the optional field `initialState`
      if (jsonObj.get("initialState") != null && !jsonObj.get("initialState").isJsonNull()) {
        InitialStateEnum.validateJsonElement(jsonObj.get("initialState"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `published`
      if (jsonObj.get("published") != null && !jsonObj.get("published").isJsonNull()) {
        AchievementConfigurationDetail.validateJsonElement(jsonObj.get("published"));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AchievementConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AchievementConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AchievementConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AchievementConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<AchievementConfiguration>() {
           @Override
           public void write(JsonWriter out, AchievementConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AchievementConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AchievementConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AchievementConfiguration
   * @throws IOException if the JSON string is invalid with respect to AchievementConfiguration
   */
  public static AchievementConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AchievementConfiguration.class);
  }

  /**
   * Convert an instance of AchievementConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

