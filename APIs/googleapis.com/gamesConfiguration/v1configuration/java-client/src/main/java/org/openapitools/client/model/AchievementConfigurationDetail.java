/*
 * Google Play Game Services Publishing API
 * The Google Play Game Services Publishing API allows developers to configure their games in Game Services.
 *
 * The version of the OpenAPI document: v1configuration
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LocalizedStringBundle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An achievement configuration detail.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:21.013927-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AchievementConfigurationDetail {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private LocalizedStringBundle description;

  public static final String SERIALIZED_NAME_ICON_URL = "iconUrl";
  @SerializedName(SERIALIZED_NAME_ICON_URL)
  private String iconUrl;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private LocalizedStringBundle name;

  public static final String SERIALIZED_NAME_POINT_VALUE = "pointValue";
  @SerializedName(SERIALIZED_NAME_POINT_VALUE)
  private Integer pointValue;

  public static final String SERIALIZED_NAME_SORT_RANK = "sortRank";
  @SerializedName(SERIALIZED_NAME_SORT_RANK)
  private Integer sortRank;

  public AchievementConfigurationDetail() {
  }

  public AchievementConfigurationDetail description(LocalizedStringBundle description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public LocalizedStringBundle getDescription() {
    return description;
  }

  public void setDescription(LocalizedStringBundle description) {
    this.description = description;
  }


  public AchievementConfigurationDetail iconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }

  /**
   * The icon url of this achievement. Writes to this field are ignored.
   * @return iconUrl
   */
  @javax.annotation.Nullable
  public String getIconUrl() {
    return iconUrl;
  }

  public void setIconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
  }


  public AchievementConfigurationDetail kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Uniquely identifies the type of this resource. Value is always the fixed string &#x60;gamesConfiguration#achievementConfigurationDetail&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public AchievementConfigurationDetail name(LocalizedStringBundle name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public LocalizedStringBundle getName() {
    return name;
  }

  public void setName(LocalizedStringBundle name) {
    this.name = name;
  }


  public AchievementConfigurationDetail pointValue(Integer pointValue) {
    this.pointValue = pointValue;
    return this;
  }

  /**
   * Point value for the achievement.
   * @return pointValue
   */
  @javax.annotation.Nullable
  public Integer getPointValue() {
    return pointValue;
  }

  public void setPointValue(Integer pointValue) {
    this.pointValue = pointValue;
  }


  public AchievementConfigurationDetail sortRank(Integer sortRank) {
    this.sortRank = sortRank;
    return this;
  }

  /**
   * The sort rank of this achievement. Writes to this field are ignored.
   * @return sortRank
   */
  @javax.annotation.Nullable
  public Integer getSortRank() {
    return sortRank;
  }

  public void setSortRank(Integer sortRank) {
    this.sortRank = sortRank;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AchievementConfigurationDetail achievementConfigurationDetail = (AchievementConfigurationDetail) o;
    return Objects.equals(this.description, achievementConfigurationDetail.description) &&
        Objects.equals(this.iconUrl, achievementConfigurationDetail.iconUrl) &&
        Objects.equals(this.kind, achievementConfigurationDetail.kind) &&
        Objects.equals(this.name, achievementConfigurationDetail.name) &&
        Objects.equals(this.pointValue, achievementConfigurationDetail.pointValue) &&
        Objects.equals(this.sortRank, achievementConfigurationDetail.sortRank);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, iconUrl, kind, name, pointValue, sortRank);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AchievementConfigurationDetail {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    iconUrl: ").append(toIndentedString(iconUrl)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pointValue: ").append(toIndentedString(pointValue)).append("\n");
    sb.append("    sortRank: ").append(toIndentedString(sortRank)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("iconUrl");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("pointValue");
    openapiFields.add("sortRank");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AchievementConfigurationDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AchievementConfigurationDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AchievementConfigurationDetail is not found in the empty JSON string", AchievementConfigurationDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AchievementConfigurationDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AchievementConfigurationDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        LocalizedStringBundle.validateJsonElement(jsonObj.get("description"));
      }
      if ((jsonObj.get("iconUrl") != null && !jsonObj.get("iconUrl").isJsonNull()) && !jsonObj.get("iconUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconUrl").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        LocalizedStringBundle.validateJsonElement(jsonObj.get("name"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AchievementConfigurationDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AchievementConfigurationDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AchievementConfigurationDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AchievementConfigurationDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<AchievementConfigurationDetail>() {
           @Override
           public void write(JsonWriter out, AchievementConfigurationDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AchievementConfigurationDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AchievementConfigurationDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AchievementConfigurationDetail
   * @throws IOException if the JSON string is invalid with respect to AchievementConfigurationDetail
   */
  public static AchievementConfigurationDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AchievementConfigurationDetail.class);
  }

  /**
   * Convert an instance of AchievementConfigurationDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

