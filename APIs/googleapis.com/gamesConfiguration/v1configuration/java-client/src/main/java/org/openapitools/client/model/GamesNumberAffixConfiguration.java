/*
 * Google Play Game Services Publishing API
 * The Google Play Game Services Publishing API allows developers to configure their games in Game Services.
 *
 * The version of the OpenAPI document: v1configuration
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LocalizedStringBundle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A number affix resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:21.013927-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GamesNumberAffixConfiguration {
  public static final String SERIALIZED_NAME_FEW = "few";
  @SerializedName(SERIALIZED_NAME_FEW)
  private LocalizedStringBundle few;

  public static final String SERIALIZED_NAME_MANY = "many";
  @SerializedName(SERIALIZED_NAME_MANY)
  private LocalizedStringBundle many;

  public static final String SERIALIZED_NAME_ONE = "one";
  @SerializedName(SERIALIZED_NAME_ONE)
  private LocalizedStringBundle one;

  public static final String SERIALIZED_NAME_OTHER = "other";
  @SerializedName(SERIALIZED_NAME_OTHER)
  private LocalizedStringBundle other;

  public static final String SERIALIZED_NAME_TWO = "two";
  @SerializedName(SERIALIZED_NAME_TWO)
  private LocalizedStringBundle two;

  public static final String SERIALIZED_NAME_ZERO = "zero";
  @SerializedName(SERIALIZED_NAME_ZERO)
  private LocalizedStringBundle zero;

  public GamesNumberAffixConfiguration() {
  }

  public GamesNumberAffixConfiguration few(LocalizedStringBundle few) {
    this.few = few;
    return this;
  }

  /**
   * Get few
   * @return few
   */
  @javax.annotation.Nullable
  public LocalizedStringBundle getFew() {
    return few;
  }

  public void setFew(LocalizedStringBundle few) {
    this.few = few;
  }


  public GamesNumberAffixConfiguration many(LocalizedStringBundle many) {
    this.many = many;
    return this;
  }

  /**
   * Get many
   * @return many
   */
  @javax.annotation.Nullable
  public LocalizedStringBundle getMany() {
    return many;
  }

  public void setMany(LocalizedStringBundle many) {
    this.many = many;
  }


  public GamesNumberAffixConfiguration one(LocalizedStringBundle one) {
    this.one = one;
    return this;
  }

  /**
   * Get one
   * @return one
   */
  @javax.annotation.Nullable
  public LocalizedStringBundle getOne() {
    return one;
  }

  public void setOne(LocalizedStringBundle one) {
    this.one = one;
  }


  public GamesNumberAffixConfiguration other(LocalizedStringBundle other) {
    this.other = other;
    return this;
  }

  /**
   * Get other
   * @return other
   */
  @javax.annotation.Nullable
  public LocalizedStringBundle getOther() {
    return other;
  }

  public void setOther(LocalizedStringBundle other) {
    this.other = other;
  }


  public GamesNumberAffixConfiguration two(LocalizedStringBundle two) {
    this.two = two;
    return this;
  }

  /**
   * Get two
   * @return two
   */
  @javax.annotation.Nullable
  public LocalizedStringBundle getTwo() {
    return two;
  }

  public void setTwo(LocalizedStringBundle two) {
    this.two = two;
  }


  public GamesNumberAffixConfiguration zero(LocalizedStringBundle zero) {
    this.zero = zero;
    return this;
  }

  /**
   * Get zero
   * @return zero
   */
  @javax.annotation.Nullable
  public LocalizedStringBundle getZero() {
    return zero;
  }

  public void setZero(LocalizedStringBundle zero) {
    this.zero = zero;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GamesNumberAffixConfiguration gamesNumberAffixConfiguration = (GamesNumberAffixConfiguration) o;
    return Objects.equals(this.few, gamesNumberAffixConfiguration.few) &&
        Objects.equals(this.many, gamesNumberAffixConfiguration.many) &&
        Objects.equals(this.one, gamesNumberAffixConfiguration.one) &&
        Objects.equals(this.other, gamesNumberAffixConfiguration.other) &&
        Objects.equals(this.two, gamesNumberAffixConfiguration.two) &&
        Objects.equals(this.zero, gamesNumberAffixConfiguration.zero);
  }

  @Override
  public int hashCode() {
    return Objects.hash(few, many, one, other, two, zero);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GamesNumberAffixConfiguration {\n");
    sb.append("    few: ").append(toIndentedString(few)).append("\n");
    sb.append("    many: ").append(toIndentedString(many)).append("\n");
    sb.append("    one: ").append(toIndentedString(one)).append("\n");
    sb.append("    other: ").append(toIndentedString(other)).append("\n");
    sb.append("    two: ").append(toIndentedString(two)).append("\n");
    sb.append("    zero: ").append(toIndentedString(zero)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("few");
    openapiFields.add("many");
    openapiFields.add("one");
    openapiFields.add("other");
    openapiFields.add("two");
    openapiFields.add("zero");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GamesNumberAffixConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GamesNumberAffixConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GamesNumberAffixConfiguration is not found in the empty JSON string", GamesNumberAffixConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GamesNumberAffixConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GamesNumberAffixConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `few`
      if (jsonObj.get("few") != null && !jsonObj.get("few").isJsonNull()) {
        LocalizedStringBundle.validateJsonElement(jsonObj.get("few"));
      }
      // validate the optional field `many`
      if (jsonObj.get("many") != null && !jsonObj.get("many").isJsonNull()) {
        LocalizedStringBundle.validateJsonElement(jsonObj.get("many"));
      }
      // validate the optional field `one`
      if (jsonObj.get("one") != null && !jsonObj.get("one").isJsonNull()) {
        LocalizedStringBundle.validateJsonElement(jsonObj.get("one"));
      }
      // validate the optional field `other`
      if (jsonObj.get("other") != null && !jsonObj.get("other").isJsonNull()) {
        LocalizedStringBundle.validateJsonElement(jsonObj.get("other"));
      }
      // validate the optional field `two`
      if (jsonObj.get("two") != null && !jsonObj.get("two").isJsonNull()) {
        LocalizedStringBundle.validateJsonElement(jsonObj.get("two"));
      }
      // validate the optional field `zero`
      if (jsonObj.get("zero") != null && !jsonObj.get("zero").isJsonNull()) {
        LocalizedStringBundle.validateJsonElement(jsonObj.get("zero"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GamesNumberAffixConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GamesNumberAffixConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GamesNumberAffixConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GamesNumberAffixConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<GamesNumberAffixConfiguration>() {
           @Override
           public void write(JsonWriter out, GamesNumberAffixConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GamesNumberAffixConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GamesNumberAffixConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GamesNumberAffixConfiguration
   * @throws IOException if the JSON string is invalid with respect to GamesNumberAffixConfiguration
   */
  public static GamesNumberAffixConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GamesNumberAffixConfiguration.class);
  }

  /**
   * Convert an instance of GamesNumberAffixConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

