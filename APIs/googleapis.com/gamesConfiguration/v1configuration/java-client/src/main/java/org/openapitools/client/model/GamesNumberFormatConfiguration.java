/*
 * Google Play Game Services Publishing API
 * The Google Play Game Services Publishing API allows developers to configure their games in Game Services.
 *
 * The version of the OpenAPI document: v1configuration
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GamesNumberAffixConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A number format resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:21.013927-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GamesNumberFormatConfiguration {
  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_NUM_DECIMAL_PLACES = "numDecimalPlaces";
  @SerializedName(SERIALIZED_NAME_NUM_DECIMAL_PLACES)
  private Integer numDecimalPlaces;

  /**
   * The formatting for the number.
   */
  @JsonAdapter(NumberFormatTypeEnum.Adapter.class)
  public enum NumberFormatTypeEnum {
    NUMBER_FORMAT_TYPE_UNSPECIFIED("NUMBER_FORMAT_TYPE_UNSPECIFIED"),
    
    NUMERIC("NUMERIC"),
    
    TIME_DURATION("TIME_DURATION"),
    
    CURRENCY("CURRENCY");

    private String value;

    NumberFormatTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NumberFormatTypeEnum fromValue(String value) {
      for (NumberFormatTypeEnum b : NumberFormatTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NumberFormatTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NumberFormatTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NumberFormatTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NumberFormatTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NumberFormatTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NUMBER_FORMAT_TYPE = "numberFormatType";
  @SerializedName(SERIALIZED_NAME_NUMBER_FORMAT_TYPE)
  private NumberFormatTypeEnum numberFormatType;

  public static final String SERIALIZED_NAME_SUFFIX = "suffix";
  @SerializedName(SERIALIZED_NAME_SUFFIX)
  private GamesNumberAffixConfiguration suffix;

  public GamesNumberFormatConfiguration() {
  }

  public GamesNumberFormatConfiguration currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The curreny code string. Only used for CURRENCY format type.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public GamesNumberFormatConfiguration numDecimalPlaces(Integer numDecimalPlaces) {
    this.numDecimalPlaces = numDecimalPlaces;
    return this;
  }

  /**
   * The number of decimal places for number. Only used for NUMERIC format type.
   * @return numDecimalPlaces
   */
  @javax.annotation.Nullable
  public Integer getNumDecimalPlaces() {
    return numDecimalPlaces;
  }

  public void setNumDecimalPlaces(Integer numDecimalPlaces) {
    this.numDecimalPlaces = numDecimalPlaces;
  }


  public GamesNumberFormatConfiguration numberFormatType(NumberFormatTypeEnum numberFormatType) {
    this.numberFormatType = numberFormatType;
    return this;
  }

  /**
   * The formatting for the number.
   * @return numberFormatType
   */
  @javax.annotation.Nullable
  public NumberFormatTypeEnum getNumberFormatType() {
    return numberFormatType;
  }

  public void setNumberFormatType(NumberFormatTypeEnum numberFormatType) {
    this.numberFormatType = numberFormatType;
  }


  public GamesNumberFormatConfiguration suffix(GamesNumberAffixConfiguration suffix) {
    this.suffix = suffix;
    return this;
  }

  /**
   * Get suffix
   * @return suffix
   */
  @javax.annotation.Nullable
  public GamesNumberAffixConfiguration getSuffix() {
    return suffix;
  }

  public void setSuffix(GamesNumberAffixConfiguration suffix) {
    this.suffix = suffix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GamesNumberFormatConfiguration gamesNumberFormatConfiguration = (GamesNumberFormatConfiguration) o;
    return Objects.equals(this.currencyCode, gamesNumberFormatConfiguration.currencyCode) &&
        Objects.equals(this.numDecimalPlaces, gamesNumberFormatConfiguration.numDecimalPlaces) &&
        Objects.equals(this.numberFormatType, gamesNumberFormatConfiguration.numberFormatType) &&
        Objects.equals(this.suffix, gamesNumberFormatConfiguration.suffix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyCode, numDecimalPlaces, numberFormatType, suffix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GamesNumberFormatConfiguration {\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    numDecimalPlaces: ").append(toIndentedString(numDecimalPlaces)).append("\n");
    sb.append("    numberFormatType: ").append(toIndentedString(numberFormatType)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currencyCode");
    openapiFields.add("numDecimalPlaces");
    openapiFields.add("numberFormatType");
    openapiFields.add("suffix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GamesNumberFormatConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GamesNumberFormatConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GamesNumberFormatConfiguration is not found in the empty JSON string", GamesNumberFormatConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GamesNumberFormatConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GamesNumberFormatConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("numberFormatType") != null && !jsonObj.get("numberFormatType").isJsonNull()) && !jsonObj.get("numberFormatType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numberFormatType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numberFormatType").toString()));
      }
      // validate the optional field `numberFormatType`
      if (jsonObj.get("numberFormatType") != null && !jsonObj.get("numberFormatType").isJsonNull()) {
        NumberFormatTypeEnum.validateJsonElement(jsonObj.get("numberFormatType"));
      }
      // validate the optional field `suffix`
      if (jsonObj.get("suffix") != null && !jsonObj.get("suffix").isJsonNull()) {
        GamesNumberAffixConfiguration.validateJsonElement(jsonObj.get("suffix"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GamesNumberFormatConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GamesNumberFormatConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GamesNumberFormatConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GamesNumberFormatConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<GamesNumberFormatConfiguration>() {
           @Override
           public void write(JsonWriter out, GamesNumberFormatConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GamesNumberFormatConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GamesNumberFormatConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GamesNumberFormatConfiguration
   * @throws IOException if the JSON string is invalid with respect to GamesNumberFormatConfiguration
   */
  public static GamesNumberFormatConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GamesNumberFormatConfiguration.class);
  }

  /**
   * Convert an instance of GamesNumberFormatConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

