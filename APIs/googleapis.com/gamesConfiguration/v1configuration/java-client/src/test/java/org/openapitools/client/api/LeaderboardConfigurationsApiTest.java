/*
 * Google Play Game Services Publishing API
 * The Google Play Game Services Publishing API allows developers to configure their games in Game Services.
 *
 * The version of the OpenAPI document: v1configuration
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.LeaderboardConfiguration;
import org.openapitools.client.model.LeaderboardConfigurationListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LeaderboardConfigurationsApi
 */
@Disabled
public class LeaderboardConfigurationsApiTest {

    private final LeaderboardConfigurationsApi api = new LeaderboardConfigurationsApi();

    /**
     * Delete the leaderboard configuration with the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesConfigurationLeaderboardConfigurationsDeleteTest() throws ApiException {
        String leaderboardId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.gamesConfigurationLeaderboardConfigurationsDelete(leaderboardId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves the metadata of the leaderboard configuration with the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesConfigurationLeaderboardConfigurationsGetTest() throws ApiException {
        String leaderboardId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LeaderboardConfiguration response = api.gamesConfigurationLeaderboardConfigurationsGet(leaderboardId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Insert a new leaderboard configuration in this application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesConfigurationLeaderboardConfigurationsInsertTest() throws ApiException {
        String applicationId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LeaderboardConfiguration leaderboardConfiguration = null;
        LeaderboardConfiguration response = api.gamesConfigurationLeaderboardConfigurationsInsert(applicationId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, leaderboardConfiguration);
        // TODO: test validations
    }

    /**
     * Returns a list of the leaderboard configurations in this application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesConfigurationLeaderboardConfigurationsListTest() throws ApiException {
        String applicationId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String pageToken = null;
        LeaderboardConfigurationListResponse response = api.gamesConfigurationLeaderboardConfigurationsList(applicationId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken);
        // TODO: test validations
    }

    /**
     * Update the metadata of the leaderboard configuration with the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesConfigurationLeaderboardConfigurationsUpdateTest() throws ApiException {
        String leaderboardId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LeaderboardConfiguration leaderboardConfiguration = null;
        LeaderboardConfiguration response = api.gamesConfigurationLeaderboardConfigurationsUpdate(leaderboardId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, leaderboardConfiguration);
        // TODO: test validations
    }

}
