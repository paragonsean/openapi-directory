/*
 * Google Play Game Services Publishing API
 * The Google Play Game Services Publishing API allows developers to configure their games in Game Services.
 *
 * The version of the OpenAPI document: v1configuration
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AchievementConfiguration;
import org.openapitools.client.model.AchievementConfigurationListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AchievementConfigurationsApi
 */
@Disabled
public class AchievementConfigurationsApiTest {

    private final AchievementConfigurationsApi api = new AchievementConfigurationsApi();

    /**
     * Delete the achievement configuration with the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesConfigurationAchievementConfigurationsDeleteTest() throws ApiException {
        String achievementId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.gamesConfigurationAchievementConfigurationsDelete(achievementId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves the metadata of the achievement configuration with the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesConfigurationAchievementConfigurationsGetTest() throws ApiException {
        String achievementId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AchievementConfiguration response = api.gamesConfigurationAchievementConfigurationsGet(achievementId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Insert a new achievement configuration in this application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesConfigurationAchievementConfigurationsInsertTest() throws ApiException {
        String applicationId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AchievementConfiguration achievementConfiguration = null;
        AchievementConfiguration response = api.gamesConfigurationAchievementConfigurationsInsert(applicationId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, achievementConfiguration);
        // TODO: test validations
    }

    /**
     * Returns a list of the achievement configurations in this application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesConfigurationAchievementConfigurationsListTest() throws ApiException {
        String applicationId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String pageToken = null;
        AchievementConfigurationListResponse response = api.gamesConfigurationAchievementConfigurationsList(applicationId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken);
        // TODO: test validations
    }

    /**
     * Update the metadata of the achievement configuration with the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesConfigurationAchievementConfigurationsUpdateTest() throws ApiException {
        String achievementId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AchievementConfiguration achievementConfiguration = null;
        AchievementConfiguration response = api.gamesConfigurationAchievementConfigurationsUpdate(achievementId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, achievementConfiguration);
        // TODO: test validations
    }

}
