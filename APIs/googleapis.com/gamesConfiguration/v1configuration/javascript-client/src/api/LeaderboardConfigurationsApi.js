/**
 * Google Play Game Services Publishing API
 * The Google Play Game Services Publishing API allows developers to configure their games in Game Services.
 *
 * The version of the OpenAPI document: v1configuration
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LeaderboardConfiguration from '../model/LeaderboardConfiguration';
import LeaderboardConfigurationListResponse from '../model/LeaderboardConfigurationListResponse';

/**
* LeaderboardConfigurations service.
* @module api/LeaderboardConfigurationsApi
* @version v1configuration
*/
export default class LeaderboardConfigurationsApi {

    /**
    * Constructs a new LeaderboardConfigurationsApi. 
    * @alias module:api/LeaderboardConfigurationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gamesConfigurationLeaderboardConfigurationsDelete operation.
     * @callback module:api/LeaderboardConfigurationsApi~gamesConfigurationLeaderboardConfigurationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the leaderboard configuration with the given ID.
     * @param {String} leaderboardId The ID of the leaderboard.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/LeaderboardConfigurationsApi~gamesConfigurationLeaderboardConfigurationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gamesConfigurationLeaderboardConfigurationsDelete(leaderboardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'leaderboardId' is set
      if (leaderboardId === undefined || leaderboardId === null) {
        throw new Error("Missing the required parameter 'leaderboardId' when calling gamesConfigurationLeaderboardConfigurationsDelete");
      }

      let pathParams = {
        'leaderboardId': leaderboardId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/games/v1configuration/leaderboards/{leaderboardId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesConfigurationLeaderboardConfigurationsGet operation.
     * @callback module:api/LeaderboardConfigurationsApi~gamesConfigurationLeaderboardConfigurationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeaderboardConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the metadata of the leaderboard configuration with the given ID.
     * @param {String} leaderboardId The ID of the leaderboard.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/LeaderboardConfigurationsApi~gamesConfigurationLeaderboardConfigurationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeaderboardConfiguration}
     */
    gamesConfigurationLeaderboardConfigurationsGet(leaderboardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'leaderboardId' is set
      if (leaderboardId === undefined || leaderboardId === null) {
        throw new Error("Missing the required parameter 'leaderboardId' when calling gamesConfigurationLeaderboardConfigurationsGet");
      }

      let pathParams = {
        'leaderboardId': leaderboardId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LeaderboardConfiguration;
      return this.apiClient.callApi(
        '/games/v1configuration/leaderboards/{leaderboardId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesConfigurationLeaderboardConfigurationsInsert operation.
     * @callback module:api/LeaderboardConfigurationsApi~gamesConfigurationLeaderboardConfigurationsInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeaderboardConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a new leaderboard configuration in this application.
     * @param {String} applicationId The application ID from the Google Play developer console.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/LeaderboardConfiguration} [leaderboardConfiguration] 
     * @param {module:api/LeaderboardConfigurationsApi~gamesConfigurationLeaderboardConfigurationsInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeaderboardConfiguration}
     */
    gamesConfigurationLeaderboardConfigurationsInsert(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['leaderboardConfiguration'];
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling gamesConfigurationLeaderboardConfigurationsInsert");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeaderboardConfiguration;
      return this.apiClient.callApi(
        '/games/v1configuration/applications/{applicationId}/leaderboards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesConfigurationLeaderboardConfigurationsList operation.
     * @callback module:api/LeaderboardConfigurationsApi~gamesConfigurationLeaderboardConfigurationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeaderboardConfigurationListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of the leaderboard configurations in this application.
     * @param {String} applicationId The application ID from the Google Play developer console.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [maxResults] The maximum number of resource configurations to return in the response, used for paging. For any response, the actual number of resources returned may be less than the specified `maxResults`.
     * @param {String} [pageToken] The token returned by the previous request.
     * @param {module:api/LeaderboardConfigurationsApi~gamesConfigurationLeaderboardConfigurationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeaderboardConfigurationListResponse}
     */
    gamesConfigurationLeaderboardConfigurationsList(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling gamesConfigurationLeaderboardConfigurationsList");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LeaderboardConfigurationListResponse;
      return this.apiClient.callApi(
        '/games/v1configuration/applications/{applicationId}/leaderboards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesConfigurationLeaderboardConfigurationsUpdate operation.
     * @callback module:api/LeaderboardConfigurationsApi~gamesConfigurationLeaderboardConfigurationsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeaderboardConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the metadata of the leaderboard configuration with the given ID.
     * @param {String} leaderboardId The ID of the leaderboard.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/LeaderboardConfiguration} [leaderboardConfiguration] 
     * @param {module:api/LeaderboardConfigurationsApi~gamesConfigurationLeaderboardConfigurationsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeaderboardConfiguration}
     */
    gamesConfigurationLeaderboardConfigurationsUpdate(leaderboardId, opts, callback) {
      opts = opts || {};
      let postBody = opts['leaderboardConfiguration'];
      // verify the required parameter 'leaderboardId' is set
      if (leaderboardId === undefined || leaderboardId === null) {
        throw new Error("Missing the required parameter 'leaderboardId' when calling gamesConfigurationLeaderboardConfigurationsUpdate");
      }

      let pathParams = {
        'leaderboardId': leaderboardId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeaderboardConfiguration;
      return this.apiClient.callApi(
        '/games/v1configuration/leaderboards/{leaderboardId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
