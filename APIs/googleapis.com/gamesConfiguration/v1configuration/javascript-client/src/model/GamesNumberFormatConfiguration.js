/**
 * Google Play Game Services Publishing API
 * The Google Play Game Services Publishing API allows developers to configure their games in Game Services.
 *
 * The version of the OpenAPI document: v1configuration
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GamesNumberAffixConfiguration from './GamesNumberAffixConfiguration';

/**
 * The GamesNumberFormatConfiguration model module.
 * @module model/GamesNumberFormatConfiguration
 * @version v1configuration
 */
class GamesNumberFormatConfiguration {
    /**
     * Constructs a new <code>GamesNumberFormatConfiguration</code>.
     * A number format resource.
     * @alias module:model/GamesNumberFormatConfiguration
     */
    constructor() { 
        
        GamesNumberFormatConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GamesNumberFormatConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GamesNumberFormatConfiguration} obj Optional instance to populate.
     * @return {module:model/GamesNumberFormatConfiguration} The populated <code>GamesNumberFormatConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GamesNumberFormatConfiguration();

            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('numDecimalPlaces')) {
                obj['numDecimalPlaces'] = ApiClient.convertToType(data['numDecimalPlaces'], 'Number');
            }
            if (data.hasOwnProperty('numberFormatType')) {
                obj['numberFormatType'] = ApiClient.convertToType(data['numberFormatType'], 'String');
            }
            if (data.hasOwnProperty('suffix')) {
                obj['suffix'] = GamesNumberAffixConfiguration.constructFromObject(data['suffix']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GamesNumberFormatConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GamesNumberFormatConfiguration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // ensure the json data is a string
        if (data['numberFormatType'] && !(typeof data['numberFormatType'] === 'string' || data['numberFormatType'] instanceof String)) {
            throw new Error("Expected the field `numberFormatType` to be a primitive type in the JSON string but got " + data['numberFormatType']);
        }
        // validate the optional field `suffix`
        if (data['suffix']) { // data not null
          GamesNumberAffixConfiguration.validateJSON(data['suffix']);
        }

        return true;
    }


}



/**
 * The curreny code string. Only used for CURRENCY format type.
 * @member {String} currencyCode
 */
GamesNumberFormatConfiguration.prototype['currencyCode'] = undefined;

/**
 * The number of decimal places for number. Only used for NUMERIC format type.
 * @member {Number} numDecimalPlaces
 */
GamesNumberFormatConfiguration.prototype['numDecimalPlaces'] = undefined;

/**
 * The formatting for the number.
 * @member {module:model/GamesNumberFormatConfiguration.NumberFormatTypeEnum} numberFormatType
 */
GamesNumberFormatConfiguration.prototype['numberFormatType'] = undefined;

/**
 * @member {module:model/GamesNumberAffixConfiguration} suffix
 */
GamesNumberFormatConfiguration.prototype['suffix'] = undefined;





/**
 * Allowed values for the <code>numberFormatType</code> property.
 * @enum {String}
 * @readonly
 */
GamesNumberFormatConfiguration['NumberFormatTypeEnum'] = {

    /**
     * value: "NUMBER_FORMAT_TYPE_UNSPECIFIED"
     * @const
     */
    "NUMBER_FORMAT_TYPE_UNSPECIFIED": "NUMBER_FORMAT_TYPE_UNSPECIFIED",

    /**
     * value: "NUMERIC"
     * @const
     */
    "NUMERIC": "NUMERIC",

    /**
     * value: "TIME_DURATION"
     * @const
     */
    "TIME_DURATION": "TIME_DURATION",

    /**
     * value: "CURRENCY"
     * @const
     */
    "CURRENCY": "CURRENCY"
};



export default GamesNumberFormatConfiguration;

