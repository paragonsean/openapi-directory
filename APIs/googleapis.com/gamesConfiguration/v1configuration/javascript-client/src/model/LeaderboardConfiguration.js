/**
 * Google Play Game Services Publishing API
 * The Google Play Game Services Publishing API allows developers to configure their games in Game Services.
 *
 * The version of the OpenAPI document: v1configuration
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LeaderboardConfigurationDetail from './LeaderboardConfigurationDetail';

/**
 * The LeaderboardConfiguration model module.
 * @module model/LeaderboardConfiguration
 * @version v1configuration
 */
class LeaderboardConfiguration {
    /**
     * Constructs a new <code>LeaderboardConfiguration</code>.
     * An leaderboard configuration resource.
     * @alias module:model/LeaderboardConfiguration
     */
    constructor() { 
        
        LeaderboardConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LeaderboardConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LeaderboardConfiguration} obj Optional instance to populate.
     * @return {module:model/LeaderboardConfiguration} The populated <code>LeaderboardConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LeaderboardConfiguration();

            if (data.hasOwnProperty('draft')) {
                obj['draft'] = LeaderboardConfigurationDetail.constructFromObject(data['draft']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('published')) {
                obj['published'] = LeaderboardConfigurationDetail.constructFromObject(data['published']);
            }
            if (data.hasOwnProperty('scoreMax')) {
                obj['scoreMax'] = ApiClient.convertToType(data['scoreMax'], 'String');
            }
            if (data.hasOwnProperty('scoreMin')) {
                obj['scoreMin'] = ApiClient.convertToType(data['scoreMin'], 'String');
            }
            if (data.hasOwnProperty('scoreOrder')) {
                obj['scoreOrder'] = ApiClient.convertToType(data['scoreOrder'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LeaderboardConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LeaderboardConfiguration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `draft`
        if (data['draft']) { // data not null
          LeaderboardConfigurationDetail.validateJSON(data['draft']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `published`
        if (data['published']) { // data not null
          LeaderboardConfigurationDetail.validateJSON(data['published']);
        }
        // ensure the json data is a string
        if (data['scoreMax'] && !(typeof data['scoreMax'] === 'string' || data['scoreMax'] instanceof String)) {
            throw new Error("Expected the field `scoreMax` to be a primitive type in the JSON string but got " + data['scoreMax']);
        }
        // ensure the json data is a string
        if (data['scoreMin'] && !(typeof data['scoreMin'] === 'string' || data['scoreMin'] instanceof String)) {
            throw new Error("Expected the field `scoreMin` to be a primitive type in the JSON string but got " + data['scoreMin']);
        }
        // ensure the json data is a string
        if (data['scoreOrder'] && !(typeof data['scoreOrder'] === 'string' || data['scoreOrder'] instanceof String)) {
            throw new Error("Expected the field `scoreOrder` to be a primitive type in the JSON string but got " + data['scoreOrder']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }

        return true;
    }


}



/**
 * @member {module:model/LeaderboardConfigurationDetail} draft
 */
LeaderboardConfiguration.prototype['draft'] = undefined;

/**
 * The ID of the leaderboard.
 * @member {String} id
 */
LeaderboardConfiguration.prototype['id'] = undefined;

/**
 * Uniquely identifies the type of this resource. Value is always the fixed string `gamesConfiguration#leaderboardConfiguration`.
 * @member {String} kind
 */
LeaderboardConfiguration.prototype['kind'] = undefined;

/**
 * @member {module:model/LeaderboardConfigurationDetail} published
 */
LeaderboardConfiguration.prototype['published'] = undefined;

/**
 * Maximum score that can be posted to this leaderboard.
 * @member {String} scoreMax
 */
LeaderboardConfiguration.prototype['scoreMax'] = undefined;

/**
 * Minimum score that can be posted to this leaderboard.
 * @member {String} scoreMin
 */
LeaderboardConfiguration.prototype['scoreMin'] = undefined;

/**
 * @member {module:model/LeaderboardConfiguration.ScoreOrderEnum} scoreOrder
 */
LeaderboardConfiguration.prototype['scoreOrder'] = undefined;

/**
 * The token for this resource.
 * @member {String} token
 */
LeaderboardConfiguration.prototype['token'] = undefined;





/**
 * Allowed values for the <code>scoreOrder</code> property.
 * @enum {String}
 * @readonly
 */
LeaderboardConfiguration['ScoreOrderEnum'] = {

    /**
     * value: "SCORE_ORDER_UNSPECIFIED"
     * @const
     */
    "SCORE_ORDER_UNSPECIFIED": "SCORE_ORDER_UNSPECIFIED",

    /**
     * value: "LARGER_IS_BETTER"
     * @const
     */
    "LARGER_IS_BETTER": "LARGER_IS_BETTER",

    /**
     * value: "SMALLER_IS_BETTER"
     * @const
     */
    "SMALLER_IS_BETTER": "SMALLER_IS_BETTER"
};



export default LeaderboardConfiguration;

