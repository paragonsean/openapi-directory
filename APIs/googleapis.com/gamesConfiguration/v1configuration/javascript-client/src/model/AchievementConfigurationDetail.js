/**
 * Google Play Game Services Publishing API
 * The Google Play Game Services Publishing API allows developers to configure their games in Game Services.
 *
 * The version of the OpenAPI document: v1configuration
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LocalizedStringBundle from './LocalizedStringBundle';

/**
 * The AchievementConfigurationDetail model module.
 * @module model/AchievementConfigurationDetail
 * @version v1configuration
 */
class AchievementConfigurationDetail {
    /**
     * Constructs a new <code>AchievementConfigurationDetail</code>.
     * An achievement configuration detail.
     * @alias module:model/AchievementConfigurationDetail
     */
    constructor() { 
        
        AchievementConfigurationDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AchievementConfigurationDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AchievementConfigurationDetail} obj Optional instance to populate.
     * @return {module:model/AchievementConfigurationDetail} The populated <code>AchievementConfigurationDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AchievementConfigurationDetail();

            if (data.hasOwnProperty('description')) {
                obj['description'] = LocalizedStringBundle.constructFromObject(data['description']);
            }
            if (data.hasOwnProperty('iconUrl')) {
                obj['iconUrl'] = ApiClient.convertToType(data['iconUrl'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = LocalizedStringBundle.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('pointValue')) {
                obj['pointValue'] = ApiClient.convertToType(data['pointValue'], 'Number');
            }
            if (data.hasOwnProperty('sortRank')) {
                obj['sortRank'] = ApiClient.convertToType(data['sortRank'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AchievementConfigurationDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AchievementConfigurationDetail</code>.
     */
    static validateJSON(data) {
        // validate the optional field `description`
        if (data['description']) { // data not null
          LocalizedStringBundle.validateJSON(data['description']);
        }
        // ensure the json data is a string
        if (data['iconUrl'] && !(typeof data['iconUrl'] === 'string' || data['iconUrl'] instanceof String)) {
            throw new Error("Expected the field `iconUrl` to be a primitive type in the JSON string but got " + data['iconUrl']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          LocalizedStringBundle.validateJSON(data['name']);
        }

        return true;
    }


}



/**
 * @member {module:model/LocalizedStringBundle} description
 */
AchievementConfigurationDetail.prototype['description'] = undefined;

/**
 * The icon url of this achievement. Writes to this field are ignored.
 * @member {String} iconUrl
 */
AchievementConfigurationDetail.prototype['iconUrl'] = undefined;

/**
 * Uniquely identifies the type of this resource. Value is always the fixed string `gamesConfiguration#achievementConfigurationDetail`.
 * @member {String} kind
 */
AchievementConfigurationDetail.prototype['kind'] = undefined;

/**
 * @member {module:model/LocalizedStringBundle} name
 */
AchievementConfigurationDetail.prototype['name'] = undefined;

/**
 * Point value for the achievement.
 * @member {Number} pointValue
 */
AchievementConfigurationDetail.prototype['pointValue'] = undefined;

/**
 * The sort rank of this achievement. Writes to this field are ignored.
 * @member {Number} sortRank
 */
AchievementConfigurationDetail.prototype['sortRank'] = undefined;






export default AchievementConfigurationDetail;

