/**
 * Google Play Game Services Publishing API
 * The Google Play Game Services Publishing API allows developers to configure their games in Game Services.
 *
 * The version of the OpenAPI document: v1configuration
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GooglePlayGameServicesPublishingApi);
  }
}(this, function(expect, GooglePlayGameServicesPublishingApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GooglePlayGameServicesPublishingApi.AchievementConfigurationsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AchievementConfigurationsApi', function() {
    describe('gamesConfigurationAchievementConfigurationsDelete', function() {
      it('should call gamesConfigurationAchievementConfigurationsDelete successfully', function(done) {
        //uncomment below and update the code to test gamesConfigurationAchievementConfigurationsDelete
        //instance.gamesConfigurationAchievementConfigurationsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gamesConfigurationAchievementConfigurationsGet', function() {
      it('should call gamesConfigurationAchievementConfigurationsGet successfully', function(done) {
        //uncomment below and update the code to test gamesConfigurationAchievementConfigurationsGet
        //instance.gamesConfigurationAchievementConfigurationsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gamesConfigurationAchievementConfigurationsInsert', function() {
      it('should call gamesConfigurationAchievementConfigurationsInsert successfully', function(done) {
        //uncomment below and update the code to test gamesConfigurationAchievementConfigurationsInsert
        //instance.gamesConfigurationAchievementConfigurationsInsert(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gamesConfigurationAchievementConfigurationsList', function() {
      it('should call gamesConfigurationAchievementConfigurationsList successfully', function(done) {
        //uncomment below and update the code to test gamesConfigurationAchievementConfigurationsList
        //instance.gamesConfigurationAchievementConfigurationsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gamesConfigurationAchievementConfigurationsUpdate', function() {
      it('should call gamesConfigurationAchievementConfigurationsUpdate successfully', function(done) {
        //uncomment below and update the code to test gamesConfigurationAchievementConfigurationsUpdate
        //instance.gamesConfigurationAchievementConfigurationsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
