/**
 * Google Play Game Services Publishing API
 * The Google Play Game Services Publishing API allows developers to configure their games in Game Services.
 *
 * The version of the OpenAPI document: v1configuration
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAchievementConfiguration.h
 *
 * An achievement configuration resource.
 */

#ifndef OAIAchievementConfiguration_H
#define OAIAchievementConfiguration_H

#include <QJsonObject>

#include "OAIAchievementConfigurationDetail.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAchievementConfigurationDetail;

class OAIAchievementConfiguration : public OAIObject {
public:
    OAIAchievementConfiguration();
    OAIAchievementConfiguration(QString json);
    ~OAIAchievementConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAchievementType() const;
    void setAchievementType(const QString &achievement_type);
    bool is_achievement_type_Set() const;
    bool is_achievement_type_Valid() const;

    OAIAchievementConfigurationDetail getDraft() const;
    void setDraft(const OAIAchievementConfigurationDetail &draft);
    bool is_draft_Set() const;
    bool is_draft_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getInitialState() const;
    void setInitialState(const QString &initial_state);
    bool is_initial_state_Set() const;
    bool is_initial_state_Valid() const;

    QString getKind() const;
    void setKind(const QString &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    OAIAchievementConfigurationDetail getPublished() const;
    void setPublished(const OAIAchievementConfigurationDetail &published);
    bool is_published_Set() const;
    bool is_published_Valid() const;

    qint32 getStepsToUnlock() const;
    void setStepsToUnlock(const qint32 &steps_to_unlock);
    bool is_steps_to_unlock_Set() const;
    bool is_steps_to_unlock_Valid() const;

    QString getToken() const;
    void setToken(const QString &token);
    bool is_token_Set() const;
    bool is_token_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_achievement_type;
    bool m_achievement_type_isSet;
    bool m_achievement_type_isValid;

    OAIAchievementConfigurationDetail m_draft;
    bool m_draft_isSet;
    bool m_draft_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_initial_state;
    bool m_initial_state_isSet;
    bool m_initial_state_isValid;

    QString m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    OAIAchievementConfigurationDetail m_published;
    bool m_published_isSet;
    bool m_published_isValid;

    qint32 m_steps_to_unlock;
    bool m_steps_to_unlock_isSet;
    bool m_steps_to_unlock_isValid;

    QString m_token;
    bool m_token_isSet;
    bool m_token_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAchievementConfiguration)

#endif // OAIAchievementConfiguration_H
