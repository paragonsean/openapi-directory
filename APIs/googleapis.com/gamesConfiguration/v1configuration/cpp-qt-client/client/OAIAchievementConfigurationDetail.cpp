/**
 * Google Play Game Services Publishing API
 * The Google Play Game Services Publishing API allows developers to configure their games in Game Services.
 *
 * The version of the OpenAPI document: v1configuration
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAchievementConfigurationDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAchievementConfigurationDetail::OAIAchievementConfigurationDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAchievementConfigurationDetail::OAIAchievementConfigurationDetail() {
    this->initializeModel();
}

OAIAchievementConfigurationDetail::~OAIAchievementConfigurationDetail() {}

void OAIAchievementConfigurationDetail::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_point_value_isSet = false;
    m_point_value_isValid = false;

    m_sort_rank_isSet = false;
    m_sort_rank_isValid = false;
}

void OAIAchievementConfigurationDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAchievementConfigurationDetail::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("iconUrl")]);
    m_icon_url_isSet = !json[QString("iconUrl")].isNull() && m_icon_url_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_point_value_isValid = ::OpenAPI::fromJsonValue(m_point_value, json[QString("pointValue")]);
    m_point_value_isSet = !json[QString("pointValue")].isNull() && m_point_value_isValid;

    m_sort_rank_isValid = ::OpenAPI::fromJsonValue(m_sort_rank, json[QString("sortRank")]);
    m_sort_rank_isSet = !json[QString("sortRank")].isNull() && m_sort_rank_isValid;
}

QString OAIAchievementConfigurationDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAchievementConfigurationDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_icon_url_isSet) {
        obj.insert(QString("iconUrl"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_point_value_isSet) {
        obj.insert(QString("pointValue"), ::OpenAPI::toJsonValue(m_point_value));
    }
    if (m_sort_rank_isSet) {
        obj.insert(QString("sortRank"), ::OpenAPI::toJsonValue(m_sort_rank));
    }
    return obj;
}

OAILocalizedStringBundle OAIAchievementConfigurationDetail::getDescription() const {
    return m_description;
}
void OAIAchievementConfigurationDetail::setDescription(const OAILocalizedStringBundle &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAchievementConfigurationDetail::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAchievementConfigurationDetail::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAchievementConfigurationDetail::getIconUrl() const {
    return m_icon_url;
}
void OAIAchievementConfigurationDetail::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAIAchievementConfigurationDetail::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAIAchievementConfigurationDetail::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

QString OAIAchievementConfigurationDetail::getKind() const {
    return m_kind;
}
void OAIAchievementConfigurationDetail::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAchievementConfigurationDetail::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAchievementConfigurationDetail::is_kind_Valid() const{
    return m_kind_isValid;
}

OAILocalizedStringBundle OAIAchievementConfigurationDetail::getName() const {
    return m_name;
}
void OAIAchievementConfigurationDetail::setName(const OAILocalizedStringBundle &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAchievementConfigurationDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAchievementConfigurationDetail::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIAchievementConfigurationDetail::getPointValue() const {
    return m_point_value;
}
void OAIAchievementConfigurationDetail::setPointValue(const qint32 &point_value) {
    m_point_value = point_value;
    m_point_value_isSet = true;
}

bool OAIAchievementConfigurationDetail::is_point_value_Set() const{
    return m_point_value_isSet;
}

bool OAIAchievementConfigurationDetail::is_point_value_Valid() const{
    return m_point_value_isValid;
}

qint32 OAIAchievementConfigurationDetail::getSortRank() const {
    return m_sort_rank;
}
void OAIAchievementConfigurationDetail::setSortRank(const qint32 &sort_rank) {
    m_sort_rank = sort_rank;
    m_sort_rank_isSet = true;
}

bool OAIAchievementConfigurationDetail::is_sort_rank_Set() const{
    return m_sort_rank_isSet;
}

bool OAIAchievementConfigurationDetail::is_sort_rank_Valid() const{
    return m_sort_rank_isValid;
}

bool OAIAchievementConfigurationDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_rank_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAchievementConfigurationDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
