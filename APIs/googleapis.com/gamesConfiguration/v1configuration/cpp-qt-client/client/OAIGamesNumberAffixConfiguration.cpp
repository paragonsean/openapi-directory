/**
 * Google Play Game Services Publishing API
 * The Google Play Game Services Publishing API allows developers to configure their games in Game Services.
 *
 * The version of the OpenAPI document: v1configuration
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGamesNumberAffixConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGamesNumberAffixConfiguration::OAIGamesNumberAffixConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGamesNumberAffixConfiguration::OAIGamesNumberAffixConfiguration() {
    this->initializeModel();
}

OAIGamesNumberAffixConfiguration::~OAIGamesNumberAffixConfiguration() {}

void OAIGamesNumberAffixConfiguration::initializeModel() {

    m_few_isSet = false;
    m_few_isValid = false;

    m_many_isSet = false;
    m_many_isValid = false;

    m_one_isSet = false;
    m_one_isValid = false;

    m_other_isSet = false;
    m_other_isValid = false;

    m_two_isSet = false;
    m_two_isValid = false;

    m_zero_isSet = false;
    m_zero_isValid = false;
}

void OAIGamesNumberAffixConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGamesNumberAffixConfiguration::fromJsonObject(QJsonObject json) {

    m_few_isValid = ::OpenAPI::fromJsonValue(m_few, json[QString("few")]);
    m_few_isSet = !json[QString("few")].isNull() && m_few_isValid;

    m_many_isValid = ::OpenAPI::fromJsonValue(m_many, json[QString("many")]);
    m_many_isSet = !json[QString("many")].isNull() && m_many_isValid;

    m_one_isValid = ::OpenAPI::fromJsonValue(m_one, json[QString("one")]);
    m_one_isSet = !json[QString("one")].isNull() && m_one_isValid;

    m_other_isValid = ::OpenAPI::fromJsonValue(m_other, json[QString("other")]);
    m_other_isSet = !json[QString("other")].isNull() && m_other_isValid;

    m_two_isValid = ::OpenAPI::fromJsonValue(m_two, json[QString("two")]);
    m_two_isSet = !json[QString("two")].isNull() && m_two_isValid;

    m_zero_isValid = ::OpenAPI::fromJsonValue(m_zero, json[QString("zero")]);
    m_zero_isSet = !json[QString("zero")].isNull() && m_zero_isValid;
}

QString OAIGamesNumberAffixConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGamesNumberAffixConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_few.isSet()) {
        obj.insert(QString("few"), ::OpenAPI::toJsonValue(m_few));
    }
    if (m_many.isSet()) {
        obj.insert(QString("many"), ::OpenAPI::toJsonValue(m_many));
    }
    if (m_one.isSet()) {
        obj.insert(QString("one"), ::OpenAPI::toJsonValue(m_one));
    }
    if (m_other.isSet()) {
        obj.insert(QString("other"), ::OpenAPI::toJsonValue(m_other));
    }
    if (m_two.isSet()) {
        obj.insert(QString("two"), ::OpenAPI::toJsonValue(m_two));
    }
    if (m_zero.isSet()) {
        obj.insert(QString("zero"), ::OpenAPI::toJsonValue(m_zero));
    }
    return obj;
}

OAILocalizedStringBundle OAIGamesNumberAffixConfiguration::getFew() const {
    return m_few;
}
void OAIGamesNumberAffixConfiguration::setFew(const OAILocalizedStringBundle &few) {
    m_few = few;
    m_few_isSet = true;
}

bool OAIGamesNumberAffixConfiguration::is_few_Set() const{
    return m_few_isSet;
}

bool OAIGamesNumberAffixConfiguration::is_few_Valid() const{
    return m_few_isValid;
}

OAILocalizedStringBundle OAIGamesNumberAffixConfiguration::getMany() const {
    return m_many;
}
void OAIGamesNumberAffixConfiguration::setMany(const OAILocalizedStringBundle &many) {
    m_many = many;
    m_many_isSet = true;
}

bool OAIGamesNumberAffixConfiguration::is_many_Set() const{
    return m_many_isSet;
}

bool OAIGamesNumberAffixConfiguration::is_many_Valid() const{
    return m_many_isValid;
}

OAILocalizedStringBundle OAIGamesNumberAffixConfiguration::getOne() const {
    return m_one;
}
void OAIGamesNumberAffixConfiguration::setOne(const OAILocalizedStringBundle &one) {
    m_one = one;
    m_one_isSet = true;
}

bool OAIGamesNumberAffixConfiguration::is_one_Set() const{
    return m_one_isSet;
}

bool OAIGamesNumberAffixConfiguration::is_one_Valid() const{
    return m_one_isValid;
}

OAILocalizedStringBundle OAIGamesNumberAffixConfiguration::getOther() const {
    return m_other;
}
void OAIGamesNumberAffixConfiguration::setOther(const OAILocalizedStringBundle &other) {
    m_other = other;
    m_other_isSet = true;
}

bool OAIGamesNumberAffixConfiguration::is_other_Set() const{
    return m_other_isSet;
}

bool OAIGamesNumberAffixConfiguration::is_other_Valid() const{
    return m_other_isValid;
}

OAILocalizedStringBundle OAIGamesNumberAffixConfiguration::getTwo() const {
    return m_two;
}
void OAIGamesNumberAffixConfiguration::setTwo(const OAILocalizedStringBundle &two) {
    m_two = two;
    m_two_isSet = true;
}

bool OAIGamesNumberAffixConfiguration::is_two_Set() const{
    return m_two_isSet;
}

bool OAIGamesNumberAffixConfiguration::is_two_Valid() const{
    return m_two_isValid;
}

OAILocalizedStringBundle OAIGamesNumberAffixConfiguration::getZero() const {
    return m_zero;
}
void OAIGamesNumberAffixConfiguration::setZero(const OAILocalizedStringBundle &zero) {
    m_zero = zero;
    m_zero_isSet = true;
}

bool OAIGamesNumberAffixConfiguration::is_zero_Set() const{
    return m_zero_isSet;
}

bool OAIGamesNumberAffixConfiguration::is_zero_Valid() const{
    return m_zero_isValid;
}

bool OAIGamesNumberAffixConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_few.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_many.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_one.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_other.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_two.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zero.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGamesNumberAffixConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
