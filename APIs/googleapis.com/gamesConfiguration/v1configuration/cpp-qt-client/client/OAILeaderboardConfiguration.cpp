/**
 * Google Play Game Services Publishing API
 * The Google Play Game Services Publishing API allows developers to configure their games in Game Services.
 *
 * The version of the OpenAPI document: v1configuration
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeaderboardConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeaderboardConfiguration::OAILeaderboardConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeaderboardConfiguration::OAILeaderboardConfiguration() {
    this->initializeModel();
}

OAILeaderboardConfiguration::~OAILeaderboardConfiguration() {}

void OAILeaderboardConfiguration::initializeModel() {

    m_draft_isSet = false;
    m_draft_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_score_max_isSet = false;
    m_score_max_isValid = false;

    m_score_min_isSet = false;
    m_score_min_isValid = false;

    m_score_order_isSet = false;
    m_score_order_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAILeaderboardConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILeaderboardConfiguration::fromJsonObject(QJsonObject json) {

    m_draft_isValid = ::OpenAPI::fromJsonValue(m_draft, json[QString("draft")]);
    m_draft_isSet = !json[QString("draft")].isNull() && m_draft_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_score_max_isValid = ::OpenAPI::fromJsonValue(m_score_max, json[QString("scoreMax")]);
    m_score_max_isSet = !json[QString("scoreMax")].isNull() && m_score_max_isValid;

    m_score_min_isValid = ::OpenAPI::fromJsonValue(m_score_min, json[QString("scoreMin")]);
    m_score_min_isSet = !json[QString("scoreMin")].isNull() && m_score_min_isValid;

    m_score_order_isValid = ::OpenAPI::fromJsonValue(m_score_order, json[QString("scoreOrder")]);
    m_score_order_isSet = !json[QString("scoreOrder")].isNull() && m_score_order_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAILeaderboardConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILeaderboardConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_draft.isSet()) {
        obj.insert(QString("draft"), ::OpenAPI::toJsonValue(m_draft));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_published.isSet()) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_score_max_isSet) {
        obj.insert(QString("scoreMax"), ::OpenAPI::toJsonValue(m_score_max));
    }
    if (m_score_min_isSet) {
        obj.insert(QString("scoreMin"), ::OpenAPI::toJsonValue(m_score_min));
    }
    if (m_score_order_isSet) {
        obj.insert(QString("scoreOrder"), ::OpenAPI::toJsonValue(m_score_order));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

OAILeaderboardConfigurationDetail OAILeaderboardConfiguration::getDraft() const {
    return m_draft;
}
void OAILeaderboardConfiguration::setDraft(const OAILeaderboardConfigurationDetail &draft) {
    m_draft = draft;
    m_draft_isSet = true;
}

bool OAILeaderboardConfiguration::is_draft_Set() const{
    return m_draft_isSet;
}

bool OAILeaderboardConfiguration::is_draft_Valid() const{
    return m_draft_isValid;
}

QString OAILeaderboardConfiguration::getId() const {
    return m_id;
}
void OAILeaderboardConfiguration::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILeaderboardConfiguration::is_id_Set() const{
    return m_id_isSet;
}

bool OAILeaderboardConfiguration::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILeaderboardConfiguration::getKind() const {
    return m_kind;
}
void OAILeaderboardConfiguration::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAILeaderboardConfiguration::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAILeaderboardConfiguration::is_kind_Valid() const{
    return m_kind_isValid;
}

OAILeaderboardConfigurationDetail OAILeaderboardConfiguration::getPublished() const {
    return m_published;
}
void OAILeaderboardConfiguration::setPublished(const OAILeaderboardConfigurationDetail &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAILeaderboardConfiguration::is_published_Set() const{
    return m_published_isSet;
}

bool OAILeaderboardConfiguration::is_published_Valid() const{
    return m_published_isValid;
}

QString OAILeaderboardConfiguration::getScoreMax() const {
    return m_score_max;
}
void OAILeaderboardConfiguration::setScoreMax(const QString &score_max) {
    m_score_max = score_max;
    m_score_max_isSet = true;
}

bool OAILeaderboardConfiguration::is_score_max_Set() const{
    return m_score_max_isSet;
}

bool OAILeaderboardConfiguration::is_score_max_Valid() const{
    return m_score_max_isValid;
}

QString OAILeaderboardConfiguration::getScoreMin() const {
    return m_score_min;
}
void OAILeaderboardConfiguration::setScoreMin(const QString &score_min) {
    m_score_min = score_min;
    m_score_min_isSet = true;
}

bool OAILeaderboardConfiguration::is_score_min_Set() const{
    return m_score_min_isSet;
}

bool OAILeaderboardConfiguration::is_score_min_Valid() const{
    return m_score_min_isValid;
}

QString OAILeaderboardConfiguration::getScoreOrder() const {
    return m_score_order;
}
void OAILeaderboardConfiguration::setScoreOrder(const QString &score_order) {
    m_score_order = score_order;
    m_score_order_isSet = true;
}

bool OAILeaderboardConfiguration::is_score_order_Set() const{
    return m_score_order_isSet;
}

bool OAILeaderboardConfiguration::is_score_order_Valid() const{
    return m_score_order_isValid;
}

QString OAILeaderboardConfiguration::getToken() const {
    return m_token;
}
void OAILeaderboardConfiguration::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAILeaderboardConfiguration::is_token_Set() const{
    return m_token_isSet;
}

bool OAILeaderboardConfiguration::is_token_Valid() const{
    return m_token_isValid;
}

bool OAILeaderboardConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_draft.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILeaderboardConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
