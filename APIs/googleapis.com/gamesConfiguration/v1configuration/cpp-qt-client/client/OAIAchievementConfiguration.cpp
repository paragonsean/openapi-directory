/**
 * Google Play Game Services Publishing API
 * The Google Play Game Services Publishing API allows developers to configure their games in Game Services.
 *
 * The version of the OpenAPI document: v1configuration
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAchievementConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAchievementConfiguration::OAIAchievementConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAchievementConfiguration::OAIAchievementConfiguration() {
    this->initializeModel();
}

OAIAchievementConfiguration::~OAIAchievementConfiguration() {}

void OAIAchievementConfiguration::initializeModel() {

    m_achievement_type_isSet = false;
    m_achievement_type_isValid = false;

    m_draft_isSet = false;
    m_draft_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_initial_state_isSet = false;
    m_initial_state_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_steps_to_unlock_isSet = false;
    m_steps_to_unlock_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAIAchievementConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAchievementConfiguration::fromJsonObject(QJsonObject json) {

    m_achievement_type_isValid = ::OpenAPI::fromJsonValue(m_achievement_type, json[QString("achievementType")]);
    m_achievement_type_isSet = !json[QString("achievementType")].isNull() && m_achievement_type_isValid;

    m_draft_isValid = ::OpenAPI::fromJsonValue(m_draft, json[QString("draft")]);
    m_draft_isSet = !json[QString("draft")].isNull() && m_draft_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_initial_state_isValid = ::OpenAPI::fromJsonValue(m_initial_state, json[QString("initialState")]);
    m_initial_state_isSet = !json[QString("initialState")].isNull() && m_initial_state_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_steps_to_unlock_isValid = ::OpenAPI::fromJsonValue(m_steps_to_unlock, json[QString("stepsToUnlock")]);
    m_steps_to_unlock_isSet = !json[QString("stepsToUnlock")].isNull() && m_steps_to_unlock_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAIAchievementConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAchievementConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_achievement_type_isSet) {
        obj.insert(QString("achievementType"), ::OpenAPI::toJsonValue(m_achievement_type));
    }
    if (m_draft.isSet()) {
        obj.insert(QString("draft"), ::OpenAPI::toJsonValue(m_draft));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_initial_state_isSet) {
        obj.insert(QString("initialState"), ::OpenAPI::toJsonValue(m_initial_state));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_published.isSet()) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_steps_to_unlock_isSet) {
        obj.insert(QString("stepsToUnlock"), ::OpenAPI::toJsonValue(m_steps_to_unlock));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

QString OAIAchievementConfiguration::getAchievementType() const {
    return m_achievement_type;
}
void OAIAchievementConfiguration::setAchievementType(const QString &achievement_type) {
    m_achievement_type = achievement_type;
    m_achievement_type_isSet = true;
}

bool OAIAchievementConfiguration::is_achievement_type_Set() const{
    return m_achievement_type_isSet;
}

bool OAIAchievementConfiguration::is_achievement_type_Valid() const{
    return m_achievement_type_isValid;
}

OAIAchievementConfigurationDetail OAIAchievementConfiguration::getDraft() const {
    return m_draft;
}
void OAIAchievementConfiguration::setDraft(const OAIAchievementConfigurationDetail &draft) {
    m_draft = draft;
    m_draft_isSet = true;
}

bool OAIAchievementConfiguration::is_draft_Set() const{
    return m_draft_isSet;
}

bool OAIAchievementConfiguration::is_draft_Valid() const{
    return m_draft_isValid;
}

QString OAIAchievementConfiguration::getId() const {
    return m_id;
}
void OAIAchievementConfiguration::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAchievementConfiguration::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAchievementConfiguration::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAchievementConfiguration::getInitialState() const {
    return m_initial_state;
}
void OAIAchievementConfiguration::setInitialState(const QString &initial_state) {
    m_initial_state = initial_state;
    m_initial_state_isSet = true;
}

bool OAIAchievementConfiguration::is_initial_state_Set() const{
    return m_initial_state_isSet;
}

bool OAIAchievementConfiguration::is_initial_state_Valid() const{
    return m_initial_state_isValid;
}

QString OAIAchievementConfiguration::getKind() const {
    return m_kind;
}
void OAIAchievementConfiguration::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAchievementConfiguration::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAchievementConfiguration::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIAchievementConfigurationDetail OAIAchievementConfiguration::getPublished() const {
    return m_published;
}
void OAIAchievementConfiguration::setPublished(const OAIAchievementConfigurationDetail &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIAchievementConfiguration::is_published_Set() const{
    return m_published_isSet;
}

bool OAIAchievementConfiguration::is_published_Valid() const{
    return m_published_isValid;
}

qint32 OAIAchievementConfiguration::getStepsToUnlock() const {
    return m_steps_to_unlock;
}
void OAIAchievementConfiguration::setStepsToUnlock(const qint32 &steps_to_unlock) {
    m_steps_to_unlock = steps_to_unlock;
    m_steps_to_unlock_isSet = true;
}

bool OAIAchievementConfiguration::is_steps_to_unlock_Set() const{
    return m_steps_to_unlock_isSet;
}

bool OAIAchievementConfiguration::is_steps_to_unlock_Valid() const{
    return m_steps_to_unlock_isValid;
}

QString OAIAchievementConfiguration::getToken() const {
    return m_token;
}
void OAIAchievementConfiguration::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIAchievementConfiguration::is_token_Set() const{
    return m_token_isSet;
}

bool OAIAchievementConfiguration::is_token_Valid() const{
    return m_token_isValid;
}

bool OAIAchievementConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_achievement_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps_to_unlock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAchievementConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
