/**
 * Google Play Game Services Publishing API
 * The Google Play Game Services Publishing API allows developers to configure their games in Game Services.
 *
 * The version of the OpenAPI document: v1configuration
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeaderboardConfigurationDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeaderboardConfigurationDetail::OAILeaderboardConfigurationDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeaderboardConfigurationDetail::OAILeaderboardConfigurationDetail() {
    this->initializeModel();
}

OAILeaderboardConfigurationDetail::~OAILeaderboardConfigurationDetail() {}

void OAILeaderboardConfigurationDetail::initializeModel() {

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_score_format_isSet = false;
    m_score_format_isValid = false;

    m_sort_rank_isSet = false;
    m_sort_rank_isValid = false;
}

void OAILeaderboardConfigurationDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILeaderboardConfigurationDetail::fromJsonObject(QJsonObject json) {

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("iconUrl")]);
    m_icon_url_isSet = !json[QString("iconUrl")].isNull() && m_icon_url_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_score_format_isValid = ::OpenAPI::fromJsonValue(m_score_format, json[QString("scoreFormat")]);
    m_score_format_isSet = !json[QString("scoreFormat")].isNull() && m_score_format_isValid;

    m_sort_rank_isValid = ::OpenAPI::fromJsonValue(m_sort_rank, json[QString("sortRank")]);
    m_sort_rank_isSet = !json[QString("sortRank")].isNull() && m_sort_rank_isValid;
}

QString OAILeaderboardConfigurationDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILeaderboardConfigurationDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_icon_url_isSet) {
        obj.insert(QString("iconUrl"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_score_format.isSet()) {
        obj.insert(QString("scoreFormat"), ::OpenAPI::toJsonValue(m_score_format));
    }
    if (m_sort_rank_isSet) {
        obj.insert(QString("sortRank"), ::OpenAPI::toJsonValue(m_sort_rank));
    }
    return obj;
}

QString OAILeaderboardConfigurationDetail::getIconUrl() const {
    return m_icon_url;
}
void OAILeaderboardConfigurationDetail::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAILeaderboardConfigurationDetail::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAILeaderboardConfigurationDetail::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

QString OAILeaderboardConfigurationDetail::getKind() const {
    return m_kind;
}
void OAILeaderboardConfigurationDetail::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAILeaderboardConfigurationDetail::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAILeaderboardConfigurationDetail::is_kind_Valid() const{
    return m_kind_isValid;
}

OAILocalizedStringBundle OAILeaderboardConfigurationDetail::getName() const {
    return m_name;
}
void OAILeaderboardConfigurationDetail::setName(const OAILocalizedStringBundle &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILeaderboardConfigurationDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAILeaderboardConfigurationDetail::is_name_Valid() const{
    return m_name_isValid;
}

OAIGamesNumberFormatConfiguration OAILeaderboardConfigurationDetail::getScoreFormat() const {
    return m_score_format;
}
void OAILeaderboardConfigurationDetail::setScoreFormat(const OAIGamesNumberFormatConfiguration &score_format) {
    m_score_format = score_format;
    m_score_format_isSet = true;
}

bool OAILeaderboardConfigurationDetail::is_score_format_Set() const{
    return m_score_format_isSet;
}

bool OAILeaderboardConfigurationDetail::is_score_format_Valid() const{
    return m_score_format_isValid;
}

qint32 OAILeaderboardConfigurationDetail::getSortRank() const {
    return m_sort_rank;
}
void OAILeaderboardConfigurationDetail::setSortRank(const qint32 &sort_rank) {
    m_sort_rank = sort_rank;
    m_sort_rank_isSet = true;
}

bool OAILeaderboardConfigurationDetail::is_sort_rank_Set() const{
    return m_sort_rank_isSet;
}

bool OAILeaderboardConfigurationDetail::is_sort_rank_Valid() const{
    return m_sort_rank_isValid;
}

bool OAILeaderboardConfigurationDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_rank_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILeaderboardConfigurationDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
