/**
 * Google Play Game Services Publishing API
 * The Google Play Game Services Publishing API allows developers to configure their games in Game Services.
 *
 * The version of the OpenAPI document: v1configuration
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGamesNumberFormatConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGamesNumberFormatConfiguration::OAIGamesNumberFormatConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGamesNumberFormatConfiguration::OAIGamesNumberFormatConfiguration() {
    this->initializeModel();
}

OAIGamesNumberFormatConfiguration::~OAIGamesNumberFormatConfiguration() {}

void OAIGamesNumberFormatConfiguration::initializeModel() {

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_num_decimal_places_isSet = false;
    m_num_decimal_places_isValid = false;

    m_number_format_type_isSet = false;
    m_number_format_type_isValid = false;

    m_suffix_isSet = false;
    m_suffix_isValid = false;
}

void OAIGamesNumberFormatConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGamesNumberFormatConfiguration::fromJsonObject(QJsonObject json) {

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_num_decimal_places_isValid = ::OpenAPI::fromJsonValue(m_num_decimal_places, json[QString("numDecimalPlaces")]);
    m_num_decimal_places_isSet = !json[QString("numDecimalPlaces")].isNull() && m_num_decimal_places_isValid;

    m_number_format_type_isValid = ::OpenAPI::fromJsonValue(m_number_format_type, json[QString("numberFormatType")]);
    m_number_format_type_isSet = !json[QString("numberFormatType")].isNull() && m_number_format_type_isValid;

    m_suffix_isValid = ::OpenAPI::fromJsonValue(m_suffix, json[QString("suffix")]);
    m_suffix_isSet = !json[QString("suffix")].isNull() && m_suffix_isValid;
}

QString OAIGamesNumberFormatConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGamesNumberFormatConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_num_decimal_places_isSet) {
        obj.insert(QString("numDecimalPlaces"), ::OpenAPI::toJsonValue(m_num_decimal_places));
    }
    if (m_number_format_type_isSet) {
        obj.insert(QString("numberFormatType"), ::OpenAPI::toJsonValue(m_number_format_type));
    }
    if (m_suffix.isSet()) {
        obj.insert(QString("suffix"), ::OpenAPI::toJsonValue(m_suffix));
    }
    return obj;
}

QString OAIGamesNumberFormatConfiguration::getCurrencyCode() const {
    return m_currency_code;
}
void OAIGamesNumberFormatConfiguration::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIGamesNumberFormatConfiguration::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIGamesNumberFormatConfiguration::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

qint32 OAIGamesNumberFormatConfiguration::getNumDecimalPlaces() const {
    return m_num_decimal_places;
}
void OAIGamesNumberFormatConfiguration::setNumDecimalPlaces(const qint32 &num_decimal_places) {
    m_num_decimal_places = num_decimal_places;
    m_num_decimal_places_isSet = true;
}

bool OAIGamesNumberFormatConfiguration::is_num_decimal_places_Set() const{
    return m_num_decimal_places_isSet;
}

bool OAIGamesNumberFormatConfiguration::is_num_decimal_places_Valid() const{
    return m_num_decimal_places_isValid;
}

QString OAIGamesNumberFormatConfiguration::getNumberFormatType() const {
    return m_number_format_type;
}
void OAIGamesNumberFormatConfiguration::setNumberFormatType(const QString &number_format_type) {
    m_number_format_type = number_format_type;
    m_number_format_type_isSet = true;
}

bool OAIGamesNumberFormatConfiguration::is_number_format_type_Set() const{
    return m_number_format_type_isSet;
}

bool OAIGamesNumberFormatConfiguration::is_number_format_type_Valid() const{
    return m_number_format_type_isValid;
}

OAIGamesNumberAffixConfiguration OAIGamesNumberFormatConfiguration::getSuffix() const {
    return m_suffix;
}
void OAIGamesNumberFormatConfiguration::setSuffix(const OAIGamesNumberAffixConfiguration &suffix) {
    m_suffix = suffix;
    m_suffix_isSet = true;
}

bool OAIGamesNumberFormatConfiguration::is_suffix_Set() const{
    return m_suffix_isSet;
}

bool OAIGamesNumberFormatConfiguration::is_suffix_Valid() const{
    return m_suffix_isValid;
}

bool OAIGamesNumberFormatConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_decimal_places_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_format_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suffix.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGamesNumberFormatConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
