# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.achievement_configuration_detail import AchievementConfigurationDetail
from openapi_server import util


class AchievementConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, achievement_type: str=None, draft: AchievementConfigurationDetail=None, id: str=None, initial_state: str=None, kind: str=None, published: AchievementConfigurationDetail=None, steps_to_unlock: int=None, token: str=None):
        """AchievementConfiguration - a model defined in OpenAPI

        :param achievement_type: The achievement_type of this AchievementConfiguration.
        :param draft: The draft of this AchievementConfiguration.
        :param id: The id of this AchievementConfiguration.
        :param initial_state: The initial_state of this AchievementConfiguration.
        :param kind: The kind of this AchievementConfiguration.
        :param published: The published of this AchievementConfiguration.
        :param steps_to_unlock: The steps_to_unlock of this AchievementConfiguration.
        :param token: The token of this AchievementConfiguration.
        """
        self.openapi_types = {
            'achievement_type': str,
            'draft': AchievementConfigurationDetail,
            'id': str,
            'initial_state': str,
            'kind': str,
            'published': AchievementConfigurationDetail,
            'steps_to_unlock': int,
            'token': str
        }

        self.attribute_map = {
            'achievement_type': 'achievementType',
            'draft': 'draft',
            'id': 'id',
            'initial_state': 'initialState',
            'kind': 'kind',
            'published': 'published',
            'steps_to_unlock': 'stepsToUnlock',
            'token': 'token'
        }

        self._achievement_type = achievement_type
        self._draft = draft
        self._id = id
        self._initial_state = initial_state
        self._kind = kind
        self._published = published
        self._steps_to_unlock = steps_to_unlock
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AchievementConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AchievementConfiguration of this AchievementConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def achievement_type(self):
        """Gets the achievement_type of this AchievementConfiguration.

        The type of the achievement.

        :return: The achievement_type of this AchievementConfiguration.
        :rtype: str
        """
        return self._achievement_type

    @achievement_type.setter
    def achievement_type(self, achievement_type):
        """Sets the achievement_type of this AchievementConfiguration.

        The type of the achievement.

        :param achievement_type: The achievement_type of this AchievementConfiguration.
        :type achievement_type: str
        """
        allowed_values = ["ACHIEVEMENT_TYPE_UNSPECIFIED", "STANDARD", "INCREMENTAL"]  # noqa: E501
        if achievement_type not in allowed_values:
            raise ValueError(
                "Invalid value for `achievement_type` ({0}), must be one of {1}"
                .format(achievement_type, allowed_values)
            )

        self._achievement_type = achievement_type

    @property
    def draft(self):
        """Gets the draft of this AchievementConfiguration.


        :return: The draft of this AchievementConfiguration.
        :rtype: AchievementConfigurationDetail
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this AchievementConfiguration.


        :param draft: The draft of this AchievementConfiguration.
        :type draft: AchievementConfigurationDetail
        """

        self._draft = draft

    @property
    def id(self):
        """Gets the id of this AchievementConfiguration.

        The ID of the achievement.

        :return: The id of this AchievementConfiguration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AchievementConfiguration.

        The ID of the achievement.

        :param id: The id of this AchievementConfiguration.
        :type id: str
        """

        self._id = id

    @property
    def initial_state(self):
        """Gets the initial_state of this AchievementConfiguration.

        The initial state of the achievement.

        :return: The initial_state of this AchievementConfiguration.
        :rtype: str
        """
        return self._initial_state

    @initial_state.setter
    def initial_state(self, initial_state):
        """Sets the initial_state of this AchievementConfiguration.

        The initial state of the achievement.

        :param initial_state: The initial_state of this AchievementConfiguration.
        :type initial_state: str
        """
        allowed_values = ["INITIAL_STATE_UNSPECIFIED", "HIDDEN", "REVEALED"]  # noqa: E501
        if initial_state not in allowed_values:
            raise ValueError(
                "Invalid value for `initial_state` ({0}), must be one of {1}"
                .format(initial_state, allowed_values)
            )

        self._initial_state = initial_state

    @property
    def kind(self):
        """Gets the kind of this AchievementConfiguration.

        Uniquely identifies the type of this resource. Value is always the fixed string `gamesConfiguration#achievementConfiguration`.

        :return: The kind of this AchievementConfiguration.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AchievementConfiguration.

        Uniquely identifies the type of this resource. Value is always the fixed string `gamesConfiguration#achievementConfiguration`.

        :param kind: The kind of this AchievementConfiguration.
        :type kind: str
        """

        self._kind = kind

    @property
    def published(self):
        """Gets the published of this AchievementConfiguration.


        :return: The published of this AchievementConfiguration.
        :rtype: AchievementConfigurationDetail
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this AchievementConfiguration.


        :param published: The published of this AchievementConfiguration.
        :type published: AchievementConfigurationDetail
        """

        self._published = published

    @property
    def steps_to_unlock(self):
        """Gets the steps_to_unlock of this AchievementConfiguration.

        Steps to unlock. Only applicable to incremental achievements.

        :return: The steps_to_unlock of this AchievementConfiguration.
        :rtype: int
        """
        return self._steps_to_unlock

    @steps_to_unlock.setter
    def steps_to_unlock(self, steps_to_unlock):
        """Sets the steps_to_unlock of this AchievementConfiguration.

        Steps to unlock. Only applicable to incremental achievements.

        :param steps_to_unlock: The steps_to_unlock of this AchievementConfiguration.
        :type steps_to_unlock: int
        """

        self._steps_to_unlock = steps_to_unlock

    @property
    def token(self):
        """Gets the token of this AchievementConfiguration.

        The token for this resource.

        :return: The token of this AchievementConfiguration.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this AchievementConfiguration.

        The token for this resource.

        :param token: The token of this AchievementConfiguration.
        :type token: str
        """

        self._token = token
