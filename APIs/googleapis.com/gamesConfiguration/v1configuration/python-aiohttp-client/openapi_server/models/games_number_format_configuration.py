# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.games_number_affix_configuration import GamesNumberAffixConfiguration
from openapi_server import util


class GamesNumberFormatConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, num_decimal_places: int=None, number_format_type: str=None, suffix: GamesNumberAffixConfiguration=None):
        """GamesNumberFormatConfiguration - a model defined in OpenAPI

        :param currency_code: The currency_code of this GamesNumberFormatConfiguration.
        :param num_decimal_places: The num_decimal_places of this GamesNumberFormatConfiguration.
        :param number_format_type: The number_format_type of this GamesNumberFormatConfiguration.
        :param suffix: The suffix of this GamesNumberFormatConfiguration.
        """
        self.openapi_types = {
            'currency_code': str,
            'num_decimal_places': int,
            'number_format_type': str,
            'suffix': GamesNumberAffixConfiguration
        }

        self.attribute_map = {
            'currency_code': 'currencyCode',
            'num_decimal_places': 'numDecimalPlaces',
            'number_format_type': 'numberFormatType',
            'suffix': 'suffix'
        }

        self._currency_code = currency_code
        self._num_decimal_places = num_decimal_places
        self._number_format_type = number_format_type
        self._suffix = suffix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GamesNumberFormatConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GamesNumberFormatConfiguration of this GamesNumberFormatConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this GamesNumberFormatConfiguration.

        The curreny code string. Only used for CURRENCY format type.

        :return: The currency_code of this GamesNumberFormatConfiguration.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this GamesNumberFormatConfiguration.

        The curreny code string. Only used for CURRENCY format type.

        :param currency_code: The currency_code of this GamesNumberFormatConfiguration.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def num_decimal_places(self):
        """Gets the num_decimal_places of this GamesNumberFormatConfiguration.

        The number of decimal places for number. Only used for NUMERIC format type.

        :return: The num_decimal_places of this GamesNumberFormatConfiguration.
        :rtype: int
        """
        return self._num_decimal_places

    @num_decimal_places.setter
    def num_decimal_places(self, num_decimal_places):
        """Sets the num_decimal_places of this GamesNumberFormatConfiguration.

        The number of decimal places for number. Only used for NUMERIC format type.

        :param num_decimal_places: The num_decimal_places of this GamesNumberFormatConfiguration.
        :type num_decimal_places: int
        """

        self._num_decimal_places = num_decimal_places

    @property
    def number_format_type(self):
        """Gets the number_format_type of this GamesNumberFormatConfiguration.

        The formatting for the number.

        :return: The number_format_type of this GamesNumberFormatConfiguration.
        :rtype: str
        """
        return self._number_format_type

    @number_format_type.setter
    def number_format_type(self, number_format_type):
        """Sets the number_format_type of this GamesNumberFormatConfiguration.

        The formatting for the number.

        :param number_format_type: The number_format_type of this GamesNumberFormatConfiguration.
        :type number_format_type: str
        """
        allowed_values = ["NUMBER_FORMAT_TYPE_UNSPECIFIED", "NUMERIC", "TIME_DURATION", "CURRENCY"]  # noqa: E501
        if number_format_type not in allowed_values:
            raise ValueError(
                "Invalid value for `number_format_type` ({0}), must be one of {1}"
                .format(number_format_type, allowed_values)
            )

        self._number_format_type = number_format_type

    @property
    def suffix(self):
        """Gets the suffix of this GamesNumberFormatConfiguration.


        :return: The suffix of this GamesNumberFormatConfiguration.
        :rtype: GamesNumberAffixConfiguration
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this GamesNumberFormatConfiguration.


        :param suffix: The suffix of this GamesNumberFormatConfiguration.
        :type suffix: GamesNumberAffixConfiguration
        """

        self._suffix = suffix
