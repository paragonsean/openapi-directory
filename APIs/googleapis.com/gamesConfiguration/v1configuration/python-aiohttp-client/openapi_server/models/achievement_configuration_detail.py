# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.localized_string_bundle import LocalizedStringBundle
from openapi_server import util


class AchievementConfigurationDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: LocalizedStringBundle=None, icon_url: str=None, kind: str=None, name: LocalizedStringBundle=None, point_value: int=None, sort_rank: int=None):
        """AchievementConfigurationDetail - a model defined in OpenAPI

        :param description: The description of this AchievementConfigurationDetail.
        :param icon_url: The icon_url of this AchievementConfigurationDetail.
        :param kind: The kind of this AchievementConfigurationDetail.
        :param name: The name of this AchievementConfigurationDetail.
        :param point_value: The point_value of this AchievementConfigurationDetail.
        :param sort_rank: The sort_rank of this AchievementConfigurationDetail.
        """
        self.openapi_types = {
            'description': LocalizedStringBundle,
            'icon_url': str,
            'kind': str,
            'name': LocalizedStringBundle,
            'point_value': int,
            'sort_rank': int
        }

        self.attribute_map = {
            'description': 'description',
            'icon_url': 'iconUrl',
            'kind': 'kind',
            'name': 'name',
            'point_value': 'pointValue',
            'sort_rank': 'sortRank'
        }

        self._description = description
        self._icon_url = icon_url
        self._kind = kind
        self._name = name
        self._point_value = point_value
        self._sort_rank = sort_rank

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AchievementConfigurationDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AchievementConfigurationDetail of this AchievementConfigurationDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this AchievementConfigurationDetail.


        :return: The description of this AchievementConfigurationDetail.
        :rtype: LocalizedStringBundle
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AchievementConfigurationDetail.


        :param description: The description of this AchievementConfigurationDetail.
        :type description: LocalizedStringBundle
        """

        self._description = description

    @property
    def icon_url(self):
        """Gets the icon_url of this AchievementConfigurationDetail.

        The icon url of this achievement. Writes to this field are ignored.

        :return: The icon_url of this AchievementConfigurationDetail.
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this AchievementConfigurationDetail.

        The icon url of this achievement. Writes to this field are ignored.

        :param icon_url: The icon_url of this AchievementConfigurationDetail.
        :type icon_url: str
        """

        self._icon_url = icon_url

    @property
    def kind(self):
        """Gets the kind of this AchievementConfigurationDetail.

        Uniquely identifies the type of this resource. Value is always the fixed string `gamesConfiguration#achievementConfigurationDetail`.

        :return: The kind of this AchievementConfigurationDetail.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AchievementConfigurationDetail.

        Uniquely identifies the type of this resource. Value is always the fixed string `gamesConfiguration#achievementConfigurationDetail`.

        :param kind: The kind of this AchievementConfigurationDetail.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this AchievementConfigurationDetail.


        :return: The name of this AchievementConfigurationDetail.
        :rtype: LocalizedStringBundle
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AchievementConfigurationDetail.


        :param name: The name of this AchievementConfigurationDetail.
        :type name: LocalizedStringBundle
        """

        self._name = name

    @property
    def point_value(self):
        """Gets the point_value of this AchievementConfigurationDetail.

        Point value for the achievement.

        :return: The point_value of this AchievementConfigurationDetail.
        :rtype: int
        """
        return self._point_value

    @point_value.setter
    def point_value(self, point_value):
        """Sets the point_value of this AchievementConfigurationDetail.

        Point value for the achievement.

        :param point_value: The point_value of this AchievementConfigurationDetail.
        :type point_value: int
        """

        self._point_value = point_value

    @property
    def sort_rank(self):
        """Gets the sort_rank of this AchievementConfigurationDetail.

        The sort rank of this achievement. Writes to this field are ignored.

        :return: The sort_rank of this AchievementConfigurationDetail.
        :rtype: int
        """
        return self._sort_rank

    @sort_rank.setter
    def sort_rank(self, sort_rank):
        """Sets the sort_rank of this AchievementConfigurationDetail.

        The sort rank of this achievement. Writes to this field are ignored.

        :param sort_rank: The sort_rank of this AchievementConfigurationDetail.
        :type sort_rank: int
        """

        self._sort_rank = sort_rank
