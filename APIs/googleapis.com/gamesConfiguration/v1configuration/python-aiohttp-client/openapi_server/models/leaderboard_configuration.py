# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.leaderboard_configuration_detail import LeaderboardConfigurationDetail
from openapi_server import util


class LeaderboardConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, draft: LeaderboardConfigurationDetail=None, id: str=None, kind: str=None, published: LeaderboardConfigurationDetail=None, score_max: str=None, score_min: str=None, score_order: str=None, token: str=None):
        """LeaderboardConfiguration - a model defined in OpenAPI

        :param draft: The draft of this LeaderboardConfiguration.
        :param id: The id of this LeaderboardConfiguration.
        :param kind: The kind of this LeaderboardConfiguration.
        :param published: The published of this LeaderboardConfiguration.
        :param score_max: The score_max of this LeaderboardConfiguration.
        :param score_min: The score_min of this LeaderboardConfiguration.
        :param score_order: The score_order of this LeaderboardConfiguration.
        :param token: The token of this LeaderboardConfiguration.
        """
        self.openapi_types = {
            'draft': LeaderboardConfigurationDetail,
            'id': str,
            'kind': str,
            'published': LeaderboardConfigurationDetail,
            'score_max': str,
            'score_min': str,
            'score_order': str,
            'token': str
        }

        self.attribute_map = {
            'draft': 'draft',
            'id': 'id',
            'kind': 'kind',
            'published': 'published',
            'score_max': 'scoreMax',
            'score_min': 'scoreMin',
            'score_order': 'scoreOrder',
            'token': 'token'
        }

        self._draft = draft
        self._id = id
        self._kind = kind
        self._published = published
        self._score_max = score_max
        self._score_min = score_min
        self._score_order = score_order
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LeaderboardConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LeaderboardConfiguration of this LeaderboardConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def draft(self):
        """Gets the draft of this LeaderboardConfiguration.


        :return: The draft of this LeaderboardConfiguration.
        :rtype: LeaderboardConfigurationDetail
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this LeaderboardConfiguration.


        :param draft: The draft of this LeaderboardConfiguration.
        :type draft: LeaderboardConfigurationDetail
        """

        self._draft = draft

    @property
    def id(self):
        """Gets the id of this LeaderboardConfiguration.

        The ID of the leaderboard.

        :return: The id of this LeaderboardConfiguration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LeaderboardConfiguration.

        The ID of the leaderboard.

        :param id: The id of this LeaderboardConfiguration.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this LeaderboardConfiguration.

        Uniquely identifies the type of this resource. Value is always the fixed string `gamesConfiguration#leaderboardConfiguration`.

        :return: The kind of this LeaderboardConfiguration.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this LeaderboardConfiguration.

        Uniquely identifies the type of this resource. Value is always the fixed string `gamesConfiguration#leaderboardConfiguration`.

        :param kind: The kind of this LeaderboardConfiguration.
        :type kind: str
        """

        self._kind = kind

    @property
    def published(self):
        """Gets the published of this LeaderboardConfiguration.


        :return: The published of this LeaderboardConfiguration.
        :rtype: LeaderboardConfigurationDetail
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this LeaderboardConfiguration.


        :param published: The published of this LeaderboardConfiguration.
        :type published: LeaderboardConfigurationDetail
        """

        self._published = published

    @property
    def score_max(self):
        """Gets the score_max of this LeaderboardConfiguration.

        Maximum score that can be posted to this leaderboard.

        :return: The score_max of this LeaderboardConfiguration.
        :rtype: str
        """
        return self._score_max

    @score_max.setter
    def score_max(self, score_max):
        """Sets the score_max of this LeaderboardConfiguration.

        Maximum score that can be posted to this leaderboard.

        :param score_max: The score_max of this LeaderboardConfiguration.
        :type score_max: str
        """

        self._score_max = score_max

    @property
    def score_min(self):
        """Gets the score_min of this LeaderboardConfiguration.

        Minimum score that can be posted to this leaderboard.

        :return: The score_min of this LeaderboardConfiguration.
        :rtype: str
        """
        return self._score_min

    @score_min.setter
    def score_min(self, score_min):
        """Sets the score_min of this LeaderboardConfiguration.

        Minimum score that can be posted to this leaderboard.

        :param score_min: The score_min of this LeaderboardConfiguration.
        :type score_min: str
        """

        self._score_min = score_min

    @property
    def score_order(self):
        """Gets the score_order of this LeaderboardConfiguration.


        :return: The score_order of this LeaderboardConfiguration.
        :rtype: str
        """
        return self._score_order

    @score_order.setter
    def score_order(self, score_order):
        """Sets the score_order of this LeaderboardConfiguration.


        :param score_order: The score_order of this LeaderboardConfiguration.
        :type score_order: str
        """
        allowed_values = ["SCORE_ORDER_UNSPECIFIED", "LARGER_IS_BETTER", "SMALLER_IS_BETTER"]  # noqa: E501
        if score_order not in allowed_values:
            raise ValueError(
                "Invalid value for `score_order` ({0}), must be one of {1}"
                .format(score_order, allowed_values)
            )

        self._score_order = score_order

    @property
    def token(self):
        """Gets the token of this LeaderboardConfiguration.

        The token for this resource.

        :return: The token of this LeaderboardConfiguration.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this LeaderboardConfiguration.

        The token for this resource.

        :param token: The token of this LeaderboardConfiguration.
        :type token: str
        """

        self._token = token
