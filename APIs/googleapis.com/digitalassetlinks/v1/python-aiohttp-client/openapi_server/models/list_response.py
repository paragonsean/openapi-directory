# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.statement import Statement
from openapi_server import util


class ListResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, debug_string: str=None, error_code: List[str]=None, max_age: str=None, statements: List[Statement]=None):
        """ListResponse - a model defined in OpenAPI

        :param debug_string: The debug_string of this ListResponse.
        :param error_code: The error_code of this ListResponse.
        :param max_age: The max_age of this ListResponse.
        :param statements: The statements of this ListResponse.
        """
        self.openapi_types = {
            'debug_string': str,
            'error_code': List[str],
            'max_age': str,
            'statements': List[Statement]
        }

        self.attribute_map = {
            'debug_string': 'debugString',
            'error_code': 'errorCode',
            'max_age': 'maxAge',
            'statements': 'statements'
        }

        self._debug_string = debug_string
        self._error_code = error_code
        self._max_age = max_age
        self._statements = statements

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListResponse of this ListResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def debug_string(self):
        """Gets the debug_string of this ListResponse.

        Human-readable message containing information intended to help end users understand, reproduce and debug the result. The message will be in English and we are currently not planning to offer any translations. Please note that no guarantees are made about the contents or format of this string. Any aspect of it may be subject to change without notice. You should not attempt to programmatically parse this data. For programmatic access, use the error_code field below.

        :return: The debug_string of this ListResponse.
        :rtype: str
        """
        return self._debug_string

    @debug_string.setter
    def debug_string(self, debug_string):
        """Sets the debug_string of this ListResponse.

        Human-readable message containing information intended to help end users understand, reproduce and debug the result. The message will be in English and we are currently not planning to offer any translations. Please note that no guarantees are made about the contents or format of this string. Any aspect of it may be subject to change without notice. You should not attempt to programmatically parse this data. For programmatic access, use the error_code field below.

        :param debug_string: The debug_string of this ListResponse.
        :type debug_string: str
        """

        self._debug_string = debug_string

    @property
    def error_code(self):
        """Gets the error_code of this ListResponse.

        Error codes that describe the result of the List operation.

        :return: The error_code of this ListResponse.
        :rtype: List[str]
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ListResponse.

        Error codes that describe the result of the List operation.

        :param error_code: The error_code of this ListResponse.
        :type error_code: List[str]
        """
        allowed_values = ["ERROR_CODE_UNSPECIFIED", "ERROR_CODE_INVALID_QUERY", "ERROR_CODE_FETCH_ERROR", "ERROR_CODE_FAILED_SSL_VALIDATION", "ERROR_CODE_REDIRECT", "ERROR_CODE_TOO_LARGE", "ERROR_CODE_MALFORMED_HTTP_RESPONSE", "ERROR_CODE_WRONG_CONTENT_TYPE", "ERROR_CODE_MALFORMED_CONTENT", "ERROR_CODE_SECURE_ASSET_INCLUDES_INSECURE", "ERROR_CODE_FETCH_BUDGET_EXHAUSTED"]  # noqa: E501
        if not set(error_code).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `error_code` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(error_code) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._error_code = error_code

    @property
    def max_age(self):
        """Gets the max_age of this ListResponse.

        From serving time, how much longer the response should be considered valid barring further updates. REQUIRED

        :return: The max_age of this ListResponse.
        :rtype: str
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age):
        """Sets the max_age of this ListResponse.

        From serving time, how much longer the response should be considered valid barring further updates. REQUIRED

        :param max_age: The max_age of this ListResponse.
        :type max_age: str
        """

        self._max_age = max_age

    @property
    def statements(self):
        """Gets the statements of this ListResponse.

        A list of all the matching statements that have been found.

        :return: The statements of this ListResponse.
        :rtype: List[Statement]
        """
        return self._statements

    @statements.setter
    def statements(self, statements):
        """Sets the statements of this ListResponse.

        A list of all the matching statements that have been found.

        :param statements: The statements of this ListResponse.
        :type statements: List[Statement]
        """

        self._statements = statements
