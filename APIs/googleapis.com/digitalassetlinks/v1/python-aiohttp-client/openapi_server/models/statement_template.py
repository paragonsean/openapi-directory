# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset import Asset
from openapi_server import util


class StatementTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, relation: str=None, source: Asset=None, target: Asset=None):
        """StatementTemplate - a model defined in OpenAPI

        :param relation: The relation of this StatementTemplate.
        :param source: The source of this StatementTemplate.
        :param target: The target of this StatementTemplate.
        """
        self.openapi_types = {
            'relation': str,
            'source': Asset,
            'target': Asset
        }

        self.attribute_map = {
            'relation': 'relation',
            'source': 'source',
            'target': 'target'
        }

        self._relation = relation
        self._source = source
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatementTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatementTemplate of this StatementTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def relation(self):
        """Gets the relation of this StatementTemplate.

        The relationship being asserted between the source and target. If omitted, you must specify a BulkCheckRequest.default_relation value to use here.

        :return: The relation of this StatementTemplate.
        :rtype: str
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this StatementTemplate.

        The relationship being asserted between the source and target. If omitted, you must specify a BulkCheckRequest.default_relation value to use here.

        :param relation: The relation of this StatementTemplate.
        :type relation: str
        """

        self._relation = relation

    @property
    def source(self):
        """Gets the source of this StatementTemplate.


        :return: The source of this StatementTemplate.
        :rtype: Asset
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this StatementTemplate.


        :param source: The source of this StatementTemplate.
        :type source: Asset
        """

        self._source = source

    @property
    def target(self):
        """Gets the target of this StatementTemplate.


        :return: The target of this StatementTemplate.
        :rtype: Asset
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this StatementTemplate.


        :param target: The target of this StatementTemplate.
        :type target: Asset
        """

        self._target = target
