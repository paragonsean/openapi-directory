# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset import Asset
from openapi_server import util


class Statement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, relation: str=None, source: Asset=None, target: Asset=None):
        """Statement - a model defined in OpenAPI

        :param relation: The relation of this Statement.
        :param source: The source of this Statement.
        :param target: The target of this Statement.
        """
        self.openapi_types = {
            'relation': str,
            'source': Asset,
            'target': Asset
        }

        self.attribute_map = {
            'relation': 'relation',
            'source': 'source',
            'target': 'target'
        }

        self._relation = relation
        self._source = source
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Statement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Statement of this Statement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def relation(self):
        """Gets the relation of this Statement.

        The relation identifies the use of the statement as intended by the source asset's owner (that is, the person or entity who issued the statement). Every complete statement has a relation. We identify relations with strings of the format `/`, where `` must be one of a set of pre-defined purpose categories, and `` is a free-form lowercase alphanumeric string that describes the specific use case of the statement. Refer to [our API documentation](/digital-asset-links/v1/relation-strings) for the current list of supported relations. Example: `delegate_permission/common.handle_all_urls` REQUIRED

        :return: The relation of this Statement.
        :rtype: str
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this Statement.

        The relation identifies the use of the statement as intended by the source asset's owner (that is, the person or entity who issued the statement). Every complete statement has a relation. We identify relations with strings of the format `/`, where `` must be one of a set of pre-defined purpose categories, and `` is a free-form lowercase alphanumeric string that describes the specific use case of the statement. Refer to [our API documentation](/digital-asset-links/v1/relation-strings) for the current list of supported relations. Example: `delegate_permission/common.handle_all_urls` REQUIRED

        :param relation: The relation of this Statement.
        :type relation: str
        """

        self._relation = relation

    @property
    def source(self):
        """Gets the source of this Statement.


        :return: The source of this Statement.
        :rtype: Asset
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Statement.


        :param source: The source of this Statement.
        :type source: Asset
        """

        self._source = source

    @property
    def target(self):
        """Gets the target of this Statement.


        :return: The target of this Statement.
        :rtype: Asset
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Statement.


        :param target: The target of this Statement.
        :type target: Asset
        """

        self._target = target
