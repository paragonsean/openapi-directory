/*
 * Digital Asset Links API
 * Discovers relationships between online assets such as websites or mobile apps.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message for the CheckAssetLinks call.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:22.365502-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckResponse {
  public static final String SERIALIZED_NAME_DEBUG_STRING = "debugString";
  @SerializedName(SERIALIZED_NAME_DEBUG_STRING)
  private String debugString;

  /**
   * Gets or Sets errorCode
   */
  @JsonAdapter(ErrorCodeEnum.Adapter.class)
  public enum ErrorCodeEnum {
    UNSPECIFIED("ERROR_CODE_UNSPECIFIED"),
    
    INVALID_QUERY("ERROR_CODE_INVALID_QUERY"),
    
    FETCH_ERROR("ERROR_CODE_FETCH_ERROR"),
    
    FAILED_SSL_VALIDATION("ERROR_CODE_FAILED_SSL_VALIDATION"),
    
    REDIRECT("ERROR_CODE_REDIRECT"),
    
    TOO_LARGE("ERROR_CODE_TOO_LARGE"),
    
    MALFORMED_HTTP_RESPONSE("ERROR_CODE_MALFORMED_HTTP_RESPONSE"),
    
    WRONG_CONTENT_TYPE("ERROR_CODE_WRONG_CONTENT_TYPE"),
    
    MALFORMED_CONTENT("ERROR_CODE_MALFORMED_CONTENT"),
    
    SECURE_ASSET_INCLUDES_INSECURE("ERROR_CODE_SECURE_ASSET_INCLUDES_INSECURE"),
    
    FETCH_BUDGET_EXHAUSTED("ERROR_CODE_FETCH_BUDGET_EXHAUSTED");

    private String value;

    ErrorCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorCodeEnum fromValue(String value) {
      for (ErrorCodeEnum b : ErrorCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ErrorCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ErrorCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ErrorCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private List<ErrorCodeEnum> errorCode = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINKED = "linked";
  @SerializedName(SERIALIZED_NAME_LINKED)
  private Boolean linked;

  public static final String SERIALIZED_NAME_MAX_AGE = "maxAge";
  @SerializedName(SERIALIZED_NAME_MAX_AGE)
  private String maxAge;

  public CheckResponse() {
  }

  public CheckResponse debugString(String debugString) {
    this.debugString = debugString;
    return this;
  }

  /**
   * Human-readable message containing information intended to help end users understand, reproduce and debug the result. The message will be in English and we are currently not planning to offer any translations. Please note that no guarantees are made about the contents or format of this string. Any aspect of it may be subject to change without notice. You should not attempt to programmatically parse this data. For programmatic access, use the error_code field below.
   * @return debugString
   */
  @javax.annotation.Nullable
  public String getDebugString() {
    return debugString;
  }

  public void setDebugString(String debugString) {
    this.debugString = debugString;
  }


  public CheckResponse errorCode(List<ErrorCodeEnum> errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  public CheckResponse addErrorCodeItem(ErrorCodeEnum errorCodeItem) {
    if (this.errorCode == null) {
      this.errorCode = new ArrayList<>();
    }
    this.errorCode.add(errorCodeItem);
    return this;
  }

  /**
   * Error codes that describe the result of the Check operation.
   * @return errorCode
   */
  @javax.annotation.Nullable
  public List<ErrorCodeEnum> getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(List<ErrorCodeEnum> errorCode) {
    this.errorCode = errorCode;
  }


  public CheckResponse linked(Boolean linked) {
    this.linked = linked;
    return this;
  }

  /**
   * Set to true if the assets specified in the request are linked by the relation specified in the request.
   * @return linked
   */
  @javax.annotation.Nullable
  public Boolean getLinked() {
    return linked;
  }

  public void setLinked(Boolean linked) {
    this.linked = linked;
  }


  public CheckResponse maxAge(String maxAge) {
    this.maxAge = maxAge;
    return this;
  }

  /**
   * From serving time, how much longer the response should be considered valid barring further updates. REQUIRED
   * @return maxAge
   */
  @javax.annotation.Nullable
  public String getMaxAge() {
    return maxAge;
  }

  public void setMaxAge(String maxAge) {
    this.maxAge = maxAge;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckResponse checkResponse = (CheckResponse) o;
    return Objects.equals(this.debugString, checkResponse.debugString) &&
        Objects.equals(this.errorCode, checkResponse.errorCode) &&
        Objects.equals(this.linked, checkResponse.linked) &&
        Objects.equals(this.maxAge, checkResponse.maxAge);
  }

  @Override
  public int hashCode() {
    return Objects.hash(debugString, errorCode, linked, maxAge);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckResponse {\n");
    sb.append("    debugString: ").append(toIndentedString(debugString)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    linked: ").append(toIndentedString(linked)).append("\n");
    sb.append("    maxAge: ").append(toIndentedString(maxAge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("debugString");
    openapiFields.add("errorCode");
    openapiFields.add("linked");
    openapiFields.add("maxAge");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckResponse is not found in the empty JSON string", CheckResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("debugString") != null && !jsonObj.get("debugString").isJsonNull()) && !jsonObj.get("debugString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debugString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debugString").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("errorCode") != null && !jsonObj.get("errorCode").isJsonNull() && !jsonObj.get("errorCode").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorCode` to be an array in the JSON string but got `%s`", jsonObj.get("errorCode").toString()));
      }
      if ((jsonObj.get("maxAge") != null && !jsonObj.get("maxAge").isJsonNull()) && !jsonObj.get("maxAge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxAge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxAge").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckResponse>() {
           @Override
           public void write(JsonWriter out, CheckResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckResponse
   * @throws IOException if the JSON string is invalid with respect to CheckResponse
   */
  public static CheckResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckResponse.class);
  }

  /**
   * Convert an instance of CheckResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

