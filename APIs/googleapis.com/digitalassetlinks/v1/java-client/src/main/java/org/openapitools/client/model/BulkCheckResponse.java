/*
 * Digital Asset Links API
 * Discovers relationships between online assets such as websites or mobile apps.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CheckResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response for BulkCheck call. Results are sent in a list in the same order in which they were sent. Individual check errors are described in the appropriate check_results entry. If the entire call fails, the response will include a bulk_error_code field describing the error.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:22.365502-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BulkCheckResponse {
  /**
   * Error code for the entire request. Present only if the entire request failed. Individual check errors will not trigger the presence of this field.
   */
  @JsonAdapter(BulkErrorCodeEnum.Adapter.class)
  public enum BulkErrorCodeEnum {
    UNSPECIFIED("ERROR_CODE_UNSPECIFIED"),
    
    INVALID_QUERY("ERROR_CODE_INVALID_QUERY"),
    
    FETCH_ERROR("ERROR_CODE_FETCH_ERROR"),
    
    FAILED_SSL_VALIDATION("ERROR_CODE_FAILED_SSL_VALIDATION"),
    
    REDIRECT("ERROR_CODE_REDIRECT"),
    
    TOO_LARGE("ERROR_CODE_TOO_LARGE"),
    
    MALFORMED_HTTP_RESPONSE("ERROR_CODE_MALFORMED_HTTP_RESPONSE"),
    
    WRONG_CONTENT_TYPE("ERROR_CODE_WRONG_CONTENT_TYPE"),
    
    MALFORMED_CONTENT("ERROR_CODE_MALFORMED_CONTENT"),
    
    SECURE_ASSET_INCLUDES_INSECURE("ERROR_CODE_SECURE_ASSET_INCLUDES_INSECURE"),
    
    FETCH_BUDGET_EXHAUSTED("ERROR_CODE_FETCH_BUDGET_EXHAUSTED");

    private String value;

    BulkErrorCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BulkErrorCodeEnum fromValue(String value) {
      for (BulkErrorCodeEnum b : BulkErrorCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BulkErrorCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BulkErrorCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BulkErrorCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BulkErrorCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BulkErrorCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BULK_ERROR_CODE = "bulkErrorCode";
  @SerializedName(SERIALIZED_NAME_BULK_ERROR_CODE)
  private BulkErrorCodeEnum bulkErrorCode;

  public static final String SERIALIZED_NAME_CHECK_RESULTS = "checkResults";
  @SerializedName(SERIALIZED_NAME_CHECK_RESULTS)
  private List<CheckResponse> checkResults = new ArrayList<>();

  public BulkCheckResponse() {
  }

  public BulkCheckResponse bulkErrorCode(BulkErrorCodeEnum bulkErrorCode) {
    this.bulkErrorCode = bulkErrorCode;
    return this;
  }

  /**
   * Error code for the entire request. Present only if the entire request failed. Individual check errors will not trigger the presence of this field.
   * @return bulkErrorCode
   */
  @javax.annotation.Nullable
  public BulkErrorCodeEnum getBulkErrorCode() {
    return bulkErrorCode;
  }

  public void setBulkErrorCode(BulkErrorCodeEnum bulkErrorCode) {
    this.bulkErrorCode = bulkErrorCode;
  }


  public BulkCheckResponse checkResults(List<CheckResponse> checkResults) {
    this.checkResults = checkResults;
    return this;
  }

  public BulkCheckResponse addCheckResultsItem(CheckResponse checkResultsItem) {
    if (this.checkResults == null) {
      this.checkResults = new ArrayList<>();
    }
    this.checkResults.add(checkResultsItem);
    return this;
  }

  /**
   * List of results for each check request. Results are returned in the same order in which they were sent in the request.
   * @return checkResults
   */
  @javax.annotation.Nullable
  public List<CheckResponse> getCheckResults() {
    return checkResults;
  }

  public void setCheckResults(List<CheckResponse> checkResults) {
    this.checkResults = checkResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkCheckResponse bulkCheckResponse = (BulkCheckResponse) o;
    return Objects.equals(this.bulkErrorCode, bulkCheckResponse.bulkErrorCode) &&
        Objects.equals(this.checkResults, bulkCheckResponse.checkResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bulkErrorCode, checkResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkCheckResponse {\n");
    sb.append("    bulkErrorCode: ").append(toIndentedString(bulkErrorCode)).append("\n");
    sb.append("    checkResults: ").append(toIndentedString(checkResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bulkErrorCode");
    openapiFields.add("checkResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BulkCheckResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BulkCheckResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkCheckResponse is not found in the empty JSON string", BulkCheckResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BulkCheckResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BulkCheckResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bulkErrorCode") != null && !jsonObj.get("bulkErrorCode").isJsonNull()) && !jsonObj.get("bulkErrorCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bulkErrorCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bulkErrorCode").toString()));
      }
      // validate the optional field `bulkErrorCode`
      if (jsonObj.get("bulkErrorCode") != null && !jsonObj.get("bulkErrorCode").isJsonNull()) {
        BulkErrorCodeEnum.validateJsonElement(jsonObj.get("bulkErrorCode"));
      }
      if (jsonObj.get("checkResults") != null && !jsonObj.get("checkResults").isJsonNull()) {
        JsonArray jsonArraycheckResults = jsonObj.getAsJsonArray("checkResults");
        if (jsonArraycheckResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("checkResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `checkResults` to be an array in the JSON string but got `%s`", jsonObj.get("checkResults").toString()));
          }

          // validate the optional field `checkResults` (array)
          for (int i = 0; i < jsonArraycheckResults.size(); i++) {
            CheckResponse.validateJsonElement(jsonArraycheckResults.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkCheckResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkCheckResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkCheckResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkCheckResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkCheckResponse>() {
           @Override
           public void write(JsonWriter out, BulkCheckResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkCheckResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BulkCheckResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BulkCheckResponse
   * @throws IOException if the JSON string is invalid with respect to BulkCheckResponse
   */
  public static BulkCheckResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkCheckResponse.class);
  }

  /**
   * Convert an instance of BulkCheckResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

