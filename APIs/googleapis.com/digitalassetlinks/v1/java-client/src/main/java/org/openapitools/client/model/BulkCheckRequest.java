/*
 * Digital Asset Links API
 * Discovers relationships between online assets such as websites or mobile apps.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Asset;
import org.openapitools.client.model.StatementTemplate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message used to check for the existence of multiple digital asset links within a single RPC.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:22.365502-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BulkCheckRequest {
  public static final String SERIALIZED_NAME_ALLOW_GOOGLE_INTERNAL_DATA_SOURCES = "allowGoogleInternalDataSources";
  @SerializedName(SERIALIZED_NAME_ALLOW_GOOGLE_INTERNAL_DATA_SOURCES)
  private Boolean allowGoogleInternalDataSources;

  public static final String SERIALIZED_NAME_DEFAULT_RELATION = "defaultRelation";
  @SerializedName(SERIALIZED_NAME_DEFAULT_RELATION)
  private String defaultRelation;

  public static final String SERIALIZED_NAME_DEFAULT_SOURCE = "defaultSource";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SOURCE)
  private Asset defaultSource;

  public static final String SERIALIZED_NAME_DEFAULT_TARGET = "defaultTarget";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TARGET)
  private Asset defaultTarget;

  public static final String SERIALIZED_NAME_SKIP_CACHE_LOOKUP = "skipCacheLookup";
  @SerializedName(SERIALIZED_NAME_SKIP_CACHE_LOOKUP)
  private Boolean skipCacheLookup;

  public static final String SERIALIZED_NAME_STATEMENTS = "statements";
  @SerializedName(SERIALIZED_NAME_STATEMENTS)
  private List<StatementTemplate> statements = new ArrayList<>();

  public BulkCheckRequest() {
  }

  public BulkCheckRequest allowGoogleInternalDataSources(Boolean allowGoogleInternalDataSources) {
    this.allowGoogleInternalDataSources = allowGoogleInternalDataSources;
    return this;
  }

  /**
   * Same configuration as in Check request, all statements checks will use same configurations.
   * @return allowGoogleInternalDataSources
   */
  @javax.annotation.Nullable
  public Boolean getAllowGoogleInternalDataSources() {
    return allowGoogleInternalDataSources;
  }

  public void setAllowGoogleInternalDataSources(Boolean allowGoogleInternalDataSources) {
    this.allowGoogleInternalDataSources = allowGoogleInternalDataSources;
  }


  public BulkCheckRequest defaultRelation(String defaultRelation) {
    this.defaultRelation = defaultRelation;
    return this;
  }

  /**
   * If specified, will be used in any given template statement that doesnâ€™t specify a relation.
   * @return defaultRelation
   */
  @javax.annotation.Nullable
  public String getDefaultRelation() {
    return defaultRelation;
  }

  public void setDefaultRelation(String defaultRelation) {
    this.defaultRelation = defaultRelation;
  }


  public BulkCheckRequest defaultSource(Asset defaultSource) {
    this.defaultSource = defaultSource;
    return this;
  }

  /**
   * Get defaultSource
   * @return defaultSource
   */
  @javax.annotation.Nullable
  public Asset getDefaultSource() {
    return defaultSource;
  }

  public void setDefaultSource(Asset defaultSource) {
    this.defaultSource = defaultSource;
  }


  public BulkCheckRequest defaultTarget(Asset defaultTarget) {
    this.defaultTarget = defaultTarget;
    return this;
  }

  /**
   * Get defaultTarget
   * @return defaultTarget
   */
  @javax.annotation.Nullable
  public Asset getDefaultTarget() {
    return defaultTarget;
  }

  public void setDefaultTarget(Asset defaultTarget) {
    this.defaultTarget = defaultTarget;
  }


  public BulkCheckRequest skipCacheLookup(Boolean skipCacheLookup) {
    this.skipCacheLookup = skipCacheLookup;
    return this;
  }

  /**
   * Same configuration as in Check request, all statements checks will use same configurations.
   * @return skipCacheLookup
   */
  @javax.annotation.Nullable
  public Boolean getSkipCacheLookup() {
    return skipCacheLookup;
  }

  public void setSkipCacheLookup(Boolean skipCacheLookup) {
    this.skipCacheLookup = skipCacheLookup;
  }


  public BulkCheckRequest statements(List<StatementTemplate> statements) {
    this.statements = statements;
    return this;
  }

  public BulkCheckRequest addStatementsItem(StatementTemplate statementsItem) {
    if (this.statements == null) {
      this.statements = new ArrayList<>();
    }
    this.statements.add(statementsItem);
    return this;
  }

  /**
   * List of statements to check. For each statement, you can omit a field if the corresponding default_* field below was supplied. Minimum 1 statement; maximum 1,000 statements. Any additional statements will be ignored.
   * @return statements
   */
  @javax.annotation.Nullable
  public List<StatementTemplate> getStatements() {
    return statements;
  }

  public void setStatements(List<StatementTemplate> statements) {
    this.statements = statements;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkCheckRequest bulkCheckRequest = (BulkCheckRequest) o;
    return Objects.equals(this.allowGoogleInternalDataSources, bulkCheckRequest.allowGoogleInternalDataSources) &&
        Objects.equals(this.defaultRelation, bulkCheckRequest.defaultRelation) &&
        Objects.equals(this.defaultSource, bulkCheckRequest.defaultSource) &&
        Objects.equals(this.defaultTarget, bulkCheckRequest.defaultTarget) &&
        Objects.equals(this.skipCacheLookup, bulkCheckRequest.skipCacheLookup) &&
        Objects.equals(this.statements, bulkCheckRequest.statements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowGoogleInternalDataSources, defaultRelation, defaultSource, defaultTarget, skipCacheLookup, statements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkCheckRequest {\n");
    sb.append("    allowGoogleInternalDataSources: ").append(toIndentedString(allowGoogleInternalDataSources)).append("\n");
    sb.append("    defaultRelation: ").append(toIndentedString(defaultRelation)).append("\n");
    sb.append("    defaultSource: ").append(toIndentedString(defaultSource)).append("\n");
    sb.append("    defaultTarget: ").append(toIndentedString(defaultTarget)).append("\n");
    sb.append("    skipCacheLookup: ").append(toIndentedString(skipCacheLookup)).append("\n");
    sb.append("    statements: ").append(toIndentedString(statements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowGoogleInternalDataSources");
    openapiFields.add("defaultRelation");
    openapiFields.add("defaultSource");
    openapiFields.add("defaultTarget");
    openapiFields.add("skipCacheLookup");
    openapiFields.add("statements");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BulkCheckRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BulkCheckRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkCheckRequest is not found in the empty JSON string", BulkCheckRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BulkCheckRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BulkCheckRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("defaultRelation") != null && !jsonObj.get("defaultRelation").isJsonNull()) && !jsonObj.get("defaultRelation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultRelation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultRelation").toString()));
      }
      // validate the optional field `defaultSource`
      if (jsonObj.get("defaultSource") != null && !jsonObj.get("defaultSource").isJsonNull()) {
        Asset.validateJsonElement(jsonObj.get("defaultSource"));
      }
      // validate the optional field `defaultTarget`
      if (jsonObj.get("defaultTarget") != null && !jsonObj.get("defaultTarget").isJsonNull()) {
        Asset.validateJsonElement(jsonObj.get("defaultTarget"));
      }
      if (jsonObj.get("statements") != null && !jsonObj.get("statements").isJsonNull()) {
        JsonArray jsonArraystatements = jsonObj.getAsJsonArray("statements");
        if (jsonArraystatements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statements` to be an array in the JSON string but got `%s`", jsonObj.get("statements").toString()));
          }

          // validate the optional field `statements` (array)
          for (int i = 0; i < jsonArraystatements.size(); i++) {
            StatementTemplate.validateJsonElement(jsonArraystatements.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkCheckRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkCheckRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkCheckRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkCheckRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkCheckRequest>() {
           @Override
           public void write(JsonWriter out, BulkCheckRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkCheckRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BulkCheckRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BulkCheckRequest
   * @throws IOException if the JSON string is invalid with respect to BulkCheckRequest
   */
  public static BulkCheckRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkCheckRequest.class);
  }

  /**
   * Convert an instance of BulkCheckRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

