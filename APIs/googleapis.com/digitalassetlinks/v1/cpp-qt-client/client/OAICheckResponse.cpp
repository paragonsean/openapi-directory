/**
 * Digital Asset Links API
 * Discovers relationships between online assets such as websites or mobile apps.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckResponse::OAICheckResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckResponse::OAICheckResponse() {
    this->initializeModel();
}

OAICheckResponse::~OAICheckResponse() {}

void OAICheckResponse::initializeModel() {

    m_debug_string_isSet = false;
    m_debug_string_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_linked_isSet = false;
    m_linked_isValid = false;

    m_max_age_isSet = false;
    m_max_age_isValid = false;
}

void OAICheckResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckResponse::fromJsonObject(QJsonObject json) {

    m_debug_string_isValid = ::OpenAPI::fromJsonValue(m_debug_string, json[QString("debugString")]);
    m_debug_string_isSet = !json[QString("debugString")].isNull() && m_debug_string_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_linked_isValid = ::OpenAPI::fromJsonValue(m_linked, json[QString("linked")]);
    m_linked_isSet = !json[QString("linked")].isNull() && m_linked_isValid;

    m_max_age_isValid = ::OpenAPI::fromJsonValue(m_max_age, json[QString("maxAge")]);
    m_max_age_isSet = !json[QString("maxAge")].isNull() && m_max_age_isValid;
}

QString OAICheckResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_debug_string_isSet) {
        obj.insert(QString("debugString"), ::OpenAPI::toJsonValue(m_debug_string));
    }
    if (m_error_code.size() > 0) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_linked_isSet) {
        obj.insert(QString("linked"), ::OpenAPI::toJsonValue(m_linked));
    }
    if (m_max_age_isSet) {
        obj.insert(QString("maxAge"), ::OpenAPI::toJsonValue(m_max_age));
    }
    return obj;
}

QString OAICheckResponse::getDebugString() const {
    return m_debug_string;
}
void OAICheckResponse::setDebugString(const QString &debug_string) {
    m_debug_string = debug_string;
    m_debug_string_isSet = true;
}

bool OAICheckResponse::is_debug_string_Set() const{
    return m_debug_string_isSet;
}

bool OAICheckResponse::is_debug_string_Valid() const{
    return m_debug_string_isValid;
}

QList<QString> OAICheckResponse::getErrorCode() const {
    return m_error_code;
}
void OAICheckResponse::setErrorCode(const QList<QString> &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAICheckResponse::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAICheckResponse::is_error_code_Valid() const{
    return m_error_code_isValid;
}

bool OAICheckResponse::isLinked() const {
    return m_linked;
}
void OAICheckResponse::setLinked(const bool &linked) {
    m_linked = linked;
    m_linked_isSet = true;
}

bool OAICheckResponse::is_linked_Set() const{
    return m_linked_isSet;
}

bool OAICheckResponse::is_linked_Valid() const{
    return m_linked_isValid;
}

QString OAICheckResponse::getMaxAge() const {
    return m_max_age;
}
void OAICheckResponse::setMaxAge(const QString &max_age) {
    m_max_age = max_age;
    m_max_age_isSet = true;
}

bool OAICheckResponse::is_max_age_Set() const{
    return m_max_age_isSet;
}

bool OAICheckResponse::is_max_age_Valid() const{
    return m_max_age_isValid;
}

bool OAICheckResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_debug_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_age_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
