/**
 * Digital Asset Links API
 * Discovers relationships between online assets such as websites or mobile apps.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListResponse::OAIListResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListResponse::OAIListResponse() {
    this->initializeModel();
}

OAIListResponse::~OAIListResponse() {}

void OAIListResponse::initializeModel() {

    m_debug_string_isSet = false;
    m_debug_string_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_max_age_isSet = false;
    m_max_age_isValid = false;

    m_statements_isSet = false;
    m_statements_isValid = false;
}

void OAIListResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListResponse::fromJsonObject(QJsonObject json) {

    m_debug_string_isValid = ::OpenAPI::fromJsonValue(m_debug_string, json[QString("debugString")]);
    m_debug_string_isSet = !json[QString("debugString")].isNull() && m_debug_string_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_max_age_isValid = ::OpenAPI::fromJsonValue(m_max_age, json[QString("maxAge")]);
    m_max_age_isSet = !json[QString("maxAge")].isNull() && m_max_age_isValid;

    m_statements_isValid = ::OpenAPI::fromJsonValue(m_statements, json[QString("statements")]);
    m_statements_isSet = !json[QString("statements")].isNull() && m_statements_isValid;
}

QString OAIListResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_debug_string_isSet) {
        obj.insert(QString("debugString"), ::OpenAPI::toJsonValue(m_debug_string));
    }
    if (m_error_code.size() > 0) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_max_age_isSet) {
        obj.insert(QString("maxAge"), ::OpenAPI::toJsonValue(m_max_age));
    }
    if (m_statements.size() > 0) {
        obj.insert(QString("statements"), ::OpenAPI::toJsonValue(m_statements));
    }
    return obj;
}

QString OAIListResponse::getDebugString() const {
    return m_debug_string;
}
void OAIListResponse::setDebugString(const QString &debug_string) {
    m_debug_string = debug_string;
    m_debug_string_isSet = true;
}

bool OAIListResponse::is_debug_string_Set() const{
    return m_debug_string_isSet;
}

bool OAIListResponse::is_debug_string_Valid() const{
    return m_debug_string_isValid;
}

QList<QString> OAIListResponse::getErrorCode() const {
    return m_error_code;
}
void OAIListResponse::setErrorCode(const QList<QString> &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIListResponse::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIListResponse::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIListResponse::getMaxAge() const {
    return m_max_age;
}
void OAIListResponse::setMaxAge(const QString &max_age) {
    m_max_age = max_age;
    m_max_age_isSet = true;
}

bool OAIListResponse::is_max_age_Set() const{
    return m_max_age_isSet;
}

bool OAIListResponse::is_max_age_Valid() const{
    return m_max_age_isValid;
}

QList<OAIStatement> OAIListResponse::getStatements() const {
    return m_statements;
}
void OAIListResponse::setStatements(const QList<OAIStatement> &statements) {
    m_statements = statements;
    m_statements_isSet = true;
}

bool OAIListResponse::is_statements_Set() const{
    return m_statements_isSet;
}

bool OAIListResponse::is_statements_Valid() const{
    return m_statements_isValid;
}

bool OAIListResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_debug_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statements.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
