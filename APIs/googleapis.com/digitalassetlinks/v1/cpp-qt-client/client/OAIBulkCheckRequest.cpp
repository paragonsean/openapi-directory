/**
 * Digital Asset Links API
 * Discovers relationships between online assets such as websites or mobile apps.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBulkCheckRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBulkCheckRequest::OAIBulkCheckRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBulkCheckRequest::OAIBulkCheckRequest() {
    this->initializeModel();
}

OAIBulkCheckRequest::~OAIBulkCheckRequest() {}

void OAIBulkCheckRequest::initializeModel() {

    m_allow_google_internal_data_sources_isSet = false;
    m_allow_google_internal_data_sources_isValid = false;

    m_default_relation_isSet = false;
    m_default_relation_isValid = false;

    m_default_source_isSet = false;
    m_default_source_isValid = false;

    m_default_target_isSet = false;
    m_default_target_isValid = false;

    m_skip_cache_lookup_isSet = false;
    m_skip_cache_lookup_isValid = false;

    m_statements_isSet = false;
    m_statements_isValid = false;
}

void OAIBulkCheckRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBulkCheckRequest::fromJsonObject(QJsonObject json) {

    m_allow_google_internal_data_sources_isValid = ::OpenAPI::fromJsonValue(m_allow_google_internal_data_sources, json[QString("allowGoogleInternalDataSources")]);
    m_allow_google_internal_data_sources_isSet = !json[QString("allowGoogleInternalDataSources")].isNull() && m_allow_google_internal_data_sources_isValid;

    m_default_relation_isValid = ::OpenAPI::fromJsonValue(m_default_relation, json[QString("defaultRelation")]);
    m_default_relation_isSet = !json[QString("defaultRelation")].isNull() && m_default_relation_isValid;

    m_default_source_isValid = ::OpenAPI::fromJsonValue(m_default_source, json[QString("defaultSource")]);
    m_default_source_isSet = !json[QString("defaultSource")].isNull() && m_default_source_isValid;

    m_default_target_isValid = ::OpenAPI::fromJsonValue(m_default_target, json[QString("defaultTarget")]);
    m_default_target_isSet = !json[QString("defaultTarget")].isNull() && m_default_target_isValid;

    m_skip_cache_lookup_isValid = ::OpenAPI::fromJsonValue(m_skip_cache_lookup, json[QString("skipCacheLookup")]);
    m_skip_cache_lookup_isSet = !json[QString("skipCacheLookup")].isNull() && m_skip_cache_lookup_isValid;

    m_statements_isValid = ::OpenAPI::fromJsonValue(m_statements, json[QString("statements")]);
    m_statements_isSet = !json[QString("statements")].isNull() && m_statements_isValid;
}

QString OAIBulkCheckRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBulkCheckRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_google_internal_data_sources_isSet) {
        obj.insert(QString("allowGoogleInternalDataSources"), ::OpenAPI::toJsonValue(m_allow_google_internal_data_sources));
    }
    if (m_default_relation_isSet) {
        obj.insert(QString("defaultRelation"), ::OpenAPI::toJsonValue(m_default_relation));
    }
    if (m_default_source.isSet()) {
        obj.insert(QString("defaultSource"), ::OpenAPI::toJsonValue(m_default_source));
    }
    if (m_default_target.isSet()) {
        obj.insert(QString("defaultTarget"), ::OpenAPI::toJsonValue(m_default_target));
    }
    if (m_skip_cache_lookup_isSet) {
        obj.insert(QString("skipCacheLookup"), ::OpenAPI::toJsonValue(m_skip_cache_lookup));
    }
    if (m_statements.size() > 0) {
        obj.insert(QString("statements"), ::OpenAPI::toJsonValue(m_statements));
    }
    return obj;
}

bool OAIBulkCheckRequest::isAllowGoogleInternalDataSources() const {
    return m_allow_google_internal_data_sources;
}
void OAIBulkCheckRequest::setAllowGoogleInternalDataSources(const bool &allow_google_internal_data_sources) {
    m_allow_google_internal_data_sources = allow_google_internal_data_sources;
    m_allow_google_internal_data_sources_isSet = true;
}

bool OAIBulkCheckRequest::is_allow_google_internal_data_sources_Set() const{
    return m_allow_google_internal_data_sources_isSet;
}

bool OAIBulkCheckRequest::is_allow_google_internal_data_sources_Valid() const{
    return m_allow_google_internal_data_sources_isValid;
}

QString OAIBulkCheckRequest::getDefaultRelation() const {
    return m_default_relation;
}
void OAIBulkCheckRequest::setDefaultRelation(const QString &default_relation) {
    m_default_relation = default_relation;
    m_default_relation_isSet = true;
}

bool OAIBulkCheckRequest::is_default_relation_Set() const{
    return m_default_relation_isSet;
}

bool OAIBulkCheckRequest::is_default_relation_Valid() const{
    return m_default_relation_isValid;
}

OAIAsset OAIBulkCheckRequest::getDefaultSource() const {
    return m_default_source;
}
void OAIBulkCheckRequest::setDefaultSource(const OAIAsset &default_source) {
    m_default_source = default_source;
    m_default_source_isSet = true;
}

bool OAIBulkCheckRequest::is_default_source_Set() const{
    return m_default_source_isSet;
}

bool OAIBulkCheckRequest::is_default_source_Valid() const{
    return m_default_source_isValid;
}

OAIAsset OAIBulkCheckRequest::getDefaultTarget() const {
    return m_default_target;
}
void OAIBulkCheckRequest::setDefaultTarget(const OAIAsset &default_target) {
    m_default_target = default_target;
    m_default_target_isSet = true;
}

bool OAIBulkCheckRequest::is_default_target_Set() const{
    return m_default_target_isSet;
}

bool OAIBulkCheckRequest::is_default_target_Valid() const{
    return m_default_target_isValid;
}

bool OAIBulkCheckRequest::isSkipCacheLookup() const {
    return m_skip_cache_lookup;
}
void OAIBulkCheckRequest::setSkipCacheLookup(const bool &skip_cache_lookup) {
    m_skip_cache_lookup = skip_cache_lookup;
    m_skip_cache_lookup_isSet = true;
}

bool OAIBulkCheckRequest::is_skip_cache_lookup_Set() const{
    return m_skip_cache_lookup_isSet;
}

bool OAIBulkCheckRequest::is_skip_cache_lookup_Valid() const{
    return m_skip_cache_lookup_isValid;
}

QList<OAIStatementTemplate> OAIBulkCheckRequest::getStatements() const {
    return m_statements;
}
void OAIBulkCheckRequest::setStatements(const QList<OAIStatementTemplate> &statements) {
    m_statements = statements;
    m_statements_isSet = true;
}

bool OAIBulkCheckRequest::is_statements_Set() const{
    return m_statements_isSet;
}

bool OAIBulkCheckRequest::is_statements_Valid() const{
    return m_statements_isValid;
}

bool OAIBulkCheckRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_google_internal_data_sources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_relation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_cache_lookup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statements.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBulkCheckRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
