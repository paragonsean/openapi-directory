/**
 * Digital Asset Links API
 * Discovers relationships between online assets such as websites or mobile apps.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBulkCheckRequest.h
 *
 * Message used to check for the existence of multiple digital asset links within a single RPC.
 */

#ifndef OAIBulkCheckRequest_H
#define OAIBulkCheckRequest_H

#include <QJsonObject>

#include "OAIAsset.h"
#include "OAIStatementTemplate.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAsset;
class OAIStatementTemplate;

class OAIBulkCheckRequest : public OAIObject {
public:
    OAIBulkCheckRequest();
    OAIBulkCheckRequest(QString json);
    ~OAIBulkCheckRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowGoogleInternalDataSources() const;
    void setAllowGoogleInternalDataSources(const bool &allow_google_internal_data_sources);
    bool is_allow_google_internal_data_sources_Set() const;
    bool is_allow_google_internal_data_sources_Valid() const;

    QString getDefaultRelation() const;
    void setDefaultRelation(const QString &default_relation);
    bool is_default_relation_Set() const;
    bool is_default_relation_Valid() const;

    OAIAsset getDefaultSource() const;
    void setDefaultSource(const OAIAsset &default_source);
    bool is_default_source_Set() const;
    bool is_default_source_Valid() const;

    OAIAsset getDefaultTarget() const;
    void setDefaultTarget(const OAIAsset &default_target);
    bool is_default_target_Set() const;
    bool is_default_target_Valid() const;

    bool isSkipCacheLookup() const;
    void setSkipCacheLookup(const bool &skip_cache_lookup);
    bool is_skip_cache_lookup_Set() const;
    bool is_skip_cache_lookup_Valid() const;

    QList<OAIStatementTemplate> getStatements() const;
    void setStatements(const QList<OAIStatementTemplate> &statements);
    bool is_statements_Set() const;
    bool is_statements_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_google_internal_data_sources;
    bool m_allow_google_internal_data_sources_isSet;
    bool m_allow_google_internal_data_sources_isValid;

    QString m_default_relation;
    bool m_default_relation_isSet;
    bool m_default_relation_isValid;

    OAIAsset m_default_source;
    bool m_default_source_isSet;
    bool m_default_source_isValid;

    OAIAsset m_default_target;
    bool m_default_target_isSet;
    bool m_default_target_isValid;

    bool m_skip_cache_lookup;
    bool m_skip_cache_lookup_isSet;
    bool m_skip_cache_lookup_isValid;

    QList<OAIStatementTemplate> m_statements;
    bool m_statements_isSet;
    bool m_statements_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBulkCheckRequest)

#endif // OAIBulkCheckRequest_H
