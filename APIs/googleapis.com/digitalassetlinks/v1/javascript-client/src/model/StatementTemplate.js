/**
 * Digital Asset Links API
 * Discovers relationships between online assets such as websites or mobile apps.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Asset from './Asset';

/**
 * The StatementTemplate model module.
 * @module model/StatementTemplate
 * @version v1
 */
class StatementTemplate {
    /**
     * Constructs a new <code>StatementTemplate</code>.
     * A single statement to check in a bulk call using BulkCheck. See CheckRequest for details about each field.
     * @alias module:model/StatementTemplate
     */
    constructor() { 
        
        StatementTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StatementTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StatementTemplate} obj Optional instance to populate.
     * @return {module:model/StatementTemplate} The populated <code>StatementTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StatementTemplate();

            if (data.hasOwnProperty('relation')) {
                obj['relation'] = ApiClient.convertToType(data['relation'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = Asset.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = Asset.constructFromObject(data['target']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StatementTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StatementTemplate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['relation'] && !(typeof data['relation'] === 'string' || data['relation'] instanceof String)) {
            throw new Error("Expected the field `relation` to be a primitive type in the JSON string but got " + data['relation']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          Asset.validateJSON(data['source']);
        }
        // validate the optional field `target`
        if (data['target']) { // data not null
          Asset.validateJSON(data['target']);
        }

        return true;
    }


}



/**
 * The relationship being asserted between the source and target. If omitted, you must specify a BulkCheckRequest.default_relation value to use here.
 * @member {String} relation
 */
StatementTemplate.prototype['relation'] = undefined;

/**
 * @member {module:model/Asset} source
 */
StatementTemplate.prototype['source'] = undefined;

/**
 * @member {module:model/Asset} target
 */
StatementTemplate.prototype['target'] = undefined;






export default StatementTemplate;

