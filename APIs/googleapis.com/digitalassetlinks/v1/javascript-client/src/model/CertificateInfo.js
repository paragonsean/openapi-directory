/**
 * Digital Asset Links API
 * Discovers relationships between online assets such as websites or mobile apps.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CertificateInfo model module.
 * @module model/CertificateInfo
 * @version v1
 */
class CertificateInfo {
    /**
     * Constructs a new <code>CertificateInfo</code>.
     * Describes an X509 certificate.
     * @alias module:model/CertificateInfo
     */
    constructor() { 
        
        CertificateInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateInfo} obj Optional instance to populate.
     * @return {module:model/CertificateInfo} The populated <code>CertificateInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateInfo();

            if (data.hasOwnProperty('sha256Fingerprint')) {
                obj['sha256Fingerprint'] = ApiClient.convertToType(data['sha256Fingerprint'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['sha256Fingerprint'] && !(typeof data['sha256Fingerprint'] === 'string' || data['sha256Fingerprint'] instanceof String)) {
            throw new Error("Expected the field `sha256Fingerprint` to be a primitive type in the JSON string but got " + data['sha256Fingerprint']);
        }

        return true;
    }


}



/**
 * The uppercase SHA-265 fingerprint of the certificate. From the PEM certificate, it can be acquired like this: $ keytool -printcert -file $CERTFILE | grep SHA256: SHA256: 14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83: \\ 42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5 or like this: $ openssl x509 -in $CERTFILE -noout -fingerprint -sha256 SHA256 Fingerprint=14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64: \\ 16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5 In this example, the contents of this field would be `14:6D:E9:83:C5:73: 06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF: 44:E5`. If these tools are not available to you, you can convert the PEM certificate into the DER format, compute the SHA-256 hash of that string and represent the result as a hexstring (that is, uppercase hexadecimal representations of each octet, separated by colons).
 * @member {String} sha256Fingerprint
 */
CertificateInfo.prototype['sha256Fingerprint'] = undefined;






export default CertificateInfo;

