# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_files_inner import ReportFilesInner
from openapi_server.models.report_request import ReportRequest
from openapi_server import util


class Report(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, files: List[ReportFilesInner]=None, id: str=None, is_report_ready: bool=None, kind: str=None, request: ReportRequest=None, row_count: int=None, rows: List[Dict[str, object]]=None, statistics_currency_code: str=None, statistics_time_zone: str=None):
        """Report - a model defined in OpenAPI

        :param files: The files of this Report.
        :param id: The id of this Report.
        :param is_report_ready: The is_report_ready of this Report.
        :param kind: The kind of this Report.
        :param request: The request of this Report.
        :param row_count: The row_count of this Report.
        :param rows: The rows of this Report.
        :param statistics_currency_code: The statistics_currency_code of this Report.
        :param statistics_time_zone: The statistics_time_zone of this Report.
        """
        self.openapi_types = {
            'files': List[ReportFilesInner],
            'id': str,
            'is_report_ready': bool,
            'kind': str,
            'request': ReportRequest,
            'row_count': int,
            'rows': List[Dict[str, object]],
            'statistics_currency_code': str,
            'statistics_time_zone': str
        }

        self.attribute_map = {
            'files': 'files',
            'id': 'id',
            'is_report_ready': 'isReportReady',
            'kind': 'kind',
            'request': 'request',
            'row_count': 'rowCount',
            'rows': 'rows',
            'statistics_currency_code': 'statisticsCurrencyCode',
            'statistics_time_zone': 'statisticsTimeZone'
        }

        self._files = files
        self._id = id
        self._is_report_ready = is_report_ready
        self._kind = kind
        self._request = request
        self._row_count = row_count
        self._rows = rows
        self._statistics_currency_code = statistics_currency_code
        self._statistics_time_zone = statistics_time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Report':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Report of this Report.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def files(self):
        """Gets the files of this Report.

        Asynchronous report only. Contains a list of generated report files once the report has successfully completed.

        :return: The files of this Report.
        :rtype: List[ReportFilesInner]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this Report.

        Asynchronous report only. Contains a list of generated report files once the report has successfully completed.

        :param files: The files of this Report.
        :type files: List[ReportFilesInner]
        """

        self._files = files

    @property
    def id(self):
        """Gets the id of this Report.

        Asynchronous report only. Id of the report.

        :return: The id of this Report.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Report.

        Asynchronous report only. Id of the report.

        :param id: The id of this Report.
        :type id: str
        """

        self._id = id

    @property
    def is_report_ready(self):
        """Gets the is_report_ready of this Report.

        Asynchronous report only. True if and only if the report has completed successfully and the report files are ready to be downloaded.

        :return: The is_report_ready of this Report.
        :rtype: bool
        """
        return self._is_report_ready

    @is_report_ready.setter
    def is_report_ready(self, is_report_ready):
        """Sets the is_report_ready of this Report.

        Asynchronous report only. True if and only if the report has completed successfully and the report files are ready to be downloaded.

        :param is_report_ready: The is_report_ready of this Report.
        :type is_report_ready: bool
        """

        self._is_report_ready = is_report_ready

    @property
    def kind(self):
        """Gets the kind of this Report.

        Identifies this as a Report resource. Value: the fixed string `doubleclicksearch#report`.

        :return: The kind of this Report.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Report.

        Identifies this as a Report resource. Value: the fixed string `doubleclicksearch#report`.

        :param kind: The kind of this Report.
        :type kind: str
        """

        self._kind = kind

    @property
    def request(self):
        """Gets the request of this Report.


        :return: The request of this Report.
        :rtype: ReportRequest
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this Report.


        :param request: The request of this Report.
        :type request: ReportRequest
        """

        self._request = request

    @property
    def row_count(self):
        """Gets the row_count of this Report.

        The number of report rows generated by the report, not including headers.

        :return: The row_count of this Report.
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this Report.

        The number of report rows generated by the report, not including headers.

        :param row_count: The row_count of this Report.
        :type row_count: int
        """

        self._row_count = row_count

    @property
    def rows(self):
        """Gets the rows of this Report.

        Synchronous report only. Generated report rows.

        :return: The rows of this Report.
        :rtype: List[Dict[str, object]]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this Report.

        Synchronous report only. Generated report rows.

        :param rows: The rows of this Report.
        :type rows: List[Dict[str, object]]
        """

        self._rows = rows

    @property
    def statistics_currency_code(self):
        """Gets the statistics_currency_code of this Report.

        The currency code of all monetary values produced in the report, including values that are set by users (e.g., keyword bid settings) and metrics (e.g., cost and revenue). The currency code of a report is determined by the `statisticsCurrency` field of the report request.

        :return: The statistics_currency_code of this Report.
        :rtype: str
        """
        return self._statistics_currency_code

    @statistics_currency_code.setter
    def statistics_currency_code(self, statistics_currency_code):
        """Sets the statistics_currency_code of this Report.

        The currency code of all monetary values produced in the report, including values that are set by users (e.g., keyword bid settings) and metrics (e.g., cost and revenue). The currency code of a report is determined by the `statisticsCurrency` field of the report request.

        :param statistics_currency_code: The statistics_currency_code of this Report.
        :type statistics_currency_code: str
        """

        self._statistics_currency_code = statistics_currency_code

    @property
    def statistics_time_zone(self):
        """Gets the statistics_time_zone of this Report.

        If all statistics of the report are sourced from the same time zone, this would be it. Otherwise the field is unset.

        :return: The statistics_time_zone of this Report.
        :rtype: str
        """
        return self._statistics_time_zone

    @statistics_time_zone.setter
    def statistics_time_zone(self, statistics_time_zone):
        """Sets the statistics_time_zone of this Report.

        If all statistics of the report are sourced from the same time zone, this would be it. Otherwise the field is unset.

        :param statistics_time_zone: The statistics_time_zone of this Report.
        :type statistics_time_zone: str
        """

        self._statistics_time_zone = statistics_time_zone
