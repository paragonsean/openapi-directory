# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_api_column_spec import ReportApiColumnSpec
from openapi_server.models.report_request_filters_inner import ReportRequestFiltersInner
from openapi_server.models.report_request_order_by_inner import ReportRequestOrderByInner
from openapi_server.models.report_request_report_scope import ReportRequestReportScope
from openapi_server.models.report_request_time_range import ReportRequestTimeRange
from openapi_server import util


class ReportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, columns: List[ReportApiColumnSpec]=None, download_format: str=None, filters: List[ReportRequestFiltersInner]=None, include_deleted_entities: bool=None, include_removed_entities: bool=None, max_rows_per_file: int=None, order_by: List[ReportRequestOrderByInner]=None, report_scope: ReportRequestReportScope=None, report_type: str=None, row_count: int=None, start_row: int=None, statistics_currency: str=None, time_range: ReportRequestTimeRange=None, verify_single_time_zone: bool=None):
        """ReportRequest - a model defined in OpenAPI

        :param columns: The columns of this ReportRequest.
        :param download_format: The download_format of this ReportRequest.
        :param filters: The filters of this ReportRequest.
        :param include_deleted_entities: The include_deleted_entities of this ReportRequest.
        :param include_removed_entities: The include_removed_entities of this ReportRequest.
        :param max_rows_per_file: The max_rows_per_file of this ReportRequest.
        :param order_by: The order_by of this ReportRequest.
        :param report_scope: The report_scope of this ReportRequest.
        :param report_type: The report_type of this ReportRequest.
        :param row_count: The row_count of this ReportRequest.
        :param start_row: The start_row of this ReportRequest.
        :param statistics_currency: The statistics_currency of this ReportRequest.
        :param time_range: The time_range of this ReportRequest.
        :param verify_single_time_zone: The verify_single_time_zone of this ReportRequest.
        """
        self.openapi_types = {
            'columns': List[ReportApiColumnSpec],
            'download_format': str,
            'filters': List[ReportRequestFiltersInner],
            'include_deleted_entities': bool,
            'include_removed_entities': bool,
            'max_rows_per_file': int,
            'order_by': List[ReportRequestOrderByInner],
            'report_scope': ReportRequestReportScope,
            'report_type': str,
            'row_count': int,
            'start_row': int,
            'statistics_currency': str,
            'time_range': ReportRequestTimeRange,
            'verify_single_time_zone': bool
        }

        self.attribute_map = {
            'columns': 'columns',
            'download_format': 'downloadFormat',
            'filters': 'filters',
            'include_deleted_entities': 'includeDeletedEntities',
            'include_removed_entities': 'includeRemovedEntities',
            'max_rows_per_file': 'maxRowsPerFile',
            'order_by': 'orderBy',
            'report_scope': 'reportScope',
            'report_type': 'reportType',
            'row_count': 'rowCount',
            'start_row': 'startRow',
            'statistics_currency': 'statisticsCurrency',
            'time_range': 'timeRange',
            'verify_single_time_zone': 'verifySingleTimeZone'
        }

        self._columns = columns
        self._download_format = download_format
        self._filters = filters
        self._include_deleted_entities = include_deleted_entities
        self._include_removed_entities = include_removed_entities
        self._max_rows_per_file = max_rows_per_file
        self._order_by = order_by
        self._report_scope = report_scope
        self._report_type = report_type
        self._row_count = row_count
        self._start_row = start_row
        self._statistics_currency = statistics_currency
        self._time_range = time_range
        self._verify_single_time_zone = verify_single_time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportRequest of this ReportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def columns(self):
        """Gets the columns of this ReportRequest.

        The columns to include in the report. This includes both DoubleClick Search columns and saved columns. For DoubleClick Search columns, only the `columnName` parameter is required. For saved columns only the `savedColumnName` parameter is required. Both `columnName` and `savedColumnName` cannot be set in the same stanza.\\ The maximum number of columns per request is 300.

        :return: The columns of this ReportRequest.
        :rtype: List[ReportApiColumnSpec]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this ReportRequest.

        The columns to include in the report. This includes both DoubleClick Search columns and saved columns. For DoubleClick Search columns, only the `columnName` parameter is required. For saved columns only the `savedColumnName` parameter is required. Both `columnName` and `savedColumnName` cannot be set in the same stanza.\\ The maximum number of columns per request is 300.

        :param columns: The columns of this ReportRequest.
        :type columns: List[ReportApiColumnSpec]
        """

        self._columns = columns

    @property
    def download_format(self):
        """Gets the download_format of this ReportRequest.

        Format that the report should be returned in. Currently `csv` or `tsv` is supported.

        :return: The download_format of this ReportRequest.
        :rtype: str
        """
        return self._download_format

    @download_format.setter
    def download_format(self, download_format):
        """Sets the download_format of this ReportRequest.

        Format that the report should be returned in. Currently `csv` or `tsv` is supported.

        :param download_format: The download_format of this ReportRequest.
        :type download_format: str
        """

        self._download_format = download_format

    @property
    def filters(self):
        """Gets the filters of this ReportRequest.

        A list of filters to be applied to the report.\\ The maximum number of filters per request is 300.

        :return: The filters of this ReportRequest.
        :rtype: List[ReportRequestFiltersInner]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ReportRequest.

        A list of filters to be applied to the report.\\ The maximum number of filters per request is 300.

        :param filters: The filters of this ReportRequest.
        :type filters: List[ReportRequestFiltersInner]
        """

        self._filters = filters

    @property
    def include_deleted_entities(self):
        """Gets the include_deleted_entities of this ReportRequest.

        Determines if removed entities should be included in the report. Defaults to `false`. Deprecated, please use `includeRemovedEntities` instead.

        :return: The include_deleted_entities of this ReportRequest.
        :rtype: bool
        """
        return self._include_deleted_entities

    @include_deleted_entities.setter
    def include_deleted_entities(self, include_deleted_entities):
        """Sets the include_deleted_entities of this ReportRequest.

        Determines if removed entities should be included in the report. Defaults to `false`. Deprecated, please use `includeRemovedEntities` instead.

        :param include_deleted_entities: The include_deleted_entities of this ReportRequest.
        :type include_deleted_entities: bool
        """

        self._include_deleted_entities = include_deleted_entities

    @property
    def include_removed_entities(self):
        """Gets the include_removed_entities of this ReportRequest.

        Determines if removed entities should be included in the report. Defaults to `false`.

        :return: The include_removed_entities of this ReportRequest.
        :rtype: bool
        """
        return self._include_removed_entities

    @include_removed_entities.setter
    def include_removed_entities(self, include_removed_entities):
        """Sets the include_removed_entities of this ReportRequest.

        Determines if removed entities should be included in the report. Defaults to `false`.

        :param include_removed_entities: The include_removed_entities of this ReportRequest.
        :type include_removed_entities: bool
        """

        self._include_removed_entities = include_removed_entities

    @property
    def max_rows_per_file(self):
        """Gets the max_rows_per_file of this ReportRequest.

        Asynchronous report only. The maximum number of rows per report file. A large report is split into many files based on this field. Acceptable values are `1000000` to `100000000`, inclusive.

        :return: The max_rows_per_file of this ReportRequest.
        :rtype: int
        """
        return self._max_rows_per_file

    @max_rows_per_file.setter
    def max_rows_per_file(self, max_rows_per_file):
        """Sets the max_rows_per_file of this ReportRequest.

        Asynchronous report only. The maximum number of rows per report file. A large report is split into many files based on this field. Acceptable values are `1000000` to `100000000`, inclusive.

        :param max_rows_per_file: The max_rows_per_file of this ReportRequest.
        :type max_rows_per_file: int
        """

        self._max_rows_per_file = max_rows_per_file

    @property
    def order_by(self):
        """Gets the order_by of this ReportRequest.

        Synchronous report only. A list of columns and directions defining sorting to be performed on the report rows.\\ The maximum number of orderings per request is 300.

        :return: The order_by of this ReportRequest.
        :rtype: List[ReportRequestOrderByInner]
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this ReportRequest.

        Synchronous report only. A list of columns and directions defining sorting to be performed on the report rows.\\ The maximum number of orderings per request is 300.

        :param order_by: The order_by of this ReportRequest.
        :type order_by: List[ReportRequestOrderByInner]
        """

        self._order_by = order_by

    @property
    def report_scope(self):
        """Gets the report_scope of this ReportRequest.


        :return: The report_scope of this ReportRequest.
        :rtype: ReportRequestReportScope
        """
        return self._report_scope

    @report_scope.setter
    def report_scope(self, report_scope):
        """Sets the report_scope of this ReportRequest.


        :param report_scope: The report_scope of this ReportRequest.
        :type report_scope: ReportRequestReportScope
        """

        self._report_scope = report_scope

    @property
    def report_type(self):
        """Gets the report_type of this ReportRequest.

        Determines the type of rows that are returned in the report. For example, if you specify `reportType: keyword`, each row in the report will contain data about a keyword. See the [Types of Reports](/search-ads/v2/report-types/) reference for the columns that are available for each type.

        :return: The report_type of this ReportRequest.
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this ReportRequest.

        Determines the type of rows that are returned in the report. For example, if you specify `reportType: keyword`, each row in the report will contain data about a keyword. See the [Types of Reports](/search-ads/v2/report-types/) reference for the columns that are available for each type.

        :param report_type: The report_type of this ReportRequest.
        :type report_type: str
        """

        self._report_type = report_type

    @property
    def row_count(self):
        """Gets the row_count of this ReportRequest.

        Synchronous report only. The maximum number of rows to return; additional rows are dropped. Acceptable values are `0` to `10000`, inclusive. Defaults to `10000`.

        :return: The row_count of this ReportRequest.
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this ReportRequest.

        Synchronous report only. The maximum number of rows to return; additional rows are dropped. Acceptable values are `0` to `10000`, inclusive. Defaults to `10000`.

        :param row_count: The row_count of this ReportRequest.
        :type row_count: int
        """

        self._row_count = row_count

    @property
    def start_row(self):
        """Gets the start_row of this ReportRequest.

        Synchronous report only. Zero-based index of the first row to return. Acceptable values are `0` to `50000`, inclusive. Defaults to `0`.

        :return: The start_row of this ReportRequest.
        :rtype: int
        """
        return self._start_row

    @start_row.setter
    def start_row(self, start_row):
        """Sets the start_row of this ReportRequest.

        Synchronous report only. Zero-based index of the first row to return. Acceptable values are `0` to `50000`, inclusive. Defaults to `0`.

        :param start_row: The start_row of this ReportRequest.
        :type start_row: int
        """

        self._start_row = start_row

    @property
    def statistics_currency(self):
        """Gets the statistics_currency of this ReportRequest.

        Specifies the currency in which monetary will be returned. Possible values are: `usd`, `agency` (valid if the report is scoped to agency or lower), `advertiser` (valid if the report is scoped to * advertiser or lower), or `account` (valid if the report is scoped to engine account or lower).

        :return: The statistics_currency of this ReportRequest.
        :rtype: str
        """
        return self._statistics_currency

    @statistics_currency.setter
    def statistics_currency(self, statistics_currency):
        """Sets the statistics_currency of this ReportRequest.

        Specifies the currency in which monetary will be returned. Possible values are: `usd`, `agency` (valid if the report is scoped to agency or lower), `advertiser` (valid if the report is scoped to * advertiser or lower), or `account` (valid if the report is scoped to engine account or lower).

        :param statistics_currency: The statistics_currency of this ReportRequest.
        :type statistics_currency: str
        """

        self._statistics_currency = statistics_currency

    @property
    def time_range(self):
        """Gets the time_range of this ReportRequest.


        :return: The time_range of this ReportRequest.
        :rtype: ReportRequestTimeRange
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this ReportRequest.


        :param time_range: The time_range of this ReportRequest.
        :type time_range: ReportRequestTimeRange
        """

        self._time_range = time_range

    @property
    def verify_single_time_zone(self):
        """Gets the verify_single_time_zone of this ReportRequest.

        If `true`, the report would only be created if all the requested stat data are sourced from a single timezone. Defaults to `false`.

        :return: The verify_single_time_zone of this ReportRequest.
        :rtype: bool
        """
        return self._verify_single_time_zone

    @verify_single_time_zone.setter
    def verify_single_time_zone(self, verify_single_time_zone):
        """Sets the verify_single_time_zone of this ReportRequest.

        If `true`, the report would only be created if all the requested stat data are sourced from a single timezone. Defaults to `false`.

        :param verify_single_time_zone: The verify_single_time_zone of this ReportRequest.
        :type verify_single_time_zone: bool
        """

        self._verify_single_time_zone = verify_single_time_zone
