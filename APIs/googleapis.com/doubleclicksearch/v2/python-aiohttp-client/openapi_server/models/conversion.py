# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_dimension import CustomDimension
from openapi_server.models.custom_metric import CustomMetric
from openapi_server import util


class Conversion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_group_id: str=None, ad_id: str=None, ad_user_data_consent: str=None, advertiser_id: str=None, agency_id: str=None, attribution_model: str=None, campaign_id: str=None, channel: str=None, click_id: str=None, conversion_id: str=None, conversion_modified_timestamp: str=None, conversion_timestamp: str=None, count_millis: str=None, criterion_id: str=None, currency_code: str=None, custom_dimension: List[CustomDimension]=None, custom_metric: List[CustomMetric]=None, customer_id: str=None, device_type: str=None, ds_conversion_id: str=None, engine_account_id: str=None, floodlight_order_id: str=None, inventory_account_id: str=None, product_country: str=None, product_group_id: str=None, product_id: str=None, product_language: str=None, quantity_millis: str=None, revenue_micros: str=None, segmentation_id: str=None, segmentation_name: str=None, segmentation_type: str=None, state: str=None, store_id: str=None, type: str=None):
        """Conversion - a model defined in OpenAPI

        :param ad_group_id: The ad_group_id of this Conversion.
        :param ad_id: The ad_id of this Conversion.
        :param ad_user_data_consent: The ad_user_data_consent of this Conversion.
        :param advertiser_id: The advertiser_id of this Conversion.
        :param agency_id: The agency_id of this Conversion.
        :param attribution_model: The attribution_model of this Conversion.
        :param campaign_id: The campaign_id of this Conversion.
        :param channel: The channel of this Conversion.
        :param click_id: The click_id of this Conversion.
        :param conversion_id: The conversion_id of this Conversion.
        :param conversion_modified_timestamp: The conversion_modified_timestamp of this Conversion.
        :param conversion_timestamp: The conversion_timestamp of this Conversion.
        :param count_millis: The count_millis of this Conversion.
        :param criterion_id: The criterion_id of this Conversion.
        :param currency_code: The currency_code of this Conversion.
        :param custom_dimension: The custom_dimension of this Conversion.
        :param custom_metric: The custom_metric of this Conversion.
        :param customer_id: The customer_id of this Conversion.
        :param device_type: The device_type of this Conversion.
        :param ds_conversion_id: The ds_conversion_id of this Conversion.
        :param engine_account_id: The engine_account_id of this Conversion.
        :param floodlight_order_id: The floodlight_order_id of this Conversion.
        :param inventory_account_id: The inventory_account_id of this Conversion.
        :param product_country: The product_country of this Conversion.
        :param product_group_id: The product_group_id of this Conversion.
        :param product_id: The product_id of this Conversion.
        :param product_language: The product_language of this Conversion.
        :param quantity_millis: The quantity_millis of this Conversion.
        :param revenue_micros: The revenue_micros of this Conversion.
        :param segmentation_id: The segmentation_id of this Conversion.
        :param segmentation_name: The segmentation_name of this Conversion.
        :param segmentation_type: The segmentation_type of this Conversion.
        :param state: The state of this Conversion.
        :param store_id: The store_id of this Conversion.
        :param type: The type of this Conversion.
        """
        self.openapi_types = {
            'ad_group_id': str,
            'ad_id': str,
            'ad_user_data_consent': str,
            'advertiser_id': str,
            'agency_id': str,
            'attribution_model': str,
            'campaign_id': str,
            'channel': str,
            'click_id': str,
            'conversion_id': str,
            'conversion_modified_timestamp': str,
            'conversion_timestamp': str,
            'count_millis': str,
            'criterion_id': str,
            'currency_code': str,
            'custom_dimension': List[CustomDimension],
            'custom_metric': List[CustomMetric],
            'customer_id': str,
            'device_type': str,
            'ds_conversion_id': str,
            'engine_account_id': str,
            'floodlight_order_id': str,
            'inventory_account_id': str,
            'product_country': str,
            'product_group_id': str,
            'product_id': str,
            'product_language': str,
            'quantity_millis': str,
            'revenue_micros': str,
            'segmentation_id': str,
            'segmentation_name': str,
            'segmentation_type': str,
            'state': str,
            'store_id': str,
            'type': str
        }

        self.attribute_map = {
            'ad_group_id': 'adGroupId',
            'ad_id': 'adId',
            'ad_user_data_consent': 'adUserDataConsent',
            'advertiser_id': 'advertiserId',
            'agency_id': 'agencyId',
            'attribution_model': 'attributionModel',
            'campaign_id': 'campaignId',
            'channel': 'channel',
            'click_id': 'clickId',
            'conversion_id': 'conversionId',
            'conversion_modified_timestamp': 'conversionModifiedTimestamp',
            'conversion_timestamp': 'conversionTimestamp',
            'count_millis': 'countMillis',
            'criterion_id': 'criterionId',
            'currency_code': 'currencyCode',
            'custom_dimension': 'customDimension',
            'custom_metric': 'customMetric',
            'customer_id': 'customerId',
            'device_type': 'deviceType',
            'ds_conversion_id': 'dsConversionId',
            'engine_account_id': 'engineAccountId',
            'floodlight_order_id': 'floodlightOrderId',
            'inventory_account_id': 'inventoryAccountId',
            'product_country': 'productCountry',
            'product_group_id': 'productGroupId',
            'product_id': 'productId',
            'product_language': 'productLanguage',
            'quantity_millis': 'quantityMillis',
            'revenue_micros': 'revenueMicros',
            'segmentation_id': 'segmentationId',
            'segmentation_name': 'segmentationName',
            'segmentation_type': 'segmentationType',
            'state': 'state',
            'store_id': 'storeId',
            'type': 'type'
        }

        self._ad_group_id = ad_group_id
        self._ad_id = ad_id
        self._ad_user_data_consent = ad_user_data_consent
        self._advertiser_id = advertiser_id
        self._agency_id = agency_id
        self._attribution_model = attribution_model
        self._campaign_id = campaign_id
        self._channel = channel
        self._click_id = click_id
        self._conversion_id = conversion_id
        self._conversion_modified_timestamp = conversion_modified_timestamp
        self._conversion_timestamp = conversion_timestamp
        self._count_millis = count_millis
        self._criterion_id = criterion_id
        self._currency_code = currency_code
        self._custom_dimension = custom_dimension
        self._custom_metric = custom_metric
        self._customer_id = customer_id
        self._device_type = device_type
        self._ds_conversion_id = ds_conversion_id
        self._engine_account_id = engine_account_id
        self._floodlight_order_id = floodlight_order_id
        self._inventory_account_id = inventory_account_id
        self._product_country = product_country
        self._product_group_id = product_group_id
        self._product_id = product_id
        self._product_language = product_language
        self._quantity_millis = quantity_millis
        self._revenue_micros = revenue_micros
        self._segmentation_id = segmentation_id
        self._segmentation_name = segmentation_name
        self._segmentation_type = segmentation_type
        self._state = state
        self._store_id = store_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Conversion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Conversion of this Conversion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_group_id(self):
        """Gets the ad_group_id of this Conversion.

        DS ad group ID.

        :return: The ad_group_id of this Conversion.
        :rtype: str
        """
        return self._ad_group_id

    @ad_group_id.setter
    def ad_group_id(self, ad_group_id):
        """Sets the ad_group_id of this Conversion.

        DS ad group ID.

        :param ad_group_id: The ad_group_id of this Conversion.
        :type ad_group_id: str
        """

        self._ad_group_id = ad_group_id

    @property
    def ad_id(self):
        """Gets the ad_id of this Conversion.

        DS ad ID.

        :return: The ad_id of this Conversion.
        :rtype: str
        """
        return self._ad_id

    @ad_id.setter
    def ad_id(self, ad_id):
        """Sets the ad_id of this Conversion.

        DS ad ID.

        :param ad_id: The ad_id of this Conversion.
        :type ad_id: str
        """

        self._ad_id = ad_id

    @property
    def ad_user_data_consent(self):
        """Gets the ad_user_data_consent of this Conversion.

        Represents consent for core platform services (CPS) preferences in settings. No default value. Acceptable values are: GRANTED: The desired consent status is to grant. Read the CPS preferences from GTE settings. DENIED: The desired consent status is to deny; CPS list is empty.

        :return: The ad_user_data_consent of this Conversion.
        :rtype: str
        """
        return self._ad_user_data_consent

    @ad_user_data_consent.setter
    def ad_user_data_consent(self, ad_user_data_consent):
        """Sets the ad_user_data_consent of this Conversion.

        Represents consent for core platform services (CPS) preferences in settings. No default value. Acceptable values are: GRANTED: The desired consent status is to grant. Read the CPS preferences from GTE settings. DENIED: The desired consent status is to deny; CPS list is empty.

        :param ad_user_data_consent: The ad_user_data_consent of this Conversion.
        :type ad_user_data_consent: str
        """
        allowed_values = ["UNKNOWN", "GRANTED", "DENIED"]  # noqa: E501
        if ad_user_data_consent not in allowed_values:
            raise ValueError(
                "Invalid value for `ad_user_data_consent` ({0}), must be one of {1}"
                .format(ad_user_data_consent, allowed_values)
            )

        self._ad_user_data_consent = ad_user_data_consent

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this Conversion.

        DS advertiser ID.

        :return: The advertiser_id of this Conversion.
        :rtype: str
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this Conversion.

        DS advertiser ID.

        :param advertiser_id: The advertiser_id of this Conversion.
        :type advertiser_id: str
        """

        self._advertiser_id = advertiser_id

    @property
    def agency_id(self):
        """Gets the agency_id of this Conversion.

        DS agency ID.

        :return: The agency_id of this Conversion.
        :rtype: str
        """
        return self._agency_id

    @agency_id.setter
    def agency_id(self, agency_id):
        """Sets the agency_id of this Conversion.

        DS agency ID.

        :param agency_id: The agency_id of this Conversion.
        :type agency_id: str
        """

        self._agency_id = agency_id

    @property
    def attribution_model(self):
        """Gets the attribution_model of this Conversion.

        Available to advertisers only after contacting DoubleClick Search customer support.

        :return: The attribution_model of this Conversion.
        :rtype: str
        """
        return self._attribution_model

    @attribution_model.setter
    def attribution_model(self, attribution_model):
        """Sets the attribution_model of this Conversion.

        Available to advertisers only after contacting DoubleClick Search customer support.

        :param attribution_model: The attribution_model of this Conversion.
        :type attribution_model: str
        """

        self._attribution_model = attribution_model

    @property
    def campaign_id(self):
        """Gets the campaign_id of this Conversion.

        DS campaign ID.

        :return: The campaign_id of this Conversion.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this Conversion.

        DS campaign ID.

        :param campaign_id: The campaign_id of this Conversion.
        :type campaign_id: str
        """

        self._campaign_id = campaign_id

    @property
    def channel(self):
        """Gets the channel of this Conversion.

        Sales channel for the product. Acceptable values are: - \"`local`\": a physical store - \"`online`\": an online store 

        :return: The channel of this Conversion.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this Conversion.

        Sales channel for the product. Acceptable values are: - \"`local`\": a physical store - \"`online`\": an online store 

        :param channel: The channel of this Conversion.
        :type channel: str
        """

        self._channel = channel

    @property
    def click_id(self):
        """Gets the click_id of this Conversion.

        DS click ID for the conversion.

        :return: The click_id of this Conversion.
        :rtype: str
        """
        return self._click_id

    @click_id.setter
    def click_id(self, click_id):
        """Sets the click_id of this Conversion.

        DS click ID for the conversion.

        :param click_id: The click_id of this Conversion.
        :type click_id: str
        """

        self._click_id = click_id

    @property
    def conversion_id(self):
        """Gets the conversion_id of this Conversion.

        For offline conversions, advertisers provide this ID. Advertisers can specify any ID that is meaningful to them. Each conversion in a request must specify a unique ID, and the combination of ID and timestamp must be unique amongst all conversions within the advertiser. For online conversions, DS copies the `dsConversionId` or `floodlightOrderId` into this property depending on the advertiser's Floodlight instructions.

        :return: The conversion_id of this Conversion.
        :rtype: str
        """
        return self._conversion_id

    @conversion_id.setter
    def conversion_id(self, conversion_id):
        """Sets the conversion_id of this Conversion.

        For offline conversions, advertisers provide this ID. Advertisers can specify any ID that is meaningful to them. Each conversion in a request must specify a unique ID, and the combination of ID and timestamp must be unique amongst all conversions within the advertiser. For online conversions, DS copies the `dsConversionId` or `floodlightOrderId` into this property depending on the advertiser's Floodlight instructions.

        :param conversion_id: The conversion_id of this Conversion.
        :type conversion_id: str
        """

        self._conversion_id = conversion_id

    @property
    def conversion_modified_timestamp(self):
        """Gets the conversion_modified_timestamp of this Conversion.

        The time at which the conversion was last modified, in epoch millis UTC.

        :return: The conversion_modified_timestamp of this Conversion.
        :rtype: str
        """
        return self._conversion_modified_timestamp

    @conversion_modified_timestamp.setter
    def conversion_modified_timestamp(self, conversion_modified_timestamp):
        """Sets the conversion_modified_timestamp of this Conversion.

        The time at which the conversion was last modified, in epoch millis UTC.

        :param conversion_modified_timestamp: The conversion_modified_timestamp of this Conversion.
        :type conversion_modified_timestamp: str
        """

        self._conversion_modified_timestamp = conversion_modified_timestamp

    @property
    def conversion_timestamp(self):
        """Gets the conversion_timestamp of this Conversion.

        The time at which the conversion took place, in epoch millis UTC.

        :return: The conversion_timestamp of this Conversion.
        :rtype: str
        """
        return self._conversion_timestamp

    @conversion_timestamp.setter
    def conversion_timestamp(self, conversion_timestamp):
        """Sets the conversion_timestamp of this Conversion.

        The time at which the conversion took place, in epoch millis UTC.

        :param conversion_timestamp: The conversion_timestamp of this Conversion.
        :type conversion_timestamp: str
        """

        self._conversion_timestamp = conversion_timestamp

    @property
    def count_millis(self):
        """Gets the count_millis of this Conversion.

        Available to advertisers only after contacting DoubleClick Search customer support.

        :return: The count_millis of this Conversion.
        :rtype: str
        """
        return self._count_millis

    @count_millis.setter
    def count_millis(self, count_millis):
        """Sets the count_millis of this Conversion.

        Available to advertisers only after contacting DoubleClick Search customer support.

        :param count_millis: The count_millis of this Conversion.
        :type count_millis: str
        """

        self._count_millis = count_millis

    @property
    def criterion_id(self):
        """Gets the criterion_id of this Conversion.

        DS criterion (keyword) ID.

        :return: The criterion_id of this Conversion.
        :rtype: str
        """
        return self._criterion_id

    @criterion_id.setter
    def criterion_id(self, criterion_id):
        """Sets the criterion_id of this Conversion.

        DS criterion (keyword) ID.

        :param criterion_id: The criterion_id of this Conversion.
        :type criterion_id: str
        """

        self._criterion_id = criterion_id

    @property
    def currency_code(self):
        """Gets the currency_code of this Conversion.

        The currency code for the conversion's revenue. Should be in ISO 4217 alphabetic (3-char) format.

        :return: The currency_code of this Conversion.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Conversion.

        The currency code for the conversion's revenue. Should be in ISO 4217 alphabetic (3-char) format.

        :param currency_code: The currency_code of this Conversion.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def custom_dimension(self):
        """Gets the custom_dimension of this Conversion.

        Custom dimensions for the conversion, which can be used to filter data in a report.

        :return: The custom_dimension of this Conversion.
        :rtype: List[CustomDimension]
        """
        return self._custom_dimension

    @custom_dimension.setter
    def custom_dimension(self, custom_dimension):
        """Sets the custom_dimension of this Conversion.

        Custom dimensions for the conversion, which can be used to filter data in a report.

        :param custom_dimension: The custom_dimension of this Conversion.
        :type custom_dimension: List[CustomDimension]
        """

        self._custom_dimension = custom_dimension

    @property
    def custom_metric(self):
        """Gets the custom_metric of this Conversion.

        Custom metrics for the conversion.

        :return: The custom_metric of this Conversion.
        :rtype: List[CustomMetric]
        """
        return self._custom_metric

    @custom_metric.setter
    def custom_metric(self, custom_metric):
        """Sets the custom_metric of this Conversion.

        Custom metrics for the conversion.

        :param custom_metric: The custom_metric of this Conversion.
        :type custom_metric: List[CustomMetric]
        """

        self._custom_metric = custom_metric

    @property
    def customer_id(self):
        """Gets the customer_id of this Conversion.

        Customer ID of a client account in the new Search Ads 360 experience.

        :return: The customer_id of this Conversion.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Conversion.

        Customer ID of a client account in the new Search Ads 360 experience.

        :param customer_id: The customer_id of this Conversion.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def device_type(self):
        """Gets the device_type of this Conversion.

        The type of device on which the conversion occurred.

        :return: The device_type of this Conversion.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this Conversion.

        The type of device on which the conversion occurred.

        :param device_type: The device_type of this Conversion.
        :type device_type: str
        """

        self._device_type = device_type

    @property
    def ds_conversion_id(self):
        """Gets the ds_conversion_id of this Conversion.

        ID that DoubleClick Search generates for each conversion.

        :return: The ds_conversion_id of this Conversion.
        :rtype: str
        """
        return self._ds_conversion_id

    @ds_conversion_id.setter
    def ds_conversion_id(self, ds_conversion_id):
        """Sets the ds_conversion_id of this Conversion.

        ID that DoubleClick Search generates for each conversion.

        :param ds_conversion_id: The ds_conversion_id of this Conversion.
        :type ds_conversion_id: str
        """

        self._ds_conversion_id = ds_conversion_id

    @property
    def engine_account_id(self):
        """Gets the engine_account_id of this Conversion.

        DS engine account ID.

        :return: The engine_account_id of this Conversion.
        :rtype: str
        """
        return self._engine_account_id

    @engine_account_id.setter
    def engine_account_id(self, engine_account_id):
        """Sets the engine_account_id of this Conversion.

        DS engine account ID.

        :param engine_account_id: The engine_account_id of this Conversion.
        :type engine_account_id: str
        """

        self._engine_account_id = engine_account_id

    @property
    def floodlight_order_id(self):
        """Gets the floodlight_order_id of this Conversion.

        The Floodlight order ID provided by the advertiser for the conversion.

        :return: The floodlight_order_id of this Conversion.
        :rtype: str
        """
        return self._floodlight_order_id

    @floodlight_order_id.setter
    def floodlight_order_id(self, floodlight_order_id):
        """Sets the floodlight_order_id of this Conversion.

        The Floodlight order ID provided by the advertiser for the conversion.

        :param floodlight_order_id: The floodlight_order_id of this Conversion.
        :type floodlight_order_id: str
        """

        self._floodlight_order_id = floodlight_order_id

    @property
    def inventory_account_id(self):
        """Gets the inventory_account_id of this Conversion.

        ID that DS generates and uses to uniquely identify the inventory account that contains the product.

        :return: The inventory_account_id of this Conversion.
        :rtype: str
        """
        return self._inventory_account_id

    @inventory_account_id.setter
    def inventory_account_id(self, inventory_account_id):
        """Sets the inventory_account_id of this Conversion.

        ID that DS generates and uses to uniquely identify the inventory account that contains the product.

        :param inventory_account_id: The inventory_account_id of this Conversion.
        :type inventory_account_id: str
        """

        self._inventory_account_id = inventory_account_id

    @property
    def product_country(self):
        """Gets the product_country of this Conversion.

        The country registered for the Merchant Center feed that contains the product. Use an ISO 3166 code to specify a country.

        :return: The product_country of this Conversion.
        :rtype: str
        """
        return self._product_country

    @product_country.setter
    def product_country(self, product_country):
        """Sets the product_country of this Conversion.

        The country registered for the Merchant Center feed that contains the product. Use an ISO 3166 code to specify a country.

        :param product_country: The product_country of this Conversion.
        :type product_country: str
        """

        self._product_country = product_country

    @property
    def product_group_id(self):
        """Gets the product_group_id of this Conversion.

        DS product group ID.

        :return: The product_group_id of this Conversion.
        :rtype: str
        """
        return self._product_group_id

    @product_group_id.setter
    def product_group_id(self, product_group_id):
        """Sets the product_group_id of this Conversion.

        DS product group ID.

        :param product_group_id: The product_group_id of this Conversion.
        :type product_group_id: str
        """

        self._product_group_id = product_group_id

    @property
    def product_id(self):
        """Gets the product_id of this Conversion.

        The product ID (SKU).

        :return: The product_id of this Conversion.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Conversion.

        The product ID (SKU).

        :param product_id: The product_id of this Conversion.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def product_language(self):
        """Gets the product_language of this Conversion.

        The language registered for the Merchant Center feed that contains the product. Use an ISO 639 code to specify a language.

        :return: The product_language of this Conversion.
        :rtype: str
        """
        return self._product_language

    @product_language.setter
    def product_language(self, product_language):
        """Sets the product_language of this Conversion.

        The language registered for the Merchant Center feed that contains the product. Use an ISO 639 code to specify a language.

        :param product_language: The product_language of this Conversion.
        :type product_language: str
        """

        self._product_language = product_language

    @property
    def quantity_millis(self):
        """Gets the quantity_millis of this Conversion.

        The quantity of this conversion, in millis.

        :return: The quantity_millis of this Conversion.
        :rtype: str
        """
        return self._quantity_millis

    @quantity_millis.setter
    def quantity_millis(self, quantity_millis):
        """Sets the quantity_millis of this Conversion.

        The quantity of this conversion, in millis.

        :param quantity_millis: The quantity_millis of this Conversion.
        :type quantity_millis: str
        """

        self._quantity_millis = quantity_millis

    @property
    def revenue_micros(self):
        """Gets the revenue_micros of this Conversion.

        The revenue amount of this `TRANSACTION` conversion, in micros (value multiplied by 1000000, no decimal). For example, to specify a revenue value of \"10\" enter \"10000000\" (10 million) in your request.

        :return: The revenue_micros of this Conversion.
        :rtype: str
        """
        return self._revenue_micros

    @revenue_micros.setter
    def revenue_micros(self, revenue_micros):
        """Sets the revenue_micros of this Conversion.

        The revenue amount of this `TRANSACTION` conversion, in micros (value multiplied by 1000000, no decimal). For example, to specify a revenue value of \"10\" enter \"10000000\" (10 million) in your request.

        :param revenue_micros: The revenue_micros of this Conversion.
        :type revenue_micros: str
        """

        self._revenue_micros = revenue_micros

    @property
    def segmentation_id(self):
        """Gets the segmentation_id of this Conversion.

        The numeric segmentation identifier (for example, DoubleClick Search Floodlight activity ID).

        :return: The segmentation_id of this Conversion.
        :rtype: str
        """
        return self._segmentation_id

    @segmentation_id.setter
    def segmentation_id(self, segmentation_id):
        """Sets the segmentation_id of this Conversion.

        The numeric segmentation identifier (for example, DoubleClick Search Floodlight activity ID).

        :param segmentation_id: The segmentation_id of this Conversion.
        :type segmentation_id: str
        """

        self._segmentation_id = segmentation_id

    @property
    def segmentation_name(self):
        """Gets the segmentation_name of this Conversion.

        The friendly segmentation identifier (for example, DoubleClick Search Floodlight activity name).

        :return: The segmentation_name of this Conversion.
        :rtype: str
        """
        return self._segmentation_name

    @segmentation_name.setter
    def segmentation_name(self, segmentation_name):
        """Sets the segmentation_name of this Conversion.

        The friendly segmentation identifier (for example, DoubleClick Search Floodlight activity name).

        :param segmentation_name: The segmentation_name of this Conversion.
        :type segmentation_name: str
        """

        self._segmentation_name = segmentation_name

    @property
    def segmentation_type(self):
        """Gets the segmentation_type of this Conversion.

        The segmentation type of this conversion (for example, `FLOODLIGHT`).

        :return: The segmentation_type of this Conversion.
        :rtype: str
        """
        return self._segmentation_type

    @segmentation_type.setter
    def segmentation_type(self, segmentation_type):
        """Sets the segmentation_type of this Conversion.

        The segmentation type of this conversion (for example, `FLOODLIGHT`).

        :param segmentation_type: The segmentation_type of this Conversion.
        :type segmentation_type: str
        """

        self._segmentation_type = segmentation_type

    @property
    def state(self):
        """Gets the state of this Conversion.

        The state of the conversion, that is, either `ACTIVE` or `REMOVED`. Note: state DELETED is deprecated.

        :return: The state of this Conversion.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Conversion.

        The state of the conversion, that is, either `ACTIVE` or `REMOVED`. Note: state DELETED is deprecated.

        :param state: The state of this Conversion.
        :type state: str
        """

        self._state = state

    @property
    def store_id(self):
        """Gets the store_id of this Conversion.

        The ID of the local store for which the product was advertised. Applicable only when the channel is \"`local`\".

        :return: The store_id of this Conversion.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this Conversion.

        The ID of the local store for which the product was advertised. Applicable only when the channel is \"`local`\".

        :param store_id: The store_id of this Conversion.
        :type store_id: str
        """

        self._store_id = store_id

    @property
    def type(self):
        """Gets the type of this Conversion.

        The type of the conversion, that is, either `ACTION` or `TRANSACTION`. An `ACTION` conversion is an action by the user that has no monetarily quantifiable value, while a `TRANSACTION` conversion is an action that does have a monetarily quantifiable value. Examples are email list signups (`ACTION`) versus ecommerce purchases (`TRANSACTION`).

        :return: The type of this Conversion.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Conversion.

        The type of the conversion, that is, either `ACTION` or `TRANSACTION`. An `ACTION` conversion is an action by the user that has no monetarily quantifiable value, while a `TRANSACTION` conversion is an action that does have a monetarily quantifiable value. Examples are email list signups (`ACTION`) versus ecommerce purchases (`TRANSACTION`).

        :param type: The type of this Conversion.
        :type type: str
        """

        self._type = type
