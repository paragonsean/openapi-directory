/**
 * Search Ads 360 API
 * The Search Ads 360 API allows developers to automate uploading conversions and downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailability::OAIAvailability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailability::OAIAvailability() {
    this->initializeModel();
}

OAIAvailability::~OAIAvailability() {}

void OAIAvailability::initializeModel() {

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_agency_id_isSet = false;
    m_agency_id_isValid = false;

    m_availability_timestamp_isSet = false;
    m_availability_timestamp_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_segmentation_id_isSet = false;
    m_segmentation_id_isValid = false;

    m_segmentation_name_isSet = false;
    m_segmentation_name_isValid = false;

    m_segmentation_type_isSet = false;
    m_segmentation_type_isValid = false;
}

void OAIAvailability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailability::fromJsonObject(QJsonObject json) {

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_agency_id_isValid = ::OpenAPI::fromJsonValue(m_agency_id, json[QString("agencyId")]);
    m_agency_id_isSet = !json[QString("agencyId")].isNull() && m_agency_id_isValid;

    m_availability_timestamp_isValid = ::OpenAPI::fromJsonValue(m_availability_timestamp, json[QString("availabilityTimestamp")]);
    m_availability_timestamp_isSet = !json[QString("availabilityTimestamp")].isNull() && m_availability_timestamp_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_segmentation_id_isValid = ::OpenAPI::fromJsonValue(m_segmentation_id, json[QString("segmentationId")]);
    m_segmentation_id_isSet = !json[QString("segmentationId")].isNull() && m_segmentation_id_isValid;

    m_segmentation_name_isValid = ::OpenAPI::fromJsonValue(m_segmentation_name, json[QString("segmentationName")]);
    m_segmentation_name_isSet = !json[QString("segmentationName")].isNull() && m_segmentation_name_isValid;

    m_segmentation_type_isValid = ::OpenAPI::fromJsonValue(m_segmentation_type, json[QString("segmentationType")]);
    m_segmentation_type_isSet = !json[QString("segmentationType")].isNull() && m_segmentation_type_isValid;
}

QString OAIAvailability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailability::asJsonObject() const {
    QJsonObject obj;
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_agency_id_isSet) {
        obj.insert(QString("agencyId"), ::OpenAPI::toJsonValue(m_agency_id));
    }
    if (m_availability_timestamp_isSet) {
        obj.insert(QString("availabilityTimestamp"), ::OpenAPI::toJsonValue(m_availability_timestamp));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_segmentation_id_isSet) {
        obj.insert(QString("segmentationId"), ::OpenAPI::toJsonValue(m_segmentation_id));
    }
    if (m_segmentation_name_isSet) {
        obj.insert(QString("segmentationName"), ::OpenAPI::toJsonValue(m_segmentation_name));
    }
    if (m_segmentation_type_isSet) {
        obj.insert(QString("segmentationType"), ::OpenAPI::toJsonValue(m_segmentation_type));
    }
    return obj;
}

QString OAIAvailability::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAIAvailability::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAIAvailability::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAIAvailability::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

QString OAIAvailability::getAgencyId() const {
    return m_agency_id;
}
void OAIAvailability::setAgencyId(const QString &agency_id) {
    m_agency_id = agency_id;
    m_agency_id_isSet = true;
}

bool OAIAvailability::is_agency_id_Set() const{
    return m_agency_id_isSet;
}

bool OAIAvailability::is_agency_id_Valid() const{
    return m_agency_id_isValid;
}

QString OAIAvailability::getAvailabilityTimestamp() const {
    return m_availability_timestamp;
}
void OAIAvailability::setAvailabilityTimestamp(const QString &availability_timestamp) {
    m_availability_timestamp = availability_timestamp;
    m_availability_timestamp_isSet = true;
}

bool OAIAvailability::is_availability_timestamp_Set() const{
    return m_availability_timestamp_isSet;
}

bool OAIAvailability::is_availability_timestamp_Valid() const{
    return m_availability_timestamp_isValid;
}

QString OAIAvailability::getCustomerId() const {
    return m_customer_id;
}
void OAIAvailability::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIAvailability::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIAvailability::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAIAvailability::getSegmentationId() const {
    return m_segmentation_id;
}
void OAIAvailability::setSegmentationId(const QString &segmentation_id) {
    m_segmentation_id = segmentation_id;
    m_segmentation_id_isSet = true;
}

bool OAIAvailability::is_segmentation_id_Set() const{
    return m_segmentation_id_isSet;
}

bool OAIAvailability::is_segmentation_id_Valid() const{
    return m_segmentation_id_isValid;
}

QString OAIAvailability::getSegmentationName() const {
    return m_segmentation_name;
}
void OAIAvailability::setSegmentationName(const QString &segmentation_name) {
    m_segmentation_name = segmentation_name;
    m_segmentation_name_isSet = true;
}

bool OAIAvailability::is_segmentation_name_Set() const{
    return m_segmentation_name_isSet;
}

bool OAIAvailability::is_segmentation_name_Valid() const{
    return m_segmentation_name_isValid;
}

QString OAIAvailability::getSegmentationType() const {
    return m_segmentation_type;
}
void OAIAvailability::setSegmentationType(const QString &segmentation_type) {
    m_segmentation_type = segmentation_type;
    m_segmentation_type_isSet = true;
}

bool OAIAvailability::is_segmentation_type_Set() const{
    return m_segmentation_type_isSet;
}

bool OAIAvailability::is_segmentation_type_Valid() const{
    return m_segmentation_type_isValid;
}

bool OAIAvailability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
