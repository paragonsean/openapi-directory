/**
 * Search Ads 360 API
 * The Search Ads 360 API allows developers to automate uploading conversions and downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportRequest_reportScope.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportRequest_reportScope::OAIReportRequest_reportScope(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportRequest_reportScope::OAIReportRequest_reportScope() {
    this->initializeModel();
}

OAIReportRequest_reportScope::~OAIReportRequest_reportScope() {}

void OAIReportRequest_reportScope::initializeModel() {

    m_ad_group_id_isSet = false;
    m_ad_group_id_isValid = false;

    m_ad_id_isSet = false;
    m_ad_id_isValid = false;

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_agency_id_isSet = false;
    m_agency_id_isValid = false;

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_engine_account_id_isSet = false;
    m_engine_account_id_isValid = false;

    m_keyword_id_isSet = false;
    m_keyword_id_isValid = false;
}

void OAIReportRequest_reportScope::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportRequest_reportScope::fromJsonObject(QJsonObject json) {

    m_ad_group_id_isValid = ::OpenAPI::fromJsonValue(m_ad_group_id, json[QString("adGroupId")]);
    m_ad_group_id_isSet = !json[QString("adGroupId")].isNull() && m_ad_group_id_isValid;

    m_ad_id_isValid = ::OpenAPI::fromJsonValue(m_ad_id, json[QString("adId")]);
    m_ad_id_isSet = !json[QString("adId")].isNull() && m_ad_id_isValid;

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_agency_id_isValid = ::OpenAPI::fromJsonValue(m_agency_id, json[QString("agencyId")]);
    m_agency_id_isSet = !json[QString("agencyId")].isNull() && m_agency_id_isValid;

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("campaignId")]);
    m_campaign_id_isSet = !json[QString("campaignId")].isNull() && m_campaign_id_isValid;

    m_engine_account_id_isValid = ::OpenAPI::fromJsonValue(m_engine_account_id, json[QString("engineAccountId")]);
    m_engine_account_id_isSet = !json[QString("engineAccountId")].isNull() && m_engine_account_id_isValid;

    m_keyword_id_isValid = ::OpenAPI::fromJsonValue(m_keyword_id, json[QString("keywordId")]);
    m_keyword_id_isSet = !json[QString("keywordId")].isNull() && m_keyword_id_isValid;
}

QString OAIReportRequest_reportScope::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportRequest_reportScope::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_group_id_isSet) {
        obj.insert(QString("adGroupId"), ::OpenAPI::toJsonValue(m_ad_group_id));
    }
    if (m_ad_id_isSet) {
        obj.insert(QString("adId"), ::OpenAPI::toJsonValue(m_ad_id));
    }
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_agency_id_isSet) {
        obj.insert(QString("agencyId"), ::OpenAPI::toJsonValue(m_agency_id));
    }
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaignId"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_engine_account_id_isSet) {
        obj.insert(QString("engineAccountId"), ::OpenAPI::toJsonValue(m_engine_account_id));
    }
    if (m_keyword_id_isSet) {
        obj.insert(QString("keywordId"), ::OpenAPI::toJsonValue(m_keyword_id));
    }
    return obj;
}

QString OAIReportRequest_reportScope::getAdGroupId() const {
    return m_ad_group_id;
}
void OAIReportRequest_reportScope::setAdGroupId(const QString &ad_group_id) {
    m_ad_group_id = ad_group_id;
    m_ad_group_id_isSet = true;
}

bool OAIReportRequest_reportScope::is_ad_group_id_Set() const{
    return m_ad_group_id_isSet;
}

bool OAIReportRequest_reportScope::is_ad_group_id_Valid() const{
    return m_ad_group_id_isValid;
}

QString OAIReportRequest_reportScope::getAdId() const {
    return m_ad_id;
}
void OAIReportRequest_reportScope::setAdId(const QString &ad_id) {
    m_ad_id = ad_id;
    m_ad_id_isSet = true;
}

bool OAIReportRequest_reportScope::is_ad_id_Set() const{
    return m_ad_id_isSet;
}

bool OAIReportRequest_reportScope::is_ad_id_Valid() const{
    return m_ad_id_isValid;
}

QString OAIReportRequest_reportScope::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAIReportRequest_reportScope::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAIReportRequest_reportScope::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAIReportRequest_reportScope::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

QString OAIReportRequest_reportScope::getAgencyId() const {
    return m_agency_id;
}
void OAIReportRequest_reportScope::setAgencyId(const QString &agency_id) {
    m_agency_id = agency_id;
    m_agency_id_isSet = true;
}

bool OAIReportRequest_reportScope::is_agency_id_Set() const{
    return m_agency_id_isSet;
}

bool OAIReportRequest_reportScope::is_agency_id_Valid() const{
    return m_agency_id_isValid;
}

QString OAIReportRequest_reportScope::getCampaignId() const {
    return m_campaign_id;
}
void OAIReportRequest_reportScope::setCampaignId(const QString &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAIReportRequest_reportScope::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAIReportRequest_reportScope::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

QString OAIReportRequest_reportScope::getEngineAccountId() const {
    return m_engine_account_id;
}
void OAIReportRequest_reportScope::setEngineAccountId(const QString &engine_account_id) {
    m_engine_account_id = engine_account_id;
    m_engine_account_id_isSet = true;
}

bool OAIReportRequest_reportScope::is_engine_account_id_Set() const{
    return m_engine_account_id_isSet;
}

bool OAIReportRequest_reportScope::is_engine_account_id_Valid() const{
    return m_engine_account_id_isValid;
}

QString OAIReportRequest_reportScope::getKeywordId() const {
    return m_keyword_id;
}
void OAIReportRequest_reportScope::setKeywordId(const QString &keyword_id) {
    m_keyword_id = keyword_id;
    m_keyword_id_isSet = true;
}

bool OAIReportRequest_reportScope::is_keyword_id_Set() const{
    return m_keyword_id_isSet;
}

bool OAIReportRequest_reportScope::is_keyword_id_Valid() const{
    return m_keyword_id_isValid;
}

bool OAIReportRequest_reportScope::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportRequest_reportScope::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
