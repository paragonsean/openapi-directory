/**
 * Search Ads 360 API
 * The Search Ads 360 API allows developers to automate uploading conversions and downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversion::OAIConversion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversion::OAIConversion() {
    this->initializeModel();
}

OAIConversion::~OAIConversion() {}

void OAIConversion::initializeModel() {

    m_ad_group_id_isSet = false;
    m_ad_group_id_isValid = false;

    m_ad_id_isSet = false;
    m_ad_id_isValid = false;

    m_ad_user_data_consent_isSet = false;
    m_ad_user_data_consent_isValid = false;

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_agency_id_isSet = false;
    m_agency_id_isValid = false;

    m_attribution_model_isSet = false;
    m_attribution_model_isValid = false;

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_click_id_isSet = false;
    m_click_id_isValid = false;

    m_conversion_id_isSet = false;
    m_conversion_id_isValid = false;

    m_conversion_modified_timestamp_isSet = false;
    m_conversion_modified_timestamp_isValid = false;

    m_conversion_timestamp_isSet = false;
    m_conversion_timestamp_isValid = false;

    m_count_millis_isSet = false;
    m_count_millis_isValid = false;

    m_criterion_id_isSet = false;
    m_criterion_id_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_custom_dimension_isSet = false;
    m_custom_dimension_isValid = false;

    m_custom_metric_isSet = false;
    m_custom_metric_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_ds_conversion_id_isSet = false;
    m_ds_conversion_id_isValid = false;

    m_engine_account_id_isSet = false;
    m_engine_account_id_isValid = false;

    m_floodlight_order_id_isSet = false;
    m_floodlight_order_id_isValid = false;

    m_inventory_account_id_isSet = false;
    m_inventory_account_id_isValid = false;

    m_product_country_isSet = false;
    m_product_country_isValid = false;

    m_product_group_id_isSet = false;
    m_product_group_id_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_product_language_isSet = false;
    m_product_language_isValid = false;

    m_quantity_millis_isSet = false;
    m_quantity_millis_isValid = false;

    m_revenue_micros_isSet = false;
    m_revenue_micros_isValid = false;

    m_segmentation_id_isSet = false;
    m_segmentation_id_isValid = false;

    m_segmentation_name_isSet = false;
    m_segmentation_name_isValid = false;

    m_segmentation_type_isSet = false;
    m_segmentation_type_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIConversion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversion::fromJsonObject(QJsonObject json) {

    m_ad_group_id_isValid = ::OpenAPI::fromJsonValue(m_ad_group_id, json[QString("adGroupId")]);
    m_ad_group_id_isSet = !json[QString("adGroupId")].isNull() && m_ad_group_id_isValid;

    m_ad_id_isValid = ::OpenAPI::fromJsonValue(m_ad_id, json[QString("adId")]);
    m_ad_id_isSet = !json[QString("adId")].isNull() && m_ad_id_isValid;

    m_ad_user_data_consent_isValid = ::OpenAPI::fromJsonValue(m_ad_user_data_consent, json[QString("adUserDataConsent")]);
    m_ad_user_data_consent_isSet = !json[QString("adUserDataConsent")].isNull() && m_ad_user_data_consent_isValid;

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_agency_id_isValid = ::OpenAPI::fromJsonValue(m_agency_id, json[QString("agencyId")]);
    m_agency_id_isSet = !json[QString("agencyId")].isNull() && m_agency_id_isValid;

    m_attribution_model_isValid = ::OpenAPI::fromJsonValue(m_attribution_model, json[QString("attributionModel")]);
    m_attribution_model_isSet = !json[QString("attributionModel")].isNull() && m_attribution_model_isValid;

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("campaignId")]);
    m_campaign_id_isSet = !json[QString("campaignId")].isNull() && m_campaign_id_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_click_id_isValid = ::OpenAPI::fromJsonValue(m_click_id, json[QString("clickId")]);
    m_click_id_isSet = !json[QString("clickId")].isNull() && m_click_id_isValid;

    m_conversion_id_isValid = ::OpenAPI::fromJsonValue(m_conversion_id, json[QString("conversionId")]);
    m_conversion_id_isSet = !json[QString("conversionId")].isNull() && m_conversion_id_isValid;

    m_conversion_modified_timestamp_isValid = ::OpenAPI::fromJsonValue(m_conversion_modified_timestamp, json[QString("conversionModifiedTimestamp")]);
    m_conversion_modified_timestamp_isSet = !json[QString("conversionModifiedTimestamp")].isNull() && m_conversion_modified_timestamp_isValid;

    m_conversion_timestamp_isValid = ::OpenAPI::fromJsonValue(m_conversion_timestamp, json[QString("conversionTimestamp")]);
    m_conversion_timestamp_isSet = !json[QString("conversionTimestamp")].isNull() && m_conversion_timestamp_isValid;

    m_count_millis_isValid = ::OpenAPI::fromJsonValue(m_count_millis, json[QString("countMillis")]);
    m_count_millis_isSet = !json[QString("countMillis")].isNull() && m_count_millis_isValid;

    m_criterion_id_isValid = ::OpenAPI::fromJsonValue(m_criterion_id, json[QString("criterionId")]);
    m_criterion_id_isSet = !json[QString("criterionId")].isNull() && m_criterion_id_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_custom_dimension_isValid = ::OpenAPI::fromJsonValue(m_custom_dimension, json[QString("customDimension")]);
    m_custom_dimension_isSet = !json[QString("customDimension")].isNull() && m_custom_dimension_isValid;

    m_custom_metric_isValid = ::OpenAPI::fromJsonValue(m_custom_metric, json[QString("customMetric")]);
    m_custom_metric_isSet = !json[QString("customMetric")].isNull() && m_custom_metric_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("deviceType")]);
    m_device_type_isSet = !json[QString("deviceType")].isNull() && m_device_type_isValid;

    m_ds_conversion_id_isValid = ::OpenAPI::fromJsonValue(m_ds_conversion_id, json[QString("dsConversionId")]);
    m_ds_conversion_id_isSet = !json[QString("dsConversionId")].isNull() && m_ds_conversion_id_isValid;

    m_engine_account_id_isValid = ::OpenAPI::fromJsonValue(m_engine_account_id, json[QString("engineAccountId")]);
    m_engine_account_id_isSet = !json[QString("engineAccountId")].isNull() && m_engine_account_id_isValid;

    m_floodlight_order_id_isValid = ::OpenAPI::fromJsonValue(m_floodlight_order_id, json[QString("floodlightOrderId")]);
    m_floodlight_order_id_isSet = !json[QString("floodlightOrderId")].isNull() && m_floodlight_order_id_isValid;

    m_inventory_account_id_isValid = ::OpenAPI::fromJsonValue(m_inventory_account_id, json[QString("inventoryAccountId")]);
    m_inventory_account_id_isSet = !json[QString("inventoryAccountId")].isNull() && m_inventory_account_id_isValid;

    m_product_country_isValid = ::OpenAPI::fromJsonValue(m_product_country, json[QString("productCountry")]);
    m_product_country_isSet = !json[QString("productCountry")].isNull() && m_product_country_isValid;

    m_product_group_id_isValid = ::OpenAPI::fromJsonValue(m_product_group_id, json[QString("productGroupId")]);
    m_product_group_id_isSet = !json[QString("productGroupId")].isNull() && m_product_group_id_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_product_language_isValid = ::OpenAPI::fromJsonValue(m_product_language, json[QString("productLanguage")]);
    m_product_language_isSet = !json[QString("productLanguage")].isNull() && m_product_language_isValid;

    m_quantity_millis_isValid = ::OpenAPI::fromJsonValue(m_quantity_millis, json[QString("quantityMillis")]);
    m_quantity_millis_isSet = !json[QString("quantityMillis")].isNull() && m_quantity_millis_isValid;

    m_revenue_micros_isValid = ::OpenAPI::fromJsonValue(m_revenue_micros, json[QString("revenueMicros")]);
    m_revenue_micros_isSet = !json[QString("revenueMicros")].isNull() && m_revenue_micros_isValid;

    m_segmentation_id_isValid = ::OpenAPI::fromJsonValue(m_segmentation_id, json[QString("segmentationId")]);
    m_segmentation_id_isSet = !json[QString("segmentationId")].isNull() && m_segmentation_id_isValid;

    m_segmentation_name_isValid = ::OpenAPI::fromJsonValue(m_segmentation_name, json[QString("segmentationName")]);
    m_segmentation_name_isSet = !json[QString("segmentationName")].isNull() && m_segmentation_name_isValid;

    m_segmentation_type_isValid = ::OpenAPI::fromJsonValue(m_segmentation_type, json[QString("segmentationType")]);
    m_segmentation_type_isSet = !json[QString("segmentationType")].isNull() && m_segmentation_type_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("storeId")]);
    m_store_id_isSet = !json[QString("storeId")].isNull() && m_store_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIConversion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversion::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_group_id_isSet) {
        obj.insert(QString("adGroupId"), ::OpenAPI::toJsonValue(m_ad_group_id));
    }
    if (m_ad_id_isSet) {
        obj.insert(QString("adId"), ::OpenAPI::toJsonValue(m_ad_id));
    }
    if (m_ad_user_data_consent_isSet) {
        obj.insert(QString("adUserDataConsent"), ::OpenAPI::toJsonValue(m_ad_user_data_consent));
    }
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_agency_id_isSet) {
        obj.insert(QString("agencyId"), ::OpenAPI::toJsonValue(m_agency_id));
    }
    if (m_attribution_model_isSet) {
        obj.insert(QString("attributionModel"), ::OpenAPI::toJsonValue(m_attribution_model));
    }
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaignId"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_click_id_isSet) {
        obj.insert(QString("clickId"), ::OpenAPI::toJsonValue(m_click_id));
    }
    if (m_conversion_id_isSet) {
        obj.insert(QString("conversionId"), ::OpenAPI::toJsonValue(m_conversion_id));
    }
    if (m_conversion_modified_timestamp_isSet) {
        obj.insert(QString("conversionModifiedTimestamp"), ::OpenAPI::toJsonValue(m_conversion_modified_timestamp));
    }
    if (m_conversion_timestamp_isSet) {
        obj.insert(QString("conversionTimestamp"), ::OpenAPI::toJsonValue(m_conversion_timestamp));
    }
    if (m_count_millis_isSet) {
        obj.insert(QString("countMillis"), ::OpenAPI::toJsonValue(m_count_millis));
    }
    if (m_criterion_id_isSet) {
        obj.insert(QString("criterionId"), ::OpenAPI::toJsonValue(m_criterion_id));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_custom_dimension.size() > 0) {
        obj.insert(QString("customDimension"), ::OpenAPI::toJsonValue(m_custom_dimension));
    }
    if (m_custom_metric.size() > 0) {
        obj.insert(QString("customMetric"), ::OpenAPI::toJsonValue(m_custom_metric));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_device_type_isSet) {
        obj.insert(QString("deviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_ds_conversion_id_isSet) {
        obj.insert(QString("dsConversionId"), ::OpenAPI::toJsonValue(m_ds_conversion_id));
    }
    if (m_engine_account_id_isSet) {
        obj.insert(QString("engineAccountId"), ::OpenAPI::toJsonValue(m_engine_account_id));
    }
    if (m_floodlight_order_id_isSet) {
        obj.insert(QString("floodlightOrderId"), ::OpenAPI::toJsonValue(m_floodlight_order_id));
    }
    if (m_inventory_account_id_isSet) {
        obj.insert(QString("inventoryAccountId"), ::OpenAPI::toJsonValue(m_inventory_account_id));
    }
    if (m_product_country_isSet) {
        obj.insert(QString("productCountry"), ::OpenAPI::toJsonValue(m_product_country));
    }
    if (m_product_group_id_isSet) {
        obj.insert(QString("productGroupId"), ::OpenAPI::toJsonValue(m_product_group_id));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_product_language_isSet) {
        obj.insert(QString("productLanguage"), ::OpenAPI::toJsonValue(m_product_language));
    }
    if (m_quantity_millis_isSet) {
        obj.insert(QString("quantityMillis"), ::OpenAPI::toJsonValue(m_quantity_millis));
    }
    if (m_revenue_micros_isSet) {
        obj.insert(QString("revenueMicros"), ::OpenAPI::toJsonValue(m_revenue_micros));
    }
    if (m_segmentation_id_isSet) {
        obj.insert(QString("segmentationId"), ::OpenAPI::toJsonValue(m_segmentation_id));
    }
    if (m_segmentation_name_isSet) {
        obj.insert(QString("segmentationName"), ::OpenAPI::toJsonValue(m_segmentation_name));
    }
    if (m_segmentation_type_isSet) {
        obj.insert(QString("segmentationType"), ::OpenAPI::toJsonValue(m_segmentation_type));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("storeId"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIConversion::getAdGroupId() const {
    return m_ad_group_id;
}
void OAIConversion::setAdGroupId(const QString &ad_group_id) {
    m_ad_group_id = ad_group_id;
    m_ad_group_id_isSet = true;
}

bool OAIConversion::is_ad_group_id_Set() const{
    return m_ad_group_id_isSet;
}

bool OAIConversion::is_ad_group_id_Valid() const{
    return m_ad_group_id_isValid;
}

QString OAIConversion::getAdId() const {
    return m_ad_id;
}
void OAIConversion::setAdId(const QString &ad_id) {
    m_ad_id = ad_id;
    m_ad_id_isSet = true;
}

bool OAIConversion::is_ad_id_Set() const{
    return m_ad_id_isSet;
}

bool OAIConversion::is_ad_id_Valid() const{
    return m_ad_id_isValid;
}

QString OAIConversion::getAdUserDataConsent() const {
    return m_ad_user_data_consent;
}
void OAIConversion::setAdUserDataConsent(const QString &ad_user_data_consent) {
    m_ad_user_data_consent = ad_user_data_consent;
    m_ad_user_data_consent_isSet = true;
}

bool OAIConversion::is_ad_user_data_consent_Set() const{
    return m_ad_user_data_consent_isSet;
}

bool OAIConversion::is_ad_user_data_consent_Valid() const{
    return m_ad_user_data_consent_isValid;
}

QString OAIConversion::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAIConversion::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAIConversion::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAIConversion::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

QString OAIConversion::getAgencyId() const {
    return m_agency_id;
}
void OAIConversion::setAgencyId(const QString &agency_id) {
    m_agency_id = agency_id;
    m_agency_id_isSet = true;
}

bool OAIConversion::is_agency_id_Set() const{
    return m_agency_id_isSet;
}

bool OAIConversion::is_agency_id_Valid() const{
    return m_agency_id_isValid;
}

QString OAIConversion::getAttributionModel() const {
    return m_attribution_model;
}
void OAIConversion::setAttributionModel(const QString &attribution_model) {
    m_attribution_model = attribution_model;
    m_attribution_model_isSet = true;
}

bool OAIConversion::is_attribution_model_Set() const{
    return m_attribution_model_isSet;
}

bool OAIConversion::is_attribution_model_Valid() const{
    return m_attribution_model_isValid;
}

QString OAIConversion::getCampaignId() const {
    return m_campaign_id;
}
void OAIConversion::setCampaignId(const QString &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAIConversion::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAIConversion::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

QString OAIConversion::getChannel() const {
    return m_channel;
}
void OAIConversion::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIConversion::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIConversion::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIConversion::getClickId() const {
    return m_click_id;
}
void OAIConversion::setClickId(const QString &click_id) {
    m_click_id = click_id;
    m_click_id_isSet = true;
}

bool OAIConversion::is_click_id_Set() const{
    return m_click_id_isSet;
}

bool OAIConversion::is_click_id_Valid() const{
    return m_click_id_isValid;
}

QString OAIConversion::getConversionId() const {
    return m_conversion_id;
}
void OAIConversion::setConversionId(const QString &conversion_id) {
    m_conversion_id = conversion_id;
    m_conversion_id_isSet = true;
}

bool OAIConversion::is_conversion_id_Set() const{
    return m_conversion_id_isSet;
}

bool OAIConversion::is_conversion_id_Valid() const{
    return m_conversion_id_isValid;
}

QString OAIConversion::getConversionModifiedTimestamp() const {
    return m_conversion_modified_timestamp;
}
void OAIConversion::setConversionModifiedTimestamp(const QString &conversion_modified_timestamp) {
    m_conversion_modified_timestamp = conversion_modified_timestamp;
    m_conversion_modified_timestamp_isSet = true;
}

bool OAIConversion::is_conversion_modified_timestamp_Set() const{
    return m_conversion_modified_timestamp_isSet;
}

bool OAIConversion::is_conversion_modified_timestamp_Valid() const{
    return m_conversion_modified_timestamp_isValid;
}

QString OAIConversion::getConversionTimestamp() const {
    return m_conversion_timestamp;
}
void OAIConversion::setConversionTimestamp(const QString &conversion_timestamp) {
    m_conversion_timestamp = conversion_timestamp;
    m_conversion_timestamp_isSet = true;
}

bool OAIConversion::is_conversion_timestamp_Set() const{
    return m_conversion_timestamp_isSet;
}

bool OAIConversion::is_conversion_timestamp_Valid() const{
    return m_conversion_timestamp_isValid;
}

QString OAIConversion::getCountMillis() const {
    return m_count_millis;
}
void OAIConversion::setCountMillis(const QString &count_millis) {
    m_count_millis = count_millis;
    m_count_millis_isSet = true;
}

bool OAIConversion::is_count_millis_Set() const{
    return m_count_millis_isSet;
}

bool OAIConversion::is_count_millis_Valid() const{
    return m_count_millis_isValid;
}

QString OAIConversion::getCriterionId() const {
    return m_criterion_id;
}
void OAIConversion::setCriterionId(const QString &criterion_id) {
    m_criterion_id = criterion_id;
    m_criterion_id_isSet = true;
}

bool OAIConversion::is_criterion_id_Set() const{
    return m_criterion_id_isSet;
}

bool OAIConversion::is_criterion_id_Valid() const{
    return m_criterion_id_isValid;
}

QString OAIConversion::getCurrencyCode() const {
    return m_currency_code;
}
void OAIConversion::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIConversion::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIConversion::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QList<OAICustomDimension> OAIConversion::getCustomDimension() const {
    return m_custom_dimension;
}
void OAIConversion::setCustomDimension(const QList<OAICustomDimension> &custom_dimension) {
    m_custom_dimension = custom_dimension;
    m_custom_dimension_isSet = true;
}

bool OAIConversion::is_custom_dimension_Set() const{
    return m_custom_dimension_isSet;
}

bool OAIConversion::is_custom_dimension_Valid() const{
    return m_custom_dimension_isValid;
}

QList<OAICustomMetric> OAIConversion::getCustomMetric() const {
    return m_custom_metric;
}
void OAIConversion::setCustomMetric(const QList<OAICustomMetric> &custom_metric) {
    m_custom_metric = custom_metric;
    m_custom_metric_isSet = true;
}

bool OAIConversion::is_custom_metric_Set() const{
    return m_custom_metric_isSet;
}

bool OAIConversion::is_custom_metric_Valid() const{
    return m_custom_metric_isValid;
}

QString OAIConversion::getCustomerId() const {
    return m_customer_id;
}
void OAIConversion::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIConversion::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIConversion::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAIConversion::getDeviceType() const {
    return m_device_type;
}
void OAIConversion::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIConversion::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIConversion::is_device_type_Valid() const{
    return m_device_type_isValid;
}

QString OAIConversion::getDsConversionId() const {
    return m_ds_conversion_id;
}
void OAIConversion::setDsConversionId(const QString &ds_conversion_id) {
    m_ds_conversion_id = ds_conversion_id;
    m_ds_conversion_id_isSet = true;
}

bool OAIConversion::is_ds_conversion_id_Set() const{
    return m_ds_conversion_id_isSet;
}

bool OAIConversion::is_ds_conversion_id_Valid() const{
    return m_ds_conversion_id_isValid;
}

QString OAIConversion::getEngineAccountId() const {
    return m_engine_account_id;
}
void OAIConversion::setEngineAccountId(const QString &engine_account_id) {
    m_engine_account_id = engine_account_id;
    m_engine_account_id_isSet = true;
}

bool OAIConversion::is_engine_account_id_Set() const{
    return m_engine_account_id_isSet;
}

bool OAIConversion::is_engine_account_id_Valid() const{
    return m_engine_account_id_isValid;
}

QString OAIConversion::getFloodlightOrderId() const {
    return m_floodlight_order_id;
}
void OAIConversion::setFloodlightOrderId(const QString &floodlight_order_id) {
    m_floodlight_order_id = floodlight_order_id;
    m_floodlight_order_id_isSet = true;
}

bool OAIConversion::is_floodlight_order_id_Set() const{
    return m_floodlight_order_id_isSet;
}

bool OAIConversion::is_floodlight_order_id_Valid() const{
    return m_floodlight_order_id_isValid;
}

QString OAIConversion::getInventoryAccountId() const {
    return m_inventory_account_id;
}
void OAIConversion::setInventoryAccountId(const QString &inventory_account_id) {
    m_inventory_account_id = inventory_account_id;
    m_inventory_account_id_isSet = true;
}

bool OAIConversion::is_inventory_account_id_Set() const{
    return m_inventory_account_id_isSet;
}

bool OAIConversion::is_inventory_account_id_Valid() const{
    return m_inventory_account_id_isValid;
}

QString OAIConversion::getProductCountry() const {
    return m_product_country;
}
void OAIConversion::setProductCountry(const QString &product_country) {
    m_product_country = product_country;
    m_product_country_isSet = true;
}

bool OAIConversion::is_product_country_Set() const{
    return m_product_country_isSet;
}

bool OAIConversion::is_product_country_Valid() const{
    return m_product_country_isValid;
}

QString OAIConversion::getProductGroupId() const {
    return m_product_group_id;
}
void OAIConversion::setProductGroupId(const QString &product_group_id) {
    m_product_group_id = product_group_id;
    m_product_group_id_isSet = true;
}

bool OAIConversion::is_product_group_id_Set() const{
    return m_product_group_id_isSet;
}

bool OAIConversion::is_product_group_id_Valid() const{
    return m_product_group_id_isValid;
}

QString OAIConversion::getProductId() const {
    return m_product_id;
}
void OAIConversion::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIConversion::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIConversion::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIConversion::getProductLanguage() const {
    return m_product_language;
}
void OAIConversion::setProductLanguage(const QString &product_language) {
    m_product_language = product_language;
    m_product_language_isSet = true;
}

bool OAIConversion::is_product_language_Set() const{
    return m_product_language_isSet;
}

bool OAIConversion::is_product_language_Valid() const{
    return m_product_language_isValid;
}

QString OAIConversion::getQuantityMillis() const {
    return m_quantity_millis;
}
void OAIConversion::setQuantityMillis(const QString &quantity_millis) {
    m_quantity_millis = quantity_millis;
    m_quantity_millis_isSet = true;
}

bool OAIConversion::is_quantity_millis_Set() const{
    return m_quantity_millis_isSet;
}

bool OAIConversion::is_quantity_millis_Valid() const{
    return m_quantity_millis_isValid;
}

QString OAIConversion::getRevenueMicros() const {
    return m_revenue_micros;
}
void OAIConversion::setRevenueMicros(const QString &revenue_micros) {
    m_revenue_micros = revenue_micros;
    m_revenue_micros_isSet = true;
}

bool OAIConversion::is_revenue_micros_Set() const{
    return m_revenue_micros_isSet;
}

bool OAIConversion::is_revenue_micros_Valid() const{
    return m_revenue_micros_isValid;
}

QString OAIConversion::getSegmentationId() const {
    return m_segmentation_id;
}
void OAIConversion::setSegmentationId(const QString &segmentation_id) {
    m_segmentation_id = segmentation_id;
    m_segmentation_id_isSet = true;
}

bool OAIConversion::is_segmentation_id_Set() const{
    return m_segmentation_id_isSet;
}

bool OAIConversion::is_segmentation_id_Valid() const{
    return m_segmentation_id_isValid;
}

QString OAIConversion::getSegmentationName() const {
    return m_segmentation_name;
}
void OAIConversion::setSegmentationName(const QString &segmentation_name) {
    m_segmentation_name = segmentation_name;
    m_segmentation_name_isSet = true;
}

bool OAIConversion::is_segmentation_name_Set() const{
    return m_segmentation_name_isSet;
}

bool OAIConversion::is_segmentation_name_Valid() const{
    return m_segmentation_name_isValid;
}

QString OAIConversion::getSegmentationType() const {
    return m_segmentation_type;
}
void OAIConversion::setSegmentationType(const QString &segmentation_type) {
    m_segmentation_type = segmentation_type;
    m_segmentation_type_isSet = true;
}

bool OAIConversion::is_segmentation_type_Set() const{
    return m_segmentation_type_isSet;
}

bool OAIConversion::is_segmentation_type_Valid() const{
    return m_segmentation_type_isValid;
}

QString OAIConversion::getState() const {
    return m_state;
}
void OAIConversion::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIConversion::is_state_Set() const{
    return m_state_isSet;
}

bool OAIConversion::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIConversion::getStoreId() const {
    return m_store_id;
}
void OAIConversion::setStoreId(const QString &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAIConversion::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAIConversion::is_store_id_Valid() const{
    return m_store_id_isValid;
}

QString OAIConversion::getType() const {
    return m_type;
}
void OAIConversion::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIConversion::is_type_Set() const{
    return m_type_isSet;
}

bool OAIConversion::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIConversion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_user_data_consent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribution_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversion_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversion_modified_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversion_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_criterion_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_dimension.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_metric.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ds_conversion_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_floodlight_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revenue_micros_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segmentation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
