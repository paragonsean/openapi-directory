/**
 * Search Ads 360 API
 * The Search Ads 360 API allows developers to automate uploading conversions and downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportRequest::OAIReportRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportRequest::OAIReportRequest() {
    this->initializeModel();
}

OAIReportRequest::~OAIReportRequest() {}

void OAIReportRequest::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_download_format_isSet = false;
    m_download_format_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_include_deleted_entities_isSet = false;
    m_include_deleted_entities_isValid = false;

    m_include_removed_entities_isSet = false;
    m_include_removed_entities_isValid = false;

    m_max_rows_per_file_isSet = false;
    m_max_rows_per_file_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_report_scope_isSet = false;
    m_report_scope_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;

    m_row_count_isSet = false;
    m_row_count_isValid = false;

    m_start_row_isSet = false;
    m_start_row_isValid = false;

    m_statistics_currency_isSet = false;
    m_statistics_currency_isValid = false;

    m_time_range_isSet = false;
    m_time_range_isValid = false;

    m_verify_single_time_zone_isSet = false;
    m_verify_single_time_zone_isValid = false;
}

void OAIReportRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportRequest::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_download_format_isValid = ::OpenAPI::fromJsonValue(m_download_format, json[QString("downloadFormat")]);
    m_download_format_isSet = !json[QString("downloadFormat")].isNull() && m_download_format_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_include_deleted_entities_isValid = ::OpenAPI::fromJsonValue(m_include_deleted_entities, json[QString("includeDeletedEntities")]);
    m_include_deleted_entities_isSet = !json[QString("includeDeletedEntities")].isNull() && m_include_deleted_entities_isValid;

    m_include_removed_entities_isValid = ::OpenAPI::fromJsonValue(m_include_removed_entities, json[QString("includeRemovedEntities")]);
    m_include_removed_entities_isSet = !json[QString("includeRemovedEntities")].isNull() && m_include_removed_entities_isValid;

    m_max_rows_per_file_isValid = ::OpenAPI::fromJsonValue(m_max_rows_per_file, json[QString("maxRowsPerFile")]);
    m_max_rows_per_file_isSet = !json[QString("maxRowsPerFile")].isNull() && m_max_rows_per_file_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("orderBy")]);
    m_order_by_isSet = !json[QString("orderBy")].isNull() && m_order_by_isValid;

    m_report_scope_isValid = ::OpenAPI::fromJsonValue(m_report_scope, json[QString("reportScope")]);
    m_report_scope_isSet = !json[QString("reportScope")].isNull() && m_report_scope_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("reportType")]);
    m_report_type_isSet = !json[QString("reportType")].isNull() && m_report_type_isValid;

    m_row_count_isValid = ::OpenAPI::fromJsonValue(m_row_count, json[QString("rowCount")]);
    m_row_count_isSet = !json[QString("rowCount")].isNull() && m_row_count_isValid;

    m_start_row_isValid = ::OpenAPI::fromJsonValue(m_start_row, json[QString("startRow")]);
    m_start_row_isSet = !json[QString("startRow")].isNull() && m_start_row_isValid;

    m_statistics_currency_isValid = ::OpenAPI::fromJsonValue(m_statistics_currency, json[QString("statisticsCurrency")]);
    m_statistics_currency_isSet = !json[QString("statisticsCurrency")].isNull() && m_statistics_currency_isValid;

    m_time_range_isValid = ::OpenAPI::fromJsonValue(m_time_range, json[QString("timeRange")]);
    m_time_range_isSet = !json[QString("timeRange")].isNull() && m_time_range_isValid;

    m_verify_single_time_zone_isValid = ::OpenAPI::fromJsonValue(m_verify_single_time_zone, json[QString("verifySingleTimeZone")]);
    m_verify_single_time_zone_isSet = !json[QString("verifySingleTimeZone")].isNull() && m_verify_single_time_zone_isValid;
}

QString OAIReportRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_download_format_isSet) {
        obj.insert(QString("downloadFormat"), ::OpenAPI::toJsonValue(m_download_format));
    }
    if (m_filters.size() > 0) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_include_deleted_entities_isSet) {
        obj.insert(QString("includeDeletedEntities"), ::OpenAPI::toJsonValue(m_include_deleted_entities));
    }
    if (m_include_removed_entities_isSet) {
        obj.insert(QString("includeRemovedEntities"), ::OpenAPI::toJsonValue(m_include_removed_entities));
    }
    if (m_max_rows_per_file_isSet) {
        obj.insert(QString("maxRowsPerFile"), ::OpenAPI::toJsonValue(m_max_rows_per_file));
    }
    if (m_order_by.size() > 0) {
        obj.insert(QString("orderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    if (m_report_scope.isSet()) {
        obj.insert(QString("reportScope"), ::OpenAPI::toJsonValue(m_report_scope));
    }
    if (m_report_type_isSet) {
        obj.insert(QString("reportType"), ::OpenAPI::toJsonValue(m_report_type));
    }
    if (m_row_count_isSet) {
        obj.insert(QString("rowCount"), ::OpenAPI::toJsonValue(m_row_count));
    }
    if (m_start_row_isSet) {
        obj.insert(QString("startRow"), ::OpenAPI::toJsonValue(m_start_row));
    }
    if (m_statistics_currency_isSet) {
        obj.insert(QString("statisticsCurrency"), ::OpenAPI::toJsonValue(m_statistics_currency));
    }
    if (m_time_range.isSet()) {
        obj.insert(QString("timeRange"), ::OpenAPI::toJsonValue(m_time_range));
    }
    if (m_verify_single_time_zone_isSet) {
        obj.insert(QString("verifySingleTimeZone"), ::OpenAPI::toJsonValue(m_verify_single_time_zone));
    }
    return obj;
}

QList<OAIReportApiColumnSpec> OAIReportRequest::getColumns() const {
    return m_columns;
}
void OAIReportRequest::setColumns(const QList<OAIReportApiColumnSpec> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIReportRequest::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIReportRequest::is_columns_Valid() const{
    return m_columns_isValid;
}

QString OAIReportRequest::getDownloadFormat() const {
    return m_download_format;
}
void OAIReportRequest::setDownloadFormat(const QString &download_format) {
    m_download_format = download_format;
    m_download_format_isSet = true;
}

bool OAIReportRequest::is_download_format_Set() const{
    return m_download_format_isSet;
}

bool OAIReportRequest::is_download_format_Valid() const{
    return m_download_format_isValid;
}

QList<OAIReportRequest_filters_inner> OAIReportRequest::getFilters() const {
    return m_filters;
}
void OAIReportRequest::setFilters(const QList<OAIReportRequest_filters_inner> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIReportRequest::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIReportRequest::is_filters_Valid() const{
    return m_filters_isValid;
}

bool OAIReportRequest::isIncludeDeletedEntities() const {
    return m_include_deleted_entities;
}
void OAIReportRequest::setIncludeDeletedEntities(const bool &include_deleted_entities) {
    m_include_deleted_entities = include_deleted_entities;
    m_include_deleted_entities_isSet = true;
}

bool OAIReportRequest::is_include_deleted_entities_Set() const{
    return m_include_deleted_entities_isSet;
}

bool OAIReportRequest::is_include_deleted_entities_Valid() const{
    return m_include_deleted_entities_isValid;
}

bool OAIReportRequest::isIncludeRemovedEntities() const {
    return m_include_removed_entities;
}
void OAIReportRequest::setIncludeRemovedEntities(const bool &include_removed_entities) {
    m_include_removed_entities = include_removed_entities;
    m_include_removed_entities_isSet = true;
}

bool OAIReportRequest::is_include_removed_entities_Set() const{
    return m_include_removed_entities_isSet;
}

bool OAIReportRequest::is_include_removed_entities_Valid() const{
    return m_include_removed_entities_isValid;
}

qint32 OAIReportRequest::getMaxRowsPerFile() const {
    return m_max_rows_per_file;
}
void OAIReportRequest::setMaxRowsPerFile(const qint32 &max_rows_per_file) {
    m_max_rows_per_file = max_rows_per_file;
    m_max_rows_per_file_isSet = true;
}

bool OAIReportRequest::is_max_rows_per_file_Set() const{
    return m_max_rows_per_file_isSet;
}

bool OAIReportRequest::is_max_rows_per_file_Valid() const{
    return m_max_rows_per_file_isValid;
}

QList<OAIReportRequest_orderBy_inner> OAIReportRequest::getOrderBy() const {
    return m_order_by;
}
void OAIReportRequest::setOrderBy(const QList<OAIReportRequest_orderBy_inner> &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAIReportRequest::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAIReportRequest::is_order_by_Valid() const{
    return m_order_by_isValid;
}

OAIReportRequest_reportScope OAIReportRequest::getReportScope() const {
    return m_report_scope;
}
void OAIReportRequest::setReportScope(const OAIReportRequest_reportScope &report_scope) {
    m_report_scope = report_scope;
    m_report_scope_isSet = true;
}

bool OAIReportRequest::is_report_scope_Set() const{
    return m_report_scope_isSet;
}

bool OAIReportRequest::is_report_scope_Valid() const{
    return m_report_scope_isValid;
}

QString OAIReportRequest::getReportType() const {
    return m_report_type;
}
void OAIReportRequest::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAIReportRequest::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAIReportRequest::is_report_type_Valid() const{
    return m_report_type_isValid;
}

qint32 OAIReportRequest::getRowCount() const {
    return m_row_count;
}
void OAIReportRequest::setRowCount(const qint32 &row_count) {
    m_row_count = row_count;
    m_row_count_isSet = true;
}

bool OAIReportRequest::is_row_count_Set() const{
    return m_row_count_isSet;
}

bool OAIReportRequest::is_row_count_Valid() const{
    return m_row_count_isValid;
}

qint32 OAIReportRequest::getStartRow() const {
    return m_start_row;
}
void OAIReportRequest::setStartRow(const qint32 &start_row) {
    m_start_row = start_row;
    m_start_row_isSet = true;
}

bool OAIReportRequest::is_start_row_Set() const{
    return m_start_row_isSet;
}

bool OAIReportRequest::is_start_row_Valid() const{
    return m_start_row_isValid;
}

QString OAIReportRequest::getStatisticsCurrency() const {
    return m_statistics_currency;
}
void OAIReportRequest::setStatisticsCurrency(const QString &statistics_currency) {
    m_statistics_currency = statistics_currency;
    m_statistics_currency_isSet = true;
}

bool OAIReportRequest::is_statistics_currency_Set() const{
    return m_statistics_currency_isSet;
}

bool OAIReportRequest::is_statistics_currency_Valid() const{
    return m_statistics_currency_isValid;
}

OAIReportRequest_timeRange OAIReportRequest::getTimeRange() const {
    return m_time_range;
}
void OAIReportRequest::setTimeRange(const OAIReportRequest_timeRange &time_range) {
    m_time_range = time_range;
    m_time_range_isSet = true;
}

bool OAIReportRequest::is_time_range_Set() const{
    return m_time_range_isSet;
}

bool OAIReportRequest::is_time_range_Valid() const{
    return m_time_range_isValid;
}

bool OAIReportRequest::isVerifySingleTimeZone() const {
    return m_verify_single_time_zone;
}
void OAIReportRequest::setVerifySingleTimeZone(const bool &verify_single_time_zone) {
    m_verify_single_time_zone = verify_single_time_zone;
    m_verify_single_time_zone_isSet = true;
}

bool OAIReportRequest::is_verify_single_time_zone_Set() const{
    return m_verify_single_time_zone_isSet;
}

bool OAIReportRequest::is_verify_single_time_zone_Valid() const{
    return m_verify_single_time_zone_isValid;
}

bool OAIReportRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_deleted_entities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_removed_entities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_rows_per_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_row_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_single_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
