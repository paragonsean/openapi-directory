/**
 * Search Ads 360 API
 * The Search Ads 360 API allows developers to automate uploading conversions and downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReport::OAIReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReport::OAIReport() {
    this->initializeModel();
}

OAIReport::~OAIReport() {}

void OAIReport::initializeModel() {

    m_files_isSet = false;
    m_files_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_report_ready_isSet = false;
    m_is_report_ready_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;

    m_row_count_isSet = false;
    m_row_count_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_statistics_currency_code_isSet = false;
    m_statistics_currency_code_isValid = false;

    m_statistics_time_zone_isSet = false;
    m_statistics_time_zone_isValid = false;
}

void OAIReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReport::fromJsonObject(QJsonObject json) {

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_report_ready_isValid = ::OpenAPI::fromJsonValue(m_is_report_ready, json[QString("isReportReady")]);
    m_is_report_ready_isSet = !json[QString("isReportReady")].isNull() && m_is_report_ready_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;

    m_row_count_isValid = ::OpenAPI::fromJsonValue(m_row_count, json[QString("rowCount")]);
    m_row_count_isSet = !json[QString("rowCount")].isNull() && m_row_count_isValid;

    if(json["rows"].isArray()){
        auto arr = json["rows"].toArray();
        m_rows_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QJsonValue> item;
                m_rows_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_rows_isSet = !jval.isNull() && m_rows_isValid;
                m_rows.push_back(item);
            }
        }
    }

    m_statistics_currency_code_isValid = ::OpenAPI::fromJsonValue(m_statistics_currency_code, json[QString("statisticsCurrencyCode")]);
    m_statistics_currency_code_isSet = !json[QString("statisticsCurrencyCode")].isNull() && m_statistics_currency_code_isValid;

    m_statistics_time_zone_isValid = ::OpenAPI::fromJsonValue(m_statistics_time_zone, json[QString("statisticsTimeZone")]);
    m_statistics_time_zone_isSet = !json[QString("statisticsTimeZone")].isNull() && m_statistics_time_zone_isValid;
}

QString OAIReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReport::asJsonObject() const {
    QJsonObject obj;
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_report_ready_isSet) {
        obj.insert(QString("isReportReady"), ::OpenAPI::toJsonValue(m_is_report_ready));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_request.isSet()) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_row_count_isSet) {
        obj.insert(QString("rowCount"), ::OpenAPI::toJsonValue(m_row_count));
    }
    if (m_rows.size() > 0) {
        
        obj.insert(QString("rows"), toJsonValue(m_rows));
    }
    if (m_statistics_currency_code_isSet) {
        obj.insert(QString("statisticsCurrencyCode"), ::OpenAPI::toJsonValue(m_statistics_currency_code));
    }
    if (m_statistics_time_zone_isSet) {
        obj.insert(QString("statisticsTimeZone"), ::OpenAPI::toJsonValue(m_statistics_time_zone));
    }
    return obj;
}

QList<OAIReport_files_inner> OAIReport::getFiles() const {
    return m_files;
}
void OAIReport::setFiles(const QList<OAIReport_files_inner> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIReport::is_files_Set() const{
    return m_files_isSet;
}

bool OAIReport::is_files_Valid() const{
    return m_files_isValid;
}

QString OAIReport::getId() const {
    return m_id;
}
void OAIReport::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIReport::is_id_Set() const{
    return m_id_isSet;
}

bool OAIReport::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIReport::isIsReportReady() const {
    return m_is_report_ready;
}
void OAIReport::setIsReportReady(const bool &is_report_ready) {
    m_is_report_ready = is_report_ready;
    m_is_report_ready_isSet = true;
}

bool OAIReport::is_is_report_ready_Set() const{
    return m_is_report_ready_isSet;
}

bool OAIReport::is_is_report_ready_Valid() const{
    return m_is_report_ready_isValid;
}

QString OAIReport::getKind() const {
    return m_kind;
}
void OAIReport::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIReport::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIReport::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIReportRequest OAIReport::getRequest() const {
    return m_request;
}
void OAIReport::setRequest(const OAIReportRequest &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAIReport::is_request_Set() const{
    return m_request_isSet;
}

bool OAIReport::is_request_Valid() const{
    return m_request_isValid;
}

qint32 OAIReport::getRowCount() const {
    return m_row_count;
}
void OAIReport::setRowCount(const qint32 &row_count) {
    m_row_count = row_count;
    m_row_count_isSet = true;
}

bool OAIReport::is_row_count_Set() const{
    return m_row_count_isSet;
}

bool OAIReport::is_row_count_Valid() const{
    return m_row_count_isValid;
}

QList<QMap> OAIReport::getRows() const {
    return m_rows;
}
void OAIReport::setRows(const QList<QMap> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIReport::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIReport::is_rows_Valid() const{
    return m_rows_isValid;
}

QString OAIReport::getStatisticsCurrencyCode() const {
    return m_statistics_currency_code;
}
void OAIReport::setStatisticsCurrencyCode(const QString &statistics_currency_code) {
    m_statistics_currency_code = statistics_currency_code;
    m_statistics_currency_code_isSet = true;
}

bool OAIReport::is_statistics_currency_code_Set() const{
    return m_statistics_currency_code_isSet;
}

bool OAIReport::is_statistics_currency_code_Valid() const{
    return m_statistics_currency_code_isValid;
}

QString OAIReport::getStatisticsTimeZone() const {
    return m_statistics_time_zone;
}
void OAIReport::setStatisticsTimeZone(const QString &statistics_time_zone) {
    m_statistics_time_zone = statistics_time_zone;
    m_statistics_time_zone_isSet = true;
}

bool OAIReport::is_statistics_time_zone_Set() const{
    return m_statistics_time_zone_isSet;
}

bool OAIReport::is_statistics_time_zone_Valid() const{
    return m_statistics_time_zone_isValid;
}

bool OAIReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_report_ready_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
