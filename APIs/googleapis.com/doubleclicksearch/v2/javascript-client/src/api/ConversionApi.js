/**
 * Search Ads 360 API
 * The Search Ads 360 API allows developers to automate uploading conversions and downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConversionList from '../model/ConversionList';
import UpdateAvailabilityRequest from '../model/UpdateAvailabilityRequest';
import UpdateAvailabilityResponse from '../model/UpdateAvailabilityResponse';

/**
* Conversion service.
* @module api/ConversionApi
* @version v2
*/
export default class ConversionApi {

    /**
    * Constructs a new ConversionApi. 
    * @alias module:api/ConversionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the doubleclicksearchConversionGet operation.
     * @callback module:api/ConversionApi~doubleclicksearchConversionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of conversions from a DoubleClick Search engine account.
     * @param {String} agencyId Numeric ID of the agency.
     * @param {String} advertiserId Numeric ID of the advertiser.
     * @param {String} engineAccountId Numeric ID of the engine account.
     * @param {Number} endDate Last date (inclusive) on which to retrieve conversions. Format is yyyymmdd.
     * @param {Number} rowCount The number of conversions to return per call.
     * @param {Number} startDate First date (inclusive) on which to retrieve conversions. Format is yyyymmdd.
     * @param {Number} startRow The 0-based starting index for retrieving conversions results.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [adGroupId] Numeric ID of the ad group.
     * @param {String} [adId] Numeric ID of the ad.
     * @param {String} [campaignId] Numeric ID of the campaign.
     * @param {String} [criterionId] Numeric ID of the criterion.
     * @param {String} [customerId] Customer ID of a client account in the new Search Ads 360 experience.
     * @param {module:api/ConversionApi~doubleclicksearchConversionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversionList}
     */
    doubleclicksearchConversionGet(agencyId, advertiserId, engineAccountId, endDate, rowCount, startDate, startRow, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'agencyId' is set
      if (agencyId === undefined || agencyId === null) {
        throw new Error("Missing the required parameter 'agencyId' when calling doubleclicksearchConversionGet");
      }
      // verify the required parameter 'advertiserId' is set
      if (advertiserId === undefined || advertiserId === null) {
        throw new Error("Missing the required parameter 'advertiserId' when calling doubleclicksearchConversionGet");
      }
      // verify the required parameter 'engineAccountId' is set
      if (engineAccountId === undefined || engineAccountId === null) {
        throw new Error("Missing the required parameter 'engineAccountId' when calling doubleclicksearchConversionGet");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling doubleclicksearchConversionGet");
      }
      // verify the required parameter 'rowCount' is set
      if (rowCount === undefined || rowCount === null) {
        throw new Error("Missing the required parameter 'rowCount' when calling doubleclicksearchConversionGet");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling doubleclicksearchConversionGet");
      }
      // verify the required parameter 'startRow' is set
      if (startRow === undefined || startRow === null) {
        throw new Error("Missing the required parameter 'startRow' when calling doubleclicksearchConversionGet");
      }

      let pathParams = {
        'agencyId': agencyId,
        'advertiserId': advertiserId,
        'engineAccountId': engineAccountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'endDate': endDate,
        'rowCount': rowCount,
        'startDate': startDate,
        'startRow': startRow,
        'adGroupId': opts['adGroupId'],
        'adId': opts['adId'],
        'campaignId': opts['campaignId'],
        'criterionId': opts['criterionId'],
        'customerId': opts['customerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversionList;
      return this.apiClient.callApi(
        '/doubleclicksearch/v2/agency/{agencyId}/advertiser/{advertiserId}/engine/{engineAccountId}/conversion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the doubleclicksearchConversionGetByCustomerId operation.
     * @callback module:api/ConversionApi~doubleclicksearchConversionGetByCustomerIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of conversions from a DoubleClick Search engine account.
     * @param {String} customerId Customer ID of a client account in the new Search Ads 360 experience.
     * @param {Number} endDate Last date (inclusive) on which to retrieve conversions. Format is yyyymmdd.
     * @param {Number} rowCount The number of conversions to return per call.
     * @param {Number} startDate First date (inclusive) on which to retrieve conversions. Format is yyyymmdd.
     * @param {Number} startRow The 0-based starting index for retrieving conversions results.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [adGroupId] Numeric ID of the ad group.
     * @param {String} [adId] Numeric ID of the ad.
     * @param {String} [advertiserId] Numeric ID of the advertiser.
     * @param {String} [agencyId] Numeric ID of the agency.
     * @param {String} [campaignId] Numeric ID of the campaign.
     * @param {String} [criterionId] Numeric ID of the criterion.
     * @param {String} [engineAccountId] Numeric ID of the engine account.
     * @param {module:api/ConversionApi~doubleclicksearchConversionGetByCustomerIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversionList}
     */
    doubleclicksearchConversionGetByCustomerId(customerId, endDate, rowCount, startDate, startRow, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling doubleclicksearchConversionGetByCustomerId");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling doubleclicksearchConversionGetByCustomerId");
      }
      // verify the required parameter 'rowCount' is set
      if (rowCount === undefined || rowCount === null) {
        throw new Error("Missing the required parameter 'rowCount' when calling doubleclicksearchConversionGetByCustomerId");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling doubleclicksearchConversionGetByCustomerId");
      }
      // verify the required parameter 'startRow' is set
      if (startRow === undefined || startRow === null) {
        throw new Error("Missing the required parameter 'startRow' when calling doubleclicksearchConversionGetByCustomerId");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'endDate': endDate,
        'rowCount': rowCount,
        'startDate': startDate,
        'startRow': startRow,
        'adGroupId': opts['adGroupId'],
        'adId': opts['adId'],
        'advertiserId': opts['advertiserId'],
        'agencyId': opts['agencyId'],
        'campaignId': opts['campaignId'],
        'criterionId': opts['criterionId'],
        'engineAccountId': opts['engineAccountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversionList;
      return this.apiClient.callApi(
        '/doubleclicksearch/v2/customer/{customerId}/conversion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the doubleclicksearchConversionInsert operation.
     * @callback module:api/ConversionApi~doubleclicksearchConversionInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inserts a batch of new conversions into DoubleClick Search.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/ConversionList} [conversionList] 
     * @param {module:api/ConversionApi~doubleclicksearchConversionInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversionList}
     */
    doubleclicksearchConversionInsert(opts, callback) {
      opts = opts || {};
      let postBody = opts['conversionList'];

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversionList;
      return this.apiClient.callApi(
        '/doubleclicksearch/v2/conversion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the doubleclicksearchConversionUpdate operation.
     * @callback module:api/ConversionApi~doubleclicksearchConversionUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a batch of conversions in DoubleClick Search.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/ConversionList} [conversionList] 
     * @param {module:api/ConversionApi~doubleclicksearchConversionUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversionList}
     */
    doubleclicksearchConversionUpdate(opts, callback) {
      opts = opts || {};
      let postBody = opts['conversionList'];

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversionList;
      return this.apiClient.callApi(
        '/doubleclicksearch/v2/conversion', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the doubleclicksearchConversionUpdateAvailability operation.
     * @callback module:api/ConversionApi~doubleclicksearchConversionUpdateAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAvailabilityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the availabilities of a batch of floodlight activities in DoubleClick Search.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/UpdateAvailabilityRequest} [updateAvailabilityRequest] 
     * @param {module:api/ConversionApi~doubleclicksearchConversionUpdateAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAvailabilityResponse}
     */
    doubleclicksearchConversionUpdateAvailability(opts, callback) {
      opts = opts || {};
      let postBody = opts['updateAvailabilityRequest'];

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAvailabilityResponse;
      return this.apiClient.callApi(
        '/doubleclicksearch/v2/conversion/updateAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
