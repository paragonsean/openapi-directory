/**
 * Search Ads 360 API
 * The Search Ads 360 API allows developers to automate uploading conversions and downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReportApiColumnSpec from './ReportApiColumnSpec';
import ReportRequestFiltersInner from './ReportRequestFiltersInner';
import ReportRequestOrderByInner from './ReportRequestOrderByInner';
import ReportRequestReportScope from './ReportRequestReportScope';
import ReportRequestTimeRange from './ReportRequestTimeRange';

/**
 * The ReportRequest model module.
 * @module model/ReportRequest
 * @version v2
 */
class ReportRequest {
    /**
     * Constructs a new <code>ReportRequest</code>.
     * A request object used to create a DoubleClick Search report.
     * @alias module:model/ReportRequest
     */
    constructor() { 
        
        ReportRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportRequest} obj Optional instance to populate.
     * @return {module:model/ReportRequest} The populated <code>ReportRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportRequest();

            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], [ReportApiColumnSpec]);
            }
            if (data.hasOwnProperty('downloadFormat')) {
                obj['downloadFormat'] = ApiClient.convertToType(data['downloadFormat'], 'String');
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = ApiClient.convertToType(data['filters'], [ReportRequestFiltersInner]);
            }
            if (data.hasOwnProperty('includeDeletedEntities')) {
                obj['includeDeletedEntities'] = ApiClient.convertToType(data['includeDeletedEntities'], 'Boolean');
            }
            if (data.hasOwnProperty('includeRemovedEntities')) {
                obj['includeRemovedEntities'] = ApiClient.convertToType(data['includeRemovedEntities'], 'Boolean');
            }
            if (data.hasOwnProperty('maxRowsPerFile')) {
                obj['maxRowsPerFile'] = ApiClient.convertToType(data['maxRowsPerFile'], 'Number');
            }
            if (data.hasOwnProperty('orderBy')) {
                obj['orderBy'] = ApiClient.convertToType(data['orderBy'], [ReportRequestOrderByInner]);
            }
            if (data.hasOwnProperty('reportScope')) {
                obj['reportScope'] = ReportRequestReportScope.constructFromObject(data['reportScope']);
            }
            if (data.hasOwnProperty('reportType')) {
                obj['reportType'] = ApiClient.convertToType(data['reportType'], 'String');
            }
            if (data.hasOwnProperty('rowCount')) {
                obj['rowCount'] = ApiClient.convertToType(data['rowCount'], 'Number');
            }
            if (data.hasOwnProperty('startRow')) {
                obj['startRow'] = ApiClient.convertToType(data['startRow'], 'Number');
            }
            if (data.hasOwnProperty('statisticsCurrency')) {
                obj['statisticsCurrency'] = ApiClient.convertToType(data['statisticsCurrency'], 'String');
            }
            if (data.hasOwnProperty('timeRange')) {
                obj['timeRange'] = ReportRequestTimeRange.constructFromObject(data['timeRange']);
            }
            if (data.hasOwnProperty('verifySingleTimeZone')) {
                obj['verifySingleTimeZone'] = ApiClient.convertToType(data['verifySingleTimeZone'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportRequest</code>.
     */
    static validateJSON(data) {
        if (data['columns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['columns'])) {
                throw new Error("Expected the field `columns` to be an array in the JSON data but got " + data['columns']);
            }
            // validate the optional field `columns` (array)
            for (const item of data['columns']) {
                ReportApiColumnSpec.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['downloadFormat'] && !(typeof data['downloadFormat'] === 'string' || data['downloadFormat'] instanceof String)) {
            throw new Error("Expected the field `downloadFormat` to be a primitive type in the JSON string but got " + data['downloadFormat']);
        }
        if (data['filters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filters'])) {
                throw new Error("Expected the field `filters` to be an array in the JSON data but got " + data['filters']);
            }
            // validate the optional field `filters` (array)
            for (const item of data['filters']) {
                ReportRequestFiltersInner.validateJSON(item);
            };
        }
        if (data['orderBy']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['orderBy'])) {
                throw new Error("Expected the field `orderBy` to be an array in the JSON data but got " + data['orderBy']);
            }
            // validate the optional field `orderBy` (array)
            for (const item of data['orderBy']) {
                ReportRequestOrderByInner.validateJSON(item);
            };
        }
        // validate the optional field `reportScope`
        if (data['reportScope']) { // data not null
          ReportRequestReportScope.validateJSON(data['reportScope']);
        }
        // ensure the json data is a string
        if (data['reportType'] && !(typeof data['reportType'] === 'string' || data['reportType'] instanceof String)) {
            throw new Error("Expected the field `reportType` to be a primitive type in the JSON string but got " + data['reportType']);
        }
        // ensure the json data is a string
        if (data['statisticsCurrency'] && !(typeof data['statisticsCurrency'] === 'string' || data['statisticsCurrency'] instanceof String)) {
            throw new Error("Expected the field `statisticsCurrency` to be a primitive type in the JSON string but got " + data['statisticsCurrency']);
        }
        // validate the optional field `timeRange`
        if (data['timeRange']) { // data not null
          ReportRequestTimeRange.validateJSON(data['timeRange']);
        }

        return true;
    }


}



/**
 * The columns to include in the report. This includes both DoubleClick Search columns and saved columns. For DoubleClick Search columns, only the `columnName` parameter is required. For saved columns only the `savedColumnName` parameter is required. Both `columnName` and `savedColumnName` cannot be set in the same stanza.\\ The maximum number of columns per request is 300.
 * @member {Array.<module:model/ReportApiColumnSpec>} columns
 */
ReportRequest.prototype['columns'] = undefined;

/**
 * Format that the report should be returned in. Currently `csv` or `tsv` is supported.
 * @member {String} downloadFormat
 */
ReportRequest.prototype['downloadFormat'] = undefined;

/**
 * A list of filters to be applied to the report.\\ The maximum number of filters per request is 300.
 * @member {Array.<module:model/ReportRequestFiltersInner>} filters
 */
ReportRequest.prototype['filters'] = undefined;

/**
 * Determines if removed entities should be included in the report. Defaults to `false`. Deprecated, please use `includeRemovedEntities` instead.
 * @member {Boolean} includeDeletedEntities
 */
ReportRequest.prototype['includeDeletedEntities'] = undefined;

/**
 * Determines if removed entities should be included in the report. Defaults to `false`.
 * @member {Boolean} includeRemovedEntities
 */
ReportRequest.prototype['includeRemovedEntities'] = undefined;

/**
 * Asynchronous report only. The maximum number of rows per report file. A large report is split into many files based on this field. Acceptable values are `1000000` to `100000000`, inclusive.
 * @member {Number} maxRowsPerFile
 */
ReportRequest.prototype['maxRowsPerFile'] = undefined;

/**
 * Synchronous report only. A list of columns and directions defining sorting to be performed on the report rows.\\ The maximum number of orderings per request is 300.
 * @member {Array.<module:model/ReportRequestOrderByInner>} orderBy
 */
ReportRequest.prototype['orderBy'] = undefined;

/**
 * @member {module:model/ReportRequestReportScope} reportScope
 */
ReportRequest.prototype['reportScope'] = undefined;

/**
 * Determines the type of rows that are returned in the report. For example, if you specify `reportType: keyword`, each row in the report will contain data about a keyword. See the [Types of Reports](/search-ads/v2/report-types/) reference for the columns that are available for each type.
 * @member {String} reportType
 */
ReportRequest.prototype['reportType'] = undefined;

/**
 * Synchronous report only. The maximum number of rows to return; additional rows are dropped. Acceptable values are `0` to `10000`, inclusive. Defaults to `10000`.
 * @member {Number} rowCount
 */
ReportRequest.prototype['rowCount'] = undefined;

/**
 * Synchronous report only. Zero-based index of the first row to return. Acceptable values are `0` to `50000`, inclusive. Defaults to `0`.
 * @member {Number} startRow
 */
ReportRequest.prototype['startRow'] = undefined;

/**
 * Specifies the currency in which monetary will be returned. Possible values are: `usd`, `agency` (valid if the report is scoped to agency or lower), `advertiser` (valid if the report is scoped to * advertiser or lower), or `account` (valid if the report is scoped to engine account or lower).
 * @member {String} statisticsCurrency
 */
ReportRequest.prototype['statisticsCurrency'] = undefined;

/**
 * @member {module:model/ReportRequestTimeRange} timeRange
 */
ReportRequest.prototype['timeRange'] = undefined;

/**
 * If `true`, the report would only be created if all the requested stat data are sourced from a single timezone. Defaults to `false`.
 * @member {Boolean} verifySingleTimeZone
 */
ReportRequest.prototype['verifySingleTimeZone'] = undefined;






export default ReportRequest;

