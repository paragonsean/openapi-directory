/**
 * Search Ads 360 API
 * The Search Ads 360 API allows developers to automate uploading conversions and downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomDimension from './CustomDimension';
import CustomMetric from './CustomMetric';

/**
 * The Conversion model module.
 * @module model/Conversion
 * @version v2
 */
class Conversion {
    /**
     * Constructs a new <code>Conversion</code>.
     * A conversion containing data relevant to DoubleClick Search.
     * @alias module:model/Conversion
     */
    constructor() { 
        
        Conversion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Conversion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Conversion} obj Optional instance to populate.
     * @return {module:model/Conversion} The populated <code>Conversion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Conversion();

            if (data.hasOwnProperty('adGroupId')) {
                obj['adGroupId'] = ApiClient.convertToType(data['adGroupId'], 'String');
            }
            if (data.hasOwnProperty('adId')) {
                obj['adId'] = ApiClient.convertToType(data['adId'], 'String');
            }
            if (data.hasOwnProperty('adUserDataConsent')) {
                obj['adUserDataConsent'] = ApiClient.convertToType(data['adUserDataConsent'], 'String');
            }
            if (data.hasOwnProperty('advertiserId')) {
                obj['advertiserId'] = ApiClient.convertToType(data['advertiserId'], 'String');
            }
            if (data.hasOwnProperty('agencyId')) {
                obj['agencyId'] = ApiClient.convertToType(data['agencyId'], 'String');
            }
            if (data.hasOwnProperty('attributionModel')) {
                obj['attributionModel'] = ApiClient.convertToType(data['attributionModel'], 'String');
            }
            if (data.hasOwnProperty('campaignId')) {
                obj['campaignId'] = ApiClient.convertToType(data['campaignId'], 'String');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('clickId')) {
                obj['clickId'] = ApiClient.convertToType(data['clickId'], 'String');
            }
            if (data.hasOwnProperty('conversionId')) {
                obj['conversionId'] = ApiClient.convertToType(data['conversionId'], 'String');
            }
            if (data.hasOwnProperty('conversionModifiedTimestamp')) {
                obj['conversionModifiedTimestamp'] = ApiClient.convertToType(data['conversionModifiedTimestamp'], 'String');
            }
            if (data.hasOwnProperty('conversionTimestamp')) {
                obj['conversionTimestamp'] = ApiClient.convertToType(data['conversionTimestamp'], 'String');
            }
            if (data.hasOwnProperty('countMillis')) {
                obj['countMillis'] = ApiClient.convertToType(data['countMillis'], 'String');
            }
            if (data.hasOwnProperty('criterionId')) {
                obj['criterionId'] = ApiClient.convertToType(data['criterionId'], 'String');
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('customDimension')) {
                obj['customDimension'] = ApiClient.convertToType(data['customDimension'], [CustomDimension]);
            }
            if (data.hasOwnProperty('customMetric')) {
                obj['customMetric'] = ApiClient.convertToType(data['customMetric'], [CustomMetric]);
            }
            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('deviceType')) {
                obj['deviceType'] = ApiClient.convertToType(data['deviceType'], 'String');
            }
            if (data.hasOwnProperty('dsConversionId')) {
                obj['dsConversionId'] = ApiClient.convertToType(data['dsConversionId'], 'String');
            }
            if (data.hasOwnProperty('engineAccountId')) {
                obj['engineAccountId'] = ApiClient.convertToType(data['engineAccountId'], 'String');
            }
            if (data.hasOwnProperty('floodlightOrderId')) {
                obj['floodlightOrderId'] = ApiClient.convertToType(data['floodlightOrderId'], 'String');
            }
            if (data.hasOwnProperty('inventoryAccountId')) {
                obj['inventoryAccountId'] = ApiClient.convertToType(data['inventoryAccountId'], 'String');
            }
            if (data.hasOwnProperty('productCountry')) {
                obj['productCountry'] = ApiClient.convertToType(data['productCountry'], 'String');
            }
            if (data.hasOwnProperty('productGroupId')) {
                obj['productGroupId'] = ApiClient.convertToType(data['productGroupId'], 'String');
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
            }
            if (data.hasOwnProperty('productLanguage')) {
                obj['productLanguage'] = ApiClient.convertToType(data['productLanguage'], 'String');
            }
            if (data.hasOwnProperty('quantityMillis')) {
                obj['quantityMillis'] = ApiClient.convertToType(data['quantityMillis'], 'String');
            }
            if (data.hasOwnProperty('revenueMicros')) {
                obj['revenueMicros'] = ApiClient.convertToType(data['revenueMicros'], 'String');
            }
            if (data.hasOwnProperty('segmentationId')) {
                obj['segmentationId'] = ApiClient.convertToType(data['segmentationId'], 'String');
            }
            if (data.hasOwnProperty('segmentationName')) {
                obj['segmentationName'] = ApiClient.convertToType(data['segmentationName'], 'String');
            }
            if (data.hasOwnProperty('segmentationType')) {
                obj['segmentationType'] = ApiClient.convertToType(data['segmentationType'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('storeId')) {
                obj['storeId'] = ApiClient.convertToType(data['storeId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Conversion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Conversion</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['adGroupId'] && !(typeof data['adGroupId'] === 'string' || data['adGroupId'] instanceof String)) {
            throw new Error("Expected the field `adGroupId` to be a primitive type in the JSON string but got " + data['adGroupId']);
        }
        // ensure the json data is a string
        if (data['adId'] && !(typeof data['adId'] === 'string' || data['adId'] instanceof String)) {
            throw new Error("Expected the field `adId` to be a primitive type in the JSON string but got " + data['adId']);
        }
        // ensure the json data is a string
        if (data['adUserDataConsent'] && !(typeof data['adUserDataConsent'] === 'string' || data['adUserDataConsent'] instanceof String)) {
            throw new Error("Expected the field `adUserDataConsent` to be a primitive type in the JSON string but got " + data['adUserDataConsent']);
        }
        // ensure the json data is a string
        if (data['advertiserId'] && !(typeof data['advertiserId'] === 'string' || data['advertiserId'] instanceof String)) {
            throw new Error("Expected the field `advertiserId` to be a primitive type in the JSON string but got " + data['advertiserId']);
        }
        // ensure the json data is a string
        if (data['agencyId'] && !(typeof data['agencyId'] === 'string' || data['agencyId'] instanceof String)) {
            throw new Error("Expected the field `agencyId` to be a primitive type in the JSON string but got " + data['agencyId']);
        }
        // ensure the json data is a string
        if (data['attributionModel'] && !(typeof data['attributionModel'] === 'string' || data['attributionModel'] instanceof String)) {
            throw new Error("Expected the field `attributionModel` to be a primitive type in the JSON string but got " + data['attributionModel']);
        }
        // ensure the json data is a string
        if (data['campaignId'] && !(typeof data['campaignId'] === 'string' || data['campaignId'] instanceof String)) {
            throw new Error("Expected the field `campaignId` to be a primitive type in the JSON string but got " + data['campaignId']);
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // ensure the json data is a string
        if (data['clickId'] && !(typeof data['clickId'] === 'string' || data['clickId'] instanceof String)) {
            throw new Error("Expected the field `clickId` to be a primitive type in the JSON string but got " + data['clickId']);
        }
        // ensure the json data is a string
        if (data['conversionId'] && !(typeof data['conversionId'] === 'string' || data['conversionId'] instanceof String)) {
            throw new Error("Expected the field `conversionId` to be a primitive type in the JSON string but got " + data['conversionId']);
        }
        // ensure the json data is a string
        if (data['conversionModifiedTimestamp'] && !(typeof data['conversionModifiedTimestamp'] === 'string' || data['conversionModifiedTimestamp'] instanceof String)) {
            throw new Error("Expected the field `conversionModifiedTimestamp` to be a primitive type in the JSON string but got " + data['conversionModifiedTimestamp']);
        }
        // ensure the json data is a string
        if (data['conversionTimestamp'] && !(typeof data['conversionTimestamp'] === 'string' || data['conversionTimestamp'] instanceof String)) {
            throw new Error("Expected the field `conversionTimestamp` to be a primitive type in the JSON string but got " + data['conversionTimestamp']);
        }
        // ensure the json data is a string
        if (data['countMillis'] && !(typeof data['countMillis'] === 'string' || data['countMillis'] instanceof String)) {
            throw new Error("Expected the field `countMillis` to be a primitive type in the JSON string but got " + data['countMillis']);
        }
        // ensure the json data is a string
        if (data['criterionId'] && !(typeof data['criterionId'] === 'string' || data['criterionId'] instanceof String)) {
            throw new Error("Expected the field `criterionId` to be a primitive type in the JSON string but got " + data['criterionId']);
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        if (data['customDimension']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customDimension'])) {
                throw new Error("Expected the field `customDimension` to be an array in the JSON data but got " + data['customDimension']);
            }
            // validate the optional field `customDimension` (array)
            for (const item of data['customDimension']) {
                CustomDimension.validateJSON(item);
            };
        }
        if (data['customMetric']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customMetric'])) {
                throw new Error("Expected the field `customMetric` to be an array in the JSON data but got " + data['customMetric']);
            }
            // validate the optional field `customMetric` (array)
            for (const item of data['customMetric']) {
                CustomMetric.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // ensure the json data is a string
        if (data['deviceType'] && !(typeof data['deviceType'] === 'string' || data['deviceType'] instanceof String)) {
            throw new Error("Expected the field `deviceType` to be a primitive type in the JSON string but got " + data['deviceType']);
        }
        // ensure the json data is a string
        if (data['dsConversionId'] && !(typeof data['dsConversionId'] === 'string' || data['dsConversionId'] instanceof String)) {
            throw new Error("Expected the field `dsConversionId` to be a primitive type in the JSON string but got " + data['dsConversionId']);
        }
        // ensure the json data is a string
        if (data['engineAccountId'] && !(typeof data['engineAccountId'] === 'string' || data['engineAccountId'] instanceof String)) {
            throw new Error("Expected the field `engineAccountId` to be a primitive type in the JSON string but got " + data['engineAccountId']);
        }
        // ensure the json data is a string
        if (data['floodlightOrderId'] && !(typeof data['floodlightOrderId'] === 'string' || data['floodlightOrderId'] instanceof String)) {
            throw new Error("Expected the field `floodlightOrderId` to be a primitive type in the JSON string but got " + data['floodlightOrderId']);
        }
        // ensure the json data is a string
        if (data['inventoryAccountId'] && !(typeof data['inventoryAccountId'] === 'string' || data['inventoryAccountId'] instanceof String)) {
            throw new Error("Expected the field `inventoryAccountId` to be a primitive type in the JSON string but got " + data['inventoryAccountId']);
        }
        // ensure the json data is a string
        if (data['productCountry'] && !(typeof data['productCountry'] === 'string' || data['productCountry'] instanceof String)) {
            throw new Error("Expected the field `productCountry` to be a primitive type in the JSON string but got " + data['productCountry']);
        }
        // ensure the json data is a string
        if (data['productGroupId'] && !(typeof data['productGroupId'] === 'string' || data['productGroupId'] instanceof String)) {
            throw new Error("Expected the field `productGroupId` to be a primitive type in the JSON string but got " + data['productGroupId']);
        }
        // ensure the json data is a string
        if (data['productId'] && !(typeof data['productId'] === 'string' || data['productId'] instanceof String)) {
            throw new Error("Expected the field `productId` to be a primitive type in the JSON string but got " + data['productId']);
        }
        // ensure the json data is a string
        if (data['productLanguage'] && !(typeof data['productLanguage'] === 'string' || data['productLanguage'] instanceof String)) {
            throw new Error("Expected the field `productLanguage` to be a primitive type in the JSON string but got " + data['productLanguage']);
        }
        // ensure the json data is a string
        if (data['quantityMillis'] && !(typeof data['quantityMillis'] === 'string' || data['quantityMillis'] instanceof String)) {
            throw new Error("Expected the field `quantityMillis` to be a primitive type in the JSON string but got " + data['quantityMillis']);
        }
        // ensure the json data is a string
        if (data['revenueMicros'] && !(typeof data['revenueMicros'] === 'string' || data['revenueMicros'] instanceof String)) {
            throw new Error("Expected the field `revenueMicros` to be a primitive type in the JSON string but got " + data['revenueMicros']);
        }
        // ensure the json data is a string
        if (data['segmentationId'] && !(typeof data['segmentationId'] === 'string' || data['segmentationId'] instanceof String)) {
            throw new Error("Expected the field `segmentationId` to be a primitive type in the JSON string but got " + data['segmentationId']);
        }
        // ensure the json data is a string
        if (data['segmentationName'] && !(typeof data['segmentationName'] === 'string' || data['segmentationName'] instanceof String)) {
            throw new Error("Expected the field `segmentationName` to be a primitive type in the JSON string but got " + data['segmentationName']);
        }
        // ensure the json data is a string
        if (data['segmentationType'] && !(typeof data['segmentationType'] === 'string' || data['segmentationType'] instanceof String)) {
            throw new Error("Expected the field `segmentationType` to be a primitive type in the JSON string but got " + data['segmentationType']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['storeId'] && !(typeof data['storeId'] === 'string' || data['storeId'] instanceof String)) {
            throw new Error("Expected the field `storeId` to be a primitive type in the JSON string but got " + data['storeId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * DS ad group ID.
 * @member {String} adGroupId
 */
Conversion.prototype['adGroupId'] = undefined;

/**
 * DS ad ID.
 * @member {String} adId
 */
Conversion.prototype['adId'] = undefined;

/**
 * Represents consent for core platform services (CPS) preferences in settings. No default value. Acceptable values are: GRANTED: The desired consent status is to grant. Read the CPS preferences from GTE settings. DENIED: The desired consent status is to deny; CPS list is empty.
 * @member {module:model/Conversion.AdUserDataConsentEnum} adUserDataConsent
 */
Conversion.prototype['adUserDataConsent'] = undefined;

/**
 * DS advertiser ID.
 * @member {String} advertiserId
 */
Conversion.prototype['advertiserId'] = undefined;

/**
 * DS agency ID.
 * @member {String} agencyId
 */
Conversion.prototype['agencyId'] = undefined;

/**
 * Available to advertisers only after contacting DoubleClick Search customer support.
 * @member {String} attributionModel
 */
Conversion.prototype['attributionModel'] = undefined;

/**
 * DS campaign ID.
 * @member {String} campaignId
 */
Conversion.prototype['campaignId'] = undefined;

/**
 * Sales channel for the product. Acceptable values are: - \"`local`\": a physical store - \"`online`\": an online store 
 * @member {String} channel
 */
Conversion.prototype['channel'] = undefined;

/**
 * DS click ID for the conversion.
 * @member {String} clickId
 */
Conversion.prototype['clickId'] = undefined;

/**
 * For offline conversions, advertisers provide this ID. Advertisers can specify any ID that is meaningful to them. Each conversion in a request must specify a unique ID, and the combination of ID and timestamp must be unique amongst all conversions within the advertiser. For online conversions, DS copies the `dsConversionId` or `floodlightOrderId` into this property depending on the advertiser's Floodlight instructions.
 * @member {String} conversionId
 */
Conversion.prototype['conversionId'] = undefined;

/**
 * The time at which the conversion was last modified, in epoch millis UTC.
 * @member {String} conversionModifiedTimestamp
 */
Conversion.prototype['conversionModifiedTimestamp'] = undefined;

/**
 * The time at which the conversion took place, in epoch millis UTC.
 * @member {String} conversionTimestamp
 */
Conversion.prototype['conversionTimestamp'] = undefined;

/**
 * Available to advertisers only after contacting DoubleClick Search customer support.
 * @member {String} countMillis
 */
Conversion.prototype['countMillis'] = undefined;

/**
 * DS criterion (keyword) ID.
 * @member {String} criterionId
 */
Conversion.prototype['criterionId'] = undefined;

/**
 * The currency code for the conversion's revenue. Should be in ISO 4217 alphabetic (3-char) format.
 * @member {String} currencyCode
 */
Conversion.prototype['currencyCode'] = undefined;

/**
 * Custom dimensions for the conversion, which can be used to filter data in a report.
 * @member {Array.<module:model/CustomDimension>} customDimension
 */
Conversion.prototype['customDimension'] = undefined;

/**
 * Custom metrics for the conversion.
 * @member {Array.<module:model/CustomMetric>} customMetric
 */
Conversion.prototype['customMetric'] = undefined;

/**
 * Customer ID of a client account in the new Search Ads 360 experience.
 * @member {String} customerId
 */
Conversion.prototype['customerId'] = undefined;

/**
 * The type of device on which the conversion occurred.
 * @member {String} deviceType
 */
Conversion.prototype['deviceType'] = undefined;

/**
 * ID that DoubleClick Search generates for each conversion.
 * @member {String} dsConversionId
 */
Conversion.prototype['dsConversionId'] = undefined;

/**
 * DS engine account ID.
 * @member {String} engineAccountId
 */
Conversion.prototype['engineAccountId'] = undefined;

/**
 * The Floodlight order ID provided by the advertiser for the conversion.
 * @member {String} floodlightOrderId
 */
Conversion.prototype['floodlightOrderId'] = undefined;

/**
 * ID that DS generates and uses to uniquely identify the inventory account that contains the product.
 * @member {String} inventoryAccountId
 */
Conversion.prototype['inventoryAccountId'] = undefined;

/**
 * The country registered for the Merchant Center feed that contains the product. Use an ISO 3166 code to specify a country.
 * @member {String} productCountry
 */
Conversion.prototype['productCountry'] = undefined;

/**
 * DS product group ID.
 * @member {String} productGroupId
 */
Conversion.prototype['productGroupId'] = undefined;

/**
 * The product ID (SKU).
 * @member {String} productId
 */
Conversion.prototype['productId'] = undefined;

/**
 * The language registered for the Merchant Center feed that contains the product. Use an ISO 639 code to specify a language.
 * @member {String} productLanguage
 */
Conversion.prototype['productLanguage'] = undefined;

/**
 * The quantity of this conversion, in millis.
 * @member {String} quantityMillis
 */
Conversion.prototype['quantityMillis'] = undefined;

/**
 * The revenue amount of this `TRANSACTION` conversion, in micros (value multiplied by 1000000, no decimal). For example, to specify a revenue value of \"10\" enter \"10000000\" (10 million) in your request.
 * @member {String} revenueMicros
 */
Conversion.prototype['revenueMicros'] = undefined;

/**
 * The numeric segmentation identifier (for example, DoubleClick Search Floodlight activity ID).
 * @member {String} segmentationId
 */
Conversion.prototype['segmentationId'] = undefined;

/**
 * The friendly segmentation identifier (for example, DoubleClick Search Floodlight activity name).
 * @member {String} segmentationName
 */
Conversion.prototype['segmentationName'] = undefined;

/**
 * The segmentation type of this conversion (for example, `FLOODLIGHT`).
 * @member {String} segmentationType
 */
Conversion.prototype['segmentationType'] = undefined;

/**
 * The state of the conversion, that is, either `ACTIVE` or `REMOVED`. Note: state DELETED is deprecated.
 * @member {String} state
 */
Conversion.prototype['state'] = undefined;

/**
 * The ID of the local store for which the product was advertised. Applicable only when the channel is \"`local`\".
 * @member {String} storeId
 */
Conversion.prototype['storeId'] = undefined;

/**
 * The type of the conversion, that is, either `ACTION` or `TRANSACTION`. An `ACTION` conversion is an action by the user that has no monetarily quantifiable value, while a `TRANSACTION` conversion is an action that does have a monetarily quantifiable value. Examples are email list signups (`ACTION`) versus ecommerce purchases (`TRANSACTION`).
 * @member {String} type
 */
Conversion.prototype['type'] = undefined;





/**
 * Allowed values for the <code>adUserDataConsent</code> property.
 * @enum {String}
 * @readonly
 */
Conversion['AdUserDataConsentEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "GRANTED"
     * @const
     */
    "GRANTED": "GRANTED",

    /**
     * value: "DENIED"
     * @const
     */
    "DENIED": "DENIED"
};



export default Conversion;

