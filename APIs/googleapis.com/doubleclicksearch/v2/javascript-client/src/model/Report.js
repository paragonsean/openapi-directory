/**
 * Search Ads 360 API
 * The Search Ads 360 API allows developers to automate uploading conversions and downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReportFilesInner from './ReportFilesInner';
import ReportRequest from './ReportRequest';

/**
 * The Report model module.
 * @module model/Report
 * @version v2
 */
class Report {
    /**
     * Constructs a new <code>Report</code>.
     * A DoubleClick Search report. This object contains the report request, some report metadata such as currency code, and the generated report rows or report files.
     * @alias module:model/Report
     */
    constructor() { 
        
        Report.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Report</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Report} obj Optional instance to populate.
     * @return {module:model/Report} The populated <code>Report</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Report();

            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], [ReportFilesInner]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isReportReady')) {
                obj['isReportReady'] = ApiClient.convertToType(data['isReportReady'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('request')) {
                obj['request'] = ReportRequest.constructFromObject(data['request']);
            }
            if (data.hasOwnProperty('rowCount')) {
                obj['rowCount'] = ApiClient.convertToType(data['rowCount'], 'Number');
            }
            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], [Object]);
            }
            if (data.hasOwnProperty('statisticsCurrencyCode')) {
                obj['statisticsCurrencyCode'] = ApiClient.convertToType(data['statisticsCurrencyCode'], 'String');
            }
            if (data.hasOwnProperty('statisticsTimeZone')) {
                obj['statisticsTimeZone'] = ApiClient.convertToType(data['statisticsTimeZone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Report</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Report</code>.
     */
    static validateJSON(data) {
        if (data['files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['files'])) {
                throw new Error("Expected the field `files` to be an array in the JSON data but got " + data['files']);
            }
            // validate the optional field `files` (array)
            for (const item of data['files']) {
                ReportFilesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `request`
        if (data['request']) { // data not null
          ReportRequest.validateJSON(data['request']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['rows'])) {
            throw new Error("Expected the field `rows` to be an array in the JSON data but got " + data['rows']);
        }
        // ensure the json data is a string
        if (data['statisticsCurrencyCode'] && !(typeof data['statisticsCurrencyCode'] === 'string' || data['statisticsCurrencyCode'] instanceof String)) {
            throw new Error("Expected the field `statisticsCurrencyCode` to be a primitive type in the JSON string but got " + data['statisticsCurrencyCode']);
        }
        // ensure the json data is a string
        if (data['statisticsTimeZone'] && !(typeof data['statisticsTimeZone'] === 'string' || data['statisticsTimeZone'] instanceof String)) {
            throw new Error("Expected the field `statisticsTimeZone` to be a primitive type in the JSON string but got " + data['statisticsTimeZone']);
        }

        return true;
    }


}



/**
 * Asynchronous report only. Contains a list of generated report files once the report has successfully completed.
 * @member {Array.<module:model/ReportFilesInner>} files
 */
Report.prototype['files'] = undefined;

/**
 * Asynchronous report only. Id of the report.
 * @member {String} id
 */
Report.prototype['id'] = undefined;

/**
 * Asynchronous report only. True if and only if the report has completed successfully and the report files are ready to be downloaded.
 * @member {Boolean} isReportReady
 */
Report.prototype['isReportReady'] = undefined;

/**
 * Identifies this as a Report resource. Value: the fixed string `doubleclicksearch#report`.
 * @member {String} kind
 */
Report.prototype['kind'] = undefined;

/**
 * @member {module:model/ReportRequest} request
 */
Report.prototype['request'] = undefined;

/**
 * The number of report rows generated by the report, not including headers.
 * @member {Number} rowCount
 */
Report.prototype['rowCount'] = undefined;

/**
 * Synchronous report only. Generated report rows.
 * @member {Array.<Object.<String, Object>>} rows
 */
Report.prototype['rows'] = undefined;

/**
 * The currency code of all monetary values produced in the report, including values that are set by users (e.g., keyword bid settings) and metrics (e.g., cost and revenue). The currency code of a report is determined by the `statisticsCurrency` field of the report request.
 * @member {String} statisticsCurrencyCode
 */
Report.prototype['statisticsCurrencyCode'] = undefined;

/**
 * If all statistics of the report are sourced from the same time zone, this would be it. Otherwise the field is unset.
 * @member {String} statisticsTimeZone
 */
Report.prototype['statisticsTimeZone'] = undefined;






export default Report;

