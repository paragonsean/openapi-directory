/**
 * Search Ads 360 API
 * The Search Ads 360 API allows developers to automate uploading conversions and downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Availability model module.
 * @module model/Availability
 * @version v2
 */
class Availability {
    /**
     * Constructs a new <code>Availability</code>.
     * A message containing availability data relevant to DoubleClick Search.
     * @alias module:model/Availability
     */
    constructor() { 
        
        Availability.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Availability</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Availability} obj Optional instance to populate.
     * @return {module:model/Availability} The populated <code>Availability</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Availability();

            if (data.hasOwnProperty('advertiserId')) {
                obj['advertiserId'] = ApiClient.convertToType(data['advertiserId'], 'String');
            }
            if (data.hasOwnProperty('agencyId')) {
                obj['agencyId'] = ApiClient.convertToType(data['agencyId'], 'String');
            }
            if (data.hasOwnProperty('availabilityTimestamp')) {
                obj['availabilityTimestamp'] = ApiClient.convertToType(data['availabilityTimestamp'], 'String');
            }
            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('segmentationId')) {
                obj['segmentationId'] = ApiClient.convertToType(data['segmentationId'], 'String');
            }
            if (data.hasOwnProperty('segmentationName')) {
                obj['segmentationName'] = ApiClient.convertToType(data['segmentationName'], 'String');
            }
            if (data.hasOwnProperty('segmentationType')) {
                obj['segmentationType'] = ApiClient.convertToType(data['segmentationType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Availability</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Availability</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['advertiserId'] && !(typeof data['advertiserId'] === 'string' || data['advertiserId'] instanceof String)) {
            throw new Error("Expected the field `advertiserId` to be a primitive type in the JSON string but got " + data['advertiserId']);
        }
        // ensure the json data is a string
        if (data['agencyId'] && !(typeof data['agencyId'] === 'string' || data['agencyId'] instanceof String)) {
            throw new Error("Expected the field `agencyId` to be a primitive type in the JSON string but got " + data['agencyId']);
        }
        // ensure the json data is a string
        if (data['availabilityTimestamp'] && !(typeof data['availabilityTimestamp'] === 'string' || data['availabilityTimestamp'] instanceof String)) {
            throw new Error("Expected the field `availabilityTimestamp` to be a primitive type in the JSON string but got " + data['availabilityTimestamp']);
        }
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // ensure the json data is a string
        if (data['segmentationId'] && !(typeof data['segmentationId'] === 'string' || data['segmentationId'] instanceof String)) {
            throw new Error("Expected the field `segmentationId` to be a primitive type in the JSON string but got " + data['segmentationId']);
        }
        // ensure the json data is a string
        if (data['segmentationName'] && !(typeof data['segmentationName'] === 'string' || data['segmentationName'] instanceof String)) {
            throw new Error("Expected the field `segmentationName` to be a primitive type in the JSON string but got " + data['segmentationName']);
        }
        // ensure the json data is a string
        if (data['segmentationType'] && !(typeof data['segmentationType'] === 'string' || data['segmentationType'] instanceof String)) {
            throw new Error("Expected the field `segmentationType` to be a primitive type in the JSON string but got " + data['segmentationType']);
        }

        return true;
    }


}



/**
 * DS advertiser ID.
 * @member {String} advertiserId
 */
Availability.prototype['advertiserId'] = undefined;

/**
 * DS agency ID.
 * @member {String} agencyId
 */
Availability.prototype['agencyId'] = undefined;

/**
 * The time by which all conversions have been uploaded, in epoch millis UTC.
 * @member {String} availabilityTimestamp
 */
Availability.prototype['availabilityTimestamp'] = undefined;

/**
 * Customer ID of a client account in the new Search Ads 360 experience.
 * @member {String} customerId
 */
Availability.prototype['customerId'] = undefined;

/**
 * The numeric segmentation identifier (for example, DoubleClick Search Floodlight activity ID).
 * @member {String} segmentationId
 */
Availability.prototype['segmentationId'] = undefined;

/**
 * The friendly segmentation identifier (for example, DoubleClick Search Floodlight activity name).
 * @member {String} segmentationName
 */
Availability.prototype['segmentationName'] = undefined;

/**
 * The segmentation type that this availability is for (its default value is `FLOODLIGHT`).
 * @member {String} segmentationType
 */
Availability.prototype['segmentationType'] = undefined;






export default Availability;

