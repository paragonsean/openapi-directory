/*
 * Search Ads 360 API
 * The Search Ads 360 API allows developers to automate uploading conversions and downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ReportFilesInner;
import org.openapitools.client.model.ReportRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A DoubleClick Search report. This object contains the report request, some report metadata such as currency code, and the generated report rows or report files.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:25.520985-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Report {
  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<ReportFilesInner> files = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_REPORT_READY = "isReportReady";
  @SerializedName(SERIALIZED_NAME_IS_REPORT_READY)
  private Boolean isReportReady;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private ReportRequest request;

  public static final String SERIALIZED_NAME_ROW_COUNT = "rowCount";
  @SerializedName(SERIALIZED_NAME_ROW_COUNT)
  private Integer rowCount;

  public static final String SERIALIZED_NAME_ROWS = "rows";
  @SerializedName(SERIALIZED_NAME_ROWS)
  private List<Map<String, Object>> rows = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATISTICS_CURRENCY_CODE = "statisticsCurrencyCode";
  @SerializedName(SERIALIZED_NAME_STATISTICS_CURRENCY_CODE)
  private String statisticsCurrencyCode;

  public static final String SERIALIZED_NAME_STATISTICS_TIME_ZONE = "statisticsTimeZone";
  @SerializedName(SERIALIZED_NAME_STATISTICS_TIME_ZONE)
  private String statisticsTimeZone;

  public Report() {
  }

  public Report files(List<ReportFilesInner> files) {
    this.files = files;
    return this;
  }

  public Report addFilesItem(ReportFilesInner filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

  /**
   * Asynchronous report only. Contains a list of generated report files once the report has successfully completed.
   * @return files
   */
  @javax.annotation.Nullable
  public List<ReportFilesInner> getFiles() {
    return files;
  }

  public void setFiles(List<ReportFilesInner> files) {
    this.files = files;
  }


  public Report id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Asynchronous report only. Id of the report.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Report isReportReady(Boolean isReportReady) {
    this.isReportReady = isReportReady;
    return this;
  }

  /**
   * Asynchronous report only. True if and only if the report has completed successfully and the report files are ready to be downloaded.
   * @return isReportReady
   */
  @javax.annotation.Nullable
  public Boolean getIsReportReady() {
    return isReportReady;
  }

  public void setIsReportReady(Boolean isReportReady) {
    this.isReportReady = isReportReady;
  }


  public Report kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies this as a Report resource. Value: the fixed string &#x60;doubleclicksearch#report&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Report request(ReportRequest request) {
    this.request = request;
    return this;
  }

  /**
   * Get request
   * @return request
   */
  @javax.annotation.Nullable
  public ReportRequest getRequest() {
    return request;
  }

  public void setRequest(ReportRequest request) {
    this.request = request;
  }


  public Report rowCount(Integer rowCount) {
    this.rowCount = rowCount;
    return this;
  }

  /**
   * The number of report rows generated by the report, not including headers.
   * @return rowCount
   */
  @javax.annotation.Nullable
  public Integer getRowCount() {
    return rowCount;
  }

  public void setRowCount(Integer rowCount) {
    this.rowCount = rowCount;
  }


  public Report rows(List<Map<String, Object>> rows) {
    this.rows = rows;
    return this;
  }

  public Report addRowsItem(Map<String, Object> rowsItem) {
    if (this.rows == null) {
      this.rows = new ArrayList<>();
    }
    this.rows.add(rowsItem);
    return this;
  }

  /**
   * Synchronous report only. Generated report rows.
   * @return rows
   */
  @javax.annotation.Nullable
  public List<Map<String, Object>> getRows() {
    return rows;
  }

  public void setRows(List<Map<String, Object>> rows) {
    this.rows = rows;
  }


  public Report statisticsCurrencyCode(String statisticsCurrencyCode) {
    this.statisticsCurrencyCode = statisticsCurrencyCode;
    return this;
  }

  /**
   * The currency code of all monetary values produced in the report, including values that are set by users (e.g., keyword bid settings) and metrics (e.g., cost and revenue). The currency code of a report is determined by the &#x60;statisticsCurrency&#x60; field of the report request.
   * @return statisticsCurrencyCode
   */
  @javax.annotation.Nullable
  public String getStatisticsCurrencyCode() {
    return statisticsCurrencyCode;
  }

  public void setStatisticsCurrencyCode(String statisticsCurrencyCode) {
    this.statisticsCurrencyCode = statisticsCurrencyCode;
  }


  public Report statisticsTimeZone(String statisticsTimeZone) {
    this.statisticsTimeZone = statisticsTimeZone;
    return this;
  }

  /**
   * If all statistics of the report are sourced from the same time zone, this would be it. Otherwise the field is unset.
   * @return statisticsTimeZone
   */
  @javax.annotation.Nullable
  public String getStatisticsTimeZone() {
    return statisticsTimeZone;
  }

  public void setStatisticsTimeZone(String statisticsTimeZone) {
    this.statisticsTimeZone = statisticsTimeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Report report = (Report) o;
    return Objects.equals(this.files, report.files) &&
        Objects.equals(this.id, report.id) &&
        Objects.equals(this.isReportReady, report.isReportReady) &&
        Objects.equals(this.kind, report.kind) &&
        Objects.equals(this.request, report.request) &&
        Objects.equals(this.rowCount, report.rowCount) &&
        Objects.equals(this.rows, report.rows) &&
        Objects.equals(this.statisticsCurrencyCode, report.statisticsCurrencyCode) &&
        Objects.equals(this.statisticsTimeZone, report.statisticsTimeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(files, id, isReportReady, kind, request, rowCount, rows, statisticsCurrencyCode, statisticsTimeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Report {\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isReportReady: ").append(toIndentedString(isReportReady)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    rowCount: ").append(toIndentedString(rowCount)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    statisticsCurrencyCode: ").append(toIndentedString(statisticsCurrencyCode)).append("\n");
    sb.append("    statisticsTimeZone: ").append(toIndentedString(statisticsTimeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("files");
    openapiFields.add("id");
    openapiFields.add("isReportReady");
    openapiFields.add("kind");
    openapiFields.add("request");
    openapiFields.add("rowCount");
    openapiFields.add("rows");
    openapiFields.add("statisticsCurrencyCode");
    openapiFields.add("statisticsTimeZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Report
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Report.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Report is not found in the empty JSON string", Report.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Report.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Report` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
        if (jsonArrayfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
          }

          // validate the optional field `files` (array)
          for (int i = 0; i < jsonArrayfiles.size(); i++) {
            ReportFilesInner.validateJsonElement(jsonArrayfiles.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `request`
      if (jsonObj.get("request") != null && !jsonObj.get("request").isJsonNull()) {
        ReportRequest.validateJsonElement(jsonObj.get("request"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rows") != null && !jsonObj.get("rows").isJsonNull() && !jsonObj.get("rows").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rows` to be an array in the JSON string but got `%s`", jsonObj.get("rows").toString()));
      }
      if ((jsonObj.get("statisticsCurrencyCode") != null && !jsonObj.get("statisticsCurrencyCode").isJsonNull()) && !jsonObj.get("statisticsCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statisticsCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statisticsCurrencyCode").toString()));
      }
      if ((jsonObj.get("statisticsTimeZone") != null && !jsonObj.get("statisticsTimeZone").isJsonNull()) && !jsonObj.get("statisticsTimeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statisticsTimeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statisticsTimeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Report.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Report' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Report> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Report.class));

       return (TypeAdapter<T>) new TypeAdapter<Report>() {
           @Override
           public void write(JsonWriter out, Report value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Report read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Report given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Report
   * @throws IOException if the JSON string is invalid with respect to Report
   */
  public static Report fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Report.class);
  }

  /**
   * Convert an instance of Report to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

