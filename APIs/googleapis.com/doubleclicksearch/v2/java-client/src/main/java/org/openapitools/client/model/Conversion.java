/*
 * Search Ads 360 API
 * The Search Ads 360 API allows developers to automate uploading conversions and downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CustomDimension;
import org.openapitools.client.model.CustomMetric;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A conversion containing data relevant to DoubleClick Search.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:25.520985-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Conversion {
  public static final String SERIALIZED_NAME_AD_GROUP_ID = "adGroupId";
  @SerializedName(SERIALIZED_NAME_AD_GROUP_ID)
  private String adGroupId;

  public static final String SERIALIZED_NAME_AD_ID = "adId";
  @SerializedName(SERIALIZED_NAME_AD_ID)
  private String adId;

  /**
   * Represents consent for core platform services (CPS) preferences in settings. No default value. Acceptable values are: GRANTED: The desired consent status is to grant. Read the CPS preferences from GTE settings. DENIED: The desired consent status is to deny; CPS list is empty.
   */
  @JsonAdapter(AdUserDataConsentEnum.Adapter.class)
  public enum AdUserDataConsentEnum {
    UNKNOWN("UNKNOWN"),
    
    GRANTED("GRANTED"),
    
    DENIED("DENIED");

    private String value;

    AdUserDataConsentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdUserDataConsentEnum fromValue(String value) {
      for (AdUserDataConsentEnum b : AdUserDataConsentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdUserDataConsentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdUserDataConsentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdUserDataConsentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdUserDataConsentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdUserDataConsentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AD_USER_DATA_CONSENT = "adUserDataConsent";
  @SerializedName(SERIALIZED_NAME_AD_USER_DATA_CONSENT)
  private AdUserDataConsentEnum adUserDataConsent;

  public static final String SERIALIZED_NAME_ADVERTISER_ID = "advertiserId";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID)
  private String advertiserId;

  public static final String SERIALIZED_NAME_AGENCY_ID = "agencyId";
  @SerializedName(SERIALIZED_NAME_AGENCY_ID)
  private String agencyId;

  public static final String SERIALIZED_NAME_ATTRIBUTION_MODEL = "attributionModel";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTION_MODEL)
  private String attributionModel;

  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "campaignId";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private String campaignId;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public static final String SERIALIZED_NAME_CLICK_ID = "clickId";
  @SerializedName(SERIALIZED_NAME_CLICK_ID)
  private String clickId;

  public static final String SERIALIZED_NAME_CONVERSION_ID = "conversionId";
  @SerializedName(SERIALIZED_NAME_CONVERSION_ID)
  private String conversionId;

  public static final String SERIALIZED_NAME_CONVERSION_MODIFIED_TIMESTAMP = "conversionModifiedTimestamp";
  @SerializedName(SERIALIZED_NAME_CONVERSION_MODIFIED_TIMESTAMP)
  private String conversionModifiedTimestamp;

  public static final String SERIALIZED_NAME_CONVERSION_TIMESTAMP = "conversionTimestamp";
  @SerializedName(SERIALIZED_NAME_CONVERSION_TIMESTAMP)
  private String conversionTimestamp;

  public static final String SERIALIZED_NAME_COUNT_MILLIS = "countMillis";
  @SerializedName(SERIALIZED_NAME_COUNT_MILLIS)
  private String countMillis;

  public static final String SERIALIZED_NAME_CRITERION_ID = "criterionId";
  @SerializedName(SERIALIZED_NAME_CRITERION_ID)
  private String criterionId;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_CUSTOM_DIMENSION = "customDimension";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DIMENSION)
  private List<CustomDimension> customDimension = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_METRIC = "customMetric";
  @SerializedName(SERIALIZED_NAME_CUSTOM_METRIC)
  private List<CustomMetric> customMetric = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "deviceType";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private String deviceType;

  public static final String SERIALIZED_NAME_DS_CONVERSION_ID = "dsConversionId";
  @SerializedName(SERIALIZED_NAME_DS_CONVERSION_ID)
  private String dsConversionId;

  public static final String SERIALIZED_NAME_ENGINE_ACCOUNT_ID = "engineAccountId";
  @SerializedName(SERIALIZED_NAME_ENGINE_ACCOUNT_ID)
  private String engineAccountId;

  public static final String SERIALIZED_NAME_FLOODLIGHT_ORDER_ID = "floodlightOrderId";
  @SerializedName(SERIALIZED_NAME_FLOODLIGHT_ORDER_ID)
  private String floodlightOrderId;

  public static final String SERIALIZED_NAME_INVENTORY_ACCOUNT_ID = "inventoryAccountId";
  @SerializedName(SERIALIZED_NAME_INVENTORY_ACCOUNT_ID)
  private String inventoryAccountId;

  public static final String SERIALIZED_NAME_PRODUCT_COUNTRY = "productCountry";
  @SerializedName(SERIALIZED_NAME_PRODUCT_COUNTRY)
  private String productCountry;

  public static final String SERIALIZED_NAME_PRODUCT_GROUP_ID = "productGroupId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_GROUP_ID)
  private String productGroupId;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_PRODUCT_LANGUAGE = "productLanguage";
  @SerializedName(SERIALIZED_NAME_PRODUCT_LANGUAGE)
  private String productLanguage;

  public static final String SERIALIZED_NAME_QUANTITY_MILLIS = "quantityMillis";
  @SerializedName(SERIALIZED_NAME_QUANTITY_MILLIS)
  private String quantityMillis;

  public static final String SERIALIZED_NAME_REVENUE_MICROS = "revenueMicros";
  @SerializedName(SERIALIZED_NAME_REVENUE_MICROS)
  private String revenueMicros;

  public static final String SERIALIZED_NAME_SEGMENTATION_ID = "segmentationId";
  @SerializedName(SERIALIZED_NAME_SEGMENTATION_ID)
  private String segmentationId;

  public static final String SERIALIZED_NAME_SEGMENTATION_NAME = "segmentationName";
  @SerializedName(SERIALIZED_NAME_SEGMENTATION_NAME)
  private String segmentationName;

  public static final String SERIALIZED_NAME_SEGMENTATION_TYPE = "segmentationType";
  @SerializedName(SERIALIZED_NAME_SEGMENTATION_TYPE)
  private String segmentationType;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STORE_ID = "storeId";
  @SerializedName(SERIALIZED_NAME_STORE_ID)
  private String storeId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Conversion() {
  }

  public Conversion adGroupId(String adGroupId) {
    this.adGroupId = adGroupId;
    return this;
  }

  /**
   * DS ad group ID.
   * @return adGroupId
   */
  @javax.annotation.Nullable
  public String getAdGroupId() {
    return adGroupId;
  }

  public void setAdGroupId(String adGroupId) {
    this.adGroupId = adGroupId;
  }


  public Conversion adId(String adId) {
    this.adId = adId;
    return this;
  }

  /**
   * DS ad ID.
   * @return adId
   */
  @javax.annotation.Nullable
  public String getAdId() {
    return adId;
  }

  public void setAdId(String adId) {
    this.adId = adId;
  }


  public Conversion adUserDataConsent(AdUserDataConsentEnum adUserDataConsent) {
    this.adUserDataConsent = adUserDataConsent;
    return this;
  }

  /**
   * Represents consent for core platform services (CPS) preferences in settings. No default value. Acceptable values are: GRANTED: The desired consent status is to grant. Read the CPS preferences from GTE settings. DENIED: The desired consent status is to deny; CPS list is empty.
   * @return adUserDataConsent
   */
  @javax.annotation.Nullable
  public AdUserDataConsentEnum getAdUserDataConsent() {
    return adUserDataConsent;
  }

  public void setAdUserDataConsent(AdUserDataConsentEnum adUserDataConsent) {
    this.adUserDataConsent = adUserDataConsent;
  }


  public Conversion advertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
    return this;
  }

  /**
   * DS advertiser ID.
   * @return advertiserId
   */
  @javax.annotation.Nullable
  public String getAdvertiserId() {
    return advertiserId;
  }

  public void setAdvertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
  }


  public Conversion agencyId(String agencyId) {
    this.agencyId = agencyId;
    return this;
  }

  /**
   * DS agency ID.
   * @return agencyId
   */
  @javax.annotation.Nullable
  public String getAgencyId() {
    return agencyId;
  }

  public void setAgencyId(String agencyId) {
    this.agencyId = agencyId;
  }


  public Conversion attributionModel(String attributionModel) {
    this.attributionModel = attributionModel;
    return this;
  }

  /**
   * Available to advertisers only after contacting DoubleClick Search customer support.
   * @return attributionModel
   */
  @javax.annotation.Nullable
  public String getAttributionModel() {
    return attributionModel;
  }

  public void setAttributionModel(String attributionModel) {
    this.attributionModel = attributionModel;
  }


  public Conversion campaignId(String campaignId) {
    this.campaignId = campaignId;
    return this;
  }

  /**
   * DS campaign ID.
   * @return campaignId
   */
  @javax.annotation.Nullable
  public String getCampaignId() {
    return campaignId;
  }

  public void setCampaignId(String campaignId) {
    this.campaignId = campaignId;
  }


  public Conversion channel(String channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Sales channel for the product. Acceptable values are: - \&quot;&#x60;local&#x60;\&quot;: a physical store - \&quot;&#x60;online&#x60;\&quot;: an online store 
   * @return channel
   */
  @javax.annotation.Nullable
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public Conversion clickId(String clickId) {
    this.clickId = clickId;
    return this;
  }

  /**
   * DS click ID for the conversion.
   * @return clickId
   */
  @javax.annotation.Nullable
  public String getClickId() {
    return clickId;
  }

  public void setClickId(String clickId) {
    this.clickId = clickId;
  }


  public Conversion conversionId(String conversionId) {
    this.conversionId = conversionId;
    return this;
  }

  /**
   * For offline conversions, advertisers provide this ID. Advertisers can specify any ID that is meaningful to them. Each conversion in a request must specify a unique ID, and the combination of ID and timestamp must be unique amongst all conversions within the advertiser. For online conversions, DS copies the &#x60;dsConversionId&#x60; or &#x60;floodlightOrderId&#x60; into this property depending on the advertiser&#39;s Floodlight instructions.
   * @return conversionId
   */
  @javax.annotation.Nullable
  public String getConversionId() {
    return conversionId;
  }

  public void setConversionId(String conversionId) {
    this.conversionId = conversionId;
  }


  public Conversion conversionModifiedTimestamp(String conversionModifiedTimestamp) {
    this.conversionModifiedTimestamp = conversionModifiedTimestamp;
    return this;
  }

  /**
   * The time at which the conversion was last modified, in epoch millis UTC.
   * @return conversionModifiedTimestamp
   */
  @javax.annotation.Nullable
  public String getConversionModifiedTimestamp() {
    return conversionModifiedTimestamp;
  }

  public void setConversionModifiedTimestamp(String conversionModifiedTimestamp) {
    this.conversionModifiedTimestamp = conversionModifiedTimestamp;
  }


  public Conversion conversionTimestamp(String conversionTimestamp) {
    this.conversionTimestamp = conversionTimestamp;
    return this;
  }

  /**
   * The time at which the conversion took place, in epoch millis UTC.
   * @return conversionTimestamp
   */
  @javax.annotation.Nullable
  public String getConversionTimestamp() {
    return conversionTimestamp;
  }

  public void setConversionTimestamp(String conversionTimestamp) {
    this.conversionTimestamp = conversionTimestamp;
  }


  public Conversion countMillis(String countMillis) {
    this.countMillis = countMillis;
    return this;
  }

  /**
   * Available to advertisers only after contacting DoubleClick Search customer support.
   * @return countMillis
   */
  @javax.annotation.Nullable
  public String getCountMillis() {
    return countMillis;
  }

  public void setCountMillis(String countMillis) {
    this.countMillis = countMillis;
  }


  public Conversion criterionId(String criterionId) {
    this.criterionId = criterionId;
    return this;
  }

  /**
   * DS criterion (keyword) ID.
   * @return criterionId
   */
  @javax.annotation.Nullable
  public String getCriterionId() {
    return criterionId;
  }

  public void setCriterionId(String criterionId) {
    this.criterionId = criterionId;
  }


  public Conversion currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The currency code for the conversion&#39;s revenue. Should be in ISO 4217 alphabetic (3-char) format.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public Conversion customDimension(List<CustomDimension> customDimension) {
    this.customDimension = customDimension;
    return this;
  }

  public Conversion addCustomDimensionItem(CustomDimension customDimensionItem) {
    if (this.customDimension == null) {
      this.customDimension = new ArrayList<>();
    }
    this.customDimension.add(customDimensionItem);
    return this;
  }

  /**
   * Custom dimensions for the conversion, which can be used to filter data in a report.
   * @return customDimension
   */
  @javax.annotation.Nullable
  public List<CustomDimension> getCustomDimension() {
    return customDimension;
  }

  public void setCustomDimension(List<CustomDimension> customDimension) {
    this.customDimension = customDimension;
  }


  public Conversion customMetric(List<CustomMetric> customMetric) {
    this.customMetric = customMetric;
    return this;
  }

  public Conversion addCustomMetricItem(CustomMetric customMetricItem) {
    if (this.customMetric == null) {
      this.customMetric = new ArrayList<>();
    }
    this.customMetric.add(customMetricItem);
    return this;
  }

  /**
   * Custom metrics for the conversion.
   * @return customMetric
   */
  @javax.annotation.Nullable
  public List<CustomMetric> getCustomMetric() {
    return customMetric;
  }

  public void setCustomMetric(List<CustomMetric> customMetric) {
    this.customMetric = customMetric;
  }


  public Conversion customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Customer ID of a client account in the new Search Ads 360 experience.
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public Conversion deviceType(String deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  /**
   * The type of device on which the conversion occurred.
   * @return deviceType
   */
  @javax.annotation.Nullable
  public String getDeviceType() {
    return deviceType;
  }

  public void setDeviceType(String deviceType) {
    this.deviceType = deviceType;
  }


  public Conversion dsConversionId(String dsConversionId) {
    this.dsConversionId = dsConversionId;
    return this;
  }

  /**
   * ID that DoubleClick Search generates for each conversion.
   * @return dsConversionId
   */
  @javax.annotation.Nullable
  public String getDsConversionId() {
    return dsConversionId;
  }

  public void setDsConversionId(String dsConversionId) {
    this.dsConversionId = dsConversionId;
  }


  public Conversion engineAccountId(String engineAccountId) {
    this.engineAccountId = engineAccountId;
    return this;
  }

  /**
   * DS engine account ID.
   * @return engineAccountId
   */
  @javax.annotation.Nullable
  public String getEngineAccountId() {
    return engineAccountId;
  }

  public void setEngineAccountId(String engineAccountId) {
    this.engineAccountId = engineAccountId;
  }


  public Conversion floodlightOrderId(String floodlightOrderId) {
    this.floodlightOrderId = floodlightOrderId;
    return this;
  }

  /**
   * The Floodlight order ID provided by the advertiser for the conversion.
   * @return floodlightOrderId
   */
  @javax.annotation.Nullable
  public String getFloodlightOrderId() {
    return floodlightOrderId;
  }

  public void setFloodlightOrderId(String floodlightOrderId) {
    this.floodlightOrderId = floodlightOrderId;
  }


  public Conversion inventoryAccountId(String inventoryAccountId) {
    this.inventoryAccountId = inventoryAccountId;
    return this;
  }

  /**
   * ID that DS generates and uses to uniquely identify the inventory account that contains the product.
   * @return inventoryAccountId
   */
  @javax.annotation.Nullable
  public String getInventoryAccountId() {
    return inventoryAccountId;
  }

  public void setInventoryAccountId(String inventoryAccountId) {
    this.inventoryAccountId = inventoryAccountId;
  }


  public Conversion productCountry(String productCountry) {
    this.productCountry = productCountry;
    return this;
  }

  /**
   * The country registered for the Merchant Center feed that contains the product. Use an ISO 3166 code to specify a country.
   * @return productCountry
   */
  @javax.annotation.Nullable
  public String getProductCountry() {
    return productCountry;
  }

  public void setProductCountry(String productCountry) {
    this.productCountry = productCountry;
  }


  public Conversion productGroupId(String productGroupId) {
    this.productGroupId = productGroupId;
    return this;
  }

  /**
   * DS product group ID.
   * @return productGroupId
   */
  @javax.annotation.Nullable
  public String getProductGroupId() {
    return productGroupId;
  }

  public void setProductGroupId(String productGroupId) {
    this.productGroupId = productGroupId;
  }


  public Conversion productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * The product ID (SKU).
   * @return productId
   */
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public Conversion productLanguage(String productLanguage) {
    this.productLanguage = productLanguage;
    return this;
  }

  /**
   * The language registered for the Merchant Center feed that contains the product. Use an ISO 639 code to specify a language.
   * @return productLanguage
   */
  @javax.annotation.Nullable
  public String getProductLanguage() {
    return productLanguage;
  }

  public void setProductLanguage(String productLanguage) {
    this.productLanguage = productLanguage;
  }


  public Conversion quantityMillis(String quantityMillis) {
    this.quantityMillis = quantityMillis;
    return this;
  }

  /**
   * The quantity of this conversion, in millis.
   * @return quantityMillis
   */
  @javax.annotation.Nullable
  public String getQuantityMillis() {
    return quantityMillis;
  }

  public void setQuantityMillis(String quantityMillis) {
    this.quantityMillis = quantityMillis;
  }


  public Conversion revenueMicros(String revenueMicros) {
    this.revenueMicros = revenueMicros;
    return this;
  }

  /**
   * The revenue amount of this &#x60;TRANSACTION&#x60; conversion, in micros (value multiplied by 1000000, no decimal). For example, to specify a revenue value of \&quot;10\&quot; enter \&quot;10000000\&quot; (10 million) in your request.
   * @return revenueMicros
   */
  @javax.annotation.Nullable
  public String getRevenueMicros() {
    return revenueMicros;
  }

  public void setRevenueMicros(String revenueMicros) {
    this.revenueMicros = revenueMicros;
  }


  public Conversion segmentationId(String segmentationId) {
    this.segmentationId = segmentationId;
    return this;
  }

  /**
   * The numeric segmentation identifier (for example, DoubleClick Search Floodlight activity ID).
   * @return segmentationId
   */
  @javax.annotation.Nullable
  public String getSegmentationId() {
    return segmentationId;
  }

  public void setSegmentationId(String segmentationId) {
    this.segmentationId = segmentationId;
  }


  public Conversion segmentationName(String segmentationName) {
    this.segmentationName = segmentationName;
    return this;
  }

  /**
   * The friendly segmentation identifier (for example, DoubleClick Search Floodlight activity name).
   * @return segmentationName
   */
  @javax.annotation.Nullable
  public String getSegmentationName() {
    return segmentationName;
  }

  public void setSegmentationName(String segmentationName) {
    this.segmentationName = segmentationName;
  }


  public Conversion segmentationType(String segmentationType) {
    this.segmentationType = segmentationType;
    return this;
  }

  /**
   * The segmentation type of this conversion (for example, &#x60;FLOODLIGHT&#x60;).
   * @return segmentationType
   */
  @javax.annotation.Nullable
  public String getSegmentationType() {
    return segmentationType;
  }

  public void setSegmentationType(String segmentationType) {
    this.segmentationType = segmentationType;
  }


  public Conversion state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The state of the conversion, that is, either &#x60;ACTIVE&#x60; or &#x60;REMOVED&#x60;. Note: state DELETED is deprecated.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Conversion storeId(String storeId) {
    this.storeId = storeId;
    return this;
  }

  /**
   * The ID of the local store for which the product was advertised. Applicable only when the channel is \&quot;&#x60;local&#x60;\&quot;.
   * @return storeId
   */
  @javax.annotation.Nullable
  public String getStoreId() {
    return storeId;
  }

  public void setStoreId(String storeId) {
    this.storeId = storeId;
  }


  public Conversion type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the conversion, that is, either &#x60;ACTION&#x60; or &#x60;TRANSACTION&#x60;. An &#x60;ACTION&#x60; conversion is an action by the user that has no monetarily quantifiable value, while a &#x60;TRANSACTION&#x60; conversion is an action that does have a monetarily quantifiable value. Examples are email list signups (&#x60;ACTION&#x60;) versus ecommerce purchases (&#x60;TRANSACTION&#x60;).
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Conversion conversion = (Conversion) o;
    return Objects.equals(this.adGroupId, conversion.adGroupId) &&
        Objects.equals(this.adId, conversion.adId) &&
        Objects.equals(this.adUserDataConsent, conversion.adUserDataConsent) &&
        Objects.equals(this.advertiserId, conversion.advertiserId) &&
        Objects.equals(this.agencyId, conversion.agencyId) &&
        Objects.equals(this.attributionModel, conversion.attributionModel) &&
        Objects.equals(this.campaignId, conversion.campaignId) &&
        Objects.equals(this.channel, conversion.channel) &&
        Objects.equals(this.clickId, conversion.clickId) &&
        Objects.equals(this.conversionId, conversion.conversionId) &&
        Objects.equals(this.conversionModifiedTimestamp, conversion.conversionModifiedTimestamp) &&
        Objects.equals(this.conversionTimestamp, conversion.conversionTimestamp) &&
        Objects.equals(this.countMillis, conversion.countMillis) &&
        Objects.equals(this.criterionId, conversion.criterionId) &&
        Objects.equals(this.currencyCode, conversion.currencyCode) &&
        Objects.equals(this.customDimension, conversion.customDimension) &&
        Objects.equals(this.customMetric, conversion.customMetric) &&
        Objects.equals(this.customerId, conversion.customerId) &&
        Objects.equals(this.deviceType, conversion.deviceType) &&
        Objects.equals(this.dsConversionId, conversion.dsConversionId) &&
        Objects.equals(this.engineAccountId, conversion.engineAccountId) &&
        Objects.equals(this.floodlightOrderId, conversion.floodlightOrderId) &&
        Objects.equals(this.inventoryAccountId, conversion.inventoryAccountId) &&
        Objects.equals(this.productCountry, conversion.productCountry) &&
        Objects.equals(this.productGroupId, conversion.productGroupId) &&
        Objects.equals(this.productId, conversion.productId) &&
        Objects.equals(this.productLanguage, conversion.productLanguage) &&
        Objects.equals(this.quantityMillis, conversion.quantityMillis) &&
        Objects.equals(this.revenueMicros, conversion.revenueMicros) &&
        Objects.equals(this.segmentationId, conversion.segmentationId) &&
        Objects.equals(this.segmentationName, conversion.segmentationName) &&
        Objects.equals(this.segmentationType, conversion.segmentationType) &&
        Objects.equals(this.state, conversion.state) &&
        Objects.equals(this.storeId, conversion.storeId) &&
        Objects.equals(this.type, conversion.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adGroupId, adId, adUserDataConsent, advertiserId, agencyId, attributionModel, campaignId, channel, clickId, conversionId, conversionModifiedTimestamp, conversionTimestamp, countMillis, criterionId, currencyCode, customDimension, customMetric, customerId, deviceType, dsConversionId, engineAccountId, floodlightOrderId, inventoryAccountId, productCountry, productGroupId, productId, productLanguage, quantityMillis, revenueMicros, segmentationId, segmentationName, segmentationType, state, storeId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Conversion {\n");
    sb.append("    adGroupId: ").append(toIndentedString(adGroupId)).append("\n");
    sb.append("    adId: ").append(toIndentedString(adId)).append("\n");
    sb.append("    adUserDataConsent: ").append(toIndentedString(adUserDataConsent)).append("\n");
    sb.append("    advertiserId: ").append(toIndentedString(advertiserId)).append("\n");
    sb.append("    agencyId: ").append(toIndentedString(agencyId)).append("\n");
    sb.append("    attributionModel: ").append(toIndentedString(attributionModel)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    clickId: ").append(toIndentedString(clickId)).append("\n");
    sb.append("    conversionId: ").append(toIndentedString(conversionId)).append("\n");
    sb.append("    conversionModifiedTimestamp: ").append(toIndentedString(conversionModifiedTimestamp)).append("\n");
    sb.append("    conversionTimestamp: ").append(toIndentedString(conversionTimestamp)).append("\n");
    sb.append("    countMillis: ").append(toIndentedString(countMillis)).append("\n");
    sb.append("    criterionId: ").append(toIndentedString(criterionId)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    customDimension: ").append(toIndentedString(customDimension)).append("\n");
    sb.append("    customMetric: ").append(toIndentedString(customMetric)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    dsConversionId: ").append(toIndentedString(dsConversionId)).append("\n");
    sb.append("    engineAccountId: ").append(toIndentedString(engineAccountId)).append("\n");
    sb.append("    floodlightOrderId: ").append(toIndentedString(floodlightOrderId)).append("\n");
    sb.append("    inventoryAccountId: ").append(toIndentedString(inventoryAccountId)).append("\n");
    sb.append("    productCountry: ").append(toIndentedString(productCountry)).append("\n");
    sb.append("    productGroupId: ").append(toIndentedString(productGroupId)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productLanguage: ").append(toIndentedString(productLanguage)).append("\n");
    sb.append("    quantityMillis: ").append(toIndentedString(quantityMillis)).append("\n");
    sb.append("    revenueMicros: ").append(toIndentedString(revenueMicros)).append("\n");
    sb.append("    segmentationId: ").append(toIndentedString(segmentationId)).append("\n");
    sb.append("    segmentationName: ").append(toIndentedString(segmentationName)).append("\n");
    sb.append("    segmentationType: ").append(toIndentedString(segmentationType)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adGroupId");
    openapiFields.add("adId");
    openapiFields.add("adUserDataConsent");
    openapiFields.add("advertiserId");
    openapiFields.add("agencyId");
    openapiFields.add("attributionModel");
    openapiFields.add("campaignId");
    openapiFields.add("channel");
    openapiFields.add("clickId");
    openapiFields.add("conversionId");
    openapiFields.add("conversionModifiedTimestamp");
    openapiFields.add("conversionTimestamp");
    openapiFields.add("countMillis");
    openapiFields.add("criterionId");
    openapiFields.add("currencyCode");
    openapiFields.add("customDimension");
    openapiFields.add("customMetric");
    openapiFields.add("customerId");
    openapiFields.add("deviceType");
    openapiFields.add("dsConversionId");
    openapiFields.add("engineAccountId");
    openapiFields.add("floodlightOrderId");
    openapiFields.add("inventoryAccountId");
    openapiFields.add("productCountry");
    openapiFields.add("productGroupId");
    openapiFields.add("productId");
    openapiFields.add("productLanguage");
    openapiFields.add("quantityMillis");
    openapiFields.add("revenueMicros");
    openapiFields.add("segmentationId");
    openapiFields.add("segmentationName");
    openapiFields.add("segmentationType");
    openapiFields.add("state");
    openapiFields.add("storeId");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Conversion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Conversion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Conversion is not found in the empty JSON string", Conversion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Conversion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Conversion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adGroupId") != null && !jsonObj.get("adGroupId").isJsonNull()) && !jsonObj.get("adGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adGroupId").toString()));
      }
      if ((jsonObj.get("adId") != null && !jsonObj.get("adId").isJsonNull()) && !jsonObj.get("adId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adId").toString()));
      }
      if ((jsonObj.get("adUserDataConsent") != null && !jsonObj.get("adUserDataConsent").isJsonNull()) && !jsonObj.get("adUserDataConsent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adUserDataConsent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adUserDataConsent").toString()));
      }
      // validate the optional field `adUserDataConsent`
      if (jsonObj.get("adUserDataConsent") != null && !jsonObj.get("adUserDataConsent").isJsonNull()) {
        AdUserDataConsentEnum.validateJsonElement(jsonObj.get("adUserDataConsent"));
      }
      if ((jsonObj.get("advertiserId") != null && !jsonObj.get("advertiserId").isJsonNull()) && !jsonObj.get("advertiserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserId").toString()));
      }
      if ((jsonObj.get("agencyId") != null && !jsonObj.get("agencyId").isJsonNull()) && !jsonObj.get("agencyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agencyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agencyId").toString()));
      }
      if ((jsonObj.get("attributionModel") != null && !jsonObj.get("attributionModel").isJsonNull()) && !jsonObj.get("attributionModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributionModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributionModel").toString()));
      }
      if ((jsonObj.get("campaignId") != null && !jsonObj.get("campaignId").isJsonNull()) && !jsonObj.get("campaignId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaignId").toString()));
      }
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if ((jsonObj.get("clickId") != null && !jsonObj.get("clickId").isJsonNull()) && !jsonObj.get("clickId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clickId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clickId").toString()));
      }
      if ((jsonObj.get("conversionId") != null && !jsonObj.get("conversionId").isJsonNull()) && !jsonObj.get("conversionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversionId").toString()));
      }
      if ((jsonObj.get("conversionModifiedTimestamp") != null && !jsonObj.get("conversionModifiedTimestamp").isJsonNull()) && !jsonObj.get("conversionModifiedTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversionModifiedTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversionModifiedTimestamp").toString()));
      }
      if ((jsonObj.get("conversionTimestamp") != null && !jsonObj.get("conversionTimestamp").isJsonNull()) && !jsonObj.get("conversionTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversionTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversionTimestamp").toString()));
      }
      if ((jsonObj.get("countMillis") != null && !jsonObj.get("countMillis").isJsonNull()) && !jsonObj.get("countMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countMillis").toString()));
      }
      if ((jsonObj.get("criterionId") != null && !jsonObj.get("criterionId").isJsonNull()) && !jsonObj.get("criterionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `criterionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("criterionId").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if (jsonObj.get("customDimension") != null && !jsonObj.get("customDimension").isJsonNull()) {
        JsonArray jsonArraycustomDimension = jsonObj.getAsJsonArray("customDimension");
        if (jsonArraycustomDimension != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customDimension").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customDimension` to be an array in the JSON string but got `%s`", jsonObj.get("customDimension").toString()));
          }

          // validate the optional field `customDimension` (array)
          for (int i = 0; i < jsonArraycustomDimension.size(); i++) {
            CustomDimension.validateJsonElement(jsonArraycustomDimension.get(i));
          };
        }
      }
      if (jsonObj.get("customMetric") != null && !jsonObj.get("customMetric").isJsonNull()) {
        JsonArray jsonArraycustomMetric = jsonObj.getAsJsonArray("customMetric");
        if (jsonArraycustomMetric != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customMetric").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customMetric` to be an array in the JSON string but got `%s`", jsonObj.get("customMetric").toString()));
          }

          // validate the optional field `customMetric` (array)
          for (int i = 0; i < jsonArraycustomMetric.size(); i++) {
            CustomMetric.validateJsonElement(jsonArraycustomMetric.get(i));
          };
        }
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if ((jsonObj.get("deviceType") != null && !jsonObj.get("deviceType").isJsonNull()) && !jsonObj.get("deviceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceType").toString()));
      }
      if ((jsonObj.get("dsConversionId") != null && !jsonObj.get("dsConversionId").isJsonNull()) && !jsonObj.get("dsConversionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dsConversionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dsConversionId").toString()));
      }
      if ((jsonObj.get("engineAccountId") != null && !jsonObj.get("engineAccountId").isJsonNull()) && !jsonObj.get("engineAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engineAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engineAccountId").toString()));
      }
      if ((jsonObj.get("floodlightOrderId") != null && !jsonObj.get("floodlightOrderId").isJsonNull()) && !jsonObj.get("floodlightOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floodlightOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floodlightOrderId").toString()));
      }
      if ((jsonObj.get("inventoryAccountId") != null && !jsonObj.get("inventoryAccountId").isJsonNull()) && !jsonObj.get("inventoryAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inventoryAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inventoryAccountId").toString()));
      }
      if ((jsonObj.get("productCountry") != null && !jsonObj.get("productCountry").isJsonNull()) && !jsonObj.get("productCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productCountry").toString()));
      }
      if ((jsonObj.get("productGroupId") != null && !jsonObj.get("productGroupId").isJsonNull()) && !jsonObj.get("productGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productGroupId").toString()));
      }
      if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull()) && !jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      if ((jsonObj.get("productLanguage") != null && !jsonObj.get("productLanguage").isJsonNull()) && !jsonObj.get("productLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productLanguage").toString()));
      }
      if ((jsonObj.get("quantityMillis") != null && !jsonObj.get("quantityMillis").isJsonNull()) && !jsonObj.get("quantityMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quantityMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quantityMillis").toString()));
      }
      if ((jsonObj.get("revenueMicros") != null && !jsonObj.get("revenueMicros").isJsonNull()) && !jsonObj.get("revenueMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revenueMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revenueMicros").toString()));
      }
      if ((jsonObj.get("segmentationId") != null && !jsonObj.get("segmentationId").isJsonNull()) && !jsonObj.get("segmentationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `segmentationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("segmentationId").toString()));
      }
      if ((jsonObj.get("segmentationName") != null && !jsonObj.get("segmentationName").isJsonNull()) && !jsonObj.get("segmentationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `segmentationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("segmentationName").toString()));
      }
      if ((jsonObj.get("segmentationType") != null && !jsonObj.get("segmentationType").isJsonNull()) && !jsonObj.get("segmentationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `segmentationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("segmentationType").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("storeId") != null && !jsonObj.get("storeId").isJsonNull()) && !jsonObj.get("storeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storeId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Conversion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Conversion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Conversion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Conversion.class));

       return (TypeAdapter<T>) new TypeAdapter<Conversion>() {
           @Override
           public void write(JsonWriter out, Conversion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Conversion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Conversion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Conversion
   * @throws IOException if the JSON string is invalid with respect to Conversion
   */
  public static Conversion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Conversion.class);
  }

  /**
   * Convert an instance of Conversion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

