/*
 * Search Ads 360 API
 * The Search Ads 360 API allows developers to automate uploading conversions and downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReportApiColumnSpec;
import org.openapitools.client.model.ReportRequestFiltersInner;
import org.openapitools.client.model.ReportRequestOrderByInner;
import org.openapitools.client.model.ReportRequestReportScope;
import org.openapitools.client.model.ReportRequestTimeRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request object used to create a DoubleClick Search report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:25.520985-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportRequest {
  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<ReportApiColumnSpec> columns = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOWNLOAD_FORMAT = "downloadFormat";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_FORMAT)
  private String downloadFormat;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<ReportRequestFiltersInner> filters = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDE_DELETED_ENTITIES = "includeDeletedEntities";
  @SerializedName(SERIALIZED_NAME_INCLUDE_DELETED_ENTITIES)
  private Boolean includeDeletedEntities;

  public static final String SERIALIZED_NAME_INCLUDE_REMOVED_ENTITIES = "includeRemovedEntities";
  @SerializedName(SERIALIZED_NAME_INCLUDE_REMOVED_ENTITIES)
  private Boolean includeRemovedEntities;

  public static final String SERIALIZED_NAME_MAX_ROWS_PER_FILE = "maxRowsPerFile";
  @SerializedName(SERIALIZED_NAME_MAX_ROWS_PER_FILE)
  private Integer maxRowsPerFile;

  public static final String SERIALIZED_NAME_ORDER_BY = "orderBy";
  @SerializedName(SERIALIZED_NAME_ORDER_BY)
  private List<ReportRequestOrderByInner> orderBy = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPORT_SCOPE = "reportScope";
  @SerializedName(SERIALIZED_NAME_REPORT_SCOPE)
  private ReportRequestReportScope reportScope;

  public static final String SERIALIZED_NAME_REPORT_TYPE = "reportType";
  @SerializedName(SERIALIZED_NAME_REPORT_TYPE)
  private String reportType;

  public static final String SERIALIZED_NAME_ROW_COUNT = "rowCount";
  @SerializedName(SERIALIZED_NAME_ROW_COUNT)
  private Integer rowCount;

  public static final String SERIALIZED_NAME_START_ROW = "startRow";
  @SerializedName(SERIALIZED_NAME_START_ROW)
  private Integer startRow;

  public static final String SERIALIZED_NAME_STATISTICS_CURRENCY = "statisticsCurrency";
  @SerializedName(SERIALIZED_NAME_STATISTICS_CURRENCY)
  private String statisticsCurrency;

  public static final String SERIALIZED_NAME_TIME_RANGE = "timeRange";
  @SerializedName(SERIALIZED_NAME_TIME_RANGE)
  private ReportRequestTimeRange timeRange;

  public static final String SERIALIZED_NAME_VERIFY_SINGLE_TIME_ZONE = "verifySingleTimeZone";
  @SerializedName(SERIALIZED_NAME_VERIFY_SINGLE_TIME_ZONE)
  private Boolean verifySingleTimeZone;

  public ReportRequest() {
  }

  public ReportRequest columns(List<ReportApiColumnSpec> columns) {
    this.columns = columns;
    return this;
  }

  public ReportRequest addColumnsItem(ReportApiColumnSpec columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

  /**
   * The columns to include in the report. This includes both DoubleClick Search columns and saved columns. For DoubleClick Search columns, only the &#x60;columnName&#x60; parameter is required. For saved columns only the &#x60;savedColumnName&#x60; parameter is required. Both &#x60;columnName&#x60; and &#x60;savedColumnName&#x60; cannot be set in the same stanza.\\ The maximum number of columns per request is 300.
   * @return columns
   */
  @javax.annotation.Nullable
  public List<ReportApiColumnSpec> getColumns() {
    return columns;
  }

  public void setColumns(List<ReportApiColumnSpec> columns) {
    this.columns = columns;
  }


  public ReportRequest downloadFormat(String downloadFormat) {
    this.downloadFormat = downloadFormat;
    return this;
  }

  /**
   * Format that the report should be returned in. Currently &#x60;csv&#x60; or &#x60;tsv&#x60; is supported.
   * @return downloadFormat
   */
  @javax.annotation.Nullable
  public String getDownloadFormat() {
    return downloadFormat;
  }

  public void setDownloadFormat(String downloadFormat) {
    this.downloadFormat = downloadFormat;
  }


  public ReportRequest filters(List<ReportRequestFiltersInner> filters) {
    this.filters = filters;
    return this;
  }

  public ReportRequest addFiltersItem(ReportRequestFiltersInner filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * A list of filters to be applied to the report.\\ The maximum number of filters per request is 300.
   * @return filters
   */
  @javax.annotation.Nullable
  public List<ReportRequestFiltersInner> getFilters() {
    return filters;
  }

  public void setFilters(List<ReportRequestFiltersInner> filters) {
    this.filters = filters;
  }


  public ReportRequest includeDeletedEntities(Boolean includeDeletedEntities) {
    this.includeDeletedEntities = includeDeletedEntities;
    return this;
  }

  /**
   * Determines if removed entities should be included in the report. Defaults to &#x60;false&#x60;. Deprecated, please use &#x60;includeRemovedEntities&#x60; instead.
   * @return includeDeletedEntities
   */
  @javax.annotation.Nullable
  public Boolean getIncludeDeletedEntities() {
    return includeDeletedEntities;
  }

  public void setIncludeDeletedEntities(Boolean includeDeletedEntities) {
    this.includeDeletedEntities = includeDeletedEntities;
  }


  public ReportRequest includeRemovedEntities(Boolean includeRemovedEntities) {
    this.includeRemovedEntities = includeRemovedEntities;
    return this;
  }

  /**
   * Determines if removed entities should be included in the report. Defaults to &#x60;false&#x60;.
   * @return includeRemovedEntities
   */
  @javax.annotation.Nullable
  public Boolean getIncludeRemovedEntities() {
    return includeRemovedEntities;
  }

  public void setIncludeRemovedEntities(Boolean includeRemovedEntities) {
    this.includeRemovedEntities = includeRemovedEntities;
  }


  public ReportRequest maxRowsPerFile(Integer maxRowsPerFile) {
    this.maxRowsPerFile = maxRowsPerFile;
    return this;
  }

  /**
   * Asynchronous report only. The maximum number of rows per report file. A large report is split into many files based on this field. Acceptable values are &#x60;1000000&#x60; to &#x60;100000000&#x60;, inclusive.
   * @return maxRowsPerFile
   */
  @javax.annotation.Nullable
  public Integer getMaxRowsPerFile() {
    return maxRowsPerFile;
  }

  public void setMaxRowsPerFile(Integer maxRowsPerFile) {
    this.maxRowsPerFile = maxRowsPerFile;
  }


  public ReportRequest orderBy(List<ReportRequestOrderByInner> orderBy) {
    this.orderBy = orderBy;
    return this;
  }

  public ReportRequest addOrderByItem(ReportRequestOrderByInner orderByItem) {
    if (this.orderBy == null) {
      this.orderBy = new ArrayList<>();
    }
    this.orderBy.add(orderByItem);
    return this;
  }

  /**
   * Synchronous report only. A list of columns and directions defining sorting to be performed on the report rows.\\ The maximum number of orderings per request is 300.
   * @return orderBy
   */
  @javax.annotation.Nullable
  public List<ReportRequestOrderByInner> getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(List<ReportRequestOrderByInner> orderBy) {
    this.orderBy = orderBy;
  }


  public ReportRequest reportScope(ReportRequestReportScope reportScope) {
    this.reportScope = reportScope;
    return this;
  }

  /**
   * Get reportScope
   * @return reportScope
   */
  @javax.annotation.Nullable
  public ReportRequestReportScope getReportScope() {
    return reportScope;
  }

  public void setReportScope(ReportRequestReportScope reportScope) {
    this.reportScope = reportScope;
  }


  public ReportRequest reportType(String reportType) {
    this.reportType = reportType;
    return this;
  }

  /**
   * Determines the type of rows that are returned in the report. For example, if you specify &#x60;reportType: keyword&#x60;, each row in the report will contain data about a keyword. See the [Types of Reports](/search-ads/v2/report-types/) reference for the columns that are available for each type.
   * @return reportType
   */
  @javax.annotation.Nullable
  public String getReportType() {
    return reportType;
  }

  public void setReportType(String reportType) {
    this.reportType = reportType;
  }


  public ReportRequest rowCount(Integer rowCount) {
    this.rowCount = rowCount;
    return this;
  }

  /**
   * Synchronous report only. The maximum number of rows to return; additional rows are dropped. Acceptable values are &#x60;0&#x60; to &#x60;10000&#x60;, inclusive. Defaults to &#x60;10000&#x60;.
   * @return rowCount
   */
  @javax.annotation.Nullable
  public Integer getRowCount() {
    return rowCount;
  }

  public void setRowCount(Integer rowCount) {
    this.rowCount = rowCount;
  }


  public ReportRequest startRow(Integer startRow) {
    this.startRow = startRow;
    return this;
  }

  /**
   * Synchronous report only. Zero-based index of the first row to return. Acceptable values are &#x60;0&#x60; to &#x60;50000&#x60;, inclusive. Defaults to &#x60;0&#x60;.
   * @return startRow
   */
  @javax.annotation.Nullable
  public Integer getStartRow() {
    return startRow;
  }

  public void setStartRow(Integer startRow) {
    this.startRow = startRow;
  }


  public ReportRequest statisticsCurrency(String statisticsCurrency) {
    this.statisticsCurrency = statisticsCurrency;
    return this;
  }

  /**
   * Specifies the currency in which monetary will be returned. Possible values are: &#x60;usd&#x60;, &#x60;agency&#x60; (valid if the report is scoped to agency or lower), &#x60;advertiser&#x60; (valid if the report is scoped to * advertiser or lower), or &#x60;account&#x60; (valid if the report is scoped to engine account or lower).
   * @return statisticsCurrency
   */
  @javax.annotation.Nullable
  public String getStatisticsCurrency() {
    return statisticsCurrency;
  }

  public void setStatisticsCurrency(String statisticsCurrency) {
    this.statisticsCurrency = statisticsCurrency;
  }


  public ReportRequest timeRange(ReportRequestTimeRange timeRange) {
    this.timeRange = timeRange;
    return this;
  }

  /**
   * Get timeRange
   * @return timeRange
   */
  @javax.annotation.Nullable
  public ReportRequestTimeRange getTimeRange() {
    return timeRange;
  }

  public void setTimeRange(ReportRequestTimeRange timeRange) {
    this.timeRange = timeRange;
  }


  public ReportRequest verifySingleTimeZone(Boolean verifySingleTimeZone) {
    this.verifySingleTimeZone = verifySingleTimeZone;
    return this;
  }

  /**
   * If &#x60;true&#x60;, the report would only be created if all the requested stat data are sourced from a single timezone. Defaults to &#x60;false&#x60;.
   * @return verifySingleTimeZone
   */
  @javax.annotation.Nullable
  public Boolean getVerifySingleTimeZone() {
    return verifySingleTimeZone;
  }

  public void setVerifySingleTimeZone(Boolean verifySingleTimeZone) {
    this.verifySingleTimeZone = verifySingleTimeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportRequest reportRequest = (ReportRequest) o;
    return Objects.equals(this.columns, reportRequest.columns) &&
        Objects.equals(this.downloadFormat, reportRequest.downloadFormat) &&
        Objects.equals(this.filters, reportRequest.filters) &&
        Objects.equals(this.includeDeletedEntities, reportRequest.includeDeletedEntities) &&
        Objects.equals(this.includeRemovedEntities, reportRequest.includeRemovedEntities) &&
        Objects.equals(this.maxRowsPerFile, reportRequest.maxRowsPerFile) &&
        Objects.equals(this.orderBy, reportRequest.orderBy) &&
        Objects.equals(this.reportScope, reportRequest.reportScope) &&
        Objects.equals(this.reportType, reportRequest.reportType) &&
        Objects.equals(this.rowCount, reportRequest.rowCount) &&
        Objects.equals(this.startRow, reportRequest.startRow) &&
        Objects.equals(this.statisticsCurrency, reportRequest.statisticsCurrency) &&
        Objects.equals(this.timeRange, reportRequest.timeRange) &&
        Objects.equals(this.verifySingleTimeZone, reportRequest.verifySingleTimeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columns, downloadFormat, filters, includeDeletedEntities, includeRemovedEntities, maxRowsPerFile, orderBy, reportScope, reportType, rowCount, startRow, statisticsCurrency, timeRange, verifySingleTimeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportRequest {\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    downloadFormat: ").append(toIndentedString(downloadFormat)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    includeDeletedEntities: ").append(toIndentedString(includeDeletedEntities)).append("\n");
    sb.append("    includeRemovedEntities: ").append(toIndentedString(includeRemovedEntities)).append("\n");
    sb.append("    maxRowsPerFile: ").append(toIndentedString(maxRowsPerFile)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    reportScope: ").append(toIndentedString(reportScope)).append("\n");
    sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
    sb.append("    rowCount: ").append(toIndentedString(rowCount)).append("\n");
    sb.append("    startRow: ").append(toIndentedString(startRow)).append("\n");
    sb.append("    statisticsCurrency: ").append(toIndentedString(statisticsCurrency)).append("\n");
    sb.append("    timeRange: ").append(toIndentedString(timeRange)).append("\n");
    sb.append("    verifySingleTimeZone: ").append(toIndentedString(verifySingleTimeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columns");
    openapiFields.add("downloadFormat");
    openapiFields.add("filters");
    openapiFields.add("includeDeletedEntities");
    openapiFields.add("includeRemovedEntities");
    openapiFields.add("maxRowsPerFile");
    openapiFields.add("orderBy");
    openapiFields.add("reportScope");
    openapiFields.add("reportType");
    openapiFields.add("rowCount");
    openapiFields.add("startRow");
    openapiFields.add("statisticsCurrency");
    openapiFields.add("timeRange");
    openapiFields.add("verifySingleTimeZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportRequest is not found in the empty JSON string", ReportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("columns") != null && !jsonObj.get("columns").isJsonNull()) {
        JsonArray jsonArraycolumns = jsonObj.getAsJsonArray("columns");
        if (jsonArraycolumns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("columns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
          }

          // validate the optional field `columns` (array)
          for (int i = 0; i < jsonArraycolumns.size(); i++) {
            ReportApiColumnSpec.validateJsonElement(jsonArraycolumns.get(i));
          };
        }
      }
      if ((jsonObj.get("downloadFormat") != null && !jsonObj.get("downloadFormat").isJsonNull()) && !jsonObj.get("downloadFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloadFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloadFormat").toString()));
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            ReportRequestFiltersInner.validateJsonElement(jsonArrayfilters.get(i));
          };
        }
      }
      if (jsonObj.get("orderBy") != null && !jsonObj.get("orderBy").isJsonNull()) {
        JsonArray jsonArrayorderBy = jsonObj.getAsJsonArray("orderBy");
        if (jsonArrayorderBy != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orderBy").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orderBy` to be an array in the JSON string but got `%s`", jsonObj.get("orderBy").toString()));
          }

          // validate the optional field `orderBy` (array)
          for (int i = 0; i < jsonArrayorderBy.size(); i++) {
            ReportRequestOrderByInner.validateJsonElement(jsonArrayorderBy.get(i));
          };
        }
      }
      // validate the optional field `reportScope`
      if (jsonObj.get("reportScope") != null && !jsonObj.get("reportScope").isJsonNull()) {
        ReportRequestReportScope.validateJsonElement(jsonObj.get("reportScope"));
      }
      if ((jsonObj.get("reportType") != null && !jsonObj.get("reportType").isJsonNull()) && !jsonObj.get("reportType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportType").toString()));
      }
      if ((jsonObj.get("statisticsCurrency") != null && !jsonObj.get("statisticsCurrency").isJsonNull()) && !jsonObj.get("statisticsCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statisticsCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statisticsCurrency").toString()));
      }
      // validate the optional field `timeRange`
      if (jsonObj.get("timeRange") != null && !jsonObj.get("timeRange").isJsonNull()) {
        ReportRequestTimeRange.validateJsonElement(jsonObj.get("timeRange"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportRequest>() {
           @Override
           public void write(JsonWriter out, ReportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportRequest
   * @throws IOException if the JSON string is invalid with respect to ReportRequest
   */
  public static ReportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportRequest.class);
  }

  /**
   * Convert an instance of ReportRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

