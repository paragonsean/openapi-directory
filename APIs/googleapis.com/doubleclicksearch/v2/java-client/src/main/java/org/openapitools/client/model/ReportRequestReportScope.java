/*
 * Search Ads 360 API
 * The Search Ads 360 API allows developers to automate uploading conversions and downloading reports from Search Ads 360.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The reportScope is a set of IDs that are used to determine which subset of entities will be returned in the report. The full lineage of IDs from the lowest scoped level desired up through agency is required.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:25.520985-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportRequestReportScope {
  public static final String SERIALIZED_NAME_AD_GROUP_ID = "adGroupId";
  @SerializedName(SERIALIZED_NAME_AD_GROUP_ID)
  private String adGroupId;

  public static final String SERIALIZED_NAME_AD_ID = "adId";
  @SerializedName(SERIALIZED_NAME_AD_ID)
  private String adId;

  public static final String SERIALIZED_NAME_ADVERTISER_ID = "advertiserId";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_ID)
  private String advertiserId;

  public static final String SERIALIZED_NAME_AGENCY_ID = "agencyId";
  @SerializedName(SERIALIZED_NAME_AGENCY_ID)
  private String agencyId;

  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "campaignId";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private String campaignId;

  public static final String SERIALIZED_NAME_ENGINE_ACCOUNT_ID = "engineAccountId";
  @SerializedName(SERIALIZED_NAME_ENGINE_ACCOUNT_ID)
  private String engineAccountId;

  public static final String SERIALIZED_NAME_KEYWORD_ID = "keywordId";
  @SerializedName(SERIALIZED_NAME_KEYWORD_ID)
  private String keywordId;

  public ReportRequestReportScope() {
  }

  public ReportRequestReportScope adGroupId(String adGroupId) {
    this.adGroupId = adGroupId;
    return this;
  }

  /**
   * DS ad group ID.
   * @return adGroupId
   */
  @javax.annotation.Nullable
  public String getAdGroupId() {
    return adGroupId;
  }

  public void setAdGroupId(String adGroupId) {
    this.adGroupId = adGroupId;
  }


  public ReportRequestReportScope adId(String adId) {
    this.adId = adId;
    return this;
  }

  /**
   * DS ad ID.
   * @return adId
   */
  @javax.annotation.Nullable
  public String getAdId() {
    return adId;
  }

  public void setAdId(String adId) {
    this.adId = adId;
  }


  public ReportRequestReportScope advertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
    return this;
  }

  /**
   * DS advertiser ID.
   * @return advertiserId
   */
  @javax.annotation.Nullable
  public String getAdvertiserId() {
    return advertiserId;
  }

  public void setAdvertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
  }


  public ReportRequestReportScope agencyId(String agencyId) {
    this.agencyId = agencyId;
    return this;
  }

  /**
   * DS agency ID.
   * @return agencyId
   */
  @javax.annotation.Nullable
  public String getAgencyId() {
    return agencyId;
  }

  public void setAgencyId(String agencyId) {
    this.agencyId = agencyId;
  }


  public ReportRequestReportScope campaignId(String campaignId) {
    this.campaignId = campaignId;
    return this;
  }

  /**
   * DS campaign ID.
   * @return campaignId
   */
  @javax.annotation.Nullable
  public String getCampaignId() {
    return campaignId;
  }

  public void setCampaignId(String campaignId) {
    this.campaignId = campaignId;
  }


  public ReportRequestReportScope engineAccountId(String engineAccountId) {
    this.engineAccountId = engineAccountId;
    return this;
  }

  /**
   * DS engine account ID.
   * @return engineAccountId
   */
  @javax.annotation.Nullable
  public String getEngineAccountId() {
    return engineAccountId;
  }

  public void setEngineAccountId(String engineAccountId) {
    this.engineAccountId = engineAccountId;
  }


  public ReportRequestReportScope keywordId(String keywordId) {
    this.keywordId = keywordId;
    return this;
  }

  /**
   * DS keyword ID.
   * @return keywordId
   */
  @javax.annotation.Nullable
  public String getKeywordId() {
    return keywordId;
  }

  public void setKeywordId(String keywordId) {
    this.keywordId = keywordId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportRequestReportScope reportRequestReportScope = (ReportRequestReportScope) o;
    return Objects.equals(this.adGroupId, reportRequestReportScope.adGroupId) &&
        Objects.equals(this.adId, reportRequestReportScope.adId) &&
        Objects.equals(this.advertiserId, reportRequestReportScope.advertiserId) &&
        Objects.equals(this.agencyId, reportRequestReportScope.agencyId) &&
        Objects.equals(this.campaignId, reportRequestReportScope.campaignId) &&
        Objects.equals(this.engineAccountId, reportRequestReportScope.engineAccountId) &&
        Objects.equals(this.keywordId, reportRequestReportScope.keywordId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adGroupId, adId, advertiserId, agencyId, campaignId, engineAccountId, keywordId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportRequestReportScope {\n");
    sb.append("    adGroupId: ").append(toIndentedString(adGroupId)).append("\n");
    sb.append("    adId: ").append(toIndentedString(adId)).append("\n");
    sb.append("    advertiserId: ").append(toIndentedString(advertiserId)).append("\n");
    sb.append("    agencyId: ").append(toIndentedString(agencyId)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    engineAccountId: ").append(toIndentedString(engineAccountId)).append("\n");
    sb.append("    keywordId: ").append(toIndentedString(keywordId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adGroupId");
    openapiFields.add("adId");
    openapiFields.add("advertiserId");
    openapiFields.add("agencyId");
    openapiFields.add("campaignId");
    openapiFields.add("engineAccountId");
    openapiFields.add("keywordId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportRequestReportScope
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportRequestReportScope.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportRequestReportScope is not found in the empty JSON string", ReportRequestReportScope.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportRequestReportScope.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportRequestReportScope` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adGroupId") != null && !jsonObj.get("adGroupId").isJsonNull()) && !jsonObj.get("adGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adGroupId").toString()));
      }
      if ((jsonObj.get("adId") != null && !jsonObj.get("adId").isJsonNull()) && !jsonObj.get("adId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adId").toString()));
      }
      if ((jsonObj.get("advertiserId") != null && !jsonObj.get("advertiserId").isJsonNull()) && !jsonObj.get("advertiserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserId").toString()));
      }
      if ((jsonObj.get("agencyId") != null && !jsonObj.get("agencyId").isJsonNull()) && !jsonObj.get("agencyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agencyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agencyId").toString()));
      }
      if ((jsonObj.get("campaignId") != null && !jsonObj.get("campaignId").isJsonNull()) && !jsonObj.get("campaignId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaignId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaignId").toString()));
      }
      if ((jsonObj.get("engineAccountId") != null && !jsonObj.get("engineAccountId").isJsonNull()) && !jsonObj.get("engineAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engineAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engineAccountId").toString()));
      }
      if ((jsonObj.get("keywordId") != null && !jsonObj.get("keywordId").isJsonNull()) && !jsonObj.get("keywordId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keywordId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keywordId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportRequestReportScope.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportRequestReportScope' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportRequestReportScope> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportRequestReportScope.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportRequestReportScope>() {
           @Override
           public void write(JsonWriter out, ReportRequestReportScope value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportRequestReportScope read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportRequestReportScope given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportRequestReportScope
   * @throws IOException if the JSON string is invalid with respect to ReportRequestReportScope
   */
  public static ReportRequestReportScope fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportRequestReportScope.class);
  }

  /**
   * Convert an instance of ReportRequestReportScope to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

