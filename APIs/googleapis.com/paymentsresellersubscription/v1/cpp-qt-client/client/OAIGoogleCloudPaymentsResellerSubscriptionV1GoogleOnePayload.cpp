/**
 * Payments Reseller Subscription API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload() {
    this->initializeModel();
}

OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::~OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload() {}

void OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::initializeModel() {

    m_campaigns_isSet = false;
    m_campaigns_isValid = false;

    m_offering_isSet = false;
    m_offering_isValid = false;

    m_sales_channel_isSet = false;
    m_sales_channel_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;
}

void OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::fromJsonObject(QJsonObject json) {

    m_campaigns_isValid = ::OpenAPI::fromJsonValue(m_campaigns, json[QString("campaigns")]);
    m_campaigns_isSet = !json[QString("campaigns")].isNull() && m_campaigns_isValid;

    m_offering_isValid = ::OpenAPI::fromJsonValue(m_offering, json[QString("offering")]);
    m_offering_isSet = !json[QString("offering")].isNull() && m_offering_isValid;

    m_sales_channel_isValid = ::OpenAPI::fromJsonValue(m_sales_channel, json[QString("salesChannel")]);
    m_sales_channel_isSet = !json[QString("salesChannel")].isNull() && m_sales_channel_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("storeId")]);
    m_store_id_isSet = !json[QString("storeId")].isNull() && m_store_id_isValid;
}

QString OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::asJsonObject() const {
    QJsonObject obj;
    if (m_campaigns.size() > 0) {
        obj.insert(QString("campaigns"), ::OpenAPI::toJsonValue(m_campaigns));
    }
    if (m_offering_isSet) {
        obj.insert(QString("offering"), ::OpenAPI::toJsonValue(m_offering));
    }
    if (m_sales_channel_isSet) {
        obj.insert(QString("salesChannel"), ::OpenAPI::toJsonValue(m_sales_channel));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("storeId"), ::OpenAPI::toJsonValue(m_store_id));
    }
    return obj;
}

QList<QString> OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::getCampaigns() const {
    return m_campaigns;
}
void OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::setCampaigns(const QList<QString> &campaigns) {
    m_campaigns = campaigns;
    m_campaigns_isSet = true;
}

bool OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::is_campaigns_Set() const{
    return m_campaigns_isSet;
}

bool OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::is_campaigns_Valid() const{
    return m_campaigns_isValid;
}

QString OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::getOffering() const {
    return m_offering;
}
void OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::setOffering(const QString &offering) {
    m_offering = offering;
    m_offering_isSet = true;
}

bool OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::is_offering_Set() const{
    return m_offering_isSet;
}

bool OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::is_offering_Valid() const{
    return m_offering_isValid;
}

QString OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::getSalesChannel() const {
    return m_sales_channel;
}
void OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::setSalesChannel(const QString &sales_channel) {
    m_sales_channel = sales_channel;
    m_sales_channel_isSet = true;
}

bool OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::is_sales_channel_Set() const{
    return m_sales_channel_isSet;
}

bool OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::is_sales_channel_Valid() const{
    return m_sales_channel_isValid;
}

QString OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::getStoreId() const {
    return m_store_id;
}
void OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::setStoreId(const QString &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::is_store_id_Valid() const{
    return m_store_id_isValid;
}

bool OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_campaigns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
