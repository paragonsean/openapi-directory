/**
 * Payments Reseller Subscription API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPartnersApi_H
#define OAI_OAIPartnersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionRequest.h"
#include "OAIGoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionResponse.h"
#include "OAIGoogleCloudPaymentsResellerSubscriptionV1EntitleSubscriptionRequest.h"
#include "OAIGoogleCloudPaymentsResellerSubscriptionV1EntitleSubscriptionResponse.h"
#include "OAIGoogleCloudPaymentsResellerSubscriptionV1ExtendSubscriptionRequest.h"
#include "OAIGoogleCloudPaymentsResellerSubscriptionV1ExtendSubscriptionResponse.h"
#include "OAIGoogleCloudPaymentsResellerSubscriptionV1FindEligiblePromotionsRequest.h"
#include "OAIGoogleCloudPaymentsResellerSubscriptionV1FindEligiblePromotionsResponse.h"
#include "OAIGoogleCloudPaymentsResellerSubscriptionV1ListProductsResponse.h"
#include "OAIGoogleCloudPaymentsResellerSubscriptionV1ListPromotionsResponse.h"
#include "OAIGoogleCloudPaymentsResellerSubscriptionV1Subscription.h"
#include "OAIGoogleCloudPaymentsResellerSubscriptionV1UndoCancelSubscriptionResponse.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPartnersApi : public QObject {
    Q_OBJECT

public:
    OAIPartnersApi(const int timeOut = 0);
    ~OAIPartnersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void paymentsresellersubscription_partners_products_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_payments_reseller_subscription_v1_find_eligible_promotions_request OAIGoogleCloudPaymentsResellerSubscriptionV1FindEligiblePromotionsRequest [optional]
    */
    virtual void paymentsresellersubscription_partners_promotions_findEligible(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudPaymentsResellerSubscriptionV1FindEligiblePromotionsRequest> &oai_google_cloud_payments_reseller_subscription_v1_find_eligible_promotions_request = ::OpenAPI::OptionalParam<OAIGoogleCloudPaymentsResellerSubscriptionV1FindEligiblePromotionsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void paymentsresellersubscription_partners_promotions_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_payments_reseller_subscription_v1_cancel_subscription_request OAIGoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionRequest [optional]
    */
    virtual void paymentsresellersubscription_partners_subscriptions_cancel(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionRequest> &oai_google_cloud_payments_reseller_subscription_v1_cancel_subscription_request = ::OpenAPI::OptionalParam<OAIGoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  subscription_id QString [optional]
    * @param[in]  oai_google_cloud_payments_reseller_subscription_v1_subscription OAIGoogleCloudPaymentsResellerSubscriptionV1Subscription [optional]
    */
    virtual void paymentsresellersubscription_partners_subscriptions_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subscription_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudPaymentsResellerSubscriptionV1Subscription> &oai_google_cloud_payments_reseller_subscription_v1_subscription = ::OpenAPI::OptionalParam<OAIGoogleCloudPaymentsResellerSubscriptionV1Subscription>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_payments_reseller_subscription_v1_entitle_subscription_request OAIGoogleCloudPaymentsResellerSubscriptionV1EntitleSubscriptionRequest [optional]
    */
    virtual void paymentsresellersubscription_partners_subscriptions_entitle(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudPaymentsResellerSubscriptionV1EntitleSubscriptionRequest> &oai_google_cloud_payments_reseller_subscription_v1_entitle_subscription_request = ::OpenAPI::OptionalParam<OAIGoogleCloudPaymentsResellerSubscriptionV1EntitleSubscriptionRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_payments_reseller_subscription_v1_extend_subscription_request OAIGoogleCloudPaymentsResellerSubscriptionV1ExtendSubscriptionRequest [optional]
    */
    virtual void paymentsresellersubscription_partners_subscriptions_extend(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudPaymentsResellerSubscriptionV1ExtendSubscriptionRequest> &oai_google_cloud_payments_reseller_subscription_v1_extend_subscription_request = ::OpenAPI::OptionalParam<OAIGoogleCloudPaymentsResellerSubscriptionV1ExtendSubscriptionRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void paymentsresellersubscription_partners_subscriptions_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  subscription_id QString [optional]
    * @param[in]  oai_google_cloud_payments_reseller_subscription_v1_subscription OAIGoogleCloudPaymentsResellerSubscriptionV1Subscription [optional]
    */
    virtual void paymentsresellersubscription_partners_subscriptions_provision(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subscription_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudPaymentsResellerSubscriptionV1Subscription> &oai_google_cloud_payments_reseller_subscription_v1_subscription = ::OpenAPI::OptionalParam<OAIGoogleCloudPaymentsResellerSubscriptionV1Subscription>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void paymentsresellersubscription_partners_subscriptions_undoCancel(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void paymentsresellersubscription_partners_products_listCallback(OAIHttpRequestWorker *worker);
    void paymentsresellersubscription_partners_promotions_findEligibleCallback(OAIHttpRequestWorker *worker);
    void paymentsresellersubscription_partners_promotions_listCallback(OAIHttpRequestWorker *worker);
    void paymentsresellersubscription_partners_subscriptions_cancelCallback(OAIHttpRequestWorker *worker);
    void paymentsresellersubscription_partners_subscriptions_createCallback(OAIHttpRequestWorker *worker);
    void paymentsresellersubscription_partners_subscriptions_entitleCallback(OAIHttpRequestWorker *worker);
    void paymentsresellersubscription_partners_subscriptions_extendCallback(OAIHttpRequestWorker *worker);
    void paymentsresellersubscription_partners_subscriptions_getCallback(OAIHttpRequestWorker *worker);
    void paymentsresellersubscription_partners_subscriptions_provisionCallback(OAIHttpRequestWorker *worker);
    void paymentsresellersubscription_partners_subscriptions_undoCancelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void paymentsresellersubscription_partners_products_listSignal(OAIGoogleCloudPaymentsResellerSubscriptionV1ListProductsResponse summary);
    void paymentsresellersubscription_partners_promotions_findEligibleSignal(OAIGoogleCloudPaymentsResellerSubscriptionV1FindEligiblePromotionsResponse summary);
    void paymentsresellersubscription_partners_promotions_listSignal(OAIGoogleCloudPaymentsResellerSubscriptionV1ListPromotionsResponse summary);
    void paymentsresellersubscription_partners_subscriptions_cancelSignal(OAIGoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionResponse summary);
    void paymentsresellersubscription_partners_subscriptions_createSignal(OAIGoogleCloudPaymentsResellerSubscriptionV1Subscription summary);
    void paymentsresellersubscription_partners_subscriptions_entitleSignal(OAIGoogleCloudPaymentsResellerSubscriptionV1EntitleSubscriptionResponse summary);
    void paymentsresellersubscription_partners_subscriptions_extendSignal(OAIGoogleCloudPaymentsResellerSubscriptionV1ExtendSubscriptionResponse summary);
    void paymentsresellersubscription_partners_subscriptions_getSignal(OAIGoogleCloudPaymentsResellerSubscriptionV1Subscription summary);
    void paymentsresellersubscription_partners_subscriptions_provisionSignal(OAIGoogleCloudPaymentsResellerSubscriptionV1Subscription summary);
    void paymentsresellersubscription_partners_subscriptions_undoCancelSignal(OAIGoogleCloudPaymentsResellerSubscriptionV1UndoCancelSubscriptionResponse summary);


    void paymentsresellersubscription_partners_products_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudPaymentsResellerSubscriptionV1ListProductsResponse summary);
    void paymentsresellersubscription_partners_promotions_findEligibleSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudPaymentsResellerSubscriptionV1FindEligiblePromotionsResponse summary);
    void paymentsresellersubscription_partners_promotions_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudPaymentsResellerSubscriptionV1ListPromotionsResponse summary);
    void paymentsresellersubscription_partners_subscriptions_cancelSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionResponse summary);
    void paymentsresellersubscription_partners_subscriptions_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudPaymentsResellerSubscriptionV1Subscription summary);
    void paymentsresellersubscription_partners_subscriptions_entitleSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudPaymentsResellerSubscriptionV1EntitleSubscriptionResponse summary);
    void paymentsresellersubscription_partners_subscriptions_extendSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudPaymentsResellerSubscriptionV1ExtendSubscriptionResponse summary);
    void paymentsresellersubscription_partners_subscriptions_getSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudPaymentsResellerSubscriptionV1Subscription summary);
    void paymentsresellersubscription_partners_subscriptions_provisionSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudPaymentsResellerSubscriptionV1Subscription summary);
    void paymentsresellersubscription_partners_subscriptions_undoCancelSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudPaymentsResellerSubscriptionV1UndoCancelSubscriptionResponse summary);

    Q_DECL_DEPRECATED_X("Use paymentsresellersubscription_partners_products_listSignalError() instead")
    void paymentsresellersubscription_partners_products_listSignalE(OAIGoogleCloudPaymentsResellerSubscriptionV1ListProductsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsresellersubscription_partners_products_listSignalError(OAIGoogleCloudPaymentsResellerSubscriptionV1ListProductsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsresellersubscription_partners_promotions_findEligibleSignalError() instead")
    void paymentsresellersubscription_partners_promotions_findEligibleSignalE(OAIGoogleCloudPaymentsResellerSubscriptionV1FindEligiblePromotionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsresellersubscription_partners_promotions_findEligibleSignalError(OAIGoogleCloudPaymentsResellerSubscriptionV1FindEligiblePromotionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsresellersubscription_partners_promotions_listSignalError() instead")
    void paymentsresellersubscription_partners_promotions_listSignalE(OAIGoogleCloudPaymentsResellerSubscriptionV1ListPromotionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsresellersubscription_partners_promotions_listSignalError(OAIGoogleCloudPaymentsResellerSubscriptionV1ListPromotionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsresellersubscription_partners_subscriptions_cancelSignalError() instead")
    void paymentsresellersubscription_partners_subscriptions_cancelSignalE(OAIGoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsresellersubscription_partners_subscriptions_cancelSignalError(OAIGoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsresellersubscription_partners_subscriptions_createSignalError() instead")
    void paymentsresellersubscription_partners_subscriptions_createSignalE(OAIGoogleCloudPaymentsResellerSubscriptionV1Subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsresellersubscription_partners_subscriptions_createSignalError(OAIGoogleCloudPaymentsResellerSubscriptionV1Subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsresellersubscription_partners_subscriptions_entitleSignalError() instead")
    void paymentsresellersubscription_partners_subscriptions_entitleSignalE(OAIGoogleCloudPaymentsResellerSubscriptionV1EntitleSubscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsresellersubscription_partners_subscriptions_entitleSignalError(OAIGoogleCloudPaymentsResellerSubscriptionV1EntitleSubscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsresellersubscription_partners_subscriptions_extendSignalError() instead")
    void paymentsresellersubscription_partners_subscriptions_extendSignalE(OAIGoogleCloudPaymentsResellerSubscriptionV1ExtendSubscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsresellersubscription_partners_subscriptions_extendSignalError(OAIGoogleCloudPaymentsResellerSubscriptionV1ExtendSubscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsresellersubscription_partners_subscriptions_getSignalError() instead")
    void paymentsresellersubscription_partners_subscriptions_getSignalE(OAIGoogleCloudPaymentsResellerSubscriptionV1Subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsresellersubscription_partners_subscriptions_getSignalError(OAIGoogleCloudPaymentsResellerSubscriptionV1Subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsresellersubscription_partners_subscriptions_provisionSignalError() instead")
    void paymentsresellersubscription_partners_subscriptions_provisionSignalE(OAIGoogleCloudPaymentsResellerSubscriptionV1Subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsresellersubscription_partners_subscriptions_provisionSignalError(OAIGoogleCloudPaymentsResellerSubscriptionV1Subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsresellersubscription_partners_subscriptions_undoCancelSignalError() instead")
    void paymentsresellersubscription_partners_subscriptions_undoCancelSignalE(OAIGoogleCloudPaymentsResellerSubscriptionV1UndoCancelSubscriptionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsresellersubscription_partners_subscriptions_undoCancelSignalError(OAIGoogleCloudPaymentsResellerSubscriptionV1UndoCancelSubscriptionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use paymentsresellersubscription_partners_products_listSignalErrorFull() instead")
    void paymentsresellersubscription_partners_products_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsresellersubscription_partners_products_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsresellersubscription_partners_promotions_findEligibleSignalErrorFull() instead")
    void paymentsresellersubscription_partners_promotions_findEligibleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsresellersubscription_partners_promotions_findEligibleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsresellersubscription_partners_promotions_listSignalErrorFull() instead")
    void paymentsresellersubscription_partners_promotions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsresellersubscription_partners_promotions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsresellersubscription_partners_subscriptions_cancelSignalErrorFull() instead")
    void paymentsresellersubscription_partners_subscriptions_cancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsresellersubscription_partners_subscriptions_cancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsresellersubscription_partners_subscriptions_createSignalErrorFull() instead")
    void paymentsresellersubscription_partners_subscriptions_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsresellersubscription_partners_subscriptions_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsresellersubscription_partners_subscriptions_entitleSignalErrorFull() instead")
    void paymentsresellersubscription_partners_subscriptions_entitleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsresellersubscription_partners_subscriptions_entitleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsresellersubscription_partners_subscriptions_extendSignalErrorFull() instead")
    void paymentsresellersubscription_partners_subscriptions_extendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsresellersubscription_partners_subscriptions_extendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsresellersubscription_partners_subscriptions_getSignalErrorFull() instead")
    void paymentsresellersubscription_partners_subscriptions_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsresellersubscription_partners_subscriptions_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsresellersubscription_partners_subscriptions_provisionSignalErrorFull() instead")
    void paymentsresellersubscription_partners_subscriptions_provisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsresellersubscription_partners_subscriptions_provisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsresellersubscription_partners_subscriptions_undoCancelSignalErrorFull() instead")
    void paymentsresellersubscription_partners_subscriptions_undoCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsresellersubscription_partners_subscriptions_undoCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
