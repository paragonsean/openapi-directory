/*
 * Payments Reseller Subscription API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Payload specific to Youtube products.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:19.691143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload {
  public static final String SERIALIZED_NAME_ACCESS_END_TIME = "accessEndTime";
  @SerializedName(SERIALIZED_NAME_ACCESS_END_TIME)
  private String accessEndTime;

  public static final String SERIALIZED_NAME_PARTNER_ELIGIBILITY_IDS = "partnerEligibilityIds";
  @SerializedName(SERIALIZED_NAME_PARTNER_ELIGIBILITY_IDS)
  private List<String> partnerEligibilityIds = new ArrayList<>();

  /**
   * Optional. Specifies the plan type offered to the end user by the partner.
   */
  @JsonAdapter(PartnerPlanTypeEnum.Adapter.class)
  public enum PartnerPlanTypeEnum {
    UNSPECIFIED("PARTNER_PLAN_TYPE_UNSPECIFIED"),
    
    STANDALONE("PARTNER_PLAN_TYPE_STANDALONE"),
    
    HARD_BUNDLE("PARTNER_PLAN_TYPE_HARD_BUNDLE"),
    
    SOFT_BUNDLE("PARTNER_PLAN_TYPE_SOFT_BUNDLE");

    private String value;

    PartnerPlanTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PartnerPlanTypeEnum fromValue(String value) {
      for (PartnerPlanTypeEnum b : PartnerPlanTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PartnerPlanTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PartnerPlanTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PartnerPlanTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PartnerPlanTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PartnerPlanTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PARTNER_PLAN_TYPE = "partnerPlanType";
  @SerializedName(SERIALIZED_NAME_PARTNER_PLAN_TYPE)
  private PartnerPlanTypeEnum partnerPlanType;

  public GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload() {
  }

  public GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload(
     String accessEndTime
  ) {
    this();
    this.accessEndTime = accessEndTime;
  }

  /**
   * Output only. The access expiration time for this line item.
   * @return accessEndTime
   */
  @javax.annotation.Nullable
  public String getAccessEndTime() {
    return accessEndTime;
  }



  public GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload partnerEligibilityIds(List<String> partnerEligibilityIds) {
    this.partnerEligibilityIds = partnerEligibilityIds;
    return this;
  }

  public GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload addPartnerEligibilityIdsItem(String partnerEligibilityIdsItem) {
    if (this.partnerEligibilityIds == null) {
      this.partnerEligibilityIds = new ArrayList<>();
    }
    this.partnerEligibilityIds.add(partnerEligibilityIdsItem);
    return this;
  }

  /**
   * The list of eligibility_ids which are applicable for the line item.
   * @return partnerEligibilityIds
   */
  @javax.annotation.Nullable
  public List<String> getPartnerEligibilityIds() {
    return partnerEligibilityIds;
  }

  public void setPartnerEligibilityIds(List<String> partnerEligibilityIds) {
    this.partnerEligibilityIds = partnerEligibilityIds;
  }


  public GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload partnerPlanType(PartnerPlanTypeEnum partnerPlanType) {
    this.partnerPlanType = partnerPlanType;
    return this;
  }

  /**
   * Optional. Specifies the plan type offered to the end user by the partner.
   * @return partnerPlanType
   */
  @javax.annotation.Nullable
  public PartnerPlanTypeEnum getPartnerPlanType() {
    return partnerPlanType;
  }

  public void setPartnerPlanType(PartnerPlanTypeEnum partnerPlanType) {
    this.partnerPlanType = partnerPlanType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload googleCloudPaymentsResellerSubscriptionV1YoutubePayload = (GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload) o;
    return Objects.equals(this.accessEndTime, googleCloudPaymentsResellerSubscriptionV1YoutubePayload.accessEndTime) &&
        Objects.equals(this.partnerEligibilityIds, googleCloudPaymentsResellerSubscriptionV1YoutubePayload.partnerEligibilityIds) &&
        Objects.equals(this.partnerPlanType, googleCloudPaymentsResellerSubscriptionV1YoutubePayload.partnerPlanType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessEndTime, partnerEligibilityIds, partnerPlanType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload {\n");
    sb.append("    accessEndTime: ").append(toIndentedString(accessEndTime)).append("\n");
    sb.append("    partnerEligibilityIds: ").append(toIndentedString(partnerEligibilityIds)).append("\n");
    sb.append("    partnerPlanType: ").append(toIndentedString(partnerPlanType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessEndTime");
    openapiFields.add("partnerEligibilityIds");
    openapiFields.add("partnerPlanType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload is not found in the empty JSON string", GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessEndTime") != null && !jsonObj.get("accessEndTime").isJsonNull()) && !jsonObj.get("accessEndTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessEndTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessEndTime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("partnerEligibilityIds") != null && !jsonObj.get("partnerEligibilityIds").isJsonNull() && !jsonObj.get("partnerEligibilityIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerEligibilityIds` to be an array in the JSON string but got `%s`", jsonObj.get("partnerEligibilityIds").toString()));
      }
      if ((jsonObj.get("partnerPlanType") != null && !jsonObj.get("partnerPlanType").isJsonNull()) && !jsonObj.get("partnerPlanType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerPlanType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerPlanType").toString()));
      }
      // validate the optional field `partnerPlanType`
      if (jsonObj.get("partnerPlanType") != null && !jsonObj.get("partnerPlanType").isJsonNull()) {
        PartnerPlanTypeEnum.validateJsonElement(jsonObj.get("partnerPlanType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload>() {
           @Override
           public void write(JsonWriter out, GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload
   */
  public static GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload.class);
  }

  /**
   * Convert an instance of GoogleCloudPaymentsResellerSubscriptionV1YoutubePayload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

