/*
 * Payments Reseller Subscription API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Payload specific to Google One products.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:19.691143-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload {
  public static final String SERIALIZED_NAME_CAMPAIGNS = "campaigns";
  @SerializedName(SERIALIZED_NAME_CAMPAIGNS)
  private List<String> campaigns = new ArrayList<>();

  /**
   * The type of offering the subscription was sold by the partner. e.g. VAS.
   */
  @JsonAdapter(OfferingEnum.Adapter.class)
  public enum OfferingEnum {
    UNSPECIFIED("OFFERING_UNSPECIFIED"),
    
    VAS_BUNDLE("OFFERING_VAS_BUNDLE"),
    
    VAS_STANDALONE("OFFERING_VAS_STANDALONE"),
    
    HARD_BUNDLE("OFFERING_HARD_BUNDLE"),
    
    SOFT_BUNDLE("OFFERING_SOFT_BUNDLE");

    private String value;

    OfferingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OfferingEnum fromValue(String value) {
      for (OfferingEnum b : OfferingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OfferingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OfferingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OfferingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OfferingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OfferingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OFFERING = "offering";
  @SerializedName(SERIALIZED_NAME_OFFERING)
  private OfferingEnum offering;

  /**
   * The type of sales channel through which the subscription was sold.
   */
  @JsonAdapter(SalesChannelEnum.Adapter.class)
  public enum SalesChannelEnum {
    UNSPECIFIED("CHANNEL_UNSPECIFIED"),
    
    RETAIL("CHANNEL_RETAIL"),
    
    ONLINE_WEB("CHANNEL_ONLINE_WEB"),
    
    ONLINE_ANDROID_APP("CHANNEL_ONLINE_ANDROID_APP"),
    
    ONLINE_IOS_APP("CHANNEL_ONLINE_IOS_APP");

    private String value;

    SalesChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SalesChannelEnum fromValue(String value) {
      for (SalesChannelEnum b : SalesChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SalesChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SalesChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SalesChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SalesChannelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SalesChannelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SALES_CHANNEL = "salesChannel";
  @SerializedName(SERIALIZED_NAME_SALES_CHANNEL)
  private SalesChannelEnum salesChannel;

  public static final String SERIALIZED_NAME_STORE_ID = "storeId";
  @SerializedName(SERIALIZED_NAME_STORE_ID)
  private String storeId;

  public GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload() {
  }

  public GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload campaigns(List<String> campaigns) {
    this.campaigns = campaigns;
    return this;
  }

  public GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload addCampaignsItem(String campaignsItem) {
    if (this.campaigns == null) {
      this.campaigns = new ArrayList<>();
    }
    this.campaigns.add(campaignsItem);
    return this;
  }

  /**
   * Campaign attributed to sales of this subscription.
   * @return campaigns
   */
  @javax.annotation.Nullable
  public List<String> getCampaigns() {
    return campaigns;
  }

  public void setCampaigns(List<String> campaigns) {
    this.campaigns = campaigns;
  }


  public GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload offering(OfferingEnum offering) {
    this.offering = offering;
    return this;
  }

  /**
   * The type of offering the subscription was sold by the partner. e.g. VAS.
   * @return offering
   */
  @javax.annotation.Nullable
  public OfferingEnum getOffering() {
    return offering;
  }

  public void setOffering(OfferingEnum offering) {
    this.offering = offering;
  }


  public GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload salesChannel(SalesChannelEnum salesChannel) {
    this.salesChannel = salesChannel;
    return this;
  }

  /**
   * The type of sales channel through which the subscription was sold.
   * @return salesChannel
   */
  @javax.annotation.Nullable
  public SalesChannelEnum getSalesChannel() {
    return salesChannel;
  }

  public void setSalesChannel(SalesChannelEnum salesChannel) {
    this.salesChannel = salesChannel;
  }


  public GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload storeId(String storeId) {
    this.storeId = storeId;
    return this;
  }

  /**
   * The identifier for the partner store where the subscription was sold.
   * @return storeId
   */
  @javax.annotation.Nullable
  public String getStoreId() {
    return storeId;
  }

  public void setStoreId(String storeId) {
    this.storeId = storeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload googleCloudPaymentsResellerSubscriptionV1GoogleOnePayload = (GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload) o;
    return Objects.equals(this.campaigns, googleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.campaigns) &&
        Objects.equals(this.offering, googleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.offering) &&
        Objects.equals(this.salesChannel, googleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.salesChannel) &&
        Objects.equals(this.storeId, googleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.storeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(campaigns, offering, salesChannel, storeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload {\n");
    sb.append("    campaigns: ").append(toIndentedString(campaigns)).append("\n");
    sb.append("    offering: ").append(toIndentedString(offering)).append("\n");
    sb.append("    salesChannel: ").append(toIndentedString(salesChannel)).append("\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("campaigns");
    openapiFields.add("offering");
    openapiFields.add("salesChannel");
    openapiFields.add("storeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload is not found in the empty JSON string", GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("campaigns") != null && !jsonObj.get("campaigns").isJsonNull() && !jsonObj.get("campaigns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaigns` to be an array in the JSON string but got `%s`", jsonObj.get("campaigns").toString()));
      }
      if ((jsonObj.get("offering") != null && !jsonObj.get("offering").isJsonNull()) && !jsonObj.get("offering").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offering` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offering").toString()));
      }
      // validate the optional field `offering`
      if (jsonObj.get("offering") != null && !jsonObj.get("offering").isJsonNull()) {
        OfferingEnum.validateJsonElement(jsonObj.get("offering"));
      }
      if ((jsonObj.get("salesChannel") != null && !jsonObj.get("salesChannel").isJsonNull()) && !jsonObj.get("salesChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesChannel").toString()));
      }
      // validate the optional field `salesChannel`
      if (jsonObj.get("salesChannel") != null && !jsonObj.get("salesChannel").isJsonNull()) {
        SalesChannelEnum.validateJsonElement(jsonObj.get("salesChannel"));
      }
      if ((jsonObj.get("storeId") != null && !jsonObj.get("storeId").isJsonNull()) && !jsonObj.get("storeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload>() {
           @Override
           public void write(JsonWriter out, GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload
   */
  public static GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.class);
  }

  /**
   * Convert an instance of GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

