# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancel_immediately: bool=None, cancellation_reason: str=None):
        """GoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionRequest - a model defined in OpenAPI

        :param cancel_immediately: The cancel_immediately of this GoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionRequest.
        :param cancellation_reason: The cancellation_reason of this GoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionRequest.
        """
        self.openapi_types = {
            'cancel_immediately': bool,
            'cancellation_reason': str
        }

        self.attribute_map = {
            'cancel_immediately': 'cancelImmediately',
            'cancellation_reason': 'cancellationReason'
        }

        self._cancel_immediately = cancel_immediately
        self._cancellation_reason = cancellation_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionRequest of this GoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancel_immediately(self):
        """Gets the cancel_immediately of this GoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionRequest.

        Optional. If true, Google will cancel the subscription immediately, and may or may not (based on the contract) issue a prorated refund for the remainder of the billing cycle. Otherwise, Google defers the cancelation at renewal_time, and will not issue a refund.

        :return: The cancel_immediately of this GoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionRequest.
        :rtype: bool
        """
        return self._cancel_immediately

    @cancel_immediately.setter
    def cancel_immediately(self, cancel_immediately):
        """Sets the cancel_immediately of this GoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionRequest.

        Optional. If true, Google will cancel the subscription immediately, and may or may not (based on the contract) issue a prorated refund for the remainder of the billing cycle. Otherwise, Google defers the cancelation at renewal_time, and will not issue a refund.

        :param cancel_immediately: The cancel_immediately of this GoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionRequest.
        :type cancel_immediately: bool
        """

        self._cancel_immediately = cancel_immediately

    @property
    def cancellation_reason(self):
        """Gets the cancellation_reason of this GoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionRequest.

        Specifies the reason for the cancellation.

        :return: The cancellation_reason of this GoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionRequest.
        :rtype: str
        """
        return self._cancellation_reason

    @cancellation_reason.setter
    def cancellation_reason(self, cancellation_reason):
        """Sets the cancellation_reason of this GoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionRequest.

        Specifies the reason for the cancellation.

        :param cancellation_reason: The cancellation_reason of this GoogleCloudPaymentsResellerSubscriptionV1CancelSubscriptionRequest.
        :type cancellation_reason: str
        """
        allowed_values = ["CANCELLATION_REASON_UNSPECIFIED", "CANCELLATION_REASON_FRAUD", "CANCELLATION_REASON_REMORSE", "CANCELLATION_REASON_ACCIDENTAL_PURCHASE", "CANCELLATION_REASON_PAST_DUE", "CANCELLATION_REASON_ACCOUNT_CLOSED", "CANCELLATION_REASON_UPGRADE_DOWNGRADE", "CANCELLATION_REASON_USER_DELINQUENCY", "CANCELLATION_REASON_SYSTEM_ERROR", "CANCELLATION_REASON_SYSTEM_CANCEL", "CANCELLATION_REASON_OTHER"]  # noqa: E501
        if cancellation_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `cancellation_reason` ({0}), must be one of {1}"
                .format(cancellation_reason, allowed_values)
            )

        self._cancellation_reason = cancellation_reason
