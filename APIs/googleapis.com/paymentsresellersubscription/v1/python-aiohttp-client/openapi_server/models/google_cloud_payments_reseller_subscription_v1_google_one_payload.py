# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, campaigns: List[str]=None, offering: str=None, sales_channel: str=None, store_id: str=None):
        """GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload - a model defined in OpenAPI

        :param campaigns: The campaigns of this GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.
        :param offering: The offering of this GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.
        :param sales_channel: The sales_channel of this GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.
        :param store_id: The store_id of this GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.
        """
        self.openapi_types = {
            'campaigns': List[str],
            'offering': str,
            'sales_channel': str,
            'store_id': str
        }

        self.attribute_map = {
            'campaigns': 'campaigns',
            'offering': 'offering',
            'sales_channel': 'salesChannel',
            'store_id': 'storeId'
        }

        self._campaigns = campaigns
        self._offering = offering
        self._sales_channel = sales_channel
        self._store_id = store_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload of this GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def campaigns(self):
        """Gets the campaigns of this GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.

        Campaign attributed to sales of this subscription.

        :return: The campaigns of this GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.
        :rtype: List[str]
        """
        return self._campaigns

    @campaigns.setter
    def campaigns(self, campaigns):
        """Sets the campaigns of this GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.

        Campaign attributed to sales of this subscription.

        :param campaigns: The campaigns of this GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.
        :type campaigns: List[str]
        """

        self._campaigns = campaigns

    @property
    def offering(self):
        """Gets the offering of this GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.

        The type of offering the subscription was sold by the partner. e.g. VAS.

        :return: The offering of this GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.
        :rtype: str
        """
        return self._offering

    @offering.setter
    def offering(self, offering):
        """Sets the offering of this GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.

        The type of offering the subscription was sold by the partner. e.g. VAS.

        :param offering: The offering of this GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.
        :type offering: str
        """
        allowed_values = ["OFFERING_UNSPECIFIED", "OFFERING_VAS_BUNDLE", "OFFERING_VAS_STANDALONE", "OFFERING_HARD_BUNDLE", "OFFERING_SOFT_BUNDLE"]  # noqa: E501
        if offering not in allowed_values:
            raise ValueError(
                "Invalid value for `offering` ({0}), must be one of {1}"
                .format(offering, allowed_values)
            )

        self._offering = offering

    @property
    def sales_channel(self):
        """Gets the sales_channel of this GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.

        The type of sales channel through which the subscription was sold.

        :return: The sales_channel of this GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.

        The type of sales channel through which the subscription was sold.

        :param sales_channel: The sales_channel of this GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.
        :type sales_channel: str
        """
        allowed_values = ["CHANNEL_UNSPECIFIED", "CHANNEL_RETAIL", "CHANNEL_ONLINE_WEB", "CHANNEL_ONLINE_ANDROID_APP", "CHANNEL_ONLINE_IOS_APP"]  # noqa: E501
        if sales_channel not in allowed_values:
            raise ValueError(
                "Invalid value for `sales_channel` ({0}), must be one of {1}"
                .format(sales_channel, allowed_values)
            )

        self._sales_channel = sales_channel

    @property
    def store_id(self):
        """Gets the store_id of this GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.

        The identifier for the partner store where the subscription was sold.

        :return: The store_id of this GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.

        The identifier for the partner store where the subscription was sold.

        :param store_id: The store_id of this GoogleCloudPaymentsResellerSubscriptionV1GoogleOnePayload.
        :type store_id: str
        """

        self._store_id = store_id
