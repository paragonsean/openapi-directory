# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SignJwtRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delegates: List[str]=None, payload: str=None):
        """SignJwtRequest - a model defined in OpenAPI

        :param delegates: The delegates of this SignJwtRequest.
        :param payload: The payload of this SignJwtRequest.
        """
        self.openapi_types = {
            'delegates': List[str],
            'payload': str
        }

        self.attribute_map = {
            'delegates': 'delegates',
            'payload': 'payload'
        }

        self._delegates = delegates
        self._payload = payload

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SignJwtRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SignJwtRequest of this SignJwtRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delegates(self):
        """Gets the delegates of this SignJwtRequest.

        The sequence of service accounts in a delegation chain. Each service account must be granted the `roles/iam.serviceAccountTokenCreator` role on its next service account in the chain. The last service account in the chain must be granted the `roles/iam.serviceAccountTokenCreator` role on the service account that is specified in the `name` field of the request. The delegates must have the following format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard character is required; replacing it with a project ID is invalid.

        :return: The delegates of this SignJwtRequest.
        :rtype: List[str]
        """
        return self._delegates

    @delegates.setter
    def delegates(self, delegates):
        """Sets the delegates of this SignJwtRequest.

        The sequence of service accounts in a delegation chain. Each service account must be granted the `roles/iam.serviceAccountTokenCreator` role on its next service account in the chain. The last service account in the chain must be granted the `roles/iam.serviceAccountTokenCreator` role on the service account that is specified in the `name` field of the request. The delegates must have the following format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard character is required; replacing it with a project ID is invalid.

        :param delegates: The delegates of this SignJwtRequest.
        :type delegates: List[str]
        """

        self._delegates = delegates

    @property
    def payload(self):
        """Gets the payload of this SignJwtRequest.

        Required. The JWT payload to sign. Must be a serialized JSON object that contains a JWT Claims Set. For example: `{\"sub\": \"user@example.com\", \"iat\": 313435}` If the JWT Claims Set contains an expiration time (`exp`) claim, it must be an integer timestamp that is not in the past and no more than 12 hours in the future.

        :return: The payload of this SignJwtRequest.
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this SignJwtRequest.

        Required. The JWT payload to sign. Must be a serialized JSON object that contains a JWT Claims Set. For example: `{\"sub\": \"user@example.com\", \"iat\": 313435}` If the JWT Claims Set contains an expiration time (`exp`) claim, it must be an integer timestamp that is not in the past and no more than 12 hours in the future.

        :param payload: The payload of this SignJwtRequest.
        :type payload: str
        """

        self._payload = payload
