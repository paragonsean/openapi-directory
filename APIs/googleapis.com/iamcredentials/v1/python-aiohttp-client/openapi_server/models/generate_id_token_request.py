# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GenerateIdTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audience: str=None, delegates: List[str]=None, include_email: bool=None):
        """GenerateIdTokenRequest - a model defined in OpenAPI

        :param audience: The audience of this GenerateIdTokenRequest.
        :param delegates: The delegates of this GenerateIdTokenRequest.
        :param include_email: The include_email of this GenerateIdTokenRequest.
        """
        self.openapi_types = {
            'audience': str,
            'delegates': List[str],
            'include_email': bool
        }

        self.attribute_map = {
            'audience': 'audience',
            'delegates': 'delegates',
            'include_email': 'includeEmail'
        }

        self._audience = audience
        self._delegates = delegates
        self._include_email = include_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateIdTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenerateIdTokenRequest of this GenerateIdTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audience(self):
        """Gets the audience of this GenerateIdTokenRequest.

        Required. The audience for the token, such as the API or account that this token grants access to.

        :return: The audience of this GenerateIdTokenRequest.
        :rtype: str
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this GenerateIdTokenRequest.

        Required. The audience for the token, such as the API or account that this token grants access to.

        :param audience: The audience of this GenerateIdTokenRequest.
        :type audience: str
        """

        self._audience = audience

    @property
    def delegates(self):
        """Gets the delegates of this GenerateIdTokenRequest.

        The sequence of service accounts in a delegation chain. Each service account must be granted the `roles/iam.serviceAccountTokenCreator` role on its next service account in the chain. The last service account in the chain must be granted the `roles/iam.serviceAccountTokenCreator` role on the service account that is specified in the `name` field of the request. The delegates must have the following format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard character is required; replacing it with a project ID is invalid.

        :return: The delegates of this GenerateIdTokenRequest.
        :rtype: List[str]
        """
        return self._delegates

    @delegates.setter
    def delegates(self, delegates):
        """Sets the delegates of this GenerateIdTokenRequest.

        The sequence of service accounts in a delegation chain. Each service account must be granted the `roles/iam.serviceAccountTokenCreator` role on its next service account in the chain. The last service account in the chain must be granted the `roles/iam.serviceAccountTokenCreator` role on the service account that is specified in the `name` field of the request. The delegates must have the following format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard character is required; replacing it with a project ID is invalid.

        :param delegates: The delegates of this GenerateIdTokenRequest.
        :type delegates: List[str]
        """

        self._delegates = delegates

    @property
    def include_email(self):
        """Gets the include_email of this GenerateIdTokenRequest.

        Include the service account email in the token. If set to `true`, the token will contain `email` and `email_verified` claims.

        :return: The include_email of this GenerateIdTokenRequest.
        :rtype: bool
        """
        return self._include_email

    @include_email.setter
    def include_email(self, include_email):
        """Sets the include_email of this GenerateIdTokenRequest.

        Include the service account email in the token. If set to `true`, the token will contain `email` and `email_verified` claims.

        :param include_email: The include_email of this GenerateIdTokenRequest.
        :type include_email: bool
        """

        self._include_email = include_email
