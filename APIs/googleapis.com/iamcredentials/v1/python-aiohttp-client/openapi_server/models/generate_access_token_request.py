# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GenerateAccessTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delegates: List[str]=None, lifetime: str=None, scope: List[str]=None):
        """GenerateAccessTokenRequest - a model defined in OpenAPI

        :param delegates: The delegates of this GenerateAccessTokenRequest.
        :param lifetime: The lifetime of this GenerateAccessTokenRequest.
        :param scope: The scope of this GenerateAccessTokenRequest.
        """
        self.openapi_types = {
            'delegates': List[str],
            'lifetime': str,
            'scope': List[str]
        }

        self.attribute_map = {
            'delegates': 'delegates',
            'lifetime': 'lifetime',
            'scope': 'scope'
        }

        self._delegates = delegates
        self._lifetime = lifetime
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateAccessTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenerateAccessTokenRequest of this GenerateAccessTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delegates(self):
        """Gets the delegates of this GenerateAccessTokenRequest.

        The sequence of service accounts in a delegation chain. This field is required for [delegated requests](https://cloud.google.com/iam/help/credentials/delegated-request). For [direct requests](https://cloud.google.com/iam/help/credentials/direct-request), which are more common, do not specify this field. Each service account must be granted the `roles/iam.serviceAccountTokenCreator` role on its next service account in the chain. The last service account in the chain must be granted the `roles/iam.serviceAccountTokenCreator` role on the service account that is specified in the `name` field of the request. The delegates must have the following format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard character is required; replacing it with a project ID is invalid.

        :return: The delegates of this GenerateAccessTokenRequest.
        :rtype: List[str]
        """
        return self._delegates

    @delegates.setter
    def delegates(self, delegates):
        """Sets the delegates of this GenerateAccessTokenRequest.

        The sequence of service accounts in a delegation chain. This field is required for [delegated requests](https://cloud.google.com/iam/help/credentials/delegated-request). For [direct requests](https://cloud.google.com/iam/help/credentials/direct-request), which are more common, do not specify this field. Each service account must be granted the `roles/iam.serviceAccountTokenCreator` role on its next service account in the chain. The last service account in the chain must be granted the `roles/iam.serviceAccountTokenCreator` role on the service account that is specified in the `name` field of the request. The delegates must have the following format: `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard character is required; replacing it with a project ID is invalid.

        :param delegates: The delegates of this GenerateAccessTokenRequest.
        :type delegates: List[str]
        """

        self._delegates = delegates

    @property
    def lifetime(self):
        """Gets the lifetime of this GenerateAccessTokenRequest.

        The desired lifetime duration of the access token in seconds. By default, the maximum allowed value is 1 hour. To set a lifetime of up to 12 hours, you can add the service account as an allowed value in an Organization Policy that enforces the `constraints/iam.allowServiceAccountCredentialLifetimeExtension` constraint. See detailed instructions at https://cloud.google.com/iam/help/credentials/lifetime If a value is not specified, the token's lifetime will be set to a default value of 1 hour.

        :return: The lifetime of this GenerateAccessTokenRequest.
        :rtype: str
        """
        return self._lifetime

    @lifetime.setter
    def lifetime(self, lifetime):
        """Sets the lifetime of this GenerateAccessTokenRequest.

        The desired lifetime duration of the access token in seconds. By default, the maximum allowed value is 1 hour. To set a lifetime of up to 12 hours, you can add the service account as an allowed value in an Organization Policy that enforces the `constraints/iam.allowServiceAccountCredentialLifetimeExtension` constraint. See detailed instructions at https://cloud.google.com/iam/help/credentials/lifetime If a value is not specified, the token's lifetime will be set to a default value of 1 hour.

        :param lifetime: The lifetime of this GenerateAccessTokenRequest.
        :type lifetime: str
        """

        self._lifetime = lifetime

    @property
    def scope(self):
        """Gets the scope of this GenerateAccessTokenRequest.

        Required. Code to identify the scopes to be included in the OAuth 2.0 access token. See https://developers.google.com/identity/protocols/googlescopes for more information. At least one value required.

        :return: The scope of this GenerateAccessTokenRequest.
        :rtype: List[str]
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this GenerateAccessTokenRequest.

        Required. Code to identify the scopes to be included in the OAuth 2.0 access token. See https://developers.google.com/identity/protocols/googlescopes for more information. At least one value required.

        :param scope: The scope of this GenerateAccessTokenRequest.
        :type scope: List[str]
        """

        self._scope = scope
