/**
 * IAM Service Account Credentials API
 * Creates short-lived credentials for impersonating IAM service accounts. To enable this API, you must enable the IAM API (iam.googleapis.com). 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenerateIdTokenRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenerateIdTokenRequest::OAIGenerateIdTokenRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenerateIdTokenRequest::OAIGenerateIdTokenRequest() {
    this->initializeModel();
}

OAIGenerateIdTokenRequest::~OAIGenerateIdTokenRequest() {}

void OAIGenerateIdTokenRequest::initializeModel() {

    m_audience_isSet = false;
    m_audience_isValid = false;

    m_delegates_isSet = false;
    m_delegates_isValid = false;

    m_include_email_isSet = false;
    m_include_email_isValid = false;
}

void OAIGenerateIdTokenRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenerateIdTokenRequest::fromJsonObject(QJsonObject json) {

    m_audience_isValid = ::OpenAPI::fromJsonValue(m_audience, json[QString("audience")]);
    m_audience_isSet = !json[QString("audience")].isNull() && m_audience_isValid;

    m_delegates_isValid = ::OpenAPI::fromJsonValue(m_delegates, json[QString("delegates")]);
    m_delegates_isSet = !json[QString("delegates")].isNull() && m_delegates_isValid;

    m_include_email_isValid = ::OpenAPI::fromJsonValue(m_include_email, json[QString("includeEmail")]);
    m_include_email_isSet = !json[QString("includeEmail")].isNull() && m_include_email_isValid;
}

QString OAIGenerateIdTokenRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenerateIdTokenRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_audience_isSet) {
        obj.insert(QString("audience"), ::OpenAPI::toJsonValue(m_audience));
    }
    if (m_delegates.size() > 0) {
        obj.insert(QString("delegates"), ::OpenAPI::toJsonValue(m_delegates));
    }
    if (m_include_email_isSet) {
        obj.insert(QString("includeEmail"), ::OpenAPI::toJsonValue(m_include_email));
    }
    return obj;
}

QString OAIGenerateIdTokenRequest::getAudience() const {
    return m_audience;
}
void OAIGenerateIdTokenRequest::setAudience(const QString &audience) {
    m_audience = audience;
    m_audience_isSet = true;
}

bool OAIGenerateIdTokenRequest::is_audience_Set() const{
    return m_audience_isSet;
}

bool OAIGenerateIdTokenRequest::is_audience_Valid() const{
    return m_audience_isValid;
}

QList<QString> OAIGenerateIdTokenRequest::getDelegates() const {
    return m_delegates;
}
void OAIGenerateIdTokenRequest::setDelegates(const QList<QString> &delegates) {
    m_delegates = delegates;
    m_delegates_isSet = true;
}

bool OAIGenerateIdTokenRequest::is_delegates_Set() const{
    return m_delegates_isSet;
}

bool OAIGenerateIdTokenRequest::is_delegates_Valid() const{
    return m_delegates_isValid;
}

bool OAIGenerateIdTokenRequest::isIncludeEmail() const {
    return m_include_email;
}
void OAIGenerateIdTokenRequest::setIncludeEmail(const bool &include_email) {
    m_include_email = include_email;
    m_include_email_isSet = true;
}

bool OAIGenerateIdTokenRequest::is_include_email_Set() const{
    return m_include_email_isSet;
}

bool OAIGenerateIdTokenRequest::is_include_email_Valid() const{
    return m_include_email_isValid;
}

bool OAIGenerateIdTokenRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delegates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_email_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenerateIdTokenRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
