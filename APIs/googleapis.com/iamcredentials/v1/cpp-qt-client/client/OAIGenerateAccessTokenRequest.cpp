/**
 * IAM Service Account Credentials API
 * Creates short-lived credentials for impersonating IAM service accounts. To enable this API, you must enable the IAM API (iam.googleapis.com). 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenerateAccessTokenRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenerateAccessTokenRequest::OAIGenerateAccessTokenRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenerateAccessTokenRequest::OAIGenerateAccessTokenRequest() {
    this->initializeModel();
}

OAIGenerateAccessTokenRequest::~OAIGenerateAccessTokenRequest() {}

void OAIGenerateAccessTokenRequest::initializeModel() {

    m_delegates_isSet = false;
    m_delegates_isValid = false;

    m_lifetime_isSet = false;
    m_lifetime_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAIGenerateAccessTokenRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenerateAccessTokenRequest::fromJsonObject(QJsonObject json) {

    m_delegates_isValid = ::OpenAPI::fromJsonValue(m_delegates, json[QString("delegates")]);
    m_delegates_isSet = !json[QString("delegates")].isNull() && m_delegates_isValid;

    m_lifetime_isValid = ::OpenAPI::fromJsonValue(m_lifetime, json[QString("lifetime")]);
    m_lifetime_isSet = !json[QString("lifetime")].isNull() && m_lifetime_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;
}

QString OAIGenerateAccessTokenRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenerateAccessTokenRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_delegates.size() > 0) {
        obj.insert(QString("delegates"), ::OpenAPI::toJsonValue(m_delegates));
    }
    if (m_lifetime_isSet) {
        obj.insert(QString("lifetime"), ::OpenAPI::toJsonValue(m_lifetime));
    }
    if (m_scope.size() > 0) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    return obj;
}

QList<QString> OAIGenerateAccessTokenRequest::getDelegates() const {
    return m_delegates;
}
void OAIGenerateAccessTokenRequest::setDelegates(const QList<QString> &delegates) {
    m_delegates = delegates;
    m_delegates_isSet = true;
}

bool OAIGenerateAccessTokenRequest::is_delegates_Set() const{
    return m_delegates_isSet;
}

bool OAIGenerateAccessTokenRequest::is_delegates_Valid() const{
    return m_delegates_isValid;
}

QString OAIGenerateAccessTokenRequest::getLifetime() const {
    return m_lifetime;
}
void OAIGenerateAccessTokenRequest::setLifetime(const QString &lifetime) {
    m_lifetime = lifetime;
    m_lifetime_isSet = true;
}

bool OAIGenerateAccessTokenRequest::is_lifetime_Set() const{
    return m_lifetime_isSet;
}

bool OAIGenerateAccessTokenRequest::is_lifetime_Valid() const{
    return m_lifetime_isValid;
}

QList<QString> OAIGenerateAccessTokenRequest::getScope() const {
    return m_scope;
}
void OAIGenerateAccessTokenRequest::setScope(const QList<QString> &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIGenerateAccessTokenRequest::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIGenerateAccessTokenRequest::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIGenerateAccessTokenRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delegates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenerateAccessTokenRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
