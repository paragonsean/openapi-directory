/*
 * IAM Service Account Credentials API
 * Creates short-lived credentials for impersonating IAM service accounts. To enable this API, you must enable the IAM API (iam.googleapis.com). 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SignBlobResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:22.403696-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SignBlobResponse {
  public static final String SERIALIZED_NAME_KEY_ID = "keyId";
  @SerializedName(SERIALIZED_NAME_KEY_ID)
  private String keyId;

  public static final String SERIALIZED_NAME_SIGNED_BLOB = "signedBlob";
  @SerializedName(SERIALIZED_NAME_SIGNED_BLOB)
  private byte[] signedBlob;

  public SignBlobResponse() {
  }

  public SignBlobResponse keyId(String keyId) {
    this.keyId = keyId;
    return this;
  }

  /**
   * The ID of the key used to sign the blob. The key used for signing will remain valid for at least 12 hours after the blob is signed. To verify the signature, you can retrieve the public key in several formats from the following endpoints: - RSA public key wrapped in an X.509 v3 certificate: &#x60;https://www.googleapis.com/service_accounts/v1/metadata/x509/{ACCOUNT_EMAIL}&#x60; - Raw key in JSON format: &#x60;https://www.googleapis.com/service_accounts/v1/metadata/raw/{ACCOUNT_EMAIL}&#x60; - JSON Web Key (JWK): &#x60;https://www.googleapis.com/service_accounts/v1/metadata/jwk/{ACCOUNT_EMAIL}&#x60;
   * @return keyId
   */
  @javax.annotation.Nullable
  public String getKeyId() {
    return keyId;
  }

  public void setKeyId(String keyId) {
    this.keyId = keyId;
  }


  public SignBlobResponse signedBlob(byte[] signedBlob) {
    this.signedBlob = signedBlob;
    return this;
  }

  /**
   * The signature for the blob. Does not include the original blob. After the key pair referenced by the &#x60;key_id&#x60; response field expires, Google no longer exposes the public key that can be used to verify the blob. As a result, the receiver can no longer verify the signature.
   * @return signedBlob
   */
  @javax.annotation.Nullable
  public byte[] getSignedBlob() {
    return signedBlob;
  }

  public void setSignedBlob(byte[] signedBlob) {
    this.signedBlob = signedBlob;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignBlobResponse signBlobResponse = (SignBlobResponse) o;
    return Objects.equals(this.keyId, signBlobResponse.keyId) &&
        Arrays.equals(this.signedBlob, signBlobResponse.signedBlob);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyId, Arrays.hashCode(signedBlob));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignBlobResponse {\n");
    sb.append("    keyId: ").append(toIndentedString(keyId)).append("\n");
    sb.append("    signedBlob: ").append(toIndentedString(signedBlob)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("keyId");
    openapiFields.add("signedBlob");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SignBlobResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SignBlobResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SignBlobResponse is not found in the empty JSON string", SignBlobResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SignBlobResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SignBlobResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("keyId") != null && !jsonObj.get("keyId").isJsonNull()) && !jsonObj.get("keyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SignBlobResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SignBlobResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SignBlobResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SignBlobResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SignBlobResponse>() {
           @Override
           public void write(JsonWriter out, SignBlobResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SignBlobResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SignBlobResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SignBlobResponse
   * @throws IOException if the JSON string is invalid with respect to SignBlobResponse
   */
  public static SignBlobResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignBlobResponse.class);
  }

  /**
   * Convert an instance of SignBlobResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

