/*
 * IAM Service Account Credentials API
 * Creates short-lived credentials for impersonating IAM service accounts. To enable this API, you must enable the IAM API (iam.googleapis.com). 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GenerateAccessTokenRequest;
import org.openapitools.client.model.GenerateAccessTokenResponse;
import org.openapitools.client.model.GenerateIdTokenRequest;
import org.openapitools.client.model.GenerateIdTokenResponse;
import org.openapitools.client.model.SignBlobRequest;
import org.openapitools.client.model.SignBlobResponse;
import org.openapitools.client.model.SignJwtRequest;
import org.openapitools.client.model.SignJwtResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Generates an OAuth 2.0 access token for a service account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iamcredentialsProjectsServiceAccountsGenerateAccessTokenTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GenerateAccessTokenRequest generateAccessTokenRequest = null;
        GenerateAccessTokenResponse response = api.iamcredentialsProjectsServiceAccountsGenerateAccessToken(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, generateAccessTokenRequest);
        // TODO: test validations
    }

    /**
     * Generates an OpenID Connect ID token for a service account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iamcredentialsProjectsServiceAccountsGenerateIdTokenTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GenerateIdTokenRequest generateIdTokenRequest = null;
        GenerateIdTokenResponse response = api.iamcredentialsProjectsServiceAccountsGenerateIdToken(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, generateIdTokenRequest);
        // TODO: test validations
    }

    /**
     * Signs a blob using a service account&#39;s system-managed private key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iamcredentialsProjectsServiceAccountsSignBlobTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SignBlobRequest signBlobRequest = null;
        SignBlobResponse response = api.iamcredentialsProjectsServiceAccountsSignBlob(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, signBlobRequest);
        // TODO: test validations
    }

    /**
     * Signs a JWT using a service account&#39;s system-managed private key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iamcredentialsProjectsServiceAccountsSignJwtTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SignJwtRequest signJwtRequest = null;
        SignJwtResponse response = api.iamcredentialsProjectsServiceAccountsSignJwt(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, signJwtRequest);
        // TODO: test validations
    }

}
