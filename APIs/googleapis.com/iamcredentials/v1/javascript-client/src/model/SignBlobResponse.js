/**
 * IAM Service Account Credentials API
 * Creates short-lived credentials for impersonating IAM service accounts. To enable this API, you must enable the IAM API (iam.googleapis.com). 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SignBlobResponse model module.
 * @module model/SignBlobResponse
 * @version v1
 */
class SignBlobResponse {
    /**
     * Constructs a new <code>SignBlobResponse</code>.
     * @alias module:model/SignBlobResponse
     */
    constructor() { 
        
        SignBlobResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SignBlobResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SignBlobResponse} obj Optional instance to populate.
     * @return {module:model/SignBlobResponse} The populated <code>SignBlobResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SignBlobResponse();

            if (data.hasOwnProperty('keyId')) {
                obj['keyId'] = ApiClient.convertToType(data['keyId'], 'String');
            }
            if (data.hasOwnProperty('signedBlob')) {
                obj['signedBlob'] = ApiClient.convertToType(data['signedBlob'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SignBlobResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SignBlobResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['keyId'] && !(typeof data['keyId'] === 'string' || data['keyId'] instanceof String)) {
            throw new Error("Expected the field `keyId` to be a primitive type in the JSON string but got " + data['keyId']);
        }

        return true;
    }


}



/**
 * The ID of the key used to sign the blob. The key used for signing will remain valid for at least 12 hours after the blob is signed. To verify the signature, you can retrieve the public key in several formats from the following endpoints: - RSA public key wrapped in an X.509 v3 certificate: `https://www.googleapis.com/service_accounts/v1/metadata/x509/{ACCOUNT_EMAIL}` - Raw key in JSON format: `https://www.googleapis.com/service_accounts/v1/metadata/raw/{ACCOUNT_EMAIL}` - JSON Web Key (JWK): `https://www.googleapis.com/service_accounts/v1/metadata/jwk/{ACCOUNT_EMAIL}`
 * @member {String} keyId
 */
SignBlobResponse.prototype['keyId'] = undefined;

/**
 * The signature for the blob. Does not include the original blob. After the key pair referenced by the `key_id` response field expires, Google no longer exposes the public key that can be used to verify the blob. As a result, the receiver can no longer verify the signature.
 * @member {Blob} signedBlob
 */
SignBlobResponse.prototype['signedBlob'] = undefined;






export default SignBlobResponse;

