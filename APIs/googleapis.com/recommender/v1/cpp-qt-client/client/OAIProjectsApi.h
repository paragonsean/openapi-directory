/**
 * Recommender API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleCloudRecommenderV1Insight.h"
#include "OAIGoogleCloudRecommenderV1ListInsightsResponse.h"
#include "OAIGoogleCloudRecommenderV1ListRecommendationsResponse.h"
#include "OAIGoogleCloudRecommenderV1MarkInsightAcceptedRequest.h"
#include "OAIGoogleCloudRecommenderV1MarkRecommendationClaimedRequest.h"
#include "OAIGoogleCloudRecommenderV1MarkRecommendationDismissedRequest.h"
#include "OAIGoogleCloudRecommenderV1MarkRecommendationFailedRequest.h"
#include "OAIGoogleCloudRecommenderV1MarkRecommendationSucceededRequest.h"
#include "OAIGoogleCloudRecommenderV1Recommendation.h"
#include "OAIGoogleCloudRecommenderV1RecommenderConfig.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void recommender_projects_locations_insightTypes_insights_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_recommender_v1_mark_insight_accepted_request OAIGoogleCloudRecommenderV1MarkInsightAcceptedRequest [optional]
    */
    virtual void recommender_projects_locations_insightTypes_insights_markAccepted(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRecommenderV1MarkInsightAcceptedRequest> &oai_google_cloud_recommender_v1_mark_insight_accepted_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRecommenderV1MarkInsightAcceptedRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void recommender_projects_locations_recommenders_recommendations_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void recommender_projects_locations_recommenders_recommendations_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_recommender_v1_mark_recommendation_claimed_request OAIGoogleCloudRecommenderV1MarkRecommendationClaimedRequest [optional]
    */
    virtual void recommender_projects_locations_recommenders_recommendations_markClaimed(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRecommenderV1MarkRecommendationClaimedRequest> &oai_google_cloud_recommender_v1_mark_recommendation_claimed_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRecommenderV1MarkRecommendationClaimedRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_recommender_v1_mark_recommendation_dismissed_request OAIGoogleCloudRecommenderV1MarkRecommendationDismissedRequest [optional]
    */
    virtual void recommender_projects_locations_recommenders_recommendations_markDismissed(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRecommenderV1MarkRecommendationDismissedRequest> &oai_google_cloud_recommender_v1_mark_recommendation_dismissed_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRecommenderV1MarkRecommendationDismissedRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_recommender_v1_mark_recommendation_failed_request OAIGoogleCloudRecommenderV1MarkRecommendationFailedRequest [optional]
    */
    virtual void recommender_projects_locations_recommenders_recommendations_markFailed(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRecommenderV1MarkRecommendationFailedRequest> &oai_google_cloud_recommender_v1_mark_recommendation_failed_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRecommenderV1MarkRecommendationFailedRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_recommender_v1_mark_recommendation_succeeded_request OAIGoogleCloudRecommenderV1MarkRecommendationSucceededRequest [optional]
    */
    virtual void recommender_projects_locations_recommenders_recommendations_markSucceeded(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRecommenderV1MarkRecommendationSucceededRequest> &oai_google_cloud_recommender_v1_mark_recommendation_succeeded_request = ::OpenAPI::OptionalParam<OAIGoogleCloudRecommenderV1MarkRecommendationSucceededRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  validate_only bool [optional]
    * @param[in]  oai_google_cloud_recommender_v1_recommender_config OAIGoogleCloudRecommenderV1RecommenderConfig [optional]
    */
    virtual void recommender_projects_locations_recommenders_updateConfig(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudRecommenderV1RecommenderConfig> &oai_google_cloud_recommender_v1_recommender_config = ::OpenAPI::OptionalParam<OAIGoogleCloudRecommenderV1RecommenderConfig>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void recommender_projects_locations_insightTypes_insights_listCallback(OAIHttpRequestWorker *worker);
    void recommender_projects_locations_insightTypes_insights_markAcceptedCallback(OAIHttpRequestWorker *worker);
    void recommender_projects_locations_recommenders_recommendations_getCallback(OAIHttpRequestWorker *worker);
    void recommender_projects_locations_recommenders_recommendations_listCallback(OAIHttpRequestWorker *worker);
    void recommender_projects_locations_recommenders_recommendations_markClaimedCallback(OAIHttpRequestWorker *worker);
    void recommender_projects_locations_recommenders_recommendations_markDismissedCallback(OAIHttpRequestWorker *worker);
    void recommender_projects_locations_recommenders_recommendations_markFailedCallback(OAIHttpRequestWorker *worker);
    void recommender_projects_locations_recommenders_recommendations_markSucceededCallback(OAIHttpRequestWorker *worker);
    void recommender_projects_locations_recommenders_updateConfigCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void recommender_projects_locations_insightTypes_insights_listSignal(OAIGoogleCloudRecommenderV1ListInsightsResponse summary);
    void recommender_projects_locations_insightTypes_insights_markAcceptedSignal(OAIGoogleCloudRecommenderV1Insight summary);
    void recommender_projects_locations_recommenders_recommendations_getSignal(OAIGoogleCloudRecommenderV1Recommendation summary);
    void recommender_projects_locations_recommenders_recommendations_listSignal(OAIGoogleCloudRecommenderV1ListRecommendationsResponse summary);
    void recommender_projects_locations_recommenders_recommendations_markClaimedSignal(OAIGoogleCloudRecommenderV1Recommendation summary);
    void recommender_projects_locations_recommenders_recommendations_markDismissedSignal(OAIGoogleCloudRecommenderV1Recommendation summary);
    void recommender_projects_locations_recommenders_recommendations_markFailedSignal(OAIGoogleCloudRecommenderV1Recommendation summary);
    void recommender_projects_locations_recommenders_recommendations_markSucceededSignal(OAIGoogleCloudRecommenderV1Recommendation summary);
    void recommender_projects_locations_recommenders_updateConfigSignal(OAIGoogleCloudRecommenderV1RecommenderConfig summary);


    void recommender_projects_locations_insightTypes_insights_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRecommenderV1ListInsightsResponse summary);
    void recommender_projects_locations_insightTypes_insights_markAcceptedSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRecommenderV1Insight summary);
    void recommender_projects_locations_recommenders_recommendations_getSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRecommenderV1Recommendation summary);
    void recommender_projects_locations_recommenders_recommendations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRecommenderV1ListRecommendationsResponse summary);
    void recommender_projects_locations_recommenders_recommendations_markClaimedSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRecommenderV1Recommendation summary);
    void recommender_projects_locations_recommenders_recommendations_markDismissedSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRecommenderV1Recommendation summary);
    void recommender_projects_locations_recommenders_recommendations_markFailedSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRecommenderV1Recommendation summary);
    void recommender_projects_locations_recommenders_recommendations_markSucceededSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRecommenderV1Recommendation summary);
    void recommender_projects_locations_recommenders_updateConfigSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudRecommenderV1RecommenderConfig summary);

    Q_DECL_DEPRECATED_X("Use recommender_projects_locations_insightTypes_insights_listSignalError() instead")
    void recommender_projects_locations_insightTypes_insights_listSignalE(OAIGoogleCloudRecommenderV1ListInsightsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommender_projects_locations_insightTypes_insights_listSignalError(OAIGoogleCloudRecommenderV1ListInsightsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommender_projects_locations_insightTypes_insights_markAcceptedSignalError() instead")
    void recommender_projects_locations_insightTypes_insights_markAcceptedSignalE(OAIGoogleCloudRecommenderV1Insight summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommender_projects_locations_insightTypes_insights_markAcceptedSignalError(OAIGoogleCloudRecommenderV1Insight summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommender_projects_locations_recommenders_recommendations_getSignalError() instead")
    void recommender_projects_locations_recommenders_recommendations_getSignalE(OAIGoogleCloudRecommenderV1Recommendation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommender_projects_locations_recommenders_recommendations_getSignalError(OAIGoogleCloudRecommenderV1Recommendation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommender_projects_locations_recommenders_recommendations_listSignalError() instead")
    void recommender_projects_locations_recommenders_recommendations_listSignalE(OAIGoogleCloudRecommenderV1ListRecommendationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommender_projects_locations_recommenders_recommendations_listSignalError(OAIGoogleCloudRecommenderV1ListRecommendationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommender_projects_locations_recommenders_recommendations_markClaimedSignalError() instead")
    void recommender_projects_locations_recommenders_recommendations_markClaimedSignalE(OAIGoogleCloudRecommenderV1Recommendation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommender_projects_locations_recommenders_recommendations_markClaimedSignalError(OAIGoogleCloudRecommenderV1Recommendation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommender_projects_locations_recommenders_recommendations_markDismissedSignalError() instead")
    void recommender_projects_locations_recommenders_recommendations_markDismissedSignalE(OAIGoogleCloudRecommenderV1Recommendation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommender_projects_locations_recommenders_recommendations_markDismissedSignalError(OAIGoogleCloudRecommenderV1Recommendation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommender_projects_locations_recommenders_recommendations_markFailedSignalError() instead")
    void recommender_projects_locations_recommenders_recommendations_markFailedSignalE(OAIGoogleCloudRecommenderV1Recommendation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommender_projects_locations_recommenders_recommendations_markFailedSignalError(OAIGoogleCloudRecommenderV1Recommendation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommender_projects_locations_recommenders_recommendations_markSucceededSignalError() instead")
    void recommender_projects_locations_recommenders_recommendations_markSucceededSignalE(OAIGoogleCloudRecommenderV1Recommendation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommender_projects_locations_recommenders_recommendations_markSucceededSignalError(OAIGoogleCloudRecommenderV1Recommendation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommender_projects_locations_recommenders_updateConfigSignalError() instead")
    void recommender_projects_locations_recommenders_updateConfigSignalE(OAIGoogleCloudRecommenderV1RecommenderConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommender_projects_locations_recommenders_updateConfigSignalError(OAIGoogleCloudRecommenderV1RecommenderConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use recommender_projects_locations_insightTypes_insights_listSignalErrorFull() instead")
    void recommender_projects_locations_insightTypes_insights_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommender_projects_locations_insightTypes_insights_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommender_projects_locations_insightTypes_insights_markAcceptedSignalErrorFull() instead")
    void recommender_projects_locations_insightTypes_insights_markAcceptedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommender_projects_locations_insightTypes_insights_markAcceptedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommender_projects_locations_recommenders_recommendations_getSignalErrorFull() instead")
    void recommender_projects_locations_recommenders_recommendations_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommender_projects_locations_recommenders_recommendations_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommender_projects_locations_recommenders_recommendations_listSignalErrorFull() instead")
    void recommender_projects_locations_recommenders_recommendations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommender_projects_locations_recommenders_recommendations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommender_projects_locations_recommenders_recommendations_markClaimedSignalErrorFull() instead")
    void recommender_projects_locations_recommenders_recommendations_markClaimedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommender_projects_locations_recommenders_recommendations_markClaimedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommender_projects_locations_recommenders_recommendations_markDismissedSignalErrorFull() instead")
    void recommender_projects_locations_recommenders_recommendations_markDismissedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommender_projects_locations_recommenders_recommendations_markDismissedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommender_projects_locations_recommenders_recommendations_markFailedSignalErrorFull() instead")
    void recommender_projects_locations_recommenders_recommendations_markFailedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommender_projects_locations_recommenders_recommendations_markFailedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommender_projects_locations_recommenders_recommendations_markSucceededSignalErrorFull() instead")
    void recommender_projects_locations_recommenders_recommendations_markSucceededSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommender_projects_locations_recommenders_recommendations_markSucceededSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommender_projects_locations_recommenders_updateConfigSignalErrorFull() instead")
    void recommender_projects_locations_recommenders_updateConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommender_projects_locations_recommenders_updateConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
