/*
 * Recommender API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudRecommenderV1InsightRecommendationReference;
import org.openapitools.client.model.GoogleCloudRecommenderV1InsightStateInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An insight along with the information used to derive the insight. The insight may have associated recommendations as well.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:36.154935-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRecommenderV1Insight {
  public static final String SERIALIZED_NAME_ASSOCIATED_RECOMMENDATIONS = "associatedRecommendations";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_RECOMMENDATIONS)
  private List<GoogleCloudRecommenderV1InsightRecommendationReference> associatedRecommendations = new ArrayList<>();

  /**
   * Category being targeted by the insight.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    CATEGORY_UNSPECIFIED("CATEGORY_UNSPECIFIED"),
    
    COST("COST"),
    
    SECURITY("SECURITY"),
    
    PERFORMANCE("PERFORMANCE"),
    
    MANAGEABILITY("MANAGEABILITY"),
    
    SUSTAINABILITY("SUSTAINABILITY"),
    
    RELIABILITY("RELIABILITY");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private Map<String, Object> content = new HashMap<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_INSIGHT_SUBTYPE = "insightSubtype";
  @SerializedName(SERIALIZED_NAME_INSIGHT_SUBTYPE)
  private String insightSubtype;

  public static final String SERIALIZED_NAME_LAST_REFRESH_TIME = "lastRefreshTime";
  @SerializedName(SERIALIZED_NAME_LAST_REFRESH_TIME)
  private String lastRefreshTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OBSERVATION_PERIOD = "observationPeriod";
  @SerializedName(SERIALIZED_NAME_OBSERVATION_PERIOD)
  private String observationPeriod;

  /**
   * Insight&#39;s severity.
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    SEVERITY_UNSPECIFIED("SEVERITY_UNSPECIFIED"),
    
    LOW("LOW"),
    
    MEDIUM("MEDIUM"),
    
    HIGH("HIGH"),
    
    CRITICAL("CRITICAL");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  public static final String SERIALIZED_NAME_STATE_INFO = "stateInfo";
  @SerializedName(SERIALIZED_NAME_STATE_INFO)
  private GoogleCloudRecommenderV1InsightStateInfo stateInfo;

  public static final String SERIALIZED_NAME_TARGET_RESOURCES = "targetResources";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCES)
  private List<String> targetResources = new ArrayList<>();

  public GoogleCloudRecommenderV1Insight() {
  }

  public GoogleCloudRecommenderV1Insight associatedRecommendations(List<GoogleCloudRecommenderV1InsightRecommendationReference> associatedRecommendations) {
    this.associatedRecommendations = associatedRecommendations;
    return this;
  }

  public GoogleCloudRecommenderV1Insight addAssociatedRecommendationsItem(GoogleCloudRecommenderV1InsightRecommendationReference associatedRecommendationsItem) {
    if (this.associatedRecommendations == null) {
      this.associatedRecommendations = new ArrayList<>();
    }
    this.associatedRecommendations.add(associatedRecommendationsItem);
    return this;
  }

  /**
   * Recommendations derived from this insight.
   * @return associatedRecommendations
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRecommenderV1InsightRecommendationReference> getAssociatedRecommendations() {
    return associatedRecommendations;
  }

  public void setAssociatedRecommendations(List<GoogleCloudRecommenderV1InsightRecommendationReference> associatedRecommendations) {
    this.associatedRecommendations = associatedRecommendations;
  }


  public GoogleCloudRecommenderV1Insight category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * Category being targeted by the insight.
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public GoogleCloudRecommenderV1Insight content(Map<String, Object> content) {
    this.content = content;
    return this;
  }

  public GoogleCloudRecommenderV1Insight putContentItem(String key, Object contentItem) {
    if (this.content == null) {
      this.content = new HashMap<>();
    }
    this.content.put(key, contentItem);
    return this;
  }

  /**
   * A struct of custom fields to explain the insight. Example: \&quot;grantedPermissionsCount\&quot;: \&quot;1000\&quot;
   * @return content
   */
  @javax.annotation.Nullable
  public Map<String, Object> getContent() {
    return content;
  }

  public void setContent(Map<String, Object> content) {
    this.content = content;
  }


  public GoogleCloudRecommenderV1Insight description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Free-form human readable summary in English. The maximum length is 500 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleCloudRecommenderV1Insight etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Fingerprint of the Insight. Provides optimistic locking when updating states.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public GoogleCloudRecommenderV1Insight insightSubtype(String insightSubtype) {
    this.insightSubtype = insightSubtype;
    return this;
  }

  /**
   * Insight subtype. Insight content schema will be stable for a given subtype.
   * @return insightSubtype
   */
  @javax.annotation.Nullable
  public String getInsightSubtype() {
    return insightSubtype;
  }

  public void setInsightSubtype(String insightSubtype) {
    this.insightSubtype = insightSubtype;
  }


  public GoogleCloudRecommenderV1Insight lastRefreshTime(String lastRefreshTime) {
    this.lastRefreshTime = lastRefreshTime;
    return this;
  }

  /**
   * Timestamp of the latest data used to generate the insight.
   * @return lastRefreshTime
   */
  @javax.annotation.Nullable
  public String getLastRefreshTime() {
    return lastRefreshTime;
  }

  public void setLastRefreshTime(String lastRefreshTime) {
    this.lastRefreshTime = lastRefreshTime;
  }


  public GoogleCloudRecommenderV1Insight name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the insight.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudRecommenderV1Insight observationPeriod(String observationPeriod) {
    this.observationPeriod = observationPeriod;
    return this;
  }

  /**
   * Observation period that led to the insight. The source data used to generate the insight ends at last_refresh_time and begins at (last_refresh_time - observation_period).
   * @return observationPeriod
   */
  @javax.annotation.Nullable
  public String getObservationPeriod() {
    return observationPeriod;
  }

  public void setObservationPeriod(String observationPeriod) {
    this.observationPeriod = observationPeriod;
  }


  public GoogleCloudRecommenderV1Insight severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Insight&#39;s severity.
   * @return severity
   */
  @javax.annotation.Nullable
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public GoogleCloudRecommenderV1Insight stateInfo(GoogleCloudRecommenderV1InsightStateInfo stateInfo) {
    this.stateInfo = stateInfo;
    return this;
  }

  /**
   * Get stateInfo
   * @return stateInfo
   */
  @javax.annotation.Nullable
  public GoogleCloudRecommenderV1InsightStateInfo getStateInfo() {
    return stateInfo;
  }

  public void setStateInfo(GoogleCloudRecommenderV1InsightStateInfo stateInfo) {
    this.stateInfo = stateInfo;
  }


  public GoogleCloudRecommenderV1Insight targetResources(List<String> targetResources) {
    this.targetResources = targetResources;
    return this;
  }

  public GoogleCloudRecommenderV1Insight addTargetResourcesItem(String targetResourcesItem) {
    if (this.targetResources == null) {
      this.targetResources = new ArrayList<>();
    }
    this.targetResources.add(targetResourcesItem);
    return this;
  }

  /**
   * Fully qualified resource names that this insight is targeting.
   * @return targetResources
   */
  @javax.annotation.Nullable
  public List<String> getTargetResources() {
    return targetResources;
  }

  public void setTargetResources(List<String> targetResources) {
    this.targetResources = targetResources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRecommenderV1Insight googleCloudRecommenderV1Insight = (GoogleCloudRecommenderV1Insight) o;
    return Objects.equals(this.associatedRecommendations, googleCloudRecommenderV1Insight.associatedRecommendations) &&
        Objects.equals(this.category, googleCloudRecommenderV1Insight.category) &&
        Objects.equals(this.content, googleCloudRecommenderV1Insight.content) &&
        Objects.equals(this.description, googleCloudRecommenderV1Insight.description) &&
        Objects.equals(this.etag, googleCloudRecommenderV1Insight.etag) &&
        Objects.equals(this.insightSubtype, googleCloudRecommenderV1Insight.insightSubtype) &&
        Objects.equals(this.lastRefreshTime, googleCloudRecommenderV1Insight.lastRefreshTime) &&
        Objects.equals(this.name, googleCloudRecommenderV1Insight.name) &&
        Objects.equals(this.observationPeriod, googleCloudRecommenderV1Insight.observationPeriod) &&
        Objects.equals(this.severity, googleCloudRecommenderV1Insight.severity) &&
        Objects.equals(this.stateInfo, googleCloudRecommenderV1Insight.stateInfo) &&
        Objects.equals(this.targetResources, googleCloudRecommenderV1Insight.targetResources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associatedRecommendations, category, content, description, etag, insightSubtype, lastRefreshTime, name, observationPeriod, severity, stateInfo, targetResources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRecommenderV1Insight {\n");
    sb.append("    associatedRecommendations: ").append(toIndentedString(associatedRecommendations)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    insightSubtype: ").append(toIndentedString(insightSubtype)).append("\n");
    sb.append("    lastRefreshTime: ").append(toIndentedString(lastRefreshTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    observationPeriod: ").append(toIndentedString(observationPeriod)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    stateInfo: ").append(toIndentedString(stateInfo)).append("\n");
    sb.append("    targetResources: ").append(toIndentedString(targetResources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("associatedRecommendations");
    openapiFields.add("category");
    openapiFields.add("content");
    openapiFields.add("description");
    openapiFields.add("etag");
    openapiFields.add("insightSubtype");
    openapiFields.add("lastRefreshTime");
    openapiFields.add("name");
    openapiFields.add("observationPeriod");
    openapiFields.add("severity");
    openapiFields.add("stateInfo");
    openapiFields.add("targetResources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRecommenderV1Insight
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRecommenderV1Insight.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRecommenderV1Insight is not found in the empty JSON string", GoogleCloudRecommenderV1Insight.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRecommenderV1Insight.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRecommenderV1Insight` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("associatedRecommendations") != null && !jsonObj.get("associatedRecommendations").isJsonNull()) {
        JsonArray jsonArrayassociatedRecommendations = jsonObj.getAsJsonArray("associatedRecommendations");
        if (jsonArrayassociatedRecommendations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("associatedRecommendations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `associatedRecommendations` to be an array in the JSON string but got `%s`", jsonObj.get("associatedRecommendations").toString()));
          }

          // validate the optional field `associatedRecommendations` (array)
          for (int i = 0; i < jsonArrayassociatedRecommendations.size(); i++) {
            GoogleCloudRecommenderV1InsightRecommendationReference.validateJsonElement(jsonArrayassociatedRecommendations.get(i));
          };
        }
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryEnum.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("insightSubtype") != null && !jsonObj.get("insightSubtype").isJsonNull()) && !jsonObj.get("insightSubtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `insightSubtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("insightSubtype").toString()));
      }
      if ((jsonObj.get("lastRefreshTime") != null && !jsonObj.get("lastRefreshTime").isJsonNull()) && !jsonObj.get("lastRefreshTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastRefreshTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastRefreshTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("observationPeriod") != null && !jsonObj.get("observationPeriod").isJsonNull()) && !jsonObj.get("observationPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `observationPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("observationPeriod").toString()));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      }
      // validate the optional field `stateInfo`
      if (jsonObj.get("stateInfo") != null && !jsonObj.get("stateInfo").isJsonNull()) {
        GoogleCloudRecommenderV1InsightStateInfo.validateJsonElement(jsonObj.get("stateInfo"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targetResources") != null && !jsonObj.get("targetResources").isJsonNull() && !jsonObj.get("targetResources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetResources` to be an array in the JSON string but got `%s`", jsonObj.get("targetResources").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRecommenderV1Insight.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRecommenderV1Insight' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRecommenderV1Insight> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRecommenderV1Insight.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRecommenderV1Insight>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRecommenderV1Insight value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRecommenderV1Insight read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRecommenderV1Insight given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRecommenderV1Insight
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRecommenderV1Insight
   */
  public static GoogleCloudRecommenderV1Insight fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRecommenderV1Insight.class);
  }

  /**
   * Convert an instance of GoogleCloudRecommenderV1Insight to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

