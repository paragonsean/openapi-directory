/*
 * Recommender API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GoogleCloudRecommenderV1Insight;
import org.openapitools.client.model.GoogleCloudRecommenderV1ListInsightsResponse;
import org.openapitools.client.model.GoogleCloudRecommenderV1ListRecommendationsResponse;
import org.openapitools.client.model.GoogleCloudRecommenderV1MarkInsightAcceptedRequest;
import org.openapitools.client.model.GoogleCloudRecommenderV1MarkRecommendationClaimedRequest;
import org.openapitools.client.model.GoogleCloudRecommenderV1MarkRecommendationDismissedRequest;
import org.openapitools.client.model.GoogleCloudRecommenderV1MarkRecommendationFailedRequest;
import org.openapitools.client.model.GoogleCloudRecommenderV1MarkRecommendationSucceededRequest;
import org.openapitools.client.model.GoogleCloudRecommenderV1Recommendation;
import org.openapitools.client.model.GoogleCloudRecommenderV1RecommenderConfig;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Lists insights for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified insight type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommenderProjectsLocationsInsightTypesInsightsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudRecommenderV1ListInsightsResponse response = api.recommenderProjectsLocationsInsightTypesInsightsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Marks the Insight State as Accepted. Users can use this method to indicate to the Recommender API that they have applied some action based on the insight. This stops the insight content from being updated. MarkInsightAccepted can be applied to insights in ACTIVE state. Requires the recommender.*.update IAM permission for the specified insight.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommenderProjectsLocationsInsightTypesInsightsMarkAcceptedTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRecommenderV1MarkInsightAcceptedRequest googleCloudRecommenderV1MarkInsightAcceptedRequest = null;
        GoogleCloudRecommenderV1Insight response = api.recommenderProjectsLocationsInsightTypesInsightsMarkAccepted(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRecommenderV1MarkInsightAcceptedRequest);
        // TODO: test validations
    }

    /**
     * Gets the requested recommendation. Requires the recommender.*.get IAM permission for the specified recommender.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommenderProjectsLocationsRecommendersRecommendationsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRecommenderV1Recommendation response = api.recommenderProjectsLocationsRecommendersRecommendationsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists recommendations for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified recommender.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommenderProjectsLocationsRecommendersRecommendationsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudRecommenderV1ListRecommendationsResponse response = api.recommenderProjectsLocationsRecommendersRecommendationsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Marks the Recommendation State as Claimed. Users can use this method to indicate to the Recommender API that they are starting to apply the recommendation themselves. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationClaimed can be applied to recommendations in CLAIMED, SUCCEEDED, FAILED, or ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommenderProjectsLocationsRecommendersRecommendationsMarkClaimedTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRecommenderV1MarkRecommendationClaimedRequest googleCloudRecommenderV1MarkRecommendationClaimedRequest = null;
        GoogleCloudRecommenderV1Recommendation response = api.recommenderProjectsLocationsRecommendersRecommendationsMarkClaimed(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRecommenderV1MarkRecommendationClaimedRequest);
        // TODO: test validations
    }

    /**
     * Mark the Recommendation State as Dismissed. Users can use this method to indicate to the Recommender API that an ACTIVE recommendation has to be marked back as DISMISSED. MarkRecommendationDismissed can be applied to recommendations in ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommenderProjectsLocationsRecommendersRecommendationsMarkDismissedTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRecommenderV1MarkRecommendationDismissedRequest googleCloudRecommenderV1MarkRecommendationDismissedRequest = null;
        GoogleCloudRecommenderV1Recommendation response = api.recommenderProjectsLocationsRecommendersRecommendationsMarkDismissed(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRecommenderV1MarkRecommendationDismissedRequest);
        // TODO: test validations
    }

    /**
     * Marks the Recommendation State as Failed. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation failed. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationFailed can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommenderProjectsLocationsRecommendersRecommendationsMarkFailedTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRecommenderV1MarkRecommendationFailedRequest googleCloudRecommenderV1MarkRecommendationFailedRequest = null;
        GoogleCloudRecommenderV1Recommendation response = api.recommenderProjectsLocationsRecommendersRecommendationsMarkFailed(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRecommenderV1MarkRecommendationFailedRequest);
        // TODO: test validations
    }

    /**
     * Marks the Recommendation State as Succeeded. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation was successful. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationSucceeded can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommenderProjectsLocationsRecommendersRecommendationsMarkSucceededTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRecommenderV1MarkRecommendationSucceededRequest googleCloudRecommenderV1MarkRecommendationSucceededRequest = null;
        GoogleCloudRecommenderV1Recommendation response = api.recommenderProjectsLocationsRecommendersRecommendationsMarkSucceeded(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRecommenderV1MarkRecommendationSucceededRequest);
        // TODO: test validations
    }

    /**
     * Updates a Recommender Config. This will create a new revision of the config.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommenderProjectsLocationsRecommendersUpdateConfigTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        Boolean validateOnly = null;
        GoogleCloudRecommenderV1RecommenderConfig googleCloudRecommenderV1RecommenderConfig = null;
        GoogleCloudRecommenderV1RecommenderConfig response = api.recommenderProjectsLocationsRecommendersUpdateConfig(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, validateOnly, googleCloudRecommenderV1RecommenderConfig);
        // TODO: test validations
    }

}
