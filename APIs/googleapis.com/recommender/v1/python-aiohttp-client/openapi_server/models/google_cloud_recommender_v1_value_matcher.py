# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudRecommenderV1ValueMatcher(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, matches_pattern: str=None):
        """GoogleCloudRecommenderV1ValueMatcher - a model defined in OpenAPI

        :param matches_pattern: The matches_pattern of this GoogleCloudRecommenderV1ValueMatcher.
        """
        self.openapi_types = {
            'matches_pattern': str
        }

        self.attribute_map = {
            'matches_pattern': 'matchesPattern'
        }

        self._matches_pattern = matches_pattern

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRecommenderV1ValueMatcher':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRecommenderV1ValueMatcher of this GoogleCloudRecommenderV1ValueMatcher.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def matches_pattern(self):
        """Gets the matches_pattern of this GoogleCloudRecommenderV1ValueMatcher.

        To be used for full regex matching. The regular expression is using the Google RE2 syntax (https://github.com/google/re2/wiki/Syntax), so to be used with RE2::FullMatch

        :return: The matches_pattern of this GoogleCloudRecommenderV1ValueMatcher.
        :rtype: str
        """
        return self._matches_pattern

    @matches_pattern.setter
    def matches_pattern(self, matches_pattern):
        """Sets the matches_pattern of this GoogleCloudRecommenderV1ValueMatcher.

        To be used for full regex matching. The regular expression is using the Google RE2 syntax (https://github.com/google/re2/wiki/Syntax), so to be used with RE2::FullMatch

        :param matches_pattern: The matches_pattern of this GoogleCloudRecommenderV1ValueMatcher.
        :type matches_pattern: str
        """

        self._matches_pattern = matches_pattern
