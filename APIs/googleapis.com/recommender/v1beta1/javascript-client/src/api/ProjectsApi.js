/**
 * Recommender API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GoogleCloudLocationListLocationsResponse from '../model/GoogleCloudLocationListLocationsResponse';
import GoogleCloudRecommenderV1beta1Insight from '../model/GoogleCloudRecommenderV1beta1Insight';
import GoogleCloudRecommenderV1beta1ListInsightsResponse from '../model/GoogleCloudRecommenderV1beta1ListInsightsResponse';
import GoogleCloudRecommenderV1beta1ListRecommendationsResponse from '../model/GoogleCloudRecommenderV1beta1ListRecommendationsResponse';
import GoogleCloudRecommenderV1beta1MarkInsightAcceptedRequest from '../model/GoogleCloudRecommenderV1beta1MarkInsightAcceptedRequest';
import GoogleCloudRecommenderV1beta1MarkRecommendationClaimedRequest from '../model/GoogleCloudRecommenderV1beta1MarkRecommendationClaimedRequest';
import GoogleCloudRecommenderV1beta1MarkRecommendationDismissedRequest from '../model/GoogleCloudRecommenderV1beta1MarkRecommendationDismissedRequest';
import GoogleCloudRecommenderV1beta1MarkRecommendationFailedRequest from '../model/GoogleCloudRecommenderV1beta1MarkRecommendationFailedRequest';
import GoogleCloudRecommenderV1beta1MarkRecommendationSucceededRequest from '../model/GoogleCloudRecommenderV1beta1MarkRecommendationSucceededRequest';
import GoogleCloudRecommenderV1beta1Recommendation from '../model/GoogleCloudRecommenderV1beta1Recommendation';
import GoogleCloudRecommenderV1beta1RecommenderConfig from '../model/GoogleCloudRecommenderV1beta1RecommenderConfig';

/**
* Projects service.
* @module api/ProjectsApi
* @version v1beta1
*/
export default class ProjectsApi {

    /**
    * Constructs a new ProjectsApi. 
    * @alias module:api/ProjectsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the recommenderProjectsLocationsInsightTypesInsightsList operation.
     * @callback module:api/ProjectsApi~recommenderProjectsLocationsInsightTypesInsightsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleCloudRecommenderV1beta1ListInsightsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists insights for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified insight type.
     * @param {String} parent Required. The container resource on which to execute the request. Acceptable formats: * `projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]` * `projects/[PROJECT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]` * `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]` * `folders/[FOLDER_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]` * `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]` LOCATION here refers to GCP Locations: https://cloud.google.com/about/locations/ INSIGHT_TYPE_ID refers to supported insight types: https://cloud.google.com/recommender/docs/insights/insight-types.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Optional. Filter expression to restrict the insights returned. Supported filter fields: * `stateInfo.state` * `insightSubtype` * `severity` * `targetResources` Examples: * `stateInfo.state = ACTIVE OR stateInfo.state = DISMISSED` * `insightSubtype = PERMISSIONS_USAGE` * `severity = CRITICAL OR severity = HIGH` * `targetResources : //compute.googleapis.com/projects/1234/zones/us-central1-a/instances/instance-1` * `stateInfo.state = ACTIVE AND (severity = CRITICAL OR severity = HIGH)` The max allowed filter length is 500 characters. (These expressions are based on the filter language described at https://google.aip.dev/160)
     * @param {Number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. If not specified, the server will determine the number of results to return.
     * @param {String} [pageToken] Optional. If present, retrieves the next batch of results from the preceding call to this method. `page_token` must be the value of `next_page_token` from the previous response. The values of other method parameters must be identical to those in the previous call.
     * @param {module:api/ProjectsApi~recommenderProjectsLocationsInsightTypesInsightsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleCloudRecommenderV1beta1ListInsightsResponse}
     */
    recommenderProjectsLocationsInsightTypesInsightsList(parent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parent' is set
      if (parent === undefined || parent === null) {
        throw new Error("Missing the required parameter 'parent' when calling recommenderProjectsLocationsInsightTypesInsightsList");
      }

      let pathParams = {
        'parent': parent
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleCloudRecommenderV1beta1ListInsightsResponse;
      return this.apiClient.callApi(
        '/v1beta1/{parent}/insights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommenderProjectsLocationsInsightTypesInsightsMarkAccepted operation.
     * @callback module:api/ProjectsApi~recommenderProjectsLocationsInsightTypesInsightsMarkAcceptedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleCloudRecommenderV1beta1Insight} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marks the Insight State as Accepted. Users can use this method to indicate to the Recommender API that they have applied some action based on the insight. This stops the insight content from being updated. MarkInsightAccepted can be applied to insights in ACTIVE state. Requires the recommender.*.update IAM permission for the specified insight.
     * @param {String} name Required. Name of the insight.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GoogleCloudRecommenderV1beta1MarkInsightAcceptedRequest} [googleCloudRecommenderV1beta1MarkInsightAcceptedRequest] 
     * @param {module:api/ProjectsApi~recommenderProjectsLocationsInsightTypesInsightsMarkAcceptedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleCloudRecommenderV1beta1Insight}
     */
    recommenderProjectsLocationsInsightTypesInsightsMarkAccepted(name, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleCloudRecommenderV1beta1MarkInsightAcceptedRequest'];
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling recommenderProjectsLocationsInsightTypesInsightsMarkAccepted");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GoogleCloudRecommenderV1beta1Insight;
      return this.apiClient.callApi(
        '/v1beta1/{name}:markAccepted', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommenderProjectsLocationsList operation.
     * @callback module:api/ProjectsApi~recommenderProjectsLocationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleCloudLocationListLocationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists locations with recommendations or insights.
     * @param {String} name The resource that owns the locations collection, if applicable.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] A filter to narrow down results to a preferred subset. The filtering language accepts strings like `\"displayName=tokyo\"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).
     * @param {Number} [pageSize] The maximum number of results to return. If not set, the service selects a default.
     * @param {String} [pageToken] A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.
     * @param {module:api/ProjectsApi~recommenderProjectsLocationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleCloudLocationListLocationsResponse}
     */
    recommenderProjectsLocationsList(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling recommenderProjectsLocationsList");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleCloudLocationListLocationsResponse;
      return this.apiClient.callApi(
        '/v1beta1/{name}/locations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommenderProjectsLocationsRecommendersRecommendationsGet operation.
     * @callback module:api/ProjectsApi~recommenderProjectsLocationsRecommendersRecommendationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleCloudRecommenderV1beta1Recommendation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the requested recommendation. Requires the recommender.*.get IAM permission for the specified recommender.
     * @param {String} name Required. Name of the recommendation.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/ProjectsApi~recommenderProjectsLocationsRecommendersRecommendationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleCloudRecommenderV1beta1Recommendation}
     */
    recommenderProjectsLocationsRecommendersRecommendationsGet(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling recommenderProjectsLocationsRecommendersRecommendationsGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleCloudRecommenderV1beta1Recommendation;
      return this.apiClient.callApi(
        '/v1beta1/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommenderProjectsLocationsRecommendersRecommendationsList operation.
     * @callback module:api/ProjectsApi~recommenderProjectsLocationsRecommendersRecommendationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleCloudRecommenderV1beta1ListRecommendationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists recommendations for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified recommender.
     * @param {String} parent Required. The container resource on which to execute the request. Acceptable formats: * `projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]` * `projects/[PROJECT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]` * `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]` * `folders/[FOLDER_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]` * `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]` LOCATION here refers to GCP Locations: https://cloud.google.com/about/locations/ RECOMMENDER_ID refers to supported recommenders: https://cloud.google.com/recommender/docs/recommenders.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Filter expression to restrict the recommendations returned. Supported filter fields: * `state_info.state` * `recommenderSubtype` * `priority` * `targetResources` Examples: * `stateInfo.state = ACTIVE OR stateInfo.state = DISMISSED` * `recommenderSubtype = REMOVE_ROLE OR recommenderSubtype = REPLACE_ROLE` * `priority = P1 OR priority = P2` * `targetResources : //compute.googleapis.com/projects/1234/zones/us-central1-a/instances/instance-1` * `stateInfo.state = ACTIVE AND (priority = P1 OR priority = P2)` The max allowed filter length is 500 characters. (These expressions are based on the filter language described at https://google.aip.dev/160)
     * @param {Number} [pageSize] Optional. The maximum number of results to return from this request. Non-positive values are ignored. If not specified, the server will determine the number of results to return.
     * @param {String} [pageToken] Optional. If present, retrieves the next batch of results from the preceding call to this method. `page_token` must be the value of `next_page_token` from the previous response. The values of other method parameters must be identical to those in the previous call.
     * @param {module:api/ProjectsApi~recommenderProjectsLocationsRecommendersRecommendationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleCloudRecommenderV1beta1ListRecommendationsResponse}
     */
    recommenderProjectsLocationsRecommendersRecommendationsList(parent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parent' is set
      if (parent === undefined || parent === null) {
        throw new Error("Missing the required parameter 'parent' when calling recommenderProjectsLocationsRecommendersRecommendationsList");
      }

      let pathParams = {
        'parent': parent
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleCloudRecommenderV1beta1ListRecommendationsResponse;
      return this.apiClient.callApi(
        '/v1beta1/{parent}/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommenderProjectsLocationsRecommendersRecommendationsMarkClaimed operation.
     * @callback module:api/ProjectsApi~recommenderProjectsLocationsRecommendersRecommendationsMarkClaimedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleCloudRecommenderV1beta1Recommendation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marks the Recommendation State as Claimed. Users can use this method to indicate to the Recommender API that they are starting to apply the recommendation themselves. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationClaimed can be applied to recommendations in CLAIMED or ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.
     * @param {String} name Required. Name of the recommendation.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GoogleCloudRecommenderV1beta1MarkRecommendationClaimedRequest} [googleCloudRecommenderV1beta1MarkRecommendationClaimedRequest] 
     * @param {module:api/ProjectsApi~recommenderProjectsLocationsRecommendersRecommendationsMarkClaimedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleCloudRecommenderV1beta1Recommendation}
     */
    recommenderProjectsLocationsRecommendersRecommendationsMarkClaimed(name, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleCloudRecommenderV1beta1MarkRecommendationClaimedRequest'];
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling recommenderProjectsLocationsRecommendersRecommendationsMarkClaimed");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GoogleCloudRecommenderV1beta1Recommendation;
      return this.apiClient.callApi(
        '/v1beta1/{name}:markClaimed', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommenderProjectsLocationsRecommendersRecommendationsMarkDismissed operation.
     * @callback module:api/ProjectsApi~recommenderProjectsLocationsRecommendersRecommendationsMarkDismissedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleCloudRecommenderV1beta1Recommendation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark the Recommendation State as Dismissed. Users can use this method to indicate to the Recommender API that an ACTIVE recommendation has to be marked back as DISMISSED. MarkRecommendationDismissed can be applied to recommendations in ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.
     * @param {String} name Required. Name of the recommendation.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GoogleCloudRecommenderV1beta1MarkRecommendationDismissedRequest} [googleCloudRecommenderV1beta1MarkRecommendationDismissedRequest] 
     * @param {module:api/ProjectsApi~recommenderProjectsLocationsRecommendersRecommendationsMarkDismissedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleCloudRecommenderV1beta1Recommendation}
     */
    recommenderProjectsLocationsRecommendersRecommendationsMarkDismissed(name, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleCloudRecommenderV1beta1MarkRecommendationDismissedRequest'];
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling recommenderProjectsLocationsRecommendersRecommendationsMarkDismissed");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GoogleCloudRecommenderV1beta1Recommendation;
      return this.apiClient.callApi(
        '/v1beta1/{name}:markDismissed', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommenderProjectsLocationsRecommendersRecommendationsMarkFailed operation.
     * @callback module:api/ProjectsApi~recommenderProjectsLocationsRecommendersRecommendationsMarkFailedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleCloudRecommenderV1beta1Recommendation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marks the Recommendation State as Failed. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation failed. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationFailed can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.
     * @param {String} name Required. Name of the recommendation.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GoogleCloudRecommenderV1beta1MarkRecommendationFailedRequest} [googleCloudRecommenderV1beta1MarkRecommendationFailedRequest] 
     * @param {module:api/ProjectsApi~recommenderProjectsLocationsRecommendersRecommendationsMarkFailedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleCloudRecommenderV1beta1Recommendation}
     */
    recommenderProjectsLocationsRecommendersRecommendationsMarkFailed(name, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleCloudRecommenderV1beta1MarkRecommendationFailedRequest'];
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling recommenderProjectsLocationsRecommendersRecommendationsMarkFailed");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GoogleCloudRecommenderV1beta1Recommendation;
      return this.apiClient.callApi(
        '/v1beta1/{name}:markFailed', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommenderProjectsLocationsRecommendersRecommendationsMarkSucceeded operation.
     * @callback module:api/ProjectsApi~recommenderProjectsLocationsRecommendersRecommendationsMarkSucceededCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleCloudRecommenderV1beta1Recommendation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marks the Recommendation State as Succeeded. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation was successful. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationSucceeded can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.
     * @param {String} name Required. Name of the recommendation.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GoogleCloudRecommenderV1beta1MarkRecommendationSucceededRequest} [googleCloudRecommenderV1beta1MarkRecommendationSucceededRequest] 
     * @param {module:api/ProjectsApi~recommenderProjectsLocationsRecommendersRecommendationsMarkSucceededCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleCloudRecommenderV1beta1Recommendation}
     */
    recommenderProjectsLocationsRecommendersRecommendationsMarkSucceeded(name, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleCloudRecommenderV1beta1MarkRecommendationSucceededRequest'];
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling recommenderProjectsLocationsRecommendersRecommendationsMarkSucceeded");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GoogleCloudRecommenderV1beta1Recommendation;
      return this.apiClient.callApi(
        '/v1beta1/{name}:markSucceeded', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommenderProjectsLocationsRecommendersUpdateConfig operation.
     * @callback module:api/ProjectsApi~recommenderProjectsLocationsRecommendersUpdateConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleCloudRecommenderV1beta1RecommenderConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Recommender Config. This will create a new revision of the config.
     * @param {String} name Name of recommender config. Eg, projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [updateMask] The list of fields to be updated.
     * @param {Boolean} [validateOnly] If true, validate the request and preview the change, but do not actually update it.
     * @param {module:model/GoogleCloudRecommenderV1beta1RecommenderConfig} [googleCloudRecommenderV1beta1RecommenderConfig] 
     * @param {module:api/ProjectsApi~recommenderProjectsLocationsRecommendersUpdateConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleCloudRecommenderV1beta1RecommenderConfig}
     */
    recommenderProjectsLocationsRecommendersUpdateConfig(name, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleCloudRecommenderV1beta1RecommenderConfig'];
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling recommenderProjectsLocationsRecommendersUpdateConfig");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'updateMask': opts['updateMask'],
        'validateOnly': opts['validateOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GoogleCloudRecommenderV1beta1RecommenderConfig;
      return this.apiClient.callApi(
        '/v1beta1/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
