/**
 * Recommender API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudLocationLocation model module.
 * @module model/GoogleCloudLocationLocation
 * @version v1beta1
 */
class GoogleCloudLocationLocation {
    /**
     * Constructs a new <code>GoogleCloudLocationLocation</code>.
     * A resource that represents a Google Cloud location.
     * @alias module:model/GoogleCloudLocationLocation
     */
    constructor() { 
        
        GoogleCloudLocationLocation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudLocationLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudLocationLocation} obj Optional instance to populate.
     * @return {module:model/GoogleCloudLocationLocation} The populated <code>GoogleCloudLocationLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudLocationLocation();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('locationId')) {
                obj['locationId'] = ApiClient.convertToType(data['locationId'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': Object});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudLocationLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudLocationLocation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['locationId'] && !(typeof data['locationId'] === 'string' || data['locationId'] instanceof String)) {
            throw new Error("Expected the field `locationId` to be a primitive type in the JSON string but got " + data['locationId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".
 * @member {String} displayName
 */
GoogleCloudLocationLocation.prototype['displayName'] = undefined;

/**
 * Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}
 * @member {Object.<String, String>} labels
 */
GoogleCloudLocationLocation.prototype['labels'] = undefined;

/**
 * The canonical id for this location. For example: `\"us-east1\"`.
 * @member {String} locationId
 */
GoogleCloudLocationLocation.prototype['locationId'] = undefined;

/**
 * Service-specific metadata. For example the available capacity at the given location.
 * @member {Object.<String, Object>} metadata
 */
GoogleCloudLocationLocation.prototype['metadata'] = undefined;

/**
 * Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`
 * @member {String} name
 */
GoogleCloudLocationLocation.prototype['name'] = undefined;






export default GoogleCloudLocationLocation;

