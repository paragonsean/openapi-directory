/**
 * Recommender API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRecommenderV1beta1ReliabilityProjection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRecommenderV1beta1ReliabilityProjection::OAIGoogleCloudRecommenderV1beta1ReliabilityProjection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRecommenderV1beta1ReliabilityProjection::OAIGoogleCloudRecommenderV1beta1ReliabilityProjection() {
    this->initializeModel();
}

OAIGoogleCloudRecommenderV1beta1ReliabilityProjection::~OAIGoogleCloudRecommenderV1beta1ReliabilityProjection() {}

void OAIGoogleCloudRecommenderV1beta1ReliabilityProjection::initializeModel() {

    m_details_isSet = false;
    m_details_isValid = false;

    m_risks_isSet = false;
    m_risks_isValid = false;
}

void OAIGoogleCloudRecommenderV1beta1ReliabilityProjection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRecommenderV1beta1ReliabilityProjection::fromJsonObject(QJsonObject json) {

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_risks_isValid = ::OpenAPI::fromJsonValue(m_risks, json[QString("risks")]);
    m_risks_isSet = !json[QString("risks")].isNull() && m_risks_isValid;
}

QString OAIGoogleCloudRecommenderV1beta1ReliabilityProjection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRecommenderV1beta1ReliabilityProjection::asJsonObject() const {
    QJsonObject obj;
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_risks.size() > 0) {
        obj.insert(QString("risks"), ::OpenAPI::toJsonValue(m_risks));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIGoogleCloudRecommenderV1beta1ReliabilityProjection::getDetails() const {
    return m_details;
}
void OAIGoogleCloudRecommenderV1beta1ReliabilityProjection::setDetails(const QMap<QString, QJsonValue> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIGoogleCloudRecommenderV1beta1ReliabilityProjection::is_details_Set() const{
    return m_details_isSet;
}

bool OAIGoogleCloudRecommenderV1beta1ReliabilityProjection::is_details_Valid() const{
    return m_details_isValid;
}

QList<QString> OAIGoogleCloudRecommenderV1beta1ReliabilityProjection::getRisks() const {
    return m_risks;
}
void OAIGoogleCloudRecommenderV1beta1ReliabilityProjection::setRisks(const QList<QString> &risks) {
    m_risks = risks;
    m_risks_isSet = true;
}

bool OAIGoogleCloudRecommenderV1beta1ReliabilityProjection::is_risks_Set() const{
    return m_risks_isSet;
}

bool OAIGoogleCloudRecommenderV1beta1ReliabilityProjection::is_risks_Valid() const{
    return m_risks_isValid;
}

bool OAIGoogleCloudRecommenderV1beta1ReliabilityProjection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_risks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRecommenderV1beta1ReliabilityProjection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
