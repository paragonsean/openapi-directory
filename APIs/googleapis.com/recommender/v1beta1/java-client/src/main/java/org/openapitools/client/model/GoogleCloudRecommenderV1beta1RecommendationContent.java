/*
 * Recommender API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudRecommenderV1beta1OperationGroup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains what resources are changing and how they are changing.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:34.351793-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRecommenderV1beta1RecommendationContent {
  public static final String SERIALIZED_NAME_OPERATION_GROUPS = "operationGroups";
  @SerializedName(SERIALIZED_NAME_OPERATION_GROUPS)
  private List<GoogleCloudRecommenderV1beta1OperationGroup> operationGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_OVERVIEW = "overview";
  @SerializedName(SERIALIZED_NAME_OVERVIEW)
  private Map<String, Object> overview = new HashMap<>();

  public GoogleCloudRecommenderV1beta1RecommendationContent() {
  }

  public GoogleCloudRecommenderV1beta1RecommendationContent operationGroups(List<GoogleCloudRecommenderV1beta1OperationGroup> operationGroups) {
    this.operationGroups = operationGroups;
    return this;
  }

  public GoogleCloudRecommenderV1beta1RecommendationContent addOperationGroupsItem(GoogleCloudRecommenderV1beta1OperationGroup operationGroupsItem) {
    if (this.operationGroups == null) {
      this.operationGroups = new ArrayList<>();
    }
    this.operationGroups.add(operationGroupsItem);
    return this;
  }

  /**
   * Operations to one or more Google Cloud resources grouped in such a way that, all operations within one group are expected to be performed atomically and in an order.
   * @return operationGroups
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRecommenderV1beta1OperationGroup> getOperationGroups() {
    return operationGroups;
  }

  public void setOperationGroups(List<GoogleCloudRecommenderV1beta1OperationGroup> operationGroups) {
    this.operationGroups = operationGroups;
  }


  public GoogleCloudRecommenderV1beta1RecommendationContent overview(Map<String, Object> overview) {
    this.overview = overview;
    return this;
  }

  public GoogleCloudRecommenderV1beta1RecommendationContent putOverviewItem(String key, Object overviewItem) {
    if (this.overview == null) {
      this.overview = new HashMap<>();
    }
    this.overview.put(key, overviewItem);
    return this;
  }

  /**
   * Condensed overview information about the recommendation.
   * @return overview
   */
  @javax.annotation.Nullable
  public Map<String, Object> getOverview() {
    return overview;
  }

  public void setOverview(Map<String, Object> overview) {
    this.overview = overview;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRecommenderV1beta1RecommendationContent googleCloudRecommenderV1beta1RecommendationContent = (GoogleCloudRecommenderV1beta1RecommendationContent) o;
    return Objects.equals(this.operationGroups, googleCloudRecommenderV1beta1RecommendationContent.operationGroups) &&
        Objects.equals(this.overview, googleCloudRecommenderV1beta1RecommendationContent.overview);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operationGroups, overview);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRecommenderV1beta1RecommendationContent {\n");
    sb.append("    operationGroups: ").append(toIndentedString(operationGroups)).append("\n");
    sb.append("    overview: ").append(toIndentedString(overview)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("operationGroups");
    openapiFields.add("overview");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRecommenderV1beta1RecommendationContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRecommenderV1beta1RecommendationContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRecommenderV1beta1RecommendationContent is not found in the empty JSON string", GoogleCloudRecommenderV1beta1RecommendationContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRecommenderV1beta1RecommendationContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRecommenderV1beta1RecommendationContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("operationGroups") != null && !jsonObj.get("operationGroups").isJsonNull()) {
        JsonArray jsonArrayoperationGroups = jsonObj.getAsJsonArray("operationGroups");
        if (jsonArrayoperationGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("operationGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `operationGroups` to be an array in the JSON string but got `%s`", jsonObj.get("operationGroups").toString()));
          }

          // validate the optional field `operationGroups` (array)
          for (int i = 0; i < jsonArrayoperationGroups.size(); i++) {
            GoogleCloudRecommenderV1beta1OperationGroup.validateJsonElement(jsonArrayoperationGroups.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRecommenderV1beta1RecommendationContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRecommenderV1beta1RecommendationContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRecommenderV1beta1RecommendationContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRecommenderV1beta1RecommendationContent.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRecommenderV1beta1RecommendationContent>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRecommenderV1beta1RecommendationContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRecommenderV1beta1RecommendationContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRecommenderV1beta1RecommendationContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRecommenderV1beta1RecommendationContent
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRecommenderV1beta1RecommendationContent
   */
  public static GoogleCloudRecommenderV1beta1RecommendationContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRecommenderV1beta1RecommendationContent.class);
  }

  /**
   * Convert an instance of GoogleCloudRecommenderV1beta1RecommendationContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

