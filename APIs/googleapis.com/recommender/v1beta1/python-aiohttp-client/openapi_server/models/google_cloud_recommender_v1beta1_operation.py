# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_recommender_v1beta1_value_matcher import GoogleCloudRecommenderV1beta1ValueMatcher
from openapi_server import util


class GoogleCloudRecommenderV1beta1Operation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, path: str=None, path_filters: Dict[str, object]=None, path_value_matchers: Dict[str, GoogleCloudRecommenderV1beta1ValueMatcher]=None, resource: str=None, resource_type: str=None, source_path: str=None, source_resource: str=None, value: object=None, value_matcher: GoogleCloudRecommenderV1beta1ValueMatcher=None):
        """GoogleCloudRecommenderV1beta1Operation - a model defined in OpenAPI

        :param action: The action of this GoogleCloudRecommenderV1beta1Operation.
        :param path: The path of this GoogleCloudRecommenderV1beta1Operation.
        :param path_filters: The path_filters of this GoogleCloudRecommenderV1beta1Operation.
        :param path_value_matchers: The path_value_matchers of this GoogleCloudRecommenderV1beta1Operation.
        :param resource: The resource of this GoogleCloudRecommenderV1beta1Operation.
        :param resource_type: The resource_type of this GoogleCloudRecommenderV1beta1Operation.
        :param source_path: The source_path of this GoogleCloudRecommenderV1beta1Operation.
        :param source_resource: The source_resource of this GoogleCloudRecommenderV1beta1Operation.
        :param value: The value of this GoogleCloudRecommenderV1beta1Operation.
        :param value_matcher: The value_matcher of this GoogleCloudRecommenderV1beta1Operation.
        """
        self.openapi_types = {
            'action': str,
            'path': str,
            'path_filters': Dict[str, object],
            'path_value_matchers': Dict[str, GoogleCloudRecommenderV1beta1ValueMatcher],
            'resource': str,
            'resource_type': str,
            'source_path': str,
            'source_resource': str,
            'value': object,
            'value_matcher': GoogleCloudRecommenderV1beta1ValueMatcher
        }

        self.attribute_map = {
            'action': 'action',
            'path': 'path',
            'path_filters': 'pathFilters',
            'path_value_matchers': 'pathValueMatchers',
            'resource': 'resource',
            'resource_type': 'resourceType',
            'source_path': 'sourcePath',
            'source_resource': 'sourceResource',
            'value': 'value',
            'value_matcher': 'valueMatcher'
        }

        self._action = action
        self._path = path
        self._path_filters = path_filters
        self._path_value_matchers = path_value_matchers
        self._resource = resource
        self._resource_type = resource_type
        self._source_path = source_path
        self._source_resource = source_resource
        self._value = value
        self._value_matcher = value_matcher

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRecommenderV1beta1Operation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRecommenderV1beta1Operation of this GoogleCloudRecommenderV1beta1Operation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this GoogleCloudRecommenderV1beta1Operation.

        Type of this operation. Contains one of 'add', 'remove', 'replace', 'move', 'copy', 'test' and 'custom' operations. This field is case-insensitive and always populated.

        :return: The action of this GoogleCloudRecommenderV1beta1Operation.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this GoogleCloudRecommenderV1beta1Operation.

        Type of this operation. Contains one of 'add', 'remove', 'replace', 'move', 'copy', 'test' and 'custom' operations. This field is case-insensitive and always populated.

        :param action: The action of this GoogleCloudRecommenderV1beta1Operation.
        :type action: str
        """

        self._action = action

    @property
    def path(self):
        """Gets the path of this GoogleCloudRecommenderV1beta1Operation.

        Path to the target field being operated on. If the operation is at the resource level, then path should be \"/\". This field is always populated.

        :return: The path of this GoogleCloudRecommenderV1beta1Operation.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this GoogleCloudRecommenderV1beta1Operation.

        Path to the target field being operated on. If the operation is at the resource level, then path should be \"/\". This field is always populated.

        :param path: The path of this GoogleCloudRecommenderV1beta1Operation.
        :type path: str
        """

        self._path = path

    @property
    def path_filters(self):
        """Gets the path_filters of this GoogleCloudRecommenderV1beta1Operation.

        Set of filters to apply if `path` refers to array elements or nested array elements in order to narrow down to a single unique element that is being tested/modified. This is intended to be an exact match per filter. To perform advanced matching, use path_value_matchers. * Example: ``` { \"/versions/*/name\" : \"it-123\" \"/versions/*/targetSize/percent\": 20 } ``` * Example: ``` { \"/bindings/*/role\": \"roles/owner\" \"/bindings/*/condition\" : null } ``` * Example: ``` { \"/bindings/*/role\": \"roles/owner\" \"/bindings/*/members/*\" : [\"x@example.com\", \"y@example.com\"] } ``` When both path_filters and path_value_matchers are set, an implicit AND must be performed.

        :return: The path_filters of this GoogleCloudRecommenderV1beta1Operation.
        :rtype: Dict[str, object]
        """
        return self._path_filters

    @path_filters.setter
    def path_filters(self, path_filters):
        """Sets the path_filters of this GoogleCloudRecommenderV1beta1Operation.

        Set of filters to apply if `path` refers to array elements or nested array elements in order to narrow down to a single unique element that is being tested/modified. This is intended to be an exact match per filter. To perform advanced matching, use path_value_matchers. * Example: ``` { \"/versions/*/name\" : \"it-123\" \"/versions/*/targetSize/percent\": 20 } ``` * Example: ``` { \"/bindings/*/role\": \"roles/owner\" \"/bindings/*/condition\" : null } ``` * Example: ``` { \"/bindings/*/role\": \"roles/owner\" \"/bindings/*/members/*\" : [\"x@example.com\", \"y@example.com\"] } ``` When both path_filters and path_value_matchers are set, an implicit AND must be performed.

        :param path_filters: The path_filters of this GoogleCloudRecommenderV1beta1Operation.
        :type path_filters: Dict[str, object]
        """

        self._path_filters = path_filters

    @property
    def path_value_matchers(self):
        """Gets the path_value_matchers of this GoogleCloudRecommenderV1beta1Operation.

        Similar to path_filters, this contains set of filters to apply if `path` field refers to array elements. This is meant to support value matching beyond exact match. To perform exact match, use path_filters. When both path_filters and path_value_matchers are set, an implicit AND must be performed.

        :return: The path_value_matchers of this GoogleCloudRecommenderV1beta1Operation.
        :rtype: Dict[str, GoogleCloudRecommenderV1beta1ValueMatcher]
        """
        return self._path_value_matchers

    @path_value_matchers.setter
    def path_value_matchers(self, path_value_matchers):
        """Sets the path_value_matchers of this GoogleCloudRecommenderV1beta1Operation.

        Similar to path_filters, this contains set of filters to apply if `path` field refers to array elements. This is meant to support value matching beyond exact match. To perform exact match, use path_filters. When both path_filters and path_value_matchers are set, an implicit AND must be performed.

        :param path_value_matchers: The path_value_matchers of this GoogleCloudRecommenderV1beta1Operation.
        :type path_value_matchers: Dict[str, GoogleCloudRecommenderV1beta1ValueMatcher]
        """

        self._path_value_matchers = path_value_matchers

    @property
    def resource(self):
        """Gets the resource of this GoogleCloudRecommenderV1beta1Operation.

        Contains the fully qualified resource name. This field is always populated. ex: //cloudresourcemanager.googleapis.com/projects/foo.

        :return: The resource of this GoogleCloudRecommenderV1beta1Operation.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this GoogleCloudRecommenderV1beta1Operation.

        Contains the fully qualified resource name. This field is always populated. ex: //cloudresourcemanager.googleapis.com/projects/foo.

        :param resource: The resource of this GoogleCloudRecommenderV1beta1Operation.
        :type resource: str
        """

        self._resource = resource

    @property
    def resource_type(self):
        """Gets the resource_type of this GoogleCloudRecommenderV1beta1Operation.

        Type of GCP resource being modified/tested. This field is always populated. Example: cloudresourcemanager.googleapis.com/Project, compute.googleapis.com/Instance

        :return: The resource_type of this GoogleCloudRecommenderV1beta1Operation.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this GoogleCloudRecommenderV1beta1Operation.

        Type of GCP resource being modified/tested. This field is always populated. Example: cloudresourcemanager.googleapis.com/Project, compute.googleapis.com/Instance

        :param resource_type: The resource_type of this GoogleCloudRecommenderV1beta1Operation.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def source_path(self):
        """Gets the source_path of this GoogleCloudRecommenderV1beta1Operation.

        Can be set with action 'copy' or 'move' to indicate the source field within resource or source_resource, ignored if provided for other operation types.

        :return: The source_path of this GoogleCloudRecommenderV1beta1Operation.
        :rtype: str
        """
        return self._source_path

    @source_path.setter
    def source_path(self, source_path):
        """Sets the source_path of this GoogleCloudRecommenderV1beta1Operation.

        Can be set with action 'copy' or 'move' to indicate the source field within resource or source_resource, ignored if provided for other operation types.

        :param source_path: The source_path of this GoogleCloudRecommenderV1beta1Operation.
        :type source_path: str
        """

        self._source_path = source_path

    @property
    def source_resource(self):
        """Gets the source_resource of this GoogleCloudRecommenderV1beta1Operation.

        Can be set with action 'copy' to copy resource configuration across different resources of the same type. Example: A resource clone can be done via action = 'copy', path = \"/\", from = \"/\", source_resource = and resource_name = . This field is empty for all other values of `action`.

        :return: The source_resource of this GoogleCloudRecommenderV1beta1Operation.
        :rtype: str
        """
        return self._source_resource

    @source_resource.setter
    def source_resource(self, source_resource):
        """Sets the source_resource of this GoogleCloudRecommenderV1beta1Operation.

        Can be set with action 'copy' to copy resource configuration across different resources of the same type. Example: A resource clone can be done via action = 'copy', path = \"/\", from = \"/\", source_resource = and resource_name = . This field is empty for all other values of `action`.

        :param source_resource: The source_resource of this GoogleCloudRecommenderV1beta1Operation.
        :type source_resource: str
        """

        self._source_resource = source_resource

    @property
    def value(self):
        """Gets the value of this GoogleCloudRecommenderV1beta1Operation.

        Value for the `path` field. Will be set for actions:'add'/'replace'. Maybe set for action: 'test'. Either this or `value_matcher` will be set for 'test' operation. An exact match must be performed.

        :return: The value of this GoogleCloudRecommenderV1beta1Operation.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GoogleCloudRecommenderV1beta1Operation.

        Value for the `path` field. Will be set for actions:'add'/'replace'. Maybe set for action: 'test'. Either this or `value_matcher` will be set for 'test' operation. An exact match must be performed.

        :param value: The value of this GoogleCloudRecommenderV1beta1Operation.
        :type value: object
        """

        self._value = value

    @property
    def value_matcher(self):
        """Gets the value_matcher of this GoogleCloudRecommenderV1beta1Operation.


        :return: The value_matcher of this GoogleCloudRecommenderV1beta1Operation.
        :rtype: GoogleCloudRecommenderV1beta1ValueMatcher
        """
        return self._value_matcher

    @value_matcher.setter
    def value_matcher(self, value_matcher):
        """Sets the value_matcher of this GoogleCloudRecommenderV1beta1Operation.


        :param value_matcher: The value_matcher of this GoogleCloudRecommenderV1beta1Operation.
        :type value_matcher: GoogleCloudRecommenderV1beta1ValueMatcher
        """

        self._value_matcher = value_matcher
