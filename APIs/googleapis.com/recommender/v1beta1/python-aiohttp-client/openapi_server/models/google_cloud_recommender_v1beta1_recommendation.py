# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_recommender_v1beta1_impact import GoogleCloudRecommenderV1beta1Impact
from openapi_server.models.google_cloud_recommender_v1beta1_recommendation_content import GoogleCloudRecommenderV1beta1RecommendationContent
from openapi_server.models.google_cloud_recommender_v1beta1_recommendation_insight_reference import GoogleCloudRecommenderV1beta1RecommendationInsightReference
from openapi_server.models.google_cloud_recommender_v1beta1_recommendation_state_info import GoogleCloudRecommenderV1beta1RecommendationStateInfo
from openapi_server import util


class GoogleCloudRecommenderV1beta1Recommendation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_impact: List[GoogleCloudRecommenderV1beta1Impact]=None, associated_insights: List[GoogleCloudRecommenderV1beta1RecommendationInsightReference]=None, content: GoogleCloudRecommenderV1beta1RecommendationContent=None, description: str=None, etag: str=None, last_refresh_time: str=None, name: str=None, primary_impact: GoogleCloudRecommenderV1beta1Impact=None, priority: str=None, recommender_subtype: str=None, state_info: GoogleCloudRecommenderV1beta1RecommendationStateInfo=None, target_resources: List[str]=None, xor_group_id: str=None):
        """GoogleCloudRecommenderV1beta1Recommendation - a model defined in OpenAPI

        :param additional_impact: The additional_impact of this GoogleCloudRecommenderV1beta1Recommendation.
        :param associated_insights: The associated_insights of this GoogleCloudRecommenderV1beta1Recommendation.
        :param content: The content of this GoogleCloudRecommenderV1beta1Recommendation.
        :param description: The description of this GoogleCloudRecommenderV1beta1Recommendation.
        :param etag: The etag of this GoogleCloudRecommenderV1beta1Recommendation.
        :param last_refresh_time: The last_refresh_time of this GoogleCloudRecommenderV1beta1Recommendation.
        :param name: The name of this GoogleCloudRecommenderV1beta1Recommendation.
        :param primary_impact: The primary_impact of this GoogleCloudRecommenderV1beta1Recommendation.
        :param priority: The priority of this GoogleCloudRecommenderV1beta1Recommendation.
        :param recommender_subtype: The recommender_subtype of this GoogleCloudRecommenderV1beta1Recommendation.
        :param state_info: The state_info of this GoogleCloudRecommenderV1beta1Recommendation.
        :param target_resources: The target_resources of this GoogleCloudRecommenderV1beta1Recommendation.
        :param xor_group_id: The xor_group_id of this GoogleCloudRecommenderV1beta1Recommendation.
        """
        self.openapi_types = {
            'additional_impact': List[GoogleCloudRecommenderV1beta1Impact],
            'associated_insights': List[GoogleCloudRecommenderV1beta1RecommendationInsightReference],
            'content': GoogleCloudRecommenderV1beta1RecommendationContent,
            'description': str,
            'etag': str,
            'last_refresh_time': str,
            'name': str,
            'primary_impact': GoogleCloudRecommenderV1beta1Impact,
            'priority': str,
            'recommender_subtype': str,
            'state_info': GoogleCloudRecommenderV1beta1RecommendationStateInfo,
            'target_resources': List[str],
            'xor_group_id': str
        }

        self.attribute_map = {
            'additional_impact': 'additionalImpact',
            'associated_insights': 'associatedInsights',
            'content': 'content',
            'description': 'description',
            'etag': 'etag',
            'last_refresh_time': 'lastRefreshTime',
            'name': 'name',
            'primary_impact': 'primaryImpact',
            'priority': 'priority',
            'recommender_subtype': 'recommenderSubtype',
            'state_info': 'stateInfo',
            'target_resources': 'targetResources',
            'xor_group_id': 'xorGroupId'
        }

        self._additional_impact = additional_impact
        self._associated_insights = associated_insights
        self._content = content
        self._description = description
        self._etag = etag
        self._last_refresh_time = last_refresh_time
        self._name = name
        self._primary_impact = primary_impact
        self._priority = priority
        self._recommender_subtype = recommender_subtype
        self._state_info = state_info
        self._target_resources = target_resources
        self._xor_group_id = xor_group_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRecommenderV1beta1Recommendation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRecommenderV1beta1Recommendation of this GoogleCloudRecommenderV1beta1Recommendation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_impact(self):
        """Gets the additional_impact of this GoogleCloudRecommenderV1beta1Recommendation.

        Optional set of additional impact that this recommendation may have when trying to optimize for the primary category. These may be positive or negative.

        :return: The additional_impact of this GoogleCloudRecommenderV1beta1Recommendation.
        :rtype: List[GoogleCloudRecommenderV1beta1Impact]
        """
        return self._additional_impact

    @additional_impact.setter
    def additional_impact(self, additional_impact):
        """Sets the additional_impact of this GoogleCloudRecommenderV1beta1Recommendation.

        Optional set of additional impact that this recommendation may have when trying to optimize for the primary category. These may be positive or negative.

        :param additional_impact: The additional_impact of this GoogleCloudRecommenderV1beta1Recommendation.
        :type additional_impact: List[GoogleCloudRecommenderV1beta1Impact]
        """

        self._additional_impact = additional_impact

    @property
    def associated_insights(self):
        """Gets the associated_insights of this GoogleCloudRecommenderV1beta1Recommendation.

        Insights that led to this recommendation.

        :return: The associated_insights of this GoogleCloudRecommenderV1beta1Recommendation.
        :rtype: List[GoogleCloudRecommenderV1beta1RecommendationInsightReference]
        """
        return self._associated_insights

    @associated_insights.setter
    def associated_insights(self, associated_insights):
        """Sets the associated_insights of this GoogleCloudRecommenderV1beta1Recommendation.

        Insights that led to this recommendation.

        :param associated_insights: The associated_insights of this GoogleCloudRecommenderV1beta1Recommendation.
        :type associated_insights: List[GoogleCloudRecommenderV1beta1RecommendationInsightReference]
        """

        self._associated_insights = associated_insights

    @property
    def content(self):
        """Gets the content of this GoogleCloudRecommenderV1beta1Recommendation.


        :return: The content of this GoogleCloudRecommenderV1beta1Recommendation.
        :rtype: GoogleCloudRecommenderV1beta1RecommendationContent
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this GoogleCloudRecommenderV1beta1Recommendation.


        :param content: The content of this GoogleCloudRecommenderV1beta1Recommendation.
        :type content: GoogleCloudRecommenderV1beta1RecommendationContent
        """

        self._content = content

    @property
    def description(self):
        """Gets the description of this GoogleCloudRecommenderV1beta1Recommendation.

        Free-form human readable summary in English. The maximum length is 500 characters.

        :return: The description of this GoogleCloudRecommenderV1beta1Recommendation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudRecommenderV1beta1Recommendation.

        Free-form human readable summary in English. The maximum length is 500 characters.

        :param description: The description of this GoogleCloudRecommenderV1beta1Recommendation.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this GoogleCloudRecommenderV1beta1Recommendation.

        Fingerprint of the Recommendation. Provides optimistic locking when updating states.

        :return: The etag of this GoogleCloudRecommenderV1beta1Recommendation.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this GoogleCloudRecommenderV1beta1Recommendation.

        Fingerprint of the Recommendation. Provides optimistic locking when updating states.

        :param etag: The etag of this GoogleCloudRecommenderV1beta1Recommendation.
        :type etag: str
        """

        self._etag = etag

    @property
    def last_refresh_time(self):
        """Gets the last_refresh_time of this GoogleCloudRecommenderV1beta1Recommendation.

        Last time this recommendation was refreshed by the system that created it in the first place.

        :return: The last_refresh_time of this GoogleCloudRecommenderV1beta1Recommendation.
        :rtype: str
        """
        return self._last_refresh_time

    @last_refresh_time.setter
    def last_refresh_time(self, last_refresh_time):
        """Sets the last_refresh_time of this GoogleCloudRecommenderV1beta1Recommendation.

        Last time this recommendation was refreshed by the system that created it in the first place.

        :param last_refresh_time: The last_refresh_time of this GoogleCloudRecommenderV1beta1Recommendation.
        :type last_refresh_time: str
        """

        self._last_refresh_time = last_refresh_time

    @property
    def name(self):
        """Gets the name of this GoogleCloudRecommenderV1beta1Recommendation.

        Name of recommendation.

        :return: The name of this GoogleCloudRecommenderV1beta1Recommendation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudRecommenderV1beta1Recommendation.

        Name of recommendation.

        :param name: The name of this GoogleCloudRecommenderV1beta1Recommendation.
        :type name: str
        """

        self._name = name

    @property
    def primary_impact(self):
        """Gets the primary_impact of this GoogleCloudRecommenderV1beta1Recommendation.


        :return: The primary_impact of this GoogleCloudRecommenderV1beta1Recommendation.
        :rtype: GoogleCloudRecommenderV1beta1Impact
        """
        return self._primary_impact

    @primary_impact.setter
    def primary_impact(self, primary_impact):
        """Sets the primary_impact of this GoogleCloudRecommenderV1beta1Recommendation.


        :param primary_impact: The primary_impact of this GoogleCloudRecommenderV1beta1Recommendation.
        :type primary_impact: GoogleCloudRecommenderV1beta1Impact
        """

        self._primary_impact = primary_impact

    @property
    def priority(self):
        """Gets the priority of this GoogleCloudRecommenderV1beta1Recommendation.

        Recommendation's priority.

        :return: The priority of this GoogleCloudRecommenderV1beta1Recommendation.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this GoogleCloudRecommenderV1beta1Recommendation.

        Recommendation's priority.

        :param priority: The priority of this GoogleCloudRecommenderV1beta1Recommendation.
        :type priority: str
        """
        allowed_values = ["PRIORITY_UNSPECIFIED", "P4", "P3", "P2", "P1"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def recommender_subtype(self):
        """Gets the recommender_subtype of this GoogleCloudRecommenderV1beta1Recommendation.

        Contains an identifier for a subtype of recommendations produced for the same recommender. Subtype is a function of content and impact, meaning a new subtype might be added when significant changes to `content` or `primary_impact.category` are introduced. See the Recommenders section to see a list of subtypes for a given Recommender. Examples: For recommender = \"google.iam.policy.Recommender\", recommender_subtype can be one of \"REMOVE_ROLE\"/\"REPLACE_ROLE\"

        :return: The recommender_subtype of this GoogleCloudRecommenderV1beta1Recommendation.
        :rtype: str
        """
        return self._recommender_subtype

    @recommender_subtype.setter
    def recommender_subtype(self, recommender_subtype):
        """Sets the recommender_subtype of this GoogleCloudRecommenderV1beta1Recommendation.

        Contains an identifier for a subtype of recommendations produced for the same recommender. Subtype is a function of content and impact, meaning a new subtype might be added when significant changes to `content` or `primary_impact.category` are introduced. See the Recommenders section to see a list of subtypes for a given Recommender. Examples: For recommender = \"google.iam.policy.Recommender\", recommender_subtype can be one of \"REMOVE_ROLE\"/\"REPLACE_ROLE\"

        :param recommender_subtype: The recommender_subtype of this GoogleCloudRecommenderV1beta1Recommendation.
        :type recommender_subtype: str
        """

        self._recommender_subtype = recommender_subtype

    @property
    def state_info(self):
        """Gets the state_info of this GoogleCloudRecommenderV1beta1Recommendation.


        :return: The state_info of this GoogleCloudRecommenderV1beta1Recommendation.
        :rtype: GoogleCloudRecommenderV1beta1RecommendationStateInfo
        """
        return self._state_info

    @state_info.setter
    def state_info(self, state_info):
        """Sets the state_info of this GoogleCloudRecommenderV1beta1Recommendation.


        :param state_info: The state_info of this GoogleCloudRecommenderV1beta1Recommendation.
        :type state_info: GoogleCloudRecommenderV1beta1RecommendationStateInfo
        """

        self._state_info = state_info

    @property
    def target_resources(self):
        """Gets the target_resources of this GoogleCloudRecommenderV1beta1Recommendation.

        Fully qualified resource names that this recommendation is targeting.

        :return: The target_resources of this GoogleCloudRecommenderV1beta1Recommendation.
        :rtype: List[str]
        """
        return self._target_resources

    @target_resources.setter
    def target_resources(self, target_resources):
        """Sets the target_resources of this GoogleCloudRecommenderV1beta1Recommendation.

        Fully qualified resource names that this recommendation is targeting.

        :param target_resources: The target_resources of this GoogleCloudRecommenderV1beta1Recommendation.
        :type target_resources: List[str]
        """

        self._target_resources = target_resources

    @property
    def xor_group_id(self):
        """Gets the xor_group_id of this GoogleCloudRecommenderV1beta1Recommendation.

        Corresponds to a mutually exclusive group ID within a recommender. A non-empty ID indicates that the recommendation belongs to a mutually exclusive group. This means that only one recommendation within the group is suggested to be applied.

        :return: The xor_group_id of this GoogleCloudRecommenderV1beta1Recommendation.
        :rtype: str
        """
        return self._xor_group_id

    @xor_group_id.setter
    def xor_group_id(self, xor_group_id):
        """Sets the xor_group_id of this GoogleCloudRecommenderV1beta1Recommendation.

        Corresponds to a mutually exclusive group ID within a recommender. A non-empty ID indicates that the recommendation belongs to a mutually exclusive group. This means that only one recommendation within the group is suggested to be applied.

        :param xor_group_id: The xor_group_id of this GoogleCloudRecommenderV1beta1Recommendation.
        :type xor_group_id: str
        """

        self._xor_group_id = xor_group_id
