# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudRecommenderV1beta1ReliabilityProjection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: Dict[str, object]=None, risks: List[str]=None):
        """GoogleCloudRecommenderV1beta1ReliabilityProjection - a model defined in OpenAPI

        :param details: The details of this GoogleCloudRecommenderV1beta1ReliabilityProjection.
        :param risks: The risks of this GoogleCloudRecommenderV1beta1ReliabilityProjection.
        """
        self.openapi_types = {
            'details': Dict[str, object],
            'risks': List[str]
        }

        self.attribute_map = {
            'details': 'details',
            'risks': 'risks'
        }

        self._details = details
        self._risks = risks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRecommenderV1beta1ReliabilityProjection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRecommenderV1beta1ReliabilityProjection of this GoogleCloudRecommenderV1beta1ReliabilityProjection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this GoogleCloudRecommenderV1beta1ReliabilityProjection.

        Per-recommender projection.

        :return: The details of this GoogleCloudRecommenderV1beta1ReliabilityProjection.
        :rtype: Dict[str, object]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this GoogleCloudRecommenderV1beta1ReliabilityProjection.

        Per-recommender projection.

        :param details: The details of this GoogleCloudRecommenderV1beta1ReliabilityProjection.
        :type details: Dict[str, object]
        """

        self._details = details

    @property
    def risks(self):
        """Gets the risks of this GoogleCloudRecommenderV1beta1ReliabilityProjection.

        Reliability risks mitigated by this recommendation.

        :return: The risks of this GoogleCloudRecommenderV1beta1ReliabilityProjection.
        :rtype: List[str]
        """
        return self._risks

    @risks.setter
    def risks(self, risks):
        """Sets the risks of this GoogleCloudRecommenderV1beta1ReliabilityProjection.

        Reliability risks mitigated by this recommendation.

        :param risks: The risks of this GoogleCloudRecommenderV1beta1ReliabilityProjection.
        :type risks: List[str]
        """
        allowed_values = ["RISK_TYPE_UNSPECIFIED", "SERVICE_DISRUPTION", "DATA_LOSS", "ACCESS_DENY"]  # noqa: E501
        if not set(risks).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `risks` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(risks) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._risks = risks
