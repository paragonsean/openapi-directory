# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudRecommenderV1beta1InsightStateInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, state: str=None, state_metadata: Dict[str, str]=None):
        """GoogleCloudRecommenderV1beta1InsightStateInfo - a model defined in OpenAPI

        :param state: The state of this GoogleCloudRecommenderV1beta1InsightStateInfo.
        :param state_metadata: The state_metadata of this GoogleCloudRecommenderV1beta1InsightStateInfo.
        """
        self.openapi_types = {
            'state': str,
            'state_metadata': Dict[str, str]
        }

        self.attribute_map = {
            'state': 'state',
            'state_metadata': 'stateMetadata'
        }

        self._state = state
        self._state_metadata = state_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRecommenderV1beta1InsightStateInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRecommenderV1beta1InsightStateInfo of this GoogleCloudRecommenderV1beta1InsightStateInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state(self):
        """Gets the state of this GoogleCloudRecommenderV1beta1InsightStateInfo.

        Insight state.

        :return: The state of this GoogleCloudRecommenderV1beta1InsightStateInfo.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudRecommenderV1beta1InsightStateInfo.

        Insight state.

        :param state: The state of this GoogleCloudRecommenderV1beta1InsightStateInfo.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "ACCEPTED", "DISMISSED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_metadata(self):
        """Gets the state_metadata of this GoogleCloudRecommenderV1beta1InsightStateInfo.

        A map of metadata for the state, provided by user or automations systems.

        :return: The state_metadata of this GoogleCloudRecommenderV1beta1InsightStateInfo.
        :rtype: Dict[str, str]
        """
        return self._state_metadata

    @state_metadata.setter
    def state_metadata(self, state_metadata):
        """Sets the state_metadata of this GoogleCloudRecommenderV1beta1InsightStateInfo.

        A map of metadata for the state, provided by user or automations systems.

        :param state_metadata: The state_metadata of this GoogleCloudRecommenderV1beta1InsightStateInfo.
        :type state_metadata: Dict[str, str]
        """

        self._state_metadata = state_metadata
