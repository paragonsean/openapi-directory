/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMembership.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMembership::OAIMembership(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMembership::OAIMembership() {
    this->initializeModel();
}

OAIMembership::~OAIMembership() {}

void OAIMembership::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_delivery_setting_isSet = false;
    m_delivery_setting_isValid = false;

    m_member_key_isSet = false;
    m_member_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_preferred_member_key_isSet = false;
    m_preferred_member_key_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIMembership::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMembership::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_delivery_setting_isValid = ::OpenAPI::fromJsonValue(m_delivery_setting, json[QString("deliverySetting")]);
    m_delivery_setting_isSet = !json[QString("deliverySetting")].isNull() && m_delivery_setting_isValid;

    m_member_key_isValid = ::OpenAPI::fromJsonValue(m_member_key, json[QString("memberKey")]);
    m_member_key_isSet = !json[QString("memberKey")].isNull() && m_member_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_preferred_member_key_isValid = ::OpenAPI::fromJsonValue(m_preferred_member_key, json[QString("preferredMemberKey")]);
    m_preferred_member_key_isSet = !json[QString("preferredMemberKey")].isNull() && m_preferred_member_key_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIMembership::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMembership::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_delivery_setting_isSet) {
        obj.insert(QString("deliverySetting"), ::OpenAPI::toJsonValue(m_delivery_setting));
    }
    if (m_member_key.isSet()) {
        obj.insert(QString("memberKey"), ::OpenAPI::toJsonValue(m_member_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_preferred_member_key.isSet()) {
        obj.insert(QString("preferredMemberKey"), ::OpenAPI::toJsonValue(m_preferred_member_key));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIMembership::getCreateTime() const {
    return m_create_time;
}
void OAIMembership::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIMembership::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIMembership::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIMembership::getDeliverySetting() const {
    return m_delivery_setting;
}
void OAIMembership::setDeliverySetting(const QString &delivery_setting) {
    m_delivery_setting = delivery_setting;
    m_delivery_setting_isSet = true;
}

bool OAIMembership::is_delivery_setting_Set() const{
    return m_delivery_setting_isSet;
}

bool OAIMembership::is_delivery_setting_Valid() const{
    return m_delivery_setting_isValid;
}

OAIEntityKey OAIMembership::getMemberKey() const {
    return m_member_key;
}
void OAIMembership::setMemberKey(const OAIEntityKey &member_key) {
    m_member_key = member_key;
    m_member_key_isSet = true;
}

bool OAIMembership::is_member_key_Set() const{
    return m_member_key_isSet;
}

bool OAIMembership::is_member_key_Valid() const{
    return m_member_key_isValid;
}

QString OAIMembership::getName() const {
    return m_name;
}
void OAIMembership::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMembership::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMembership::is_name_Valid() const{
    return m_name_isValid;
}

OAIEntityKey OAIMembership::getPreferredMemberKey() const {
    return m_preferred_member_key;
}
void OAIMembership::setPreferredMemberKey(const OAIEntityKey &preferred_member_key) {
    m_preferred_member_key = preferred_member_key;
    m_preferred_member_key_isSet = true;
}

bool OAIMembership::is_preferred_member_key_Set() const{
    return m_preferred_member_key_isSet;
}

bool OAIMembership::is_preferred_member_key_Valid() const{
    return m_preferred_member_key_isValid;
}

QList<OAIMembershipRole> OAIMembership::getRoles() const {
    return m_roles;
}
void OAIMembership::setRoles(const QList<OAIMembershipRole> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIMembership::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIMembership::is_roles_Valid() const{
    return m_roles_isValid;
}

QString OAIMembership::getType() const {
    return m_type;
}
void OAIMembership::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMembership::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMembership::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIMembership::getUpdateTime() const {
    return m_update_time;
}
void OAIMembership::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIMembership::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIMembership::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIMembership::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_setting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_member_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMembership::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
