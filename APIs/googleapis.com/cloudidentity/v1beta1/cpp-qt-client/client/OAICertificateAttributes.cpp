/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateAttributes::OAICertificateAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateAttributes::OAICertificateAttributes() {
    this->initializeModel();
}

OAICertificateAttributes::~OAICertificateAttributes() {}

void OAICertificateAttributes::initializeModel() {

    m_certificate_template_isSet = false;
    m_certificate_template_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_thumbprint_isSet = false;
    m_thumbprint_isValid = false;

    m_validation_state_isSet = false;
    m_validation_state_isValid = false;

    m_validity_expiration_time_isSet = false;
    m_validity_expiration_time_isValid = false;

    m_validity_start_time_isSet = false;
    m_validity_start_time_isValid = false;
}

void OAICertificateAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateAttributes::fromJsonObject(QJsonObject json) {

    m_certificate_template_isValid = ::OpenAPI::fromJsonValue(m_certificate_template, json[QString("certificateTemplate")]);
    m_certificate_template_isSet = !json[QString("certificateTemplate")].isNull() && m_certificate_template_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_thumbprint, json[QString("thumbprint")]);
    m_thumbprint_isSet = !json[QString("thumbprint")].isNull() && m_thumbprint_isValid;

    m_validation_state_isValid = ::OpenAPI::fromJsonValue(m_validation_state, json[QString("validationState")]);
    m_validation_state_isSet = !json[QString("validationState")].isNull() && m_validation_state_isValid;

    m_validity_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_validity_expiration_time, json[QString("validityExpirationTime")]);
    m_validity_expiration_time_isSet = !json[QString("validityExpirationTime")].isNull() && m_validity_expiration_time_isValid;

    m_validity_start_time_isValid = ::OpenAPI::fromJsonValue(m_validity_start_time, json[QString("validityStartTime")]);
    m_validity_start_time_isSet = !json[QString("validityStartTime")].isNull() && m_validity_start_time_isValid;
}

QString OAICertificateAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_template.isSet()) {
        obj.insert(QString("certificateTemplate"), ::OpenAPI::toJsonValue(m_certificate_template));
    }
    if (m_fingerprint_isSet) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_thumbprint_isSet) {
        obj.insert(QString("thumbprint"), ::OpenAPI::toJsonValue(m_thumbprint));
    }
    if (m_validation_state_isSet) {
        obj.insert(QString("validationState"), ::OpenAPI::toJsonValue(m_validation_state));
    }
    if (m_validity_expiration_time_isSet) {
        obj.insert(QString("validityExpirationTime"), ::OpenAPI::toJsonValue(m_validity_expiration_time));
    }
    if (m_validity_start_time_isSet) {
        obj.insert(QString("validityStartTime"), ::OpenAPI::toJsonValue(m_validity_start_time));
    }
    return obj;
}

OAICertificateTemplate OAICertificateAttributes::getCertificateTemplate() const {
    return m_certificate_template;
}
void OAICertificateAttributes::setCertificateTemplate(const OAICertificateTemplate &certificate_template) {
    m_certificate_template = certificate_template;
    m_certificate_template_isSet = true;
}

bool OAICertificateAttributes::is_certificate_template_Set() const{
    return m_certificate_template_isSet;
}

bool OAICertificateAttributes::is_certificate_template_Valid() const{
    return m_certificate_template_isValid;
}

QString OAICertificateAttributes::getFingerprint() const {
    return m_fingerprint;
}
void OAICertificateAttributes::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAICertificateAttributes::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAICertificateAttributes::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

QString OAICertificateAttributes::getIssuer() const {
    return m_issuer;
}
void OAICertificateAttributes::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAICertificateAttributes::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAICertificateAttributes::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAICertificateAttributes::getSerialNumber() const {
    return m_serial_number;
}
void OAICertificateAttributes::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAICertificateAttributes::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAICertificateAttributes::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAICertificateAttributes::getSubject() const {
    return m_subject;
}
void OAICertificateAttributes::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAICertificateAttributes::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAICertificateAttributes::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAICertificateAttributes::getThumbprint() const {
    return m_thumbprint;
}
void OAICertificateAttributes::setThumbprint(const QString &thumbprint) {
    m_thumbprint = thumbprint;
    m_thumbprint_isSet = true;
}

bool OAICertificateAttributes::is_thumbprint_Set() const{
    return m_thumbprint_isSet;
}

bool OAICertificateAttributes::is_thumbprint_Valid() const{
    return m_thumbprint_isValid;
}

QString OAICertificateAttributes::getValidationState() const {
    return m_validation_state;
}
void OAICertificateAttributes::setValidationState(const QString &validation_state) {
    m_validation_state = validation_state;
    m_validation_state_isSet = true;
}

bool OAICertificateAttributes::is_validation_state_Set() const{
    return m_validation_state_isSet;
}

bool OAICertificateAttributes::is_validation_state_Valid() const{
    return m_validation_state_isValid;
}

QString OAICertificateAttributes::getValidityExpirationTime() const {
    return m_validity_expiration_time;
}
void OAICertificateAttributes::setValidityExpirationTime(const QString &validity_expiration_time) {
    m_validity_expiration_time = validity_expiration_time;
    m_validity_expiration_time_isSet = true;
}

bool OAICertificateAttributes::is_validity_expiration_time_Set() const{
    return m_validity_expiration_time_isSet;
}

bool OAICertificateAttributes::is_validity_expiration_time_Valid() const{
    return m_validity_expiration_time_isValid;
}

QString OAICertificateAttributes::getValidityStartTime() const {
    return m_validity_start_time;
}
void OAICertificateAttributes::setValidityStartTime(const QString &validity_start_time) {
    m_validity_start_time = validity_start_time;
    m_validity_start_time_isSet = true;
}

bool OAICertificateAttributes::is_validity_start_time_Set() const{
    return m_validity_start_time_isSet;
}

bool OAICertificateAttributes::is_validity_start_time_Valid() const{
    return m_validity_start_time_isValid;
}

bool OAICertificateAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validity_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validity_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
