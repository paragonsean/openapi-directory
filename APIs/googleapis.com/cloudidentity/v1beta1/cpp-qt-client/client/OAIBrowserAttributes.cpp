/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrowserAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrowserAttributes::OAIBrowserAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrowserAttributes::OAIBrowserAttributes() {
    this->initializeModel();
}

OAIBrowserAttributes::~OAIBrowserAttributes() {}

void OAIBrowserAttributes::initializeModel() {

    m_chrome_browser_info_isSet = false;
    m_chrome_browser_info_isValid = false;

    m_chrome_profile_id_isSet = false;
    m_chrome_profile_id_isValid = false;

    m_last_profile_sync_time_isSet = false;
    m_last_profile_sync_time_isValid = false;
}

void OAIBrowserAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrowserAttributes::fromJsonObject(QJsonObject json) {

    m_chrome_browser_info_isValid = ::OpenAPI::fromJsonValue(m_chrome_browser_info, json[QString("chromeBrowserInfo")]);
    m_chrome_browser_info_isSet = !json[QString("chromeBrowserInfo")].isNull() && m_chrome_browser_info_isValid;

    m_chrome_profile_id_isValid = ::OpenAPI::fromJsonValue(m_chrome_profile_id, json[QString("chromeProfileId")]);
    m_chrome_profile_id_isSet = !json[QString("chromeProfileId")].isNull() && m_chrome_profile_id_isValid;

    m_last_profile_sync_time_isValid = ::OpenAPI::fromJsonValue(m_last_profile_sync_time, json[QString("lastProfileSyncTime")]);
    m_last_profile_sync_time_isSet = !json[QString("lastProfileSyncTime")].isNull() && m_last_profile_sync_time_isValid;
}

QString OAIBrowserAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrowserAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_chrome_browser_info.isSet()) {
        obj.insert(QString("chromeBrowserInfo"), ::OpenAPI::toJsonValue(m_chrome_browser_info));
    }
    if (m_chrome_profile_id_isSet) {
        obj.insert(QString("chromeProfileId"), ::OpenAPI::toJsonValue(m_chrome_profile_id));
    }
    if (m_last_profile_sync_time_isSet) {
        obj.insert(QString("lastProfileSyncTime"), ::OpenAPI::toJsonValue(m_last_profile_sync_time));
    }
    return obj;
}

OAIBrowserInfo OAIBrowserAttributes::getChromeBrowserInfo() const {
    return m_chrome_browser_info;
}
void OAIBrowserAttributes::setChromeBrowserInfo(const OAIBrowserInfo &chrome_browser_info) {
    m_chrome_browser_info = chrome_browser_info;
    m_chrome_browser_info_isSet = true;
}

bool OAIBrowserAttributes::is_chrome_browser_info_Set() const{
    return m_chrome_browser_info_isSet;
}

bool OAIBrowserAttributes::is_chrome_browser_info_Valid() const{
    return m_chrome_browser_info_isValid;
}

QString OAIBrowserAttributes::getChromeProfileId() const {
    return m_chrome_profile_id;
}
void OAIBrowserAttributes::setChromeProfileId(const QString &chrome_profile_id) {
    m_chrome_profile_id = chrome_profile_id;
    m_chrome_profile_id_isSet = true;
}

bool OAIBrowserAttributes::is_chrome_profile_id_Set() const{
    return m_chrome_profile_id_isSet;
}

bool OAIBrowserAttributes::is_chrome_profile_id_Valid() const{
    return m_chrome_profile_id_isValid;
}

QString OAIBrowserAttributes::getLastProfileSyncTime() const {
    return m_last_profile_sync_time;
}
void OAIBrowserAttributes::setLastProfileSyncTime(const QString &last_profile_sync_time) {
    m_last_profile_sync_time = last_profile_sync_time;
    m_last_profile_sync_time_isSet = true;
}

bool OAIBrowserAttributes::is_last_profile_sync_time_Set() const{
    return m_last_profile_sync_time_isSet;
}

bool OAIBrowserAttributes::is_last_profile_sync_time_Valid() const{
    return m_last_profile_sync_time_isValid;
}

bool OAIBrowserAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chrome_browser_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_chrome_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_profile_sync_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrowserAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
