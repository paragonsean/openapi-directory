/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInboundSsoAssignment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInboundSsoAssignment::OAIInboundSsoAssignment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInboundSsoAssignment::OAIInboundSsoAssignment() {
    this->initializeModel();
}

OAIInboundSsoAssignment::~OAIInboundSsoAssignment() {}

void OAIInboundSsoAssignment::initializeModel() {

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rank_isSet = false;
    m_rank_isValid = false;

    m_saml_sso_info_isSet = false;
    m_saml_sso_info_isValid = false;

    m_sign_in_behavior_isSet = false;
    m_sign_in_behavior_isValid = false;

    m_sso_mode_isSet = false;
    m_sso_mode_isValid = false;

    m_target_group_isSet = false;
    m_target_group_isValid = false;

    m_target_org_unit_isSet = false;
    m_target_org_unit_isValid = false;
}

void OAIInboundSsoAssignment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInboundSsoAssignment::fromJsonObject(QJsonObject json) {

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rank_isValid = ::OpenAPI::fromJsonValue(m_rank, json[QString("rank")]);
    m_rank_isSet = !json[QString("rank")].isNull() && m_rank_isValid;

    m_saml_sso_info_isValid = ::OpenAPI::fromJsonValue(m_saml_sso_info, json[QString("samlSsoInfo")]);
    m_saml_sso_info_isSet = !json[QString("samlSsoInfo")].isNull() && m_saml_sso_info_isValid;

    m_sign_in_behavior_isValid = ::OpenAPI::fromJsonValue(m_sign_in_behavior, json[QString("signInBehavior")]);
    m_sign_in_behavior_isSet = !json[QString("signInBehavior")].isNull() && m_sign_in_behavior_isValid;

    m_sso_mode_isValid = ::OpenAPI::fromJsonValue(m_sso_mode, json[QString("ssoMode")]);
    m_sso_mode_isSet = !json[QString("ssoMode")].isNull() && m_sso_mode_isValid;

    m_target_group_isValid = ::OpenAPI::fromJsonValue(m_target_group, json[QString("targetGroup")]);
    m_target_group_isSet = !json[QString("targetGroup")].isNull() && m_target_group_isValid;

    m_target_org_unit_isValid = ::OpenAPI::fromJsonValue(m_target_org_unit, json[QString("targetOrgUnit")]);
    m_target_org_unit_isSet = !json[QString("targetOrgUnit")].isNull() && m_target_org_unit_isValid;
}

QString OAIInboundSsoAssignment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInboundSsoAssignment::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_isSet) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rank_isSet) {
        obj.insert(QString("rank"), ::OpenAPI::toJsonValue(m_rank));
    }
    if (m_saml_sso_info.isSet()) {
        obj.insert(QString("samlSsoInfo"), ::OpenAPI::toJsonValue(m_saml_sso_info));
    }
    if (m_sign_in_behavior.isSet()) {
        obj.insert(QString("signInBehavior"), ::OpenAPI::toJsonValue(m_sign_in_behavior));
    }
    if (m_sso_mode_isSet) {
        obj.insert(QString("ssoMode"), ::OpenAPI::toJsonValue(m_sso_mode));
    }
    if (m_target_group_isSet) {
        obj.insert(QString("targetGroup"), ::OpenAPI::toJsonValue(m_target_group));
    }
    if (m_target_org_unit_isSet) {
        obj.insert(QString("targetOrgUnit"), ::OpenAPI::toJsonValue(m_target_org_unit));
    }
    return obj;
}

QString OAIInboundSsoAssignment::getCustomer() const {
    return m_customer;
}
void OAIInboundSsoAssignment::setCustomer(const QString &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIInboundSsoAssignment::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIInboundSsoAssignment::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAIInboundSsoAssignment::getName() const {
    return m_name;
}
void OAIInboundSsoAssignment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInboundSsoAssignment::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInboundSsoAssignment::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIInboundSsoAssignment::getRank() const {
    return m_rank;
}
void OAIInboundSsoAssignment::setRank(const qint32 &rank) {
    m_rank = rank;
    m_rank_isSet = true;
}

bool OAIInboundSsoAssignment::is_rank_Set() const{
    return m_rank_isSet;
}

bool OAIInboundSsoAssignment::is_rank_Valid() const{
    return m_rank_isValid;
}

OAISamlSsoInfo OAIInboundSsoAssignment::getSamlSsoInfo() const {
    return m_saml_sso_info;
}
void OAIInboundSsoAssignment::setSamlSsoInfo(const OAISamlSsoInfo &saml_sso_info) {
    m_saml_sso_info = saml_sso_info;
    m_saml_sso_info_isSet = true;
}

bool OAIInboundSsoAssignment::is_saml_sso_info_Set() const{
    return m_saml_sso_info_isSet;
}

bool OAIInboundSsoAssignment::is_saml_sso_info_Valid() const{
    return m_saml_sso_info_isValid;
}

OAISignInBehavior OAIInboundSsoAssignment::getSignInBehavior() const {
    return m_sign_in_behavior;
}
void OAIInboundSsoAssignment::setSignInBehavior(const OAISignInBehavior &sign_in_behavior) {
    m_sign_in_behavior = sign_in_behavior;
    m_sign_in_behavior_isSet = true;
}

bool OAIInboundSsoAssignment::is_sign_in_behavior_Set() const{
    return m_sign_in_behavior_isSet;
}

bool OAIInboundSsoAssignment::is_sign_in_behavior_Valid() const{
    return m_sign_in_behavior_isValid;
}

QString OAIInboundSsoAssignment::getSsoMode() const {
    return m_sso_mode;
}
void OAIInboundSsoAssignment::setSsoMode(const QString &sso_mode) {
    m_sso_mode = sso_mode;
    m_sso_mode_isSet = true;
}

bool OAIInboundSsoAssignment::is_sso_mode_Set() const{
    return m_sso_mode_isSet;
}

bool OAIInboundSsoAssignment::is_sso_mode_Valid() const{
    return m_sso_mode_isValid;
}

QString OAIInboundSsoAssignment::getTargetGroup() const {
    return m_target_group;
}
void OAIInboundSsoAssignment::setTargetGroup(const QString &target_group) {
    m_target_group = target_group;
    m_target_group_isSet = true;
}

bool OAIInboundSsoAssignment::is_target_group_Set() const{
    return m_target_group_isSet;
}

bool OAIInboundSsoAssignment::is_target_group_Valid() const{
    return m_target_group_isValid;
}

QString OAIInboundSsoAssignment::getTargetOrgUnit() const {
    return m_target_org_unit;
}
void OAIInboundSsoAssignment::setTargetOrgUnit(const QString &target_org_unit) {
    m_target_org_unit = target_org_unit;
    m_target_org_unit_isSet = true;
}

bool OAIInboundSsoAssignment::is_target_org_unit_Set() const{
    return m_target_org_unit_isSet;
}

bool OAIInboundSsoAssignment::is_target_org_unit_Valid() const{
    return m_target_org_unit_isValid;
}

bool OAIInboundSsoAssignment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saml_sso_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_in_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sso_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_org_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInboundSsoAssignment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
