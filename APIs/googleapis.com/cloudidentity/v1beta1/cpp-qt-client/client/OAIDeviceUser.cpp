/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceUser::OAIDeviceUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceUser::OAIDeviceUser() {
    this->initializeModel();
}

OAIDeviceUser::~OAIDeviceUser() {}

void OAIDeviceUser::initializeModel() {

    m_compromised_state_isSet = false;
    m_compromised_state_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_first_sync_time_isSet = false;
    m_first_sync_time_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_last_sync_time_isSet = false;
    m_last_sync_time_isValid = false;

    m_management_state_isSet = false;
    m_management_state_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_password_state_isSet = false;
    m_password_state_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;
}

void OAIDeviceUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceUser::fromJsonObject(QJsonObject json) {

    m_compromised_state_isValid = ::OpenAPI::fromJsonValue(m_compromised_state, json[QString("compromisedState")]);
    m_compromised_state_isSet = !json[QString("compromisedState")].isNull() && m_compromised_state_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_first_sync_time_isValid = ::OpenAPI::fromJsonValue(m_first_sync_time, json[QString("firstSyncTime")]);
    m_first_sync_time_isSet = !json[QString("firstSyncTime")].isNull() && m_first_sync_time_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_last_sync_time_isValid = ::OpenAPI::fromJsonValue(m_last_sync_time, json[QString("lastSyncTime")]);
    m_last_sync_time_isSet = !json[QString("lastSyncTime")].isNull() && m_last_sync_time_isValid;

    m_management_state_isValid = ::OpenAPI::fromJsonValue(m_management_state, json[QString("managementState")]);
    m_management_state_isSet = !json[QString("managementState")].isNull() && m_management_state_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_password_state_isValid = ::OpenAPI::fromJsonValue(m_password_state, json[QString("passwordState")]);
    m_password_state_isSet = !json[QString("passwordState")].isNull() && m_password_state_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("userAgent")]);
    m_user_agent_isSet = !json[QString("userAgent")].isNull() && m_user_agent_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("userEmail")]);
    m_user_email_isSet = !json[QString("userEmail")].isNull() && m_user_email_isValid;
}

QString OAIDeviceUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceUser::asJsonObject() const {
    QJsonObject obj;
    if (m_compromised_state_isSet) {
        obj.insert(QString("compromisedState"), ::OpenAPI::toJsonValue(m_compromised_state));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_first_sync_time_isSet) {
        obj.insert(QString("firstSyncTime"), ::OpenAPI::toJsonValue(m_first_sync_time));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_last_sync_time_isSet) {
        obj.insert(QString("lastSyncTime"), ::OpenAPI::toJsonValue(m_last_sync_time));
    }
    if (m_management_state_isSet) {
        obj.insert(QString("managementState"), ::OpenAPI::toJsonValue(m_management_state));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_password_state_isSet) {
        obj.insert(QString("passwordState"), ::OpenAPI::toJsonValue(m_password_state));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("userAgent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("userEmail"), ::OpenAPI::toJsonValue(m_user_email));
    }
    return obj;
}

QString OAIDeviceUser::getCompromisedState() const {
    return m_compromised_state;
}
void OAIDeviceUser::setCompromisedState(const QString &compromised_state) {
    m_compromised_state = compromised_state;
    m_compromised_state_isSet = true;
}

bool OAIDeviceUser::is_compromised_state_Set() const{
    return m_compromised_state_isSet;
}

bool OAIDeviceUser::is_compromised_state_Valid() const{
    return m_compromised_state_isValid;
}

QString OAIDeviceUser::getCreateTime() const {
    return m_create_time;
}
void OAIDeviceUser::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIDeviceUser::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIDeviceUser::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIDeviceUser::getFirstSyncTime() const {
    return m_first_sync_time;
}
void OAIDeviceUser::setFirstSyncTime(const QString &first_sync_time) {
    m_first_sync_time = first_sync_time;
    m_first_sync_time_isSet = true;
}

bool OAIDeviceUser::is_first_sync_time_Set() const{
    return m_first_sync_time_isSet;
}

bool OAIDeviceUser::is_first_sync_time_Valid() const{
    return m_first_sync_time_isValid;
}

QString OAIDeviceUser::getLanguageCode() const {
    return m_language_code;
}
void OAIDeviceUser::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIDeviceUser::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIDeviceUser::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIDeviceUser::getLastSyncTime() const {
    return m_last_sync_time;
}
void OAIDeviceUser::setLastSyncTime(const QString &last_sync_time) {
    m_last_sync_time = last_sync_time;
    m_last_sync_time_isSet = true;
}

bool OAIDeviceUser::is_last_sync_time_Set() const{
    return m_last_sync_time_isSet;
}

bool OAIDeviceUser::is_last_sync_time_Valid() const{
    return m_last_sync_time_isValid;
}

QString OAIDeviceUser::getManagementState() const {
    return m_management_state;
}
void OAIDeviceUser::setManagementState(const QString &management_state) {
    m_management_state = management_state;
    m_management_state_isSet = true;
}

bool OAIDeviceUser::is_management_state_Set() const{
    return m_management_state_isSet;
}

bool OAIDeviceUser::is_management_state_Valid() const{
    return m_management_state_isValid;
}

QString OAIDeviceUser::getName() const {
    return m_name;
}
void OAIDeviceUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeviceUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeviceUser::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDeviceUser::getPasswordState() const {
    return m_password_state;
}
void OAIDeviceUser::setPasswordState(const QString &password_state) {
    m_password_state = password_state;
    m_password_state_isSet = true;
}

bool OAIDeviceUser::is_password_state_Set() const{
    return m_password_state_isSet;
}

bool OAIDeviceUser::is_password_state_Valid() const{
    return m_password_state_isValid;
}

QString OAIDeviceUser::getUserAgent() const {
    return m_user_agent;
}
void OAIDeviceUser::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAIDeviceUser::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAIDeviceUser::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

QString OAIDeviceUser::getUserEmail() const {
    return m_user_email;
}
void OAIDeviceUser::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAIDeviceUser::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAIDeviceUser::is_user_email_Valid() const{
    return m_user_email_isValid;
}

bool OAIDeviceUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compromised_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_sync_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sync_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
