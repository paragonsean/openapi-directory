/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrowserInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrowserInfo::OAIBrowserInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrowserInfo::OAIBrowserInfo() {
    this->initializeModel();
}

OAIBrowserInfo::~OAIBrowserInfo() {}

void OAIBrowserInfo::initializeModel() {

    m_browser_management_state_isSet = false;
    m_browser_management_state_isValid = false;

    m_browser_version_isSet = false;
    m_browser_version_isValid = false;

    m_is_built_in_dns_client_enabled_isSet = false;
    m_is_built_in_dns_client_enabled_isValid = false;

    m_is_bulk_data_entry_analysis_enabled_isSet = false;
    m_is_bulk_data_entry_analysis_enabled_isValid = false;

    m_is_chrome_cleanup_enabled_isSet = false;
    m_is_chrome_cleanup_enabled_isValid = false;

    m_is_chrome_remote_desktop_app_blocked_isSet = false;
    m_is_chrome_remote_desktop_app_blocked_isValid = false;

    m_is_file_download_analysis_enabled_isSet = false;
    m_is_file_download_analysis_enabled_isValid = false;

    m_is_file_upload_analysis_enabled_isSet = false;
    m_is_file_upload_analysis_enabled_isValid = false;

    m_is_realtime_url_check_enabled_isSet = false;
    m_is_realtime_url_check_enabled_isValid = false;

    m_is_security_event_analysis_enabled_isSet = false;
    m_is_security_event_analysis_enabled_isValid = false;

    m_is_site_isolation_enabled_isSet = false;
    m_is_site_isolation_enabled_isValid = false;

    m_is_third_party_blocking_enabled_isSet = false;
    m_is_third_party_blocking_enabled_isValid = false;

    m_password_protection_warning_trigger_isSet = false;
    m_password_protection_warning_trigger_isValid = false;

    m_safe_browsing_protection_level_isSet = false;
    m_safe_browsing_protection_level_isValid = false;
}

void OAIBrowserInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrowserInfo::fromJsonObject(QJsonObject json) {

    m_browser_management_state_isValid = ::OpenAPI::fromJsonValue(m_browser_management_state, json[QString("browserManagementState")]);
    m_browser_management_state_isSet = !json[QString("browserManagementState")].isNull() && m_browser_management_state_isValid;

    m_browser_version_isValid = ::OpenAPI::fromJsonValue(m_browser_version, json[QString("browserVersion")]);
    m_browser_version_isSet = !json[QString("browserVersion")].isNull() && m_browser_version_isValid;

    m_is_built_in_dns_client_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_built_in_dns_client_enabled, json[QString("isBuiltInDnsClientEnabled")]);
    m_is_built_in_dns_client_enabled_isSet = !json[QString("isBuiltInDnsClientEnabled")].isNull() && m_is_built_in_dns_client_enabled_isValid;

    m_is_bulk_data_entry_analysis_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_bulk_data_entry_analysis_enabled, json[QString("isBulkDataEntryAnalysisEnabled")]);
    m_is_bulk_data_entry_analysis_enabled_isSet = !json[QString("isBulkDataEntryAnalysisEnabled")].isNull() && m_is_bulk_data_entry_analysis_enabled_isValid;

    m_is_chrome_cleanup_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_chrome_cleanup_enabled, json[QString("isChromeCleanupEnabled")]);
    m_is_chrome_cleanup_enabled_isSet = !json[QString("isChromeCleanupEnabled")].isNull() && m_is_chrome_cleanup_enabled_isValid;

    m_is_chrome_remote_desktop_app_blocked_isValid = ::OpenAPI::fromJsonValue(m_is_chrome_remote_desktop_app_blocked, json[QString("isChromeRemoteDesktopAppBlocked")]);
    m_is_chrome_remote_desktop_app_blocked_isSet = !json[QString("isChromeRemoteDesktopAppBlocked")].isNull() && m_is_chrome_remote_desktop_app_blocked_isValid;

    m_is_file_download_analysis_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_file_download_analysis_enabled, json[QString("isFileDownloadAnalysisEnabled")]);
    m_is_file_download_analysis_enabled_isSet = !json[QString("isFileDownloadAnalysisEnabled")].isNull() && m_is_file_download_analysis_enabled_isValid;

    m_is_file_upload_analysis_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_file_upload_analysis_enabled, json[QString("isFileUploadAnalysisEnabled")]);
    m_is_file_upload_analysis_enabled_isSet = !json[QString("isFileUploadAnalysisEnabled")].isNull() && m_is_file_upload_analysis_enabled_isValid;

    m_is_realtime_url_check_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_realtime_url_check_enabled, json[QString("isRealtimeUrlCheckEnabled")]);
    m_is_realtime_url_check_enabled_isSet = !json[QString("isRealtimeUrlCheckEnabled")].isNull() && m_is_realtime_url_check_enabled_isValid;

    m_is_security_event_analysis_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_security_event_analysis_enabled, json[QString("isSecurityEventAnalysisEnabled")]);
    m_is_security_event_analysis_enabled_isSet = !json[QString("isSecurityEventAnalysisEnabled")].isNull() && m_is_security_event_analysis_enabled_isValid;

    m_is_site_isolation_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_site_isolation_enabled, json[QString("isSiteIsolationEnabled")]);
    m_is_site_isolation_enabled_isSet = !json[QString("isSiteIsolationEnabled")].isNull() && m_is_site_isolation_enabled_isValid;

    m_is_third_party_blocking_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_third_party_blocking_enabled, json[QString("isThirdPartyBlockingEnabled")]);
    m_is_third_party_blocking_enabled_isSet = !json[QString("isThirdPartyBlockingEnabled")].isNull() && m_is_third_party_blocking_enabled_isValid;

    m_password_protection_warning_trigger_isValid = ::OpenAPI::fromJsonValue(m_password_protection_warning_trigger, json[QString("passwordProtectionWarningTrigger")]);
    m_password_protection_warning_trigger_isSet = !json[QString("passwordProtectionWarningTrigger")].isNull() && m_password_protection_warning_trigger_isValid;

    m_safe_browsing_protection_level_isValid = ::OpenAPI::fromJsonValue(m_safe_browsing_protection_level, json[QString("safeBrowsingProtectionLevel")]);
    m_safe_browsing_protection_level_isSet = !json[QString("safeBrowsingProtectionLevel")].isNull() && m_safe_browsing_protection_level_isValid;
}

QString OAIBrowserInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrowserInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_browser_management_state_isSet) {
        obj.insert(QString("browserManagementState"), ::OpenAPI::toJsonValue(m_browser_management_state));
    }
    if (m_browser_version_isSet) {
        obj.insert(QString("browserVersion"), ::OpenAPI::toJsonValue(m_browser_version));
    }
    if (m_is_built_in_dns_client_enabled_isSet) {
        obj.insert(QString("isBuiltInDnsClientEnabled"), ::OpenAPI::toJsonValue(m_is_built_in_dns_client_enabled));
    }
    if (m_is_bulk_data_entry_analysis_enabled_isSet) {
        obj.insert(QString("isBulkDataEntryAnalysisEnabled"), ::OpenAPI::toJsonValue(m_is_bulk_data_entry_analysis_enabled));
    }
    if (m_is_chrome_cleanup_enabled_isSet) {
        obj.insert(QString("isChromeCleanupEnabled"), ::OpenAPI::toJsonValue(m_is_chrome_cleanup_enabled));
    }
    if (m_is_chrome_remote_desktop_app_blocked_isSet) {
        obj.insert(QString("isChromeRemoteDesktopAppBlocked"), ::OpenAPI::toJsonValue(m_is_chrome_remote_desktop_app_blocked));
    }
    if (m_is_file_download_analysis_enabled_isSet) {
        obj.insert(QString("isFileDownloadAnalysisEnabled"), ::OpenAPI::toJsonValue(m_is_file_download_analysis_enabled));
    }
    if (m_is_file_upload_analysis_enabled_isSet) {
        obj.insert(QString("isFileUploadAnalysisEnabled"), ::OpenAPI::toJsonValue(m_is_file_upload_analysis_enabled));
    }
    if (m_is_realtime_url_check_enabled_isSet) {
        obj.insert(QString("isRealtimeUrlCheckEnabled"), ::OpenAPI::toJsonValue(m_is_realtime_url_check_enabled));
    }
    if (m_is_security_event_analysis_enabled_isSet) {
        obj.insert(QString("isSecurityEventAnalysisEnabled"), ::OpenAPI::toJsonValue(m_is_security_event_analysis_enabled));
    }
    if (m_is_site_isolation_enabled_isSet) {
        obj.insert(QString("isSiteIsolationEnabled"), ::OpenAPI::toJsonValue(m_is_site_isolation_enabled));
    }
    if (m_is_third_party_blocking_enabled_isSet) {
        obj.insert(QString("isThirdPartyBlockingEnabled"), ::OpenAPI::toJsonValue(m_is_third_party_blocking_enabled));
    }
    if (m_password_protection_warning_trigger_isSet) {
        obj.insert(QString("passwordProtectionWarningTrigger"), ::OpenAPI::toJsonValue(m_password_protection_warning_trigger));
    }
    if (m_safe_browsing_protection_level_isSet) {
        obj.insert(QString("safeBrowsingProtectionLevel"), ::OpenAPI::toJsonValue(m_safe_browsing_protection_level));
    }
    return obj;
}

QString OAIBrowserInfo::getBrowserManagementState() const {
    return m_browser_management_state;
}
void OAIBrowserInfo::setBrowserManagementState(const QString &browser_management_state) {
    m_browser_management_state = browser_management_state;
    m_browser_management_state_isSet = true;
}

bool OAIBrowserInfo::is_browser_management_state_Set() const{
    return m_browser_management_state_isSet;
}

bool OAIBrowserInfo::is_browser_management_state_Valid() const{
    return m_browser_management_state_isValid;
}

QString OAIBrowserInfo::getBrowserVersion() const {
    return m_browser_version;
}
void OAIBrowserInfo::setBrowserVersion(const QString &browser_version) {
    m_browser_version = browser_version;
    m_browser_version_isSet = true;
}

bool OAIBrowserInfo::is_browser_version_Set() const{
    return m_browser_version_isSet;
}

bool OAIBrowserInfo::is_browser_version_Valid() const{
    return m_browser_version_isValid;
}

bool OAIBrowserInfo::isIsBuiltInDnsClientEnabled() const {
    return m_is_built_in_dns_client_enabled;
}
void OAIBrowserInfo::setIsBuiltInDnsClientEnabled(const bool &is_built_in_dns_client_enabled) {
    m_is_built_in_dns_client_enabled = is_built_in_dns_client_enabled;
    m_is_built_in_dns_client_enabled_isSet = true;
}

bool OAIBrowserInfo::is_is_built_in_dns_client_enabled_Set() const{
    return m_is_built_in_dns_client_enabled_isSet;
}

bool OAIBrowserInfo::is_is_built_in_dns_client_enabled_Valid() const{
    return m_is_built_in_dns_client_enabled_isValid;
}

bool OAIBrowserInfo::isIsBulkDataEntryAnalysisEnabled() const {
    return m_is_bulk_data_entry_analysis_enabled;
}
void OAIBrowserInfo::setIsBulkDataEntryAnalysisEnabled(const bool &is_bulk_data_entry_analysis_enabled) {
    m_is_bulk_data_entry_analysis_enabled = is_bulk_data_entry_analysis_enabled;
    m_is_bulk_data_entry_analysis_enabled_isSet = true;
}

bool OAIBrowserInfo::is_is_bulk_data_entry_analysis_enabled_Set() const{
    return m_is_bulk_data_entry_analysis_enabled_isSet;
}

bool OAIBrowserInfo::is_is_bulk_data_entry_analysis_enabled_Valid() const{
    return m_is_bulk_data_entry_analysis_enabled_isValid;
}

bool OAIBrowserInfo::isIsChromeCleanupEnabled() const {
    return m_is_chrome_cleanup_enabled;
}
void OAIBrowserInfo::setIsChromeCleanupEnabled(const bool &is_chrome_cleanup_enabled) {
    m_is_chrome_cleanup_enabled = is_chrome_cleanup_enabled;
    m_is_chrome_cleanup_enabled_isSet = true;
}

bool OAIBrowserInfo::is_is_chrome_cleanup_enabled_Set() const{
    return m_is_chrome_cleanup_enabled_isSet;
}

bool OAIBrowserInfo::is_is_chrome_cleanup_enabled_Valid() const{
    return m_is_chrome_cleanup_enabled_isValid;
}

bool OAIBrowserInfo::isIsChromeRemoteDesktopAppBlocked() const {
    return m_is_chrome_remote_desktop_app_blocked;
}
void OAIBrowserInfo::setIsChromeRemoteDesktopAppBlocked(const bool &is_chrome_remote_desktop_app_blocked) {
    m_is_chrome_remote_desktop_app_blocked = is_chrome_remote_desktop_app_blocked;
    m_is_chrome_remote_desktop_app_blocked_isSet = true;
}

bool OAIBrowserInfo::is_is_chrome_remote_desktop_app_blocked_Set() const{
    return m_is_chrome_remote_desktop_app_blocked_isSet;
}

bool OAIBrowserInfo::is_is_chrome_remote_desktop_app_blocked_Valid() const{
    return m_is_chrome_remote_desktop_app_blocked_isValid;
}

bool OAIBrowserInfo::isIsFileDownloadAnalysisEnabled() const {
    return m_is_file_download_analysis_enabled;
}
void OAIBrowserInfo::setIsFileDownloadAnalysisEnabled(const bool &is_file_download_analysis_enabled) {
    m_is_file_download_analysis_enabled = is_file_download_analysis_enabled;
    m_is_file_download_analysis_enabled_isSet = true;
}

bool OAIBrowserInfo::is_is_file_download_analysis_enabled_Set() const{
    return m_is_file_download_analysis_enabled_isSet;
}

bool OAIBrowserInfo::is_is_file_download_analysis_enabled_Valid() const{
    return m_is_file_download_analysis_enabled_isValid;
}

bool OAIBrowserInfo::isIsFileUploadAnalysisEnabled() const {
    return m_is_file_upload_analysis_enabled;
}
void OAIBrowserInfo::setIsFileUploadAnalysisEnabled(const bool &is_file_upload_analysis_enabled) {
    m_is_file_upload_analysis_enabled = is_file_upload_analysis_enabled;
    m_is_file_upload_analysis_enabled_isSet = true;
}

bool OAIBrowserInfo::is_is_file_upload_analysis_enabled_Set() const{
    return m_is_file_upload_analysis_enabled_isSet;
}

bool OAIBrowserInfo::is_is_file_upload_analysis_enabled_Valid() const{
    return m_is_file_upload_analysis_enabled_isValid;
}

bool OAIBrowserInfo::isIsRealtimeUrlCheckEnabled() const {
    return m_is_realtime_url_check_enabled;
}
void OAIBrowserInfo::setIsRealtimeUrlCheckEnabled(const bool &is_realtime_url_check_enabled) {
    m_is_realtime_url_check_enabled = is_realtime_url_check_enabled;
    m_is_realtime_url_check_enabled_isSet = true;
}

bool OAIBrowserInfo::is_is_realtime_url_check_enabled_Set() const{
    return m_is_realtime_url_check_enabled_isSet;
}

bool OAIBrowserInfo::is_is_realtime_url_check_enabled_Valid() const{
    return m_is_realtime_url_check_enabled_isValid;
}

bool OAIBrowserInfo::isIsSecurityEventAnalysisEnabled() const {
    return m_is_security_event_analysis_enabled;
}
void OAIBrowserInfo::setIsSecurityEventAnalysisEnabled(const bool &is_security_event_analysis_enabled) {
    m_is_security_event_analysis_enabled = is_security_event_analysis_enabled;
    m_is_security_event_analysis_enabled_isSet = true;
}

bool OAIBrowserInfo::is_is_security_event_analysis_enabled_Set() const{
    return m_is_security_event_analysis_enabled_isSet;
}

bool OAIBrowserInfo::is_is_security_event_analysis_enabled_Valid() const{
    return m_is_security_event_analysis_enabled_isValid;
}

bool OAIBrowserInfo::isIsSiteIsolationEnabled() const {
    return m_is_site_isolation_enabled;
}
void OAIBrowserInfo::setIsSiteIsolationEnabled(const bool &is_site_isolation_enabled) {
    m_is_site_isolation_enabled = is_site_isolation_enabled;
    m_is_site_isolation_enabled_isSet = true;
}

bool OAIBrowserInfo::is_is_site_isolation_enabled_Set() const{
    return m_is_site_isolation_enabled_isSet;
}

bool OAIBrowserInfo::is_is_site_isolation_enabled_Valid() const{
    return m_is_site_isolation_enabled_isValid;
}

bool OAIBrowserInfo::isIsThirdPartyBlockingEnabled() const {
    return m_is_third_party_blocking_enabled;
}
void OAIBrowserInfo::setIsThirdPartyBlockingEnabled(const bool &is_third_party_blocking_enabled) {
    m_is_third_party_blocking_enabled = is_third_party_blocking_enabled;
    m_is_third_party_blocking_enabled_isSet = true;
}

bool OAIBrowserInfo::is_is_third_party_blocking_enabled_Set() const{
    return m_is_third_party_blocking_enabled_isSet;
}

bool OAIBrowserInfo::is_is_third_party_blocking_enabled_Valid() const{
    return m_is_third_party_blocking_enabled_isValid;
}

QString OAIBrowserInfo::getPasswordProtectionWarningTrigger() const {
    return m_password_protection_warning_trigger;
}
void OAIBrowserInfo::setPasswordProtectionWarningTrigger(const QString &password_protection_warning_trigger) {
    m_password_protection_warning_trigger = password_protection_warning_trigger;
    m_password_protection_warning_trigger_isSet = true;
}

bool OAIBrowserInfo::is_password_protection_warning_trigger_Set() const{
    return m_password_protection_warning_trigger_isSet;
}

bool OAIBrowserInfo::is_password_protection_warning_trigger_Valid() const{
    return m_password_protection_warning_trigger_isValid;
}

QString OAIBrowserInfo::getSafeBrowsingProtectionLevel() const {
    return m_safe_browsing_protection_level;
}
void OAIBrowserInfo::setSafeBrowsingProtectionLevel(const QString &safe_browsing_protection_level) {
    m_safe_browsing_protection_level = safe_browsing_protection_level;
    m_safe_browsing_protection_level_isSet = true;
}

bool OAIBrowserInfo::is_safe_browsing_protection_level_Set() const{
    return m_safe_browsing_protection_level_isSet;
}

bool OAIBrowserInfo::is_safe_browsing_protection_level_Valid() const{
    return m_safe_browsing_protection_level_isValid;
}

bool OAIBrowserInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_browser_management_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_browser_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_built_in_dns_client_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_bulk_data_entry_analysis_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_chrome_cleanup_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_chrome_remote_desktop_app_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_file_download_analysis_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_file_upload_analysis_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_realtime_url_check_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_security_event_analysis_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_site_isolation_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_third_party_blocking_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_protection_warning_trigger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safe_browsing_protection_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrowserInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
