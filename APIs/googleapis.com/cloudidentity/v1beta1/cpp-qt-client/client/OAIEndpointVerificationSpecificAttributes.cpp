/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointVerificationSpecificAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpointVerificationSpecificAttributes::OAIEndpointVerificationSpecificAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpointVerificationSpecificAttributes::OAIEndpointVerificationSpecificAttributes() {
    this->initializeModel();
}

OAIEndpointVerificationSpecificAttributes::~OAIEndpointVerificationSpecificAttributes() {}

void OAIEndpointVerificationSpecificAttributes::initializeModel() {

    m_additional_signals_isSet = false;
    m_additional_signals_isValid = false;

    m_browser_attributes_isSet = false;
    m_browser_attributes_isValid = false;

    m_certificate_attributes_isSet = false;
    m_certificate_attributes_isValid = false;
}

void OAIEndpointVerificationSpecificAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpointVerificationSpecificAttributes::fromJsonObject(QJsonObject json) {

    m_additional_signals_isValid = ::OpenAPI::fromJsonValue(m_additional_signals, json[QString("additionalSignals")]);
    m_additional_signals_isSet = !json[QString("additionalSignals")].isNull() && m_additional_signals_isValid;

    m_browser_attributes_isValid = ::OpenAPI::fromJsonValue(m_browser_attributes, json[QString("browserAttributes")]);
    m_browser_attributes_isSet = !json[QString("browserAttributes")].isNull() && m_browser_attributes_isValid;

    m_certificate_attributes_isValid = ::OpenAPI::fromJsonValue(m_certificate_attributes, json[QString("certificateAttributes")]);
    m_certificate_attributes_isSet = !json[QString("certificateAttributes")].isNull() && m_certificate_attributes_isValid;
}

QString OAIEndpointVerificationSpecificAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpointVerificationSpecificAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_signals.size() > 0) {
        obj.insert(QString("additionalSignals"), ::OpenAPI::toJsonValue(m_additional_signals));
    }
    if (m_browser_attributes.size() > 0) {
        obj.insert(QString("browserAttributes"), ::OpenAPI::toJsonValue(m_browser_attributes));
    }
    if (m_certificate_attributes.size() > 0) {
        obj.insert(QString("certificateAttributes"), ::OpenAPI::toJsonValue(m_certificate_attributes));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIEndpointVerificationSpecificAttributes::getAdditionalSignals() const {
    return m_additional_signals;
}
void OAIEndpointVerificationSpecificAttributes::setAdditionalSignals(const QMap<QString, QJsonValue> &additional_signals) {
    m_additional_signals = additional_signals;
    m_additional_signals_isSet = true;
}

bool OAIEndpointVerificationSpecificAttributes::is_additional_signals_Set() const{
    return m_additional_signals_isSet;
}

bool OAIEndpointVerificationSpecificAttributes::is_additional_signals_Valid() const{
    return m_additional_signals_isValid;
}

QList<OAIBrowserAttributes> OAIEndpointVerificationSpecificAttributes::getBrowserAttributes() const {
    return m_browser_attributes;
}
void OAIEndpointVerificationSpecificAttributes::setBrowserAttributes(const QList<OAIBrowserAttributes> &browser_attributes) {
    m_browser_attributes = browser_attributes;
    m_browser_attributes_isSet = true;
}

bool OAIEndpointVerificationSpecificAttributes::is_browser_attributes_Set() const{
    return m_browser_attributes_isSet;
}

bool OAIEndpointVerificationSpecificAttributes::is_browser_attributes_Valid() const{
    return m_browser_attributes_isValid;
}

QList<OAICertificateAttributes> OAIEndpointVerificationSpecificAttributes::getCertificateAttributes() const {
    return m_certificate_attributes;
}
void OAIEndpointVerificationSpecificAttributes::setCertificateAttributes(const QList<OAICertificateAttributes> &certificate_attributes) {
    m_certificate_attributes = certificate_attributes;
    m_certificate_attributes_isSet = true;
}

bool OAIEndpointVerificationSpecificAttributes::is_certificate_attributes_Set() const{
    return m_certificate_attributes_isSet;
}

bool OAIEndpointVerificationSpecificAttributes::is_certificate_attributes_Valid() const{
    return m_certificate_attributes_isValid;
}

bool OAIEndpointVerificationSpecificAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_signals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_browser_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpointVerificationSpecificAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
