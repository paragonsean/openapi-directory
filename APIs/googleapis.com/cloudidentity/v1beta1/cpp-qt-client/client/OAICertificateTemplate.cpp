/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateTemplate::OAICertificateTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateTemplate::OAICertificateTemplate() {
    this->initializeModel();
}

OAICertificateTemplate::~OAICertificateTemplate() {}

void OAICertificateTemplate::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_major_version_isSet = false;
    m_major_version_isValid = false;

    m_minor_version_isSet = false;
    m_minor_version_isValid = false;
}

void OAICertificateTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateTemplate::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_major_version_isValid = ::OpenAPI::fromJsonValue(m_major_version, json[QString("majorVersion")]);
    m_major_version_isSet = !json[QString("majorVersion")].isNull() && m_major_version_isValid;

    m_minor_version_isValid = ::OpenAPI::fromJsonValue(m_minor_version, json[QString("minorVersion")]);
    m_minor_version_isSet = !json[QString("minorVersion")].isNull() && m_minor_version_isValid;
}

QString OAICertificateTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_major_version_isSet) {
        obj.insert(QString("majorVersion"), ::OpenAPI::toJsonValue(m_major_version));
    }
    if (m_minor_version_isSet) {
        obj.insert(QString("minorVersion"), ::OpenAPI::toJsonValue(m_minor_version));
    }
    return obj;
}

QString OAICertificateTemplate::getId() const {
    return m_id;
}
void OAICertificateTemplate::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICertificateTemplate::is_id_Set() const{
    return m_id_isSet;
}

bool OAICertificateTemplate::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAICertificateTemplate::getMajorVersion() const {
    return m_major_version;
}
void OAICertificateTemplate::setMajorVersion(const qint32 &major_version) {
    m_major_version = major_version;
    m_major_version_isSet = true;
}

bool OAICertificateTemplate::is_major_version_Set() const{
    return m_major_version_isSet;
}

bool OAICertificateTemplate::is_major_version_Valid() const{
    return m_major_version_isValid;
}

qint32 OAICertificateTemplate::getMinorVersion() const {
    return m_minor_version;
}
void OAICertificateTemplate::setMinorVersion(const qint32 &minor_version) {
    m_minor_version = minor_version;
    m_minor_version_isSet = true;
}

bool OAICertificateTemplate::is_minor_version_Set() const{
    return m_minor_version_isSet;
}

bool OAICertificateTemplate::is_minor_version_Valid() const{
    return m_minor_version_isValid;
}

bool OAICertificateTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_major_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minor_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
