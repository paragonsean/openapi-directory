/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEndpointVerificationSpecificAttributes.h
 *
 * Resource representing the [Endpoint Verification-specific attributes](https://cloud.google.com/endpoint-verification/docs/device-information) of a device.
 */

#ifndef OAIEndpointVerificationSpecificAttributes_H
#define OAIEndpointVerificationSpecificAttributes_H

#include <QJsonObject>

#include "OAIBrowserAttributes.h"
#include "OAICertificateAttributes.h"
#include <QJsonValue>
#include <QList>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBrowserAttributes;
class OAICertificateAttributes;

class OAIEndpointVerificationSpecificAttributes : public OAIObject {
public:
    OAIEndpointVerificationSpecificAttributes();
    OAIEndpointVerificationSpecificAttributes(QString json);
    ~OAIEndpointVerificationSpecificAttributes() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QJsonValue> getAdditionalSignals() const;
    void setAdditionalSignals(const QMap<QString, QJsonValue> &additional_signals);
    bool is_additional_signals_Set() const;
    bool is_additional_signals_Valid() const;

    QList<OAIBrowserAttributes> getBrowserAttributes() const;
    void setBrowserAttributes(const QList<OAIBrowserAttributes> &browser_attributes);
    bool is_browser_attributes_Set() const;
    bool is_browser_attributes_Valid() const;

    QList<OAICertificateAttributes> getCertificateAttributes() const;
    void setCertificateAttributes(const QList<OAICertificateAttributes> &certificate_attributes);
    bool is_certificate_attributes_Set() const;
    bool is_certificate_attributes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QJsonValue> m_additional_signals;
    bool m_additional_signals_isSet;
    bool m_additional_signals_isValid;

    QList<OAIBrowserAttributes> m_browser_attributes;
    bool m_browser_attributes_isSet;
    bool m_browser_attributes_isValid;

    QList<OAICertificateAttributes> m_certificate_attributes;
    bool m_certificate_attributes_isSet;
    bool m_certificate_attributes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEndpointVerificationSpecificAttributes)

#endif // OAIEndpointVerificationSpecificAttributes_H
