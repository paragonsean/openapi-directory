/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrgMembership.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrgMembership::OAIOrgMembership(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrgMembership::OAIOrgMembership() {
    this->initializeModel();
}

OAIOrgMembership::~OAIOrgMembership() {}

void OAIOrgMembership::initializeModel() {

    m_member_isSet = false;
    m_member_isValid = false;

    m_member_uri_isSet = false;
    m_member_uri_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIOrgMembership::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrgMembership::fromJsonObject(QJsonObject json) {

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("member")]);
    m_member_isSet = !json[QString("member")].isNull() && m_member_isValid;

    m_member_uri_isValid = ::OpenAPI::fromJsonValue(m_member_uri, json[QString("memberUri")]);
    m_member_uri_isSet = !json[QString("memberUri")].isNull() && m_member_uri_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIOrgMembership::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrgMembership::asJsonObject() const {
    QJsonObject obj;
    if (m_member_isSet) {
        obj.insert(QString("member"), ::OpenAPI::toJsonValue(m_member));
    }
    if (m_member_uri_isSet) {
        obj.insert(QString("memberUri"), ::OpenAPI::toJsonValue(m_member_uri));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIOrgMembership::getMember() const {
    return m_member;
}
void OAIOrgMembership::setMember(const QString &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAIOrgMembership::is_member_Set() const{
    return m_member_isSet;
}

bool OAIOrgMembership::is_member_Valid() const{
    return m_member_isValid;
}

QString OAIOrgMembership::getMemberUri() const {
    return m_member_uri;
}
void OAIOrgMembership::setMemberUri(const QString &member_uri) {
    m_member_uri = member_uri;
    m_member_uri_isSet = true;
}

bool OAIOrgMembership::is_member_uri_Set() const{
    return m_member_uri_isSet;
}

bool OAIOrgMembership::is_member_uri_Valid() const{
    return m_member_uri_isValid;
}

QString OAIOrgMembership::getName() const {
    return m_name;
}
void OAIOrgMembership::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrgMembership::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrgMembership::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOrgMembership::getType() const {
    return m_type;
}
void OAIOrgMembership::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOrgMembership::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOrgMembership::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIOrgMembership::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_member_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrgMembership::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
