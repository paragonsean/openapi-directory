/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDevice::OAIDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDevice::OAIDevice() {
    this->initializeModel();
}

OAIDevice::~OAIDevice() {}

void OAIDevice::initializeModel() {

    m_android_specific_attributes_isSet = false;
    m_android_specific_attributes_isValid = false;

    m_asset_tag_isSet = false;
    m_asset_tag_isValid = false;

    m_baseband_version_isSet = false;
    m_baseband_version_isValid = false;

    m_bootloader_version_isSet = false;
    m_bootloader_version_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_build_number_isSet = false;
    m_build_number_isValid = false;

    m_client_types_isSet = false;
    m_client_types_isValid = false;

    m_compromised_state_isSet = false;
    m_compromised_state_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_enabled_developer_options_isSet = false;
    m_enabled_developer_options_isValid = false;

    m_enabled_usb_debugging_isSet = false;
    m_enabled_usb_debugging_isValid = false;

    m_encryption_state_isSet = false;
    m_encryption_state_isValid = false;

    m_endpoint_verification_specific_attributes_isSet = false;
    m_endpoint_verification_specific_attributes_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_imei_isSet = false;
    m_imei_isValid = false;

    m_kernel_version_isSet = false;
    m_kernel_version_isValid = false;

    m_last_sync_time_isSet = false;
    m_last_sync_time_isValid = false;

    m_management_state_isSet = false;
    m_management_state_isValid = false;

    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;

    m_meid_isSet = false;
    m_meid_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_operator_isSet = false;
    m_network_operator_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_other_accounts_isSet = false;
    m_other_accounts_isValid = false;

    m_owner_type_isSet = false;
    m_owner_type_isValid = false;

    m_release_version_isSet = false;
    m_release_version_isValid = false;

    m_security_patch_time_isSet = false;
    m_security_patch_time_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_wifi_mac_addresses_isSet = false;
    m_wifi_mac_addresses_isValid = false;
}

void OAIDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDevice::fromJsonObject(QJsonObject json) {

    m_android_specific_attributes_isValid = ::OpenAPI::fromJsonValue(m_android_specific_attributes, json[QString("androidSpecificAttributes")]);
    m_android_specific_attributes_isSet = !json[QString("androidSpecificAttributes")].isNull() && m_android_specific_attributes_isValid;

    m_asset_tag_isValid = ::OpenAPI::fromJsonValue(m_asset_tag, json[QString("assetTag")]);
    m_asset_tag_isSet = !json[QString("assetTag")].isNull() && m_asset_tag_isValid;

    m_baseband_version_isValid = ::OpenAPI::fromJsonValue(m_baseband_version, json[QString("basebandVersion")]);
    m_baseband_version_isSet = !json[QString("basebandVersion")].isNull() && m_baseband_version_isValid;

    m_bootloader_version_isValid = ::OpenAPI::fromJsonValue(m_bootloader_version, json[QString("bootloaderVersion")]);
    m_bootloader_version_isSet = !json[QString("bootloaderVersion")].isNull() && m_bootloader_version_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_build_number_isValid = ::OpenAPI::fromJsonValue(m_build_number, json[QString("buildNumber")]);
    m_build_number_isSet = !json[QString("buildNumber")].isNull() && m_build_number_isValid;

    m_client_types_isValid = ::OpenAPI::fromJsonValue(m_client_types, json[QString("clientTypes")]);
    m_client_types_isSet = !json[QString("clientTypes")].isNull() && m_client_types_isValid;

    m_compromised_state_isValid = ::OpenAPI::fromJsonValue(m_compromised_state, json[QString("compromisedState")]);
    m_compromised_state_isSet = !json[QString("compromisedState")].isNull() && m_compromised_state_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("deviceType")]);
    m_device_type_isSet = !json[QString("deviceType")].isNull() && m_device_type_isValid;

    m_enabled_developer_options_isValid = ::OpenAPI::fromJsonValue(m_enabled_developer_options, json[QString("enabledDeveloperOptions")]);
    m_enabled_developer_options_isSet = !json[QString("enabledDeveloperOptions")].isNull() && m_enabled_developer_options_isValid;

    m_enabled_usb_debugging_isValid = ::OpenAPI::fromJsonValue(m_enabled_usb_debugging, json[QString("enabledUsbDebugging")]);
    m_enabled_usb_debugging_isSet = !json[QString("enabledUsbDebugging")].isNull() && m_enabled_usb_debugging_isValid;

    m_encryption_state_isValid = ::OpenAPI::fromJsonValue(m_encryption_state, json[QString("encryptionState")]);
    m_encryption_state_isSet = !json[QString("encryptionState")].isNull() && m_encryption_state_isValid;

    m_endpoint_verification_specific_attributes_isValid = ::OpenAPI::fromJsonValue(m_endpoint_verification_specific_attributes, json[QString("endpointVerificationSpecificAttributes")]);
    m_endpoint_verification_specific_attributes_isSet = !json[QString("endpointVerificationSpecificAttributes")].isNull() && m_endpoint_verification_specific_attributes_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_imei_isValid = ::OpenAPI::fromJsonValue(m_imei, json[QString("imei")]);
    m_imei_isSet = !json[QString("imei")].isNull() && m_imei_isValid;

    m_kernel_version_isValid = ::OpenAPI::fromJsonValue(m_kernel_version, json[QString("kernelVersion")]);
    m_kernel_version_isSet = !json[QString("kernelVersion")].isNull() && m_kernel_version_isValid;

    m_last_sync_time_isValid = ::OpenAPI::fromJsonValue(m_last_sync_time, json[QString("lastSyncTime")]);
    m_last_sync_time_isSet = !json[QString("lastSyncTime")].isNull() && m_last_sync_time_isValid;

    m_management_state_isValid = ::OpenAPI::fromJsonValue(m_management_state, json[QString("managementState")]);
    m_management_state_isSet = !json[QString("managementState")].isNull() && m_management_state_isValid;

    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_manufacturer, json[QString("manufacturer")]);
    m_manufacturer_isSet = !json[QString("manufacturer")].isNull() && m_manufacturer_isValid;

    m_meid_isValid = ::OpenAPI::fromJsonValue(m_meid, json[QString("meid")]);
    m_meid_isSet = !json[QString("meid")].isNull() && m_meid_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_operator_isValid = ::OpenAPI::fromJsonValue(m_network_operator, json[QString("networkOperator")]);
    m_network_operator_isSet = !json[QString("networkOperator")].isNull() && m_network_operator_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;

    m_other_accounts_isValid = ::OpenAPI::fromJsonValue(m_other_accounts, json[QString("otherAccounts")]);
    m_other_accounts_isSet = !json[QString("otherAccounts")].isNull() && m_other_accounts_isValid;

    m_owner_type_isValid = ::OpenAPI::fromJsonValue(m_owner_type, json[QString("ownerType")]);
    m_owner_type_isSet = !json[QString("ownerType")].isNull() && m_owner_type_isValid;

    m_release_version_isValid = ::OpenAPI::fromJsonValue(m_release_version, json[QString("releaseVersion")]);
    m_release_version_isSet = !json[QString("releaseVersion")].isNull() && m_release_version_isValid;

    m_security_patch_time_isValid = ::OpenAPI::fromJsonValue(m_security_patch_time, json[QString("securityPatchTime")]);
    m_security_patch_time_isSet = !json[QString("securityPatchTime")].isNull() && m_security_patch_time_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_wifi_mac_addresses_isValid = ::OpenAPI::fromJsonValue(m_wifi_mac_addresses, json[QString("wifiMacAddresses")]);
    m_wifi_mac_addresses_isSet = !json[QString("wifiMacAddresses")].isNull() && m_wifi_mac_addresses_isValid;
}

QString OAIDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_android_specific_attributes.isSet()) {
        obj.insert(QString("androidSpecificAttributes"), ::OpenAPI::toJsonValue(m_android_specific_attributes));
    }
    if (m_asset_tag_isSet) {
        obj.insert(QString("assetTag"), ::OpenAPI::toJsonValue(m_asset_tag));
    }
    if (m_baseband_version_isSet) {
        obj.insert(QString("basebandVersion"), ::OpenAPI::toJsonValue(m_baseband_version));
    }
    if (m_bootloader_version_isSet) {
        obj.insert(QString("bootloaderVersion"), ::OpenAPI::toJsonValue(m_bootloader_version));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_build_number_isSet) {
        obj.insert(QString("buildNumber"), ::OpenAPI::toJsonValue(m_build_number));
    }
    if (m_client_types.size() > 0) {
        obj.insert(QString("clientTypes"), ::OpenAPI::toJsonValue(m_client_types));
    }
    if (m_compromised_state_isSet) {
        obj.insert(QString("compromisedState"), ::OpenAPI::toJsonValue(m_compromised_state));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_device_type_isSet) {
        obj.insert(QString("deviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_enabled_developer_options_isSet) {
        obj.insert(QString("enabledDeveloperOptions"), ::OpenAPI::toJsonValue(m_enabled_developer_options));
    }
    if (m_enabled_usb_debugging_isSet) {
        obj.insert(QString("enabledUsbDebugging"), ::OpenAPI::toJsonValue(m_enabled_usb_debugging));
    }
    if (m_encryption_state_isSet) {
        obj.insert(QString("encryptionState"), ::OpenAPI::toJsonValue(m_encryption_state));
    }
    if (m_endpoint_verification_specific_attributes.isSet()) {
        obj.insert(QString("endpointVerificationSpecificAttributes"), ::OpenAPI::toJsonValue(m_endpoint_verification_specific_attributes));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_imei_isSet) {
        obj.insert(QString("imei"), ::OpenAPI::toJsonValue(m_imei));
    }
    if (m_kernel_version_isSet) {
        obj.insert(QString("kernelVersion"), ::OpenAPI::toJsonValue(m_kernel_version));
    }
    if (m_last_sync_time_isSet) {
        obj.insert(QString("lastSyncTime"), ::OpenAPI::toJsonValue(m_last_sync_time));
    }
    if (m_management_state_isSet) {
        obj.insert(QString("managementState"), ::OpenAPI::toJsonValue(m_management_state));
    }
    if (m_manufacturer_isSet) {
        obj.insert(QString("manufacturer"), ::OpenAPI::toJsonValue(m_manufacturer));
    }
    if (m_meid_isSet) {
        obj.insert(QString("meid"), ::OpenAPI::toJsonValue(m_meid));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_operator_isSet) {
        obj.insert(QString("networkOperator"), ::OpenAPI::toJsonValue(m_network_operator));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_other_accounts.size() > 0) {
        obj.insert(QString("otherAccounts"), ::OpenAPI::toJsonValue(m_other_accounts));
    }
    if (m_owner_type_isSet) {
        obj.insert(QString("ownerType"), ::OpenAPI::toJsonValue(m_owner_type));
    }
    if (m_release_version_isSet) {
        obj.insert(QString("releaseVersion"), ::OpenAPI::toJsonValue(m_release_version));
    }
    if (m_security_patch_time_isSet) {
        obj.insert(QString("securityPatchTime"), ::OpenAPI::toJsonValue(m_security_patch_time));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_wifi_mac_addresses.size() > 0) {
        obj.insert(QString("wifiMacAddresses"), ::OpenAPI::toJsonValue(m_wifi_mac_addresses));
    }
    return obj;
}

OAIAndroidAttributes OAIDevice::getAndroidSpecificAttributes() const {
    return m_android_specific_attributes;
}
void OAIDevice::setAndroidSpecificAttributes(const OAIAndroidAttributes &android_specific_attributes) {
    m_android_specific_attributes = android_specific_attributes;
    m_android_specific_attributes_isSet = true;
}

bool OAIDevice::is_android_specific_attributes_Set() const{
    return m_android_specific_attributes_isSet;
}

bool OAIDevice::is_android_specific_attributes_Valid() const{
    return m_android_specific_attributes_isValid;
}

QString OAIDevice::getAssetTag() const {
    return m_asset_tag;
}
void OAIDevice::setAssetTag(const QString &asset_tag) {
    m_asset_tag = asset_tag;
    m_asset_tag_isSet = true;
}

bool OAIDevice::is_asset_tag_Set() const{
    return m_asset_tag_isSet;
}

bool OAIDevice::is_asset_tag_Valid() const{
    return m_asset_tag_isValid;
}

QString OAIDevice::getBasebandVersion() const {
    return m_baseband_version;
}
void OAIDevice::setBasebandVersion(const QString &baseband_version) {
    m_baseband_version = baseband_version;
    m_baseband_version_isSet = true;
}

bool OAIDevice::is_baseband_version_Set() const{
    return m_baseband_version_isSet;
}

bool OAIDevice::is_baseband_version_Valid() const{
    return m_baseband_version_isValid;
}

QString OAIDevice::getBootloaderVersion() const {
    return m_bootloader_version;
}
void OAIDevice::setBootloaderVersion(const QString &bootloader_version) {
    m_bootloader_version = bootloader_version;
    m_bootloader_version_isSet = true;
}

bool OAIDevice::is_bootloader_version_Set() const{
    return m_bootloader_version_isSet;
}

bool OAIDevice::is_bootloader_version_Valid() const{
    return m_bootloader_version_isValid;
}

QString OAIDevice::getBrand() const {
    return m_brand;
}
void OAIDevice::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIDevice::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIDevice::is_brand_Valid() const{
    return m_brand_isValid;
}

QString OAIDevice::getBuildNumber() const {
    return m_build_number;
}
void OAIDevice::setBuildNumber(const QString &build_number) {
    m_build_number = build_number;
    m_build_number_isSet = true;
}

bool OAIDevice::is_build_number_Set() const{
    return m_build_number_isSet;
}

bool OAIDevice::is_build_number_Valid() const{
    return m_build_number_isValid;
}

QList<QString> OAIDevice::getClientTypes() const {
    return m_client_types;
}
void OAIDevice::setClientTypes(const QList<QString> &client_types) {
    m_client_types = client_types;
    m_client_types_isSet = true;
}

bool OAIDevice::is_client_types_Set() const{
    return m_client_types_isSet;
}

bool OAIDevice::is_client_types_Valid() const{
    return m_client_types_isValid;
}

QString OAIDevice::getCompromisedState() const {
    return m_compromised_state;
}
void OAIDevice::setCompromisedState(const QString &compromised_state) {
    m_compromised_state = compromised_state;
    m_compromised_state_isSet = true;
}

bool OAIDevice::is_compromised_state_Set() const{
    return m_compromised_state_isSet;
}

bool OAIDevice::is_compromised_state_Valid() const{
    return m_compromised_state_isValid;
}

QString OAIDevice::getCreateTime() const {
    return m_create_time;
}
void OAIDevice::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIDevice::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIDevice::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIDevice::getDeviceId() const {
    return m_device_id;
}
void OAIDevice::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIDevice::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIDevice::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIDevice::getDeviceType() const {
    return m_device_type;
}
void OAIDevice::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIDevice::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIDevice::is_device_type_Valid() const{
    return m_device_type_isValid;
}

bool OAIDevice::isEnabledDeveloperOptions() const {
    return m_enabled_developer_options;
}
void OAIDevice::setEnabledDeveloperOptions(const bool &enabled_developer_options) {
    m_enabled_developer_options = enabled_developer_options;
    m_enabled_developer_options_isSet = true;
}

bool OAIDevice::is_enabled_developer_options_Set() const{
    return m_enabled_developer_options_isSet;
}

bool OAIDevice::is_enabled_developer_options_Valid() const{
    return m_enabled_developer_options_isValid;
}

bool OAIDevice::isEnabledUsbDebugging() const {
    return m_enabled_usb_debugging;
}
void OAIDevice::setEnabledUsbDebugging(const bool &enabled_usb_debugging) {
    m_enabled_usb_debugging = enabled_usb_debugging;
    m_enabled_usb_debugging_isSet = true;
}

bool OAIDevice::is_enabled_usb_debugging_Set() const{
    return m_enabled_usb_debugging_isSet;
}

bool OAIDevice::is_enabled_usb_debugging_Valid() const{
    return m_enabled_usb_debugging_isValid;
}

QString OAIDevice::getEncryptionState() const {
    return m_encryption_state;
}
void OAIDevice::setEncryptionState(const QString &encryption_state) {
    m_encryption_state = encryption_state;
    m_encryption_state_isSet = true;
}

bool OAIDevice::is_encryption_state_Set() const{
    return m_encryption_state_isSet;
}

bool OAIDevice::is_encryption_state_Valid() const{
    return m_encryption_state_isValid;
}

OAIEndpointVerificationSpecificAttributes OAIDevice::getEndpointVerificationSpecificAttributes() const {
    return m_endpoint_verification_specific_attributes;
}
void OAIDevice::setEndpointVerificationSpecificAttributes(const OAIEndpointVerificationSpecificAttributes &endpoint_verification_specific_attributes) {
    m_endpoint_verification_specific_attributes = endpoint_verification_specific_attributes;
    m_endpoint_verification_specific_attributes_isSet = true;
}

bool OAIDevice::is_endpoint_verification_specific_attributes_Set() const{
    return m_endpoint_verification_specific_attributes_isSet;
}

bool OAIDevice::is_endpoint_verification_specific_attributes_Valid() const{
    return m_endpoint_verification_specific_attributes_isValid;
}

QString OAIDevice::getHostname() const {
    return m_hostname;
}
void OAIDevice::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIDevice::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIDevice::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QString OAIDevice::getImei() const {
    return m_imei;
}
void OAIDevice::setImei(const QString &imei) {
    m_imei = imei;
    m_imei_isSet = true;
}

bool OAIDevice::is_imei_Set() const{
    return m_imei_isSet;
}

bool OAIDevice::is_imei_Valid() const{
    return m_imei_isValid;
}

QString OAIDevice::getKernelVersion() const {
    return m_kernel_version;
}
void OAIDevice::setKernelVersion(const QString &kernel_version) {
    m_kernel_version = kernel_version;
    m_kernel_version_isSet = true;
}

bool OAIDevice::is_kernel_version_Set() const{
    return m_kernel_version_isSet;
}

bool OAIDevice::is_kernel_version_Valid() const{
    return m_kernel_version_isValid;
}

QString OAIDevice::getLastSyncTime() const {
    return m_last_sync_time;
}
void OAIDevice::setLastSyncTime(const QString &last_sync_time) {
    m_last_sync_time = last_sync_time;
    m_last_sync_time_isSet = true;
}

bool OAIDevice::is_last_sync_time_Set() const{
    return m_last_sync_time_isSet;
}

bool OAIDevice::is_last_sync_time_Valid() const{
    return m_last_sync_time_isValid;
}

QString OAIDevice::getManagementState() const {
    return m_management_state;
}
void OAIDevice::setManagementState(const QString &management_state) {
    m_management_state = management_state;
    m_management_state_isSet = true;
}

bool OAIDevice::is_management_state_Set() const{
    return m_management_state_isSet;
}

bool OAIDevice::is_management_state_Valid() const{
    return m_management_state_isValid;
}

QString OAIDevice::getManufacturer() const {
    return m_manufacturer;
}
void OAIDevice::setManufacturer(const QString &manufacturer) {
    m_manufacturer = manufacturer;
    m_manufacturer_isSet = true;
}

bool OAIDevice::is_manufacturer_Set() const{
    return m_manufacturer_isSet;
}

bool OAIDevice::is_manufacturer_Valid() const{
    return m_manufacturer_isValid;
}

QString OAIDevice::getMeid() const {
    return m_meid;
}
void OAIDevice::setMeid(const QString &meid) {
    m_meid = meid;
    m_meid_isSet = true;
}

bool OAIDevice::is_meid_Set() const{
    return m_meid_isSet;
}

bool OAIDevice::is_meid_Valid() const{
    return m_meid_isValid;
}

QString OAIDevice::getModel() const {
    return m_model;
}
void OAIDevice::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIDevice::is_model_Set() const{
    return m_model_isSet;
}

bool OAIDevice::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIDevice::getName() const {
    return m_name;
}
void OAIDevice::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDevice::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDevice::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDevice::getNetworkOperator() const {
    return m_network_operator;
}
void OAIDevice::setNetworkOperator(const QString &network_operator) {
    m_network_operator = network_operator;
    m_network_operator_isSet = true;
}

bool OAIDevice::is_network_operator_Set() const{
    return m_network_operator_isSet;
}

bool OAIDevice::is_network_operator_Valid() const{
    return m_network_operator_isValid;
}

QString OAIDevice::getOsVersion() const {
    return m_os_version;
}
void OAIDevice::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIDevice::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIDevice::is_os_version_Valid() const{
    return m_os_version_isValid;
}

QList<QString> OAIDevice::getOtherAccounts() const {
    return m_other_accounts;
}
void OAIDevice::setOtherAccounts(const QList<QString> &other_accounts) {
    m_other_accounts = other_accounts;
    m_other_accounts_isSet = true;
}

bool OAIDevice::is_other_accounts_Set() const{
    return m_other_accounts_isSet;
}

bool OAIDevice::is_other_accounts_Valid() const{
    return m_other_accounts_isValid;
}

QString OAIDevice::getOwnerType() const {
    return m_owner_type;
}
void OAIDevice::setOwnerType(const QString &owner_type) {
    m_owner_type = owner_type;
    m_owner_type_isSet = true;
}

bool OAIDevice::is_owner_type_Set() const{
    return m_owner_type_isSet;
}

bool OAIDevice::is_owner_type_Valid() const{
    return m_owner_type_isValid;
}

QString OAIDevice::getReleaseVersion() const {
    return m_release_version;
}
void OAIDevice::setReleaseVersion(const QString &release_version) {
    m_release_version = release_version;
    m_release_version_isSet = true;
}

bool OAIDevice::is_release_version_Set() const{
    return m_release_version_isSet;
}

bool OAIDevice::is_release_version_Valid() const{
    return m_release_version_isValid;
}

QString OAIDevice::getSecurityPatchTime() const {
    return m_security_patch_time;
}
void OAIDevice::setSecurityPatchTime(const QString &security_patch_time) {
    m_security_patch_time = security_patch_time;
    m_security_patch_time_isSet = true;
}

bool OAIDevice::is_security_patch_time_Set() const{
    return m_security_patch_time_isSet;
}

bool OAIDevice::is_security_patch_time_Valid() const{
    return m_security_patch_time_isValid;
}

QString OAIDevice::getSerialNumber() const {
    return m_serial_number;
}
void OAIDevice::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIDevice::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIDevice::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QList<QString> OAIDevice::getWifiMacAddresses() const {
    return m_wifi_mac_addresses;
}
void OAIDevice::setWifiMacAddresses(const QList<QString> &wifi_mac_addresses) {
    m_wifi_mac_addresses = wifi_mac_addresses;
    m_wifi_mac_addresses_isSet = true;
}

bool OAIDevice::is_wifi_mac_addresses_Set() const{
    return m_wifi_mac_addresses_isSet;
}

bool OAIDevice::is_wifi_mac_addresses_Valid() const{
    return m_wifi_mac_addresses_isValid;
}

bool OAIDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_android_specific_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_baseband_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bootloader_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_compromised_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_developer_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_usb_debugging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_verification_specific_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imei_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kernel_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sync_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_patch_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_mac_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
