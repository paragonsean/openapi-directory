/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemberRelation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemberRelation::OAIMemberRelation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemberRelation::OAIMemberRelation() {
    this->initializeModel();
}

OAIMemberRelation::~OAIMemberRelation() {}

void OAIMemberRelation::initializeModel() {

    m_member_isSet = false;
    m_member_isValid = false;

    m_preferred_member_key_isSet = false;
    m_preferred_member_key_isValid = false;

    m_relation_type_isSet = false;
    m_relation_type_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;
}

void OAIMemberRelation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemberRelation::fromJsonObject(QJsonObject json) {

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("member")]);
    m_member_isSet = !json[QString("member")].isNull() && m_member_isValid;

    m_preferred_member_key_isValid = ::OpenAPI::fromJsonValue(m_preferred_member_key, json[QString("preferredMemberKey")]);
    m_preferred_member_key_isSet = !json[QString("preferredMemberKey")].isNull() && m_preferred_member_key_isValid;

    m_relation_type_isValid = ::OpenAPI::fromJsonValue(m_relation_type, json[QString("relationType")]);
    m_relation_type_isSet = !json[QString("relationType")].isNull() && m_relation_type_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;
}

QString OAIMemberRelation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemberRelation::asJsonObject() const {
    QJsonObject obj;
    if (m_member_isSet) {
        obj.insert(QString("member"), ::OpenAPI::toJsonValue(m_member));
    }
    if (m_preferred_member_key.size() > 0) {
        obj.insert(QString("preferredMemberKey"), ::OpenAPI::toJsonValue(m_preferred_member_key));
    }
    if (m_relation_type_isSet) {
        obj.insert(QString("relationType"), ::OpenAPI::toJsonValue(m_relation_type));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    return obj;
}

QString OAIMemberRelation::getMember() const {
    return m_member;
}
void OAIMemberRelation::setMember(const QString &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAIMemberRelation::is_member_Set() const{
    return m_member_isSet;
}

bool OAIMemberRelation::is_member_Valid() const{
    return m_member_isValid;
}

QList<OAIEntityKey> OAIMemberRelation::getPreferredMemberKey() const {
    return m_preferred_member_key;
}
void OAIMemberRelation::setPreferredMemberKey(const QList<OAIEntityKey> &preferred_member_key) {
    m_preferred_member_key = preferred_member_key;
    m_preferred_member_key_isSet = true;
}

bool OAIMemberRelation::is_preferred_member_key_Set() const{
    return m_preferred_member_key_isSet;
}

bool OAIMemberRelation::is_preferred_member_key_Valid() const{
    return m_preferred_member_key_isValid;
}

QString OAIMemberRelation::getRelationType() const {
    return m_relation_type;
}
void OAIMemberRelation::setRelationType(const QString &relation_type) {
    m_relation_type = relation_type;
    m_relation_type_isSet = true;
}

bool OAIMemberRelation::is_relation_type_Set() const{
    return m_relation_type_isSet;
}

bool OAIMemberRelation::is_relation_type_Valid() const{
    return m_relation_type_isValid;
}

QList<OAITransitiveMembershipRole> OAIMemberRelation::getRoles() const {
    return m_roles;
}
void OAIMemberRelation::setRoles(const QList<OAITransitiveMembershipRole> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIMemberRelation::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIMemberRelation::is_roles_Valid() const{
    return m_roles_isValid;
}

bool OAIMemberRelation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_member_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_member_key.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemberRelation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
