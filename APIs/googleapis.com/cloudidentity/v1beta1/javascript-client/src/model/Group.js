/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DynamicGroupMetadata from './DynamicGroupMetadata';
import EntityKey from './EntityKey';
import PosixGroup from './PosixGroup';

/**
 * The Group model module.
 * @module model/Group
 * @version v1beta1
 */
class Group {
    /**
     * Constructs a new <code>Group</code>.
     * A group within the Cloud Identity Groups API. A &#x60;Group&#x60; is a collection of entities, where each entity is either a user, another group, or a service account.
     * @alias module:model/Group
     */
    constructor() { 
        
        Group.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Group</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Group} obj Optional instance to populate.
     * @return {module:model/Group} The populated <code>Group</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Group();

            if (data.hasOwnProperty('additionalGroupKeys')) {
                obj['additionalGroupKeys'] = ApiClient.convertToType(data['additionalGroupKeys'], [EntityKey]);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('dynamicGroupMetadata')) {
                obj['dynamicGroupMetadata'] = DynamicGroupMetadata.constructFromObject(data['dynamicGroupMetadata']);
            }
            if (data.hasOwnProperty('groupKey')) {
                obj['groupKey'] = EntityKey.constructFromObject(data['groupKey']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = ApiClient.convertToType(data['parent'], 'String');
            }
            if (data.hasOwnProperty('posixGroups')) {
                obj['posixGroups'] = ApiClient.convertToType(data['posixGroups'], [PosixGroup]);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Group</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Group</code>.
     */
    static validateJSON(data) {
        if (data['additionalGroupKeys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalGroupKeys'])) {
                throw new Error("Expected the field `additionalGroupKeys` to be an array in the JSON data but got " + data['additionalGroupKeys']);
            }
            // validate the optional field `additionalGroupKeys` (array)
            for (const item of data['additionalGroupKeys']) {
                EntityKey.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `dynamicGroupMetadata`
        if (data['dynamicGroupMetadata']) { // data not null
          DynamicGroupMetadata.validateJSON(data['dynamicGroupMetadata']);
        }
        // validate the optional field `groupKey`
        if (data['groupKey']) { // data not null
          EntityKey.validateJSON(data['groupKey']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['parent'] && !(typeof data['parent'] === 'string' || data['parent'] instanceof String)) {
            throw new Error("Expected the field `parent` to be a primitive type in the JSON string but got " + data['parent']);
        }
        if (data['posixGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['posixGroups'])) {
                throw new Error("Expected the field `posixGroups` to be an array in the JSON data but got " + data['posixGroups']);
            }
            // validate the optional field `posixGroups` (array)
            for (const item of data['posixGroups']) {
                PosixGroup.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. Additional group keys associated with the Group.
 * @member {Array.<module:model/EntityKey>} additionalGroupKeys
 */
Group.prototype['additionalGroupKeys'] = undefined;

/**
 * Output only. The time when the `Group` was created.
 * @member {String} createTime
 */
Group.prototype['createTime'] = undefined;

/**
 * An extended description to help users determine the purpose of a `Group`. Must not be longer than 4,096 characters.
 * @member {String} description
 */
Group.prototype['description'] = undefined;

/**
 * The display name of the `Group`.
 * @member {String} displayName
 */
Group.prototype['displayName'] = undefined;

/**
 * @member {module:model/DynamicGroupMetadata} dynamicGroupMetadata
 */
Group.prototype['dynamicGroupMetadata'] = undefined;

/**
 * @member {module:model/EntityKey} groupKey
 */
Group.prototype['groupKey'] = undefined;

/**
 * Required. One or more label entries that apply to the Group. Currently supported labels contain a key with an empty value. Google Groups are the default type of group and have a label with a key of `cloudidentity.googleapis.com/groups.discussion_forum` and an empty value. Existing Google Groups can have an additional label with a key of `cloudidentity.googleapis.com/groups.security` and an empty value added to them. **This is an immutable change and the security label cannot be removed once added.** Dynamic groups have a label with a key of `cloudidentity.googleapis.com/groups.dynamic`. Identity-mapped groups for Cloud Search have a label with a key of `system/groups/external` and an empty value.
 * @member {Object.<String, String>} labels
 */
Group.prototype['labels'] = undefined;

/**
 * Output only. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Group`. Shall be of the form `groups/{group_id}`.
 * @member {String} name
 */
Group.prototype['name'] = undefined;

/**
 * Required. Immutable. The resource name of the entity under which this `Group` resides in the Cloud Identity resource hierarchy. Must be of the form `identitysources/{identity_source}` for external [identity-mapped groups](https://support.google.com/a/answer/9039510) or `customers/{customer_id}` for Google Groups. The `customer_id` must begin with \"C\" (for example, 'C046psxkn'). [Find your customer ID.] (https://support.google.com/cloudidentity/answer/10070793)
 * @member {String} parent
 */
Group.prototype['parent'] = undefined;

/**
 * Optional. The POSIX groups associated with the `Group`.
 * @member {Array.<module:model/PosixGroup>} posixGroups
 */
Group.prototype['posixGroups'] = undefined;

/**
 * Output only. The time when the `Group` was last updated.
 * @member {String} updateTime
 */
Group.prototype['updateTime'] = undefined;






export default Group;

