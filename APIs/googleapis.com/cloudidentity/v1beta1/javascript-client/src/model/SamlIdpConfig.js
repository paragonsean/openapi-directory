/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SamlIdpConfig model module.
 * @module model/SamlIdpConfig
 * @version v1beta1
 */
class SamlIdpConfig {
    /**
     * Constructs a new <code>SamlIdpConfig</code>.
     * SAML IDP (identity provider) configuration.
     * @alias module:model/SamlIdpConfig
     */
    constructor() { 
        
        SamlIdpConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SamlIdpConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SamlIdpConfig} obj Optional instance to populate.
     * @return {module:model/SamlIdpConfig} The populated <code>SamlIdpConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SamlIdpConfig();

            if (data.hasOwnProperty('changePasswordUri')) {
                obj['changePasswordUri'] = ApiClient.convertToType(data['changePasswordUri'], 'String');
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('logoutRedirectUri')) {
                obj['logoutRedirectUri'] = ApiClient.convertToType(data['logoutRedirectUri'], 'String');
            }
            if (data.hasOwnProperty('singleSignOnServiceUri')) {
                obj['singleSignOnServiceUri'] = ApiClient.convertToType(data['singleSignOnServiceUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SamlIdpConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SamlIdpConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['changePasswordUri'] && !(typeof data['changePasswordUri'] === 'string' || data['changePasswordUri'] instanceof String)) {
            throw new Error("Expected the field `changePasswordUri` to be a primitive type in the JSON string but got " + data['changePasswordUri']);
        }
        // ensure the json data is a string
        if (data['entityId'] && !(typeof data['entityId'] === 'string' || data['entityId'] instanceof String)) {
            throw new Error("Expected the field `entityId` to be a primitive type in the JSON string but got " + data['entityId']);
        }
        // ensure the json data is a string
        if (data['logoutRedirectUri'] && !(typeof data['logoutRedirectUri'] === 'string' || data['logoutRedirectUri'] instanceof String)) {
            throw new Error("Expected the field `logoutRedirectUri` to be a primitive type in the JSON string but got " + data['logoutRedirectUri']);
        }
        // ensure the json data is a string
        if (data['singleSignOnServiceUri'] && !(typeof data['singleSignOnServiceUri'] === 'string' || data['singleSignOnServiceUri'] instanceof String)) {
            throw new Error("Expected the field `singleSignOnServiceUri` to be a primitive type in the JSON string but got " + data['singleSignOnServiceUri']);
        }

        return true;
    }


}



/**
 * The **Change Password URL** of the identity provider. Users will be sent to this URL when changing their passwords at `myaccount.google.com`. This takes precedence over the change password URL configured at customer-level. Must use `HTTPS`.
 * @member {String} changePasswordUri
 */
SamlIdpConfig.prototype['changePasswordUri'] = undefined;

/**
 * Required. The SAML **Entity ID** of the identity provider.
 * @member {String} entityId
 */
SamlIdpConfig.prototype['entityId'] = undefined;

/**
 * The **Logout Redirect URL** (sign-out page URL) of the identity provider. When a user clicks the sign-out link on a Google page, they will be redirected to this URL. This is a pure redirect with no attached SAML `LogoutRequest` i.e. SAML single logout is not supported. Must use `HTTPS`.
 * @member {String} logoutRedirectUri
 */
SamlIdpConfig.prototype['logoutRedirectUri'] = undefined;

/**
 * Required. The `SingleSignOnService` endpoint location (sign-in page URL) of the identity provider. This is the URL where the `AuthnRequest` will be sent. Must use `HTTPS`. Assumed to accept the `HTTP-Redirect` binding.
 * @member {String} singleSignOnServiceUri
 */
SamlIdpConfig.prototype['singleSignOnServiceUri'] = undefined;






export default SamlIdpConfig;

