/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomAttributeValue from './CustomAttributeValue';

/**
 * The ClientState model module.
 * @module model/ClientState
 * @version v1beta1
 */
class ClientState {
    /**
     * Constructs a new <code>ClientState</code>.
     * Represents the state associated with an API client calling the Devices API. Resource representing ClientState and supports updates from API users
     * @alias module:model/ClientState
     */
    constructor() { 
        
        ClientState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClientState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClientState} obj Optional instance to populate.
     * @return {module:model/ClientState} The populated <code>ClientState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClientState();

            if (data.hasOwnProperty('assetTags')) {
                obj['assetTags'] = ApiClient.convertToType(data['assetTags'], ['String']);
            }
            if (data.hasOwnProperty('complianceState')) {
                obj['complianceState'] = ApiClient.convertToType(data['complianceState'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('customId')) {
                obj['customId'] = ApiClient.convertToType(data['customId'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('healthScore')) {
                obj['healthScore'] = ApiClient.convertToType(data['healthScore'], 'String');
            }
            if (data.hasOwnProperty('keyValuePairs')) {
                obj['keyValuePairs'] = ApiClient.convertToType(data['keyValuePairs'], {'String': CustomAttributeValue});
            }
            if (data.hasOwnProperty('lastUpdateTime')) {
                obj['lastUpdateTime'] = ApiClient.convertToType(data['lastUpdateTime'], 'String');
            }
            if (data.hasOwnProperty('managed')) {
                obj['managed'] = ApiClient.convertToType(data['managed'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ownerType')) {
                obj['ownerType'] = ApiClient.convertToType(data['ownerType'], 'String');
            }
            if (data.hasOwnProperty('scoreReason')) {
                obj['scoreReason'] = ApiClient.convertToType(data['scoreReason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClientState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClientState</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['assetTags'])) {
            throw new Error("Expected the field `assetTags` to be an array in the JSON data but got " + data['assetTags']);
        }
        // ensure the json data is a string
        if (data['complianceState'] && !(typeof data['complianceState'] === 'string' || data['complianceState'] instanceof String)) {
            throw new Error("Expected the field `complianceState` to be a primitive type in the JSON string but got " + data['complianceState']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['customId'] && !(typeof data['customId'] === 'string' || data['customId'] instanceof String)) {
            throw new Error("Expected the field `customId` to be a primitive type in the JSON string but got " + data['customId']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['healthScore'] && !(typeof data['healthScore'] === 'string' || data['healthScore'] instanceof String)) {
            throw new Error("Expected the field `healthScore` to be a primitive type in the JSON string but got " + data['healthScore']);
        }
        // ensure the json data is a string
        if (data['lastUpdateTime'] && !(typeof data['lastUpdateTime'] === 'string' || data['lastUpdateTime'] instanceof String)) {
            throw new Error("Expected the field `lastUpdateTime` to be a primitive type in the JSON string but got " + data['lastUpdateTime']);
        }
        // ensure the json data is a string
        if (data['managed'] && !(typeof data['managed'] === 'string' || data['managed'] instanceof String)) {
            throw new Error("Expected the field `managed` to be a primitive type in the JSON string but got " + data['managed']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['ownerType'] && !(typeof data['ownerType'] === 'string' || data['ownerType'] instanceof String)) {
            throw new Error("Expected the field `ownerType` to be a primitive type in the JSON string but got " + data['ownerType']);
        }
        // ensure the json data is a string
        if (data['scoreReason'] && !(typeof data['scoreReason'] === 'string' || data['scoreReason'] instanceof String)) {
            throw new Error("Expected the field `scoreReason` to be a primitive type in the JSON string but got " + data['scoreReason']);
        }

        return true;
    }


}



/**
 * The caller can specify asset tags for this resource
 * @member {Array.<String>} assetTags
 */
ClientState.prototype['assetTags'] = undefined;

/**
 * The compliance state of the resource as specified by the API client.
 * @member {module:model/ClientState.ComplianceStateEnum} complianceState
 */
ClientState.prototype['complianceState'] = undefined;

/**
 * Output only. The time the client state data was created.
 * @member {String} createTime
 */
ClientState.prototype['createTime'] = undefined;

/**
 * This field may be used to store a unique identifier for the API resource within which these CustomAttributes are a field.
 * @member {String} customId
 */
ClientState.prototype['customId'] = undefined;

/**
 * The token that needs to be passed back for concurrency control in updates. Token needs to be passed back in UpdateRequest
 * @member {String} etag
 */
ClientState.prototype['etag'] = undefined;

/**
 * The Health score of the resource
 * @member {module:model/ClientState.HealthScoreEnum} healthScore
 */
ClientState.prototype['healthScore'] = undefined;

/**
 * The map of key-value attributes stored by callers specific to a device. The total serialized length of this map may not exceed 10KB. No limit is placed on the number of attributes in a map.
 * @member {Object.<String, module:model/CustomAttributeValue>} keyValuePairs
 */
ClientState.prototype['keyValuePairs'] = undefined;

/**
 * Output only. The time the client state data was last updated.
 * @member {String} lastUpdateTime
 */
ClientState.prototype['lastUpdateTime'] = undefined;

/**
 * The management state of the resource as specified by the API client.
 * @member {module:model/ClientState.ManagedEnum} managed
 */
ClientState.prototype['managed'] = undefined;

/**
 * Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the ClientState in format: `devices/{device_id}/deviceUsers/{device_user_id}/clientState/{partner_id}`, where partner_id corresponds to the partner storing the data.
 * @member {String} name
 */
ClientState.prototype['name'] = undefined;

/**
 * Output only. The owner of the ClientState
 * @member {module:model/ClientState.OwnerTypeEnum} ownerType
 */
ClientState.prototype['ownerType'] = undefined;

/**
 * A descriptive cause of the health score.
 * @member {String} scoreReason
 */
ClientState.prototype['scoreReason'] = undefined;





/**
 * Allowed values for the <code>complianceState</code> property.
 * @enum {String}
 * @readonly
 */
ClientState['ComplianceStateEnum'] = {

    /**
     * value: "COMPLIANCE_STATE_UNSPECIFIED"
     * @const
     */
    "COMPLIANCE_STATE_UNSPECIFIED": "COMPLIANCE_STATE_UNSPECIFIED",

    /**
     * value: "COMPLIANT"
     * @const
     */
    "COMPLIANT": "COMPLIANT",

    /**
     * value: "NON_COMPLIANT"
     * @const
     */
    "NON_COMPLIANT": "NON_COMPLIANT"
};


/**
 * Allowed values for the <code>healthScore</code> property.
 * @enum {String}
 * @readonly
 */
ClientState['HealthScoreEnum'] = {

    /**
     * value: "HEALTH_SCORE_UNSPECIFIED"
     * @const
     */
    "HEALTH_SCORE_UNSPECIFIED": "HEALTH_SCORE_UNSPECIFIED",

    /**
     * value: "VERY_POOR"
     * @const
     */
    "VERY_POOR": "VERY_POOR",

    /**
     * value: "POOR"
     * @const
     */
    "POOR": "POOR",

    /**
     * value: "NEUTRAL"
     * @const
     */
    "NEUTRAL": "NEUTRAL",

    /**
     * value: "GOOD"
     * @const
     */
    "GOOD": "GOOD",

    /**
     * value: "VERY_GOOD"
     * @const
     */
    "VERY_GOOD": "VERY_GOOD"
};


/**
 * Allowed values for the <code>managed</code> property.
 * @enum {String}
 * @readonly
 */
ClientState['ManagedEnum'] = {

    /**
     * value: "MANAGED_STATE_UNSPECIFIED"
     * @const
     */
    "MANAGED_STATE_UNSPECIFIED": "MANAGED_STATE_UNSPECIFIED",

    /**
     * value: "MANAGED"
     * @const
     */
    "MANAGED": "MANAGED",

    /**
     * value: "UNMANAGED"
     * @const
     */
    "UNMANAGED": "UNMANAGED"
};


/**
 * Allowed values for the <code>ownerType</code> property.
 * @enum {String}
 * @readonly
 */
ClientState['OwnerTypeEnum'] = {

    /**
     * value: "OWNER_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "OWNER_TYPE_UNSPECIFIED",

    /**
     * value: "OWNER_TYPE_CUSTOMER"
     * @const
     */
    "CUSTOMER": "OWNER_TYPE_CUSTOMER",

    /**
     * value: "OWNER_TYPE_PARTNER"
     * @const
     */
    "PARTNER": "OWNER_TYPE_PARTNER"
};



export default ClientState;

