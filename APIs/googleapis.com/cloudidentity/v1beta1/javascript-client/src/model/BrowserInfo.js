/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BrowserInfo model module.
 * @module model/BrowserInfo
 * @version v1beta1
 */
class BrowserInfo {
    /**
     * Constructs a new <code>BrowserInfo</code>.
     * Browser-specific fields reported by the Endpoint Verification extension. LINT.IfChange
     * @alias module:model/BrowserInfo
     */
    constructor() { 
        
        BrowserInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BrowserInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BrowserInfo} obj Optional instance to populate.
     * @return {module:model/BrowserInfo} The populated <code>BrowserInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BrowserInfo();

            if (data.hasOwnProperty('browserManagementState')) {
                obj['browserManagementState'] = ApiClient.convertToType(data['browserManagementState'], 'String');
            }
            if (data.hasOwnProperty('browserVersion')) {
                obj['browserVersion'] = ApiClient.convertToType(data['browserVersion'], 'String');
            }
            if (data.hasOwnProperty('isBuiltInDnsClientEnabled')) {
                obj['isBuiltInDnsClientEnabled'] = ApiClient.convertToType(data['isBuiltInDnsClientEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isBulkDataEntryAnalysisEnabled')) {
                obj['isBulkDataEntryAnalysisEnabled'] = ApiClient.convertToType(data['isBulkDataEntryAnalysisEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isChromeCleanupEnabled')) {
                obj['isChromeCleanupEnabled'] = ApiClient.convertToType(data['isChromeCleanupEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isChromeRemoteDesktopAppBlocked')) {
                obj['isChromeRemoteDesktopAppBlocked'] = ApiClient.convertToType(data['isChromeRemoteDesktopAppBlocked'], 'Boolean');
            }
            if (data.hasOwnProperty('isFileDownloadAnalysisEnabled')) {
                obj['isFileDownloadAnalysisEnabled'] = ApiClient.convertToType(data['isFileDownloadAnalysisEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isFileUploadAnalysisEnabled')) {
                obj['isFileUploadAnalysisEnabled'] = ApiClient.convertToType(data['isFileUploadAnalysisEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isRealtimeUrlCheckEnabled')) {
                obj['isRealtimeUrlCheckEnabled'] = ApiClient.convertToType(data['isRealtimeUrlCheckEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isSecurityEventAnalysisEnabled')) {
                obj['isSecurityEventAnalysisEnabled'] = ApiClient.convertToType(data['isSecurityEventAnalysisEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isSiteIsolationEnabled')) {
                obj['isSiteIsolationEnabled'] = ApiClient.convertToType(data['isSiteIsolationEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isThirdPartyBlockingEnabled')) {
                obj['isThirdPartyBlockingEnabled'] = ApiClient.convertToType(data['isThirdPartyBlockingEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('passwordProtectionWarningTrigger')) {
                obj['passwordProtectionWarningTrigger'] = ApiClient.convertToType(data['passwordProtectionWarningTrigger'], 'String');
            }
            if (data.hasOwnProperty('safeBrowsingProtectionLevel')) {
                obj['safeBrowsingProtectionLevel'] = ApiClient.convertToType(data['safeBrowsingProtectionLevel'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BrowserInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BrowserInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['browserManagementState'] && !(typeof data['browserManagementState'] === 'string' || data['browserManagementState'] instanceof String)) {
            throw new Error("Expected the field `browserManagementState` to be a primitive type in the JSON string but got " + data['browserManagementState']);
        }
        // ensure the json data is a string
        if (data['browserVersion'] && !(typeof data['browserVersion'] === 'string' || data['browserVersion'] instanceof String)) {
            throw new Error("Expected the field `browserVersion` to be a primitive type in the JSON string but got " + data['browserVersion']);
        }
        // ensure the json data is a string
        if (data['passwordProtectionWarningTrigger'] && !(typeof data['passwordProtectionWarningTrigger'] === 'string' || data['passwordProtectionWarningTrigger'] instanceof String)) {
            throw new Error("Expected the field `passwordProtectionWarningTrigger` to be a primitive type in the JSON string but got " + data['passwordProtectionWarningTrigger']);
        }
        // ensure the json data is a string
        if (data['safeBrowsingProtectionLevel'] && !(typeof data['safeBrowsingProtectionLevel'] === 'string' || data['safeBrowsingProtectionLevel'] instanceof String)) {
            throw new Error("Expected the field `safeBrowsingProtectionLevel` to be a primitive type in the JSON string but got " + data['safeBrowsingProtectionLevel']);
        }

        return true;
    }


}



/**
 * Output only. Browser's management state.
 * @member {module:model/BrowserInfo.BrowserManagementStateEnum} browserManagementState
 */
BrowserInfo.prototype['browserManagementState'] = undefined;

/**
 * Version of the request initiating browser.
 * @member {String} browserVersion
 */
BrowserInfo.prototype['browserVersion'] = undefined;

/**
 * Current state of [built-in DNS client](https://chromeenterprise.google/policies/#BuiltInDnsClientEnabled).
 * @member {Boolean} isBuiltInDnsClientEnabled
 */
BrowserInfo.prototype['isBuiltInDnsClientEnabled'] = undefined;

/**
 * Current state of [bulk data analysis](https://chromeenterprise.google/policies/#OnBulkDataEntryEnterpriseConnector). Set to true if provider list from Chrome is non-empty.
 * @member {Boolean} isBulkDataEntryAnalysisEnabled
 */
BrowserInfo.prototype['isBulkDataEntryAnalysisEnabled'] = undefined;

/**
 * Current state of [Chrome Cleanup](https://chromeenterprise.google/policies/#ChromeCleanupEnabled).
 * @member {Boolean} isChromeCleanupEnabled
 */
BrowserInfo.prototype['isChromeCleanupEnabled'] = undefined;

/**
 * Current state of [Chrome Remote Desktop app](https://chromeenterprise.google/policies/#URLBlocklist).
 * @member {Boolean} isChromeRemoteDesktopAppBlocked
 */
BrowserInfo.prototype['isChromeRemoteDesktopAppBlocked'] = undefined;

/**
 * Current state of [file download analysis](https://chromeenterprise.google/policies/#OnFileDownloadedEnterpriseConnector). Set to true if provider list from Chrome is non-empty.
 * @member {Boolean} isFileDownloadAnalysisEnabled
 */
BrowserInfo.prototype['isFileDownloadAnalysisEnabled'] = undefined;

/**
 * Current state of [file upload analysis](https://chromeenterprise.google/policies/#OnFileAttachedEnterpriseConnector). Set to true if provider list from Chrome is non-empty.
 * @member {Boolean} isFileUploadAnalysisEnabled
 */
BrowserInfo.prototype['isFileUploadAnalysisEnabled'] = undefined;

/**
 * Current state of [real-time URL check](https://chromeenterprise.google/policies/#EnterpriseRealTimeUrlCheckMode). Set to true if provider list from Chrome is non-empty.
 * @member {Boolean} isRealtimeUrlCheckEnabled
 */
BrowserInfo.prototype['isRealtimeUrlCheckEnabled'] = undefined;

/**
 * Current state of [security event analysis](https://chromeenterprise.google/policies/#OnSecurityEventEnterpriseConnector). Set to true if provider list from Chrome is non-empty.
 * @member {Boolean} isSecurityEventAnalysisEnabled
 */
BrowserInfo.prototype['isSecurityEventAnalysisEnabled'] = undefined;

/**
 * Current state of [site isolation](https://chromeenterprise.google/policies/?policy=IsolateOrigins).
 * @member {Boolean} isSiteIsolationEnabled
 */
BrowserInfo.prototype['isSiteIsolationEnabled'] = undefined;

/**
 * Current state of [third-party blocking](https://chromeenterprise.google/policies/#ThirdPartyBlockingEnabled).
 * @member {Boolean} isThirdPartyBlockingEnabled
 */
BrowserInfo.prototype['isThirdPartyBlockingEnabled'] = undefined;

/**
 * Current state of [password protection trigger](https://chromeenterprise.google/policies/#PasswordProtectionWarningTrigger).
 * @member {module:model/BrowserInfo.PasswordProtectionWarningTriggerEnum} passwordProtectionWarningTrigger
 */
BrowserInfo.prototype['passwordProtectionWarningTrigger'] = undefined;

/**
 * Current state of [Safe Browsing protection level](https://chromeenterprise.google/policies/#SafeBrowsingProtectionLevel).
 * @member {module:model/BrowserInfo.SafeBrowsingProtectionLevelEnum} safeBrowsingProtectionLevel
 */
BrowserInfo.prototype['safeBrowsingProtectionLevel'] = undefined;





/**
 * Allowed values for the <code>browserManagementState</code> property.
 * @enum {String}
 * @readonly
 */
BrowserInfo['BrowserManagementStateEnum'] = {

    /**
     * value: "UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "UNSPECIFIED",

    /**
     * value: "UNMANAGED"
     * @const
     */
    "UNMANAGED": "UNMANAGED",

    /**
     * value: "MANAGED_BY_OTHER_DOMAIN"
     * @const
     */
    "MANAGED_BY_OTHER_DOMAIN": "MANAGED_BY_OTHER_DOMAIN",

    /**
     * value: "PROFILE_MANAGED"
     * @const
     */
    "PROFILE_MANAGED": "PROFILE_MANAGED",

    /**
     * value: "BROWSER_MANAGED"
     * @const
     */
    "BROWSER_MANAGED": "BROWSER_MANAGED"
};


/**
 * Allowed values for the <code>passwordProtectionWarningTrigger</code> property.
 * @enum {String}
 * @readonly
 */
BrowserInfo['PasswordProtectionWarningTriggerEnum'] = {

    /**
     * value: "PASSWORD_PROTECTION_TRIGGER_UNSPECIFIED"
     * @const
     */
    "PASSWORD_PROTECTION_TRIGGER_UNSPECIFIED": "PASSWORD_PROTECTION_TRIGGER_UNSPECIFIED",

    /**
     * value: "PROTECTION_OFF"
     * @const
     */
    "PROTECTION_OFF": "PROTECTION_OFF",

    /**
     * value: "PASSWORD_REUSE"
     * @const
     */
    "PASSWORD_REUSE": "PASSWORD_REUSE",

    /**
     * value: "PHISHING_REUSE"
     * @const
     */
    "PHISHING_REUSE": "PHISHING_REUSE"
};


/**
 * Allowed values for the <code>safeBrowsingProtectionLevel</code> property.
 * @enum {String}
 * @readonly
 */
BrowserInfo['SafeBrowsingProtectionLevelEnum'] = {

    /**
     * value: "SAFE_BROWSING_LEVEL_UNSPECIFIED"
     * @const
     */
    "SAFE_BROWSING_LEVEL_UNSPECIFIED": "SAFE_BROWSING_LEVEL_UNSPECIFIED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD",

    /**
     * value: "ENHANCED"
     * @const
     */
    "ENHANCED": "ENHANCED"
};



export default BrowserInfo;

