/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateTemplate from './CertificateTemplate';

/**
 * The CertificateAttributes model module.
 * @module model/CertificateAttributes
 * @version v1beta1
 */
class CertificateAttributes {
    /**
     * Constructs a new <code>CertificateAttributes</code>.
     * Stores information about a certificate.
     * @alias module:model/CertificateAttributes
     */
    constructor() { 
        
        CertificateAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateAttributes} obj Optional instance to populate.
     * @return {module:model/CertificateAttributes} The populated <code>CertificateAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateAttributes();

            if (data.hasOwnProperty('certificateTemplate')) {
                obj['certificateTemplate'] = CertificateTemplate.constructFromObject(data['certificateTemplate']);
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = ApiClient.convertToType(data['fingerprint'], 'String');
            }
            if (data.hasOwnProperty('issuer')) {
                obj['issuer'] = ApiClient.convertToType(data['issuer'], 'String');
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('thumbprint')) {
                obj['thumbprint'] = ApiClient.convertToType(data['thumbprint'], 'String');
            }
            if (data.hasOwnProperty('validationState')) {
                obj['validationState'] = ApiClient.convertToType(data['validationState'], 'String');
            }
            if (data.hasOwnProperty('validityExpirationTime')) {
                obj['validityExpirationTime'] = ApiClient.convertToType(data['validityExpirationTime'], 'String');
            }
            if (data.hasOwnProperty('validityStartTime')) {
                obj['validityStartTime'] = ApiClient.convertToType(data['validityStartTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateAttributes</code>.
     */
    static validateJSON(data) {
        // validate the optional field `certificateTemplate`
        if (data['certificateTemplate']) { // data not null
          CertificateTemplate.validateJSON(data['certificateTemplate']);
        }
        // ensure the json data is a string
        if (data['fingerprint'] && !(typeof data['fingerprint'] === 'string' || data['fingerprint'] instanceof String)) {
            throw new Error("Expected the field `fingerprint` to be a primitive type in the JSON string but got " + data['fingerprint']);
        }
        // ensure the json data is a string
        if (data['issuer'] && !(typeof data['issuer'] === 'string' || data['issuer'] instanceof String)) {
            throw new Error("Expected the field `issuer` to be a primitive type in the JSON string but got " + data['issuer']);
        }
        // ensure the json data is a string
        if (data['serialNumber'] && !(typeof data['serialNumber'] === 'string' || data['serialNumber'] instanceof String)) {
            throw new Error("Expected the field `serialNumber` to be a primitive type in the JSON string but got " + data['serialNumber']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is a string
        if (data['thumbprint'] && !(typeof data['thumbprint'] === 'string' || data['thumbprint'] instanceof String)) {
            throw new Error("Expected the field `thumbprint` to be a primitive type in the JSON string but got " + data['thumbprint']);
        }
        // ensure the json data is a string
        if (data['validationState'] && !(typeof data['validationState'] === 'string' || data['validationState'] instanceof String)) {
            throw new Error("Expected the field `validationState` to be a primitive type in the JSON string but got " + data['validationState']);
        }
        // ensure the json data is a string
        if (data['validityExpirationTime'] && !(typeof data['validityExpirationTime'] === 'string' || data['validityExpirationTime'] instanceof String)) {
            throw new Error("Expected the field `validityExpirationTime` to be a primitive type in the JSON string but got " + data['validityExpirationTime']);
        }
        // ensure the json data is a string
        if (data['validityStartTime'] && !(typeof data['validityStartTime'] === 'string' || data['validityStartTime'] instanceof String)) {
            throw new Error("Expected the field `validityStartTime` to be a primitive type in the JSON string but got " + data['validityStartTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/CertificateTemplate} certificateTemplate
 */
CertificateAttributes.prototype['certificateTemplate'] = undefined;

/**
 * The encoded certificate fingerprint.
 * @member {String} fingerprint
 */
CertificateAttributes.prototype['fingerprint'] = undefined;

/**
 * The name of the issuer of this certificate.
 * @member {String} issuer
 */
CertificateAttributes.prototype['issuer'] = undefined;

/**
 * Serial number of the certificate, Example: \"123456789\".
 * @member {String} serialNumber
 */
CertificateAttributes.prototype['serialNumber'] = undefined;

/**
 * The subject name of this certificate.
 * @member {String} subject
 */
CertificateAttributes.prototype['subject'] = undefined;

/**
 * The certificate thumbprint.
 * @member {String} thumbprint
 */
CertificateAttributes.prototype['thumbprint'] = undefined;

/**
 * Validation state of this certificate.
 * @member {module:model/CertificateAttributes.ValidationStateEnum} validationState
 */
CertificateAttributes.prototype['validationState'] = undefined;

/**
 * Certificate not valid at or after this timestamp.
 * @member {String} validityExpirationTime
 */
CertificateAttributes.prototype['validityExpirationTime'] = undefined;

/**
 * Certificate not valid before this timestamp.
 * @member {String} validityStartTime
 */
CertificateAttributes.prototype['validityStartTime'] = undefined;





/**
 * Allowed values for the <code>validationState</code> property.
 * @enum {String}
 * @readonly
 */
CertificateAttributes['ValidationStateEnum'] = {

    /**
     * value: "CERTIFICATE_VALIDATION_STATE_UNSPECIFIED"
     * @const
     */
    "CERTIFICATE_VALIDATION_STATE_UNSPECIFIED": "CERTIFICATE_VALIDATION_STATE_UNSPECIFIED",

    /**
     * value: "VALIDATION_SUCCESSFUL"
     * @const
     */
    "VALIDATION_SUCCESSFUL": "VALIDATION_SUCCESSFUL",

    /**
     * value: "VALIDATION_FAILED"
     * @const
     */
    "VALIDATION_FAILED": "VALIDATION_FAILED"
};



export default CertificateAttributes;

