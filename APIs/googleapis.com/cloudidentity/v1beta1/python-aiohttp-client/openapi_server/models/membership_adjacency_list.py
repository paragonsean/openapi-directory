# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.membership import Membership
from openapi_server import util


class MembershipAdjacencyList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, edges: List[Membership]=None, group: str=None):
        """MembershipAdjacencyList - a model defined in OpenAPI

        :param edges: The edges of this MembershipAdjacencyList.
        :param group: The group of this MembershipAdjacencyList.
        """
        self.openapi_types = {
            'edges': List[Membership],
            'group': str
        }

        self.attribute_map = {
            'edges': 'edges',
            'group': 'group'
        }

        self._edges = edges
        self._group = group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MembershipAdjacencyList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MembershipAdjacencyList of this MembershipAdjacencyList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def edges(self):
        """Gets the edges of this MembershipAdjacencyList.

        Each edge contains information about the member that belongs to this group. Note: Fields returned here will help identify the specific Membership resource (e.g name, preferred_member_key and role), but may not be a comprehensive list of all fields.

        :return: The edges of this MembershipAdjacencyList.
        :rtype: List[Membership]
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this MembershipAdjacencyList.

        Each edge contains information about the member that belongs to this group. Note: Fields returned here will help identify the specific Membership resource (e.g name, preferred_member_key and role), but may not be a comprehensive list of all fields.

        :param edges: The edges of this MembershipAdjacencyList.
        :type edges: List[Membership]
        """

        self._edges = edges

    @property
    def group(self):
        """Gets the group of this MembershipAdjacencyList.

        Resource name of the group that the members belong to.

        :return: The group of this MembershipAdjacencyList.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this MembershipAdjacencyList.

        Resource name of the group that the members belong to.

        :param group: The group of this MembershipAdjacencyList.
        :type group: str
        """

        self._group = group
