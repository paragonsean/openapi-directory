# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_key import EntityKey
from openapi_server.models.transitive_membership_role import TransitiveMembershipRole
from openapi_server import util


class GroupRelation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, group: str=None, group_key: EntityKey=None, labels: Dict[str, str]=None, relation_type: str=None, roles: List[TransitiveMembershipRole]=None):
        """GroupRelation - a model defined in OpenAPI

        :param display_name: The display_name of this GroupRelation.
        :param group: The group of this GroupRelation.
        :param group_key: The group_key of this GroupRelation.
        :param labels: The labels of this GroupRelation.
        :param relation_type: The relation_type of this GroupRelation.
        :param roles: The roles of this GroupRelation.
        """
        self.openapi_types = {
            'display_name': str,
            'group': str,
            'group_key': EntityKey,
            'labels': Dict[str, str],
            'relation_type': str,
            'roles': List[TransitiveMembershipRole]
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'group': 'group',
            'group_key': 'groupKey',
            'labels': 'labels',
            'relation_type': 'relationType',
            'roles': 'roles'
        }

        self._display_name = display_name
        self._group = group
        self._group_key = group_key
        self._labels = labels
        self._relation_type = relation_type
        self._roles = roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupRelation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupRelation of this GroupRelation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this GroupRelation.

        Display name for this group.

        :return: The display_name of this GroupRelation.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GroupRelation.

        Display name for this group.

        :param display_name: The display_name of this GroupRelation.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def group(self):
        """Gets the group of this GroupRelation.

        Resource name for this group.

        :return: The group of this GroupRelation.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this GroupRelation.

        Resource name for this group.

        :param group: The group of this GroupRelation.
        :type group: str
        """

        self._group = group

    @property
    def group_key(self):
        """Gets the group_key of this GroupRelation.


        :return: The group_key of this GroupRelation.
        :rtype: EntityKey
        """
        return self._group_key

    @group_key.setter
    def group_key(self, group_key):
        """Sets the group_key of this GroupRelation.


        :param group_key: The group_key of this GroupRelation.
        :type group_key: EntityKey
        """

        self._group_key = group_key

    @property
    def labels(self):
        """Gets the labels of this GroupRelation.

        Labels for Group resource.

        :return: The labels of this GroupRelation.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GroupRelation.

        Labels for Group resource.

        :param labels: The labels of this GroupRelation.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def relation_type(self):
        """Gets the relation_type of this GroupRelation.

        The relation between the member and the transitive group.

        :return: The relation_type of this GroupRelation.
        :rtype: str
        """
        return self._relation_type

    @relation_type.setter
    def relation_type(self, relation_type):
        """Sets the relation_type of this GroupRelation.

        The relation between the member and the transitive group.

        :param relation_type: The relation_type of this GroupRelation.
        :type relation_type: str
        """
        allowed_values = ["RELATION_TYPE_UNSPECIFIED", "DIRECT", "INDIRECT", "DIRECT_AND_INDIRECT"]  # noqa: E501
        if relation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `relation_type` ({0}), must be one of {1}"
                .format(relation_type, allowed_values)
            )

        self._relation_type = relation_type

    @property
    def roles(self):
        """Gets the roles of this GroupRelation.

        Membership roles of the member for the group.

        :return: The roles of this GroupRelation.
        :rtype: List[TransitiveMembershipRole]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this GroupRelation.

        Membership roles of the member for the group.

        :param roles: The roles of this GroupRelation.
        :type roles: List[TransitiveMembershipRole]
        """

        self._roles = roles
