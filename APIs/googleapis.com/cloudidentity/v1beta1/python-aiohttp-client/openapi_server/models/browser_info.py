# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BrowserInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, browser_management_state: str=None, browser_version: str=None, is_built_in_dns_client_enabled: bool=None, is_bulk_data_entry_analysis_enabled: bool=None, is_chrome_cleanup_enabled: bool=None, is_chrome_remote_desktop_app_blocked: bool=None, is_file_download_analysis_enabled: bool=None, is_file_upload_analysis_enabled: bool=None, is_realtime_url_check_enabled: bool=None, is_security_event_analysis_enabled: bool=None, is_site_isolation_enabled: bool=None, is_third_party_blocking_enabled: bool=None, password_protection_warning_trigger: str=None, safe_browsing_protection_level: str=None):
        """BrowserInfo - a model defined in OpenAPI

        :param browser_management_state: The browser_management_state of this BrowserInfo.
        :param browser_version: The browser_version of this BrowserInfo.
        :param is_built_in_dns_client_enabled: The is_built_in_dns_client_enabled of this BrowserInfo.
        :param is_bulk_data_entry_analysis_enabled: The is_bulk_data_entry_analysis_enabled of this BrowserInfo.
        :param is_chrome_cleanup_enabled: The is_chrome_cleanup_enabled of this BrowserInfo.
        :param is_chrome_remote_desktop_app_blocked: The is_chrome_remote_desktop_app_blocked of this BrowserInfo.
        :param is_file_download_analysis_enabled: The is_file_download_analysis_enabled of this BrowserInfo.
        :param is_file_upload_analysis_enabled: The is_file_upload_analysis_enabled of this BrowserInfo.
        :param is_realtime_url_check_enabled: The is_realtime_url_check_enabled of this BrowserInfo.
        :param is_security_event_analysis_enabled: The is_security_event_analysis_enabled of this BrowserInfo.
        :param is_site_isolation_enabled: The is_site_isolation_enabled of this BrowserInfo.
        :param is_third_party_blocking_enabled: The is_third_party_blocking_enabled of this BrowserInfo.
        :param password_protection_warning_trigger: The password_protection_warning_trigger of this BrowserInfo.
        :param safe_browsing_protection_level: The safe_browsing_protection_level of this BrowserInfo.
        """
        self.openapi_types = {
            'browser_management_state': str,
            'browser_version': str,
            'is_built_in_dns_client_enabled': bool,
            'is_bulk_data_entry_analysis_enabled': bool,
            'is_chrome_cleanup_enabled': bool,
            'is_chrome_remote_desktop_app_blocked': bool,
            'is_file_download_analysis_enabled': bool,
            'is_file_upload_analysis_enabled': bool,
            'is_realtime_url_check_enabled': bool,
            'is_security_event_analysis_enabled': bool,
            'is_site_isolation_enabled': bool,
            'is_third_party_blocking_enabled': bool,
            'password_protection_warning_trigger': str,
            'safe_browsing_protection_level': str
        }

        self.attribute_map = {
            'browser_management_state': 'browserManagementState',
            'browser_version': 'browserVersion',
            'is_built_in_dns_client_enabled': 'isBuiltInDnsClientEnabled',
            'is_bulk_data_entry_analysis_enabled': 'isBulkDataEntryAnalysisEnabled',
            'is_chrome_cleanup_enabled': 'isChromeCleanupEnabled',
            'is_chrome_remote_desktop_app_blocked': 'isChromeRemoteDesktopAppBlocked',
            'is_file_download_analysis_enabled': 'isFileDownloadAnalysisEnabled',
            'is_file_upload_analysis_enabled': 'isFileUploadAnalysisEnabled',
            'is_realtime_url_check_enabled': 'isRealtimeUrlCheckEnabled',
            'is_security_event_analysis_enabled': 'isSecurityEventAnalysisEnabled',
            'is_site_isolation_enabled': 'isSiteIsolationEnabled',
            'is_third_party_blocking_enabled': 'isThirdPartyBlockingEnabled',
            'password_protection_warning_trigger': 'passwordProtectionWarningTrigger',
            'safe_browsing_protection_level': 'safeBrowsingProtectionLevel'
        }

        self._browser_management_state = browser_management_state
        self._browser_version = browser_version
        self._is_built_in_dns_client_enabled = is_built_in_dns_client_enabled
        self._is_bulk_data_entry_analysis_enabled = is_bulk_data_entry_analysis_enabled
        self._is_chrome_cleanup_enabled = is_chrome_cleanup_enabled
        self._is_chrome_remote_desktop_app_blocked = is_chrome_remote_desktop_app_blocked
        self._is_file_download_analysis_enabled = is_file_download_analysis_enabled
        self._is_file_upload_analysis_enabled = is_file_upload_analysis_enabled
        self._is_realtime_url_check_enabled = is_realtime_url_check_enabled
        self._is_security_event_analysis_enabled = is_security_event_analysis_enabled
        self._is_site_isolation_enabled = is_site_isolation_enabled
        self._is_third_party_blocking_enabled = is_third_party_blocking_enabled
        self._password_protection_warning_trigger = password_protection_warning_trigger
        self._safe_browsing_protection_level = safe_browsing_protection_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrowserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BrowserInfo of this BrowserInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def browser_management_state(self):
        """Gets the browser_management_state of this BrowserInfo.

        Output only. Browser's management state.

        :return: The browser_management_state of this BrowserInfo.
        :rtype: str
        """
        return self._browser_management_state

    @browser_management_state.setter
    def browser_management_state(self, browser_management_state):
        """Sets the browser_management_state of this BrowserInfo.

        Output only. Browser's management state.

        :param browser_management_state: The browser_management_state of this BrowserInfo.
        :type browser_management_state: str
        """
        allowed_values = ["UNSPECIFIED", "UNMANAGED", "MANAGED_BY_OTHER_DOMAIN", "PROFILE_MANAGED", "BROWSER_MANAGED"]  # noqa: E501
        if browser_management_state not in allowed_values:
            raise ValueError(
                "Invalid value for `browser_management_state` ({0}), must be one of {1}"
                .format(browser_management_state, allowed_values)
            )

        self._browser_management_state = browser_management_state

    @property
    def browser_version(self):
        """Gets the browser_version of this BrowserInfo.

        Version of the request initiating browser.

        :return: The browser_version of this BrowserInfo.
        :rtype: str
        """
        return self._browser_version

    @browser_version.setter
    def browser_version(self, browser_version):
        """Sets the browser_version of this BrowserInfo.

        Version of the request initiating browser.

        :param browser_version: The browser_version of this BrowserInfo.
        :type browser_version: str
        """

        self._browser_version = browser_version

    @property
    def is_built_in_dns_client_enabled(self):
        """Gets the is_built_in_dns_client_enabled of this BrowserInfo.

        Current state of [built-in DNS client](https://chromeenterprise.google/policies/#BuiltInDnsClientEnabled).

        :return: The is_built_in_dns_client_enabled of this BrowserInfo.
        :rtype: bool
        """
        return self._is_built_in_dns_client_enabled

    @is_built_in_dns_client_enabled.setter
    def is_built_in_dns_client_enabled(self, is_built_in_dns_client_enabled):
        """Sets the is_built_in_dns_client_enabled of this BrowserInfo.

        Current state of [built-in DNS client](https://chromeenterprise.google/policies/#BuiltInDnsClientEnabled).

        :param is_built_in_dns_client_enabled: The is_built_in_dns_client_enabled of this BrowserInfo.
        :type is_built_in_dns_client_enabled: bool
        """

        self._is_built_in_dns_client_enabled = is_built_in_dns_client_enabled

    @property
    def is_bulk_data_entry_analysis_enabled(self):
        """Gets the is_bulk_data_entry_analysis_enabled of this BrowserInfo.

        Current state of [bulk data analysis](https://chromeenterprise.google/policies/#OnBulkDataEntryEnterpriseConnector). Set to true if provider list from Chrome is non-empty.

        :return: The is_bulk_data_entry_analysis_enabled of this BrowserInfo.
        :rtype: bool
        """
        return self._is_bulk_data_entry_analysis_enabled

    @is_bulk_data_entry_analysis_enabled.setter
    def is_bulk_data_entry_analysis_enabled(self, is_bulk_data_entry_analysis_enabled):
        """Sets the is_bulk_data_entry_analysis_enabled of this BrowserInfo.

        Current state of [bulk data analysis](https://chromeenterprise.google/policies/#OnBulkDataEntryEnterpriseConnector). Set to true if provider list from Chrome is non-empty.

        :param is_bulk_data_entry_analysis_enabled: The is_bulk_data_entry_analysis_enabled of this BrowserInfo.
        :type is_bulk_data_entry_analysis_enabled: bool
        """

        self._is_bulk_data_entry_analysis_enabled = is_bulk_data_entry_analysis_enabled

    @property
    def is_chrome_cleanup_enabled(self):
        """Gets the is_chrome_cleanup_enabled of this BrowserInfo.

        Current state of [Chrome Cleanup](https://chromeenterprise.google/policies/#ChromeCleanupEnabled).

        :return: The is_chrome_cleanup_enabled of this BrowserInfo.
        :rtype: bool
        """
        return self._is_chrome_cleanup_enabled

    @is_chrome_cleanup_enabled.setter
    def is_chrome_cleanup_enabled(self, is_chrome_cleanup_enabled):
        """Sets the is_chrome_cleanup_enabled of this BrowserInfo.

        Current state of [Chrome Cleanup](https://chromeenterprise.google/policies/#ChromeCleanupEnabled).

        :param is_chrome_cleanup_enabled: The is_chrome_cleanup_enabled of this BrowserInfo.
        :type is_chrome_cleanup_enabled: bool
        """

        self._is_chrome_cleanup_enabled = is_chrome_cleanup_enabled

    @property
    def is_chrome_remote_desktop_app_blocked(self):
        """Gets the is_chrome_remote_desktop_app_blocked of this BrowserInfo.

        Current state of [Chrome Remote Desktop app](https://chromeenterprise.google/policies/#URLBlocklist).

        :return: The is_chrome_remote_desktop_app_blocked of this BrowserInfo.
        :rtype: bool
        """
        return self._is_chrome_remote_desktop_app_blocked

    @is_chrome_remote_desktop_app_blocked.setter
    def is_chrome_remote_desktop_app_blocked(self, is_chrome_remote_desktop_app_blocked):
        """Sets the is_chrome_remote_desktop_app_blocked of this BrowserInfo.

        Current state of [Chrome Remote Desktop app](https://chromeenterprise.google/policies/#URLBlocklist).

        :param is_chrome_remote_desktop_app_blocked: The is_chrome_remote_desktop_app_blocked of this BrowserInfo.
        :type is_chrome_remote_desktop_app_blocked: bool
        """

        self._is_chrome_remote_desktop_app_blocked = is_chrome_remote_desktop_app_blocked

    @property
    def is_file_download_analysis_enabled(self):
        """Gets the is_file_download_analysis_enabled of this BrowserInfo.

        Current state of [file download analysis](https://chromeenterprise.google/policies/#OnFileDownloadedEnterpriseConnector). Set to true if provider list from Chrome is non-empty.

        :return: The is_file_download_analysis_enabled of this BrowserInfo.
        :rtype: bool
        """
        return self._is_file_download_analysis_enabled

    @is_file_download_analysis_enabled.setter
    def is_file_download_analysis_enabled(self, is_file_download_analysis_enabled):
        """Sets the is_file_download_analysis_enabled of this BrowserInfo.

        Current state of [file download analysis](https://chromeenterprise.google/policies/#OnFileDownloadedEnterpriseConnector). Set to true if provider list from Chrome is non-empty.

        :param is_file_download_analysis_enabled: The is_file_download_analysis_enabled of this BrowserInfo.
        :type is_file_download_analysis_enabled: bool
        """

        self._is_file_download_analysis_enabled = is_file_download_analysis_enabled

    @property
    def is_file_upload_analysis_enabled(self):
        """Gets the is_file_upload_analysis_enabled of this BrowserInfo.

        Current state of [file upload analysis](https://chromeenterprise.google/policies/#OnFileAttachedEnterpriseConnector). Set to true if provider list from Chrome is non-empty.

        :return: The is_file_upload_analysis_enabled of this BrowserInfo.
        :rtype: bool
        """
        return self._is_file_upload_analysis_enabled

    @is_file_upload_analysis_enabled.setter
    def is_file_upload_analysis_enabled(self, is_file_upload_analysis_enabled):
        """Sets the is_file_upload_analysis_enabled of this BrowserInfo.

        Current state of [file upload analysis](https://chromeenterprise.google/policies/#OnFileAttachedEnterpriseConnector). Set to true if provider list from Chrome is non-empty.

        :param is_file_upload_analysis_enabled: The is_file_upload_analysis_enabled of this BrowserInfo.
        :type is_file_upload_analysis_enabled: bool
        """

        self._is_file_upload_analysis_enabled = is_file_upload_analysis_enabled

    @property
    def is_realtime_url_check_enabled(self):
        """Gets the is_realtime_url_check_enabled of this BrowserInfo.

        Current state of [real-time URL check](https://chromeenterprise.google/policies/#EnterpriseRealTimeUrlCheckMode). Set to true if provider list from Chrome is non-empty.

        :return: The is_realtime_url_check_enabled of this BrowserInfo.
        :rtype: bool
        """
        return self._is_realtime_url_check_enabled

    @is_realtime_url_check_enabled.setter
    def is_realtime_url_check_enabled(self, is_realtime_url_check_enabled):
        """Sets the is_realtime_url_check_enabled of this BrowserInfo.

        Current state of [real-time URL check](https://chromeenterprise.google/policies/#EnterpriseRealTimeUrlCheckMode). Set to true if provider list from Chrome is non-empty.

        :param is_realtime_url_check_enabled: The is_realtime_url_check_enabled of this BrowserInfo.
        :type is_realtime_url_check_enabled: bool
        """

        self._is_realtime_url_check_enabled = is_realtime_url_check_enabled

    @property
    def is_security_event_analysis_enabled(self):
        """Gets the is_security_event_analysis_enabled of this BrowserInfo.

        Current state of [security event analysis](https://chromeenterprise.google/policies/#OnSecurityEventEnterpriseConnector). Set to true if provider list from Chrome is non-empty.

        :return: The is_security_event_analysis_enabled of this BrowserInfo.
        :rtype: bool
        """
        return self._is_security_event_analysis_enabled

    @is_security_event_analysis_enabled.setter
    def is_security_event_analysis_enabled(self, is_security_event_analysis_enabled):
        """Sets the is_security_event_analysis_enabled of this BrowserInfo.

        Current state of [security event analysis](https://chromeenterprise.google/policies/#OnSecurityEventEnterpriseConnector). Set to true if provider list from Chrome is non-empty.

        :param is_security_event_analysis_enabled: The is_security_event_analysis_enabled of this BrowserInfo.
        :type is_security_event_analysis_enabled: bool
        """

        self._is_security_event_analysis_enabled = is_security_event_analysis_enabled

    @property
    def is_site_isolation_enabled(self):
        """Gets the is_site_isolation_enabled of this BrowserInfo.

        Current state of [site isolation](https://chromeenterprise.google/policies/?policy=IsolateOrigins).

        :return: The is_site_isolation_enabled of this BrowserInfo.
        :rtype: bool
        """
        return self._is_site_isolation_enabled

    @is_site_isolation_enabled.setter
    def is_site_isolation_enabled(self, is_site_isolation_enabled):
        """Sets the is_site_isolation_enabled of this BrowserInfo.

        Current state of [site isolation](https://chromeenterprise.google/policies/?policy=IsolateOrigins).

        :param is_site_isolation_enabled: The is_site_isolation_enabled of this BrowserInfo.
        :type is_site_isolation_enabled: bool
        """

        self._is_site_isolation_enabled = is_site_isolation_enabled

    @property
    def is_third_party_blocking_enabled(self):
        """Gets the is_third_party_blocking_enabled of this BrowserInfo.

        Current state of [third-party blocking](https://chromeenterprise.google/policies/#ThirdPartyBlockingEnabled).

        :return: The is_third_party_blocking_enabled of this BrowserInfo.
        :rtype: bool
        """
        return self._is_third_party_blocking_enabled

    @is_third_party_blocking_enabled.setter
    def is_third_party_blocking_enabled(self, is_third_party_blocking_enabled):
        """Sets the is_third_party_blocking_enabled of this BrowserInfo.

        Current state of [third-party blocking](https://chromeenterprise.google/policies/#ThirdPartyBlockingEnabled).

        :param is_third_party_blocking_enabled: The is_third_party_blocking_enabled of this BrowserInfo.
        :type is_third_party_blocking_enabled: bool
        """

        self._is_third_party_blocking_enabled = is_third_party_blocking_enabled

    @property
    def password_protection_warning_trigger(self):
        """Gets the password_protection_warning_trigger of this BrowserInfo.

        Current state of [password protection trigger](https://chromeenterprise.google/policies/#PasswordProtectionWarningTrigger).

        :return: The password_protection_warning_trigger of this BrowserInfo.
        :rtype: str
        """
        return self._password_protection_warning_trigger

    @password_protection_warning_trigger.setter
    def password_protection_warning_trigger(self, password_protection_warning_trigger):
        """Sets the password_protection_warning_trigger of this BrowserInfo.

        Current state of [password protection trigger](https://chromeenterprise.google/policies/#PasswordProtectionWarningTrigger).

        :param password_protection_warning_trigger: The password_protection_warning_trigger of this BrowserInfo.
        :type password_protection_warning_trigger: str
        """
        allowed_values = ["PASSWORD_PROTECTION_TRIGGER_UNSPECIFIED", "PROTECTION_OFF", "PASSWORD_REUSE", "PHISHING_REUSE"]  # noqa: E501
        if password_protection_warning_trigger not in allowed_values:
            raise ValueError(
                "Invalid value for `password_protection_warning_trigger` ({0}), must be one of {1}"
                .format(password_protection_warning_trigger, allowed_values)
            )

        self._password_protection_warning_trigger = password_protection_warning_trigger

    @property
    def safe_browsing_protection_level(self):
        """Gets the safe_browsing_protection_level of this BrowserInfo.

        Current state of [Safe Browsing protection level](https://chromeenterprise.google/policies/#SafeBrowsingProtectionLevel).

        :return: The safe_browsing_protection_level of this BrowserInfo.
        :rtype: str
        """
        return self._safe_browsing_protection_level

    @safe_browsing_protection_level.setter
    def safe_browsing_protection_level(self, safe_browsing_protection_level):
        """Sets the safe_browsing_protection_level of this BrowserInfo.

        Current state of [Safe Browsing protection level](https://chromeenterprise.google/policies/#SafeBrowsingProtectionLevel).

        :param safe_browsing_protection_level: The safe_browsing_protection_level of this BrowserInfo.
        :type safe_browsing_protection_level: str
        """
        allowed_values = ["SAFE_BROWSING_LEVEL_UNSPECIFIED", "DISABLED", "STANDARD", "ENHANCED"]  # noqa: E501
        if safe_browsing_protection_level not in allowed_values:
            raise ValueError(
                "Invalid value for `safe_browsing_protection_level` ({0}), must be one of {1}"
                .format(safe_browsing_protection_level, allowed_values)
            )

        self._safe_browsing_protection_level = safe_browsing_protection_level
