# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DynamicGroupQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, query: str=None, resource_type: str=None):
        """DynamicGroupQuery - a model defined in OpenAPI

        :param query: The query of this DynamicGroupQuery.
        :param resource_type: The resource_type of this DynamicGroupQuery.
        """
        self.openapi_types = {
            'query': str,
            'resource_type': str
        }

        self.attribute_map = {
            'query': 'query',
            'resource_type': 'resourceType'
        }

        self._query = query
        self._resource_type = resource_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DynamicGroupQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DynamicGroupQuery of this DynamicGroupQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def query(self):
        """Gets the query of this DynamicGroupQuery.

        Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')` All users with any variation of the name John Doe (case-insensitive queries add `equalsIgnoreCase()` to the value being queried). `user.name.value.equalsIgnoreCase('jOhn DoE')`

        :return: The query of this DynamicGroupQuery.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this DynamicGroupQuery.

        Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')` All users with any variation of the name John Doe (case-insensitive queries add `equalsIgnoreCase()` to the value being queried). `user.name.value.equalsIgnoreCase('jOhn DoE')`

        :param query: The query of this DynamicGroupQuery.
        :type query: str
        """

        self._query = query

    @property
    def resource_type(self):
        """Gets the resource_type of this DynamicGroupQuery.


        :return: The resource_type of this DynamicGroupQuery.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this DynamicGroupQuery.


        :param resource_type: The resource_type of this DynamicGroupQuery.
        :type resource_type: str
        """
        allowed_values = ["RESOURCE_TYPE_UNSPECIFIED", "USER"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type
