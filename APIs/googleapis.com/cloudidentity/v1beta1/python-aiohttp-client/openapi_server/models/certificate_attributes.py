# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_template import CertificateTemplate
from openapi_server import util


class CertificateAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_template: CertificateTemplate=None, fingerprint: str=None, issuer: str=None, serial_number: str=None, subject: str=None, thumbprint: str=None, validation_state: str=None, validity_expiration_time: str=None, validity_start_time: str=None):
        """CertificateAttributes - a model defined in OpenAPI

        :param certificate_template: The certificate_template of this CertificateAttributes.
        :param fingerprint: The fingerprint of this CertificateAttributes.
        :param issuer: The issuer of this CertificateAttributes.
        :param serial_number: The serial_number of this CertificateAttributes.
        :param subject: The subject of this CertificateAttributes.
        :param thumbprint: The thumbprint of this CertificateAttributes.
        :param validation_state: The validation_state of this CertificateAttributes.
        :param validity_expiration_time: The validity_expiration_time of this CertificateAttributes.
        :param validity_start_time: The validity_start_time of this CertificateAttributes.
        """
        self.openapi_types = {
            'certificate_template': CertificateTemplate,
            'fingerprint': str,
            'issuer': str,
            'serial_number': str,
            'subject': str,
            'thumbprint': str,
            'validation_state': str,
            'validity_expiration_time': str,
            'validity_start_time': str
        }

        self.attribute_map = {
            'certificate_template': 'certificateTemplate',
            'fingerprint': 'fingerprint',
            'issuer': 'issuer',
            'serial_number': 'serialNumber',
            'subject': 'subject',
            'thumbprint': 'thumbprint',
            'validation_state': 'validationState',
            'validity_expiration_time': 'validityExpirationTime',
            'validity_start_time': 'validityStartTime'
        }

        self._certificate_template = certificate_template
        self._fingerprint = fingerprint
        self._issuer = issuer
        self._serial_number = serial_number
        self._subject = subject
        self._thumbprint = thumbprint
        self._validation_state = validation_state
        self._validity_expiration_time = validity_expiration_time
        self._validity_start_time = validity_start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateAttributes of this CertificateAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_template(self):
        """Gets the certificate_template of this CertificateAttributes.


        :return: The certificate_template of this CertificateAttributes.
        :rtype: CertificateTemplate
        """
        return self._certificate_template

    @certificate_template.setter
    def certificate_template(self, certificate_template):
        """Sets the certificate_template of this CertificateAttributes.


        :param certificate_template: The certificate_template of this CertificateAttributes.
        :type certificate_template: CertificateTemplate
        """

        self._certificate_template = certificate_template

    @property
    def fingerprint(self):
        """Gets the fingerprint of this CertificateAttributes.

        The encoded certificate fingerprint.

        :return: The fingerprint of this CertificateAttributes.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this CertificateAttributes.

        The encoded certificate fingerprint.

        :param fingerprint: The fingerprint of this CertificateAttributes.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def issuer(self):
        """Gets the issuer of this CertificateAttributes.

        The name of the issuer of this certificate.

        :return: The issuer of this CertificateAttributes.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this CertificateAttributes.

        The name of the issuer of this certificate.

        :param issuer: The issuer of this CertificateAttributes.
        :type issuer: str
        """

        self._issuer = issuer

    @property
    def serial_number(self):
        """Gets the serial_number of this CertificateAttributes.

        Serial number of the certificate, Example: \"123456789\".

        :return: The serial_number of this CertificateAttributes.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this CertificateAttributes.

        Serial number of the certificate, Example: \"123456789\".

        :param serial_number: The serial_number of this CertificateAttributes.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def subject(self):
        """Gets the subject of this CertificateAttributes.

        The subject name of this certificate.

        :return: The subject of this CertificateAttributes.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CertificateAttributes.

        The subject name of this certificate.

        :param subject: The subject of this CertificateAttributes.
        :type subject: str
        """

        self._subject = subject

    @property
    def thumbprint(self):
        """Gets the thumbprint of this CertificateAttributes.

        The certificate thumbprint.

        :return: The thumbprint of this CertificateAttributes.
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this CertificateAttributes.

        The certificate thumbprint.

        :param thumbprint: The thumbprint of this CertificateAttributes.
        :type thumbprint: str
        """

        self._thumbprint = thumbprint

    @property
    def validation_state(self):
        """Gets the validation_state of this CertificateAttributes.

        Validation state of this certificate.

        :return: The validation_state of this CertificateAttributes.
        :rtype: str
        """
        return self._validation_state

    @validation_state.setter
    def validation_state(self, validation_state):
        """Sets the validation_state of this CertificateAttributes.

        Validation state of this certificate.

        :param validation_state: The validation_state of this CertificateAttributes.
        :type validation_state: str
        """
        allowed_values = ["CERTIFICATE_VALIDATION_STATE_UNSPECIFIED", "VALIDATION_SUCCESSFUL", "VALIDATION_FAILED"]  # noqa: E501
        if validation_state not in allowed_values:
            raise ValueError(
                "Invalid value for `validation_state` ({0}), must be one of {1}"
                .format(validation_state, allowed_values)
            )

        self._validation_state = validation_state

    @property
    def validity_expiration_time(self):
        """Gets the validity_expiration_time of this CertificateAttributes.

        Certificate not valid at or after this timestamp.

        :return: The validity_expiration_time of this CertificateAttributes.
        :rtype: str
        """
        return self._validity_expiration_time

    @validity_expiration_time.setter
    def validity_expiration_time(self, validity_expiration_time):
        """Sets the validity_expiration_time of this CertificateAttributes.

        Certificate not valid at or after this timestamp.

        :param validity_expiration_time: The validity_expiration_time of this CertificateAttributes.
        :type validity_expiration_time: str
        """

        self._validity_expiration_time = validity_expiration_time

    @property
    def validity_start_time(self):
        """Gets the validity_start_time of this CertificateAttributes.

        Certificate not valid before this timestamp.

        :return: The validity_start_time of this CertificateAttributes.
        :rtype: str
        """
        return self._validity_start_time

    @validity_start_time.setter
    def validity_start_time(self, validity_start_time):
        """Sets the validity_start_time of this CertificateAttributes.

        Certificate not valid before this timestamp.

        :param validity_start_time: The validity_start_time of this CertificateAttributes.
        :type validity_start_time: str
        """

        self._validity_start_time = validity_start_time
