# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compromised_state: str=None, create_time: str=None, first_sync_time: str=None, language_code: str=None, last_sync_time: str=None, management_state: str=None, name: str=None, password_state: str=None, user_agent: str=None, user_email: str=None):
        """DeviceUser - a model defined in OpenAPI

        :param compromised_state: The compromised_state of this DeviceUser.
        :param create_time: The create_time of this DeviceUser.
        :param first_sync_time: The first_sync_time of this DeviceUser.
        :param language_code: The language_code of this DeviceUser.
        :param last_sync_time: The last_sync_time of this DeviceUser.
        :param management_state: The management_state of this DeviceUser.
        :param name: The name of this DeviceUser.
        :param password_state: The password_state of this DeviceUser.
        :param user_agent: The user_agent of this DeviceUser.
        :param user_email: The user_email of this DeviceUser.
        """
        self.openapi_types = {
            'compromised_state': str,
            'create_time': str,
            'first_sync_time': str,
            'language_code': str,
            'last_sync_time': str,
            'management_state': str,
            'name': str,
            'password_state': str,
            'user_agent': str,
            'user_email': str
        }

        self.attribute_map = {
            'compromised_state': 'compromisedState',
            'create_time': 'createTime',
            'first_sync_time': 'firstSyncTime',
            'language_code': 'languageCode',
            'last_sync_time': 'lastSyncTime',
            'management_state': 'managementState',
            'name': 'name',
            'password_state': 'passwordState',
            'user_agent': 'userAgent',
            'user_email': 'userEmail'
        }

        self._compromised_state = compromised_state
        self._create_time = create_time
        self._first_sync_time = first_sync_time
        self._language_code = language_code
        self._last_sync_time = last_sync_time
        self._management_state = management_state
        self._name = name
        self._password_state = password_state
        self._user_agent = user_agent
        self._user_email = user_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceUser of this DeviceUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compromised_state(self):
        """Gets the compromised_state of this DeviceUser.

        Compromised State of the DeviceUser object

        :return: The compromised_state of this DeviceUser.
        :rtype: str
        """
        return self._compromised_state

    @compromised_state.setter
    def compromised_state(self, compromised_state):
        """Sets the compromised_state of this DeviceUser.

        Compromised State of the DeviceUser object

        :param compromised_state: The compromised_state of this DeviceUser.
        :type compromised_state: str
        """
        allowed_values = ["COMPROMISED_STATE_UNSPECIFIED", "COMPROMISED", "NOT_COMPROMISED"]  # noqa: E501
        if compromised_state not in allowed_values:
            raise ValueError(
                "Invalid value for `compromised_state` ({0}), must be one of {1}"
                .format(compromised_state, allowed_values)
            )

        self._compromised_state = compromised_state

    @property
    def create_time(self):
        """Gets the create_time of this DeviceUser.

        When the user first signed in to the device

        :return: The create_time of this DeviceUser.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this DeviceUser.

        When the user first signed in to the device

        :param create_time: The create_time of this DeviceUser.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def first_sync_time(self):
        """Gets the first_sync_time of this DeviceUser.

        Output only. Most recent time when user registered with this service.

        :return: The first_sync_time of this DeviceUser.
        :rtype: str
        """
        return self._first_sync_time

    @first_sync_time.setter
    def first_sync_time(self, first_sync_time):
        """Sets the first_sync_time of this DeviceUser.

        Output only. Most recent time when user registered with this service.

        :param first_sync_time: The first_sync_time of this DeviceUser.
        :type first_sync_time: str
        """

        self._first_sync_time = first_sync_time

    @property
    def language_code(self):
        """Gets the language_code of this DeviceUser.

        Output only. Default locale used on device, in IETF BCP-47 format.

        :return: The language_code of this DeviceUser.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this DeviceUser.

        Output only. Default locale used on device, in IETF BCP-47 format.

        :param language_code: The language_code of this DeviceUser.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def last_sync_time(self):
        """Gets the last_sync_time of this DeviceUser.

        Output only. Last time when user synced with policies.

        :return: The last_sync_time of this DeviceUser.
        :rtype: str
        """
        return self._last_sync_time

    @last_sync_time.setter
    def last_sync_time(self, last_sync_time):
        """Sets the last_sync_time of this DeviceUser.

        Output only. Last time when user synced with policies.

        :param last_sync_time: The last_sync_time of this DeviceUser.
        :type last_sync_time: str
        """

        self._last_sync_time = last_sync_time

    @property
    def management_state(self):
        """Gets the management_state of this DeviceUser.

        Output only. Management state of the user on the device.

        :return: The management_state of this DeviceUser.
        :rtype: str
        """
        return self._management_state

    @management_state.setter
    def management_state(self, management_state):
        """Sets the management_state of this DeviceUser.

        Output only. Management state of the user on the device.

        :param management_state: The management_state of this DeviceUser.
        :type management_state: str
        """
        allowed_values = ["MANAGEMENT_STATE_UNSPECIFIED", "WIPING", "WIPED", "APPROVED", "BLOCKED", "PENDING_APPROVAL", "UNENROLLED"]  # noqa: E501
        if management_state not in allowed_values:
            raise ValueError(
                "Invalid value for `management_state` ({0}), must be one of {1}"
                .format(management_state, allowed_values)
            )

        self._management_state = management_state

    @property
    def name(self):
        """Gets the name of this DeviceUser.

        Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the DeviceUser in format: `devices/{device_id}/deviceUsers/{device_user_id}`, where `device_user_id` uniquely identifies a user's use of a device.

        :return: The name of this DeviceUser.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceUser.

        Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the DeviceUser in format: `devices/{device_id}/deviceUsers/{device_user_id}`, where `device_user_id` uniquely identifies a user's use of a device.

        :param name: The name of this DeviceUser.
        :type name: str
        """

        self._name = name

    @property
    def password_state(self):
        """Gets the password_state of this DeviceUser.

        Password state of the DeviceUser object

        :return: The password_state of this DeviceUser.
        :rtype: str
        """
        return self._password_state

    @password_state.setter
    def password_state(self, password_state):
        """Sets the password_state of this DeviceUser.

        Password state of the DeviceUser object

        :param password_state: The password_state of this DeviceUser.
        :type password_state: str
        """
        allowed_values = ["PASSWORD_STATE_UNSPECIFIED", "PASSWORD_SET", "PASSWORD_NOT_SET"]  # noqa: E501
        if password_state not in allowed_values:
            raise ValueError(
                "Invalid value for `password_state` ({0}), must be one of {1}"
                .format(password_state, allowed_values)
            )

        self._password_state = password_state

    @property
    def user_agent(self):
        """Gets the user_agent of this DeviceUser.

        Output only. User agent on the device for this specific user

        :return: The user_agent of this DeviceUser.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this DeviceUser.

        Output only. User agent on the device for this specific user

        :param user_agent: The user_agent of this DeviceUser.
        :type user_agent: str
        """

        self._user_agent = user_agent

    @property
    def user_email(self):
        """Gets the user_email of this DeviceUser.

        Email address of the user registered on the device.

        :return: The user_email of this DeviceUser.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this DeviceUser.

        Email address of the user registered on the device.

        :param user_email: The user_email of this DeviceUser.
        :type user_email: str
        """

        self._user_email = user_email
