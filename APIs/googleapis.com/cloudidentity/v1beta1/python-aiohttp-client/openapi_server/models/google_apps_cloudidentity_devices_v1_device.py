# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_apps_cloudidentity_devices_v1_android_attributes import GoogleAppsCloudidentityDevicesV1AndroidAttributes
from openapi_server import util


class GoogleAppsCloudidentityDevicesV1Device(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, android_specific_attributes: GoogleAppsCloudidentityDevicesV1AndroidAttributes=None, asset_tag: str=None, baseband_version: str=None, bootloader_version: str=None, brand: str=None, build_number: str=None, compromised_state: str=None, create_time: str=None, device_id: str=None, device_type: str=None, enabled_developer_options: bool=None, enabled_usb_debugging: bool=None, encryption_state: str=None, hostname: str=None, imei: str=None, kernel_version: str=None, last_sync_time: str=None, management_state: str=None, manufacturer: str=None, meid: str=None, model: str=None, name: str=None, network_operator: str=None, os_version: str=None, other_accounts: List[str]=None, owner_type: str=None, release_version: str=None, security_patch_time: str=None, serial_number: str=None, wifi_mac_addresses: List[str]=None):
        """GoogleAppsCloudidentityDevicesV1Device - a model defined in OpenAPI

        :param android_specific_attributes: The android_specific_attributes of this GoogleAppsCloudidentityDevicesV1Device.
        :param asset_tag: The asset_tag of this GoogleAppsCloudidentityDevicesV1Device.
        :param baseband_version: The baseband_version of this GoogleAppsCloudidentityDevicesV1Device.
        :param bootloader_version: The bootloader_version of this GoogleAppsCloudidentityDevicesV1Device.
        :param brand: The brand of this GoogleAppsCloudidentityDevicesV1Device.
        :param build_number: The build_number of this GoogleAppsCloudidentityDevicesV1Device.
        :param compromised_state: The compromised_state of this GoogleAppsCloudidentityDevicesV1Device.
        :param create_time: The create_time of this GoogleAppsCloudidentityDevicesV1Device.
        :param device_id: The device_id of this GoogleAppsCloudidentityDevicesV1Device.
        :param device_type: The device_type of this GoogleAppsCloudidentityDevicesV1Device.
        :param enabled_developer_options: The enabled_developer_options of this GoogleAppsCloudidentityDevicesV1Device.
        :param enabled_usb_debugging: The enabled_usb_debugging of this GoogleAppsCloudidentityDevicesV1Device.
        :param encryption_state: The encryption_state of this GoogleAppsCloudidentityDevicesV1Device.
        :param hostname: The hostname of this GoogleAppsCloudidentityDevicesV1Device.
        :param imei: The imei of this GoogleAppsCloudidentityDevicesV1Device.
        :param kernel_version: The kernel_version of this GoogleAppsCloudidentityDevicesV1Device.
        :param last_sync_time: The last_sync_time of this GoogleAppsCloudidentityDevicesV1Device.
        :param management_state: The management_state of this GoogleAppsCloudidentityDevicesV1Device.
        :param manufacturer: The manufacturer of this GoogleAppsCloudidentityDevicesV1Device.
        :param meid: The meid of this GoogleAppsCloudidentityDevicesV1Device.
        :param model: The model of this GoogleAppsCloudidentityDevicesV1Device.
        :param name: The name of this GoogleAppsCloudidentityDevicesV1Device.
        :param network_operator: The network_operator of this GoogleAppsCloudidentityDevicesV1Device.
        :param os_version: The os_version of this GoogleAppsCloudidentityDevicesV1Device.
        :param other_accounts: The other_accounts of this GoogleAppsCloudidentityDevicesV1Device.
        :param owner_type: The owner_type of this GoogleAppsCloudidentityDevicesV1Device.
        :param release_version: The release_version of this GoogleAppsCloudidentityDevicesV1Device.
        :param security_patch_time: The security_patch_time of this GoogleAppsCloudidentityDevicesV1Device.
        :param serial_number: The serial_number of this GoogleAppsCloudidentityDevicesV1Device.
        :param wifi_mac_addresses: The wifi_mac_addresses of this GoogleAppsCloudidentityDevicesV1Device.
        """
        self.openapi_types = {
            'android_specific_attributes': GoogleAppsCloudidentityDevicesV1AndroidAttributes,
            'asset_tag': str,
            'baseband_version': str,
            'bootloader_version': str,
            'brand': str,
            'build_number': str,
            'compromised_state': str,
            'create_time': str,
            'device_id': str,
            'device_type': str,
            'enabled_developer_options': bool,
            'enabled_usb_debugging': bool,
            'encryption_state': str,
            'hostname': str,
            'imei': str,
            'kernel_version': str,
            'last_sync_time': str,
            'management_state': str,
            'manufacturer': str,
            'meid': str,
            'model': str,
            'name': str,
            'network_operator': str,
            'os_version': str,
            'other_accounts': List[str],
            'owner_type': str,
            'release_version': str,
            'security_patch_time': str,
            'serial_number': str,
            'wifi_mac_addresses': List[str]
        }

        self.attribute_map = {
            'android_specific_attributes': 'androidSpecificAttributes',
            'asset_tag': 'assetTag',
            'baseband_version': 'basebandVersion',
            'bootloader_version': 'bootloaderVersion',
            'brand': 'brand',
            'build_number': 'buildNumber',
            'compromised_state': 'compromisedState',
            'create_time': 'createTime',
            'device_id': 'deviceId',
            'device_type': 'deviceType',
            'enabled_developer_options': 'enabledDeveloperOptions',
            'enabled_usb_debugging': 'enabledUsbDebugging',
            'encryption_state': 'encryptionState',
            'hostname': 'hostname',
            'imei': 'imei',
            'kernel_version': 'kernelVersion',
            'last_sync_time': 'lastSyncTime',
            'management_state': 'managementState',
            'manufacturer': 'manufacturer',
            'meid': 'meid',
            'model': 'model',
            'name': 'name',
            'network_operator': 'networkOperator',
            'os_version': 'osVersion',
            'other_accounts': 'otherAccounts',
            'owner_type': 'ownerType',
            'release_version': 'releaseVersion',
            'security_patch_time': 'securityPatchTime',
            'serial_number': 'serialNumber',
            'wifi_mac_addresses': 'wifiMacAddresses'
        }

        self._android_specific_attributes = android_specific_attributes
        self._asset_tag = asset_tag
        self._baseband_version = baseband_version
        self._bootloader_version = bootloader_version
        self._brand = brand
        self._build_number = build_number
        self._compromised_state = compromised_state
        self._create_time = create_time
        self._device_id = device_id
        self._device_type = device_type
        self._enabled_developer_options = enabled_developer_options
        self._enabled_usb_debugging = enabled_usb_debugging
        self._encryption_state = encryption_state
        self._hostname = hostname
        self._imei = imei
        self._kernel_version = kernel_version
        self._last_sync_time = last_sync_time
        self._management_state = management_state
        self._manufacturer = manufacturer
        self._meid = meid
        self._model = model
        self._name = name
        self._network_operator = network_operator
        self._os_version = os_version
        self._other_accounts = other_accounts
        self._owner_type = owner_type
        self._release_version = release_version
        self._security_patch_time = security_patch_time
        self._serial_number = serial_number
        self._wifi_mac_addresses = wifi_mac_addresses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAppsCloudidentityDevicesV1Device':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAppsCloudidentityDevicesV1Device of this GoogleAppsCloudidentityDevicesV1Device.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def android_specific_attributes(self):
        """Gets the android_specific_attributes of this GoogleAppsCloudidentityDevicesV1Device.


        :return: The android_specific_attributes of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: GoogleAppsCloudidentityDevicesV1AndroidAttributes
        """
        return self._android_specific_attributes

    @android_specific_attributes.setter
    def android_specific_attributes(self, android_specific_attributes):
        """Sets the android_specific_attributes of this GoogleAppsCloudidentityDevicesV1Device.


        :param android_specific_attributes: The android_specific_attributes of this GoogleAppsCloudidentityDevicesV1Device.
        :type android_specific_attributes: GoogleAppsCloudidentityDevicesV1AndroidAttributes
        """

        self._android_specific_attributes = android_specific_attributes

    @property
    def asset_tag(self):
        """Gets the asset_tag of this GoogleAppsCloudidentityDevicesV1Device.

        Asset tag of the device.

        :return: The asset_tag of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._asset_tag

    @asset_tag.setter
    def asset_tag(self, asset_tag):
        """Sets the asset_tag of this GoogleAppsCloudidentityDevicesV1Device.

        Asset tag of the device.

        :param asset_tag: The asset_tag of this GoogleAppsCloudidentityDevicesV1Device.
        :type asset_tag: str
        """

        self._asset_tag = asset_tag

    @property
    def baseband_version(self):
        """Gets the baseband_version of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Baseband version of the device.

        :return: The baseband_version of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._baseband_version

    @baseband_version.setter
    def baseband_version(self, baseband_version):
        """Sets the baseband_version of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Baseband version of the device.

        :param baseband_version: The baseband_version of this GoogleAppsCloudidentityDevicesV1Device.
        :type baseband_version: str
        """

        self._baseband_version = baseband_version

    @property
    def bootloader_version(self):
        """Gets the bootloader_version of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Device bootloader version. Example: 0.6.7.

        :return: The bootloader_version of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._bootloader_version

    @bootloader_version.setter
    def bootloader_version(self, bootloader_version):
        """Sets the bootloader_version of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Device bootloader version. Example: 0.6.7.

        :param bootloader_version: The bootloader_version of this GoogleAppsCloudidentityDevicesV1Device.
        :type bootloader_version: str
        """

        self._bootloader_version = bootloader_version

    @property
    def brand(self):
        """Gets the brand of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Device brand. Example: Samsung.

        :return: The brand of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Device brand. Example: Samsung.

        :param brand: The brand of this GoogleAppsCloudidentityDevicesV1Device.
        :type brand: str
        """

        self._brand = brand

    @property
    def build_number(self):
        """Gets the build_number of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Build number of the device.

        :return: The build_number of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._build_number

    @build_number.setter
    def build_number(self, build_number):
        """Sets the build_number of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Build number of the device.

        :param build_number: The build_number of this GoogleAppsCloudidentityDevicesV1Device.
        :type build_number: str
        """

        self._build_number = build_number

    @property
    def compromised_state(self):
        """Gets the compromised_state of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Represents whether the Device is compromised.

        :return: The compromised_state of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._compromised_state

    @compromised_state.setter
    def compromised_state(self, compromised_state):
        """Sets the compromised_state of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Represents whether the Device is compromised.

        :param compromised_state: The compromised_state of this GoogleAppsCloudidentityDevicesV1Device.
        :type compromised_state: str
        """
        allowed_values = ["COMPROMISED_STATE_UNSPECIFIED", "COMPROMISED", "UNCOMPROMISED"]  # noqa: E501
        if compromised_state not in allowed_values:
            raise ValueError(
                "Invalid value for `compromised_state` ({0}), must be one of {1}"
                .format(compromised_state, allowed_values)
            )

        self._compromised_state = compromised_state

    @property
    def create_time(self):
        """Gets the create_time of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. When the Company-Owned device was imported. This field is empty for BYOD devices.

        :return: The create_time of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. When the Company-Owned device was imported. This field is empty for BYOD devices.

        :param create_time: The create_time of this GoogleAppsCloudidentityDevicesV1Device.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def device_id(self):
        """Gets the device_id of this GoogleAppsCloudidentityDevicesV1Device.

        Unique identifier for the device.

        :return: The device_id of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this GoogleAppsCloudidentityDevicesV1Device.

        Unique identifier for the device.

        :param device_id: The device_id of this GoogleAppsCloudidentityDevicesV1Device.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def device_type(self):
        """Gets the device_type of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Type of device.

        :return: The device_type of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Type of device.

        :param device_type: The device_type of this GoogleAppsCloudidentityDevicesV1Device.
        :type device_type: str
        """
        allowed_values = ["DEVICE_TYPE_UNSPECIFIED", "ANDROID", "IOS", "GOOGLE_SYNC", "WINDOWS", "MAC_OS", "LINUX", "CHROME_OS"]  # noqa: E501
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def enabled_developer_options(self):
        """Gets the enabled_developer_options of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Whether developer options is enabled on device.

        :return: The enabled_developer_options of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: bool
        """
        return self._enabled_developer_options

    @enabled_developer_options.setter
    def enabled_developer_options(self, enabled_developer_options):
        """Sets the enabled_developer_options of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Whether developer options is enabled on device.

        :param enabled_developer_options: The enabled_developer_options of this GoogleAppsCloudidentityDevicesV1Device.
        :type enabled_developer_options: bool
        """

        self._enabled_developer_options = enabled_developer_options

    @property
    def enabled_usb_debugging(self):
        """Gets the enabled_usb_debugging of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Whether USB debugging is enabled on device.

        :return: The enabled_usb_debugging of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: bool
        """
        return self._enabled_usb_debugging

    @enabled_usb_debugging.setter
    def enabled_usb_debugging(self, enabled_usb_debugging):
        """Sets the enabled_usb_debugging of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Whether USB debugging is enabled on device.

        :param enabled_usb_debugging: The enabled_usb_debugging of this GoogleAppsCloudidentityDevicesV1Device.
        :type enabled_usb_debugging: bool
        """

        self._enabled_usb_debugging = enabled_usb_debugging

    @property
    def encryption_state(self):
        """Gets the encryption_state of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Device encryption state.

        :return: The encryption_state of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._encryption_state

    @encryption_state.setter
    def encryption_state(self, encryption_state):
        """Sets the encryption_state of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Device encryption state.

        :param encryption_state: The encryption_state of this GoogleAppsCloudidentityDevicesV1Device.
        :type encryption_state: str
        """
        allowed_values = ["ENCRYPTION_STATE_UNSPECIFIED", "UNSUPPORTED_BY_DEVICE", "ENCRYPTED", "NOT_ENCRYPTED"]  # noqa: E501
        if encryption_state not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_state` ({0}), must be one of {1}"
                .format(encryption_state, allowed_values)
            )

        self._encryption_state = encryption_state

    @property
    def hostname(self):
        """Gets the hostname of this GoogleAppsCloudidentityDevicesV1Device.

        Host name of the device.

        :return: The hostname of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this GoogleAppsCloudidentityDevicesV1Device.

        Host name of the device.

        :param hostname: The hostname of this GoogleAppsCloudidentityDevicesV1Device.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def imei(self):
        """Gets the imei of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. IMEI number of device if GSM device; empty otherwise.

        :return: The imei of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._imei

    @imei.setter
    def imei(self, imei):
        """Sets the imei of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. IMEI number of device if GSM device; empty otherwise.

        :param imei: The imei of this GoogleAppsCloudidentityDevicesV1Device.
        :type imei: str
        """

        self._imei = imei

    @property
    def kernel_version(self):
        """Gets the kernel_version of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Kernel version of the device.

        :return: The kernel_version of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._kernel_version

    @kernel_version.setter
    def kernel_version(self, kernel_version):
        """Sets the kernel_version of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Kernel version of the device.

        :param kernel_version: The kernel_version of this GoogleAppsCloudidentityDevicesV1Device.
        :type kernel_version: str
        """

        self._kernel_version = kernel_version

    @property
    def last_sync_time(self):
        """Gets the last_sync_time of this GoogleAppsCloudidentityDevicesV1Device.

        Most recent time when device synced with this service.

        :return: The last_sync_time of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._last_sync_time

    @last_sync_time.setter
    def last_sync_time(self, last_sync_time):
        """Sets the last_sync_time of this GoogleAppsCloudidentityDevicesV1Device.

        Most recent time when device synced with this service.

        :param last_sync_time: The last_sync_time of this GoogleAppsCloudidentityDevicesV1Device.
        :type last_sync_time: str
        """

        self._last_sync_time = last_sync_time

    @property
    def management_state(self):
        """Gets the management_state of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Management state of the device

        :return: The management_state of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._management_state

    @management_state.setter
    def management_state(self, management_state):
        """Sets the management_state of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Management state of the device

        :param management_state: The management_state of this GoogleAppsCloudidentityDevicesV1Device.
        :type management_state: str
        """
        allowed_values = ["MANAGEMENT_STATE_UNSPECIFIED", "APPROVED", "BLOCKED", "PENDING", "UNPROVISIONED", "WIPING", "WIPED"]  # noqa: E501
        if management_state not in allowed_values:
            raise ValueError(
                "Invalid value for `management_state` ({0}), must be one of {1}"
                .format(management_state, allowed_values)
            )

        self._management_state = management_state

    @property
    def manufacturer(self):
        """Gets the manufacturer of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Device manufacturer. Example: Motorola.

        :return: The manufacturer of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Device manufacturer. Example: Motorola.

        :param manufacturer: The manufacturer of this GoogleAppsCloudidentityDevicesV1Device.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def meid(self):
        """Gets the meid of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. MEID number of device if CDMA device; empty otherwise.

        :return: The meid of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._meid

    @meid.setter
    def meid(self, meid):
        """Sets the meid of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. MEID number of device if CDMA device; empty otherwise.

        :param meid: The meid of this GoogleAppsCloudidentityDevicesV1Device.
        :type meid: str
        """

        self._meid = meid

    @property
    def model(self):
        """Gets the model of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Model name of device. Example: Pixel 3.

        :return: The model of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Model name of device. Example: Pixel 3.

        :param model: The model of this GoogleAppsCloudidentityDevicesV1Device.
        :type model: str
        """

        self._model = model

    @property
    def name(self):
        """Gets the name of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device}`, where device is the unique id assigned to the Device.

        :return: The name of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device}`, where device is the unique id assigned to the Device.

        :param name: The name of this GoogleAppsCloudidentityDevicesV1Device.
        :type name: str
        """

        self._name = name

    @property
    def network_operator(self):
        """Gets the network_operator of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Mobile or network operator of device, if available.

        :return: The network_operator of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._network_operator

    @network_operator.setter
    def network_operator(self, network_operator):
        """Sets the network_operator of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Mobile or network operator of device, if available.

        :param network_operator: The network_operator of this GoogleAppsCloudidentityDevicesV1Device.
        :type network_operator: str
        """

        self._network_operator = network_operator

    @property
    def os_version(self):
        """Gets the os_version of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. OS version of the device. Example: Android 8.1.0.

        :return: The os_version of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. OS version of the device. Example: Android 8.1.0.

        :param os_version: The os_version of this GoogleAppsCloudidentityDevicesV1Device.
        :type os_version: str
        """

        self._os_version = os_version

    @property
    def other_accounts(self):
        """Gets the other_accounts of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Domain name for Google accounts on device. Type for other accounts on device. On Android, will only be populated if |ownership_privilege| is |PROFILE_OWNER| or |DEVICE_OWNER|. Does not include the account signed in to the device policy app if that account's domain has only one account. Examples: \"com.example\", \"xyz.com\".

        :return: The other_accounts of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: List[str]
        """
        return self._other_accounts

    @other_accounts.setter
    def other_accounts(self, other_accounts):
        """Sets the other_accounts of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Domain name for Google accounts on device. Type for other accounts on device. On Android, will only be populated if |ownership_privilege| is |PROFILE_OWNER| or |DEVICE_OWNER|. Does not include the account signed in to the device policy app if that account's domain has only one account. Examples: \"com.example\", \"xyz.com\".

        :param other_accounts: The other_accounts of this GoogleAppsCloudidentityDevicesV1Device.
        :type other_accounts: List[str]
        """

        self._other_accounts = other_accounts

    @property
    def owner_type(self):
        """Gets the owner_type of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Whether the device is owned by the company or an individual

        :return: The owner_type of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._owner_type

    @owner_type.setter
    def owner_type(self, owner_type):
        """Sets the owner_type of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. Whether the device is owned by the company or an individual

        :param owner_type: The owner_type of this GoogleAppsCloudidentityDevicesV1Device.
        :type owner_type: str
        """
        allowed_values = ["DEVICE_OWNERSHIP_UNSPECIFIED", "COMPANY", "BYOD"]  # noqa: E501
        if owner_type not in allowed_values:
            raise ValueError(
                "Invalid value for `owner_type` ({0}), must be one of {1}"
                .format(owner_type, allowed_values)
            )

        self._owner_type = owner_type

    @property
    def release_version(self):
        """Gets the release_version of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. OS release version. Example: 6.0.

        :return: The release_version of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._release_version

    @release_version.setter
    def release_version(self, release_version):
        """Sets the release_version of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. OS release version. Example: 6.0.

        :param release_version: The release_version of this GoogleAppsCloudidentityDevicesV1Device.
        :type release_version: str
        """

        self._release_version = release_version

    @property
    def security_patch_time(self):
        """Gets the security_patch_time of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. OS security patch update time on device.

        :return: The security_patch_time of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._security_patch_time

    @security_patch_time.setter
    def security_patch_time(self, security_patch_time):
        """Sets the security_patch_time of this GoogleAppsCloudidentityDevicesV1Device.

        Output only. OS security patch update time on device.

        :param security_patch_time: The security_patch_time of this GoogleAppsCloudidentityDevicesV1Device.
        :type security_patch_time: str
        """

        self._security_patch_time = security_patch_time

    @property
    def serial_number(self):
        """Gets the serial_number of this GoogleAppsCloudidentityDevicesV1Device.

        Serial Number of device. Example: HT82V1A01076.

        :return: The serial_number of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this GoogleAppsCloudidentityDevicesV1Device.

        Serial Number of device. Example: HT82V1A01076.

        :param serial_number: The serial_number of this GoogleAppsCloudidentityDevicesV1Device.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def wifi_mac_addresses(self):
        """Gets the wifi_mac_addresses of this GoogleAppsCloudidentityDevicesV1Device.

        WiFi MAC addresses of device.

        :return: The wifi_mac_addresses of this GoogleAppsCloudidentityDevicesV1Device.
        :rtype: List[str]
        """
        return self._wifi_mac_addresses

    @wifi_mac_addresses.setter
    def wifi_mac_addresses(self, wifi_mac_addresses):
        """Sets the wifi_mac_addresses of this GoogleAppsCloudidentityDevicesV1Device.

        WiFi MAC addresses of device.

        :param wifi_mac_addresses: The wifi_mac_addresses of this GoogleAppsCloudidentityDevicesV1Device.
        :type wifi_mac_addresses: List[str]
        """

        self._wifi_mac_addresses = wifi_mac_addresses
