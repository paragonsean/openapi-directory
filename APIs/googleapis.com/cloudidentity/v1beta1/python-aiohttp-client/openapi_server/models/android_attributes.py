# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AndroidAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cts_profile_match: bool=None, enabled_unknown_sources: bool=None, has_potentially_harmful_apps: bool=None, owner_profile_account: bool=None, ownership_privilege: str=None, supports_work_profile: bool=None, verified_boot: bool=None, verify_apps_enabled: bool=None):
        """AndroidAttributes - a model defined in OpenAPI

        :param cts_profile_match: The cts_profile_match of this AndroidAttributes.
        :param enabled_unknown_sources: The enabled_unknown_sources of this AndroidAttributes.
        :param has_potentially_harmful_apps: The has_potentially_harmful_apps of this AndroidAttributes.
        :param owner_profile_account: The owner_profile_account of this AndroidAttributes.
        :param ownership_privilege: The ownership_privilege of this AndroidAttributes.
        :param supports_work_profile: The supports_work_profile of this AndroidAttributes.
        :param verified_boot: The verified_boot of this AndroidAttributes.
        :param verify_apps_enabled: The verify_apps_enabled of this AndroidAttributes.
        """
        self.openapi_types = {
            'cts_profile_match': bool,
            'enabled_unknown_sources': bool,
            'has_potentially_harmful_apps': bool,
            'owner_profile_account': bool,
            'ownership_privilege': str,
            'supports_work_profile': bool,
            'verified_boot': bool,
            'verify_apps_enabled': bool
        }

        self.attribute_map = {
            'cts_profile_match': 'ctsProfileMatch',
            'enabled_unknown_sources': 'enabledUnknownSources',
            'has_potentially_harmful_apps': 'hasPotentiallyHarmfulApps',
            'owner_profile_account': 'ownerProfileAccount',
            'ownership_privilege': 'ownershipPrivilege',
            'supports_work_profile': 'supportsWorkProfile',
            'verified_boot': 'verifiedBoot',
            'verify_apps_enabled': 'verifyAppsEnabled'
        }

        self._cts_profile_match = cts_profile_match
        self._enabled_unknown_sources = enabled_unknown_sources
        self._has_potentially_harmful_apps = has_potentially_harmful_apps
        self._owner_profile_account = owner_profile_account
        self._ownership_privilege = ownership_privilege
        self._supports_work_profile = supports_work_profile
        self._verified_boot = verified_boot
        self._verify_apps_enabled = verify_apps_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AndroidAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AndroidAttributes of this AndroidAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cts_profile_match(self):
        """Gets the cts_profile_match of this AndroidAttributes.

        Whether the device passes Android CTS compliance.

        :return: The cts_profile_match of this AndroidAttributes.
        :rtype: bool
        """
        return self._cts_profile_match

    @cts_profile_match.setter
    def cts_profile_match(self, cts_profile_match):
        """Sets the cts_profile_match of this AndroidAttributes.

        Whether the device passes Android CTS compliance.

        :param cts_profile_match: The cts_profile_match of this AndroidAttributes.
        :type cts_profile_match: bool
        """

        self._cts_profile_match = cts_profile_match

    @property
    def enabled_unknown_sources(self):
        """Gets the enabled_unknown_sources of this AndroidAttributes.

        Whether applications from unknown sources can be installed on device.

        :return: The enabled_unknown_sources of this AndroidAttributes.
        :rtype: bool
        """
        return self._enabled_unknown_sources

    @enabled_unknown_sources.setter
    def enabled_unknown_sources(self, enabled_unknown_sources):
        """Sets the enabled_unknown_sources of this AndroidAttributes.

        Whether applications from unknown sources can be installed on device.

        :param enabled_unknown_sources: The enabled_unknown_sources of this AndroidAttributes.
        :type enabled_unknown_sources: bool
        """

        self._enabled_unknown_sources = enabled_unknown_sources

    @property
    def has_potentially_harmful_apps(self):
        """Gets the has_potentially_harmful_apps of this AndroidAttributes.

        Whether any potentially harmful apps were detected on the device.

        :return: The has_potentially_harmful_apps of this AndroidAttributes.
        :rtype: bool
        """
        return self._has_potentially_harmful_apps

    @has_potentially_harmful_apps.setter
    def has_potentially_harmful_apps(self, has_potentially_harmful_apps):
        """Sets the has_potentially_harmful_apps of this AndroidAttributes.

        Whether any potentially harmful apps were detected on the device.

        :param has_potentially_harmful_apps: The has_potentially_harmful_apps of this AndroidAttributes.
        :type has_potentially_harmful_apps: bool
        """

        self._has_potentially_harmful_apps = has_potentially_harmful_apps

    @property
    def owner_profile_account(self):
        """Gets the owner_profile_account of this AndroidAttributes.

        Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.

        :return: The owner_profile_account of this AndroidAttributes.
        :rtype: bool
        """
        return self._owner_profile_account

    @owner_profile_account.setter
    def owner_profile_account(self, owner_profile_account):
        """Sets the owner_profile_account of this AndroidAttributes.

        Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.

        :param owner_profile_account: The owner_profile_account of this AndroidAttributes.
        :type owner_profile_account: bool
        """

        self._owner_profile_account = owner_profile_account

    @property
    def ownership_privilege(self):
        """Gets the ownership_privilege of this AndroidAttributes.

        Ownership privileges on device.

        :return: The ownership_privilege of this AndroidAttributes.
        :rtype: str
        """
        return self._ownership_privilege

    @ownership_privilege.setter
    def ownership_privilege(self, ownership_privilege):
        """Sets the ownership_privilege of this AndroidAttributes.

        Ownership privileges on device.

        :param ownership_privilege: The ownership_privilege of this AndroidAttributes.
        :type ownership_privilege: str
        """
        allowed_values = ["OWNERSHIP_PRIVILEGE_UNSPECIFIED", "DEVICE_ADMINISTRATOR", "PROFILE_OWNER", "DEVICE_OWNER"]  # noqa: E501
        if ownership_privilege not in allowed_values:
            raise ValueError(
                "Invalid value for `ownership_privilege` ({0}), must be one of {1}"
                .format(ownership_privilege, allowed_values)
            )

        self._ownership_privilege = ownership_privilege

    @property
    def supports_work_profile(self):
        """Gets the supports_work_profile of this AndroidAttributes.

        Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the \"Enforce Work Profile\" policy.

        :return: The supports_work_profile of this AndroidAttributes.
        :rtype: bool
        """
        return self._supports_work_profile

    @supports_work_profile.setter
    def supports_work_profile(self, supports_work_profile):
        """Sets the supports_work_profile of this AndroidAttributes.

        Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the \"Enforce Work Profile\" policy.

        :param supports_work_profile: The supports_work_profile of this AndroidAttributes.
        :type supports_work_profile: bool
        """

        self._supports_work_profile = supports_work_profile

    @property
    def verified_boot(self):
        """Gets the verified_boot of this AndroidAttributes.

        Whether Android verified boot status is GREEN.

        :return: The verified_boot of this AndroidAttributes.
        :rtype: bool
        """
        return self._verified_boot

    @verified_boot.setter
    def verified_boot(self, verified_boot):
        """Sets the verified_boot of this AndroidAttributes.

        Whether Android verified boot status is GREEN.

        :param verified_boot: The verified_boot of this AndroidAttributes.
        :type verified_boot: bool
        """

        self._verified_boot = verified_boot

    @property
    def verify_apps_enabled(self):
        """Gets the verify_apps_enabled of this AndroidAttributes.

        Whether Google Play Protect Verify Apps is enabled.

        :return: The verify_apps_enabled of this AndroidAttributes.
        :rtype: bool
        """
        return self._verify_apps_enabled

    @verify_apps_enabled.setter
    def verify_apps_enabled(self, verify_apps_enabled):
        """Sets the verify_apps_enabled of this AndroidAttributes.

        Whether Google Play Protect Verify Apps is enabled.

        :param verify_apps_enabled: The verify_apps_enabled of this AndroidAttributes.
        :type verify_apps_enabled: bool
        """

        self._verify_apps_enabled = verify_apps_enabled
