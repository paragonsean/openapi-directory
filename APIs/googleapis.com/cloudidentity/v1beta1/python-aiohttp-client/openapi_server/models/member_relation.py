# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_key import EntityKey
from openapi_server.models.transitive_membership_role import TransitiveMembershipRole
from openapi_server import util


class MemberRelation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, member: str=None, preferred_member_key: List[EntityKey]=None, relation_type: str=None, roles: List[TransitiveMembershipRole]=None):
        """MemberRelation - a model defined in OpenAPI

        :param member: The member of this MemberRelation.
        :param preferred_member_key: The preferred_member_key of this MemberRelation.
        :param relation_type: The relation_type of this MemberRelation.
        :param roles: The roles of this MemberRelation.
        """
        self.openapi_types = {
            'member': str,
            'preferred_member_key': List[EntityKey],
            'relation_type': str,
            'roles': List[TransitiveMembershipRole]
        }

        self.attribute_map = {
            'member': 'member',
            'preferred_member_key': 'preferredMemberKey',
            'relation_type': 'relationType',
            'roles': 'roles'
        }

        self._member = member
        self._preferred_member_key = preferred_member_key
        self._relation_type = relation_type
        self._roles = roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MemberRelation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MemberRelation of this MemberRelation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def member(self):
        """Gets the member of this MemberRelation.

        Resource name for this member.

        :return: The member of this MemberRelation.
        :rtype: str
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this MemberRelation.

        Resource name for this member.

        :param member: The member of this MemberRelation.
        :type member: str
        """

        self._member = member

    @property
    def preferred_member_key(self):
        """Gets the preferred_member_key of this MemberRelation.

        Entity key has an id and a namespace. In case of discussion forums, the id will be an email address without a namespace.

        :return: The preferred_member_key of this MemberRelation.
        :rtype: List[EntityKey]
        """
        return self._preferred_member_key

    @preferred_member_key.setter
    def preferred_member_key(self, preferred_member_key):
        """Sets the preferred_member_key of this MemberRelation.

        Entity key has an id and a namespace. In case of discussion forums, the id will be an email address without a namespace.

        :param preferred_member_key: The preferred_member_key of this MemberRelation.
        :type preferred_member_key: List[EntityKey]
        """

        self._preferred_member_key = preferred_member_key

    @property
    def relation_type(self):
        """Gets the relation_type of this MemberRelation.

        The relation between the group and the transitive membership.

        :return: The relation_type of this MemberRelation.
        :rtype: str
        """
        return self._relation_type

    @relation_type.setter
    def relation_type(self, relation_type):
        """Sets the relation_type of this MemberRelation.

        The relation between the group and the transitive membership.

        :param relation_type: The relation_type of this MemberRelation.
        :type relation_type: str
        """
        allowed_values = ["RELATION_TYPE_UNSPECIFIED", "DIRECT", "INDIRECT", "DIRECT_AND_INDIRECT"]  # noqa: E501
        if relation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `relation_type` ({0}), must be one of {1}"
                .format(relation_type, allowed_values)
            )

        self._relation_type = relation_type

    @property
    def roles(self):
        """Gets the roles of this MemberRelation.

        The membership role details (i.e name of role and expiry time).

        :return: The roles of this MemberRelation.
        :rtype: List[TransitiveMembershipRole]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this MemberRelation.

        The membership role details (i.e name of role and expiry time).

        :param roles: The roles of this MemberRelation.
        :type roles: List[TransitiveMembershipRole]
        """

        self._roles = roles
