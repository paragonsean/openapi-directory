# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_key import EntityKey
from openapi_server.models.membership_role import MembershipRole
from openapi_server import util


class Membership(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, delivery_setting: str=None, member_key: EntityKey=None, name: str=None, preferred_member_key: EntityKey=None, roles: List[MembershipRole]=None, type: str=None, update_time: str=None):
        """Membership - a model defined in OpenAPI

        :param create_time: The create_time of this Membership.
        :param delivery_setting: The delivery_setting of this Membership.
        :param member_key: The member_key of this Membership.
        :param name: The name of this Membership.
        :param preferred_member_key: The preferred_member_key of this Membership.
        :param roles: The roles of this Membership.
        :param type: The type of this Membership.
        :param update_time: The update_time of this Membership.
        """
        self.openapi_types = {
            'create_time': str,
            'delivery_setting': str,
            'member_key': EntityKey,
            'name': str,
            'preferred_member_key': EntityKey,
            'roles': List[MembershipRole],
            'type': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'delivery_setting': 'deliverySetting',
            'member_key': 'memberKey',
            'name': 'name',
            'preferred_member_key': 'preferredMemberKey',
            'roles': 'roles',
            'type': 'type',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._delivery_setting = delivery_setting
        self._member_key = member_key
        self._name = name
        self._preferred_member_key = preferred_member_key
        self._roles = roles
        self._type = type
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Membership':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Membership of this Membership.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Membership.

        Output only. The time when the `Membership` was created.

        :return: The create_time of this Membership.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Membership.

        Output only. The time when the `Membership` was created.

        :param create_time: The create_time of this Membership.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delivery_setting(self):
        """Gets the delivery_setting of this Membership.

        Output only. Delivery setting associated with the membership.

        :return: The delivery_setting of this Membership.
        :rtype: str
        """
        return self._delivery_setting

    @delivery_setting.setter
    def delivery_setting(self, delivery_setting):
        """Sets the delivery_setting of this Membership.

        Output only. Delivery setting associated with the membership.

        :param delivery_setting: The delivery_setting of this Membership.
        :type delivery_setting: str
        """
        allowed_values = ["DELIVERY_SETTING_UNSPECIFIED", "ALL_MAIL", "DIGEST", "DAILY", "NONE", "DISABLED"]  # noqa: E501
        if delivery_setting not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_setting` ({0}), must be one of {1}"
                .format(delivery_setting, allowed_values)
            )

        self._delivery_setting = delivery_setting

    @property
    def member_key(self):
        """Gets the member_key of this Membership.


        :return: The member_key of this Membership.
        :rtype: EntityKey
        """
        return self._member_key

    @member_key.setter
    def member_key(self, member_key):
        """Sets the member_key of this Membership.


        :param member_key: The member_key of this Membership.
        :type member_key: EntityKey
        """

        self._member_key = member_key

    @property
    def name(self):
        """Gets the name of this Membership.

        Output only. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Membership`. Shall be of the form `groups/{group_id}/memberships/{membership_id}`.

        :return: The name of this Membership.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Membership.

        Output only. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Membership`. Shall be of the form `groups/{group_id}/memberships/{membership_id}`.

        :param name: The name of this Membership.
        :type name: str
        """

        self._name = name

    @property
    def preferred_member_key(self):
        """Gets the preferred_member_key of this Membership.


        :return: The preferred_member_key of this Membership.
        :rtype: EntityKey
        """
        return self._preferred_member_key

    @preferred_member_key.setter
    def preferred_member_key(self, preferred_member_key):
        """Sets the preferred_member_key of this Membership.


        :param preferred_member_key: The preferred_member_key of this Membership.
        :type preferred_member_key: EntityKey
        """

        self._preferred_member_key = preferred_member_key

    @property
    def roles(self):
        """Gets the roles of this Membership.

        The `MembershipRole`s that apply to the `Membership`. If unspecified, defaults to a single `MembershipRole` with `name` `MEMBER`. Must not contain duplicate `MembershipRole`s with the same `name`.

        :return: The roles of this Membership.
        :rtype: List[MembershipRole]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Membership.

        The `MembershipRole`s that apply to the `Membership`. If unspecified, defaults to a single `MembershipRole` with `name` `MEMBER`. Must not contain duplicate `MembershipRole`s with the same `name`.

        :param roles: The roles of this Membership.
        :type roles: List[MembershipRole]
        """

        self._roles = roles

    @property
    def type(self):
        """Gets the type of this Membership.

        Output only. The type of the membership.

        :return: The type of this Membership.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Membership.

        Output only. The type of the membership.

        :param type: The type of this Membership.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "USER", "SERVICE_ACCOUNT", "GROUP", "SHARED_DRIVE", "OTHER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def update_time(self):
        """Gets the update_time of this Membership.

        Output only. The time when the `Membership` was last updated.

        :return: The update_time of this Membership.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Membership.

        Output only. The time when the `Membership` was last updated.

        :param update_time: The update_time of this Membership.
        :type update_time: str
        """

        self._update_time = update_time
