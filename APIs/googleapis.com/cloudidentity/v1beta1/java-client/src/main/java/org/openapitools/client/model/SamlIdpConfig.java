/*
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SAML IDP (identity provider) configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:30.727531-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SamlIdpConfig {
  public static final String SERIALIZED_NAME_CHANGE_PASSWORD_URI = "changePasswordUri";
  @SerializedName(SERIALIZED_NAME_CHANGE_PASSWORD_URI)
  private String changePasswordUri;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public static final String SERIALIZED_NAME_LOGOUT_REDIRECT_URI = "logoutRedirectUri";
  @SerializedName(SERIALIZED_NAME_LOGOUT_REDIRECT_URI)
  private String logoutRedirectUri;

  public static final String SERIALIZED_NAME_SINGLE_SIGN_ON_SERVICE_URI = "singleSignOnServiceUri";
  @SerializedName(SERIALIZED_NAME_SINGLE_SIGN_ON_SERVICE_URI)
  private String singleSignOnServiceUri;

  public SamlIdpConfig() {
  }

  public SamlIdpConfig changePasswordUri(String changePasswordUri) {
    this.changePasswordUri = changePasswordUri;
    return this;
  }

  /**
   * The **Change Password URL** of the identity provider. Users will be sent to this URL when changing their passwords at &#x60;myaccount.google.com&#x60;. This takes precedence over the change password URL configured at customer-level. Must use &#x60;HTTPS&#x60;.
   * @return changePasswordUri
   */
  @javax.annotation.Nullable
  public String getChangePasswordUri() {
    return changePasswordUri;
  }

  public void setChangePasswordUri(String changePasswordUri) {
    this.changePasswordUri = changePasswordUri;
  }


  public SamlIdpConfig entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Required. The SAML **Entity ID** of the identity provider.
   * @return entityId
   */
  @javax.annotation.Nullable
  public String getEntityId() {
    return entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }


  public SamlIdpConfig logoutRedirectUri(String logoutRedirectUri) {
    this.logoutRedirectUri = logoutRedirectUri;
    return this;
  }

  /**
   * The **Logout Redirect URL** (sign-out page URL) of the identity provider. When a user clicks the sign-out link on a Google page, they will be redirected to this URL. This is a pure redirect with no attached SAML &#x60;LogoutRequest&#x60; i.e. SAML single logout is not supported. Must use &#x60;HTTPS&#x60;.
   * @return logoutRedirectUri
   */
  @javax.annotation.Nullable
  public String getLogoutRedirectUri() {
    return logoutRedirectUri;
  }

  public void setLogoutRedirectUri(String logoutRedirectUri) {
    this.logoutRedirectUri = logoutRedirectUri;
  }


  public SamlIdpConfig singleSignOnServiceUri(String singleSignOnServiceUri) {
    this.singleSignOnServiceUri = singleSignOnServiceUri;
    return this;
  }

  /**
   * Required. The &#x60;SingleSignOnService&#x60; endpoint location (sign-in page URL) of the identity provider. This is the URL where the &#x60;AuthnRequest&#x60; will be sent. Must use &#x60;HTTPS&#x60;. Assumed to accept the &#x60;HTTP-Redirect&#x60; binding.
   * @return singleSignOnServiceUri
   */
  @javax.annotation.Nullable
  public String getSingleSignOnServiceUri() {
    return singleSignOnServiceUri;
  }

  public void setSingleSignOnServiceUri(String singleSignOnServiceUri) {
    this.singleSignOnServiceUri = singleSignOnServiceUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SamlIdpConfig samlIdpConfig = (SamlIdpConfig) o;
    return Objects.equals(this.changePasswordUri, samlIdpConfig.changePasswordUri) &&
        Objects.equals(this.entityId, samlIdpConfig.entityId) &&
        Objects.equals(this.logoutRedirectUri, samlIdpConfig.logoutRedirectUri) &&
        Objects.equals(this.singleSignOnServiceUri, samlIdpConfig.singleSignOnServiceUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changePasswordUri, entityId, logoutRedirectUri, singleSignOnServiceUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SamlIdpConfig {\n");
    sb.append("    changePasswordUri: ").append(toIndentedString(changePasswordUri)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    logoutRedirectUri: ").append(toIndentedString(logoutRedirectUri)).append("\n");
    sb.append("    singleSignOnServiceUri: ").append(toIndentedString(singleSignOnServiceUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changePasswordUri");
    openapiFields.add("entityId");
    openapiFields.add("logoutRedirectUri");
    openapiFields.add("singleSignOnServiceUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SamlIdpConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SamlIdpConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SamlIdpConfig is not found in the empty JSON string", SamlIdpConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SamlIdpConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SamlIdpConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("changePasswordUri") != null && !jsonObj.get("changePasswordUri").isJsonNull()) && !jsonObj.get("changePasswordUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changePasswordUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changePasswordUri").toString()));
      }
      if ((jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if ((jsonObj.get("logoutRedirectUri") != null && !jsonObj.get("logoutRedirectUri").isJsonNull()) && !jsonObj.get("logoutRedirectUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logoutRedirectUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logoutRedirectUri").toString()));
      }
      if ((jsonObj.get("singleSignOnServiceUri") != null && !jsonObj.get("singleSignOnServiceUri").isJsonNull()) && !jsonObj.get("singleSignOnServiceUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `singleSignOnServiceUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("singleSignOnServiceUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SamlIdpConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SamlIdpConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SamlIdpConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SamlIdpConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<SamlIdpConfig>() {
           @Override
           public void write(JsonWriter out, SamlIdpConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SamlIdpConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SamlIdpConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SamlIdpConfig
   * @throws IOException if the JSON string is invalid with respect to SamlIdpConfig
   */
  public static SamlIdpConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SamlIdpConfig.class);
  }

  /**
   * Convert an instance of SamlIdpConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

