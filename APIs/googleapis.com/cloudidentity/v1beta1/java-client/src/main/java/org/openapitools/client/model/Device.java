/*
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AndroidAttributes;
import org.openapitools.client.model.EndpointVerificationSpecificAttributes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Device within the Cloud Identity Devices API. Represents a Device known to Google Cloud, independent of the device ownership, type, and whether it is assigned or in use by a user.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:30.727531-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Device {
  public static final String SERIALIZED_NAME_ANDROID_SPECIFIC_ATTRIBUTES = "androidSpecificAttributes";
  @SerializedName(SERIALIZED_NAME_ANDROID_SPECIFIC_ATTRIBUTES)
  private AndroidAttributes androidSpecificAttributes;

  public static final String SERIALIZED_NAME_ASSET_TAG = "assetTag";
  @SerializedName(SERIALIZED_NAME_ASSET_TAG)
  private String assetTag;

  public static final String SERIALIZED_NAME_BASEBAND_VERSION = "basebandVersion";
  @SerializedName(SERIALIZED_NAME_BASEBAND_VERSION)
  private String basebandVersion;

  public static final String SERIALIZED_NAME_BOOTLOADER_VERSION = "bootloaderVersion";
  @SerializedName(SERIALIZED_NAME_BOOTLOADER_VERSION)
  private String bootloaderVersion;

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private String brand;

  public static final String SERIALIZED_NAME_BUILD_NUMBER = "buildNumber";
  @SerializedName(SERIALIZED_NAME_BUILD_NUMBER)
  private String buildNumber;

  /**
   * Gets or Sets clientTypes
   */
  @JsonAdapter(ClientTypesEnum.Adapter.class)
  public enum ClientTypesEnum {
    CLIENT_TYPE_UNSPECIFIED("CLIENT_TYPE_UNSPECIFIED"),
    
    DRIVE_FS("DRIVE_FS"),
    
    FUNDAMENTAL("FUNDAMENTAL"),
    
    ENDPOINT_VERIFICATION("ENDPOINT_VERIFICATION"),
    
    WINDOWS_ADVANCED("WINDOWS_ADVANCED"),
    
    GOOGLE_CREDENTIALS_PROVIDER_FOR_WINDOWS("GOOGLE_CREDENTIALS_PROVIDER_FOR_WINDOWS");

    private String value;

    ClientTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClientTypesEnum fromValue(String value) {
      for (ClientTypesEnum b : ClientTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClientTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClientTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClientTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClientTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClientTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLIENT_TYPES = "clientTypes";
  @SerializedName(SERIALIZED_NAME_CLIENT_TYPES)
  private List<ClientTypesEnum> clientTypes = new ArrayList<>();

  /**
   * Output only. Represents whether the Device is compromised.
   */
  @JsonAdapter(CompromisedStateEnum.Adapter.class)
  public enum CompromisedStateEnum {
    COMPROMISED_STATE_UNSPECIFIED("COMPROMISED_STATE_UNSPECIFIED"),
    
    COMPROMISED("COMPROMISED"),
    
    UNCOMPROMISED("UNCOMPROMISED");

    private String value;

    CompromisedStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompromisedStateEnum fromValue(String value) {
      for (CompromisedStateEnum b : CompromisedStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CompromisedStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompromisedStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompromisedStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CompromisedStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CompromisedStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPROMISED_STATE = "compromisedState";
  @SerializedName(SERIALIZED_NAME_COMPROMISED_STATE)
  private CompromisedStateEnum compromisedState;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DEVICE_ID = "deviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  /**
   * Output only. Type of device.
   */
  @JsonAdapter(DeviceTypeEnum.Adapter.class)
  public enum DeviceTypeEnum {
    DEVICE_TYPE_UNSPECIFIED("DEVICE_TYPE_UNSPECIFIED"),
    
    ANDROID("ANDROID"),
    
    IOS("IOS"),
    
    GOOGLE_SYNC("GOOGLE_SYNC"),
    
    WINDOWS("WINDOWS"),
    
    MAC_OS("MAC_OS"),
    
    LINUX("LINUX"),
    
    CHROME_OS("CHROME_OS");

    private String value;

    DeviceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeviceTypeEnum fromValue(String value) {
      for (DeviceTypeEnum b : DeviceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeviceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeviceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeviceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeviceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeviceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "deviceType";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private DeviceTypeEnum deviceType;

  public static final String SERIALIZED_NAME_ENABLED_DEVELOPER_OPTIONS = "enabledDeveloperOptions";
  @SerializedName(SERIALIZED_NAME_ENABLED_DEVELOPER_OPTIONS)
  private Boolean enabledDeveloperOptions;

  public static final String SERIALIZED_NAME_ENABLED_USB_DEBUGGING = "enabledUsbDebugging";
  @SerializedName(SERIALIZED_NAME_ENABLED_USB_DEBUGGING)
  private Boolean enabledUsbDebugging;

  /**
   * Output only. Device encryption state.
   */
  @JsonAdapter(EncryptionStateEnum.Adapter.class)
  public enum EncryptionStateEnum {
    ENCRYPTION_STATE_UNSPECIFIED("ENCRYPTION_STATE_UNSPECIFIED"),
    
    UNSUPPORTED_BY_DEVICE("UNSUPPORTED_BY_DEVICE"),
    
    ENCRYPTED("ENCRYPTED"),
    
    NOT_ENCRYPTED("NOT_ENCRYPTED");

    private String value;

    EncryptionStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncryptionStateEnum fromValue(String value) {
      for (EncryptionStateEnum b : EncryptionStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncryptionStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncryptionStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncryptionStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncryptionStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncryptionStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCRYPTION_STATE = "encryptionState";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_STATE)
  private EncryptionStateEnum encryptionState;

  public static final String SERIALIZED_NAME_ENDPOINT_VERIFICATION_SPECIFIC_ATTRIBUTES = "endpointVerificationSpecificAttributes";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_VERIFICATION_SPECIFIC_ATTRIBUTES)
  private EndpointVerificationSpecificAttributes endpointVerificationSpecificAttributes;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_IMEI = "imei";
  @SerializedName(SERIALIZED_NAME_IMEI)
  private String imei;

  public static final String SERIALIZED_NAME_KERNEL_VERSION = "kernelVersion";
  @SerializedName(SERIALIZED_NAME_KERNEL_VERSION)
  private String kernelVersion;

  public static final String SERIALIZED_NAME_LAST_SYNC_TIME = "lastSyncTime";
  @SerializedName(SERIALIZED_NAME_LAST_SYNC_TIME)
  private String lastSyncTime;

  /**
   * Output only. Management state of the device
   */
  @JsonAdapter(ManagementStateEnum.Adapter.class)
  public enum ManagementStateEnum {
    MANAGEMENT_STATE_UNSPECIFIED("MANAGEMENT_STATE_UNSPECIFIED"),
    
    APPROVED("APPROVED"),
    
    BLOCKED("BLOCKED"),
    
    PENDING("PENDING"),
    
    UNPROVISIONED("UNPROVISIONED"),
    
    WIPING("WIPING"),
    
    WIPED("WIPED");

    private String value;

    ManagementStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ManagementStateEnum fromValue(String value) {
      for (ManagementStateEnum b : ManagementStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ManagementStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ManagementStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ManagementStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ManagementStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ManagementStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MANAGEMENT_STATE = "managementState";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT_STATE)
  private ManagementStateEnum managementState;

  public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER)
  private String manufacturer;

  public static final String SERIALIZED_NAME_MEID = "meid";
  @SerializedName(SERIALIZED_NAME_MEID)
  private String meid;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK_OPERATOR = "networkOperator";
  @SerializedName(SERIALIZED_NAME_NETWORK_OPERATOR)
  private String networkOperator;

  public static final String SERIALIZED_NAME_OS_VERSION = "osVersion";
  @SerializedName(SERIALIZED_NAME_OS_VERSION)
  private String osVersion;

  public static final String SERIALIZED_NAME_OTHER_ACCOUNTS = "otherAccounts";
  @SerializedName(SERIALIZED_NAME_OTHER_ACCOUNTS)
  private List<String> otherAccounts = new ArrayList<>();

  /**
   * Output only. Whether the device is owned by the company or an individual
   */
  @JsonAdapter(OwnerTypeEnum.Adapter.class)
  public enum OwnerTypeEnum {
    DEVICE_OWNERSHIP_UNSPECIFIED("DEVICE_OWNERSHIP_UNSPECIFIED"),
    
    COMPANY("COMPANY"),
    
    BYOD("BYOD");

    private String value;

    OwnerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OwnerTypeEnum fromValue(String value) {
      for (OwnerTypeEnum b : OwnerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OwnerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OwnerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OwnerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OwnerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OwnerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OWNER_TYPE = "ownerType";
  @SerializedName(SERIALIZED_NAME_OWNER_TYPE)
  private OwnerTypeEnum ownerType;

  public static final String SERIALIZED_NAME_RELEASE_VERSION = "releaseVersion";
  @SerializedName(SERIALIZED_NAME_RELEASE_VERSION)
  private String releaseVersion;

  public static final String SERIALIZED_NAME_SECURITY_PATCH_TIME = "securityPatchTime";
  @SerializedName(SERIALIZED_NAME_SECURITY_PATCH_TIME)
  private String securityPatchTime;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_WIFI_MAC_ADDRESSES = "wifiMacAddresses";
  @SerializedName(SERIALIZED_NAME_WIFI_MAC_ADDRESSES)
  private List<String> wifiMacAddresses = new ArrayList<>();

  public Device() {
  }

  public Device(
     String basebandVersion, 
     String bootloaderVersion, 
     String brand, 
     String buildNumber, 
     CompromisedStateEnum compromisedState, 
     String createTime, 
     DeviceTypeEnum deviceType, 
     Boolean enabledDeveloperOptions, 
     Boolean enabledUsbDebugging, 
     EncryptionStateEnum encryptionState, 
     String imei, 
     String kernelVersion, 
     ManagementStateEnum managementState, 
     String manufacturer, 
     String meid, 
     String model, 
     String name, 
     String networkOperator, 
     String osVersion, 
     List<String> otherAccounts, 
     OwnerTypeEnum ownerType, 
     String releaseVersion, 
     String securityPatchTime
  ) {
    this();
    this.basebandVersion = basebandVersion;
    this.bootloaderVersion = bootloaderVersion;
    this.brand = brand;
    this.buildNumber = buildNumber;
    this.compromisedState = compromisedState;
    this.createTime = createTime;
    this.deviceType = deviceType;
    this.enabledDeveloperOptions = enabledDeveloperOptions;
    this.enabledUsbDebugging = enabledUsbDebugging;
    this.encryptionState = encryptionState;
    this.imei = imei;
    this.kernelVersion = kernelVersion;
    this.managementState = managementState;
    this.manufacturer = manufacturer;
    this.meid = meid;
    this.model = model;
    this.name = name;
    this.networkOperator = networkOperator;
    this.osVersion = osVersion;
    this.otherAccounts = otherAccounts;
    this.ownerType = ownerType;
    this.releaseVersion = releaseVersion;
    this.securityPatchTime = securityPatchTime;
  }

  public Device androidSpecificAttributes(AndroidAttributes androidSpecificAttributes) {
    this.androidSpecificAttributes = androidSpecificAttributes;
    return this;
  }

  /**
   * Get androidSpecificAttributes
   * @return androidSpecificAttributes
   */
  @javax.annotation.Nullable
  public AndroidAttributes getAndroidSpecificAttributes() {
    return androidSpecificAttributes;
  }

  public void setAndroidSpecificAttributes(AndroidAttributes androidSpecificAttributes) {
    this.androidSpecificAttributes = androidSpecificAttributes;
  }


  public Device assetTag(String assetTag) {
    this.assetTag = assetTag;
    return this;
  }

  /**
   * Asset tag of the device.
   * @return assetTag
   */
  @javax.annotation.Nullable
  public String getAssetTag() {
    return assetTag;
  }

  public void setAssetTag(String assetTag) {
    this.assetTag = assetTag;
  }


  /**
   * Output only. Baseband version of the device.
   * @return basebandVersion
   */
  @javax.annotation.Nullable
  public String getBasebandVersion() {
    return basebandVersion;
  }



  /**
   * Output only. Device bootloader version. Example: 0.6.7.
   * @return bootloaderVersion
   */
  @javax.annotation.Nullable
  public String getBootloaderVersion() {
    return bootloaderVersion;
  }



  /**
   * Output only. Device brand. Example: Samsung.
   * @return brand
   */
  @javax.annotation.Nullable
  public String getBrand() {
    return brand;
  }



  /**
   * Output only. Build number of the device.
   * @return buildNumber
   */
  @javax.annotation.Nullable
  public String getBuildNumber() {
    return buildNumber;
  }



  public Device clientTypes(List<ClientTypesEnum> clientTypes) {
    this.clientTypes = clientTypes;
    return this;
  }

  public Device addClientTypesItem(ClientTypesEnum clientTypesItem) {
    if (this.clientTypes == null) {
      this.clientTypes = new ArrayList<>();
    }
    this.clientTypes.add(clientTypesItem);
    return this;
  }

  /**
   * List of the clients the device is reporting to.
   * @return clientTypes
   */
  @javax.annotation.Nullable
  public List<ClientTypesEnum> getClientTypes() {
    return clientTypes;
  }

  public void setClientTypes(List<ClientTypesEnum> clientTypes) {
    this.clientTypes = clientTypes;
  }


  /**
   * Output only. Represents whether the Device is compromised.
   * @return compromisedState
   */
  @javax.annotation.Nullable
  public CompromisedStateEnum getCompromisedState() {
    return compromisedState;
  }



  /**
   * Output only. When the Company-Owned device was imported. This field is empty for BYOD devices.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Device deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * Unique identifier for the device.
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  /**
   * Output only. Type of device.
   * @return deviceType
   */
  @javax.annotation.Nullable
  public DeviceTypeEnum getDeviceType() {
    return deviceType;
  }



  /**
   * Output only. Whether developer options is enabled on device.
   * @return enabledDeveloperOptions
   */
  @javax.annotation.Nullable
  public Boolean getEnabledDeveloperOptions() {
    return enabledDeveloperOptions;
  }



  /**
   * Output only. Whether USB debugging is enabled on device.
   * @return enabledUsbDebugging
   */
  @javax.annotation.Nullable
  public Boolean getEnabledUsbDebugging() {
    return enabledUsbDebugging;
  }



  /**
   * Output only. Device encryption state.
   * @return encryptionState
   */
  @javax.annotation.Nullable
  public EncryptionStateEnum getEncryptionState() {
    return encryptionState;
  }



  public Device endpointVerificationSpecificAttributes(EndpointVerificationSpecificAttributes endpointVerificationSpecificAttributes) {
    this.endpointVerificationSpecificAttributes = endpointVerificationSpecificAttributes;
    return this;
  }

  /**
   * Get endpointVerificationSpecificAttributes
   * @return endpointVerificationSpecificAttributes
   */
  @javax.annotation.Nullable
  public EndpointVerificationSpecificAttributes getEndpointVerificationSpecificAttributes() {
    return endpointVerificationSpecificAttributes;
  }

  public void setEndpointVerificationSpecificAttributes(EndpointVerificationSpecificAttributes endpointVerificationSpecificAttributes) {
    this.endpointVerificationSpecificAttributes = endpointVerificationSpecificAttributes;
  }


  public Device hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Host name of the device.
   * @return hostname
   */
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  /**
   * Output only. IMEI number of device if GSM device; empty otherwise.
   * @return imei
   */
  @javax.annotation.Nullable
  public String getImei() {
    return imei;
  }



  /**
   * Output only. Kernel version of the device.
   * @return kernelVersion
   */
  @javax.annotation.Nullable
  public String getKernelVersion() {
    return kernelVersion;
  }



  public Device lastSyncTime(String lastSyncTime) {
    this.lastSyncTime = lastSyncTime;
    return this;
  }

  /**
   * Most recent time when device synced with this service.
   * @return lastSyncTime
   */
  @javax.annotation.Nullable
  public String getLastSyncTime() {
    return lastSyncTime;
  }

  public void setLastSyncTime(String lastSyncTime) {
    this.lastSyncTime = lastSyncTime;
  }


  /**
   * Output only. Management state of the device
   * @return managementState
   */
  @javax.annotation.Nullable
  public ManagementStateEnum getManagementState() {
    return managementState;
  }



  /**
   * Output only. Device manufacturer. Example: Motorola.
   * @return manufacturer
   */
  @javax.annotation.Nullable
  public String getManufacturer() {
    return manufacturer;
  }



  /**
   * Output only. MEID number of device if CDMA device; empty otherwise.
   * @return meid
   */
  @javax.annotation.Nullable
  public String getMeid() {
    return meid;
  }



  /**
   * Output only. Model name of device. Example: Pixel 3.
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }



  /**
   * Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: &#x60;devices/{device_id}&#x60;, where device_id is the unique id assigned to the Device.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. Mobile or network operator of device, if available.
   * @return networkOperator
   */
  @javax.annotation.Nullable
  public String getNetworkOperator() {
    return networkOperator;
  }



  /**
   * Output only. OS version of the device. Example: Android 8.1.0.
   * @return osVersion
   */
  @javax.annotation.Nullable
  public String getOsVersion() {
    return osVersion;
  }



  /**
   * Output only. Domain name for Google accounts on device. Type for other accounts on device. On Android, will only be populated if |ownership_privilege| is |PROFILE_OWNER| or |DEVICE_OWNER|. Does not include the account signed in to the device policy app if that account&#39;s domain has only one account. Examples: \&quot;com.example\&quot;, \&quot;xyz.com\&quot;.
   * @return otherAccounts
   */
  @javax.annotation.Nullable
  public List<String> getOtherAccounts() {
    return otherAccounts;
  }



  /**
   * Output only. Whether the device is owned by the company or an individual
   * @return ownerType
   */
  @javax.annotation.Nullable
  public OwnerTypeEnum getOwnerType() {
    return ownerType;
  }



  /**
   * Output only. OS release version. Example: 6.0.
   * @return releaseVersion
   */
  @javax.annotation.Nullable
  public String getReleaseVersion() {
    return releaseVersion;
  }



  /**
   * Output only. OS security patch update time on device.
   * @return securityPatchTime
   */
  @javax.annotation.Nullable
  public String getSecurityPatchTime() {
    return securityPatchTime;
  }



  public Device serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * Serial Number of device. Example: HT82V1A01076.
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public Device wifiMacAddresses(List<String> wifiMacAddresses) {
    this.wifiMacAddresses = wifiMacAddresses;
    return this;
  }

  public Device addWifiMacAddressesItem(String wifiMacAddressesItem) {
    if (this.wifiMacAddresses == null) {
      this.wifiMacAddresses = new ArrayList<>();
    }
    this.wifiMacAddresses.add(wifiMacAddressesItem);
    return this;
  }

  /**
   * WiFi MAC addresses of device.
   * @return wifiMacAddresses
   */
  @javax.annotation.Nullable
  public List<String> getWifiMacAddresses() {
    return wifiMacAddresses;
  }

  public void setWifiMacAddresses(List<String> wifiMacAddresses) {
    this.wifiMacAddresses = wifiMacAddresses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Device device = (Device) o;
    return Objects.equals(this.androidSpecificAttributes, device.androidSpecificAttributes) &&
        Objects.equals(this.assetTag, device.assetTag) &&
        Objects.equals(this.basebandVersion, device.basebandVersion) &&
        Objects.equals(this.bootloaderVersion, device.bootloaderVersion) &&
        Objects.equals(this.brand, device.brand) &&
        Objects.equals(this.buildNumber, device.buildNumber) &&
        Objects.equals(this.clientTypes, device.clientTypes) &&
        Objects.equals(this.compromisedState, device.compromisedState) &&
        Objects.equals(this.createTime, device.createTime) &&
        Objects.equals(this.deviceId, device.deviceId) &&
        Objects.equals(this.deviceType, device.deviceType) &&
        Objects.equals(this.enabledDeveloperOptions, device.enabledDeveloperOptions) &&
        Objects.equals(this.enabledUsbDebugging, device.enabledUsbDebugging) &&
        Objects.equals(this.encryptionState, device.encryptionState) &&
        Objects.equals(this.endpointVerificationSpecificAttributes, device.endpointVerificationSpecificAttributes) &&
        Objects.equals(this.hostname, device.hostname) &&
        Objects.equals(this.imei, device.imei) &&
        Objects.equals(this.kernelVersion, device.kernelVersion) &&
        Objects.equals(this.lastSyncTime, device.lastSyncTime) &&
        Objects.equals(this.managementState, device.managementState) &&
        Objects.equals(this.manufacturer, device.manufacturer) &&
        Objects.equals(this.meid, device.meid) &&
        Objects.equals(this.model, device.model) &&
        Objects.equals(this.name, device.name) &&
        Objects.equals(this.networkOperator, device.networkOperator) &&
        Objects.equals(this.osVersion, device.osVersion) &&
        Objects.equals(this.otherAccounts, device.otherAccounts) &&
        Objects.equals(this.ownerType, device.ownerType) &&
        Objects.equals(this.releaseVersion, device.releaseVersion) &&
        Objects.equals(this.securityPatchTime, device.securityPatchTime) &&
        Objects.equals(this.serialNumber, device.serialNumber) &&
        Objects.equals(this.wifiMacAddresses, device.wifiMacAddresses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(androidSpecificAttributes, assetTag, basebandVersion, bootloaderVersion, brand, buildNumber, clientTypes, compromisedState, createTime, deviceId, deviceType, enabledDeveloperOptions, enabledUsbDebugging, encryptionState, endpointVerificationSpecificAttributes, hostname, imei, kernelVersion, lastSyncTime, managementState, manufacturer, meid, model, name, networkOperator, osVersion, otherAccounts, ownerType, releaseVersion, securityPatchTime, serialNumber, wifiMacAddresses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Device {\n");
    sb.append("    androidSpecificAttributes: ").append(toIndentedString(androidSpecificAttributes)).append("\n");
    sb.append("    assetTag: ").append(toIndentedString(assetTag)).append("\n");
    sb.append("    basebandVersion: ").append(toIndentedString(basebandVersion)).append("\n");
    sb.append("    bootloaderVersion: ").append(toIndentedString(bootloaderVersion)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    buildNumber: ").append(toIndentedString(buildNumber)).append("\n");
    sb.append("    clientTypes: ").append(toIndentedString(clientTypes)).append("\n");
    sb.append("    compromisedState: ").append(toIndentedString(compromisedState)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    enabledDeveloperOptions: ").append(toIndentedString(enabledDeveloperOptions)).append("\n");
    sb.append("    enabledUsbDebugging: ").append(toIndentedString(enabledUsbDebugging)).append("\n");
    sb.append("    encryptionState: ").append(toIndentedString(encryptionState)).append("\n");
    sb.append("    endpointVerificationSpecificAttributes: ").append(toIndentedString(endpointVerificationSpecificAttributes)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    imei: ").append(toIndentedString(imei)).append("\n");
    sb.append("    kernelVersion: ").append(toIndentedString(kernelVersion)).append("\n");
    sb.append("    lastSyncTime: ").append(toIndentedString(lastSyncTime)).append("\n");
    sb.append("    managementState: ").append(toIndentedString(managementState)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    meid: ").append(toIndentedString(meid)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkOperator: ").append(toIndentedString(networkOperator)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    otherAccounts: ").append(toIndentedString(otherAccounts)).append("\n");
    sb.append("    ownerType: ").append(toIndentedString(ownerType)).append("\n");
    sb.append("    releaseVersion: ").append(toIndentedString(releaseVersion)).append("\n");
    sb.append("    securityPatchTime: ").append(toIndentedString(securityPatchTime)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    wifiMacAddresses: ").append(toIndentedString(wifiMacAddresses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("androidSpecificAttributes");
    openapiFields.add("assetTag");
    openapiFields.add("basebandVersion");
    openapiFields.add("bootloaderVersion");
    openapiFields.add("brand");
    openapiFields.add("buildNumber");
    openapiFields.add("clientTypes");
    openapiFields.add("compromisedState");
    openapiFields.add("createTime");
    openapiFields.add("deviceId");
    openapiFields.add("deviceType");
    openapiFields.add("enabledDeveloperOptions");
    openapiFields.add("enabledUsbDebugging");
    openapiFields.add("encryptionState");
    openapiFields.add("endpointVerificationSpecificAttributes");
    openapiFields.add("hostname");
    openapiFields.add("imei");
    openapiFields.add("kernelVersion");
    openapiFields.add("lastSyncTime");
    openapiFields.add("managementState");
    openapiFields.add("manufacturer");
    openapiFields.add("meid");
    openapiFields.add("model");
    openapiFields.add("name");
    openapiFields.add("networkOperator");
    openapiFields.add("osVersion");
    openapiFields.add("otherAccounts");
    openapiFields.add("ownerType");
    openapiFields.add("releaseVersion");
    openapiFields.add("securityPatchTime");
    openapiFields.add("serialNumber");
    openapiFields.add("wifiMacAddresses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Device
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Device.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Device is not found in the empty JSON string", Device.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Device.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Device` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `androidSpecificAttributes`
      if (jsonObj.get("androidSpecificAttributes") != null && !jsonObj.get("androidSpecificAttributes").isJsonNull()) {
        AndroidAttributes.validateJsonElement(jsonObj.get("androidSpecificAttributes"));
      }
      if ((jsonObj.get("assetTag") != null && !jsonObj.get("assetTag").isJsonNull()) && !jsonObj.get("assetTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetTag").toString()));
      }
      if ((jsonObj.get("basebandVersion") != null && !jsonObj.get("basebandVersion").isJsonNull()) && !jsonObj.get("basebandVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basebandVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basebandVersion").toString()));
      }
      if ((jsonObj.get("bootloaderVersion") != null && !jsonObj.get("bootloaderVersion").isJsonNull()) && !jsonObj.get("bootloaderVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bootloaderVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bootloaderVersion").toString()));
      }
      if ((jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) && !jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      if ((jsonObj.get("buildNumber") != null && !jsonObj.get("buildNumber").isJsonNull()) && !jsonObj.get("buildNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildNumber").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("clientTypes") != null && !jsonObj.get("clientTypes").isJsonNull() && !jsonObj.get("clientTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientTypes` to be an array in the JSON string but got `%s`", jsonObj.get("clientTypes").toString()));
      }
      if ((jsonObj.get("compromisedState") != null && !jsonObj.get("compromisedState").isJsonNull()) && !jsonObj.get("compromisedState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compromisedState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compromisedState").toString()));
      }
      // validate the optional field `compromisedState`
      if (jsonObj.get("compromisedState") != null && !jsonObj.get("compromisedState").isJsonNull()) {
        CompromisedStateEnum.validateJsonElement(jsonObj.get("compromisedState"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("deviceId") != null && !jsonObj.get("deviceId").isJsonNull()) && !jsonObj.get("deviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceId").toString()));
      }
      if ((jsonObj.get("deviceType") != null && !jsonObj.get("deviceType").isJsonNull()) && !jsonObj.get("deviceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceType").toString()));
      }
      // validate the optional field `deviceType`
      if (jsonObj.get("deviceType") != null && !jsonObj.get("deviceType").isJsonNull()) {
        DeviceTypeEnum.validateJsonElement(jsonObj.get("deviceType"));
      }
      if ((jsonObj.get("encryptionState") != null && !jsonObj.get("encryptionState").isJsonNull()) && !jsonObj.get("encryptionState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionState").toString()));
      }
      // validate the optional field `encryptionState`
      if (jsonObj.get("encryptionState") != null && !jsonObj.get("encryptionState").isJsonNull()) {
        EncryptionStateEnum.validateJsonElement(jsonObj.get("encryptionState"));
      }
      // validate the optional field `endpointVerificationSpecificAttributes`
      if (jsonObj.get("endpointVerificationSpecificAttributes") != null && !jsonObj.get("endpointVerificationSpecificAttributes").isJsonNull()) {
        EndpointVerificationSpecificAttributes.validateJsonElement(jsonObj.get("endpointVerificationSpecificAttributes"));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if ((jsonObj.get("imei") != null && !jsonObj.get("imei").isJsonNull()) && !jsonObj.get("imei").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imei` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imei").toString()));
      }
      if ((jsonObj.get("kernelVersion") != null && !jsonObj.get("kernelVersion").isJsonNull()) && !jsonObj.get("kernelVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kernelVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kernelVersion").toString()));
      }
      if ((jsonObj.get("lastSyncTime") != null && !jsonObj.get("lastSyncTime").isJsonNull()) && !jsonObj.get("lastSyncTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastSyncTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastSyncTime").toString()));
      }
      if ((jsonObj.get("managementState") != null && !jsonObj.get("managementState").isJsonNull()) && !jsonObj.get("managementState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managementState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managementState").toString()));
      }
      // validate the optional field `managementState`
      if (jsonObj.get("managementState") != null && !jsonObj.get("managementState").isJsonNull()) {
        ManagementStateEnum.validateJsonElement(jsonObj.get("managementState"));
      }
      if ((jsonObj.get("manufacturer") != null && !jsonObj.get("manufacturer").isJsonNull()) && !jsonObj.get("manufacturer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manufacturer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manufacturer").toString()));
      }
      if ((jsonObj.get("meid") != null && !jsonObj.get("meid").isJsonNull()) && !jsonObj.get("meid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meid").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("networkOperator") != null && !jsonObj.get("networkOperator").isJsonNull()) && !jsonObj.get("networkOperator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkOperator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkOperator").toString()));
      }
      if ((jsonObj.get("osVersion") != null && !jsonObj.get("osVersion").isJsonNull()) && !jsonObj.get("osVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osVersion").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("otherAccounts") != null && !jsonObj.get("otherAccounts").isJsonNull() && !jsonObj.get("otherAccounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `otherAccounts` to be an array in the JSON string but got `%s`", jsonObj.get("otherAccounts").toString()));
      }
      if ((jsonObj.get("ownerType") != null && !jsonObj.get("ownerType").isJsonNull()) && !jsonObj.get("ownerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerType").toString()));
      }
      // validate the optional field `ownerType`
      if (jsonObj.get("ownerType") != null && !jsonObj.get("ownerType").isJsonNull()) {
        OwnerTypeEnum.validateJsonElement(jsonObj.get("ownerType"));
      }
      if ((jsonObj.get("releaseVersion") != null && !jsonObj.get("releaseVersion").isJsonNull()) && !jsonObj.get("releaseVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releaseVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releaseVersion").toString()));
      }
      if ((jsonObj.get("securityPatchTime") != null && !jsonObj.get("securityPatchTime").isJsonNull()) && !jsonObj.get("securityPatchTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityPatchTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityPatchTime").toString()));
      }
      if ((jsonObj.get("serialNumber") != null && !jsonObj.get("serialNumber").isJsonNull()) && !jsonObj.get("serialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serialNumber").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("wifiMacAddresses") != null && !jsonObj.get("wifiMacAddresses").isJsonNull() && !jsonObj.get("wifiMacAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `wifiMacAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("wifiMacAddresses").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Device.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Device' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Device> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Device.class));

       return (TypeAdapter<T>) new TypeAdapter<Device>() {
           @Override
           public void write(JsonWriter out, Device value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Device read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Device given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Device
   * @throws IOException if the JSON string is invalid with respect to Device
   */
  public static Device fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Device.class);
  }

  /**
   * Convert an instance of Device to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

