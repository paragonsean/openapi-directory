/*
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.BrowserAttributes;
import org.openapitools.client.model.CertificateAttributes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Resource representing the [Endpoint Verification-specific attributes](https://cloud.google.com/endpoint-verification/docs/device-information) of a device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:30.727531-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EndpointVerificationSpecificAttributes {
  public static final String SERIALIZED_NAME_ADDITIONAL_SIGNALS = "additionalSignals";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_SIGNALS)
  private Map<String, Object> additionalSignals = new HashMap<>();

  public static final String SERIALIZED_NAME_BROWSER_ATTRIBUTES = "browserAttributes";
  @SerializedName(SERIALIZED_NAME_BROWSER_ATTRIBUTES)
  private List<BrowserAttributes> browserAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CERTIFICATE_ATTRIBUTES = "certificateAttributes";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ATTRIBUTES)
  private List<CertificateAttributes> certificateAttributes = new ArrayList<>();

  public EndpointVerificationSpecificAttributes() {
  }

  public EndpointVerificationSpecificAttributes additionalSignals(Map<String, Object> additionalSignals) {
    this.additionalSignals = additionalSignals;
    return this;
  }

  public EndpointVerificationSpecificAttributes putAdditionalSignalsItem(String key, Object additionalSignalsItem) {
    if (this.additionalSignals == null) {
      this.additionalSignals = new HashMap<>();
    }
    this.additionalSignals.put(key, additionalSignalsItem);
    return this;
  }

  /**
   * Additional signals reported by Endpoint Verification. It includes the following attributes: 1. Non-configurable attributes: hotfixes, av_installed, av_enabled, windows_domain_name, is_os_native_firewall_enabled, and is_secure_boot_enabled. 2. Configurable attributes: file_config, registry_config, and plist_config.
   * @return additionalSignals
   */
  @javax.annotation.Nullable
  public Map<String, Object> getAdditionalSignals() {
    return additionalSignals;
  }

  public void setAdditionalSignals(Map<String, Object> additionalSignals) {
    this.additionalSignals = additionalSignals;
  }


  public EndpointVerificationSpecificAttributes browserAttributes(List<BrowserAttributes> browserAttributes) {
    this.browserAttributes = browserAttributes;
    return this;
  }

  public EndpointVerificationSpecificAttributes addBrowserAttributesItem(BrowserAttributes browserAttributesItem) {
    if (this.browserAttributes == null) {
      this.browserAttributes = new ArrayList<>();
    }
    this.browserAttributes.add(browserAttributesItem);
    return this;
  }

  /**
   * Details of browser profiles reported by Endpoint Verification.
   * @return browserAttributes
   */
  @javax.annotation.Nullable
  public List<BrowserAttributes> getBrowserAttributes() {
    return browserAttributes;
  }

  public void setBrowserAttributes(List<BrowserAttributes> browserAttributes) {
    this.browserAttributes = browserAttributes;
  }


  public EndpointVerificationSpecificAttributes certificateAttributes(List<CertificateAttributes> certificateAttributes) {
    this.certificateAttributes = certificateAttributes;
    return this;
  }

  public EndpointVerificationSpecificAttributes addCertificateAttributesItem(CertificateAttributes certificateAttributesItem) {
    if (this.certificateAttributes == null) {
      this.certificateAttributes = new ArrayList<>();
    }
    this.certificateAttributes.add(certificateAttributesItem);
    return this;
  }

  /**
   * Details of certificates.
   * @return certificateAttributes
   */
  @javax.annotation.Nullable
  public List<CertificateAttributes> getCertificateAttributes() {
    return certificateAttributes;
  }

  public void setCertificateAttributes(List<CertificateAttributes> certificateAttributes) {
    this.certificateAttributes = certificateAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointVerificationSpecificAttributes endpointVerificationSpecificAttributes = (EndpointVerificationSpecificAttributes) o;
    return Objects.equals(this.additionalSignals, endpointVerificationSpecificAttributes.additionalSignals) &&
        Objects.equals(this.browserAttributes, endpointVerificationSpecificAttributes.browserAttributes) &&
        Objects.equals(this.certificateAttributes, endpointVerificationSpecificAttributes.certificateAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalSignals, browserAttributes, certificateAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointVerificationSpecificAttributes {\n");
    sb.append("    additionalSignals: ").append(toIndentedString(additionalSignals)).append("\n");
    sb.append("    browserAttributes: ").append(toIndentedString(browserAttributes)).append("\n");
    sb.append("    certificateAttributes: ").append(toIndentedString(certificateAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalSignals");
    openapiFields.add("browserAttributes");
    openapiFields.add("certificateAttributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EndpointVerificationSpecificAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndpointVerificationSpecificAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndpointVerificationSpecificAttributes is not found in the empty JSON string", EndpointVerificationSpecificAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EndpointVerificationSpecificAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndpointVerificationSpecificAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("browserAttributes") != null && !jsonObj.get("browserAttributes").isJsonNull()) {
        JsonArray jsonArraybrowserAttributes = jsonObj.getAsJsonArray("browserAttributes");
        if (jsonArraybrowserAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("browserAttributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `browserAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("browserAttributes").toString()));
          }

          // validate the optional field `browserAttributes` (array)
          for (int i = 0; i < jsonArraybrowserAttributes.size(); i++) {
            BrowserAttributes.validateJsonElement(jsonArraybrowserAttributes.get(i));
          };
        }
      }
      if (jsonObj.get("certificateAttributes") != null && !jsonObj.get("certificateAttributes").isJsonNull()) {
        JsonArray jsonArraycertificateAttributes = jsonObj.getAsJsonArray("certificateAttributes");
        if (jsonArraycertificateAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("certificateAttributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `certificateAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("certificateAttributes").toString()));
          }

          // validate the optional field `certificateAttributes` (array)
          for (int i = 0; i < jsonArraycertificateAttributes.size(); i++) {
            CertificateAttributes.validateJsonElement(jsonArraycertificateAttributes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndpointVerificationSpecificAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndpointVerificationSpecificAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndpointVerificationSpecificAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndpointVerificationSpecificAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<EndpointVerificationSpecificAttributes>() {
           @Override
           public void write(JsonWriter out, EndpointVerificationSpecificAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndpointVerificationSpecificAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EndpointVerificationSpecificAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EndpointVerificationSpecificAttributes
   * @throws IOException if the JSON string is invalid with respect to EndpointVerificationSpecificAttributes
   */
  public static EndpointVerificationSpecificAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndpointVerificationSpecificAttributes.class);
  }

  /**
   * Convert an instance of EndpointVerificationSpecificAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

