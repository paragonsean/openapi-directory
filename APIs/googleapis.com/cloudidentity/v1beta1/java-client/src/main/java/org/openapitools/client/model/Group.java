/*
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DynamicGroupMetadata;
import org.openapitools.client.model.EntityKey;
import org.openapitools.client.model.PosixGroup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A group within the Cloud Identity Groups API. A &#x60;Group&#x60; is a collection of entities, where each entity is either a user, another group, or a service account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:30.727531-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Group {
  public static final String SERIALIZED_NAME_ADDITIONAL_GROUP_KEYS = "additionalGroupKeys";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_GROUP_KEYS)
  private List<EntityKey> additionalGroupKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DYNAMIC_GROUP_METADATA = "dynamicGroupMetadata";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_GROUP_METADATA)
  private DynamicGroupMetadata dynamicGroupMetadata;

  public static final String SERIALIZED_NAME_GROUP_KEY = "groupKey";
  @SerializedName(SERIALIZED_NAME_GROUP_KEY)
  private EntityKey groupKey;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private String parent;

  public static final String SERIALIZED_NAME_POSIX_GROUPS = "posixGroups";
  @SerializedName(SERIALIZED_NAME_POSIX_GROUPS)
  private List<PosixGroup> posixGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Group() {
  }

  public Group(
     List<EntityKey> additionalGroupKeys, 
     String createTime, 
     String name, 
     String updateTime
  ) {
    this();
    this.additionalGroupKeys = additionalGroupKeys;
    this.createTime = createTime;
    this.name = name;
    this.updateTime = updateTime;
  }

  /**
   * Output only. Additional group keys associated with the Group.
   * @return additionalGroupKeys
   */
  @javax.annotation.Nullable
  public List<EntityKey> getAdditionalGroupKeys() {
    return additionalGroupKeys;
  }



  /**
   * Output only. The time when the &#x60;Group&#x60; was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Group description(String description) {
    this.description = description;
    return this;
  }

  /**
   * An extended description to help users determine the purpose of a &#x60;Group&#x60;. Must not be longer than 4,096 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Group displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the &#x60;Group&#x60;.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Group dynamicGroupMetadata(DynamicGroupMetadata dynamicGroupMetadata) {
    this.dynamicGroupMetadata = dynamicGroupMetadata;
    return this;
  }

  /**
   * Get dynamicGroupMetadata
   * @return dynamicGroupMetadata
   */
  @javax.annotation.Nullable
  public DynamicGroupMetadata getDynamicGroupMetadata() {
    return dynamicGroupMetadata;
  }

  public void setDynamicGroupMetadata(DynamicGroupMetadata dynamicGroupMetadata) {
    this.dynamicGroupMetadata = dynamicGroupMetadata;
  }


  public Group groupKey(EntityKey groupKey) {
    this.groupKey = groupKey;
    return this;
  }

  /**
   * Get groupKey
   * @return groupKey
   */
  @javax.annotation.Nullable
  public EntityKey getGroupKey() {
    return groupKey;
  }

  public void setGroupKey(EntityKey groupKey) {
    this.groupKey = groupKey;
  }


  public Group labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Group putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Required. One or more label entries that apply to the Group. Currently supported labels contain a key with an empty value. Google Groups are the default type of group and have a label with a key of &#x60;cloudidentity.googleapis.com/groups.discussion_forum&#x60; and an empty value. Existing Google Groups can have an additional label with a key of &#x60;cloudidentity.googleapis.com/groups.security&#x60; and an empty value added to them. **This is an immutable change and the security label cannot be removed once added.** Dynamic groups have a label with a key of &#x60;cloudidentity.googleapis.com/groups.dynamic&#x60;. Identity-mapped groups for Cloud Search have a label with a key of &#x60;system/groups/external&#x60; and an empty value.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  /**
   * Output only. The [resource name](https://cloud.google.com/apis/design/resource_names) of the &#x60;Group&#x60;. Shall be of the form &#x60;groups/{group_id}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Group parent(String parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Required. Immutable. The resource name of the entity under which this &#x60;Group&#x60; resides in the Cloud Identity resource hierarchy. Must be of the form &#x60;identitysources/{identity_source}&#x60; for external [identity-mapped groups](https://support.google.com/a/answer/9039510) or &#x60;customers/{customer_id}&#x60; for Google Groups. The &#x60;customer_id&#x60; must begin with \&quot;C\&quot; (for example, &#39;C046psxkn&#39;). [Find your customer ID.] (https://support.google.com/cloudidentity/answer/10070793)
   * @return parent
   */
  @javax.annotation.Nullable
  public String getParent() {
    return parent;
  }

  public void setParent(String parent) {
    this.parent = parent;
  }


  public Group posixGroups(List<PosixGroup> posixGroups) {
    this.posixGroups = posixGroups;
    return this;
  }

  public Group addPosixGroupsItem(PosixGroup posixGroupsItem) {
    if (this.posixGroups == null) {
      this.posixGroups = new ArrayList<>();
    }
    this.posixGroups.add(posixGroupsItem);
    return this;
  }

  /**
   * Optional. The POSIX groups associated with the &#x60;Group&#x60;.
   * @return posixGroups
   */
  @javax.annotation.Nullable
  public List<PosixGroup> getPosixGroups() {
    return posixGroups;
  }

  public void setPosixGroups(List<PosixGroup> posixGroups) {
    this.posixGroups = posixGroups;
  }


  /**
   * Output only. The time when the &#x60;Group&#x60; was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Group group = (Group) o;
    return Objects.equals(this.additionalGroupKeys, group.additionalGroupKeys) &&
        Objects.equals(this.createTime, group.createTime) &&
        Objects.equals(this.description, group.description) &&
        Objects.equals(this.displayName, group.displayName) &&
        Objects.equals(this.dynamicGroupMetadata, group.dynamicGroupMetadata) &&
        Objects.equals(this.groupKey, group.groupKey) &&
        Objects.equals(this.labels, group.labels) &&
        Objects.equals(this.name, group.name) &&
        Objects.equals(this.parent, group.parent) &&
        Objects.equals(this.posixGroups, group.posixGroups) &&
        Objects.equals(this.updateTime, group.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalGroupKeys, createTime, description, displayName, dynamicGroupMetadata, groupKey, labels, name, parent, posixGroups, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Group {\n");
    sb.append("    additionalGroupKeys: ").append(toIndentedString(additionalGroupKeys)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    dynamicGroupMetadata: ").append(toIndentedString(dynamicGroupMetadata)).append("\n");
    sb.append("    groupKey: ").append(toIndentedString(groupKey)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    posixGroups: ").append(toIndentedString(posixGroups)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalGroupKeys");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("dynamicGroupMetadata");
    openapiFields.add("groupKey");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("parent");
    openapiFields.add("posixGroups");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Group
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Group.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Group is not found in the empty JSON string", Group.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Group.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Group` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalGroupKeys") != null && !jsonObj.get("additionalGroupKeys").isJsonNull()) {
        JsonArray jsonArrayadditionalGroupKeys = jsonObj.getAsJsonArray("additionalGroupKeys");
        if (jsonArrayadditionalGroupKeys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalGroupKeys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalGroupKeys` to be an array in the JSON string but got `%s`", jsonObj.get("additionalGroupKeys").toString()));
          }

          // validate the optional field `additionalGroupKeys` (array)
          for (int i = 0; i < jsonArrayadditionalGroupKeys.size(); i++) {
            EntityKey.validateJsonElement(jsonArrayadditionalGroupKeys.get(i));
          };
        }
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `dynamicGroupMetadata`
      if (jsonObj.get("dynamicGroupMetadata") != null && !jsonObj.get("dynamicGroupMetadata").isJsonNull()) {
        DynamicGroupMetadata.validateJsonElement(jsonObj.get("dynamicGroupMetadata"));
      }
      // validate the optional field `groupKey`
      if (jsonObj.get("groupKey") != null && !jsonObj.get("groupKey").isJsonNull()) {
        EntityKey.validateJsonElement(jsonObj.get("groupKey"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) && !jsonObj.get("parent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent").toString()));
      }
      if (jsonObj.get("posixGroups") != null && !jsonObj.get("posixGroups").isJsonNull()) {
        JsonArray jsonArrayposixGroups = jsonObj.getAsJsonArray("posixGroups");
        if (jsonArrayposixGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("posixGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `posixGroups` to be an array in the JSON string but got `%s`", jsonObj.get("posixGroups").toString()));
          }

          // validate the optional field `posixGroups` (array)
          for (int i = 0; i < jsonArrayposixGroups.size(); i++) {
            PosixGroup.validateJsonElement(jsonArrayposixGroups.get(i));
          };
        }
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Group.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Group' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Group> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Group.class));

       return (TypeAdapter<T>) new TypeAdapter<Group>() {
           @Override
           public void write(JsonWriter out, Group value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Group read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Group given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Group
   * @throws IOException if the JSON string is invalid with respect to Group
   */
  public static Group fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Group.class);
  }

  /**
   * Convert an instance of Group to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

