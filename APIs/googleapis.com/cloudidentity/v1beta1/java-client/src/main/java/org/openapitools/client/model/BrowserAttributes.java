/*
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BrowserInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about browser profiles reported by the Endpoint Verification extension.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:30.727531-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BrowserAttributes {
  public static final String SERIALIZED_NAME_CHROME_BROWSER_INFO = "chromeBrowserInfo";
  @SerializedName(SERIALIZED_NAME_CHROME_BROWSER_INFO)
  private BrowserInfo chromeBrowserInfo;

  public static final String SERIALIZED_NAME_CHROME_PROFILE_ID = "chromeProfileId";
  @SerializedName(SERIALIZED_NAME_CHROME_PROFILE_ID)
  private String chromeProfileId;

  public static final String SERIALIZED_NAME_LAST_PROFILE_SYNC_TIME = "lastProfileSyncTime";
  @SerializedName(SERIALIZED_NAME_LAST_PROFILE_SYNC_TIME)
  private String lastProfileSyncTime;

  public BrowserAttributes() {
  }

  public BrowserAttributes chromeBrowserInfo(BrowserInfo chromeBrowserInfo) {
    this.chromeBrowserInfo = chromeBrowserInfo;
    return this;
  }

  /**
   * Get chromeBrowserInfo
   * @return chromeBrowserInfo
   */
  @javax.annotation.Nullable
  public BrowserInfo getChromeBrowserInfo() {
    return chromeBrowserInfo;
  }

  public void setChromeBrowserInfo(BrowserInfo chromeBrowserInfo) {
    this.chromeBrowserInfo = chromeBrowserInfo;
  }


  public BrowserAttributes chromeProfileId(String chromeProfileId) {
    this.chromeProfileId = chromeProfileId;
    return this;
  }

  /**
   * Chrome profile ID that is exposed by the Chrome API. It is unique for each device.
   * @return chromeProfileId
   */
  @javax.annotation.Nullable
  public String getChromeProfileId() {
    return chromeProfileId;
  }

  public void setChromeProfileId(String chromeProfileId) {
    this.chromeProfileId = chromeProfileId;
  }


  public BrowserAttributes lastProfileSyncTime(String lastProfileSyncTime) {
    this.lastProfileSyncTime = lastProfileSyncTime;
    return this;
  }

  /**
   * Timestamp in milliseconds since Epoch when the profile/gcm id was last synced.
   * @return lastProfileSyncTime
   */
  @javax.annotation.Nullable
  public String getLastProfileSyncTime() {
    return lastProfileSyncTime;
  }

  public void setLastProfileSyncTime(String lastProfileSyncTime) {
    this.lastProfileSyncTime = lastProfileSyncTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BrowserAttributes browserAttributes = (BrowserAttributes) o;
    return Objects.equals(this.chromeBrowserInfo, browserAttributes.chromeBrowserInfo) &&
        Objects.equals(this.chromeProfileId, browserAttributes.chromeProfileId) &&
        Objects.equals(this.lastProfileSyncTime, browserAttributes.lastProfileSyncTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chromeBrowserInfo, chromeProfileId, lastProfileSyncTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BrowserAttributes {\n");
    sb.append("    chromeBrowserInfo: ").append(toIndentedString(chromeBrowserInfo)).append("\n");
    sb.append("    chromeProfileId: ").append(toIndentedString(chromeProfileId)).append("\n");
    sb.append("    lastProfileSyncTime: ").append(toIndentedString(lastProfileSyncTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chromeBrowserInfo");
    openapiFields.add("chromeProfileId");
    openapiFields.add("lastProfileSyncTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BrowserAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BrowserAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BrowserAttributes is not found in the empty JSON string", BrowserAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BrowserAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BrowserAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `chromeBrowserInfo`
      if (jsonObj.get("chromeBrowserInfo") != null && !jsonObj.get("chromeBrowserInfo").isJsonNull()) {
        BrowserInfo.validateJsonElement(jsonObj.get("chromeBrowserInfo"));
      }
      if ((jsonObj.get("chromeProfileId") != null && !jsonObj.get("chromeProfileId").isJsonNull()) && !jsonObj.get("chromeProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chromeProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chromeProfileId").toString()));
      }
      if ((jsonObj.get("lastProfileSyncTime") != null && !jsonObj.get("lastProfileSyncTime").isJsonNull()) && !jsonObj.get("lastProfileSyncTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastProfileSyncTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastProfileSyncTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BrowserAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BrowserAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BrowserAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BrowserAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<BrowserAttributes>() {
           @Override
           public void write(JsonWriter out, BrowserAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BrowserAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BrowserAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BrowserAttributes
   * @throws IOException if the JSON string is invalid with respect to BrowserAttributes
   */
  public static BrowserAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BrowserAttributes.class);
  }

  /**
   * Convert an instance of BrowserAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

