/*
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CertificateTemplate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Stores information about a certificate.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:30.727531-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateAttributes {
  public static final String SERIALIZED_NAME_CERTIFICATE_TEMPLATE = "certificateTemplate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_TEMPLATE)
  private CertificateTemplate certificateTemplate;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_THUMBPRINT = "thumbprint";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT)
  private String thumbprint;

  /**
   * Validation state of this certificate.
   */
  @JsonAdapter(ValidationStateEnum.Adapter.class)
  public enum ValidationStateEnum {
    CERTIFICATE_VALIDATION_STATE_UNSPECIFIED("CERTIFICATE_VALIDATION_STATE_UNSPECIFIED"),
    
    VALIDATION_SUCCESSFUL("VALIDATION_SUCCESSFUL"),
    
    VALIDATION_FAILED("VALIDATION_FAILED");

    private String value;

    ValidationStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValidationStateEnum fromValue(String value) {
      for (ValidationStateEnum b : ValidationStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValidationStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValidationStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValidationStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValidationStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ValidationStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VALIDATION_STATE = "validationState";
  @SerializedName(SERIALIZED_NAME_VALIDATION_STATE)
  private ValidationStateEnum validationState;

  public static final String SERIALIZED_NAME_VALIDITY_EXPIRATION_TIME = "validityExpirationTime";
  @SerializedName(SERIALIZED_NAME_VALIDITY_EXPIRATION_TIME)
  private String validityExpirationTime;

  public static final String SERIALIZED_NAME_VALIDITY_START_TIME = "validityStartTime";
  @SerializedName(SERIALIZED_NAME_VALIDITY_START_TIME)
  private String validityStartTime;

  public CertificateAttributes() {
  }

  public CertificateAttributes certificateTemplate(CertificateTemplate certificateTemplate) {
    this.certificateTemplate = certificateTemplate;
    return this;
  }

  /**
   * Get certificateTemplate
   * @return certificateTemplate
   */
  @javax.annotation.Nullable
  public CertificateTemplate getCertificateTemplate() {
    return certificateTemplate;
  }

  public void setCertificateTemplate(CertificateTemplate certificateTemplate) {
    this.certificateTemplate = certificateTemplate;
  }


  public CertificateAttributes fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * The encoded certificate fingerprint.
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  public CertificateAttributes issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * The name of the issuer of this certificate.
   * @return issuer
   */
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public CertificateAttributes serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * Serial number of the certificate, Example: \&quot;123456789\&quot;.
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public CertificateAttributes subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * The subject name of this certificate.
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public CertificateAttributes thumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
    return this;
  }

  /**
   * The certificate thumbprint.
   * @return thumbprint
   */
  @javax.annotation.Nullable
  public String getThumbprint() {
    return thumbprint;
  }

  public void setThumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
  }


  public CertificateAttributes validationState(ValidationStateEnum validationState) {
    this.validationState = validationState;
    return this;
  }

  /**
   * Validation state of this certificate.
   * @return validationState
   */
  @javax.annotation.Nullable
  public ValidationStateEnum getValidationState() {
    return validationState;
  }

  public void setValidationState(ValidationStateEnum validationState) {
    this.validationState = validationState;
  }


  public CertificateAttributes validityExpirationTime(String validityExpirationTime) {
    this.validityExpirationTime = validityExpirationTime;
    return this;
  }

  /**
   * Certificate not valid at or after this timestamp.
   * @return validityExpirationTime
   */
  @javax.annotation.Nullable
  public String getValidityExpirationTime() {
    return validityExpirationTime;
  }

  public void setValidityExpirationTime(String validityExpirationTime) {
    this.validityExpirationTime = validityExpirationTime;
  }


  public CertificateAttributes validityStartTime(String validityStartTime) {
    this.validityStartTime = validityStartTime;
    return this;
  }

  /**
   * Certificate not valid before this timestamp.
   * @return validityStartTime
   */
  @javax.annotation.Nullable
  public String getValidityStartTime() {
    return validityStartTime;
  }

  public void setValidityStartTime(String validityStartTime) {
    this.validityStartTime = validityStartTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateAttributes certificateAttributes = (CertificateAttributes) o;
    return Objects.equals(this.certificateTemplate, certificateAttributes.certificateTemplate) &&
        Objects.equals(this.fingerprint, certificateAttributes.fingerprint) &&
        Objects.equals(this.issuer, certificateAttributes.issuer) &&
        Objects.equals(this.serialNumber, certificateAttributes.serialNumber) &&
        Objects.equals(this.subject, certificateAttributes.subject) &&
        Objects.equals(this.thumbprint, certificateAttributes.thumbprint) &&
        Objects.equals(this.validationState, certificateAttributes.validationState) &&
        Objects.equals(this.validityExpirationTime, certificateAttributes.validityExpirationTime) &&
        Objects.equals(this.validityStartTime, certificateAttributes.validityStartTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateTemplate, fingerprint, issuer, serialNumber, subject, thumbprint, validationState, validityExpirationTime, validityStartTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateAttributes {\n");
    sb.append("    certificateTemplate: ").append(toIndentedString(certificateTemplate)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    thumbprint: ").append(toIndentedString(thumbprint)).append("\n");
    sb.append("    validationState: ").append(toIndentedString(validationState)).append("\n");
    sb.append("    validityExpirationTime: ").append(toIndentedString(validityExpirationTime)).append("\n");
    sb.append("    validityStartTime: ").append(toIndentedString(validityStartTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certificateTemplate");
    openapiFields.add("fingerprint");
    openapiFields.add("issuer");
    openapiFields.add("serialNumber");
    openapiFields.add("subject");
    openapiFields.add("thumbprint");
    openapiFields.add("validationState");
    openapiFields.add("validityExpirationTime");
    openapiFields.add("validityStartTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateAttributes is not found in the empty JSON string", CertificateAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `certificateTemplate`
      if (jsonObj.get("certificateTemplate") != null && !jsonObj.get("certificateTemplate").isJsonNull()) {
        CertificateTemplate.validateJsonElement(jsonObj.get("certificateTemplate"));
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if ((jsonObj.get("serialNumber") != null && !jsonObj.get("serialNumber").isJsonNull()) && !jsonObj.get("serialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serialNumber").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("thumbprint") != null && !jsonObj.get("thumbprint").isJsonNull()) && !jsonObj.get("thumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbprint").toString()));
      }
      if ((jsonObj.get("validationState") != null && !jsonObj.get("validationState").isJsonNull()) && !jsonObj.get("validationState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validationState").toString()));
      }
      // validate the optional field `validationState`
      if (jsonObj.get("validationState") != null && !jsonObj.get("validationState").isJsonNull()) {
        ValidationStateEnum.validateJsonElement(jsonObj.get("validationState"));
      }
      if ((jsonObj.get("validityExpirationTime") != null && !jsonObj.get("validityExpirationTime").isJsonNull()) && !jsonObj.get("validityExpirationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validityExpirationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validityExpirationTime").toString()));
      }
      if ((jsonObj.get("validityStartTime") != null && !jsonObj.get("validityStartTime").isJsonNull()) && !jsonObj.get("validityStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validityStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validityStartTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateAttributes>() {
           @Override
           public void write(JsonWriter out, CertificateAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateAttributes
   * @throws IOException if the JSON string is invalid with respect to CertificateAttributes
   */
  public static CertificateAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateAttributes.class);
  }

  /**
   * Convert an instance of CertificateAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

