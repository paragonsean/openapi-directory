/*
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CustomAttributeValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the state associated with an API client calling the Devices API. Resource representing ClientState and supports updates from API users
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:30.727531-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClientState {
  public static final String SERIALIZED_NAME_ASSET_TAGS = "assetTags";
  @SerializedName(SERIALIZED_NAME_ASSET_TAGS)
  private List<String> assetTags = new ArrayList<>();

  /**
   * The compliance state of the resource as specified by the API client.
   */
  @JsonAdapter(ComplianceStateEnum.Adapter.class)
  public enum ComplianceStateEnum {
    COMPLIANCE_STATE_UNSPECIFIED("COMPLIANCE_STATE_UNSPECIFIED"),
    
    COMPLIANT("COMPLIANT"),
    
    NON_COMPLIANT("NON_COMPLIANT");

    private String value;

    ComplianceStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComplianceStateEnum fromValue(String value) {
      for (ComplianceStateEnum b : ComplianceStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComplianceStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComplianceStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComplianceStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComplianceStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ComplianceStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPLIANCE_STATE = "complianceState";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE_STATE)
  private ComplianceStateEnum complianceState;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CUSTOM_ID = "customId";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ID)
  private String customId;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  /**
   * The Health score of the resource
   */
  @JsonAdapter(HealthScoreEnum.Adapter.class)
  public enum HealthScoreEnum {
    HEALTH_SCORE_UNSPECIFIED("HEALTH_SCORE_UNSPECIFIED"),
    
    VERY_POOR("VERY_POOR"),
    
    POOR("POOR"),
    
    NEUTRAL("NEUTRAL"),
    
    GOOD("GOOD"),
    
    VERY_GOOD("VERY_GOOD");

    private String value;

    HealthScoreEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HealthScoreEnum fromValue(String value) {
      for (HealthScoreEnum b : HealthScoreEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HealthScoreEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HealthScoreEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HealthScoreEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HealthScoreEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HealthScoreEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HEALTH_SCORE = "healthScore";
  @SerializedName(SERIALIZED_NAME_HEALTH_SCORE)
  private HealthScoreEnum healthScore;

  public static final String SERIALIZED_NAME_KEY_VALUE_PAIRS = "keyValuePairs";
  @SerializedName(SERIALIZED_NAME_KEY_VALUE_PAIRS)
  private Map<String, CustomAttributeValue> keyValuePairs = new HashMap<>();

  public static final String SERIALIZED_NAME_LAST_UPDATE_TIME = "lastUpdateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TIME)
  private String lastUpdateTime;

  /**
   * The management state of the resource as specified by the API client.
   */
  @JsonAdapter(ManagedEnum.Adapter.class)
  public enum ManagedEnum {
    MANAGED_STATE_UNSPECIFIED("MANAGED_STATE_UNSPECIFIED"),
    
    MANAGED("MANAGED"),
    
    UNMANAGED("UNMANAGED");

    private String value;

    ManagedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ManagedEnum fromValue(String value) {
      for (ManagedEnum b : ManagedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ManagedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ManagedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ManagedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ManagedEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ManagedEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MANAGED = "managed";
  @SerializedName(SERIALIZED_NAME_MANAGED)
  private ManagedEnum managed;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Output only. The owner of the ClientState
   */
  @JsonAdapter(OwnerTypeEnum.Adapter.class)
  public enum OwnerTypeEnum {
    UNSPECIFIED("OWNER_TYPE_UNSPECIFIED"),
    
    CUSTOMER("OWNER_TYPE_CUSTOMER"),
    
    PARTNER("OWNER_TYPE_PARTNER");

    private String value;

    OwnerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OwnerTypeEnum fromValue(String value) {
      for (OwnerTypeEnum b : OwnerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OwnerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OwnerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OwnerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OwnerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OwnerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OWNER_TYPE = "ownerType";
  @SerializedName(SERIALIZED_NAME_OWNER_TYPE)
  private OwnerTypeEnum ownerType;

  public static final String SERIALIZED_NAME_SCORE_REASON = "scoreReason";
  @SerializedName(SERIALIZED_NAME_SCORE_REASON)
  private String scoreReason;

  public ClientState() {
  }

  public ClientState(
     String createTime, 
     String lastUpdateTime, 
     String name, 
     OwnerTypeEnum ownerType
  ) {
    this();
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
    this.name = name;
    this.ownerType = ownerType;
  }

  public ClientState assetTags(List<String> assetTags) {
    this.assetTags = assetTags;
    return this;
  }

  public ClientState addAssetTagsItem(String assetTagsItem) {
    if (this.assetTags == null) {
      this.assetTags = new ArrayList<>();
    }
    this.assetTags.add(assetTagsItem);
    return this;
  }

  /**
   * The caller can specify asset tags for this resource
   * @return assetTags
   */
  @javax.annotation.Nullable
  public List<String> getAssetTags() {
    return assetTags;
  }

  public void setAssetTags(List<String> assetTags) {
    this.assetTags = assetTags;
  }


  public ClientState complianceState(ComplianceStateEnum complianceState) {
    this.complianceState = complianceState;
    return this;
  }

  /**
   * The compliance state of the resource as specified by the API client.
   * @return complianceState
   */
  @javax.annotation.Nullable
  public ComplianceStateEnum getComplianceState() {
    return complianceState;
  }

  public void setComplianceState(ComplianceStateEnum complianceState) {
    this.complianceState = complianceState;
  }


  /**
   * Output only. The time the client state data was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public ClientState customId(String customId) {
    this.customId = customId;
    return this;
  }

  /**
   * This field may be used to store a unique identifier for the API resource within which these CustomAttributes are a field.
   * @return customId
   */
  @javax.annotation.Nullable
  public String getCustomId() {
    return customId;
  }

  public void setCustomId(String customId) {
    this.customId = customId;
  }


  public ClientState etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * The token that needs to be passed back for concurrency control in updates. Token needs to be passed back in UpdateRequest
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public ClientState healthScore(HealthScoreEnum healthScore) {
    this.healthScore = healthScore;
    return this;
  }

  /**
   * The Health score of the resource
   * @return healthScore
   */
  @javax.annotation.Nullable
  public HealthScoreEnum getHealthScore() {
    return healthScore;
  }

  public void setHealthScore(HealthScoreEnum healthScore) {
    this.healthScore = healthScore;
  }


  public ClientState keyValuePairs(Map<String, CustomAttributeValue> keyValuePairs) {
    this.keyValuePairs = keyValuePairs;
    return this;
  }

  public ClientState putKeyValuePairsItem(String key, CustomAttributeValue keyValuePairsItem) {
    if (this.keyValuePairs == null) {
      this.keyValuePairs = new HashMap<>();
    }
    this.keyValuePairs.put(key, keyValuePairsItem);
    return this;
  }

  /**
   * The map of key-value attributes stored by callers specific to a device. The total serialized length of this map may not exceed 10KB. No limit is placed on the number of attributes in a map.
   * @return keyValuePairs
   */
  @javax.annotation.Nullable
  public Map<String, CustomAttributeValue> getKeyValuePairs() {
    return keyValuePairs;
  }

  public void setKeyValuePairs(Map<String, CustomAttributeValue> keyValuePairs) {
    this.keyValuePairs = keyValuePairs;
  }


  /**
   * Output only. The time the client state data was last updated.
   * @return lastUpdateTime
   */
  @javax.annotation.Nullable
  public String getLastUpdateTime() {
    return lastUpdateTime;
  }



  public ClientState managed(ManagedEnum managed) {
    this.managed = managed;
    return this;
  }

  /**
   * The management state of the resource as specified by the API client.
   * @return managed
   */
  @javax.annotation.Nullable
  public ManagedEnum getManaged() {
    return managed;
  }

  public void setManaged(ManagedEnum managed) {
    this.managed = managed;
  }


  /**
   * Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the ClientState in format: &#x60;devices/{device_id}/deviceUsers/{device_user_id}/clientState/{partner_id}&#x60;, where partner_id corresponds to the partner storing the data.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. The owner of the ClientState
   * @return ownerType
   */
  @javax.annotation.Nullable
  public OwnerTypeEnum getOwnerType() {
    return ownerType;
  }



  public ClientState scoreReason(String scoreReason) {
    this.scoreReason = scoreReason;
    return this;
  }

  /**
   * A descriptive cause of the health score.
   * @return scoreReason
   */
  @javax.annotation.Nullable
  public String getScoreReason() {
    return scoreReason;
  }

  public void setScoreReason(String scoreReason) {
    this.scoreReason = scoreReason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientState clientState = (ClientState) o;
    return Objects.equals(this.assetTags, clientState.assetTags) &&
        Objects.equals(this.complianceState, clientState.complianceState) &&
        Objects.equals(this.createTime, clientState.createTime) &&
        Objects.equals(this.customId, clientState.customId) &&
        Objects.equals(this.etag, clientState.etag) &&
        Objects.equals(this.healthScore, clientState.healthScore) &&
        Objects.equals(this.keyValuePairs, clientState.keyValuePairs) &&
        Objects.equals(this.lastUpdateTime, clientState.lastUpdateTime) &&
        Objects.equals(this.managed, clientState.managed) &&
        Objects.equals(this.name, clientState.name) &&
        Objects.equals(this.ownerType, clientState.ownerType) &&
        Objects.equals(this.scoreReason, clientState.scoreReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetTags, complianceState, createTime, customId, etag, healthScore, keyValuePairs, lastUpdateTime, managed, name, ownerType, scoreReason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientState {\n");
    sb.append("    assetTags: ").append(toIndentedString(assetTags)).append("\n");
    sb.append("    complianceState: ").append(toIndentedString(complianceState)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    customId: ").append(toIndentedString(customId)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    healthScore: ").append(toIndentedString(healthScore)).append("\n");
    sb.append("    keyValuePairs: ").append(toIndentedString(keyValuePairs)).append("\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("    managed: ").append(toIndentedString(managed)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ownerType: ").append(toIndentedString(ownerType)).append("\n");
    sb.append("    scoreReason: ").append(toIndentedString(scoreReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assetTags");
    openapiFields.add("complianceState");
    openapiFields.add("createTime");
    openapiFields.add("customId");
    openapiFields.add("etag");
    openapiFields.add("healthScore");
    openapiFields.add("keyValuePairs");
    openapiFields.add("lastUpdateTime");
    openapiFields.add("managed");
    openapiFields.add("name");
    openapiFields.add("ownerType");
    openapiFields.add("scoreReason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClientState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClientState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClientState is not found in the empty JSON string", ClientState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClientState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClientState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("assetTags") != null && !jsonObj.get("assetTags").isJsonNull() && !jsonObj.get("assetTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetTags` to be an array in the JSON string but got `%s`", jsonObj.get("assetTags").toString()));
      }
      if ((jsonObj.get("complianceState") != null && !jsonObj.get("complianceState").isJsonNull()) && !jsonObj.get("complianceState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complianceState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complianceState").toString()));
      }
      // validate the optional field `complianceState`
      if (jsonObj.get("complianceState") != null && !jsonObj.get("complianceState").isJsonNull()) {
        ComplianceStateEnum.validateJsonElement(jsonObj.get("complianceState"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("customId") != null && !jsonObj.get("customId").isJsonNull()) && !jsonObj.get("customId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customId").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("healthScore") != null && !jsonObj.get("healthScore").isJsonNull()) && !jsonObj.get("healthScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthScore").toString()));
      }
      // validate the optional field `healthScore`
      if (jsonObj.get("healthScore") != null && !jsonObj.get("healthScore").isJsonNull()) {
        HealthScoreEnum.validateJsonElement(jsonObj.get("healthScore"));
      }
      if ((jsonObj.get("lastUpdateTime") != null && !jsonObj.get("lastUpdateTime").isJsonNull()) && !jsonObj.get("lastUpdateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdateTime").toString()));
      }
      if ((jsonObj.get("managed") != null && !jsonObj.get("managed").isJsonNull()) && !jsonObj.get("managed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managed").toString()));
      }
      // validate the optional field `managed`
      if (jsonObj.get("managed") != null && !jsonObj.get("managed").isJsonNull()) {
        ManagedEnum.validateJsonElement(jsonObj.get("managed"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ownerType") != null && !jsonObj.get("ownerType").isJsonNull()) && !jsonObj.get("ownerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerType").toString()));
      }
      // validate the optional field `ownerType`
      if (jsonObj.get("ownerType") != null && !jsonObj.get("ownerType").isJsonNull()) {
        OwnerTypeEnum.validateJsonElement(jsonObj.get("ownerType"));
      }
      if ((jsonObj.get("scoreReason") != null && !jsonObj.get("scoreReason").isJsonNull()) && !jsonObj.get("scoreReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scoreReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scoreReason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientState.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientState>() {
           @Override
           public void write(JsonWriter out, ClientState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClientState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClientState
   * @throws IOException if the JSON string is invalid with respect to ClientState
   */
  public static ClientState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientState.class);
  }

  /**
   * Convert an instance of ClientState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

