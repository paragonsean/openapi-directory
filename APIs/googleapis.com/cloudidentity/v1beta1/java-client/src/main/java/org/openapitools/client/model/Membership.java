/*
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EntityKey;
import org.openapitools.client.model.MembershipRole;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A membership within the Cloud Identity Groups API. A &#x60;Membership&#x60; defines a relationship between a &#x60;Group&#x60; and an entity belonging to that &#x60;Group&#x60;, referred to as a \&quot;member\&quot;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:30.727531-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Membership {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  /**
   * Output only. Delivery setting associated with the membership.
   */
  @JsonAdapter(DeliverySettingEnum.Adapter.class)
  public enum DeliverySettingEnum {
    DELIVERY_SETTING_UNSPECIFIED("DELIVERY_SETTING_UNSPECIFIED"),
    
    ALL_MAIL("ALL_MAIL"),
    
    DIGEST("DIGEST"),
    
    DAILY("DAILY"),
    
    NONE("NONE"),
    
    DISABLED("DISABLED");

    private String value;

    DeliverySettingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliverySettingEnum fromValue(String value) {
      for (DeliverySettingEnum b : DeliverySettingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeliverySettingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliverySettingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliverySettingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeliverySettingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeliverySettingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DELIVERY_SETTING = "deliverySetting";
  @SerializedName(SERIALIZED_NAME_DELIVERY_SETTING)
  private DeliverySettingEnum deliverySetting;

  public static final String SERIALIZED_NAME_MEMBER_KEY = "memberKey";
  @SerializedName(SERIALIZED_NAME_MEMBER_KEY)
  private EntityKey memberKey;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREFERRED_MEMBER_KEY = "preferredMemberKey";
  @SerializedName(SERIALIZED_NAME_PREFERRED_MEMBER_KEY)
  private EntityKey preferredMemberKey;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<MembershipRole> roles = new ArrayList<>();

  /**
   * Output only. The type of the membership.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    USER("USER"),
    
    SERVICE_ACCOUNT("SERVICE_ACCOUNT"),
    
    GROUP("GROUP"),
    
    SHARED_DRIVE("SHARED_DRIVE"),
    
    OTHER("OTHER");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Membership() {
  }

  public Membership(
     String createTime, 
     DeliverySettingEnum deliverySetting, 
     String name, 
     TypeEnum type, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.deliverySetting = deliverySetting;
    this.name = name;
    this.type = type;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The time when the &#x60;Membership&#x60; was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. Delivery setting associated with the membership.
   * @return deliverySetting
   */
  @javax.annotation.Nullable
  public DeliverySettingEnum getDeliverySetting() {
    return deliverySetting;
  }



  public Membership memberKey(EntityKey memberKey) {
    this.memberKey = memberKey;
    return this;
  }

  /**
   * Get memberKey
   * @return memberKey
   */
  @javax.annotation.Nullable
  public EntityKey getMemberKey() {
    return memberKey;
  }

  public void setMemberKey(EntityKey memberKey) {
    this.memberKey = memberKey;
  }


  /**
   * Output only. The [resource name](https://cloud.google.com/apis/design/resource_names) of the &#x60;Membership&#x60;. Shall be of the form &#x60;groups/{group_id}/memberships/{membership_id}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Membership preferredMemberKey(EntityKey preferredMemberKey) {
    this.preferredMemberKey = preferredMemberKey;
    return this;
  }

  /**
   * Get preferredMemberKey
   * @return preferredMemberKey
   */
  @javax.annotation.Nullable
  public EntityKey getPreferredMemberKey() {
    return preferredMemberKey;
  }

  public void setPreferredMemberKey(EntityKey preferredMemberKey) {
    this.preferredMemberKey = preferredMemberKey;
  }


  public Membership roles(List<MembershipRole> roles) {
    this.roles = roles;
    return this;
  }

  public Membership addRolesItem(MembershipRole rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * The &#x60;MembershipRole&#x60;s that apply to the &#x60;Membership&#x60;. If unspecified, defaults to a single &#x60;MembershipRole&#x60; with &#x60;name&#x60; &#x60;MEMBER&#x60;. Must not contain duplicate &#x60;MembershipRole&#x60;s with the same &#x60;name&#x60;.
   * @return roles
   */
  @javax.annotation.Nullable
  public List<MembershipRole> getRoles() {
    return roles;
  }

  public void setRoles(List<MembershipRole> roles) {
    this.roles = roles;
  }


  /**
   * Output only. The type of the membership.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }



  /**
   * Output only. The time when the &#x60;Membership&#x60; was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Membership membership = (Membership) o;
    return Objects.equals(this.createTime, membership.createTime) &&
        Objects.equals(this.deliverySetting, membership.deliverySetting) &&
        Objects.equals(this.memberKey, membership.memberKey) &&
        Objects.equals(this.name, membership.name) &&
        Objects.equals(this.preferredMemberKey, membership.preferredMemberKey) &&
        Objects.equals(this.roles, membership.roles) &&
        Objects.equals(this.type, membership.type) &&
        Objects.equals(this.updateTime, membership.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, deliverySetting, memberKey, name, preferredMemberKey, roles, type, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Membership {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    deliverySetting: ").append(toIndentedString(deliverySetting)).append("\n");
    sb.append("    memberKey: ").append(toIndentedString(memberKey)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    preferredMemberKey: ").append(toIndentedString(preferredMemberKey)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("deliverySetting");
    openapiFields.add("memberKey");
    openapiFields.add("name");
    openapiFields.add("preferredMemberKey");
    openapiFields.add("roles");
    openapiFields.add("type");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Membership
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Membership.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Membership is not found in the empty JSON string", Membership.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Membership.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Membership` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("deliverySetting") != null && !jsonObj.get("deliverySetting").isJsonNull()) && !jsonObj.get("deliverySetting").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliverySetting` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliverySetting").toString()));
      }
      // validate the optional field `deliverySetting`
      if (jsonObj.get("deliverySetting") != null && !jsonObj.get("deliverySetting").isJsonNull()) {
        DeliverySettingEnum.validateJsonElement(jsonObj.get("deliverySetting"));
      }
      // validate the optional field `memberKey`
      if (jsonObj.get("memberKey") != null && !jsonObj.get("memberKey").isJsonNull()) {
        EntityKey.validateJsonElement(jsonObj.get("memberKey"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `preferredMemberKey`
      if (jsonObj.get("preferredMemberKey") != null && !jsonObj.get("preferredMemberKey").isJsonNull()) {
        EntityKey.validateJsonElement(jsonObj.get("preferredMemberKey"));
      }
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull()) {
        JsonArray jsonArrayroles = jsonObj.getAsJsonArray("roles");
        if (jsonArrayroles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
          }

          // validate the optional field `roles` (array)
          for (int i = 0; i < jsonArrayroles.size(); i++) {
            MembershipRole.validateJsonElement(jsonArrayroles.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Membership.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Membership' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Membership> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Membership.class));

       return (TypeAdapter<T>) new TypeAdapter<Membership>() {
           @Override
           public void write(JsonWriter out, Membership value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Membership read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Membership given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Membership
   * @throws IOException if the JSON string is invalid with respect to Membership
   */
  public static Membership fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Membership.class);
  }

  /**
   * Convert an instance of Membership to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

