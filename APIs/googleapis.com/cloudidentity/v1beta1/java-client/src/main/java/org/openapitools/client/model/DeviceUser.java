/*
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a user&#39;s use of a Device in the Cloud Identity Devices API. A DeviceUser is a resource representing a user&#39;s use of a Device
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:30.727531-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceUser {
  /**
   * Compromised State of the DeviceUser object
   */
  @JsonAdapter(CompromisedStateEnum.Adapter.class)
  public enum CompromisedStateEnum {
    COMPROMISED_STATE_UNSPECIFIED("COMPROMISED_STATE_UNSPECIFIED"),
    
    COMPROMISED("COMPROMISED"),
    
    NOT_COMPROMISED("NOT_COMPROMISED");

    private String value;

    CompromisedStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompromisedStateEnum fromValue(String value) {
      for (CompromisedStateEnum b : CompromisedStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CompromisedStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompromisedStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompromisedStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CompromisedStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CompromisedStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPROMISED_STATE = "compromisedState";
  @SerializedName(SERIALIZED_NAME_COMPROMISED_STATE)
  private CompromisedStateEnum compromisedState;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_FIRST_SYNC_TIME = "firstSyncTime";
  @SerializedName(SERIALIZED_NAME_FIRST_SYNC_TIME)
  private String firstSyncTime;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_LAST_SYNC_TIME = "lastSyncTime";
  @SerializedName(SERIALIZED_NAME_LAST_SYNC_TIME)
  private String lastSyncTime;

  /**
   * Output only. Management state of the user on the device.
   */
  @JsonAdapter(ManagementStateEnum.Adapter.class)
  public enum ManagementStateEnum {
    MANAGEMENT_STATE_UNSPECIFIED("MANAGEMENT_STATE_UNSPECIFIED"),
    
    WIPING("WIPING"),
    
    WIPED("WIPED"),
    
    APPROVED("APPROVED"),
    
    BLOCKED("BLOCKED"),
    
    PENDING_APPROVAL("PENDING_APPROVAL"),
    
    UNENROLLED("UNENROLLED");

    private String value;

    ManagementStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ManagementStateEnum fromValue(String value) {
      for (ManagementStateEnum b : ManagementStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ManagementStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ManagementStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ManagementStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ManagementStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ManagementStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MANAGEMENT_STATE = "managementState";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT_STATE)
  private ManagementStateEnum managementState;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Password state of the DeviceUser object
   */
  @JsonAdapter(PasswordStateEnum.Adapter.class)
  public enum PasswordStateEnum {
    STATE_UNSPECIFIED("PASSWORD_STATE_UNSPECIFIED"),
    
    SET("PASSWORD_SET"),
    
    NOT_SET("PASSWORD_NOT_SET");

    private String value;

    PasswordStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PasswordStateEnum fromValue(String value) {
      for (PasswordStateEnum b : PasswordStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PasswordStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PasswordStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PasswordStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PasswordStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PasswordStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PASSWORD_STATE = "passwordState";
  @SerializedName(SERIALIZED_NAME_PASSWORD_STATE)
  private PasswordStateEnum passwordState;

  public static final String SERIALIZED_NAME_USER_AGENT = "userAgent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private String userAgent;

  public static final String SERIALIZED_NAME_USER_EMAIL = "userEmail";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public DeviceUser() {
  }

  public DeviceUser(
     String firstSyncTime, 
     String languageCode, 
     String lastSyncTime, 
     ManagementStateEnum managementState, 
     String name, 
     String userAgent
  ) {
    this();
    this.firstSyncTime = firstSyncTime;
    this.languageCode = languageCode;
    this.lastSyncTime = lastSyncTime;
    this.managementState = managementState;
    this.name = name;
    this.userAgent = userAgent;
  }

  public DeviceUser compromisedState(CompromisedStateEnum compromisedState) {
    this.compromisedState = compromisedState;
    return this;
  }

  /**
   * Compromised State of the DeviceUser object
   * @return compromisedState
   */
  @javax.annotation.Nullable
  public CompromisedStateEnum getCompromisedState() {
    return compromisedState;
  }

  public void setCompromisedState(CompromisedStateEnum compromisedState) {
    this.compromisedState = compromisedState;
  }


  public DeviceUser createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * When the user first signed in to the device
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  /**
   * Output only. Most recent time when user registered with this service.
   * @return firstSyncTime
   */
  @javax.annotation.Nullable
  public String getFirstSyncTime() {
    return firstSyncTime;
  }



  /**
   * Output only. Default locale used on device, in IETF BCP-47 format.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }



  /**
   * Output only. Last time when user synced with policies.
   * @return lastSyncTime
   */
  @javax.annotation.Nullable
  public String getLastSyncTime() {
    return lastSyncTime;
  }



  /**
   * Output only. Management state of the user on the device.
   * @return managementState
   */
  @javax.annotation.Nullable
  public ManagementStateEnum getManagementState() {
    return managementState;
  }



  /**
   * Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the DeviceUser in format: &#x60;devices/{device_id}/deviceUsers/{device_user_id}&#x60;, where &#x60;device_user_id&#x60; uniquely identifies a user&#39;s use of a device.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public DeviceUser passwordState(PasswordStateEnum passwordState) {
    this.passwordState = passwordState;
    return this;
  }

  /**
   * Password state of the DeviceUser object
   * @return passwordState
   */
  @javax.annotation.Nullable
  public PasswordStateEnum getPasswordState() {
    return passwordState;
  }

  public void setPasswordState(PasswordStateEnum passwordState) {
    this.passwordState = passwordState;
  }


  /**
   * Output only. User agent on the device for this specific user
   * @return userAgent
   */
  @javax.annotation.Nullable
  public String getUserAgent() {
    return userAgent;
  }



  public DeviceUser userEmail(String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

  /**
   * Email address of the user registered on the device.
   * @return userEmail
   */
  @javax.annotation.Nullable
  public String getUserEmail() {
    return userEmail;
  }

  public void setUserEmail(String userEmail) {
    this.userEmail = userEmail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceUser deviceUser = (DeviceUser) o;
    return Objects.equals(this.compromisedState, deviceUser.compromisedState) &&
        Objects.equals(this.createTime, deviceUser.createTime) &&
        Objects.equals(this.firstSyncTime, deviceUser.firstSyncTime) &&
        Objects.equals(this.languageCode, deviceUser.languageCode) &&
        Objects.equals(this.lastSyncTime, deviceUser.lastSyncTime) &&
        Objects.equals(this.managementState, deviceUser.managementState) &&
        Objects.equals(this.name, deviceUser.name) &&
        Objects.equals(this.passwordState, deviceUser.passwordState) &&
        Objects.equals(this.userAgent, deviceUser.userAgent) &&
        Objects.equals(this.userEmail, deviceUser.userEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compromisedState, createTime, firstSyncTime, languageCode, lastSyncTime, managementState, name, passwordState, userAgent, userEmail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceUser {\n");
    sb.append("    compromisedState: ").append(toIndentedString(compromisedState)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    firstSyncTime: ").append(toIndentedString(firstSyncTime)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    lastSyncTime: ").append(toIndentedString(lastSyncTime)).append("\n");
    sb.append("    managementState: ").append(toIndentedString(managementState)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    passwordState: ").append(toIndentedString(passwordState)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("compromisedState");
    openapiFields.add("createTime");
    openapiFields.add("firstSyncTime");
    openapiFields.add("languageCode");
    openapiFields.add("lastSyncTime");
    openapiFields.add("managementState");
    openapiFields.add("name");
    openapiFields.add("passwordState");
    openapiFields.add("userAgent");
    openapiFields.add("userEmail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceUser
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceUser is not found in the empty JSON string", DeviceUser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceUser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("compromisedState") != null && !jsonObj.get("compromisedState").isJsonNull()) && !jsonObj.get("compromisedState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compromisedState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compromisedState").toString()));
      }
      // validate the optional field `compromisedState`
      if (jsonObj.get("compromisedState") != null && !jsonObj.get("compromisedState").isJsonNull()) {
        CompromisedStateEnum.validateJsonElement(jsonObj.get("compromisedState"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("firstSyncTime") != null && !jsonObj.get("firstSyncTime").isJsonNull()) && !jsonObj.get("firstSyncTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstSyncTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstSyncTime").toString()));
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      if ((jsonObj.get("lastSyncTime") != null && !jsonObj.get("lastSyncTime").isJsonNull()) && !jsonObj.get("lastSyncTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastSyncTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastSyncTime").toString()));
      }
      if ((jsonObj.get("managementState") != null && !jsonObj.get("managementState").isJsonNull()) && !jsonObj.get("managementState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managementState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managementState").toString()));
      }
      // validate the optional field `managementState`
      if (jsonObj.get("managementState") != null && !jsonObj.get("managementState").isJsonNull()) {
        ManagementStateEnum.validateJsonElement(jsonObj.get("managementState"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("passwordState") != null && !jsonObj.get("passwordState").isJsonNull()) && !jsonObj.get("passwordState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passwordState").toString()));
      }
      // validate the optional field `passwordState`
      if (jsonObj.get("passwordState") != null && !jsonObj.get("passwordState").isJsonNull()) {
        PasswordStateEnum.validateJsonElement(jsonObj.get("passwordState"));
      }
      if ((jsonObj.get("userAgent") != null && !jsonObj.get("userAgent").isJsonNull()) && !jsonObj.get("userAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userAgent").toString()));
      }
      if ((jsonObj.get("userEmail") != null && !jsonObj.get("userEmail").isJsonNull()) && !jsonObj.get("userEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userEmail").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceUser.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceUser>() {
           @Override
           public void write(JsonWriter out, DeviceUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceUser given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceUser
   * @throws IOException if the JSON string is invalid with respect to DeviceUser
   */
  public static DeviceUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceUser.class);
  }

  /**
   * Convert an instance of DeviceUser to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

