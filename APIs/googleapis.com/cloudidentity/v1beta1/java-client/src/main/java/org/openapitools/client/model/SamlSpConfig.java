/*
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SAML SP (service provider) configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:30.727531-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SamlSpConfig {
  public static final String SERIALIZED_NAME_ASSERTION_CONSUMER_SERVICE_URI = "assertionConsumerServiceUri";
  @SerializedName(SERIALIZED_NAME_ASSERTION_CONSUMER_SERVICE_URI)
  private String assertionConsumerServiceUri;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public SamlSpConfig() {
  }

  public SamlSpConfig(
     String assertionConsumerServiceUri, 
     String entityId
  ) {
    this();
    this.assertionConsumerServiceUri = assertionConsumerServiceUri;
    this.entityId = entityId;
  }

  /**
   * Output only. The SAML **Assertion Consumer Service (ACS) URL** to be used for the IDP-initiated login. Assumed to accept response messages via the &#x60;HTTP-POST&#x60; binding.
   * @return assertionConsumerServiceUri
   */
  @javax.annotation.Nullable
  public String getAssertionConsumerServiceUri() {
    return assertionConsumerServiceUri;
  }



  /**
   * Output only. The SAML **Entity ID** for this service provider.
   * @return entityId
   */
  @javax.annotation.Nullable
  public String getEntityId() {
    return entityId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SamlSpConfig samlSpConfig = (SamlSpConfig) o;
    return Objects.equals(this.assertionConsumerServiceUri, samlSpConfig.assertionConsumerServiceUri) &&
        Objects.equals(this.entityId, samlSpConfig.entityId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assertionConsumerServiceUri, entityId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SamlSpConfig {\n");
    sb.append("    assertionConsumerServiceUri: ").append(toIndentedString(assertionConsumerServiceUri)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assertionConsumerServiceUri");
    openapiFields.add("entityId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SamlSpConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SamlSpConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SamlSpConfig is not found in the empty JSON string", SamlSpConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SamlSpConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SamlSpConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("assertionConsumerServiceUri") != null && !jsonObj.get("assertionConsumerServiceUri").isJsonNull()) && !jsonObj.get("assertionConsumerServiceUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assertionConsumerServiceUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assertionConsumerServiceUri").toString()));
      }
      if ((jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SamlSpConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SamlSpConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SamlSpConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SamlSpConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<SamlSpConfig>() {
           @Override
           public void write(JsonWriter out, SamlSpConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SamlSpConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SamlSpConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SamlSpConfig
   * @throws IOException if the JSON string is invalid with respect to SamlSpConfig
   */
  public static SamlSpConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SamlSpConfig.class);
  }

  /**
   * Convert an instance of SamlSpConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

