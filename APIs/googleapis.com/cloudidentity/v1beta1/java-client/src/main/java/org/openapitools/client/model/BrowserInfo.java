/*
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Browser-specific fields reported by the Endpoint Verification extension. LINT.IfChange
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:30.727531-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BrowserInfo {
  /**
   * Output only. Browser&#39;s management state.
   */
  @JsonAdapter(BrowserManagementStateEnum.Adapter.class)
  public enum BrowserManagementStateEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    UNMANAGED("UNMANAGED"),
    
    MANAGED_BY_OTHER_DOMAIN("MANAGED_BY_OTHER_DOMAIN"),
    
    PROFILE_MANAGED("PROFILE_MANAGED"),
    
    BROWSER_MANAGED("BROWSER_MANAGED");

    private String value;

    BrowserManagementStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BrowserManagementStateEnum fromValue(String value) {
      for (BrowserManagementStateEnum b : BrowserManagementStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BrowserManagementStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BrowserManagementStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BrowserManagementStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BrowserManagementStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BrowserManagementStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BROWSER_MANAGEMENT_STATE = "browserManagementState";
  @SerializedName(SERIALIZED_NAME_BROWSER_MANAGEMENT_STATE)
  private BrowserManagementStateEnum browserManagementState;

  public static final String SERIALIZED_NAME_BROWSER_VERSION = "browserVersion";
  @SerializedName(SERIALIZED_NAME_BROWSER_VERSION)
  private String browserVersion;

  public static final String SERIALIZED_NAME_IS_BUILT_IN_DNS_CLIENT_ENABLED = "isBuiltInDnsClientEnabled";
  @SerializedName(SERIALIZED_NAME_IS_BUILT_IN_DNS_CLIENT_ENABLED)
  private Boolean isBuiltInDnsClientEnabled;

  public static final String SERIALIZED_NAME_IS_BULK_DATA_ENTRY_ANALYSIS_ENABLED = "isBulkDataEntryAnalysisEnabled";
  @SerializedName(SERIALIZED_NAME_IS_BULK_DATA_ENTRY_ANALYSIS_ENABLED)
  private Boolean isBulkDataEntryAnalysisEnabled;

  public static final String SERIALIZED_NAME_IS_CHROME_CLEANUP_ENABLED = "isChromeCleanupEnabled";
  @SerializedName(SERIALIZED_NAME_IS_CHROME_CLEANUP_ENABLED)
  private Boolean isChromeCleanupEnabled;

  public static final String SERIALIZED_NAME_IS_CHROME_REMOTE_DESKTOP_APP_BLOCKED = "isChromeRemoteDesktopAppBlocked";
  @SerializedName(SERIALIZED_NAME_IS_CHROME_REMOTE_DESKTOP_APP_BLOCKED)
  private Boolean isChromeRemoteDesktopAppBlocked;

  public static final String SERIALIZED_NAME_IS_FILE_DOWNLOAD_ANALYSIS_ENABLED = "isFileDownloadAnalysisEnabled";
  @SerializedName(SERIALIZED_NAME_IS_FILE_DOWNLOAD_ANALYSIS_ENABLED)
  private Boolean isFileDownloadAnalysisEnabled;

  public static final String SERIALIZED_NAME_IS_FILE_UPLOAD_ANALYSIS_ENABLED = "isFileUploadAnalysisEnabled";
  @SerializedName(SERIALIZED_NAME_IS_FILE_UPLOAD_ANALYSIS_ENABLED)
  private Boolean isFileUploadAnalysisEnabled;

  public static final String SERIALIZED_NAME_IS_REALTIME_URL_CHECK_ENABLED = "isRealtimeUrlCheckEnabled";
  @SerializedName(SERIALIZED_NAME_IS_REALTIME_URL_CHECK_ENABLED)
  private Boolean isRealtimeUrlCheckEnabled;

  public static final String SERIALIZED_NAME_IS_SECURITY_EVENT_ANALYSIS_ENABLED = "isSecurityEventAnalysisEnabled";
  @SerializedName(SERIALIZED_NAME_IS_SECURITY_EVENT_ANALYSIS_ENABLED)
  private Boolean isSecurityEventAnalysisEnabled;

  public static final String SERIALIZED_NAME_IS_SITE_ISOLATION_ENABLED = "isSiteIsolationEnabled";
  @SerializedName(SERIALIZED_NAME_IS_SITE_ISOLATION_ENABLED)
  private Boolean isSiteIsolationEnabled;

  public static final String SERIALIZED_NAME_IS_THIRD_PARTY_BLOCKING_ENABLED = "isThirdPartyBlockingEnabled";
  @SerializedName(SERIALIZED_NAME_IS_THIRD_PARTY_BLOCKING_ENABLED)
  private Boolean isThirdPartyBlockingEnabled;

  /**
   * Current state of [password protection trigger](https://chromeenterprise.google/policies/#PasswordProtectionWarningTrigger).
   */
  @JsonAdapter(PasswordProtectionWarningTriggerEnum.Adapter.class)
  public enum PasswordProtectionWarningTriggerEnum {
    PASSWORD_PROTECTION_TRIGGER_UNSPECIFIED("PASSWORD_PROTECTION_TRIGGER_UNSPECIFIED"),
    
    PROTECTION_OFF("PROTECTION_OFF"),
    
    PASSWORD_REUSE("PASSWORD_REUSE"),
    
    PHISHING_REUSE("PHISHING_REUSE");

    private String value;

    PasswordProtectionWarningTriggerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PasswordProtectionWarningTriggerEnum fromValue(String value) {
      for (PasswordProtectionWarningTriggerEnum b : PasswordProtectionWarningTriggerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PasswordProtectionWarningTriggerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PasswordProtectionWarningTriggerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PasswordProtectionWarningTriggerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PasswordProtectionWarningTriggerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PasswordProtectionWarningTriggerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PASSWORD_PROTECTION_WARNING_TRIGGER = "passwordProtectionWarningTrigger";
  @SerializedName(SERIALIZED_NAME_PASSWORD_PROTECTION_WARNING_TRIGGER)
  private PasswordProtectionWarningTriggerEnum passwordProtectionWarningTrigger;

  /**
   * Current state of [Safe Browsing protection level](https://chromeenterprise.google/policies/#SafeBrowsingProtectionLevel).
   */
  @JsonAdapter(SafeBrowsingProtectionLevelEnum.Adapter.class)
  public enum SafeBrowsingProtectionLevelEnum {
    SAFE_BROWSING_LEVEL_UNSPECIFIED("SAFE_BROWSING_LEVEL_UNSPECIFIED"),
    
    DISABLED("DISABLED"),
    
    STANDARD("STANDARD"),
    
    ENHANCED("ENHANCED");

    private String value;

    SafeBrowsingProtectionLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SafeBrowsingProtectionLevelEnum fromValue(String value) {
      for (SafeBrowsingProtectionLevelEnum b : SafeBrowsingProtectionLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SafeBrowsingProtectionLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SafeBrowsingProtectionLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SafeBrowsingProtectionLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SafeBrowsingProtectionLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SafeBrowsingProtectionLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SAFE_BROWSING_PROTECTION_LEVEL = "safeBrowsingProtectionLevel";
  @SerializedName(SERIALIZED_NAME_SAFE_BROWSING_PROTECTION_LEVEL)
  private SafeBrowsingProtectionLevelEnum safeBrowsingProtectionLevel;

  public BrowserInfo() {
  }

  public BrowserInfo(
     BrowserManagementStateEnum browserManagementState
  ) {
    this();
    this.browserManagementState = browserManagementState;
  }

  /**
   * Output only. Browser&#39;s management state.
   * @return browserManagementState
   */
  @javax.annotation.Nullable
  public BrowserManagementStateEnum getBrowserManagementState() {
    return browserManagementState;
  }



  public BrowserInfo browserVersion(String browserVersion) {
    this.browserVersion = browserVersion;
    return this;
  }

  /**
   * Version of the request initiating browser.
   * @return browserVersion
   */
  @javax.annotation.Nullable
  public String getBrowserVersion() {
    return browserVersion;
  }

  public void setBrowserVersion(String browserVersion) {
    this.browserVersion = browserVersion;
  }


  public BrowserInfo isBuiltInDnsClientEnabled(Boolean isBuiltInDnsClientEnabled) {
    this.isBuiltInDnsClientEnabled = isBuiltInDnsClientEnabled;
    return this;
  }

  /**
   * Current state of [built-in DNS client](https://chromeenterprise.google/policies/#BuiltInDnsClientEnabled).
   * @return isBuiltInDnsClientEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsBuiltInDnsClientEnabled() {
    return isBuiltInDnsClientEnabled;
  }

  public void setIsBuiltInDnsClientEnabled(Boolean isBuiltInDnsClientEnabled) {
    this.isBuiltInDnsClientEnabled = isBuiltInDnsClientEnabled;
  }


  public BrowserInfo isBulkDataEntryAnalysisEnabled(Boolean isBulkDataEntryAnalysisEnabled) {
    this.isBulkDataEntryAnalysisEnabled = isBulkDataEntryAnalysisEnabled;
    return this;
  }

  /**
   * Current state of [bulk data analysis](https://chromeenterprise.google/policies/#OnBulkDataEntryEnterpriseConnector). Set to true if provider list from Chrome is non-empty.
   * @return isBulkDataEntryAnalysisEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsBulkDataEntryAnalysisEnabled() {
    return isBulkDataEntryAnalysisEnabled;
  }

  public void setIsBulkDataEntryAnalysisEnabled(Boolean isBulkDataEntryAnalysisEnabled) {
    this.isBulkDataEntryAnalysisEnabled = isBulkDataEntryAnalysisEnabled;
  }


  public BrowserInfo isChromeCleanupEnabled(Boolean isChromeCleanupEnabled) {
    this.isChromeCleanupEnabled = isChromeCleanupEnabled;
    return this;
  }

  /**
   * Current state of [Chrome Cleanup](https://chromeenterprise.google/policies/#ChromeCleanupEnabled).
   * @return isChromeCleanupEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsChromeCleanupEnabled() {
    return isChromeCleanupEnabled;
  }

  public void setIsChromeCleanupEnabled(Boolean isChromeCleanupEnabled) {
    this.isChromeCleanupEnabled = isChromeCleanupEnabled;
  }


  public BrowserInfo isChromeRemoteDesktopAppBlocked(Boolean isChromeRemoteDesktopAppBlocked) {
    this.isChromeRemoteDesktopAppBlocked = isChromeRemoteDesktopAppBlocked;
    return this;
  }

  /**
   * Current state of [Chrome Remote Desktop app](https://chromeenterprise.google/policies/#URLBlocklist).
   * @return isChromeRemoteDesktopAppBlocked
   */
  @javax.annotation.Nullable
  public Boolean getIsChromeRemoteDesktopAppBlocked() {
    return isChromeRemoteDesktopAppBlocked;
  }

  public void setIsChromeRemoteDesktopAppBlocked(Boolean isChromeRemoteDesktopAppBlocked) {
    this.isChromeRemoteDesktopAppBlocked = isChromeRemoteDesktopAppBlocked;
  }


  public BrowserInfo isFileDownloadAnalysisEnabled(Boolean isFileDownloadAnalysisEnabled) {
    this.isFileDownloadAnalysisEnabled = isFileDownloadAnalysisEnabled;
    return this;
  }

  /**
   * Current state of [file download analysis](https://chromeenterprise.google/policies/#OnFileDownloadedEnterpriseConnector). Set to true if provider list from Chrome is non-empty.
   * @return isFileDownloadAnalysisEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsFileDownloadAnalysisEnabled() {
    return isFileDownloadAnalysisEnabled;
  }

  public void setIsFileDownloadAnalysisEnabled(Boolean isFileDownloadAnalysisEnabled) {
    this.isFileDownloadAnalysisEnabled = isFileDownloadAnalysisEnabled;
  }


  public BrowserInfo isFileUploadAnalysisEnabled(Boolean isFileUploadAnalysisEnabled) {
    this.isFileUploadAnalysisEnabled = isFileUploadAnalysisEnabled;
    return this;
  }

  /**
   * Current state of [file upload analysis](https://chromeenterprise.google/policies/#OnFileAttachedEnterpriseConnector). Set to true if provider list from Chrome is non-empty.
   * @return isFileUploadAnalysisEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsFileUploadAnalysisEnabled() {
    return isFileUploadAnalysisEnabled;
  }

  public void setIsFileUploadAnalysisEnabled(Boolean isFileUploadAnalysisEnabled) {
    this.isFileUploadAnalysisEnabled = isFileUploadAnalysisEnabled;
  }


  public BrowserInfo isRealtimeUrlCheckEnabled(Boolean isRealtimeUrlCheckEnabled) {
    this.isRealtimeUrlCheckEnabled = isRealtimeUrlCheckEnabled;
    return this;
  }

  /**
   * Current state of [real-time URL check](https://chromeenterprise.google/policies/#EnterpriseRealTimeUrlCheckMode). Set to true if provider list from Chrome is non-empty.
   * @return isRealtimeUrlCheckEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsRealtimeUrlCheckEnabled() {
    return isRealtimeUrlCheckEnabled;
  }

  public void setIsRealtimeUrlCheckEnabled(Boolean isRealtimeUrlCheckEnabled) {
    this.isRealtimeUrlCheckEnabled = isRealtimeUrlCheckEnabled;
  }


  public BrowserInfo isSecurityEventAnalysisEnabled(Boolean isSecurityEventAnalysisEnabled) {
    this.isSecurityEventAnalysisEnabled = isSecurityEventAnalysisEnabled;
    return this;
  }

  /**
   * Current state of [security event analysis](https://chromeenterprise.google/policies/#OnSecurityEventEnterpriseConnector). Set to true if provider list from Chrome is non-empty.
   * @return isSecurityEventAnalysisEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsSecurityEventAnalysisEnabled() {
    return isSecurityEventAnalysisEnabled;
  }

  public void setIsSecurityEventAnalysisEnabled(Boolean isSecurityEventAnalysisEnabled) {
    this.isSecurityEventAnalysisEnabled = isSecurityEventAnalysisEnabled;
  }


  public BrowserInfo isSiteIsolationEnabled(Boolean isSiteIsolationEnabled) {
    this.isSiteIsolationEnabled = isSiteIsolationEnabled;
    return this;
  }

  /**
   * Current state of [site isolation](https://chromeenterprise.google/policies/?policy&#x3D;IsolateOrigins).
   * @return isSiteIsolationEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsSiteIsolationEnabled() {
    return isSiteIsolationEnabled;
  }

  public void setIsSiteIsolationEnabled(Boolean isSiteIsolationEnabled) {
    this.isSiteIsolationEnabled = isSiteIsolationEnabled;
  }


  public BrowserInfo isThirdPartyBlockingEnabled(Boolean isThirdPartyBlockingEnabled) {
    this.isThirdPartyBlockingEnabled = isThirdPartyBlockingEnabled;
    return this;
  }

  /**
   * Current state of [third-party blocking](https://chromeenterprise.google/policies/#ThirdPartyBlockingEnabled).
   * @return isThirdPartyBlockingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsThirdPartyBlockingEnabled() {
    return isThirdPartyBlockingEnabled;
  }

  public void setIsThirdPartyBlockingEnabled(Boolean isThirdPartyBlockingEnabled) {
    this.isThirdPartyBlockingEnabled = isThirdPartyBlockingEnabled;
  }


  public BrowserInfo passwordProtectionWarningTrigger(PasswordProtectionWarningTriggerEnum passwordProtectionWarningTrigger) {
    this.passwordProtectionWarningTrigger = passwordProtectionWarningTrigger;
    return this;
  }

  /**
   * Current state of [password protection trigger](https://chromeenterprise.google/policies/#PasswordProtectionWarningTrigger).
   * @return passwordProtectionWarningTrigger
   */
  @javax.annotation.Nullable
  public PasswordProtectionWarningTriggerEnum getPasswordProtectionWarningTrigger() {
    return passwordProtectionWarningTrigger;
  }

  public void setPasswordProtectionWarningTrigger(PasswordProtectionWarningTriggerEnum passwordProtectionWarningTrigger) {
    this.passwordProtectionWarningTrigger = passwordProtectionWarningTrigger;
  }


  public BrowserInfo safeBrowsingProtectionLevel(SafeBrowsingProtectionLevelEnum safeBrowsingProtectionLevel) {
    this.safeBrowsingProtectionLevel = safeBrowsingProtectionLevel;
    return this;
  }

  /**
   * Current state of [Safe Browsing protection level](https://chromeenterprise.google/policies/#SafeBrowsingProtectionLevel).
   * @return safeBrowsingProtectionLevel
   */
  @javax.annotation.Nullable
  public SafeBrowsingProtectionLevelEnum getSafeBrowsingProtectionLevel() {
    return safeBrowsingProtectionLevel;
  }

  public void setSafeBrowsingProtectionLevel(SafeBrowsingProtectionLevelEnum safeBrowsingProtectionLevel) {
    this.safeBrowsingProtectionLevel = safeBrowsingProtectionLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BrowserInfo browserInfo = (BrowserInfo) o;
    return Objects.equals(this.browserManagementState, browserInfo.browserManagementState) &&
        Objects.equals(this.browserVersion, browserInfo.browserVersion) &&
        Objects.equals(this.isBuiltInDnsClientEnabled, browserInfo.isBuiltInDnsClientEnabled) &&
        Objects.equals(this.isBulkDataEntryAnalysisEnabled, browserInfo.isBulkDataEntryAnalysisEnabled) &&
        Objects.equals(this.isChromeCleanupEnabled, browserInfo.isChromeCleanupEnabled) &&
        Objects.equals(this.isChromeRemoteDesktopAppBlocked, browserInfo.isChromeRemoteDesktopAppBlocked) &&
        Objects.equals(this.isFileDownloadAnalysisEnabled, browserInfo.isFileDownloadAnalysisEnabled) &&
        Objects.equals(this.isFileUploadAnalysisEnabled, browserInfo.isFileUploadAnalysisEnabled) &&
        Objects.equals(this.isRealtimeUrlCheckEnabled, browserInfo.isRealtimeUrlCheckEnabled) &&
        Objects.equals(this.isSecurityEventAnalysisEnabled, browserInfo.isSecurityEventAnalysisEnabled) &&
        Objects.equals(this.isSiteIsolationEnabled, browserInfo.isSiteIsolationEnabled) &&
        Objects.equals(this.isThirdPartyBlockingEnabled, browserInfo.isThirdPartyBlockingEnabled) &&
        Objects.equals(this.passwordProtectionWarningTrigger, browserInfo.passwordProtectionWarningTrigger) &&
        Objects.equals(this.safeBrowsingProtectionLevel, browserInfo.safeBrowsingProtectionLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(browserManagementState, browserVersion, isBuiltInDnsClientEnabled, isBulkDataEntryAnalysisEnabled, isChromeCleanupEnabled, isChromeRemoteDesktopAppBlocked, isFileDownloadAnalysisEnabled, isFileUploadAnalysisEnabled, isRealtimeUrlCheckEnabled, isSecurityEventAnalysisEnabled, isSiteIsolationEnabled, isThirdPartyBlockingEnabled, passwordProtectionWarningTrigger, safeBrowsingProtectionLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BrowserInfo {\n");
    sb.append("    browserManagementState: ").append(toIndentedString(browserManagementState)).append("\n");
    sb.append("    browserVersion: ").append(toIndentedString(browserVersion)).append("\n");
    sb.append("    isBuiltInDnsClientEnabled: ").append(toIndentedString(isBuiltInDnsClientEnabled)).append("\n");
    sb.append("    isBulkDataEntryAnalysisEnabled: ").append(toIndentedString(isBulkDataEntryAnalysisEnabled)).append("\n");
    sb.append("    isChromeCleanupEnabled: ").append(toIndentedString(isChromeCleanupEnabled)).append("\n");
    sb.append("    isChromeRemoteDesktopAppBlocked: ").append(toIndentedString(isChromeRemoteDesktopAppBlocked)).append("\n");
    sb.append("    isFileDownloadAnalysisEnabled: ").append(toIndentedString(isFileDownloadAnalysisEnabled)).append("\n");
    sb.append("    isFileUploadAnalysisEnabled: ").append(toIndentedString(isFileUploadAnalysisEnabled)).append("\n");
    sb.append("    isRealtimeUrlCheckEnabled: ").append(toIndentedString(isRealtimeUrlCheckEnabled)).append("\n");
    sb.append("    isSecurityEventAnalysisEnabled: ").append(toIndentedString(isSecurityEventAnalysisEnabled)).append("\n");
    sb.append("    isSiteIsolationEnabled: ").append(toIndentedString(isSiteIsolationEnabled)).append("\n");
    sb.append("    isThirdPartyBlockingEnabled: ").append(toIndentedString(isThirdPartyBlockingEnabled)).append("\n");
    sb.append("    passwordProtectionWarningTrigger: ").append(toIndentedString(passwordProtectionWarningTrigger)).append("\n");
    sb.append("    safeBrowsingProtectionLevel: ").append(toIndentedString(safeBrowsingProtectionLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("browserManagementState");
    openapiFields.add("browserVersion");
    openapiFields.add("isBuiltInDnsClientEnabled");
    openapiFields.add("isBulkDataEntryAnalysisEnabled");
    openapiFields.add("isChromeCleanupEnabled");
    openapiFields.add("isChromeRemoteDesktopAppBlocked");
    openapiFields.add("isFileDownloadAnalysisEnabled");
    openapiFields.add("isFileUploadAnalysisEnabled");
    openapiFields.add("isRealtimeUrlCheckEnabled");
    openapiFields.add("isSecurityEventAnalysisEnabled");
    openapiFields.add("isSiteIsolationEnabled");
    openapiFields.add("isThirdPartyBlockingEnabled");
    openapiFields.add("passwordProtectionWarningTrigger");
    openapiFields.add("safeBrowsingProtectionLevel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BrowserInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BrowserInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BrowserInfo is not found in the empty JSON string", BrowserInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BrowserInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BrowserInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("browserManagementState") != null && !jsonObj.get("browserManagementState").isJsonNull()) && !jsonObj.get("browserManagementState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserManagementState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserManagementState").toString()));
      }
      // validate the optional field `browserManagementState`
      if (jsonObj.get("browserManagementState") != null && !jsonObj.get("browserManagementState").isJsonNull()) {
        BrowserManagementStateEnum.validateJsonElement(jsonObj.get("browserManagementState"));
      }
      if ((jsonObj.get("browserVersion") != null && !jsonObj.get("browserVersion").isJsonNull()) && !jsonObj.get("browserVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserVersion").toString()));
      }
      if ((jsonObj.get("passwordProtectionWarningTrigger") != null && !jsonObj.get("passwordProtectionWarningTrigger").isJsonNull()) && !jsonObj.get("passwordProtectionWarningTrigger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordProtectionWarningTrigger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passwordProtectionWarningTrigger").toString()));
      }
      // validate the optional field `passwordProtectionWarningTrigger`
      if (jsonObj.get("passwordProtectionWarningTrigger") != null && !jsonObj.get("passwordProtectionWarningTrigger").isJsonNull()) {
        PasswordProtectionWarningTriggerEnum.validateJsonElement(jsonObj.get("passwordProtectionWarningTrigger"));
      }
      if ((jsonObj.get("safeBrowsingProtectionLevel") != null && !jsonObj.get("safeBrowsingProtectionLevel").isJsonNull()) && !jsonObj.get("safeBrowsingProtectionLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `safeBrowsingProtectionLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("safeBrowsingProtectionLevel").toString()));
      }
      // validate the optional field `safeBrowsingProtectionLevel`
      if (jsonObj.get("safeBrowsingProtectionLevel") != null && !jsonObj.get("safeBrowsingProtectionLevel").isJsonNull()) {
        SafeBrowsingProtectionLevelEnum.validateJsonElement(jsonObj.get("safeBrowsingProtectionLevel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BrowserInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BrowserInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BrowserInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BrowserInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BrowserInfo>() {
           @Override
           public void write(JsonWriter out, BrowserInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BrowserInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BrowserInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BrowserInfo
   * @throws IOException if the JSON string is invalid with respect to BrowserInfo
   */
  public static BrowserInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BrowserInfo.class);
  }

  /**
   * Convert an instance of BrowserInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

