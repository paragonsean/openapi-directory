/*
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApproveDeviceUserRequest;
import org.openapitools.client.model.BlockDeviceUserRequest;
import org.openapitools.client.model.CancelWipeDeviceUserRequest;
import org.openapitools.client.model.CreateDeviceRequest;
import org.openapitools.client.model.ListDeviceUsersResponse;
import org.openapitools.client.model.ListDevicesResponse;
import org.openapitools.client.model.LookupSelfDeviceUsersResponse;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.WipeDeviceUserRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevicesApi
 */
@Disabled
public class DevicesApiTest {

    private final DevicesApi api = new DevicesApi();

    /**
     * Creates a device. Only company-owned device may be created. **Note**: This method is available only to customers who have one of the following SKUs: Enterprise Standard, Enterprise Plus, Enterprise for Education, and Cloud Identity Premium
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudidentityDevicesCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CreateDeviceRequest createDeviceRequest = null;
        Operation response = api.cloudidentityDevicesCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, createDeviceRequest);
        // TODO: test validations
    }

    /**
     * Approves device to access user data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudidentityDevicesDeviceUsersApproveTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ApproveDeviceUserRequest approveDeviceUserRequest = null;
        Operation response = api.cloudidentityDevicesDeviceUsersApprove(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, approveDeviceUserRequest);
        // TODO: test validations
    }

    /**
     * Blocks device from accessing user data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudidentityDevicesDeviceUsersBlockTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BlockDeviceUserRequest blockDeviceUserRequest = null;
        Operation response = api.cloudidentityDevicesDeviceUsersBlock(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, blockDeviceUserRequest);
        // TODO: test validations
    }

    /**
     * Cancels an unfinished user account wipe. This operation can be used to cancel device wipe in the gap between the wipe operation returning success and the device being wiped.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudidentityDevicesDeviceUsersCancelWipeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CancelWipeDeviceUserRequest cancelWipeDeviceUserRequest = null;
        Operation response = api.cloudidentityDevicesDeviceUsersCancelWipe(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, cancelWipeDeviceUserRequest);
        // TODO: test validations
    }

    /**
     * Lists/Searches DeviceUsers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudidentityDevicesDeviceUsersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String customer = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListDeviceUsersResponse response = api.cloudidentityDevicesDeviceUsersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customer, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Looks up resource names of the DeviceUsers associated with the caller&#39;s credentials, as well as the properties provided in the request. This method must be called with end-user credentials with the scope: https://www.googleapis.com/auth/cloud-identity.devices.lookup If multiple properties are provided, only DeviceUsers having all of these properties are considered as matches - i.e. the query behaves like an AND. Different platforms require different amounts of information from the caller to ensure that the DeviceUser is uniquely identified. - iOS: No properties need to be passed, the caller&#39;s credentials are sufficient to identify the corresponding DeviceUser. - Android: Specifying the &#39;android_id&#39; field is required. - Desktop: Specifying the &#39;raw_resource_id&#39; field is required.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudidentityDevicesDeviceUsersLookupTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String androidId = null;
        Integer pageSize = null;
        String pageToken = null;
        String rawResourceId = null;
        String userId = null;
        LookupSelfDeviceUsersResponse response = api.cloudidentityDevicesDeviceUsersLookup(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, androidId, pageSize, pageToken, rawResourceId, userId);
        // TODO: test validations
    }

    /**
     * Wipes the user&#39;s account on a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudidentityDevicesDeviceUsersWipeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        WipeDeviceUserRequest wipeDeviceUserRequest = null;
        Operation response = api.cloudidentityDevicesDeviceUsersWipe(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, wipeDeviceUserRequest);
        // TODO: test validations
    }

    /**
     * Lists/Searches devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudidentityDevicesListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String customer = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        ListDevicesResponse response = api.cloudidentityDevicesList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customer, filter, orderBy, pageSize, pageToken, view);
        // TODO: test validations
    }

}
