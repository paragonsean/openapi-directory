/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListIdpCredentialsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListIdpCredentialsResponse::OAIListIdpCredentialsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListIdpCredentialsResponse::OAIListIdpCredentialsResponse() {
    this->initializeModel();
}

OAIListIdpCredentialsResponse::~OAIListIdpCredentialsResponse() {}

void OAIListIdpCredentialsResponse::initializeModel() {

    m_idp_credentials_isSet = false;
    m_idp_credentials_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIListIdpCredentialsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListIdpCredentialsResponse::fromJsonObject(QJsonObject json) {

    m_idp_credentials_isValid = ::OpenAPI::fromJsonValue(m_idp_credentials, json[QString("idpCredentials")]);
    m_idp_credentials_isSet = !json[QString("idpCredentials")].isNull() && m_idp_credentials_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIListIdpCredentialsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListIdpCredentialsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_idp_credentials.size() > 0) {
        obj.insert(QString("idpCredentials"), ::OpenAPI::toJsonValue(m_idp_credentials));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIIdpCredential> OAIListIdpCredentialsResponse::getIdpCredentials() const {
    return m_idp_credentials;
}
void OAIListIdpCredentialsResponse::setIdpCredentials(const QList<OAIIdpCredential> &idp_credentials) {
    m_idp_credentials = idp_credentials;
    m_idp_credentials_isSet = true;
}

bool OAIListIdpCredentialsResponse::is_idp_credentials_Set() const{
    return m_idp_credentials_isSet;
}

bool OAIListIdpCredentialsResponse::is_idp_credentials_Valid() const{
    return m_idp_credentials_isValid;
}

QString OAIListIdpCredentialsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListIdpCredentialsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListIdpCredentialsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListIdpCredentialsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIListIdpCredentialsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_idp_credentials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListIdpCredentialsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
