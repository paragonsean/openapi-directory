/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMembershipRelation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMembershipRelation::OAIMembershipRelation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMembershipRelation::OAIMembershipRelation() {
    this->initializeModel();
}

OAIMembershipRelation::~OAIMembershipRelation() {}

void OAIMembershipRelation::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_group_key_isSet = false;
    m_group_key_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_membership_isSet = false;
    m_membership_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;
}

void OAIMembershipRelation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMembershipRelation::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_group_key_isValid = ::OpenAPI::fromJsonValue(m_group_key, json[QString("groupKey")]);
    m_group_key_isSet = !json[QString("groupKey")].isNull() && m_group_key_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_membership_isValid = ::OpenAPI::fromJsonValue(m_membership, json[QString("membership")]);
    m_membership_isSet = !json[QString("membership")].isNull() && m_membership_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;
}

QString OAIMembershipRelation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMembershipRelation::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_group_key.isSet()) {
        obj.insert(QString("groupKey"), ::OpenAPI::toJsonValue(m_group_key));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_membership_isSet) {
        obj.insert(QString("membership"), ::OpenAPI::toJsonValue(m_membership));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    return obj;
}

QString OAIMembershipRelation::getDescription() const {
    return m_description;
}
void OAIMembershipRelation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMembershipRelation::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMembershipRelation::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIMembershipRelation::getDisplayName() const {
    return m_display_name;
}
void OAIMembershipRelation::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIMembershipRelation::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIMembershipRelation::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIMembershipRelation::getGroup() const {
    return m_group;
}
void OAIMembershipRelation::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIMembershipRelation::is_group_Set() const{
    return m_group_isSet;
}

bool OAIMembershipRelation::is_group_Valid() const{
    return m_group_isValid;
}

OAIEntityKey OAIMembershipRelation::getGroupKey() const {
    return m_group_key;
}
void OAIMembershipRelation::setGroupKey(const OAIEntityKey &group_key) {
    m_group_key = group_key;
    m_group_key_isSet = true;
}

bool OAIMembershipRelation::is_group_key_Set() const{
    return m_group_key_isSet;
}

bool OAIMembershipRelation::is_group_key_Valid() const{
    return m_group_key_isValid;
}

QMap<QString, QString> OAIMembershipRelation::getLabels() const {
    return m_labels;
}
void OAIMembershipRelation::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIMembershipRelation::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIMembershipRelation::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIMembershipRelation::getMembership() const {
    return m_membership;
}
void OAIMembershipRelation::setMembership(const QString &membership) {
    m_membership = membership;
    m_membership_isSet = true;
}

bool OAIMembershipRelation::is_membership_Set() const{
    return m_membership_isSet;
}

bool OAIMembershipRelation::is_membership_Valid() const{
    return m_membership_isValid;
}

QList<OAIMembershipRole> OAIMembershipRelation::getRoles() const {
    return m_roles;
}
void OAIMembershipRelation::setRoles(const QList<OAIMembershipRole> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIMembershipRelation::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIMembershipRelation::is_roles_Valid() const{
    return m_roles_isValid;
}

bool OAIMembershipRelation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMembershipRelation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
