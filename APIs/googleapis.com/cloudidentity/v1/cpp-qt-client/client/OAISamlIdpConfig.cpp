/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISamlIdpConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISamlIdpConfig::OAISamlIdpConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISamlIdpConfig::OAISamlIdpConfig() {
    this->initializeModel();
}

OAISamlIdpConfig::~OAISamlIdpConfig() {}

void OAISamlIdpConfig::initializeModel() {

    m_change_password_uri_isSet = false;
    m_change_password_uri_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_logout_redirect_uri_isSet = false;
    m_logout_redirect_uri_isValid = false;

    m_single_sign_on_service_uri_isSet = false;
    m_single_sign_on_service_uri_isValid = false;
}

void OAISamlIdpConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISamlIdpConfig::fromJsonObject(QJsonObject json) {

    m_change_password_uri_isValid = ::OpenAPI::fromJsonValue(m_change_password_uri, json[QString("changePasswordUri")]);
    m_change_password_uri_isSet = !json[QString("changePasswordUri")].isNull() && m_change_password_uri_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_logout_redirect_uri_isValid = ::OpenAPI::fromJsonValue(m_logout_redirect_uri, json[QString("logoutRedirectUri")]);
    m_logout_redirect_uri_isSet = !json[QString("logoutRedirectUri")].isNull() && m_logout_redirect_uri_isValid;

    m_single_sign_on_service_uri_isValid = ::OpenAPI::fromJsonValue(m_single_sign_on_service_uri, json[QString("singleSignOnServiceUri")]);
    m_single_sign_on_service_uri_isSet = !json[QString("singleSignOnServiceUri")].isNull() && m_single_sign_on_service_uri_isValid;
}

QString OAISamlIdpConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISamlIdpConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_change_password_uri_isSet) {
        obj.insert(QString("changePasswordUri"), ::OpenAPI::toJsonValue(m_change_password_uri));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_logout_redirect_uri_isSet) {
        obj.insert(QString("logoutRedirectUri"), ::OpenAPI::toJsonValue(m_logout_redirect_uri));
    }
    if (m_single_sign_on_service_uri_isSet) {
        obj.insert(QString("singleSignOnServiceUri"), ::OpenAPI::toJsonValue(m_single_sign_on_service_uri));
    }
    return obj;
}

QString OAISamlIdpConfig::getChangePasswordUri() const {
    return m_change_password_uri;
}
void OAISamlIdpConfig::setChangePasswordUri(const QString &change_password_uri) {
    m_change_password_uri = change_password_uri;
    m_change_password_uri_isSet = true;
}

bool OAISamlIdpConfig::is_change_password_uri_Set() const{
    return m_change_password_uri_isSet;
}

bool OAISamlIdpConfig::is_change_password_uri_Valid() const{
    return m_change_password_uri_isValid;
}

QString OAISamlIdpConfig::getEntityId() const {
    return m_entity_id;
}
void OAISamlIdpConfig::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAISamlIdpConfig::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAISamlIdpConfig::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAISamlIdpConfig::getLogoutRedirectUri() const {
    return m_logout_redirect_uri;
}
void OAISamlIdpConfig::setLogoutRedirectUri(const QString &logout_redirect_uri) {
    m_logout_redirect_uri = logout_redirect_uri;
    m_logout_redirect_uri_isSet = true;
}

bool OAISamlIdpConfig::is_logout_redirect_uri_Set() const{
    return m_logout_redirect_uri_isSet;
}

bool OAISamlIdpConfig::is_logout_redirect_uri_Valid() const{
    return m_logout_redirect_uri_isValid;
}

QString OAISamlIdpConfig::getSingleSignOnServiceUri() const {
    return m_single_sign_on_service_uri;
}
void OAISamlIdpConfig::setSingleSignOnServiceUri(const QString &single_sign_on_service_uri) {
    m_single_sign_on_service_uri = single_sign_on_service_uri;
    m_single_sign_on_service_uri_isSet = true;
}

bool OAISamlIdpConfig::is_single_sign_on_service_uri_Set() const{
    return m_single_sign_on_service_uri_isSet;
}

bool OAISamlIdpConfig::is_single_sign_on_service_uri_Valid() const{
    return m_single_sign_on_service_uri_isValid;
}

bool OAISamlIdpConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_change_password_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logout_redirect_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_sign_on_service_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISamlIdpConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
