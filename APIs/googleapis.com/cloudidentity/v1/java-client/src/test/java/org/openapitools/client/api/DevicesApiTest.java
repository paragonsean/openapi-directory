/*
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GoogleAppsCloudidentityDevicesV1ApproveDeviceUserRequest;
import org.openapitools.client.model.GoogleAppsCloudidentityDevicesV1BlockDeviceUserRequest;
import org.openapitools.client.model.GoogleAppsCloudidentityDevicesV1CancelWipeDeviceUserRequest;
import org.openapitools.client.model.GoogleAppsCloudidentityDevicesV1Device;
import org.openapitools.client.model.GoogleAppsCloudidentityDevicesV1ListClientStatesResponse;
import org.openapitools.client.model.GoogleAppsCloudidentityDevicesV1ListDeviceUsersResponse;
import org.openapitools.client.model.GoogleAppsCloudidentityDevicesV1ListDevicesResponse;
import org.openapitools.client.model.GoogleAppsCloudidentityDevicesV1LookupSelfDeviceUsersResponse;
import org.openapitools.client.model.GoogleAppsCloudidentityDevicesV1WipeDeviceUserRequest;
import org.openapitools.client.model.Operation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevicesApi
 */
@Disabled
public class DevicesApiTest {

    private final DevicesApi api = new DevicesApi();

    /**
     * Creates a device. Only company-owned device may be created. **Note**: This method is available only to customers who have one of the following SKUs: Enterprise Standard, Enterprise Plus, Enterprise for Education, and Cloud Identity Premium
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudidentityDevicesCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String customer = null;
        GoogleAppsCloudidentityDevicesV1Device googleAppsCloudidentityDevicesV1Device = null;
        Operation response = api.cloudidentityDevicesCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customer, googleAppsCloudidentityDevicesV1Device);
        // TODO: test validations
    }

    /**
     * Approves device to access user data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudidentityDevicesDeviceUsersApproveTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleAppsCloudidentityDevicesV1ApproveDeviceUserRequest googleAppsCloudidentityDevicesV1ApproveDeviceUserRequest = null;
        Operation response = api.cloudidentityDevicesDeviceUsersApprove(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleAppsCloudidentityDevicesV1ApproveDeviceUserRequest);
        // TODO: test validations
    }

    /**
     * Blocks device from accessing user data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudidentityDevicesDeviceUsersBlockTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleAppsCloudidentityDevicesV1BlockDeviceUserRequest googleAppsCloudidentityDevicesV1BlockDeviceUserRequest = null;
        Operation response = api.cloudidentityDevicesDeviceUsersBlock(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleAppsCloudidentityDevicesV1BlockDeviceUserRequest);
        // TODO: test validations
    }

    /**
     * Cancels an unfinished user account wipe. This operation can be used to cancel device wipe in the gap between the wipe operation returning success and the device being wiped.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudidentityDevicesDeviceUsersCancelWipeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleAppsCloudidentityDevicesV1CancelWipeDeviceUserRequest googleAppsCloudidentityDevicesV1CancelWipeDeviceUserRequest = null;
        Operation response = api.cloudidentityDevicesDeviceUsersCancelWipe(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleAppsCloudidentityDevicesV1CancelWipeDeviceUserRequest);
        // TODO: test validations
    }

    /**
     * Lists the client states for the given search query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudidentityDevicesDeviceUsersClientStatesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String customer = null;
        String filter = null;
        String orderBy = null;
        String pageToken = null;
        GoogleAppsCloudidentityDevicesV1ListClientStatesResponse response = api.cloudidentityDevicesDeviceUsersClientStatesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customer, filter, orderBy, pageToken);
        // TODO: test validations
    }

    /**
     * Lists/Searches DeviceUsers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudidentityDevicesDeviceUsersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String customer = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleAppsCloudidentityDevicesV1ListDeviceUsersResponse response = api.cloudidentityDevicesDeviceUsersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customer, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Looks up resource names of the DeviceUsers associated with the caller&#39;s credentials, as well as the properties provided in the request. This method must be called with end-user credentials with the scope: https://www.googleapis.com/auth/cloud-identity.devices.lookup If multiple properties are provided, only DeviceUsers having all of these properties are considered as matches - i.e. the query behaves like an AND. Different platforms require different amounts of information from the caller to ensure that the DeviceUser is uniquely identified. - iOS: No properties need to be passed, the caller&#39;s credentials are sufficient to identify the corresponding DeviceUser. - Android: Specifying the &#39;android_id&#39; field is required. - Desktop: Specifying the &#39;raw_resource_id&#39; field is required.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudidentityDevicesDeviceUsersLookupTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String androidId = null;
        Integer pageSize = null;
        String pageToken = null;
        String rawResourceId = null;
        String userId = null;
        GoogleAppsCloudidentityDevicesV1LookupSelfDeviceUsersResponse response = api.cloudidentityDevicesDeviceUsersLookup(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, androidId, pageSize, pageToken, rawResourceId, userId);
        // TODO: test validations
    }

    /**
     * Wipes the user&#39;s account on a device. Other data on the device that is not associated with the user&#39;s work account is not affected. For example, if a Gmail app is installed on a device that is used for personal and work purposes, and the user is logged in to the Gmail app with their personal account as well as their work account, wiping the \&quot;deviceUser\&quot; by their work administrator will not affect their personal account within Gmail or other apps such as Photos.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudidentityDevicesDeviceUsersWipeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleAppsCloudidentityDevicesV1WipeDeviceUserRequest googleAppsCloudidentityDevicesV1WipeDeviceUserRequest = null;
        Operation response = api.cloudidentityDevicesDeviceUsersWipe(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleAppsCloudidentityDevicesV1WipeDeviceUserRequest);
        // TODO: test validations
    }

    /**
     * Lists/Searches devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudidentityDevicesListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String customer = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        GoogleAppsCloudidentityDevicesV1ListDevicesResponse response = api.cloudidentityDevicesList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customer, filter, orderBy, pageSize, pageToken, view);
        // TODO: test validations
    }

}
