/*
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EntityKey;
import org.openapitools.client.model.TransitiveMembershipRole;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message representing a transitive membership of a group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:32.546626-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MemberRelation {
  public static final String SERIALIZED_NAME_MEMBER = "member";
  @SerializedName(SERIALIZED_NAME_MEMBER)
  private String member;

  public static final String SERIALIZED_NAME_PREFERRED_MEMBER_KEY = "preferredMemberKey";
  @SerializedName(SERIALIZED_NAME_PREFERRED_MEMBER_KEY)
  private List<EntityKey> preferredMemberKey = new ArrayList<>();

  /**
   * The relation between the group and the transitive member.
   */
  @JsonAdapter(RelationTypeEnum.Adapter.class)
  public enum RelationTypeEnum {
    RELATION_TYPE_UNSPECIFIED("RELATION_TYPE_UNSPECIFIED"),
    
    DIRECT("DIRECT"),
    
    INDIRECT("INDIRECT"),
    
    DIRECT_AND_INDIRECT("DIRECT_AND_INDIRECT");

    private String value;

    RelationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelationTypeEnum fromValue(String value) {
      for (RelationTypeEnum b : RelationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELATION_TYPE = "relationType";
  @SerializedName(SERIALIZED_NAME_RELATION_TYPE)
  private RelationTypeEnum relationType;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<TransitiveMembershipRole> roles = new ArrayList<>();

  public MemberRelation() {
  }

  public MemberRelation member(String member) {
    this.member = member;
    return this;
  }

  /**
   * Resource name for this member.
   * @return member
   */
  @javax.annotation.Nullable
  public String getMember() {
    return member;
  }

  public void setMember(String member) {
    this.member = member;
  }


  public MemberRelation preferredMemberKey(List<EntityKey> preferredMemberKey) {
    this.preferredMemberKey = preferredMemberKey;
    return this;
  }

  public MemberRelation addPreferredMemberKeyItem(EntityKey preferredMemberKeyItem) {
    if (this.preferredMemberKey == null) {
      this.preferredMemberKey = new ArrayList<>();
    }
    this.preferredMemberKey.add(preferredMemberKeyItem);
    return this;
  }

  /**
   * Entity key has an id and a namespace. In case of discussion forums, the id will be an email address without a namespace.
   * @return preferredMemberKey
   */
  @javax.annotation.Nullable
  public List<EntityKey> getPreferredMemberKey() {
    return preferredMemberKey;
  }

  public void setPreferredMemberKey(List<EntityKey> preferredMemberKey) {
    this.preferredMemberKey = preferredMemberKey;
  }


  public MemberRelation relationType(RelationTypeEnum relationType) {
    this.relationType = relationType;
    return this;
  }

  /**
   * The relation between the group and the transitive member.
   * @return relationType
   */
  @javax.annotation.Nullable
  public RelationTypeEnum getRelationType() {
    return relationType;
  }

  public void setRelationType(RelationTypeEnum relationType) {
    this.relationType = relationType;
  }


  public MemberRelation roles(List<TransitiveMembershipRole> roles) {
    this.roles = roles;
    return this;
  }

  public MemberRelation addRolesItem(TransitiveMembershipRole rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * The membership role details (i.e name of role and expiry time).
   * @return roles
   */
  @javax.annotation.Nullable
  public List<TransitiveMembershipRole> getRoles() {
    return roles;
  }

  public void setRoles(List<TransitiveMembershipRole> roles) {
    this.roles = roles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MemberRelation memberRelation = (MemberRelation) o;
    return Objects.equals(this.member, memberRelation.member) &&
        Objects.equals(this.preferredMemberKey, memberRelation.preferredMemberKey) &&
        Objects.equals(this.relationType, memberRelation.relationType) &&
        Objects.equals(this.roles, memberRelation.roles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(member, preferredMemberKey, relationType, roles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MemberRelation {\n");
    sb.append("    member: ").append(toIndentedString(member)).append("\n");
    sb.append("    preferredMemberKey: ").append(toIndentedString(preferredMemberKey)).append("\n");
    sb.append("    relationType: ").append(toIndentedString(relationType)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("member");
    openapiFields.add("preferredMemberKey");
    openapiFields.add("relationType");
    openapiFields.add("roles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MemberRelation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MemberRelation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MemberRelation is not found in the empty JSON string", MemberRelation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MemberRelation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MemberRelation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("member") != null && !jsonObj.get("member").isJsonNull()) && !jsonObj.get("member").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `member` to be a primitive type in the JSON string but got `%s`", jsonObj.get("member").toString()));
      }
      if (jsonObj.get("preferredMemberKey") != null && !jsonObj.get("preferredMemberKey").isJsonNull()) {
        JsonArray jsonArraypreferredMemberKey = jsonObj.getAsJsonArray("preferredMemberKey");
        if (jsonArraypreferredMemberKey != null) {
          // ensure the json data is an array
          if (!jsonObj.get("preferredMemberKey").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `preferredMemberKey` to be an array in the JSON string but got `%s`", jsonObj.get("preferredMemberKey").toString()));
          }

          // validate the optional field `preferredMemberKey` (array)
          for (int i = 0; i < jsonArraypreferredMemberKey.size(); i++) {
            EntityKey.validateJsonElement(jsonArraypreferredMemberKey.get(i));
          };
        }
      }
      if ((jsonObj.get("relationType") != null && !jsonObj.get("relationType").isJsonNull()) && !jsonObj.get("relationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationType").toString()));
      }
      // validate the optional field `relationType`
      if (jsonObj.get("relationType") != null && !jsonObj.get("relationType").isJsonNull()) {
        RelationTypeEnum.validateJsonElement(jsonObj.get("relationType"));
      }
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull()) {
        JsonArray jsonArrayroles = jsonObj.getAsJsonArray("roles");
        if (jsonArrayroles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
          }

          // validate the optional field `roles` (array)
          for (int i = 0; i < jsonArrayroles.size(); i++) {
            TransitiveMembershipRole.validateJsonElement(jsonArrayroles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MemberRelation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MemberRelation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MemberRelation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MemberRelation.class));

       return (TypeAdapter<T>) new TypeAdapter<MemberRelation>() {
           @Override
           public void write(JsonWriter out, MemberRelation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MemberRelation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MemberRelation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MemberRelation
   * @throws IOException if the JSON string is invalid with respect to MemberRelation
   */
  public static MemberRelation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MemberRelation.class);
  }

  /**
   * Convert an instance of MemberRelation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

