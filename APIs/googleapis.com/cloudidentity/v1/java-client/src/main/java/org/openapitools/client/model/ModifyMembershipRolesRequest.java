/*
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MembershipRole;
import org.openapitools.client.model.UpdateMembershipRolesParams;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request message for MembershipsService.ModifyMembershipRoles.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:32.546626-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModifyMembershipRolesRequest {
  public static final String SERIALIZED_NAME_ADD_ROLES = "addRoles";
  @SerializedName(SERIALIZED_NAME_ADD_ROLES)
  private List<MembershipRole> addRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_REMOVE_ROLES = "removeRoles";
  @SerializedName(SERIALIZED_NAME_REMOVE_ROLES)
  private List<String> removeRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_ROLES_PARAMS = "updateRolesParams";
  @SerializedName(SERIALIZED_NAME_UPDATE_ROLES_PARAMS)
  private List<UpdateMembershipRolesParams> updateRolesParams = new ArrayList<>();

  public ModifyMembershipRolesRequest() {
  }

  public ModifyMembershipRolesRequest addRoles(List<MembershipRole> addRoles) {
    this.addRoles = addRoles;
    return this;
  }

  public ModifyMembershipRolesRequest addAddRolesItem(MembershipRole addRolesItem) {
    if (this.addRoles == null) {
      this.addRoles = new ArrayList<>();
    }
    this.addRoles.add(addRolesItem);
    return this;
  }

  /**
   * The &#x60;MembershipRole&#x60;s to be added. Adding or removing roles in the same request as updating roles is not supported. Must not be set if &#x60;update_roles_params&#x60; is set.
   * @return addRoles
   */
  @javax.annotation.Nullable
  public List<MembershipRole> getAddRoles() {
    return addRoles;
  }

  public void setAddRoles(List<MembershipRole> addRoles) {
    this.addRoles = addRoles;
  }


  public ModifyMembershipRolesRequest removeRoles(List<String> removeRoles) {
    this.removeRoles = removeRoles;
    return this;
  }

  public ModifyMembershipRolesRequest addRemoveRolesItem(String removeRolesItem) {
    if (this.removeRoles == null) {
      this.removeRoles = new ArrayList<>();
    }
    this.removeRoles.add(removeRolesItem);
    return this;
  }

  /**
   * The &#x60;name&#x60;s of the &#x60;MembershipRole&#x60;s to be removed. Adding or removing roles in the same request as updating roles is not supported. It is not possible to remove the &#x60;MEMBER&#x60; &#x60;MembershipRole&#x60;. If you wish to delete a &#x60;Membership&#x60;, call MembershipsService.DeleteMembership instead. Must not contain &#x60;MEMBER&#x60;. Must not be set if &#x60;update_roles_params&#x60; is set.
   * @return removeRoles
   */
  @javax.annotation.Nullable
  public List<String> getRemoveRoles() {
    return removeRoles;
  }

  public void setRemoveRoles(List<String> removeRoles) {
    this.removeRoles = removeRoles;
  }


  public ModifyMembershipRolesRequest updateRolesParams(List<UpdateMembershipRolesParams> updateRolesParams) {
    this.updateRolesParams = updateRolesParams;
    return this;
  }

  public ModifyMembershipRolesRequest addUpdateRolesParamsItem(UpdateMembershipRolesParams updateRolesParamsItem) {
    if (this.updateRolesParams == null) {
      this.updateRolesParams = new ArrayList<>();
    }
    this.updateRolesParams.add(updateRolesParamsItem);
    return this;
  }

  /**
   * The &#x60;MembershipRole&#x60;s to be updated. Updating roles in the same request as adding or removing roles is not supported. Must not be set if either &#x60;add_roles&#x60; or &#x60;remove_roles&#x60; is set.
   * @return updateRolesParams
   */
  @javax.annotation.Nullable
  public List<UpdateMembershipRolesParams> getUpdateRolesParams() {
    return updateRolesParams;
  }

  public void setUpdateRolesParams(List<UpdateMembershipRolesParams> updateRolesParams) {
    this.updateRolesParams = updateRolesParams;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModifyMembershipRolesRequest modifyMembershipRolesRequest = (ModifyMembershipRolesRequest) o;
    return Objects.equals(this.addRoles, modifyMembershipRolesRequest.addRoles) &&
        Objects.equals(this.removeRoles, modifyMembershipRolesRequest.removeRoles) &&
        Objects.equals(this.updateRolesParams, modifyMembershipRolesRequest.updateRolesParams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addRoles, removeRoles, updateRolesParams);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModifyMembershipRolesRequest {\n");
    sb.append("    addRoles: ").append(toIndentedString(addRoles)).append("\n");
    sb.append("    removeRoles: ").append(toIndentedString(removeRoles)).append("\n");
    sb.append("    updateRolesParams: ").append(toIndentedString(updateRolesParams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addRoles");
    openapiFields.add("removeRoles");
    openapiFields.add("updateRolesParams");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModifyMembershipRolesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModifyMembershipRolesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModifyMembershipRolesRequest is not found in the empty JSON string", ModifyMembershipRolesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModifyMembershipRolesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModifyMembershipRolesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("addRoles") != null && !jsonObj.get("addRoles").isJsonNull()) {
        JsonArray jsonArrayaddRoles = jsonObj.getAsJsonArray("addRoles");
        if (jsonArrayaddRoles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addRoles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addRoles` to be an array in the JSON string but got `%s`", jsonObj.get("addRoles").toString()));
          }

          // validate the optional field `addRoles` (array)
          for (int i = 0; i < jsonArrayaddRoles.size(); i++) {
            MembershipRole.validateJsonElement(jsonArrayaddRoles.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("removeRoles") != null && !jsonObj.get("removeRoles").isJsonNull() && !jsonObj.get("removeRoles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `removeRoles` to be an array in the JSON string but got `%s`", jsonObj.get("removeRoles").toString()));
      }
      if (jsonObj.get("updateRolesParams") != null && !jsonObj.get("updateRolesParams").isJsonNull()) {
        JsonArray jsonArrayupdateRolesParams = jsonObj.getAsJsonArray("updateRolesParams");
        if (jsonArrayupdateRolesParams != null) {
          // ensure the json data is an array
          if (!jsonObj.get("updateRolesParams").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `updateRolesParams` to be an array in the JSON string but got `%s`", jsonObj.get("updateRolesParams").toString()));
          }

          // validate the optional field `updateRolesParams` (array)
          for (int i = 0; i < jsonArrayupdateRolesParams.size(); i++) {
            UpdateMembershipRolesParams.validateJsonElement(jsonArrayupdateRolesParams.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModifyMembershipRolesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModifyMembershipRolesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModifyMembershipRolesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModifyMembershipRolesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ModifyMembershipRolesRequest>() {
           @Override
           public void write(JsonWriter out, ModifyMembershipRolesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModifyMembershipRolesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModifyMembershipRolesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModifyMembershipRolesRequest
   * @throws IOException if the JSON string is invalid with respect to ModifyMembershipRolesRequest
   */
  public static ModifyMembershipRolesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModifyMembershipRolesRequest.class);
  }

  /**
   * Convert an instance of ModifyMembershipRolesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

