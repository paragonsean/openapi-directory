# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_key import EntityKey
from openapi_server.models.membership_role import MembershipRole
from openapi_server import util


class MembershipRelation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_name: str=None, group: str=None, group_key: EntityKey=None, labels: Dict[str, str]=None, membership: str=None, roles: List[MembershipRole]=None):
        """MembershipRelation - a model defined in OpenAPI

        :param description: The description of this MembershipRelation.
        :param display_name: The display_name of this MembershipRelation.
        :param group: The group of this MembershipRelation.
        :param group_key: The group_key of this MembershipRelation.
        :param labels: The labels of this MembershipRelation.
        :param membership: The membership of this MembershipRelation.
        :param roles: The roles of this MembershipRelation.
        """
        self.openapi_types = {
            'description': str,
            'display_name': str,
            'group': str,
            'group_key': EntityKey,
            'labels': Dict[str, str],
            'membership': str,
            'roles': List[MembershipRole]
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'displayName',
            'group': 'group',
            'group_key': 'groupKey',
            'labels': 'labels',
            'membership': 'membership',
            'roles': 'roles'
        }

        self._description = description
        self._display_name = display_name
        self._group = group
        self._group_key = group_key
        self._labels = labels
        self._membership = membership
        self._roles = roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MembershipRelation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MembershipRelation of this MembershipRelation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this MembershipRelation.

        An extended description to help users determine the purpose of a `Group`.

        :return: The description of this MembershipRelation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MembershipRelation.

        An extended description to help users determine the purpose of a `Group`.

        :param description: The description of this MembershipRelation.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this MembershipRelation.

        The display name of the `Group`.

        :return: The display_name of this MembershipRelation.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MembershipRelation.

        The display name of the `Group`.

        :param display_name: The display_name of this MembershipRelation.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def group(self):
        """Gets the group of this MembershipRelation.

        The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Group`. Shall be of the form `groups/{group_id}`.

        :return: The group of this MembershipRelation.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this MembershipRelation.

        The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Group`. Shall be of the form `groups/{group_id}`.

        :param group: The group of this MembershipRelation.
        :type group: str
        """

        self._group = group

    @property
    def group_key(self):
        """Gets the group_key of this MembershipRelation.


        :return: The group_key of this MembershipRelation.
        :rtype: EntityKey
        """
        return self._group_key

    @group_key.setter
    def group_key(self, group_key):
        """Sets the group_key of this MembershipRelation.


        :param group_key: The group_key of this MembershipRelation.
        :type group_key: EntityKey
        """

        self._group_key = group_key

    @property
    def labels(self):
        """Gets the labels of this MembershipRelation.

        One or more label entries that apply to the Group. Currently supported labels contain a key with an empty value.

        :return: The labels of this MembershipRelation.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this MembershipRelation.

        One or more label entries that apply to the Group. Currently supported labels contain a key with an empty value.

        :param labels: The labels of this MembershipRelation.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def membership(self):
        """Gets the membership of this MembershipRelation.

        The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Membership`. Shall be of the form `groups/{group_id}/memberships/{membership_id}`.

        :return: The membership of this MembershipRelation.
        :rtype: str
        """
        return self._membership

    @membership.setter
    def membership(self, membership):
        """Sets the membership of this MembershipRelation.

        The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Membership`. Shall be of the form `groups/{group_id}/memberships/{membership_id}`.

        :param membership: The membership of this MembershipRelation.
        :type membership: str
        """

        self._membership = membership

    @property
    def roles(self):
        """Gets the roles of this MembershipRelation.

        The `MembershipRole`s that apply to the `Membership`.

        :return: The roles of this MembershipRelation.
        :rtype: List[MembershipRole]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this MembershipRelation.

        The `MembershipRole`s that apply to the `Membership`.

        :param roles: The roles of this MembershipRelation.
        :type roles: List[MembershipRole]
        """

        self._roles = roles
