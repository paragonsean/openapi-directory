# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.restriction_evaluation import RestrictionEvaluation
from openapi_server import util


class MemberRestriction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evaluation: RestrictionEvaluation=None, query: str=None):
        """MemberRestriction - a model defined in OpenAPI

        :param evaluation: The evaluation of this MemberRestriction.
        :param query: The query of this MemberRestriction.
        """
        self.openapi_types = {
            'evaluation': RestrictionEvaluation,
            'query': str
        }

        self.attribute_map = {
            'evaluation': 'evaluation',
            'query': 'query'
        }

        self._evaluation = evaluation
        self._query = query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MemberRestriction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MemberRestriction of this MemberRestriction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evaluation(self):
        """Gets the evaluation of this MemberRestriction.


        :return: The evaluation of this MemberRestriction.
        :rtype: RestrictionEvaluation
        """
        return self._evaluation

    @evaluation.setter
    def evaluation(self, evaluation):
        """Sets the evaluation of this MemberRestriction.


        :param evaluation: The evaluation of this MemberRestriction.
        :type evaluation: RestrictionEvaluation
        """

        self._evaluation = evaluation

    @property
    def query(self):
        """Gets the query of this MemberRestriction.

        Member Restriction as defined by CEL expression. Supported restrictions are: `member.customer_id` and `member.type`. Valid values for `member.type` are `1`, `2` and `3`. They correspond to USER, SERVICE_ACCOUNT, and GROUP respectively. The value for `member.customer_id` only supports `groupCustomerId()` currently which means the customer id of the group will be used for restriction. Supported operators are `&&`, `||` and `==`, corresponding to AND, OR, and EQUAL. Examples: Allow only service accounts of given customer to be members. `member.type == 2 && member.customer_id == groupCustomerId()` Allow only users or groups to be members. `member.type == 1 || member.type == 3`

        :return: The query of this MemberRestriction.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this MemberRestriction.

        Member Restriction as defined by CEL expression. Supported restrictions are: `member.customer_id` and `member.type`. Valid values for `member.type` are `1`, `2` and `3`. They correspond to USER, SERVICE_ACCOUNT, and GROUP respectively. The value for `member.customer_id` only supports `groupCustomerId()` currently which means the customer id of the group will be used for restriction. Supported operators are `&&`, `||` and `==`, corresponding to AND, OR, and EQUAL. Examples: Allow only service accounts of given customer to be members. `member.type == 2 && member.customer_id == groupCustomerId()` Allow only users or groups to be members. `member.type == 1 || member.type == 3`

        :param query: The query of this MemberRestriction.
        :type query: str
        """

        self._query = query
