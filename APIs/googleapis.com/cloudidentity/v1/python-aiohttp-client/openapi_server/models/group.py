# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dynamic_group_metadata import DynamicGroupMetadata
from openapi_server.models.entity_key import EntityKey
from openapi_server import util


class Group(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_group_keys: List[EntityKey]=None, create_time: str=None, description: str=None, display_name: str=None, dynamic_group_metadata: DynamicGroupMetadata=None, group_key: EntityKey=None, labels: Dict[str, str]=None, name: str=None, parent: str=None, update_time: str=None):
        """Group - a model defined in OpenAPI

        :param additional_group_keys: The additional_group_keys of this Group.
        :param create_time: The create_time of this Group.
        :param description: The description of this Group.
        :param display_name: The display_name of this Group.
        :param dynamic_group_metadata: The dynamic_group_metadata of this Group.
        :param group_key: The group_key of this Group.
        :param labels: The labels of this Group.
        :param name: The name of this Group.
        :param parent: The parent of this Group.
        :param update_time: The update_time of this Group.
        """
        self.openapi_types = {
            'additional_group_keys': List[EntityKey],
            'create_time': str,
            'description': str,
            'display_name': str,
            'dynamic_group_metadata': DynamicGroupMetadata,
            'group_key': EntityKey,
            'labels': Dict[str, str],
            'name': str,
            'parent': str,
            'update_time': str
        }

        self.attribute_map = {
            'additional_group_keys': 'additionalGroupKeys',
            'create_time': 'createTime',
            'description': 'description',
            'display_name': 'displayName',
            'dynamic_group_metadata': 'dynamicGroupMetadata',
            'group_key': 'groupKey',
            'labels': 'labels',
            'name': 'name',
            'parent': 'parent',
            'update_time': 'updateTime'
        }

        self._additional_group_keys = additional_group_keys
        self._create_time = create_time
        self._description = description
        self._display_name = display_name
        self._dynamic_group_metadata = dynamic_group_metadata
        self._group_key = group_key
        self._labels = labels
        self._name = name
        self._parent = parent
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Group of this Group.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_group_keys(self):
        """Gets the additional_group_keys of this Group.

        Output only. Additional group keys associated with the Group.

        :return: The additional_group_keys of this Group.
        :rtype: List[EntityKey]
        """
        return self._additional_group_keys

    @additional_group_keys.setter
    def additional_group_keys(self, additional_group_keys):
        """Sets the additional_group_keys of this Group.

        Output only. Additional group keys associated with the Group.

        :param additional_group_keys: The additional_group_keys of this Group.
        :type additional_group_keys: List[EntityKey]
        """

        self._additional_group_keys = additional_group_keys

    @property
    def create_time(self):
        """Gets the create_time of this Group.

        Output only. The time when the `Group` was created.

        :return: The create_time of this Group.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Group.

        Output only. The time when the `Group` was created.

        :param create_time: The create_time of this Group.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Group.

        An extended description to help users determine the purpose of a `Group`. Must not be longer than 4,096 characters.

        :return: The description of this Group.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Group.

        An extended description to help users determine the purpose of a `Group`. Must not be longer than 4,096 characters.

        :param description: The description of this Group.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Group.

        The display name of the `Group`.

        :return: The display_name of this Group.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Group.

        The display name of the `Group`.

        :param display_name: The display_name of this Group.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def dynamic_group_metadata(self):
        """Gets the dynamic_group_metadata of this Group.


        :return: The dynamic_group_metadata of this Group.
        :rtype: DynamicGroupMetadata
        """
        return self._dynamic_group_metadata

    @dynamic_group_metadata.setter
    def dynamic_group_metadata(self, dynamic_group_metadata):
        """Sets the dynamic_group_metadata of this Group.


        :param dynamic_group_metadata: The dynamic_group_metadata of this Group.
        :type dynamic_group_metadata: DynamicGroupMetadata
        """

        self._dynamic_group_metadata = dynamic_group_metadata

    @property
    def group_key(self):
        """Gets the group_key of this Group.


        :return: The group_key of this Group.
        :rtype: EntityKey
        """
        return self._group_key

    @group_key.setter
    def group_key(self, group_key):
        """Sets the group_key of this Group.


        :param group_key: The group_key of this Group.
        :type group_key: EntityKey
        """

        self._group_key = group_key

    @property
    def labels(self):
        """Gets the labels of this Group.

        Required. One or more label entries that apply to the Group. Currently supported labels contain a key with an empty value. Google Groups are the default type of group and have a label with a key of `cloudidentity.googleapis.com/groups.discussion_forum` and an empty value. Existing Google Groups can have an additional label with a key of `cloudidentity.googleapis.com/groups.security` and an empty value added to them. **This is an immutable change and the security label cannot be removed once added.** Dynamic groups have a label with a key of `cloudidentity.googleapis.com/groups.dynamic`. Identity-mapped groups for Cloud Search have a label with a key of `system/groups/external` and an empty value.

        :return: The labels of this Group.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Group.

        Required. One or more label entries that apply to the Group. Currently supported labels contain a key with an empty value. Google Groups are the default type of group and have a label with a key of `cloudidentity.googleapis.com/groups.discussion_forum` and an empty value. Existing Google Groups can have an additional label with a key of `cloudidentity.googleapis.com/groups.security` and an empty value added to them. **This is an immutable change and the security label cannot be removed once added.** Dynamic groups have a label with a key of `cloudidentity.googleapis.com/groups.dynamic`. Identity-mapped groups for Cloud Search have a label with a key of `system/groups/external` and an empty value.

        :param labels: The labels of this Group.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Group.

        Output only. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Group`. Shall be of the form `groups/{group}`.

        :return: The name of this Group.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.

        Output only. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Group`. Shall be of the form `groups/{group}`.

        :param name: The name of this Group.
        :type name: str
        """

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this Group.

        Required. Immutable. The resource name of the entity under which this `Group` resides in the Cloud Identity resource hierarchy. Must be of the form `identitysources/{identity_source}` for external [identity-mapped groups](https://support.google.com/a/answer/9039510) or `customers/{customer_id}` for Google Groups. The `customer_id` must begin with \"C\" (for example, 'C046psxkn'). [Find your customer ID.] (https://support.google.com/cloudidentity/answer/10070793)

        :return: The parent of this Group.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Group.

        Required. Immutable. The resource name of the entity under which this `Group` resides in the Cloud Identity resource hierarchy. Must be of the form `identitysources/{identity_source}` for external [identity-mapped groups](https://support.google.com/a/answer/9039510) or `customers/{customer_id}` for Google Groups. The `customer_id` must begin with \"C\" (for example, 'C046psxkn'). [Find your customer ID.] (https://support.google.com/cloudidentity/answer/10070793)

        :param parent: The parent of this Group.
        :type parent: str
        """

        self._parent = parent

    @property
    def update_time(self):
        """Gets the update_time of this Group.

        Output only. The time when the `Group` was last updated.

        :return: The update_time of this Group.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Group.

        Output only. The time when the `Group` was last updated.

        :param update_time: The update_time of this Group.
        :type update_time: str
        """

        self._update_time = update_time
