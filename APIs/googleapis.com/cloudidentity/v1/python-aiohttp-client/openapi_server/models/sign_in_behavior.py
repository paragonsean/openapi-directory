# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SignInBehavior(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, redirect_condition: str=None):
        """SignInBehavior - a model defined in OpenAPI

        :param redirect_condition: The redirect_condition of this SignInBehavior.
        """
        self.openapi_types = {
            'redirect_condition': str
        }

        self.attribute_map = {
            'redirect_condition': 'redirectCondition'
        }

        self._redirect_condition = redirect_condition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SignInBehavior':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SignInBehavior of this SignInBehavior.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def redirect_condition(self):
        """Gets the redirect_condition of this SignInBehavior.

        When to redirect sign-ins to the IdP.

        :return: The redirect_condition of this SignInBehavior.
        :rtype: str
        """
        return self._redirect_condition

    @redirect_condition.setter
    def redirect_condition(self, redirect_condition):
        """Sets the redirect_condition of this SignInBehavior.

        When to redirect sign-ins to the IdP.

        :param redirect_condition: The redirect_condition of this SignInBehavior.
        :type redirect_condition: str
        """
        allowed_values = ["REDIRECT_CONDITION_UNSPECIFIED", "NEVER"]  # noqa: E501
        if redirect_condition not in allowed_values:
            raise ValueError(
                "Invalid value for `redirect_condition` ({0}), must be one of {1}"
                .format(redirect_condition, allowed_values)
            )

        self._redirect_condition = redirect_condition
