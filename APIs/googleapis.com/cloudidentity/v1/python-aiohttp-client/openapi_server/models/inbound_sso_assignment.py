# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.saml_sso_info import SamlSsoInfo
from openapi_server.models.sign_in_behavior import SignInBehavior
from openapi_server import util


class InboundSsoAssignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer: str=None, name: str=None, rank: int=None, saml_sso_info: SamlSsoInfo=None, sign_in_behavior: SignInBehavior=None, sso_mode: str=None, target_group: str=None, target_org_unit: str=None):
        """InboundSsoAssignment - a model defined in OpenAPI

        :param customer: The customer of this InboundSsoAssignment.
        :param name: The name of this InboundSsoAssignment.
        :param rank: The rank of this InboundSsoAssignment.
        :param saml_sso_info: The saml_sso_info of this InboundSsoAssignment.
        :param sign_in_behavior: The sign_in_behavior of this InboundSsoAssignment.
        :param sso_mode: The sso_mode of this InboundSsoAssignment.
        :param target_group: The target_group of this InboundSsoAssignment.
        :param target_org_unit: The target_org_unit of this InboundSsoAssignment.
        """
        self.openapi_types = {
            'customer': str,
            'name': str,
            'rank': int,
            'saml_sso_info': SamlSsoInfo,
            'sign_in_behavior': SignInBehavior,
            'sso_mode': str,
            'target_group': str,
            'target_org_unit': str
        }

        self.attribute_map = {
            'customer': 'customer',
            'name': 'name',
            'rank': 'rank',
            'saml_sso_info': 'samlSsoInfo',
            'sign_in_behavior': 'signInBehavior',
            'sso_mode': 'ssoMode',
            'target_group': 'targetGroup',
            'target_org_unit': 'targetOrgUnit'
        }

        self._customer = customer
        self._name = name
        self._rank = rank
        self._saml_sso_info = saml_sso_info
        self._sign_in_behavior = sign_in_behavior
        self._sso_mode = sso_mode
        self._target_group = target_group
        self._target_org_unit = target_org_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InboundSsoAssignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InboundSsoAssignment of this InboundSsoAssignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer(self):
        """Gets the customer of this InboundSsoAssignment.

        Immutable. The customer. For example: `customers/C0123abc`.

        :return: The customer of this InboundSsoAssignment.
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this InboundSsoAssignment.

        Immutable. The customer. For example: `customers/C0123abc`.

        :param customer: The customer of this InboundSsoAssignment.
        :type customer: str
        """

        self._customer = customer

    @property
    def name(self):
        """Gets the name of this InboundSsoAssignment.

        Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Inbound SSO Assignment.

        :return: The name of this InboundSsoAssignment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InboundSsoAssignment.

        Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Inbound SSO Assignment.

        :param name: The name of this InboundSsoAssignment.
        :type name: str
        """

        self._name = name

    @property
    def rank(self):
        """Gets the rank of this InboundSsoAssignment.

        Must be zero (which is the default value so it can be omitted) for assignments with `target_org_unit` set and must be greater-than-or-equal-to one for assignments with `target_group` set.

        :return: The rank of this InboundSsoAssignment.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this InboundSsoAssignment.

        Must be zero (which is the default value so it can be omitted) for assignments with `target_org_unit` set and must be greater-than-or-equal-to one for assignments with `target_group` set.

        :param rank: The rank of this InboundSsoAssignment.
        :type rank: int
        """

        self._rank = rank

    @property
    def saml_sso_info(self):
        """Gets the saml_sso_info of this InboundSsoAssignment.


        :return: The saml_sso_info of this InboundSsoAssignment.
        :rtype: SamlSsoInfo
        """
        return self._saml_sso_info

    @saml_sso_info.setter
    def saml_sso_info(self, saml_sso_info):
        """Sets the saml_sso_info of this InboundSsoAssignment.


        :param saml_sso_info: The saml_sso_info of this InboundSsoAssignment.
        :type saml_sso_info: SamlSsoInfo
        """

        self._saml_sso_info = saml_sso_info

    @property
    def sign_in_behavior(self):
        """Gets the sign_in_behavior of this InboundSsoAssignment.


        :return: The sign_in_behavior of this InboundSsoAssignment.
        :rtype: SignInBehavior
        """
        return self._sign_in_behavior

    @sign_in_behavior.setter
    def sign_in_behavior(self, sign_in_behavior):
        """Sets the sign_in_behavior of this InboundSsoAssignment.


        :param sign_in_behavior: The sign_in_behavior of this InboundSsoAssignment.
        :type sign_in_behavior: SignInBehavior
        """

        self._sign_in_behavior = sign_in_behavior

    @property
    def sso_mode(self):
        """Gets the sso_mode of this InboundSsoAssignment.

        Inbound SSO behavior.

        :return: The sso_mode of this InboundSsoAssignment.
        :rtype: str
        """
        return self._sso_mode

    @sso_mode.setter
    def sso_mode(self, sso_mode):
        """Sets the sso_mode of this InboundSsoAssignment.

        Inbound SSO behavior.

        :param sso_mode: The sso_mode of this InboundSsoAssignment.
        :type sso_mode: str
        """
        allowed_values = ["SSO_MODE_UNSPECIFIED", "SSO_OFF", "SAML_SSO", "DOMAIN_WIDE_SAML_IF_ENABLED"]  # noqa: E501
        if sso_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `sso_mode` ({0}), must be one of {1}"
                .format(sso_mode, allowed_values)
            )

        self._sso_mode = sso_mode

    @property
    def target_group(self):
        """Gets the target_group of this InboundSsoAssignment.

        Immutable. Must be of the form `groups/{group}`.

        :return: The target_group of this InboundSsoAssignment.
        :rtype: str
        """
        return self._target_group

    @target_group.setter
    def target_group(self, target_group):
        """Sets the target_group of this InboundSsoAssignment.

        Immutable. Must be of the form `groups/{group}`.

        :param target_group: The target_group of this InboundSsoAssignment.
        :type target_group: str
        """

        self._target_group = target_group

    @property
    def target_org_unit(self):
        """Gets the target_org_unit of this InboundSsoAssignment.

        Immutable. Must be of the form `orgUnits/{org_unit}`.

        :return: The target_org_unit of this InboundSsoAssignment.
        :rtype: str
        """
        return self._target_org_unit

    @target_org_unit.setter
    def target_org_unit(self, target_org_unit):
        """Sets the target_org_unit of this InboundSsoAssignment.

        Immutable. Must be of the form `orgUnits/{org_unit}`.

        :param target_org_unit: The target_org_unit of this InboundSsoAssignment.
        :type target_org_unit: str
        """

        self._target_org_unit = target_org_unit
