/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DynamicGroupQuery model module.
 * @module model/DynamicGroupQuery
 * @version v1
 */
class DynamicGroupQuery {
    /**
     * Constructs a new <code>DynamicGroupQuery</code>.
     * Defines a query on a resource.
     * @alias module:model/DynamicGroupQuery
     */
    constructor() { 
        
        DynamicGroupQuery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DynamicGroupQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DynamicGroupQuery} obj Optional instance to populate.
     * @return {module:model/DynamicGroupQuery} The populated <code>DynamicGroupQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DynamicGroupQuery();

            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = ApiClient.convertToType(data['resourceType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DynamicGroupQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DynamicGroupQuery</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // ensure the json data is a string
        if (data['resourceType'] && !(typeof data['resourceType'] === 'string' || data['resourceType'] instanceof String)) {
            throw new Error("Expected the field `resourceType` to be a primitive type in the JSON string but got " + data['resourceType']);
        }

        return true;
    }


}



/**
 * Query that determines the memberships of the dynamic group. Examples: All users with at least one `organizations.department` of engineering. `user.organizations.exists(org, org.department=='engineering')` All users with at least one location that has `area` of `foo` and `building_id` of `bar`. `user.locations.exists(loc, loc.area=='foo' && loc.building_id=='bar')` All users with any variation of the name John Doe (case-insensitive queries add `equalsIgnoreCase()` to the value being queried). `user.name.value.equalsIgnoreCase('jOhn DoE')`
 * @member {String} query
 */
DynamicGroupQuery.prototype['query'] = undefined;

/**
 * Resource type for the Dynamic Group Query
 * @member {module:model/DynamicGroupQuery.ResourceTypeEnum} resourceType
 */
DynamicGroupQuery.prototype['resourceType'] = undefined;





/**
 * Allowed values for the <code>resourceType</code> property.
 * @enum {String}
 * @readonly
 */
DynamicGroupQuery['ResourceTypeEnum'] = {

    /**
     * value: "RESOURCE_TYPE_UNSPECIFIED"
     * @const
     */
    "RESOURCE_TYPE_UNSPECIFIED": "RESOURCE_TYPE_UNSPECIFIED",

    /**
     * value: "USER"
     * @const
     */
    "USER": "USER"
};



export default DynamicGroupQuery;

