/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DynamicGroupQuery from './DynamicGroupQuery';
import DynamicGroupStatus from './DynamicGroupStatus';

/**
 * The DynamicGroupMetadata model module.
 * @module model/DynamicGroupMetadata
 * @version v1
 */
class DynamicGroupMetadata {
    /**
     * Constructs a new <code>DynamicGroupMetadata</code>.
     * Dynamic group metadata like queries and status.
     * @alias module:model/DynamicGroupMetadata
     */
    constructor() { 
        
        DynamicGroupMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DynamicGroupMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DynamicGroupMetadata} obj Optional instance to populate.
     * @return {module:model/DynamicGroupMetadata} The populated <code>DynamicGroupMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DynamicGroupMetadata();

            if (data.hasOwnProperty('queries')) {
                obj['queries'] = ApiClient.convertToType(data['queries'], [DynamicGroupQuery]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = DynamicGroupStatus.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DynamicGroupMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DynamicGroupMetadata</code>.
     */
    static validateJSON(data) {
        if (data['queries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['queries'])) {
                throw new Error("Expected the field `queries` to be an array in the JSON data but got " + data['queries']);
            }
            // validate the optional field `queries` (array)
            for (const item of data['queries']) {
                DynamicGroupQuery.validateJSON(item);
            };
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          DynamicGroupStatus.validateJSON(data['status']);
        }

        return true;
    }


}



/**
 * Memberships will be the union of all queries. Only one entry with USER resource is currently supported. Customers can create up to 500 dynamic groups.
 * @member {Array.<module:model/DynamicGroupQuery>} queries
 */
DynamicGroupMetadata.prototype['queries'] = undefined;

/**
 * @member {module:model/DynamicGroupStatus} status
 */
DynamicGroupMetadata.prototype['status'] = undefined;






export default DynamicGroupMetadata;

