/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MembershipRole from './MembershipRole';
import UpdateMembershipRolesParams from './UpdateMembershipRolesParams';

/**
 * The ModifyMembershipRolesRequest model module.
 * @module model/ModifyMembershipRolesRequest
 * @version v1
 */
class ModifyMembershipRolesRequest {
    /**
     * Constructs a new <code>ModifyMembershipRolesRequest</code>.
     * The request message for MembershipsService.ModifyMembershipRoles.
     * @alias module:model/ModifyMembershipRolesRequest
     */
    constructor() { 
        
        ModifyMembershipRolesRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ModifyMembershipRolesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModifyMembershipRolesRequest} obj Optional instance to populate.
     * @return {module:model/ModifyMembershipRolesRequest} The populated <code>ModifyMembershipRolesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModifyMembershipRolesRequest();

            if (data.hasOwnProperty('addRoles')) {
                obj['addRoles'] = ApiClient.convertToType(data['addRoles'], [MembershipRole]);
            }
            if (data.hasOwnProperty('removeRoles')) {
                obj['removeRoles'] = ApiClient.convertToType(data['removeRoles'], ['String']);
            }
            if (data.hasOwnProperty('updateRolesParams')) {
                obj['updateRolesParams'] = ApiClient.convertToType(data['updateRolesParams'], [UpdateMembershipRolesParams]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ModifyMembershipRolesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ModifyMembershipRolesRequest</code>.
     */
    static validateJSON(data) {
        if (data['addRoles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['addRoles'])) {
                throw new Error("Expected the field `addRoles` to be an array in the JSON data but got " + data['addRoles']);
            }
            // validate the optional field `addRoles` (array)
            for (const item of data['addRoles']) {
                MembershipRole.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['removeRoles'])) {
            throw new Error("Expected the field `removeRoles` to be an array in the JSON data but got " + data['removeRoles']);
        }
        if (data['updateRolesParams']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['updateRolesParams'])) {
                throw new Error("Expected the field `updateRolesParams` to be an array in the JSON data but got " + data['updateRolesParams']);
            }
            // validate the optional field `updateRolesParams` (array)
            for (const item of data['updateRolesParams']) {
                UpdateMembershipRolesParams.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The `MembershipRole`s to be added. Adding or removing roles in the same request as updating roles is not supported. Must not be set if `update_roles_params` is set.
 * @member {Array.<module:model/MembershipRole>} addRoles
 */
ModifyMembershipRolesRequest.prototype['addRoles'] = undefined;

/**
 * The `name`s of the `MembershipRole`s to be removed. Adding or removing roles in the same request as updating roles is not supported. It is not possible to remove the `MEMBER` `MembershipRole`. If you wish to delete a `Membership`, call MembershipsService.DeleteMembership instead. Must not contain `MEMBER`. Must not be set if `update_roles_params` is set.
 * @member {Array.<String>} removeRoles
 */
ModifyMembershipRolesRequest.prototype['removeRoles'] = undefined;

/**
 * The `MembershipRole`s to be updated. Updating roles in the same request as adding or removing roles is not supported. Must not be set if either `add_roles` or `remove_roles` is set.
 * @member {Array.<module:model/UpdateMembershipRolesParams>} updateRolesParams
 */
ModifyMembershipRolesRequest.prototype['updateRolesParams'] = undefined;






export default ModifyMembershipRolesRequest;

