/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityKey from './EntityKey';
import MembershipRole from './MembershipRole';

/**
 * The Membership model module.
 * @module model/Membership
 * @version v1
 */
class Membership {
    /**
     * Constructs a new <code>Membership</code>.
     * A membership within the Cloud Identity Groups API. A &#x60;Membership&#x60; defines a relationship between a &#x60;Group&#x60; and an entity belonging to that &#x60;Group&#x60;, referred to as a \&quot;member\&quot;.
     * @alias module:model/Membership
     */
    constructor() { 
        
        Membership.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Membership</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Membership} obj Optional instance to populate.
     * @return {module:model/Membership} The populated <code>Membership</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Membership();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('deliverySetting')) {
                obj['deliverySetting'] = ApiClient.convertToType(data['deliverySetting'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('preferredMemberKey')) {
                obj['preferredMemberKey'] = EntityKey.constructFromObject(data['preferredMemberKey']);
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], [MembershipRole]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Membership</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Membership</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['deliverySetting'] && !(typeof data['deliverySetting'] === 'string' || data['deliverySetting'] instanceof String)) {
            throw new Error("Expected the field `deliverySetting` to be a primitive type in the JSON string but got " + data['deliverySetting']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `preferredMemberKey`
        if (data['preferredMemberKey']) { // data not null
          EntityKey.validateJSON(data['preferredMemberKey']);
        }
        if (data['roles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['roles'])) {
                throw new Error("Expected the field `roles` to be an array in the JSON data but got " + data['roles']);
            }
            // validate the optional field `roles` (array)
            for (const item of data['roles']) {
                MembershipRole.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. The time when the `Membership` was created.
 * @member {String} createTime
 */
Membership.prototype['createTime'] = undefined;

/**
 * Output only. Delivery setting associated with the membership.
 * @member {module:model/Membership.DeliverySettingEnum} deliverySetting
 */
Membership.prototype['deliverySetting'] = undefined;

/**
 * Output only. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Membership`. Shall be of the form `groups/{group}/memberships/{membership}`.
 * @member {String} name
 */
Membership.prototype['name'] = undefined;

/**
 * @member {module:model/EntityKey} preferredMemberKey
 */
Membership.prototype['preferredMemberKey'] = undefined;

/**
 * The `MembershipRole`s that apply to the `Membership`. If unspecified, defaults to a single `MembershipRole` with `name` `MEMBER`. Must not contain duplicate `MembershipRole`s with the same `name`.
 * @member {Array.<module:model/MembershipRole>} roles
 */
Membership.prototype['roles'] = undefined;

/**
 * Output only. The type of the membership.
 * @member {module:model/Membership.TypeEnum} type
 */
Membership.prototype['type'] = undefined;

/**
 * Output only. The time when the `Membership` was last updated.
 * @member {String} updateTime
 */
Membership.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>deliverySetting</code> property.
 * @enum {String}
 * @readonly
 */
Membership['DeliverySettingEnum'] = {

    /**
     * value: "DELIVERY_SETTING_UNSPECIFIED"
     * @const
     */
    "DELIVERY_SETTING_UNSPECIFIED": "DELIVERY_SETTING_UNSPECIFIED",

    /**
     * value: "ALL_MAIL"
     * @const
     */
    "ALL_MAIL": "ALL_MAIL",

    /**
     * value: "DIGEST"
     * @const
     */
    "DIGEST": "DIGEST",

    /**
     * value: "DAILY"
     * @const
     */
    "DAILY": "DAILY",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Membership['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "USER"
     * @const
     */
    "USER": "USER",

    /**
     * value: "SERVICE_ACCOUNT"
     * @const
     */
    "SERVICE_ACCOUNT": "SERVICE_ACCOUNT",

    /**
     * value: "GROUP"
     * @const
     */
    "GROUP": "GROUP",

    /**
     * value: "SHARED_DRIVE"
     * @const
     */
    "SHARED_DRIVE": "SHARED_DRIVE",

    /**
     * value: "OTHER"
     * @const
     */
    "OTHER": "OTHER"
};



export default Membership;

