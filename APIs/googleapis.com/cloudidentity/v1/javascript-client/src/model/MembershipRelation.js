/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityKey from './EntityKey';
import MembershipRole from './MembershipRole';

/**
 * The MembershipRelation model module.
 * @module model/MembershipRelation
 * @version v1
 */
class MembershipRelation {
    /**
     * Constructs a new <code>MembershipRelation</code>.
     * Message containing membership relation.
     * @alias module:model/MembershipRelation
     */
    constructor() { 
        
        MembershipRelation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MembershipRelation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MembershipRelation} obj Optional instance to populate.
     * @return {module:model/MembershipRelation} The populated <code>MembershipRelation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MembershipRelation();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], 'String');
            }
            if (data.hasOwnProperty('groupKey')) {
                obj['groupKey'] = EntityKey.constructFromObject(data['groupKey']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('membership')) {
                obj['membership'] = ApiClient.convertToType(data['membership'], 'String');
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], [MembershipRole]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MembershipRelation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MembershipRelation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['group'] && !(typeof data['group'] === 'string' || data['group'] instanceof String)) {
            throw new Error("Expected the field `group` to be a primitive type in the JSON string but got " + data['group']);
        }
        // validate the optional field `groupKey`
        if (data['groupKey']) { // data not null
          EntityKey.validateJSON(data['groupKey']);
        }
        // ensure the json data is a string
        if (data['membership'] && !(typeof data['membership'] === 'string' || data['membership'] instanceof String)) {
            throw new Error("Expected the field `membership` to be a primitive type in the JSON string but got " + data['membership']);
        }
        if (data['roles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['roles'])) {
                throw new Error("Expected the field `roles` to be an array in the JSON data but got " + data['roles']);
            }
            // validate the optional field `roles` (array)
            for (const item of data['roles']) {
                MembershipRole.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * An extended description to help users determine the purpose of a `Group`.
 * @member {String} description
 */
MembershipRelation.prototype['description'] = undefined;

/**
 * The display name of the `Group`.
 * @member {String} displayName
 */
MembershipRelation.prototype['displayName'] = undefined;

/**
 * The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Group`. Shall be of the form `groups/{group_id}`.
 * @member {String} group
 */
MembershipRelation.prototype['group'] = undefined;

/**
 * @member {module:model/EntityKey} groupKey
 */
MembershipRelation.prototype['groupKey'] = undefined;

/**
 * One or more label entries that apply to the Group. Currently supported labels contain a key with an empty value.
 * @member {Object.<String, String>} labels
 */
MembershipRelation.prototype['labels'] = undefined;

/**
 * The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Membership`. Shall be of the form `groups/{group_id}/memberships/{membership_id}`.
 * @member {String} membership
 */
MembershipRelation.prototype['membership'] = undefined;

/**
 * The `MembershipRole`s that apply to the `Membership`.
 * @member {Array.<module:model/MembershipRole>} roles
 */
MembershipRelation.prototype['roles'] = undefined;






export default MembershipRelation;

