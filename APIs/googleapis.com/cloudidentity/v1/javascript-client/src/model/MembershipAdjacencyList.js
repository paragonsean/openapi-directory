/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Membership from './Membership';

/**
 * The MembershipAdjacencyList model module.
 * @module model/MembershipAdjacencyList
 * @version v1
 */
class MembershipAdjacencyList {
    /**
     * Constructs a new <code>MembershipAdjacencyList</code>.
     * Membership graph&#39;s path information as an adjacency list.
     * @alias module:model/MembershipAdjacencyList
     */
    constructor() { 
        
        MembershipAdjacencyList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MembershipAdjacencyList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MembershipAdjacencyList} obj Optional instance to populate.
     * @return {module:model/MembershipAdjacencyList} The populated <code>MembershipAdjacencyList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MembershipAdjacencyList();

            if (data.hasOwnProperty('edges')) {
                obj['edges'] = ApiClient.convertToType(data['edges'], [Membership]);
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MembershipAdjacencyList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MembershipAdjacencyList</code>.
     */
    static validateJSON(data) {
        if (data['edges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['edges'])) {
                throw new Error("Expected the field `edges` to be an array in the JSON data but got " + data['edges']);
            }
            // validate the optional field `edges` (array)
            for (const item of data['edges']) {
                Membership.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['group'] && !(typeof data['group'] === 'string' || data['group'] instanceof String)) {
            throw new Error("Expected the field `group` to be a primitive type in the JSON string but got " + data['group']);
        }

        return true;
    }


}



/**
 * Each edge contains information about the member that belongs to this group. Note: Fields returned here will help identify the specific Membership resource (e.g name, preferred_member_key and role), but may not be a comprehensive list of all fields.
 * @member {Array.<module:model/Membership>} edges
 */
MembershipAdjacencyList.prototype['edges'] = undefined;

/**
 * Resource name of the group that the members belong to.
 * @member {String} group
 */
MembershipAdjacencyList.prototype['group'] = undefined;






export default MembershipAdjacencyList;

