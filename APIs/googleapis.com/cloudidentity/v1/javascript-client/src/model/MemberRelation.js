/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityKey from './EntityKey';
import TransitiveMembershipRole from './TransitiveMembershipRole';

/**
 * The MemberRelation model module.
 * @module model/MemberRelation
 * @version v1
 */
class MemberRelation {
    /**
     * Constructs a new <code>MemberRelation</code>.
     * Message representing a transitive membership of a group.
     * @alias module:model/MemberRelation
     */
    constructor() { 
        
        MemberRelation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MemberRelation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MemberRelation} obj Optional instance to populate.
     * @return {module:model/MemberRelation} The populated <code>MemberRelation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MemberRelation();

            if (data.hasOwnProperty('member')) {
                obj['member'] = ApiClient.convertToType(data['member'], 'String');
            }
            if (data.hasOwnProperty('preferredMemberKey')) {
                obj['preferredMemberKey'] = ApiClient.convertToType(data['preferredMemberKey'], [EntityKey]);
            }
            if (data.hasOwnProperty('relationType')) {
                obj['relationType'] = ApiClient.convertToType(data['relationType'], 'String');
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], [TransitiveMembershipRole]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MemberRelation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MemberRelation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['member'] && !(typeof data['member'] === 'string' || data['member'] instanceof String)) {
            throw new Error("Expected the field `member` to be a primitive type in the JSON string but got " + data['member']);
        }
        if (data['preferredMemberKey']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['preferredMemberKey'])) {
                throw new Error("Expected the field `preferredMemberKey` to be an array in the JSON data but got " + data['preferredMemberKey']);
            }
            // validate the optional field `preferredMemberKey` (array)
            for (const item of data['preferredMemberKey']) {
                EntityKey.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['relationType'] && !(typeof data['relationType'] === 'string' || data['relationType'] instanceof String)) {
            throw new Error("Expected the field `relationType` to be a primitive type in the JSON string but got " + data['relationType']);
        }
        if (data['roles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['roles'])) {
                throw new Error("Expected the field `roles` to be an array in the JSON data but got " + data['roles']);
            }
            // validate the optional field `roles` (array)
            for (const item of data['roles']) {
                TransitiveMembershipRole.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Resource name for this member.
 * @member {String} member
 */
MemberRelation.prototype['member'] = undefined;

/**
 * Entity key has an id and a namespace. In case of discussion forums, the id will be an email address without a namespace.
 * @member {Array.<module:model/EntityKey>} preferredMemberKey
 */
MemberRelation.prototype['preferredMemberKey'] = undefined;

/**
 * The relation between the group and the transitive member.
 * @member {module:model/MemberRelation.RelationTypeEnum} relationType
 */
MemberRelation.prototype['relationType'] = undefined;

/**
 * The membership role details (i.e name of role and expiry time).
 * @member {Array.<module:model/TransitiveMembershipRole>} roles
 */
MemberRelation.prototype['roles'] = undefined;





/**
 * Allowed values for the <code>relationType</code> property.
 * @enum {String}
 * @readonly
 */
MemberRelation['RelationTypeEnum'] = {

    /**
     * value: "RELATION_TYPE_UNSPECIFIED"
     * @const
     */
    "RELATION_TYPE_UNSPECIFIED": "RELATION_TYPE_UNSPECIFIED",

    /**
     * value: "DIRECT"
     * @const
     */
    "DIRECT": "DIRECT",

    /**
     * value: "INDIRECT"
     * @const
     */
    "INDIRECT": "INDIRECT",

    /**
     * value: "DIRECT_AND_INDIRECT"
     * @const
     */
    "DIRECT_AND_INDIRECT": "DIRECT_AND_INDIRECT"
};



export default MemberRelation;

