/**
 * Cloud Identity API
 * API for provisioning and managing identity resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RestrictionEvaluation from './RestrictionEvaluation';

/**
 * The MemberRestriction model module.
 * @module model/MemberRestriction
 * @version v1
 */
class MemberRestriction {
    /**
     * Constructs a new <code>MemberRestriction</code>.
     * The definition of MemberRestriction
     * @alias module:model/MemberRestriction
     */
    constructor() { 
        
        MemberRestriction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MemberRestriction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MemberRestriction} obj Optional instance to populate.
     * @return {module:model/MemberRestriction} The populated <code>MemberRestriction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MemberRestriction();

            if (data.hasOwnProperty('evaluation')) {
                obj['evaluation'] = RestrictionEvaluation.constructFromObject(data['evaluation']);
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MemberRestriction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MemberRestriction</code>.
     */
    static validateJSON(data) {
        // validate the optional field `evaluation`
        if (data['evaluation']) { // data not null
          RestrictionEvaluation.validateJSON(data['evaluation']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }

        return true;
    }


}



/**
 * @member {module:model/RestrictionEvaluation} evaluation
 */
MemberRestriction.prototype['evaluation'] = undefined;

/**
 * Member Restriction as defined by CEL expression. Supported restrictions are: `member.customer_id` and `member.type`. Valid values for `member.type` are `1`, `2` and `3`. They correspond to USER, SERVICE_ACCOUNT, and GROUP respectively. The value for `member.customer_id` only supports `groupCustomerId()` currently which means the customer id of the group will be used for restriction. Supported operators are `&&`, `||` and `==`, corresponding to AND, OR, and EQUAL. Examples: Allow only service accounts of given customer to be members. `member.type == 2 && member.customer_id == groupCustomerId()` Allow only users or groups to be members. `member.type == 1 || member.type == 3`
 * @member {String} query
 */
MemberRestriction.prototype['query'] = undefined;






export default MemberRestriction;

