/*
 * Web Fonts Developer API
 * The Google Web Fonts Developer API lets you retrieve information about web fonts served by Google.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Axis;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata describing a family of fonts.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:47.640896-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Webfont {
  public static final String SERIALIZED_NAME_AXES = "axes";
  @SerializedName(SERIALIZED_NAME_AXES)
  private List<Axis> axes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_FAMILY = "family";
  @SerializedName(SERIALIZED_NAME_FAMILY)
  private String family;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private Map<String, String> files = new HashMap<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private String lastModified;

  public static final String SERIALIZED_NAME_MENU = "menu";
  @SerializedName(SERIALIZED_NAME_MENU)
  private String menu;

  public static final String SERIALIZED_NAME_SUBSETS = "subsets";
  @SerializedName(SERIALIZED_NAME_SUBSETS)
  private List<String> subsets = new ArrayList<>();

  public static final String SERIALIZED_NAME_VARIANTS = "variants";
  @SerializedName(SERIALIZED_NAME_VARIANTS)
  private List<String> variants = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public Webfont() {
  }

  public Webfont axes(List<Axis> axes) {
    this.axes = axes;
    return this;
  }

  public Webfont addAxesItem(Axis axesItem) {
    if (this.axes == null) {
      this.axes = new ArrayList<>();
    }
    this.axes.add(axesItem);
    return this;
  }

  /**
   * Axis for variable fonts.
   * @return axes
   */
  @javax.annotation.Nullable
  public List<Axis> getAxes() {
    return axes;
  }

  public void setAxes(List<Axis> axes) {
    this.axes = axes;
  }


  public Webfont category(String category) {
    this.category = category;
    return this;
  }

  /**
   * The category of the font.
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public Webfont family(String family) {
    this.family = family;
    return this;
  }

  /**
   * The name of the font.
   * @return family
   */
  @javax.annotation.Nullable
  public String getFamily() {
    return family;
  }

  public void setFamily(String family) {
    this.family = family;
  }


  public Webfont files(Map<String, String> files) {
    this.files = files;
    return this;
  }

  public Webfont putFilesItem(String key, String filesItem) {
    if (this.files == null) {
      this.files = new HashMap<>();
    }
    this.files.put(key, filesItem);
    return this;
  }

  /**
   * The font files (with all supported scripts) for each one of the available variants, as a key : value map.
   * @return files
   */
  @javax.annotation.Nullable
  public Map<String, String> getFiles() {
    return files;
  }

  public void setFiles(Map<String, String> files) {
    this.files = files;
  }


  public Webfont kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This kind represents a webfont object in the webfonts service.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Webfont lastModified(String lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * The date (format \&quot;yyyy-MM-dd\&quot;) the font was modified for the last time.
   * @return lastModified
   */
  @javax.annotation.Nullable
  public String getLastModified() {
    return lastModified;
  }

  public void setLastModified(String lastModified) {
    this.lastModified = lastModified;
  }


  public Webfont menu(String menu) {
    this.menu = menu;
    return this;
  }

  /**
   * Font URL for menu subset, a subset of the font that is enough to display the font name
   * @return menu
   */
  @javax.annotation.Nullable
  public String getMenu() {
    return menu;
  }

  public void setMenu(String menu) {
    this.menu = menu;
  }


  public Webfont subsets(List<String> subsets) {
    this.subsets = subsets;
    return this;
  }

  public Webfont addSubsetsItem(String subsetsItem) {
    if (this.subsets == null) {
      this.subsets = new ArrayList<>();
    }
    this.subsets.add(subsetsItem);
    return this;
  }

  /**
   * The scripts supported by the font.
   * @return subsets
   */
  @javax.annotation.Nullable
  public List<String> getSubsets() {
    return subsets;
  }

  public void setSubsets(List<String> subsets) {
    this.subsets = subsets;
  }


  public Webfont variants(List<String> variants) {
    this.variants = variants;
    return this;
  }

  public Webfont addVariantsItem(String variantsItem) {
    if (this.variants == null) {
      this.variants = new ArrayList<>();
    }
    this.variants.add(variantsItem);
    return this;
  }

  /**
   * The available variants for the font.
   * @return variants
   */
  @javax.annotation.Nullable
  public List<String> getVariants() {
    return variants;
  }

  public void setVariants(List<String> variants) {
    this.variants = variants;
  }


  public Webfont version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The font version.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Webfont webfont = (Webfont) o;
    return Objects.equals(this.axes, webfont.axes) &&
        Objects.equals(this.category, webfont.category) &&
        Objects.equals(this.family, webfont.family) &&
        Objects.equals(this.files, webfont.files) &&
        Objects.equals(this.kind, webfont.kind) &&
        Objects.equals(this.lastModified, webfont.lastModified) &&
        Objects.equals(this.menu, webfont.menu) &&
        Objects.equals(this.subsets, webfont.subsets) &&
        Objects.equals(this.variants, webfont.variants) &&
        Objects.equals(this.version, webfont.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(axes, category, family, files, kind, lastModified, menu, subsets, variants, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Webfont {\n");
    sb.append("    axes: ").append(toIndentedString(axes)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    family: ").append(toIndentedString(family)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    menu: ").append(toIndentedString(menu)).append("\n");
    sb.append("    subsets: ").append(toIndentedString(subsets)).append("\n");
    sb.append("    variants: ").append(toIndentedString(variants)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("axes");
    openapiFields.add("category");
    openapiFields.add("family");
    openapiFields.add("files");
    openapiFields.add("kind");
    openapiFields.add("lastModified");
    openapiFields.add("menu");
    openapiFields.add("subsets");
    openapiFields.add("variants");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Webfont
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Webfont.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Webfont is not found in the empty JSON string", Webfont.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Webfont.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Webfont` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("axes") != null && !jsonObj.get("axes").isJsonNull()) {
        JsonArray jsonArrayaxes = jsonObj.getAsJsonArray("axes");
        if (jsonArrayaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("axes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `axes` to be an array in the JSON string but got `%s`", jsonObj.get("axes").toString()));
          }

          // validate the optional field `axes` (array)
          for (int i = 0; i < jsonArrayaxes.size(); i++) {
            Axis.validateJsonElement(jsonArrayaxes.get(i));
          };
        }
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("family") != null && !jsonObj.get("family").isJsonNull()) && !jsonObj.get("family").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `family` to be a primitive type in the JSON string but got `%s`", jsonObj.get("family").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("lastModified") != null && !jsonObj.get("lastModified").isJsonNull()) && !jsonObj.get("lastModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModified").toString()));
      }
      if ((jsonObj.get("menu") != null && !jsonObj.get("menu").isJsonNull()) && !jsonObj.get("menu").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `menu` to be a primitive type in the JSON string but got `%s`", jsonObj.get("menu").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subsets") != null && !jsonObj.get("subsets").isJsonNull() && !jsonObj.get("subsets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subsets` to be an array in the JSON string but got `%s`", jsonObj.get("subsets").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("variants") != null && !jsonObj.get("variants").isJsonNull() && !jsonObj.get("variants").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `variants` to be an array in the JSON string but got `%s`", jsonObj.get("variants").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Webfont.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Webfont' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Webfont> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Webfont.class));

       return (TypeAdapter<T>) new TypeAdapter<Webfont>() {
           @Override
           public void write(JsonWriter out, Webfont value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Webfont read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Webfont given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Webfont
   * @throws IOException if the JSON string is invalid with respect to Webfont
   */
  public static Webfont fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Webfont.class);
  }

  /**
   * Convert an instance of Webfont to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

