# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.axis import Axis
from openapi_server import util


class Webfont(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, axes: List[Axis]=None, category: str=None, family: str=None, files: Dict[str, str]=None, kind: str=None, last_modified: str=None, menu: str=None, subsets: List[str]=None, variants: List[str]=None, version: str=None):
        """Webfont - a model defined in OpenAPI

        :param axes: The axes of this Webfont.
        :param category: The category of this Webfont.
        :param family: The family of this Webfont.
        :param files: The files of this Webfont.
        :param kind: The kind of this Webfont.
        :param last_modified: The last_modified of this Webfont.
        :param menu: The menu of this Webfont.
        :param subsets: The subsets of this Webfont.
        :param variants: The variants of this Webfont.
        :param version: The version of this Webfont.
        """
        self.openapi_types = {
            'axes': List[Axis],
            'category': str,
            'family': str,
            'files': Dict[str, str],
            'kind': str,
            'last_modified': str,
            'menu': str,
            'subsets': List[str],
            'variants': List[str],
            'version': str
        }

        self.attribute_map = {
            'axes': 'axes',
            'category': 'category',
            'family': 'family',
            'files': 'files',
            'kind': 'kind',
            'last_modified': 'lastModified',
            'menu': 'menu',
            'subsets': 'subsets',
            'variants': 'variants',
            'version': 'version'
        }

        self._axes = axes
        self._category = category
        self._family = family
        self._files = files
        self._kind = kind
        self._last_modified = last_modified
        self._menu = menu
        self._subsets = subsets
        self._variants = variants
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Webfont':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Webfont of this Webfont.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def axes(self):
        """Gets the axes of this Webfont.

        Axis for variable fonts.

        :return: The axes of this Webfont.
        :rtype: List[Axis]
        """
        return self._axes

    @axes.setter
    def axes(self, axes):
        """Sets the axes of this Webfont.

        Axis for variable fonts.

        :param axes: The axes of this Webfont.
        :type axes: List[Axis]
        """

        self._axes = axes

    @property
    def category(self):
        """Gets the category of this Webfont.

        The category of the font.

        :return: The category of this Webfont.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Webfont.

        The category of the font.

        :param category: The category of this Webfont.
        :type category: str
        """

        self._category = category

    @property
    def family(self):
        """Gets the family of this Webfont.

        The name of the font.

        :return: The family of this Webfont.
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this Webfont.

        The name of the font.

        :param family: The family of this Webfont.
        :type family: str
        """

        self._family = family

    @property
    def files(self):
        """Gets the files of this Webfont.

        The font files (with all supported scripts) for each one of the available variants, as a key : value map.

        :return: The files of this Webfont.
        :rtype: Dict[str, str]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this Webfont.

        The font files (with all supported scripts) for each one of the available variants, as a key : value map.

        :param files: The files of this Webfont.
        :type files: Dict[str, str]
        """

        self._files = files

    @property
    def kind(self):
        """Gets the kind of this Webfont.

        This kind represents a webfont object in the webfonts service.

        :return: The kind of this Webfont.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Webfont.

        This kind represents a webfont object in the webfonts service.

        :param kind: The kind of this Webfont.
        :type kind: str
        """

        self._kind = kind

    @property
    def last_modified(self):
        """Gets the last_modified of this Webfont.

        The date (format \"yyyy-MM-dd\") the font was modified for the last time.

        :return: The last_modified of this Webfont.
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this Webfont.

        The date (format \"yyyy-MM-dd\") the font was modified for the last time.

        :param last_modified: The last_modified of this Webfont.
        :type last_modified: str
        """

        self._last_modified = last_modified

    @property
    def menu(self):
        """Gets the menu of this Webfont.

        Font URL for menu subset, a subset of the font that is enough to display the font name

        :return: The menu of this Webfont.
        :rtype: str
        """
        return self._menu

    @menu.setter
    def menu(self, menu):
        """Sets the menu of this Webfont.

        Font URL for menu subset, a subset of the font that is enough to display the font name

        :param menu: The menu of this Webfont.
        :type menu: str
        """

        self._menu = menu

    @property
    def subsets(self):
        """Gets the subsets of this Webfont.

        The scripts supported by the font.

        :return: The subsets of this Webfont.
        :rtype: List[str]
        """
        return self._subsets

    @subsets.setter
    def subsets(self, subsets):
        """Sets the subsets of this Webfont.

        The scripts supported by the font.

        :param subsets: The subsets of this Webfont.
        :type subsets: List[str]
        """

        self._subsets = subsets

    @property
    def variants(self):
        """Gets the variants of this Webfont.

        The available variants for the font.

        :return: The variants of this Webfont.
        :rtype: List[str]
        """
        return self._variants

    @variants.setter
    def variants(self, variants):
        """Sets the variants of this Webfont.

        The available variants for the font.

        :param variants: The variants of this Webfont.
        :type variants: List[str]
        """

        self._variants = variants

    @property
    def version(self):
        """Gets the version of this Webfont.

        The font version.

        :return: The version of this Webfont.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Webfont.

        The font version.

        :param version: The version of this Webfont.
        :type version: str
        """

        self._version = version
