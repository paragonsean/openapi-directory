/**
 * Web Fonts Developer API
 * The Google Web Fonts Developer API lets you retrieve information about web fonts served by Google.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Axis from './Axis';

/**
 * The Webfont model module.
 * @module model/Webfont
 * @version v1
 */
class Webfont {
    /**
     * Constructs a new <code>Webfont</code>.
     * Metadata describing a family of fonts.
     * @alias module:model/Webfont
     */
    constructor() { 
        
        Webfont.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Webfont</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Webfont} obj Optional instance to populate.
     * @return {module:model/Webfont} The populated <code>Webfont</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Webfont();

            if (data.hasOwnProperty('axes')) {
                obj['axes'] = ApiClient.convertToType(data['axes'], [Axis]);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('family')) {
                obj['family'] = ApiClient.convertToType(data['family'], 'String');
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], {'String': 'String'});
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'String');
            }
            if (data.hasOwnProperty('menu')) {
                obj['menu'] = ApiClient.convertToType(data['menu'], 'String');
            }
            if (data.hasOwnProperty('subsets')) {
                obj['subsets'] = ApiClient.convertToType(data['subsets'], ['String']);
            }
            if (data.hasOwnProperty('variants')) {
                obj['variants'] = ApiClient.convertToType(data['variants'], ['String']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Webfont</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Webfont</code>.
     */
    static validateJSON(data) {
        if (data['axes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['axes'])) {
                throw new Error("Expected the field `axes` to be an array in the JSON data but got " + data['axes']);
            }
            // validate the optional field `axes` (array)
            for (const item of data['axes']) {
                Axis.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['family'] && !(typeof data['family'] === 'string' || data['family'] instanceof String)) {
            throw new Error("Expected the field `family` to be a primitive type in the JSON string but got " + data['family']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['lastModified'] && !(typeof data['lastModified'] === 'string' || data['lastModified'] instanceof String)) {
            throw new Error("Expected the field `lastModified` to be a primitive type in the JSON string but got " + data['lastModified']);
        }
        // ensure the json data is a string
        if (data['menu'] && !(typeof data['menu'] === 'string' || data['menu'] instanceof String)) {
            throw new Error("Expected the field `menu` to be a primitive type in the JSON string but got " + data['menu']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['subsets'])) {
            throw new Error("Expected the field `subsets` to be an array in the JSON data but got " + data['subsets']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['variants'])) {
            throw new Error("Expected the field `variants` to be an array in the JSON data but got " + data['variants']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * Axis for variable fonts.
 * @member {Array.<module:model/Axis>} axes
 */
Webfont.prototype['axes'] = undefined;

/**
 * The category of the font.
 * @member {String} category
 */
Webfont.prototype['category'] = undefined;

/**
 * The name of the font.
 * @member {String} family
 */
Webfont.prototype['family'] = undefined;

/**
 * The font files (with all supported scripts) for each one of the available variants, as a key : value map.
 * @member {Object.<String, String>} files
 */
Webfont.prototype['files'] = undefined;

/**
 * This kind represents a webfont object in the webfonts service.
 * @member {String} kind
 */
Webfont.prototype['kind'] = undefined;

/**
 * The date (format \"yyyy-MM-dd\") the font was modified for the last time.
 * @member {String} lastModified
 */
Webfont.prototype['lastModified'] = undefined;

/**
 * Font URL for menu subset, a subset of the font that is enough to display the font name
 * @member {String} menu
 */
Webfont.prototype['menu'] = undefined;

/**
 * The scripts supported by the font.
 * @member {Array.<String>} subsets
 */
Webfont.prototype['subsets'] = undefined;

/**
 * The available variants for the font.
 * @member {Array.<String>} variants
 */
Webfont.prototype['variants'] = undefined;

/**
 * The font version.
 * @member {String} version
 */
Webfont.prototype['version'] = undefined;






export default Webfont;

