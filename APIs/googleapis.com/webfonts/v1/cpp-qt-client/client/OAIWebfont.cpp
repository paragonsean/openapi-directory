/**
 * Web Fonts Developer API
 * The Google Web Fonts Developer API lets you retrieve information about web fonts served by Google.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebfont.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebfont::OAIWebfont(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebfont::OAIWebfont() {
    this->initializeModel();
}

OAIWebfont::~OAIWebfont() {}

void OAIWebfont::initializeModel() {

    m_axes_isSet = false;
    m_axes_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_family_isSet = false;
    m_family_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_menu_isSet = false;
    m_menu_isValid = false;

    m_subsets_isSet = false;
    m_subsets_isValid = false;

    m_variants_isSet = false;
    m_variants_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIWebfont::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebfont::fromJsonObject(QJsonObject json) {

    m_axes_isValid = ::OpenAPI::fromJsonValue(m_axes, json[QString("axes")]);
    m_axes_isSet = !json[QString("axes")].isNull() && m_axes_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("family")]);
    m_family_isSet = !json[QString("family")].isNull() && m_family_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_menu_isValid = ::OpenAPI::fromJsonValue(m_menu, json[QString("menu")]);
    m_menu_isSet = !json[QString("menu")].isNull() && m_menu_isValid;

    m_subsets_isValid = ::OpenAPI::fromJsonValue(m_subsets, json[QString("subsets")]);
    m_subsets_isSet = !json[QString("subsets")].isNull() && m_subsets_isValid;

    m_variants_isValid = ::OpenAPI::fromJsonValue(m_variants, json[QString("variants")]);
    m_variants_isSet = !json[QString("variants")].isNull() && m_variants_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIWebfont::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebfont::asJsonObject() const {
    QJsonObject obj;
    if (m_axes.size() > 0) {
        obj.insert(QString("axes"), ::OpenAPI::toJsonValue(m_axes));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_family_isSet) {
        obj.insert(QString("family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_menu_isSet) {
        obj.insert(QString("menu"), ::OpenAPI::toJsonValue(m_menu));
    }
    if (m_subsets.size() > 0) {
        obj.insert(QString("subsets"), ::OpenAPI::toJsonValue(m_subsets));
    }
    if (m_variants.size() > 0) {
        obj.insert(QString("variants"), ::OpenAPI::toJsonValue(m_variants));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIAxis> OAIWebfont::getAxes() const {
    return m_axes;
}
void OAIWebfont::setAxes(const QList<OAIAxis> &axes) {
    m_axes = axes;
    m_axes_isSet = true;
}

bool OAIWebfont::is_axes_Set() const{
    return m_axes_isSet;
}

bool OAIWebfont::is_axes_Valid() const{
    return m_axes_isValid;
}

QString OAIWebfont::getCategory() const {
    return m_category;
}
void OAIWebfont::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIWebfont::is_category_Set() const{
    return m_category_isSet;
}

bool OAIWebfont::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIWebfont::getFamily() const {
    return m_family;
}
void OAIWebfont::setFamily(const QString &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIWebfont::is_family_Set() const{
    return m_family_isSet;
}

bool OAIWebfont::is_family_Valid() const{
    return m_family_isValid;
}

QMap<QString, QString> OAIWebfont::getFiles() const {
    return m_files;
}
void OAIWebfont::setFiles(const QMap<QString, QString> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIWebfont::is_files_Set() const{
    return m_files_isSet;
}

bool OAIWebfont::is_files_Valid() const{
    return m_files_isValid;
}

QString OAIWebfont::getKind() const {
    return m_kind;
}
void OAIWebfont::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIWebfont::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIWebfont::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIWebfont::getLastModified() const {
    return m_last_modified;
}
void OAIWebfont::setLastModified(const QString &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIWebfont::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIWebfont::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QString OAIWebfont::getMenu() const {
    return m_menu;
}
void OAIWebfont::setMenu(const QString &menu) {
    m_menu = menu;
    m_menu_isSet = true;
}

bool OAIWebfont::is_menu_Set() const{
    return m_menu_isSet;
}

bool OAIWebfont::is_menu_Valid() const{
    return m_menu_isValid;
}

QList<QString> OAIWebfont::getSubsets() const {
    return m_subsets;
}
void OAIWebfont::setSubsets(const QList<QString> &subsets) {
    m_subsets = subsets;
    m_subsets_isSet = true;
}

bool OAIWebfont::is_subsets_Set() const{
    return m_subsets_isSet;
}

bool OAIWebfont::is_subsets_Valid() const{
    return m_subsets_isValid;
}

QList<QString> OAIWebfont::getVariants() const {
    return m_variants;
}
void OAIWebfont::setVariants(const QList<QString> &variants) {
    m_variants = variants;
    m_variants_isSet = true;
}

bool OAIWebfont::is_variants_Set() const{
    return m_variants_isSet;
}

bool OAIWebfont::is_variants_Valid() const{
    return m_variants_isValid;
}

QString OAIWebfont::getVersion() const {
    return m_version;
}
void OAIWebfont::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIWebfont::is_version_Set() const{
    return m_version_isSet;
}

bool OAIWebfont::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIWebfont::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_axes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_menu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subsets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_variants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebfont::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
