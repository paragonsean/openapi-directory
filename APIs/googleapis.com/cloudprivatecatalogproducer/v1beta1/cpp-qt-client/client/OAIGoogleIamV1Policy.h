/**
 * Cloud Private Catalog Producer
 * Enables cloud users to manage and share enterprise catalogs intheir organizations.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleIamV1Policy.h
 *
 * An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources.   A &#x60;Policy&#x60; is a collection of &#x60;bindings&#x60;. A &#x60;binding&#x60; binds one or more &#x60;members&#x60; to a single &#x60;role&#x60;. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A &#x60;role&#x60; is a named list of permissions; each &#x60;role&#x60; can be an IAM predefined role or a user-created custom role.  Optionally, a &#x60;binding&#x60; can specify a &#x60;condition&#x60;, which is a logical expression that allows access to a resource only if the expression evaluates to &#x60;true&#x60;. A condition can add constraints based on attributes of the request, the resource, or both.  **JSON example:**      {       \&quot;bindings\&quot;: [         {           \&quot;role\&quot;: \&quot;roles/resourcemanager.organizationAdmin\&quot;,           \&quot;members\&quot;: [             \&quot;user:mike@example.com\&quot;,             \&quot;group:admins@example.com\&quot;,             \&quot;domain:google.com\&quot;,             \&quot;serviceAccount:my-project-id@appspot.gserviceaccount.com\&quot;           ]         },         {           \&quot;role\&quot;: \&quot;roles/resourcemanager.organizationViewer\&quot;,           \&quot;members\&quot;: [\&quot;user:eve@example.com\&quot;],           \&quot;condition\&quot;: {             \&quot;title\&quot;: \&quot;expirable access\&quot;,             \&quot;description\&quot;: \&quot;Does not grant access after Sep 2020\&quot;,             \&quot;expression\&quot;: \&quot;request.time &lt; timestamp(&#39;2020-10-01T00:00:00.000Z&#39;)\&quot;,           }         }       ],       \&quot;etag\&quot;: \&quot;BwWWja0YfJA&#x3D;\&quot;,       \&quot;version\&quot;: 3     }  **YAML example:**      bindings:     - members:       - user:mike@example.com       - group:admins@example.com       - domain:google.com       - serviceAccount:my-project-id@appspot.gserviceaccount.com       role: roles/resourcemanager.organizationAdmin     - members:       - user:eve@example.com       role: roles/resourcemanager.organizationViewer       condition:         title: expirable access         description: Does not grant access after Sep 2020         expression: request.time &lt; timestamp(&#39;2020-10-01T00:00:00.000Z&#39;)     - etag: BwWWja0YfJA&#x3D;     - version: 3  For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
 */

#ifndef OAIGoogleIamV1Policy_H
#define OAIGoogleIamV1Policy_H

#include <QJsonObject>

#include "OAIGoogleIamV1AuditConfig.h"
#include "OAIGoogleIamV1Binding.h"
#include <QByteArray>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleIamV1AuditConfig;
class OAIGoogleIamV1Binding;

class OAIGoogleIamV1Policy : public OAIObject {
public:
    OAIGoogleIamV1Policy();
    OAIGoogleIamV1Policy(QString json);
    ~OAIGoogleIamV1Policy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIGoogleIamV1AuditConfig> getAuditConfigs() const;
    void setAuditConfigs(const QList<OAIGoogleIamV1AuditConfig> &audit_configs);
    bool is_audit_configs_Set() const;
    bool is_audit_configs_Valid() const;

    QList<OAIGoogleIamV1Binding> getBindings() const;
    void setBindings(const QList<OAIGoogleIamV1Binding> &bindings);
    bool is_bindings_Set() const;
    bool is_bindings_Valid() const;

    QByteArray getEtag() const;
    void setEtag(const QByteArray &etag);
    bool is_etag_Set() const;
    bool is_etag_Valid() const;

    qint32 getVersion() const;
    void setVersion(const qint32 &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIGoogleIamV1AuditConfig> m_audit_configs;
    bool m_audit_configs_isSet;
    bool m_audit_configs_isValid;

    QList<OAIGoogleIamV1Binding> m_bindings;
    bool m_bindings_isSet;
    bool m_bindings_isValid;

    QByteArray m_etag;
    bool m_etag_isSet;
    bool m_etag_isValid;

    qint32 m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleIamV1Policy)

#endif // OAIGoogleIamV1Policy_H
