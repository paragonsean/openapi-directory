/**
 * Cloud Private Catalog Producer
 * Enables cloud users to manage and share enterprise catalogs intheir organizations.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICatalogsApi_H
#define OAI_OAICatalogsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleCloudPrivatecatalogproducerV1beta1Association.h"
#include "OAIGoogleCloudPrivatecatalogproducerV1beta1Catalog.h"
#include "OAIGoogleCloudPrivatecatalogproducerV1beta1CopyProductRequest.h"
#include "OAIGoogleCloudPrivatecatalogproducerV1beta1CreateAssociationRequest.h"
#include "OAIGoogleCloudPrivatecatalogproducerV1beta1ListAssociationsResponse.h"
#include "OAIGoogleCloudPrivatecatalogproducerV1beta1ListCatalogsResponse.h"
#include "OAIGoogleCloudPrivatecatalogproducerV1beta1ListProductsResponse.h"
#include "OAIGoogleCloudPrivatecatalogproducerV1beta1ListVersionsResponse.h"
#include "OAIGoogleCloudPrivatecatalogproducerV1beta1Product.h"
#include "OAIGoogleCloudPrivatecatalogproducerV1beta1UploadIconRequest.h"
#include "OAIGoogleCloudPrivatecatalogproducerV1beta1Version.h"
#include "OAIGoogleIamV1Policy.h"
#include "OAIGoogleIamV1SetIamPolicyRequest.h"
#include "OAIGoogleIamV1TestIamPermissionsRequest.h"
#include "OAIGoogleIamV1TestIamPermissionsResponse.h"
#include "OAIGoogleLongrunningOperation.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICatalogsApi : public QObject {
    Q_OBJECT

public:
    OAICatalogsApi(const int timeOut = 0);
    ~OAICatalogsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  oai_google_cloud_privatecatalogproducer_v1beta1_create_association_request OAIGoogleCloudPrivatecatalogproducerV1beta1CreateAssociationRequest [optional]
    */
    virtual void cloudprivatecatalogproducer_catalogs_associations_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudPrivatecatalogproducerV1beta1CreateAssociationRequest> &oai_google_cloud_privatecatalogproducer_v1beta1_create_association_request = ::OpenAPI::OptionalParam<OAIGoogleCloudPrivatecatalogproducerV1beta1CreateAssociationRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void cloudprivatecatalogproducer_catalogs_associations_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  oai_google_cloud_privatecatalogproducer_v1beta1_catalog OAIGoogleCloudPrivatecatalogproducerV1beta1Catalog [optional]
    */
    virtual void cloudprivatecatalogproducer_catalogs_create(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudPrivatecatalogproducerV1beta1Catalog> &oai_google_cloud_privatecatalogproducer_v1beta1_catalog = ::OpenAPI::OptionalParam<OAIGoogleCloudPrivatecatalogproducerV1beta1Catalog>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  options_requested_policy_version qint32 [optional]
    */
    virtual void cloudprivatecatalogproducer_catalogs_getIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &options_requested_policy_version = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  parent QString [optional]
    */
    virtual void cloudprivatecatalogproducer_catalogs_list(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  oai_google_cloud_privatecatalogproducer_v1beta1_copy_product_request OAIGoogleCloudPrivatecatalogproducerV1beta1CopyProductRequest [optional]
    */
    virtual void cloudprivatecatalogproducer_catalogs_products_copy(const QString &name, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudPrivatecatalogproducerV1beta1CopyProductRequest> &oai_google_cloud_privatecatalogproducer_v1beta1_copy_product_request = ::OpenAPI::OptionalParam<OAIGoogleCloudPrivatecatalogproducerV1beta1CopyProductRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  oai_google_cloud_privatecatalogproducer_v1beta1_product OAIGoogleCloudPrivatecatalogproducerV1beta1Product [optional]
    */
    virtual void cloudprivatecatalogproducer_catalogs_products_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudPrivatecatalogproducerV1beta1Product> &oai_google_cloud_privatecatalogproducer_v1beta1_product = ::OpenAPI::OptionalParam<OAIGoogleCloudPrivatecatalogproducerV1beta1Product>());

    /**
    * @param[in]  product QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  oai_google_cloud_privatecatalogproducer_v1beta1_upload_icon_request OAIGoogleCloudPrivatecatalogproducerV1beta1UploadIconRequest [optional]
    */
    virtual void cloudprivatecatalogproducer_catalogs_products_icons_upload(const QString &product, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudPrivatecatalogproducerV1beta1UploadIconRequest> &oai_google_cloud_privatecatalogproducer_v1beta1_upload_icon_request = ::OpenAPI::OptionalParam<OAIGoogleCloudPrivatecatalogproducerV1beta1UploadIconRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void cloudprivatecatalogproducer_catalogs_products_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  oai_google_cloud_privatecatalogproducer_v1beta1_version OAIGoogleCloudPrivatecatalogproducerV1beta1Version [optional]
    */
    virtual void cloudprivatecatalogproducer_catalogs_products_versions_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudPrivatecatalogproducerV1beta1Version> &oai_google_cloud_privatecatalogproducer_v1beta1_version = ::OpenAPI::OptionalParam<OAIGoogleCloudPrivatecatalogproducerV1beta1Version>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  force bool [optional]
    */
    virtual void cloudprivatecatalogproducer_catalogs_products_versions_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void cloudprivatecatalogproducer_catalogs_products_versions_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void cloudprivatecatalogproducer_catalogs_products_versions_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_google_cloud_privatecatalogproducer_v1beta1_version OAIGoogleCloudPrivatecatalogproducerV1beta1Version [optional]
    */
    virtual void cloudprivatecatalogproducer_catalogs_products_versions_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudPrivatecatalogproducerV1beta1Version> &oai_google_cloud_privatecatalogproducer_v1beta1_version = ::OpenAPI::OptionalParam<OAIGoogleCloudPrivatecatalogproducerV1beta1Version>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  oai_google_iam_v1_set_iam_policy_request OAIGoogleIamV1SetIamPolicyRequest [optional]
    */
    virtual void cloudprivatecatalogproducer_catalogs_setIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleIamV1SetIamPolicyRequest> &oai_google_iam_v1_set_iam_policy_request = ::OpenAPI::OptionalParam<OAIGoogleIamV1SetIamPolicyRequest>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  oai_google_iam_v1_test_iam_permissions_request OAIGoogleIamV1TestIamPermissionsRequest [optional]
    */
    virtual void cloudprivatecatalogproducer_catalogs_testIamPermissions(const QString &resource, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleIamV1TestIamPermissionsRequest> &oai_google_iam_v1_test_iam_permissions_request = ::OpenAPI::OptionalParam<OAIGoogleIamV1TestIamPermissionsRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void cloudprivatecatalogproducer_catalogs_undelete(const QString &name, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cloudprivatecatalogproducer_catalogs_associations_createCallback(OAIHttpRequestWorker *worker);
    void cloudprivatecatalogproducer_catalogs_associations_listCallback(OAIHttpRequestWorker *worker);
    void cloudprivatecatalogproducer_catalogs_createCallback(OAIHttpRequestWorker *worker);
    void cloudprivatecatalogproducer_catalogs_getIamPolicyCallback(OAIHttpRequestWorker *worker);
    void cloudprivatecatalogproducer_catalogs_listCallback(OAIHttpRequestWorker *worker);
    void cloudprivatecatalogproducer_catalogs_products_copyCallback(OAIHttpRequestWorker *worker);
    void cloudprivatecatalogproducer_catalogs_products_createCallback(OAIHttpRequestWorker *worker);
    void cloudprivatecatalogproducer_catalogs_products_icons_uploadCallback(OAIHttpRequestWorker *worker);
    void cloudprivatecatalogproducer_catalogs_products_listCallback(OAIHttpRequestWorker *worker);
    void cloudprivatecatalogproducer_catalogs_products_versions_createCallback(OAIHttpRequestWorker *worker);
    void cloudprivatecatalogproducer_catalogs_products_versions_deleteCallback(OAIHttpRequestWorker *worker);
    void cloudprivatecatalogproducer_catalogs_products_versions_getCallback(OAIHttpRequestWorker *worker);
    void cloudprivatecatalogproducer_catalogs_products_versions_listCallback(OAIHttpRequestWorker *worker);
    void cloudprivatecatalogproducer_catalogs_products_versions_patchCallback(OAIHttpRequestWorker *worker);
    void cloudprivatecatalogproducer_catalogs_setIamPolicyCallback(OAIHttpRequestWorker *worker);
    void cloudprivatecatalogproducer_catalogs_testIamPermissionsCallback(OAIHttpRequestWorker *worker);
    void cloudprivatecatalogproducer_catalogs_undeleteCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cloudprivatecatalogproducer_catalogs_associations_createSignal(OAIGoogleCloudPrivatecatalogproducerV1beta1Association summary);
    void cloudprivatecatalogproducer_catalogs_associations_listSignal(OAIGoogleCloudPrivatecatalogproducerV1beta1ListAssociationsResponse summary);
    void cloudprivatecatalogproducer_catalogs_createSignal(OAIGoogleLongrunningOperation summary);
    void cloudprivatecatalogproducer_catalogs_getIamPolicySignal(OAIGoogleIamV1Policy summary);
    void cloudprivatecatalogproducer_catalogs_listSignal(OAIGoogleCloudPrivatecatalogproducerV1beta1ListCatalogsResponse summary);
    void cloudprivatecatalogproducer_catalogs_products_copySignal(OAIGoogleLongrunningOperation summary);
    void cloudprivatecatalogproducer_catalogs_products_createSignal(OAIGoogleCloudPrivatecatalogproducerV1beta1Product summary);
    void cloudprivatecatalogproducer_catalogs_products_icons_uploadSignal(OAIObject summary);
    void cloudprivatecatalogproducer_catalogs_products_listSignal(OAIGoogleCloudPrivatecatalogproducerV1beta1ListProductsResponse summary);
    void cloudprivatecatalogproducer_catalogs_products_versions_createSignal(OAIGoogleLongrunningOperation summary);
    void cloudprivatecatalogproducer_catalogs_products_versions_deleteSignal(OAIObject summary);
    void cloudprivatecatalogproducer_catalogs_products_versions_getSignal(OAIGoogleCloudPrivatecatalogproducerV1beta1Version summary);
    void cloudprivatecatalogproducer_catalogs_products_versions_listSignal(OAIGoogleCloudPrivatecatalogproducerV1beta1ListVersionsResponse summary);
    void cloudprivatecatalogproducer_catalogs_products_versions_patchSignal(OAIGoogleCloudPrivatecatalogproducerV1beta1Version summary);
    void cloudprivatecatalogproducer_catalogs_setIamPolicySignal(OAIGoogleIamV1Policy summary);
    void cloudprivatecatalogproducer_catalogs_testIamPermissionsSignal(OAIGoogleIamV1TestIamPermissionsResponse summary);
    void cloudprivatecatalogproducer_catalogs_undeleteSignal(OAIGoogleCloudPrivatecatalogproducerV1beta1Catalog summary);


    void cloudprivatecatalogproducer_catalogs_associations_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudPrivatecatalogproducerV1beta1Association summary);
    void cloudprivatecatalogproducer_catalogs_associations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudPrivatecatalogproducerV1beta1ListAssociationsResponse summary);
    void cloudprivatecatalogproducer_catalogs_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void cloudprivatecatalogproducer_catalogs_getIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIGoogleIamV1Policy summary);
    void cloudprivatecatalogproducer_catalogs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudPrivatecatalogproducerV1beta1ListCatalogsResponse summary);
    void cloudprivatecatalogproducer_catalogs_products_copySignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void cloudprivatecatalogproducer_catalogs_products_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudPrivatecatalogproducerV1beta1Product summary);
    void cloudprivatecatalogproducer_catalogs_products_icons_uploadSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void cloudprivatecatalogproducer_catalogs_products_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudPrivatecatalogproducerV1beta1ListProductsResponse summary);
    void cloudprivatecatalogproducer_catalogs_products_versions_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void cloudprivatecatalogproducer_catalogs_products_versions_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void cloudprivatecatalogproducer_catalogs_products_versions_getSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudPrivatecatalogproducerV1beta1Version summary);
    void cloudprivatecatalogproducer_catalogs_products_versions_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudPrivatecatalogproducerV1beta1ListVersionsResponse summary);
    void cloudprivatecatalogproducer_catalogs_products_versions_patchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudPrivatecatalogproducerV1beta1Version summary);
    void cloudprivatecatalogproducer_catalogs_setIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIGoogleIamV1Policy summary);
    void cloudprivatecatalogproducer_catalogs_testIamPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleIamV1TestIamPermissionsResponse summary);
    void cloudprivatecatalogproducer_catalogs_undeleteSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudPrivatecatalogproducerV1beta1Catalog summary);

    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_associations_createSignalError() instead")
    void cloudprivatecatalogproducer_catalogs_associations_createSignalE(OAIGoogleCloudPrivatecatalogproducerV1beta1Association summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_associations_createSignalError(OAIGoogleCloudPrivatecatalogproducerV1beta1Association summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_associations_listSignalError() instead")
    void cloudprivatecatalogproducer_catalogs_associations_listSignalE(OAIGoogleCloudPrivatecatalogproducerV1beta1ListAssociationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_associations_listSignalError(OAIGoogleCloudPrivatecatalogproducerV1beta1ListAssociationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_createSignalError() instead")
    void cloudprivatecatalogproducer_catalogs_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_getIamPolicySignalError() instead")
    void cloudprivatecatalogproducer_catalogs_getIamPolicySignalE(OAIGoogleIamV1Policy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_getIamPolicySignalError(OAIGoogleIamV1Policy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_listSignalError() instead")
    void cloudprivatecatalogproducer_catalogs_listSignalE(OAIGoogleCloudPrivatecatalogproducerV1beta1ListCatalogsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_listSignalError(OAIGoogleCloudPrivatecatalogproducerV1beta1ListCatalogsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_products_copySignalError() instead")
    void cloudprivatecatalogproducer_catalogs_products_copySignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_products_copySignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_products_createSignalError() instead")
    void cloudprivatecatalogproducer_catalogs_products_createSignalE(OAIGoogleCloudPrivatecatalogproducerV1beta1Product summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_products_createSignalError(OAIGoogleCloudPrivatecatalogproducerV1beta1Product summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_products_icons_uploadSignalError() instead")
    void cloudprivatecatalogproducer_catalogs_products_icons_uploadSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_products_icons_uploadSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_products_listSignalError() instead")
    void cloudprivatecatalogproducer_catalogs_products_listSignalE(OAIGoogleCloudPrivatecatalogproducerV1beta1ListProductsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_products_listSignalError(OAIGoogleCloudPrivatecatalogproducerV1beta1ListProductsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_products_versions_createSignalError() instead")
    void cloudprivatecatalogproducer_catalogs_products_versions_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_products_versions_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_products_versions_deleteSignalError() instead")
    void cloudprivatecatalogproducer_catalogs_products_versions_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_products_versions_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_products_versions_getSignalError() instead")
    void cloudprivatecatalogproducer_catalogs_products_versions_getSignalE(OAIGoogleCloudPrivatecatalogproducerV1beta1Version summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_products_versions_getSignalError(OAIGoogleCloudPrivatecatalogproducerV1beta1Version summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_products_versions_listSignalError() instead")
    void cloudprivatecatalogproducer_catalogs_products_versions_listSignalE(OAIGoogleCloudPrivatecatalogproducerV1beta1ListVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_products_versions_listSignalError(OAIGoogleCloudPrivatecatalogproducerV1beta1ListVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_products_versions_patchSignalError() instead")
    void cloudprivatecatalogproducer_catalogs_products_versions_patchSignalE(OAIGoogleCloudPrivatecatalogproducerV1beta1Version summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_products_versions_patchSignalError(OAIGoogleCloudPrivatecatalogproducerV1beta1Version summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_setIamPolicySignalError() instead")
    void cloudprivatecatalogproducer_catalogs_setIamPolicySignalE(OAIGoogleIamV1Policy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_setIamPolicySignalError(OAIGoogleIamV1Policy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_testIamPermissionsSignalError() instead")
    void cloudprivatecatalogproducer_catalogs_testIamPermissionsSignalE(OAIGoogleIamV1TestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_testIamPermissionsSignalError(OAIGoogleIamV1TestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_undeleteSignalError() instead")
    void cloudprivatecatalogproducer_catalogs_undeleteSignalE(OAIGoogleCloudPrivatecatalogproducerV1beta1Catalog summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_undeleteSignalError(OAIGoogleCloudPrivatecatalogproducerV1beta1Catalog summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_associations_createSignalErrorFull() instead")
    void cloudprivatecatalogproducer_catalogs_associations_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_associations_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_associations_listSignalErrorFull() instead")
    void cloudprivatecatalogproducer_catalogs_associations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_associations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_createSignalErrorFull() instead")
    void cloudprivatecatalogproducer_catalogs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_getIamPolicySignalErrorFull() instead")
    void cloudprivatecatalogproducer_catalogs_getIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_getIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_listSignalErrorFull() instead")
    void cloudprivatecatalogproducer_catalogs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_products_copySignalErrorFull() instead")
    void cloudprivatecatalogproducer_catalogs_products_copySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_products_copySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_products_createSignalErrorFull() instead")
    void cloudprivatecatalogproducer_catalogs_products_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_products_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_products_icons_uploadSignalErrorFull() instead")
    void cloudprivatecatalogproducer_catalogs_products_icons_uploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_products_icons_uploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_products_listSignalErrorFull() instead")
    void cloudprivatecatalogproducer_catalogs_products_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_products_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_products_versions_createSignalErrorFull() instead")
    void cloudprivatecatalogproducer_catalogs_products_versions_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_products_versions_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_products_versions_deleteSignalErrorFull() instead")
    void cloudprivatecatalogproducer_catalogs_products_versions_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_products_versions_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_products_versions_getSignalErrorFull() instead")
    void cloudprivatecatalogproducer_catalogs_products_versions_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_products_versions_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_products_versions_listSignalErrorFull() instead")
    void cloudprivatecatalogproducer_catalogs_products_versions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_products_versions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_products_versions_patchSignalErrorFull() instead")
    void cloudprivatecatalogproducer_catalogs_products_versions_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_products_versions_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_setIamPolicySignalErrorFull() instead")
    void cloudprivatecatalogproducer_catalogs_setIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_setIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_testIamPermissionsSignalErrorFull() instead")
    void cloudprivatecatalogproducer_catalogs_testIamPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_testIamPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudprivatecatalogproducer_catalogs_undeleteSignalErrorFull() instead")
    void cloudprivatecatalogproducer_catalogs_undeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudprivatecatalogproducer_catalogs_undeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
