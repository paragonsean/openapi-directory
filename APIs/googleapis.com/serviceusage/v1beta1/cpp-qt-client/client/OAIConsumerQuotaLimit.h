/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConsumerQuotaLimit.h
 *
 * Consumer quota settings for a quota limit.
 */

#ifndef OAIConsumerQuotaLimit_H
#define OAIConsumerQuotaLimit_H

#include <QJsonObject>

#include "OAIQuotaBucket.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIQuotaBucket;

class OAIConsumerQuotaLimit : public OAIObject {
public:
    OAIConsumerQuotaLimit();
    OAIConsumerQuotaLimit(QString json);
    ~OAIConsumerQuotaLimit() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowsAdminOverrides() const;
    void setAllowsAdminOverrides(const bool &allows_admin_overrides);
    bool is_allows_admin_overrides_Set() const;
    bool is_allows_admin_overrides_Valid() const;

    bool isIsPrecise() const;
    void setIsPrecise(const bool &is_precise);
    bool is_is_precise_Set() const;
    bool is_is_precise_Valid() const;

    QString getMetric() const;
    void setMetric(const QString &metric);
    bool is_metric_Set() const;
    bool is_metric_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIQuotaBucket> getQuotaBuckets() const;
    void setQuotaBuckets(const QList<OAIQuotaBucket> &quota_buckets);
    bool is_quota_buckets_Set() const;
    bool is_quota_buckets_Valid() const;

    QList<QString> getSupportedLocations() const;
    void setSupportedLocations(const QList<QString> &supported_locations);
    bool is_supported_locations_Set() const;
    bool is_supported_locations_Valid() const;

    QString getUnit() const;
    void setUnit(const QString &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allows_admin_overrides;
    bool m_allows_admin_overrides_isSet;
    bool m_allows_admin_overrides_isValid;

    bool m_is_precise;
    bool m_is_precise_isSet;
    bool m_is_precise_isValid;

    QString m_metric;
    bool m_metric_isSet;
    bool m_metric_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIQuotaBucket> m_quota_buckets;
    bool m_quota_buckets_isSet;
    bool m_quota_buckets_isValid;

    QList<QString> m_supported_locations;
    bool m_supported_locations_isSet;
    bool m_supported_locations_isValid;

    QString m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConsumerQuotaLimit)

#endif // OAIConsumerQuotaLimit_H
