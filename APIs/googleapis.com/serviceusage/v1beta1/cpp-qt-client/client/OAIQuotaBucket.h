/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQuotaBucket.h
 *
 * A quota bucket is a quota provisioning unit for a specific set of dimensions.
 */

#ifndef OAIQuotaBucket_H
#define OAIQuotaBucket_H

#include <QJsonObject>

#include "OAIProducerQuotaPolicy.h"
#include "OAIQuotaOverride.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIQuotaOverride;
class OAIProducerQuotaPolicy;

class OAIQuotaBucket : public OAIObject {
public:
    OAIQuotaBucket();
    OAIQuotaBucket(QString json);
    ~OAIQuotaBucket() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIQuotaOverride getAdminOverride() const;
    void setAdminOverride(const OAIQuotaOverride &admin_override);
    bool is_admin_override_Set() const;
    bool is_admin_override_Valid() const;

    OAIQuotaOverride getConsumerOverride() const;
    void setConsumerOverride(const OAIQuotaOverride &consumer_override);
    bool is_consumer_override_Set() const;
    bool is_consumer_override_Valid() const;

    QString getDefaultLimit() const;
    void setDefaultLimit(const QString &default_limit);
    bool is_default_limit_Set() const;
    bool is_default_limit_Valid() const;

    QMap<QString, QString> getDimensions() const;
    void setDimensions(const QMap<QString, QString> &dimensions);
    bool is_dimensions_Set() const;
    bool is_dimensions_Valid() const;

    QString getEffectiveLimit() const;
    void setEffectiveLimit(const QString &effective_limit);
    bool is_effective_limit_Set() const;
    bool is_effective_limit_Valid() const;

    OAIQuotaOverride getProducerOverride() const;
    void setProducerOverride(const OAIQuotaOverride &producer_override);
    bool is_producer_override_Set() const;
    bool is_producer_override_Valid() const;

    OAIProducerQuotaPolicy getProducerQuotaPolicy() const;
    void setProducerQuotaPolicy(const OAIProducerQuotaPolicy &producer_quota_policy);
    bool is_producer_quota_policy_Set() const;
    bool is_producer_quota_policy_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIQuotaOverride m_admin_override;
    bool m_admin_override_isSet;
    bool m_admin_override_isValid;

    OAIQuotaOverride m_consumer_override;
    bool m_consumer_override_isSet;
    bool m_consumer_override_isValid;

    QString m_default_limit;
    bool m_default_limit_isSet;
    bool m_default_limit_isValid;

    QMap<QString, QString> m_dimensions;
    bool m_dimensions_isSet;
    bool m_dimensions_isValid;

    QString m_effective_limit;
    bool m_effective_limit_isSet;
    bool m_effective_limit_isValid;

    OAIQuotaOverride m_producer_override;
    bool m_producer_override_isSet;
    bool m_producer_override_isValid;

    OAIProducerQuotaPolicy m_producer_quota_policy;
    bool m_producer_quota_policy_isSet;
    bool m_producer_quota_policy_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQuotaBucket)

#endif // OAIQuotaBucket_H
