/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi::OAIApi(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi::OAIApi() {
    this->initializeModel();
}

OAIApi::~OAIApi() {}

void OAIApi::initializeModel() {

    m_methods_isSet = false;
    m_methods_isValid = false;

    m_mixins_isSet = false;
    m_mixins_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_source_context_isSet = false;
    m_source_context_isValid = false;

    m_syntax_isSet = false;
    m_syntax_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIApi::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi::fromJsonObject(QJsonObject json) {

    m_methods_isValid = ::OpenAPI::fromJsonValue(m_methods, json[QString("methods")]);
    m_methods_isSet = !json[QString("methods")].isNull() && m_methods_isValid;

    m_mixins_isValid = ::OpenAPI::fromJsonValue(m_mixins, json[QString("mixins")]);
    m_mixins_isSet = !json[QString("mixins")].isNull() && m_mixins_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_source_context_isValid = ::OpenAPI::fromJsonValue(m_source_context, json[QString("sourceContext")]);
    m_source_context_isSet = !json[QString("sourceContext")].isNull() && m_source_context_isValid;

    m_syntax_isValid = ::OpenAPI::fromJsonValue(m_syntax, json[QString("syntax")]);
    m_syntax_isSet = !json[QString("syntax")].isNull() && m_syntax_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIApi::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi::asJsonObject() const {
    QJsonObject obj;
    if (m_methods.size() > 0) {
        obj.insert(QString("methods"), ::OpenAPI::toJsonValue(m_methods));
    }
    if (m_mixins.size() > 0) {
        obj.insert(QString("mixins"), ::OpenAPI::toJsonValue(m_mixins));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_source_context.isSet()) {
        obj.insert(QString("sourceContext"), ::OpenAPI::toJsonValue(m_source_context));
    }
    if (m_syntax_isSet) {
        obj.insert(QString("syntax"), ::OpenAPI::toJsonValue(m_syntax));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIMethod> OAIApi::getMethods() const {
    return m_methods;
}
void OAIApi::setMethods(const QList<OAIMethod> &methods) {
    m_methods = methods;
    m_methods_isSet = true;
}

bool OAIApi::is_methods_Set() const{
    return m_methods_isSet;
}

bool OAIApi::is_methods_Valid() const{
    return m_methods_isValid;
}

QList<OAIMixin> OAIApi::getMixins() const {
    return m_mixins;
}
void OAIApi::setMixins(const QList<OAIMixin> &mixins) {
    m_mixins = mixins;
    m_mixins_isSet = true;
}

bool OAIApi::is_mixins_Set() const{
    return m_mixins_isSet;
}

bool OAIApi::is_mixins_Valid() const{
    return m_mixins_isValid;
}

QString OAIApi::getName() const {
    return m_name;
}
void OAIApi::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApi::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApi::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIOption> OAIApi::getOptions() const {
    return m_options;
}
void OAIApi::setOptions(const QList<OAIOption> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIApi::is_options_Set() const{
    return m_options_isSet;
}

bool OAIApi::is_options_Valid() const{
    return m_options_isValid;
}

OAISourceContext OAIApi::getSourceContext() const {
    return m_source_context;
}
void OAIApi::setSourceContext(const OAISourceContext &source_context) {
    m_source_context = source_context;
    m_source_context_isSet = true;
}

bool OAIApi::is_source_context_Set() const{
    return m_source_context_isSet;
}

bool OAIApi::is_source_context_Valid() const{
    return m_source_context_isValid;
}

QString OAIApi::getSyntax() const {
    return m_syntax;
}
void OAIApi::setSyntax(const QString &syntax) {
    m_syntax = syntax;
    m_syntax_isSet = true;
}

bool OAIApi::is_syntax_Set() const{
    return m_syntax_isSet;
}

bool OAIApi::is_syntax_Valid() const{
    return m_syntax_isValid;
}

QString OAIApi::getVersion() const {
    return m_version;
}
void OAIApi::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIApi::is_version_Set() const{
    return m_version_isSet;
}

bool OAIApi::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIApi::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mixins.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_syntax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
