/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOAuthRequirements.h
 *
 * OAuth scopes are a way to define data and permissions on data. For example, there are scopes defined for \&quot;Read-only access to Google Calendar\&quot; and \&quot;Access to Cloud Platform\&quot;. Users can consent to a scope for an application, giving it permission to access that data on their behalf. OAuth scope specifications should be fairly coarse grained; a user will need to see and understand the text description of what your scope means. In most cases: use one or at most two OAuth scopes for an entire family of products. If your product has multiple APIs, you should probably be sharing the OAuth scope across all of those APIs. When you need finer grained OAuth consent screens: talk with your product management about how developers will use them in practice. Please note that even though each of the canonical scopes is enough for a request to be accepted and passed to the backend, a request can still fail due to the backend requiring additional scopes or permissions.
 */

#ifndef OAIOAuthRequirements_H
#define OAIOAuthRequirements_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIOAuthRequirements : public OAIObject {
public:
    OAIOAuthRequirements();
    OAIOAuthRequirements(QString json);
    ~OAIOAuthRequirements() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCanonicalScopes() const;
    void setCanonicalScopes(const QString &canonical_scopes);
    bool is_canonical_scopes_Set() const;
    bool is_canonical_scopes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_canonical_scopes;
    bool m_canonical_scopes_isSet;
    bool m_canonical_scopes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOAuthRequirements)

#endif // OAIOAuthRequirements_H
