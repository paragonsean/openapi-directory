/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuotaBucket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuotaBucket::OAIQuotaBucket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuotaBucket::OAIQuotaBucket() {
    this->initializeModel();
}

OAIQuotaBucket::~OAIQuotaBucket() {}

void OAIQuotaBucket::initializeModel() {

    m_admin_override_isSet = false;
    m_admin_override_isValid = false;

    m_consumer_override_isSet = false;
    m_consumer_override_isValid = false;

    m_default_limit_isSet = false;
    m_default_limit_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_effective_limit_isSet = false;
    m_effective_limit_isValid = false;

    m_producer_override_isSet = false;
    m_producer_override_isValid = false;

    m_producer_quota_policy_isSet = false;
    m_producer_quota_policy_isValid = false;
}

void OAIQuotaBucket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuotaBucket::fromJsonObject(QJsonObject json) {

    m_admin_override_isValid = ::OpenAPI::fromJsonValue(m_admin_override, json[QString("adminOverride")]);
    m_admin_override_isSet = !json[QString("adminOverride")].isNull() && m_admin_override_isValid;

    m_consumer_override_isValid = ::OpenAPI::fromJsonValue(m_consumer_override, json[QString("consumerOverride")]);
    m_consumer_override_isSet = !json[QString("consumerOverride")].isNull() && m_consumer_override_isValid;

    m_default_limit_isValid = ::OpenAPI::fromJsonValue(m_default_limit, json[QString("defaultLimit")]);
    m_default_limit_isSet = !json[QString("defaultLimit")].isNull() && m_default_limit_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_effective_limit_isValid = ::OpenAPI::fromJsonValue(m_effective_limit, json[QString("effectiveLimit")]);
    m_effective_limit_isSet = !json[QString("effectiveLimit")].isNull() && m_effective_limit_isValid;

    m_producer_override_isValid = ::OpenAPI::fromJsonValue(m_producer_override, json[QString("producerOverride")]);
    m_producer_override_isSet = !json[QString("producerOverride")].isNull() && m_producer_override_isValid;

    m_producer_quota_policy_isValid = ::OpenAPI::fromJsonValue(m_producer_quota_policy, json[QString("producerQuotaPolicy")]);
    m_producer_quota_policy_isSet = !json[QString("producerQuotaPolicy")].isNull() && m_producer_quota_policy_isValid;
}

QString OAIQuotaBucket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuotaBucket::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_override.isSet()) {
        obj.insert(QString("adminOverride"), ::OpenAPI::toJsonValue(m_admin_override));
    }
    if (m_consumer_override.isSet()) {
        obj.insert(QString("consumerOverride"), ::OpenAPI::toJsonValue(m_consumer_override));
    }
    if (m_default_limit_isSet) {
        obj.insert(QString("defaultLimit"), ::OpenAPI::toJsonValue(m_default_limit));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_effective_limit_isSet) {
        obj.insert(QString("effectiveLimit"), ::OpenAPI::toJsonValue(m_effective_limit));
    }
    if (m_producer_override.isSet()) {
        obj.insert(QString("producerOverride"), ::OpenAPI::toJsonValue(m_producer_override));
    }
    if (m_producer_quota_policy.isSet()) {
        obj.insert(QString("producerQuotaPolicy"), ::OpenAPI::toJsonValue(m_producer_quota_policy));
    }
    return obj;
}

OAIQuotaOverride OAIQuotaBucket::getAdminOverride() const {
    return m_admin_override;
}
void OAIQuotaBucket::setAdminOverride(const OAIQuotaOverride &admin_override) {
    m_admin_override = admin_override;
    m_admin_override_isSet = true;
}

bool OAIQuotaBucket::is_admin_override_Set() const{
    return m_admin_override_isSet;
}

bool OAIQuotaBucket::is_admin_override_Valid() const{
    return m_admin_override_isValid;
}

OAIQuotaOverride OAIQuotaBucket::getConsumerOverride() const {
    return m_consumer_override;
}
void OAIQuotaBucket::setConsumerOverride(const OAIQuotaOverride &consumer_override) {
    m_consumer_override = consumer_override;
    m_consumer_override_isSet = true;
}

bool OAIQuotaBucket::is_consumer_override_Set() const{
    return m_consumer_override_isSet;
}

bool OAIQuotaBucket::is_consumer_override_Valid() const{
    return m_consumer_override_isValid;
}

QString OAIQuotaBucket::getDefaultLimit() const {
    return m_default_limit;
}
void OAIQuotaBucket::setDefaultLimit(const QString &default_limit) {
    m_default_limit = default_limit;
    m_default_limit_isSet = true;
}

bool OAIQuotaBucket::is_default_limit_Set() const{
    return m_default_limit_isSet;
}

bool OAIQuotaBucket::is_default_limit_Valid() const{
    return m_default_limit_isValid;
}

QMap<QString, QString> OAIQuotaBucket::getDimensions() const {
    return m_dimensions;
}
void OAIQuotaBucket::setDimensions(const QMap<QString, QString> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIQuotaBucket::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIQuotaBucket::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIQuotaBucket::getEffectiveLimit() const {
    return m_effective_limit;
}
void OAIQuotaBucket::setEffectiveLimit(const QString &effective_limit) {
    m_effective_limit = effective_limit;
    m_effective_limit_isSet = true;
}

bool OAIQuotaBucket::is_effective_limit_Set() const{
    return m_effective_limit_isSet;
}

bool OAIQuotaBucket::is_effective_limit_Valid() const{
    return m_effective_limit_isValid;
}

OAIQuotaOverride OAIQuotaBucket::getProducerOverride() const {
    return m_producer_override;
}
void OAIQuotaBucket::setProducerOverride(const OAIQuotaOverride &producer_override) {
    m_producer_override = producer_override;
    m_producer_override_isSet = true;
}

bool OAIQuotaBucket::is_producer_override_Set() const{
    return m_producer_override_isSet;
}

bool OAIQuotaBucket::is_producer_override_Valid() const{
    return m_producer_override_isValid;
}

OAIProducerQuotaPolicy OAIQuotaBucket::getProducerQuotaPolicy() const {
    return m_producer_quota_policy;
}
void OAIQuotaBucket::setProducerQuotaPolicy(const OAIProducerQuotaPolicy &producer_quota_policy) {
    m_producer_quota_policy = producer_quota_policy;
    m_producer_quota_policy_isSet = true;
}

bool OAIQuotaBucket::is_producer_quota_policy_Set() const{
    return m_producer_quota_policy_isSet;
}

bool OAIQuotaBucket::is_producer_quota_policy_Valid() const{
    return m_producer_quota_policy_isValid;
}

bool OAIQuotaBucket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_producer_override.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_producer_quota_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuotaBucket::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
