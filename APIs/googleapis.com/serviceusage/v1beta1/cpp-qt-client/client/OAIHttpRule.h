/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHttpRule.h
 *
 * # gRPC Transcoding gRPC Transcoding is a feature for mapping between a gRPC method and one or more HTTP REST endpoints. It allows developers to build a single API service that supports both gRPC APIs and REST APIs. Many systems, including [Google APIs](https://github.com/googleapis/googleapis), [Cloud Endpoints](https://cloud.google.com/endpoints), [gRPC Gateway](https://github.com/grpc-ecosystem/grpc-gateway), and [Envoy](https://github.com/envoyproxy/envoy) proxy support this feature and use it for large scale production services. &#x60;HttpRule&#x60; defines the schema of the gRPC/REST mapping. The mapping specifies how different portions of the gRPC request message are mapped to the URL path, URL query parameters, and HTTP request body. It also controls how the gRPC response message is mapped to the HTTP response body. &#x60;HttpRule&#x60; is typically specified as an &#x60;google.api.http&#x60; annotation on the gRPC method. Each mapping specifies a URL path template and an HTTP method. The path template may refer to one or more fields in the gRPC request message, as long as each field is a non-repeated field with a primitive (non-message) type. The path template controls how fields of the request message are mapped to the URL path. Example: service Messaging { rpc GetMessage(GetMessageRequest) returns (Message) { option (google.api.http) &#x3D; { get: \&quot;/v1/{name&#x3D;messages/_*}\&quot; }; } } message GetMessageRequest { string name &#x3D; 1; // Mapped to URL path. } message Message { string text &#x3D; 1; // The resource content. } This enables an HTTP REST to gRPC mapping as below: HTTP | gRPC -----|----- &#x60;GET /v1/messages/123456&#x60; | &#x60;GetMessage(name: \&quot;messages/123456\&quot;)&#x60; Any fields in the request message which are not bound by the path template automatically become HTTP query parameters if there is no HTTP request body. For example: service Messaging { rpc GetMessage(GetMessageRequest) returns (Message) { option (google.api.http) &#x3D; { get:\&quot;/v1/messages/{message_id}\&quot; }; } } message GetMessageRequest { message SubMessage { string subfield &#x3D; 1; } string message_id &#x3D; 1; // Mapped to URL path. int64 revision &#x3D; 2; // Mapped to URL query parameter &#x60;revision&#x60;. SubMessage sub &#x3D; 3; // Mapped to URL query parameter &#x60;sub.subfield&#x60;. } This enables a HTTP JSON to RPC mapping as below: HTTP | gRPC -----|----- &#x60;GET /v1/messages/123456?revision&#x3D;2&amp;sub.subfield&#x3D;foo&#x60; | &#x60;GetMessage(message_id: \&quot;123456\&quot; revision: 2 sub: SubMessage(subfield: \&quot;foo\&quot;))&#x60; Note that fields which are mapped to URL query parameters must have a primitive type or a repeated primitive type or a non-repeated message type. In the case of a repeated type, the parameter can be repeated in the URL as &#x60;...?param&#x3D;A&amp;param&#x3D;B&#x60;. In the case of a message type, each field of the message is mapped to a separate parameter, such as &#x60;...?foo.a&#x3D;A&amp;foo.b&#x3D;B&amp;foo.c&#x3D;C&#x60;. For HTTP methods that allow a request body, the &#x60;body&#x60; field specifies the mapping. Consider a REST update method on the message resource collection: service Messaging { rpc UpdateMessage(UpdateMessageRequest) returns (Message) { option (google.api.http) &#x3D; { patch: \&quot;/v1/messages/{message_id}\&quot; body: \&quot;message\&quot; }; } } message UpdateMessageRequest { string message_id &#x3D; 1; // mapped to the URL Message message &#x3D; 2; // mapped to the body } The following HTTP JSON to RPC mapping is enabled, where the representation of the JSON in the request body is determined by protos JSON encoding: HTTP | gRPC -----|----- &#x60;PATCH /v1/messages/123456 { \&quot;text\&quot;: \&quot;Hi!\&quot; }&#x60; | &#x60;UpdateMessage(message_id: \&quot;123456\&quot; message { text: \&quot;Hi!\&quot; })&#x60; The special name &#x60;*&#x60; can be used in the body mapping to define that every field not bound by the path template should be mapped to the request body. This enables the following alternative definition of the update method: service Messaging { rpc UpdateMessage(Message) returns (Message) { option (google.api.http) &#x3D; { patch: \&quot;/v1/messages/{message_id}\&quot; body: \&quot;*\&quot; }; } } message Message { string message_id &#x3D; 1; string text &#x3D; 2; } The following HTTP JSON to RPC mapping is enabled: HTTP | gRPC -----|----- &#x60;PATCH /v1/messages/123456 { \&quot;text\&quot;: \&quot;Hi!\&quot; }&#x60; | &#x60;UpdateMessage(message_id: \&quot;123456\&quot; text: \&quot;Hi!\&quot;)&#x60; Note that when using &#x60;*&#x60; in the body mapping, it is not possible to have HTTP parameters, as all fields not bound by the path end in the body. This makes this option more rarely used in practice when defining REST APIs. The common usage of &#x60;*&#x60; is in custom methods which don&#39;t use the URL at all for transferring data. It is possible to define multiple HTTP methods for one RPC by using the &#x60;additional_bindings&#x60; option. Example: service Messaging { rpc GetMessage(GetMessageRequest) returns (Message) { option (google.api.http) &#x3D; { get: \&quot;/v1/messages/{message_id}\&quot; additional_bindings { get: \&quot;/v1/users/{user_id}/messages/{message_id}\&quot; } }; } } message GetMessageRequest { string message_id &#x3D; 1; string user_id &#x3D; 2; } This enables the following two alternative HTTP JSON to RPC mappings: HTTP | gRPC -----|----- &#x60;GET /v1/messages/123456&#x60; | &#x60;GetMessage(message_id: \&quot;123456\&quot;)&#x60; &#x60;GET /v1/users/me/messages/123456&#x60; | &#x60;GetMessage(user_id: \&quot;me\&quot; message_id: \&quot;123456\&quot;)&#x60; ## Rules for HTTP mapping 1. Leaf request fields (recursive expansion nested messages in the request message) are classified into three categories: - Fields referred by the path template. They are passed via the URL path. - Fields referred by the HttpRule.body. They are passed via the HTTP request body. - All other fields are passed via the URL query parameters, and the parameter name is the field path in the request message. A repeated field can be represented as multiple query parameters under the same name. 2. If HttpRule.body is \&quot;*\&quot;, there is no URL query parameter, all fields are passed via URL path and HTTP request body. 3. If HttpRule.body is omitted, there is no HTTP request body, all fields are passed via URL path and URL query parameters. ### Path template syntax Template &#x3D; \&quot;/\&quot; Segments [ Verb ] ; Segments &#x3D; Segment { \&quot;/\&quot; Segment } ; Segment &#x3D; \&quot;*\&quot; | \&quot;**\&quot; | LITERAL | Variable ; Variable &#x3D; \&quot;{\&quot; FieldPath [ \&quot;&#x3D;\&quot; Segments ] \&quot;}\&quot; ; FieldPath &#x3D; IDENT { \&quot;.\&quot; IDENT } ; Verb &#x3D; \&quot;:\&quot; LITERAL ; The syntax &#x60;*&#x60; matches a single URL path segment. The syntax &#x60;**&#x60; matches zero or more URL path segments, which must be the last part of the URL path except the &#x60;Verb&#x60;. The syntax &#x60;Variable&#x60; matches part of the URL path as specified by its template. A variable template must not contain other variables. If a variable matches a single path segment, its template may be omitted, e.g. &#x60;{var}&#x60; is equivalent to &#x60;{var&#x3D;*}&#x60;. The syntax &#x60;LITERAL&#x60; matches literal text in the URL path. If the &#x60;LITERAL&#x60; contains any reserved character, such characters should be percent-encoded before the matching. If a variable contains exactly one path segment, such as &#x60;\&quot;{var}\&quot;&#x60; or &#x60;\&quot;{var&#x3D;*}\&quot;&#x60;, when such a variable is expanded into a URL path on the client side, all characters except &#x60;[-_.~0-9a-zA-Z]&#x60; are percent-encoded. The server side does the reverse decoding. Such variables show up in the [Discovery Document](https://developers.google.com/discovery/v1/reference/apis) as &#x60;{var}&#x60;. If a variable contains multiple path segments, such as &#x60;\&quot;{var&#x3D;foo/_*}\&quot;&#x60; or &#x60;\&quot;{var&#x3D;**}\&quot;&#x60;, when such a variable is expanded into a URL path on the client side, all characters except &#x60;[-_.~/0-9a-zA-Z]&#x60; are percent-encoded. The server side does the reverse decoding, except \&quot;%2F\&quot; and \&quot;%2f\&quot; are left unchanged. Such variables show up in the [Discovery Document](https://developers.google.com/discovery/v1/reference/apis) as &#x60;{+var}&#x60;. ## Using gRPC API Service Configuration gRPC API Service Configuration (service config) is a configuration language for configuring a gRPC service to become a user-facing product. The service config is simply the YAML representation of the &#x60;google.api.Service&#x60; proto message. As an alternative to annotating your proto file, you can configure gRPC transcoding in your service config YAML files. You do this by specifying a &#x60;HttpRule&#x60; that maps the gRPC method to a REST endpoint, achieving the same effect as the proto annotation. This can be particularly useful if you have a proto that is reused in multiple services. Note that any transcoding specified in the service config will override any matching transcoding configuration in the proto. Example: http: rules: # Selects a gRPC method and applies HttpRule to it. - selector: example.v1.Messaging.GetMessage get: /v1/messages/{message_id}/{sub.subfield} ## Special notes When gRPC Transcoding is used to map a gRPC to JSON REST endpoints, the proto to JSON conversion must follow the [proto3 specification](https://developers.google.com/protocol-buffers/docs/proto3#json). While the single segment variable follows the semantics of [RFC 6570](https://tools.ietf.org/html/rfc6570) Section 3.2.2 Simple String Expansion, the multi segment variable **does not** follow RFC 6570 Section 3.2.3 Reserved Expansion. The reason is that the Reserved Expansion does not expand special characters like &#x60;?&#x60; and &#x60;#&#x60;, which would lead to invalid URLs. As the result, gRPC Transcoding uses a custom encoding for multi segment variables. The path variables **must not** refer to any repeated or mapped field, because client libraries are not capable of handling such variable expansion. The path variables **must not** capture the leading \&quot;/\&quot; character. The reason is that the most common use case \&quot;{var}\&quot; does not capture the leading \&quot;/\&quot; character. For consistency, all path variables must share the same behavior. Repeated message fields must not be mapped to URL query parameters, because no client library can support such complicated mapping. If an API needs to use a JSON array for request or response body, it can map the request or response body to a repeated field. However, some gRPC Transcoding implementations may not support this feature.
 */

#ifndef OAIHttpRule_H
#define OAIHttpRule_H

#include <QJsonObject>

#include "OAICustomHttpPattern.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICustomHttpPattern;

class OAIHttpRule : public OAIObject {
public:
    OAIHttpRule();
    OAIHttpRule(QString json);
    ~OAIHttpRule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIHttpRule> getAdditionalBindings() const;
    void setAdditionalBindings(const QList<OAIHttpRule> &additional_bindings);
    bool is_additional_bindings_Set() const;
    bool is_additional_bindings_Valid() const;

    QString getBody() const;
    void setBody(const QString &body);
    bool is_body_Set() const;
    bool is_body_Valid() const;

    OAICustomHttpPattern getCustom() const;
    void setCustom(const OAICustomHttpPattern &custom);
    bool is_custom_Set() const;
    bool is_custom_Valid() const;

    QString getRDelete() const;
    void setRDelete(const QString &r_delete);
    bool is_r_delete_Set() const;
    bool is_r_delete_Valid() const;

    QString getGet() const;
    void setGet(const QString &get);
    bool is_get_Set() const;
    bool is_get_Valid() const;

    QString getPatch() const;
    void setPatch(const QString &patch);
    bool is_patch_Set() const;
    bool is_patch_Valid() const;

    QString getPost() const;
    void setPost(const QString &post);
    bool is_post_Set() const;
    bool is_post_Valid() const;

    QString getPut() const;
    void setPut(const QString &put);
    bool is_put_Set() const;
    bool is_put_Valid() const;

    QString getResponseBody() const;
    void setResponseBody(const QString &response_body);
    bool is_response_body_Set() const;
    bool is_response_body_Valid() const;

    QString getSelector() const;
    void setSelector(const QString &selector);
    bool is_selector_Set() const;
    bool is_selector_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIHttpRule> m_additional_bindings;
    bool m_additional_bindings_isSet;
    bool m_additional_bindings_isValid;

    QString m_body;
    bool m_body_isSet;
    bool m_body_isValid;

    OAICustomHttpPattern m_custom;
    bool m_custom_isSet;
    bool m_custom_isValid;

    QString m_r_delete;
    bool m_r_delete_isSet;
    bool m_r_delete_isValid;

    QString m_get;
    bool m_get_isSet;
    bool m_get_isValid;

    QString m_patch;
    bool m_patch_isSet;
    bool m_patch_isValid;

    QString m_post;
    bool m_post_isSet;
    bool m_post_isValid;

    QString m_put;
    bool m_put_isSet;
    bool m_put_isValid;

    QString m_response_body;
    bool m_response_body_isSet;
    bool m_response_body_isValid;

    QString m_selector;
    bool m_selector_isSet;
    bool m_selector_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHttpRule)

#endif // OAIHttpRule_H
