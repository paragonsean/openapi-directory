/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContextRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContextRule::OAIContextRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContextRule::OAIContextRule() {
    this->initializeModel();
}

OAIContextRule::~OAIContextRule() {}

void OAIContextRule::initializeModel() {

    m_allowed_request_extensions_isSet = false;
    m_allowed_request_extensions_isValid = false;

    m_allowed_response_extensions_isSet = false;
    m_allowed_response_extensions_isValid = false;

    m_provided_isSet = false;
    m_provided_isValid = false;

    m_requested_isSet = false;
    m_requested_isValid = false;

    m_selector_isSet = false;
    m_selector_isValid = false;
}

void OAIContextRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContextRule::fromJsonObject(QJsonObject json) {

    m_allowed_request_extensions_isValid = ::OpenAPI::fromJsonValue(m_allowed_request_extensions, json[QString("allowedRequestExtensions")]);
    m_allowed_request_extensions_isSet = !json[QString("allowedRequestExtensions")].isNull() && m_allowed_request_extensions_isValid;

    m_allowed_response_extensions_isValid = ::OpenAPI::fromJsonValue(m_allowed_response_extensions, json[QString("allowedResponseExtensions")]);
    m_allowed_response_extensions_isSet = !json[QString("allowedResponseExtensions")].isNull() && m_allowed_response_extensions_isValid;

    m_provided_isValid = ::OpenAPI::fromJsonValue(m_provided, json[QString("provided")]);
    m_provided_isSet = !json[QString("provided")].isNull() && m_provided_isValid;

    m_requested_isValid = ::OpenAPI::fromJsonValue(m_requested, json[QString("requested")]);
    m_requested_isSet = !json[QString("requested")].isNull() && m_requested_isValid;

    m_selector_isValid = ::OpenAPI::fromJsonValue(m_selector, json[QString("selector")]);
    m_selector_isSet = !json[QString("selector")].isNull() && m_selector_isValid;
}

QString OAIContextRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContextRule::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_request_extensions.size() > 0) {
        obj.insert(QString("allowedRequestExtensions"), ::OpenAPI::toJsonValue(m_allowed_request_extensions));
    }
    if (m_allowed_response_extensions.size() > 0) {
        obj.insert(QString("allowedResponseExtensions"), ::OpenAPI::toJsonValue(m_allowed_response_extensions));
    }
    if (m_provided.size() > 0) {
        obj.insert(QString("provided"), ::OpenAPI::toJsonValue(m_provided));
    }
    if (m_requested.size() > 0) {
        obj.insert(QString("requested"), ::OpenAPI::toJsonValue(m_requested));
    }
    if (m_selector_isSet) {
        obj.insert(QString("selector"), ::OpenAPI::toJsonValue(m_selector));
    }
    return obj;
}

QList<QString> OAIContextRule::getAllowedRequestExtensions() const {
    return m_allowed_request_extensions;
}
void OAIContextRule::setAllowedRequestExtensions(const QList<QString> &allowed_request_extensions) {
    m_allowed_request_extensions = allowed_request_extensions;
    m_allowed_request_extensions_isSet = true;
}

bool OAIContextRule::is_allowed_request_extensions_Set() const{
    return m_allowed_request_extensions_isSet;
}

bool OAIContextRule::is_allowed_request_extensions_Valid() const{
    return m_allowed_request_extensions_isValid;
}

QList<QString> OAIContextRule::getAllowedResponseExtensions() const {
    return m_allowed_response_extensions;
}
void OAIContextRule::setAllowedResponseExtensions(const QList<QString> &allowed_response_extensions) {
    m_allowed_response_extensions = allowed_response_extensions;
    m_allowed_response_extensions_isSet = true;
}

bool OAIContextRule::is_allowed_response_extensions_Set() const{
    return m_allowed_response_extensions_isSet;
}

bool OAIContextRule::is_allowed_response_extensions_Valid() const{
    return m_allowed_response_extensions_isValid;
}

QList<QString> OAIContextRule::getProvided() const {
    return m_provided;
}
void OAIContextRule::setProvided(const QList<QString> &provided) {
    m_provided = provided;
    m_provided_isSet = true;
}

bool OAIContextRule::is_provided_Set() const{
    return m_provided_isSet;
}

bool OAIContextRule::is_provided_Valid() const{
    return m_provided_isValid;
}

QList<QString> OAIContextRule::getRequested() const {
    return m_requested;
}
void OAIContextRule::setRequested(const QList<QString> &requested) {
    m_requested = requested;
    m_requested_isSet = true;
}

bool OAIContextRule::is_requested_Set() const{
    return m_requested_isSet;
}

bool OAIContextRule::is_requested_Valid() const{
    return m_requested_isValid;
}

QString OAIContextRule::getSelector() const {
    return m_selector;
}
void OAIContextRule::setSelector(const QString &selector) {
    m_selector = selector;
    m_selector_isSet = true;
}

bool OAIContextRule::is_selector_Set() const{
    return m_selector_isSet;
}

bool OAIContextRule::is_selector_Valid() const{
    return m_selector_isValid;
}

bool OAIContextRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_request_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_response_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provided.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_selector_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContextRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
