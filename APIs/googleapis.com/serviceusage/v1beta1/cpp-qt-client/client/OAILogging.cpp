/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogging.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogging::OAILogging(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogging::OAILogging() {
    this->initializeModel();
}

OAILogging::~OAILogging() {}

void OAILogging::initializeModel() {

    m_consumer_destinations_isSet = false;
    m_consumer_destinations_isValid = false;

    m_producer_destinations_isSet = false;
    m_producer_destinations_isValid = false;
}

void OAILogging::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogging::fromJsonObject(QJsonObject json) {

    m_consumer_destinations_isValid = ::OpenAPI::fromJsonValue(m_consumer_destinations, json[QString("consumerDestinations")]);
    m_consumer_destinations_isSet = !json[QString("consumerDestinations")].isNull() && m_consumer_destinations_isValid;

    m_producer_destinations_isValid = ::OpenAPI::fromJsonValue(m_producer_destinations, json[QString("producerDestinations")]);
    m_producer_destinations_isSet = !json[QString("producerDestinations")].isNull() && m_producer_destinations_isValid;
}

QString OAILogging::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogging::asJsonObject() const {
    QJsonObject obj;
    if (m_consumer_destinations.size() > 0) {
        obj.insert(QString("consumerDestinations"), ::OpenAPI::toJsonValue(m_consumer_destinations));
    }
    if (m_producer_destinations.size() > 0) {
        obj.insert(QString("producerDestinations"), ::OpenAPI::toJsonValue(m_producer_destinations));
    }
    return obj;
}

QList<OAILoggingDestination> OAILogging::getConsumerDestinations() const {
    return m_consumer_destinations;
}
void OAILogging::setConsumerDestinations(const QList<OAILoggingDestination> &consumer_destinations) {
    m_consumer_destinations = consumer_destinations;
    m_consumer_destinations_isSet = true;
}

bool OAILogging::is_consumer_destinations_Set() const{
    return m_consumer_destinations_isSet;
}

bool OAILogging::is_consumer_destinations_Valid() const{
    return m_consumer_destinations_isValid;
}

QList<OAILoggingDestination> OAILogging::getProducerDestinations() const {
    return m_producer_destinations;
}
void OAILogging::setProducerDestinations(const QList<OAILoggingDestination> &producer_destinations) {
    m_producer_destinations = producer_destinations;
    m_producer_destinations_isSet = true;
}

bool OAILogging::is_producer_destinations_Set() const{
    return m_producer_destinations_isSet;
}

bool OAILogging::is_producer_destinations_Valid() const{
    return m_producer_destinations_isValid;
}

bool OAILogging::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumer_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_producer_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogging::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
