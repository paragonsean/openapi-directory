/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsumerQuotaLimit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsumerQuotaLimit::OAIConsumerQuotaLimit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsumerQuotaLimit::OAIConsumerQuotaLimit() {
    this->initializeModel();
}

OAIConsumerQuotaLimit::~OAIConsumerQuotaLimit() {}

void OAIConsumerQuotaLimit::initializeModel() {

    m_allows_admin_overrides_isSet = false;
    m_allows_admin_overrides_isValid = false;

    m_is_precise_isSet = false;
    m_is_precise_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_quota_buckets_isSet = false;
    m_quota_buckets_isValid = false;

    m_supported_locations_isSet = false;
    m_supported_locations_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIConsumerQuotaLimit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsumerQuotaLimit::fromJsonObject(QJsonObject json) {

    m_allows_admin_overrides_isValid = ::OpenAPI::fromJsonValue(m_allows_admin_overrides, json[QString("allowsAdminOverrides")]);
    m_allows_admin_overrides_isSet = !json[QString("allowsAdminOverrides")].isNull() && m_allows_admin_overrides_isValid;

    m_is_precise_isValid = ::OpenAPI::fromJsonValue(m_is_precise, json[QString("isPrecise")]);
    m_is_precise_isSet = !json[QString("isPrecise")].isNull() && m_is_precise_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_quota_buckets_isValid = ::OpenAPI::fromJsonValue(m_quota_buckets, json[QString("quotaBuckets")]);
    m_quota_buckets_isSet = !json[QString("quotaBuckets")].isNull() && m_quota_buckets_isValid;

    m_supported_locations_isValid = ::OpenAPI::fromJsonValue(m_supported_locations, json[QString("supportedLocations")]);
    m_supported_locations_isSet = !json[QString("supportedLocations")].isNull() && m_supported_locations_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIConsumerQuotaLimit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsumerQuotaLimit::asJsonObject() const {
    QJsonObject obj;
    if (m_allows_admin_overrides_isSet) {
        obj.insert(QString("allowsAdminOverrides"), ::OpenAPI::toJsonValue(m_allows_admin_overrides));
    }
    if (m_is_precise_isSet) {
        obj.insert(QString("isPrecise"), ::OpenAPI::toJsonValue(m_is_precise));
    }
    if (m_metric_isSet) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_quota_buckets.size() > 0) {
        obj.insert(QString("quotaBuckets"), ::OpenAPI::toJsonValue(m_quota_buckets));
    }
    if (m_supported_locations.size() > 0) {
        obj.insert(QString("supportedLocations"), ::OpenAPI::toJsonValue(m_supported_locations));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

bool OAIConsumerQuotaLimit::isAllowsAdminOverrides() const {
    return m_allows_admin_overrides;
}
void OAIConsumerQuotaLimit::setAllowsAdminOverrides(const bool &allows_admin_overrides) {
    m_allows_admin_overrides = allows_admin_overrides;
    m_allows_admin_overrides_isSet = true;
}

bool OAIConsumerQuotaLimit::is_allows_admin_overrides_Set() const{
    return m_allows_admin_overrides_isSet;
}

bool OAIConsumerQuotaLimit::is_allows_admin_overrides_Valid() const{
    return m_allows_admin_overrides_isValid;
}

bool OAIConsumerQuotaLimit::isIsPrecise() const {
    return m_is_precise;
}
void OAIConsumerQuotaLimit::setIsPrecise(const bool &is_precise) {
    m_is_precise = is_precise;
    m_is_precise_isSet = true;
}

bool OAIConsumerQuotaLimit::is_is_precise_Set() const{
    return m_is_precise_isSet;
}

bool OAIConsumerQuotaLimit::is_is_precise_Valid() const{
    return m_is_precise_isValid;
}

QString OAIConsumerQuotaLimit::getMetric() const {
    return m_metric;
}
void OAIConsumerQuotaLimit::setMetric(const QString &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIConsumerQuotaLimit::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIConsumerQuotaLimit::is_metric_Valid() const{
    return m_metric_isValid;
}

QString OAIConsumerQuotaLimit::getName() const {
    return m_name;
}
void OAIConsumerQuotaLimit::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConsumerQuotaLimit::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConsumerQuotaLimit::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIQuotaBucket> OAIConsumerQuotaLimit::getQuotaBuckets() const {
    return m_quota_buckets;
}
void OAIConsumerQuotaLimit::setQuotaBuckets(const QList<OAIQuotaBucket> &quota_buckets) {
    m_quota_buckets = quota_buckets;
    m_quota_buckets_isSet = true;
}

bool OAIConsumerQuotaLimit::is_quota_buckets_Set() const{
    return m_quota_buckets_isSet;
}

bool OAIConsumerQuotaLimit::is_quota_buckets_Valid() const{
    return m_quota_buckets_isValid;
}

QList<QString> OAIConsumerQuotaLimit::getSupportedLocations() const {
    return m_supported_locations;
}
void OAIConsumerQuotaLimit::setSupportedLocations(const QList<QString> &supported_locations) {
    m_supported_locations = supported_locations;
    m_supported_locations_isSet = true;
}

bool OAIConsumerQuotaLimit::is_supported_locations_Set() const{
    return m_supported_locations_isSet;
}

bool OAIConsumerQuotaLimit::is_supported_locations_Valid() const{
    return m_supported_locations_isValid;
}

QString OAIConsumerQuotaLimit::getUnit() const {
    return m_unit;
}
void OAIConsumerQuotaLimit::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIConsumerQuotaLimit::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIConsumerQuotaLimit::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIConsumerQuotaLimit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allows_admin_overrides_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_precise_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_buckets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsumerQuotaLimit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
