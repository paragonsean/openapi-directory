/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdminQuotaPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdminQuotaPolicy::OAIAdminQuotaPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdminQuotaPolicy::OAIAdminQuotaPolicy() {
    this->initializeModel();
}

OAIAdminQuotaPolicy::~OAIAdminQuotaPolicy() {}

void OAIAdminQuotaPolicy::initializeModel() {

    m_container_isSet = false;
    m_container_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_policy_value_isSet = false;
    m_policy_value_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIAdminQuotaPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdminQuotaPolicy::fromJsonObject(QJsonObject json) {

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_policy_value_isValid = ::OpenAPI::fromJsonValue(m_policy_value, json[QString("policyValue")]);
    m_policy_value_isSet = !json[QString("policyValue")].isNull() && m_policy_value_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIAdminQuotaPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdminQuotaPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_container_isSet) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_metric_isSet) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_policy_value_isSet) {
        obj.insert(QString("policyValue"), ::OpenAPI::toJsonValue(m_policy_value));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

QString OAIAdminQuotaPolicy::getContainer() const {
    return m_container;
}
void OAIAdminQuotaPolicy::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIAdminQuotaPolicy::is_container_Set() const{
    return m_container_isSet;
}

bool OAIAdminQuotaPolicy::is_container_Valid() const{
    return m_container_isValid;
}

QMap<QString, QString> OAIAdminQuotaPolicy::getDimensions() const {
    return m_dimensions;
}
void OAIAdminQuotaPolicy::setDimensions(const QMap<QString, QString> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIAdminQuotaPolicy::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIAdminQuotaPolicy::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIAdminQuotaPolicy::getMetric() const {
    return m_metric;
}
void OAIAdminQuotaPolicy::setMetric(const QString &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIAdminQuotaPolicy::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIAdminQuotaPolicy::is_metric_Valid() const{
    return m_metric_isValid;
}

QString OAIAdminQuotaPolicy::getName() const {
    return m_name;
}
void OAIAdminQuotaPolicy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdminQuotaPolicy::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdminQuotaPolicy::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAdminQuotaPolicy::getPolicyValue() const {
    return m_policy_value;
}
void OAIAdminQuotaPolicy::setPolicyValue(const QString &policy_value) {
    m_policy_value = policy_value;
    m_policy_value_isSet = true;
}

bool OAIAdminQuotaPolicy::is_policy_value_Set() const{
    return m_policy_value_isSet;
}

bool OAIAdminQuotaPolicy::is_policy_value_Valid() const{
    return m_policy_value_isValid;
}

QString OAIAdminQuotaPolicy::getUnit() const {
    return m_unit;
}
void OAIAdminQuotaPolicy::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIAdminQuotaPolicy::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIAdminQuotaPolicy::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIAdminQuotaPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdminQuotaPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
