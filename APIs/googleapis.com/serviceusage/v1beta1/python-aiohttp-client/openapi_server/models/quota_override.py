# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QuotaOverride(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_override_ancestor: str=None, dimensions: Dict[str, str]=None, metric: str=None, name: str=None, override_value: str=None, unit: str=None):
        """QuotaOverride - a model defined in OpenAPI

        :param admin_override_ancestor: The admin_override_ancestor of this QuotaOverride.
        :param dimensions: The dimensions of this QuotaOverride.
        :param metric: The metric of this QuotaOverride.
        :param name: The name of this QuotaOverride.
        :param override_value: The override_value of this QuotaOverride.
        :param unit: The unit of this QuotaOverride.
        """
        self.openapi_types = {
            'admin_override_ancestor': str,
            'dimensions': Dict[str, str],
            'metric': str,
            'name': str,
            'override_value': str,
            'unit': str
        }

        self.attribute_map = {
            'admin_override_ancestor': 'adminOverrideAncestor',
            'dimensions': 'dimensions',
            'metric': 'metric',
            'name': 'name',
            'override_value': 'overrideValue',
            'unit': 'unit'
        }

        self._admin_override_ancestor = admin_override_ancestor
        self._dimensions = dimensions
        self._metric = metric
        self._name = name
        self._override_value = override_value
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuotaOverride':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QuotaOverride of this QuotaOverride.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_override_ancestor(self):
        """Gets the admin_override_ancestor of this QuotaOverride.

        The resource name of the ancestor that requested the override. For example: `organizations/12345` or `folders/67890`. Used by admin overrides only.

        :return: The admin_override_ancestor of this QuotaOverride.
        :rtype: str
        """
        return self._admin_override_ancestor

    @admin_override_ancestor.setter
    def admin_override_ancestor(self, admin_override_ancestor):
        """Sets the admin_override_ancestor of this QuotaOverride.

        The resource name of the ancestor that requested the override. For example: `organizations/12345` or `folders/67890`. Used by admin overrides only.

        :param admin_override_ancestor: The admin_override_ancestor of this QuotaOverride.
        :type admin_override_ancestor: str
        """

        self._admin_override_ancestor = admin_override_ancestor

    @property
    def dimensions(self):
        """Gets the dimensions of this QuotaOverride.

        If this map is nonempty, then this override applies only to specific values for dimensions defined in the limit unit. For example, an override on a limit with the unit `1/{project}/{region}` could contain an entry with the key `region` and the value `us-east-1`; the override is only applied to quota consumed in that region. This map has the following restrictions: * Keys that are not defined in the limit's unit are not valid keys. Any string appearing in `{brackets}` in the unit (besides `{project}` or `{user}`) is a defined key. * `project` is not a valid key; the project is already specified in the parent resource name. * `user` is not a valid key; the API does not support quota overrides that apply only to a specific user. * If `region` appears as a key, its value must be a valid Cloud region. * If `zone` appears as a key, its value must be a valid Cloud zone. * If any valid key other than `region` or `zone` appears in the map, then all valid keys other than `region` or `zone` must also appear in the map.

        :return: The dimensions of this QuotaOverride.
        :rtype: Dict[str, str]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this QuotaOverride.

        If this map is nonempty, then this override applies only to specific values for dimensions defined in the limit unit. For example, an override on a limit with the unit `1/{project}/{region}` could contain an entry with the key `region` and the value `us-east-1`; the override is only applied to quota consumed in that region. This map has the following restrictions: * Keys that are not defined in the limit's unit are not valid keys. Any string appearing in `{brackets}` in the unit (besides `{project}` or `{user}`) is a defined key. * `project` is not a valid key; the project is already specified in the parent resource name. * `user` is not a valid key; the API does not support quota overrides that apply only to a specific user. * If `region` appears as a key, its value must be a valid Cloud region. * If `zone` appears as a key, its value must be a valid Cloud zone. * If any valid key other than `region` or `zone` appears in the map, then all valid keys other than `region` or `zone` must also appear in the map.

        :param dimensions: The dimensions of this QuotaOverride.
        :type dimensions: Dict[str, str]
        """

        self._dimensions = dimensions

    @property
    def metric(self):
        """Gets the metric of this QuotaOverride.

        The name of the metric to which this override applies. An example name would be: `compute.googleapis.com/cpus`

        :return: The metric of this QuotaOverride.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this QuotaOverride.

        The name of the metric to which this override applies. An example name would be: `compute.googleapis.com/cpus`

        :param metric: The metric of this QuotaOverride.
        :type metric: str
        """

        self._metric = metric

    @property
    def name(self):
        """Gets the name of this QuotaOverride.

        The resource name of the override. This name is generated by the server when the override is created. Example names would be: `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/adminOverrides/4a3f2c1d` `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/consumerOverrides/4a3f2c1d` The resource name is intended to be opaque and should not be parsed for its component strings, since its representation could change in the future.

        :return: The name of this QuotaOverride.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this QuotaOverride.

        The resource name of the override. This name is generated by the server when the override is created. Example names would be: `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/adminOverrides/4a3f2c1d` `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/consumerOverrides/4a3f2c1d` The resource name is intended to be opaque and should not be parsed for its component strings, since its representation could change in the future.

        :param name: The name of this QuotaOverride.
        :type name: str
        """

        self._name = name

    @property
    def override_value(self):
        """Gets the override_value of this QuotaOverride.

        The overriding quota limit value. Can be any nonnegative integer, or -1 (unlimited quota).

        :return: The override_value of this QuotaOverride.
        :rtype: str
        """
        return self._override_value

    @override_value.setter
    def override_value(self, override_value):
        """Sets the override_value of this QuotaOverride.

        The overriding quota limit value. Can be any nonnegative integer, or -1 (unlimited quota).

        :param override_value: The override_value of this QuotaOverride.
        :type override_value: str
        """

        self._override_value = override_value

    @property
    def unit(self):
        """Gets the unit of this QuotaOverride.

        The limit unit of the limit to which this override applies. An example unit would be: `1/{project}/{region}` Note that `{project}` and `{region}` are not placeholders in this example; the literal characters `{` and `}` occur in the string.

        :return: The unit of this QuotaOverride.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this QuotaOverride.

        The limit unit of the limit to which this override applies. An example unit would be: `1/{project}/{region}` Note that `{project}` and `{region}` are not placeholders in this example; the literal characters `{` and `}` occur in the string.

        :param unit: The unit of this QuotaOverride.
        :type unit: str
        """

        self._unit = unit
