# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enable_failure import EnableFailure
from openapi_server.models.google_api_serviceusage_v1_service import GoogleApiServiceusageV1Service
from openapi_server import util


class BatchEnableServicesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failures: List[EnableFailure]=None, services: List[GoogleApiServiceusageV1Service]=None):
        """BatchEnableServicesResponse - a model defined in OpenAPI

        :param failures: The failures of this BatchEnableServicesResponse.
        :param services: The services of this BatchEnableServicesResponse.
        """
        self.openapi_types = {
            'failures': List[EnableFailure],
            'services': List[GoogleApiServiceusageV1Service]
        }

        self.attribute_map = {
            'failures': 'failures',
            'services': 'services'
        }

        self._failures = failures
        self._services = services

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchEnableServicesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchEnableServicesResponse of this BatchEnableServicesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failures(self):
        """Gets the failures of this BatchEnableServicesResponse.

        If allow_partial_success is true, and one or more services could not be enabled, this field contains the details about each failure.

        :return: The failures of this BatchEnableServicesResponse.
        :rtype: List[EnableFailure]
        """
        return self._failures

    @failures.setter
    def failures(self, failures):
        """Sets the failures of this BatchEnableServicesResponse.

        If allow_partial_success is true, and one or more services could not be enabled, this field contains the details about each failure.

        :param failures: The failures of this BatchEnableServicesResponse.
        :type failures: List[EnableFailure]
        """

        self._failures = failures

    @property
    def services(self):
        """Gets the services of this BatchEnableServicesResponse.

        The new state of the services after enabling.

        :return: The services of this BatchEnableServicesResponse.
        :rtype: List[GoogleApiServiceusageV1Service]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this BatchEnableServicesResponse.

        The new state of the services after enabling.

        :param services: The services of this BatchEnableServicesResponse.
        :type services: List[GoogleApiServiceusageV1Service]
        """

        self._services = services
