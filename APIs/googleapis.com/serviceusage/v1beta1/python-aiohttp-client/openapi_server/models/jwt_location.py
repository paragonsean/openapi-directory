# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JwtLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cookie: str=None, header: str=None, query: str=None, value_prefix: str=None):
        """JwtLocation - a model defined in OpenAPI

        :param cookie: The cookie of this JwtLocation.
        :param header: The header of this JwtLocation.
        :param query: The query of this JwtLocation.
        :param value_prefix: The value_prefix of this JwtLocation.
        """
        self.openapi_types = {
            'cookie': str,
            'header': str,
            'query': str,
            'value_prefix': str
        }

        self.attribute_map = {
            'cookie': 'cookie',
            'header': 'header',
            'query': 'query',
            'value_prefix': 'valuePrefix'
        }

        self._cookie = cookie
        self._header = header
        self._query = query
        self._value_prefix = value_prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JwtLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JwtLocation of this JwtLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cookie(self):
        """Gets the cookie of this JwtLocation.

        Specifies cookie name to extract JWT token.

        :return: The cookie of this JwtLocation.
        :rtype: str
        """
        return self._cookie

    @cookie.setter
    def cookie(self, cookie):
        """Sets the cookie of this JwtLocation.

        Specifies cookie name to extract JWT token.

        :param cookie: The cookie of this JwtLocation.
        :type cookie: str
        """

        self._cookie = cookie

    @property
    def header(self):
        """Gets the header of this JwtLocation.

        Specifies HTTP header name to extract JWT token.

        :return: The header of this JwtLocation.
        :rtype: str
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this JwtLocation.

        Specifies HTTP header name to extract JWT token.

        :param header: The header of this JwtLocation.
        :type header: str
        """

        self._header = header

    @property
    def query(self):
        """Gets the query of this JwtLocation.

        Specifies URL query parameter name to extract JWT token.

        :return: The query of this JwtLocation.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this JwtLocation.

        Specifies URL query parameter name to extract JWT token.

        :param query: The query of this JwtLocation.
        :type query: str
        """

        self._query = query

    @property
    def value_prefix(self):
        """Gets the value_prefix of this JwtLocation.

        The value prefix. The value format is \"value_prefix{token}\" Only applies to \"in\" header type. Must be empty for \"in\" query type. If not empty, the header value has to match (case sensitive) this prefix. If not matched, JWT will not be extracted. If matched, JWT will be extracted after the prefix is removed. For example, for \"Authorization: Bearer {JWT}\", value_prefix=\"Bearer \" with a space at the end.

        :return: The value_prefix of this JwtLocation.
        :rtype: str
        """
        return self._value_prefix

    @value_prefix.setter
    def value_prefix(self, value_prefix):
        """Sets the value_prefix of this JwtLocation.

        The value prefix. The value format is \"value_prefix{token}\" Only applies to \"in\" header type. Must be empty for \"in\" query type. If not empty, the header value has to match (case sensitive) this prefix. If not matched, JWT will not be extracted. If matched, JWT will be extracted after the prefix is removed. For example, for \"Authorization: Bearer {JWT}\", value_prefix=\"Bearer \" with a space at the end.

        :param value_prefix: The value_prefix of this JwtLocation.
        :type value_prefix: str
        """

        self._value_prefix = value_prefix
