# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api import Api
from openapi_server.models.authentication import Authentication
from openapi_server.models.documentation import Documentation
from openapi_server.models.endpoint import Endpoint
from openapi_server.models.monitored_resource_descriptor import MonitoredResourceDescriptor
from openapi_server.models.monitoring import Monitoring
from openapi_server.models.quota import Quota
from openapi_server.models.usage import Usage
from openapi_server import util


class ServiceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apis: List[Api]=None, authentication: Authentication=None, documentation: Documentation=None, endpoints: List[Endpoint]=None, monitored_resources: List[MonitoredResourceDescriptor]=None, monitoring: Monitoring=None, name: str=None, quota: Quota=None, title: str=None, usage: Usage=None):
        """ServiceConfig - a model defined in OpenAPI

        :param apis: The apis of this ServiceConfig.
        :param authentication: The authentication of this ServiceConfig.
        :param documentation: The documentation of this ServiceConfig.
        :param endpoints: The endpoints of this ServiceConfig.
        :param monitored_resources: The monitored_resources of this ServiceConfig.
        :param monitoring: The monitoring of this ServiceConfig.
        :param name: The name of this ServiceConfig.
        :param quota: The quota of this ServiceConfig.
        :param title: The title of this ServiceConfig.
        :param usage: The usage of this ServiceConfig.
        """
        self.openapi_types = {
            'apis': List[Api],
            'authentication': Authentication,
            'documentation': Documentation,
            'endpoints': List[Endpoint],
            'monitored_resources': List[MonitoredResourceDescriptor],
            'monitoring': Monitoring,
            'name': str,
            'quota': Quota,
            'title': str,
            'usage': Usage
        }

        self.attribute_map = {
            'apis': 'apis',
            'authentication': 'authentication',
            'documentation': 'documentation',
            'endpoints': 'endpoints',
            'monitored_resources': 'monitoredResources',
            'monitoring': 'monitoring',
            'name': 'name',
            'quota': 'quota',
            'title': 'title',
            'usage': 'usage'
        }

        self._apis = apis
        self._authentication = authentication
        self._documentation = documentation
        self._endpoints = endpoints
        self._monitored_resources = monitored_resources
        self._monitoring = monitoring
        self._name = name
        self._quota = quota
        self._title = title
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceConfig of this ServiceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apis(self):
        """Gets the apis of this ServiceConfig.

        A list of API interfaces exported by this service. Contains only the names, versions, and method names of the interfaces.

        :return: The apis of this ServiceConfig.
        :rtype: List[Api]
        """
        return self._apis

    @apis.setter
    def apis(self, apis):
        """Sets the apis of this ServiceConfig.

        A list of API interfaces exported by this service. Contains only the names, versions, and method names of the interfaces.

        :param apis: The apis of this ServiceConfig.
        :type apis: List[Api]
        """

        self._apis = apis

    @property
    def authentication(self):
        """Gets the authentication of this ServiceConfig.


        :return: The authentication of this ServiceConfig.
        :rtype: Authentication
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this ServiceConfig.


        :param authentication: The authentication of this ServiceConfig.
        :type authentication: Authentication
        """

        self._authentication = authentication

    @property
    def documentation(self):
        """Gets the documentation of this ServiceConfig.


        :return: The documentation of this ServiceConfig.
        :rtype: Documentation
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this ServiceConfig.


        :param documentation: The documentation of this ServiceConfig.
        :type documentation: Documentation
        """

        self._documentation = documentation

    @property
    def endpoints(self):
        """Gets the endpoints of this ServiceConfig.

        Configuration for network endpoints. Contains only the names and aliases of the endpoints.

        :return: The endpoints of this ServiceConfig.
        :rtype: List[Endpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this ServiceConfig.

        Configuration for network endpoints. Contains only the names and aliases of the endpoints.

        :param endpoints: The endpoints of this ServiceConfig.
        :type endpoints: List[Endpoint]
        """

        self._endpoints = endpoints

    @property
    def monitored_resources(self):
        """Gets the monitored_resources of this ServiceConfig.

        Defines the monitored resources used by this service. This is required by the Service.monitoring and Service.logging configurations.

        :return: The monitored_resources of this ServiceConfig.
        :rtype: List[MonitoredResourceDescriptor]
        """
        return self._monitored_resources

    @monitored_resources.setter
    def monitored_resources(self, monitored_resources):
        """Sets the monitored_resources of this ServiceConfig.

        Defines the monitored resources used by this service. This is required by the Service.monitoring and Service.logging configurations.

        :param monitored_resources: The monitored_resources of this ServiceConfig.
        :type monitored_resources: List[MonitoredResourceDescriptor]
        """

        self._monitored_resources = monitored_resources

    @property
    def monitoring(self):
        """Gets the monitoring of this ServiceConfig.


        :return: The monitoring of this ServiceConfig.
        :rtype: Monitoring
        """
        return self._monitoring

    @monitoring.setter
    def monitoring(self, monitoring):
        """Sets the monitoring of this ServiceConfig.


        :param monitoring: The monitoring of this ServiceConfig.
        :type monitoring: Monitoring
        """

        self._monitoring = monitoring

    @property
    def name(self):
        """Gets the name of this ServiceConfig.

        The DNS address at which this service is available. An example DNS address would be: `calendar.googleapis.com`.

        :return: The name of this ServiceConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceConfig.

        The DNS address at which this service is available. An example DNS address would be: `calendar.googleapis.com`.

        :param name: The name of this ServiceConfig.
        :type name: str
        """

        self._name = name

    @property
    def quota(self):
        """Gets the quota of this ServiceConfig.


        :return: The quota of this ServiceConfig.
        :rtype: Quota
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this ServiceConfig.


        :param quota: The quota of this ServiceConfig.
        :type quota: Quota
        """

        self._quota = quota

    @property
    def title(self):
        """Gets the title of this ServiceConfig.

        The product title for this service.

        :return: The title of this ServiceConfig.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ServiceConfig.

        The product title for this service.

        :param title: The title of this ServiceConfig.
        :type title: str
        """

        self._title = title

    @property
    def usage(self):
        """Gets the usage of this ServiceConfig.


        :return: The usage of this ServiceConfig.
        :rtype: Usage
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this ServiceConfig.


        :param usage: The usage of this ServiceConfig.
        :type usage: Usage
        """

        self._usage = usage
