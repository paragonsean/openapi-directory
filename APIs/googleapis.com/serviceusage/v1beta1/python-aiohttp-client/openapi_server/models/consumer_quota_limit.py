# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.quota_bucket import QuotaBucket
from openapi_server import util


class ConsumerQuotaLimit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allows_admin_overrides: bool=None, is_precise: bool=None, metric: str=None, name: str=None, quota_buckets: List[QuotaBucket]=None, supported_locations: List[str]=None, unit: str=None):
        """ConsumerQuotaLimit - a model defined in OpenAPI

        :param allows_admin_overrides: The allows_admin_overrides of this ConsumerQuotaLimit.
        :param is_precise: The is_precise of this ConsumerQuotaLimit.
        :param metric: The metric of this ConsumerQuotaLimit.
        :param name: The name of this ConsumerQuotaLimit.
        :param quota_buckets: The quota_buckets of this ConsumerQuotaLimit.
        :param supported_locations: The supported_locations of this ConsumerQuotaLimit.
        :param unit: The unit of this ConsumerQuotaLimit.
        """
        self.openapi_types = {
            'allows_admin_overrides': bool,
            'is_precise': bool,
            'metric': str,
            'name': str,
            'quota_buckets': List[QuotaBucket],
            'supported_locations': List[str],
            'unit': str
        }

        self.attribute_map = {
            'allows_admin_overrides': 'allowsAdminOverrides',
            'is_precise': 'isPrecise',
            'metric': 'metric',
            'name': 'name',
            'quota_buckets': 'quotaBuckets',
            'supported_locations': 'supportedLocations',
            'unit': 'unit'
        }

        self._allows_admin_overrides = allows_admin_overrides
        self._is_precise = is_precise
        self._metric = metric
        self._name = name
        self._quota_buckets = quota_buckets
        self._supported_locations = supported_locations
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsumerQuotaLimit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsumerQuotaLimit of this ConsumerQuotaLimit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allows_admin_overrides(self):
        """Gets the allows_admin_overrides of this ConsumerQuotaLimit.

        Whether admin overrides are allowed on this limit

        :return: The allows_admin_overrides of this ConsumerQuotaLimit.
        :rtype: bool
        """
        return self._allows_admin_overrides

    @allows_admin_overrides.setter
    def allows_admin_overrides(self, allows_admin_overrides):
        """Sets the allows_admin_overrides of this ConsumerQuotaLimit.

        Whether admin overrides are allowed on this limit

        :param allows_admin_overrides: The allows_admin_overrides of this ConsumerQuotaLimit.
        :type allows_admin_overrides: bool
        """

        self._allows_admin_overrides = allows_admin_overrides

    @property
    def is_precise(self):
        """Gets the is_precise of this ConsumerQuotaLimit.

        Whether this limit is precise or imprecise.

        :return: The is_precise of this ConsumerQuotaLimit.
        :rtype: bool
        """
        return self._is_precise

    @is_precise.setter
    def is_precise(self, is_precise):
        """Sets the is_precise of this ConsumerQuotaLimit.

        Whether this limit is precise or imprecise.

        :param is_precise: The is_precise of this ConsumerQuotaLimit.
        :type is_precise: bool
        """

        self._is_precise = is_precise

    @property
    def metric(self):
        """Gets the metric of this ConsumerQuotaLimit.

        The name of the parent metric of this limit. An example name would be: `compute.googleapis.com/cpus`

        :return: The metric of this ConsumerQuotaLimit.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this ConsumerQuotaLimit.

        The name of the parent metric of this limit. An example name would be: `compute.googleapis.com/cpus`

        :param metric: The metric of this ConsumerQuotaLimit.
        :type metric: str
        """

        self._metric = metric

    @property
    def name(self):
        """Gets the name of this ConsumerQuotaLimit.

        The resource name of the quota limit. An example name would be: `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion` The resource name is intended to be opaque and should not be parsed for its component strings, since its representation could change in the future.

        :return: The name of this ConsumerQuotaLimit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConsumerQuotaLimit.

        The resource name of the quota limit. An example name would be: `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion` The resource name is intended to be opaque and should not be parsed for its component strings, since its representation could change in the future.

        :param name: The name of this ConsumerQuotaLimit.
        :type name: str
        """

        self._name = name

    @property
    def quota_buckets(self):
        """Gets the quota_buckets of this ConsumerQuotaLimit.

        Summary of the enforced quota buckets, organized by quota dimension, ordered from least specific to most specific (for example, the global default bucket, with no quota dimensions, will always appear first).

        :return: The quota_buckets of this ConsumerQuotaLimit.
        :rtype: List[QuotaBucket]
        """
        return self._quota_buckets

    @quota_buckets.setter
    def quota_buckets(self, quota_buckets):
        """Sets the quota_buckets of this ConsumerQuotaLimit.

        Summary of the enforced quota buckets, organized by quota dimension, ordered from least specific to most specific (for example, the global default bucket, with no quota dimensions, will always appear first).

        :param quota_buckets: The quota_buckets of this ConsumerQuotaLimit.
        :type quota_buckets: List[QuotaBucket]
        """

        self._quota_buckets = quota_buckets

    @property
    def supported_locations(self):
        """Gets the supported_locations of this ConsumerQuotaLimit.

        List of all supported locations. This field is present only if the limit has a {region} or {zone} dimension.

        :return: The supported_locations of this ConsumerQuotaLimit.
        :rtype: List[str]
        """
        return self._supported_locations

    @supported_locations.setter
    def supported_locations(self, supported_locations):
        """Sets the supported_locations of this ConsumerQuotaLimit.

        List of all supported locations. This field is present only if the limit has a {region} or {zone} dimension.

        :param supported_locations: The supported_locations of this ConsumerQuotaLimit.
        :type supported_locations: List[str]
        """

        self._supported_locations = supported_locations

    @property
    def unit(self):
        """Gets the unit of this ConsumerQuotaLimit.

        The limit unit. An example unit would be `1/{project}/{region}` Note that `{project}` and `{region}` are not placeholders in this example; the literal characters `{` and `}` occur in the string.

        :return: The unit of this ConsumerQuotaLimit.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ConsumerQuotaLimit.

        The limit unit. An example unit would be `1/{project}/{region}` Note that `{project}` and `{region}` are not placeholders in this example; the literal characters `{` and `}` occur in the string.

        :param unit: The unit of this ConsumerQuotaLimit.
        :type unit: str
        """

        self._unit = unit
