# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_config import ServiceConfig
from openapi_server import util


class Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: ServiceConfig=None, name: str=None, parent: str=None, state: str=None):
        """Service - a model defined in OpenAPI

        :param config: The config of this Service.
        :param name: The name of this Service.
        :param parent: The parent of this Service.
        :param state: The state of this Service.
        """
        self.openapi_types = {
            'config': ServiceConfig,
            'name': str,
            'parent': str,
            'state': str
        }

        self.attribute_map = {
            'config': 'config',
            'name': 'name',
            'parent': 'parent',
            'state': 'state'
        }

        self._config = config
        self._name = name
        self._parent = parent
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Service of this Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this Service.


        :return: The config of this Service.
        :rtype: ServiceConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Service.


        :param config: The config of this Service.
        :type config: ServiceConfig
        """

        self._config = config

    @property
    def name(self):
        """Gets the name of this Service.

        The resource name of the consumer and service. A valid name would be: - `projects/123/services/serviceusage.googleapis.com`

        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.

        The resource name of the consumer and service. A valid name would be: - `projects/123/services/serviceusage.googleapis.com`

        :param name: The name of this Service.
        :type name: str
        """

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this Service.

        The resource name of the consumer. A valid name would be: - `projects/123`

        :return: The parent of this Service.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Service.

        The resource name of the consumer. A valid name would be: - `projects/123`

        :param parent: The parent of this Service.
        :type parent: str
        """

        self._parent = parent

    @property
    def state(self):
        """Gets the state of this Service.

        Whether or not the service has been enabled for use by the consumer.

        :return: The state of this Service.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Service.

        Whether or not the service has been enabled for use by the consumer.

        :param state: The state of this Service.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "DISABLED", "ENABLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
