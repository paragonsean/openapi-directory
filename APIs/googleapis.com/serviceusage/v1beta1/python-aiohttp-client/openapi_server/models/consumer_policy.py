# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enable_rule import EnableRule
from openapi_server import util


class ConsumerPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, enable_rules: List[EnableRule]=None, etag: str=None, name: str=None, update_time: str=None):
        """ConsumerPolicy - a model defined in OpenAPI

        :param annotations: The annotations of this ConsumerPolicy.
        :param enable_rules: The enable_rules of this ConsumerPolicy.
        :param etag: The etag of this ConsumerPolicy.
        :param name: The name of this ConsumerPolicy.
        :param update_time: The update_time of this ConsumerPolicy.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'enable_rules': List[EnableRule],
            'etag': str,
            'name': str,
            'update_time': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'enable_rules': 'enableRules',
            'etag': 'etag',
            'name': 'name',
            'update_time': 'updateTime'
        }

        self._annotations = annotations
        self._enable_rules = enable_rules
        self._etag = etag
        self._name = name
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsumerPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsumerPolicy of this ConsumerPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this ConsumerPolicy.

        Optional. Annotations is an unstructured key-value map stored with a policy that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. [AIP-128](https://google.aip.dev/128#annotations)

        :return: The annotations of this ConsumerPolicy.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this ConsumerPolicy.

        Optional. Annotations is an unstructured key-value map stored with a policy that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. [AIP-128](https://google.aip.dev/128#annotations)

        :param annotations: The annotations of this ConsumerPolicy.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def enable_rules(self):
        """Gets the enable_rules of this ConsumerPolicy.

        Enable rules define usable services and service groups.

        :return: The enable_rules of this ConsumerPolicy.
        :rtype: List[EnableRule]
        """
        return self._enable_rules

    @enable_rules.setter
    def enable_rules(self, enable_rules):
        """Sets the enable_rules of this ConsumerPolicy.

        Enable rules define usable services and service groups.

        :param enable_rules: The enable_rules of this ConsumerPolicy.
        :type enable_rules: List[EnableRule]
        """

        self._enable_rules = enable_rules

    @property
    def etag(self):
        """Gets the etag of this ConsumerPolicy.

        An opaque tag indicating the current version of the policy, used for concurrency control.

        :return: The etag of this ConsumerPolicy.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ConsumerPolicy.

        An opaque tag indicating the current version of the policy, used for concurrency control.

        :param etag: The etag of this ConsumerPolicy.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this ConsumerPolicy.

        Output only. The resource name of the policy. We only allow consumer policy name as `default` for now: `projects/12345/consumerPolicies/default`, `folders/12345/consumerPolicies/default`, `organizations/12345/consumerPolicies/default`.

        :return: The name of this ConsumerPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConsumerPolicy.

        Output only. The resource name of the policy. We only allow consumer policy name as `default` for now: `projects/12345/consumerPolicies/default`, `folders/12345/consumerPolicies/default`, `organizations/12345/consumerPolicies/default`.

        :param name: The name of this ConsumerPolicy.
        :type name: str
        """

        self._name = name

    @property
    def update_time(self):
        """Gets the update_time of this ConsumerPolicy.

        The last-modified time.

        :return: The update_time of this ConsumerPolicy.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ConsumerPolicy.

        The last-modified time.

        :param update_time: The update_time of this ConsumerPolicy.
        :type update_time: str
        """

        self._update_time = update_time
