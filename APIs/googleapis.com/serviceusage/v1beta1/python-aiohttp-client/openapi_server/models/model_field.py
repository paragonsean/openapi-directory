# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.option import Option
from openapi_server import util


class ModelField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cardinality: str=None, default_value: str=None, json_name: str=None, kind: str=None, name: str=None, number: int=None, oneof_index: int=None, options: List[Option]=None, packed: bool=None, type_url: str=None):
        """ModelField - a model defined in OpenAPI

        :param cardinality: The cardinality of this ModelField.
        :param default_value: The default_value of this ModelField.
        :param json_name: The json_name of this ModelField.
        :param kind: The kind of this ModelField.
        :param name: The name of this ModelField.
        :param number: The number of this ModelField.
        :param oneof_index: The oneof_index of this ModelField.
        :param options: The options of this ModelField.
        :param packed: The packed of this ModelField.
        :param type_url: The type_url of this ModelField.
        """
        self.openapi_types = {
            'cardinality': str,
            'default_value': str,
            'json_name': str,
            'kind': str,
            'name': str,
            'number': int,
            'oneof_index': int,
            'options': List[Option],
            'packed': bool,
            'type_url': str
        }

        self.attribute_map = {
            'cardinality': 'cardinality',
            'default_value': 'defaultValue',
            'json_name': 'jsonName',
            'kind': 'kind',
            'name': 'name',
            'number': 'number',
            'oneof_index': 'oneofIndex',
            'options': 'options',
            'packed': 'packed',
            'type_url': 'typeUrl'
        }

        self._cardinality = cardinality
        self._default_value = default_value
        self._json_name = json_name
        self._kind = kind
        self._name = name
        self._number = number
        self._oneof_index = oneof_index
        self._options = options
        self._packed = packed
        self._type_url = type_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Field of this ModelField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cardinality(self):
        """Gets the cardinality of this ModelField.

        The field cardinality.

        :return: The cardinality of this ModelField.
        :rtype: str
        """
        return self._cardinality

    @cardinality.setter
    def cardinality(self, cardinality):
        """Sets the cardinality of this ModelField.

        The field cardinality.

        :param cardinality: The cardinality of this ModelField.
        :type cardinality: str
        """
        allowed_values = ["CARDINALITY_UNKNOWN", "CARDINALITY_OPTIONAL", "CARDINALITY_REQUIRED", "CARDINALITY_REPEATED"]  # noqa: E501
        if cardinality not in allowed_values:
            raise ValueError(
                "Invalid value for `cardinality` ({0}), must be one of {1}"
                .format(cardinality, allowed_values)
            )

        self._cardinality = cardinality

    @property
    def default_value(self):
        """Gets the default_value of this ModelField.

        The string value of the default value of this field. Proto2 syntax only.

        :return: The default_value of this ModelField.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this ModelField.

        The string value of the default value of this field. Proto2 syntax only.

        :param default_value: The default_value of this ModelField.
        :type default_value: str
        """

        self._default_value = default_value

    @property
    def json_name(self):
        """Gets the json_name of this ModelField.

        The field JSON name.

        :return: The json_name of this ModelField.
        :rtype: str
        """
        return self._json_name

    @json_name.setter
    def json_name(self, json_name):
        """Sets the json_name of this ModelField.

        The field JSON name.

        :param json_name: The json_name of this ModelField.
        :type json_name: str
        """

        self._json_name = json_name

    @property
    def kind(self):
        """Gets the kind of this ModelField.

        The field type.

        :return: The kind of this ModelField.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ModelField.

        The field type.

        :param kind: The kind of this ModelField.
        :type kind: str
        """
        allowed_values = ["TYPE_UNKNOWN", "TYPE_DOUBLE", "TYPE_FLOAT", "TYPE_INT64", "TYPE_UINT64", "TYPE_INT32", "TYPE_FIXED64", "TYPE_FIXED32", "TYPE_BOOL", "TYPE_STRING", "TYPE_GROUP", "TYPE_MESSAGE", "TYPE_BYTES", "TYPE_UINT32", "TYPE_ENUM", "TYPE_SFIXED32", "TYPE_SFIXED64", "TYPE_SINT32", "TYPE_SINT64"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this ModelField.

        The field name.

        :return: The name of this ModelField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelField.

        The field name.

        :param name: The name of this ModelField.
        :type name: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this ModelField.

        The field number.

        :return: The number of this ModelField.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ModelField.

        The field number.

        :param number: The number of this ModelField.
        :type number: int
        """

        self._number = number

    @property
    def oneof_index(self):
        """Gets the oneof_index of this ModelField.

        The index of the field type in `Type.oneofs`, for message or enumeration types. The first type has index 1; zero means the type is not in the list.

        :return: The oneof_index of this ModelField.
        :rtype: int
        """
        return self._oneof_index

    @oneof_index.setter
    def oneof_index(self, oneof_index):
        """Sets the oneof_index of this ModelField.

        The index of the field type in `Type.oneofs`, for message or enumeration types. The first type has index 1; zero means the type is not in the list.

        :param oneof_index: The oneof_index of this ModelField.
        :type oneof_index: int
        """

        self._oneof_index = oneof_index

    @property
    def options(self):
        """Gets the options of this ModelField.

        The protocol buffer options.

        :return: The options of this ModelField.
        :rtype: List[Option]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ModelField.

        The protocol buffer options.

        :param options: The options of this ModelField.
        :type options: List[Option]
        """

        self._options = options

    @property
    def packed(self):
        """Gets the packed of this ModelField.

        Whether to use alternative packed wire representation.

        :return: The packed of this ModelField.
        :rtype: bool
        """
        return self._packed

    @packed.setter
    def packed(self, packed):
        """Sets the packed of this ModelField.

        Whether to use alternative packed wire representation.

        :param packed: The packed of this ModelField.
        :type packed: bool
        """

        self._packed = packed

    @property
    def type_url(self):
        """Gets the type_url of this ModelField.

        The field type URL, without the scheme, for message or enumeration types. Example: `\"type.googleapis.com/google.protobuf.Timestamp\"`.

        :return: The type_url of this ModelField.
        :rtype: str
        """
        return self._type_url

    @type_url.setter
    def type_url(self, type_url):
        """Sets the type_url of this ModelField.

        The field type URL, without the scheme, for message or enumeration types. Example: `\"type.googleapis.com/google.protobuf.Timestamp\"`.

        :param type_url: The type_url of this ModelField.
        :type type_url: str
        """

        self._type_url = type_url
