# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.override_inline_source import OverrideInlineSource
from openapi_server import util


class ImportAdminOverridesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, force: bool=None, force_only: List[str]=None, inline_source: OverrideInlineSource=None):
        """ImportAdminOverridesRequest - a model defined in OpenAPI

        :param force: The force of this ImportAdminOverridesRequest.
        :param force_only: The force_only of this ImportAdminOverridesRequest.
        :param inline_source: The inline_source of this ImportAdminOverridesRequest.
        """
        self.openapi_types = {
            'force': bool,
            'force_only': List[str],
            'inline_source': OverrideInlineSource
        }

        self.attribute_map = {
            'force': 'force',
            'force_only': 'forceOnly',
            'inline_source': 'inlineSource'
        }

        self._force = force
        self._force_only = force_only
        self._inline_source = inline_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportAdminOverridesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportAdminOverridesRequest of this ImportAdminOverridesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def force(self):
        """Gets the force of this ImportAdminOverridesRequest.

        Whether to force the creation of the quota overrides. Setting the force parameter to 'true' ignores all quota safety checks that would fail the request. QuotaSafetyCheck lists all such validations.

        :return: The force of this ImportAdminOverridesRequest.
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this ImportAdminOverridesRequest.

        Whether to force the creation of the quota overrides. Setting the force parameter to 'true' ignores all quota safety checks that would fail the request. QuotaSafetyCheck lists all such validations.

        :param force: The force of this ImportAdminOverridesRequest.
        :type force: bool
        """

        self._force = force

    @property
    def force_only(self):
        """Gets the force_only of this ImportAdminOverridesRequest.

        The list of quota safety checks to ignore before the override mutation. Unlike 'force' field that ignores all the quota safety checks, the 'force_only' field ignores only the specified checks; other checks are still enforced. The 'force' and 'force_only' fields cannot both be set.

        :return: The force_only of this ImportAdminOverridesRequest.
        :rtype: List[str]
        """
        return self._force_only

    @force_only.setter
    def force_only(self, force_only):
        """Sets the force_only of this ImportAdminOverridesRequest.

        The list of quota safety checks to ignore before the override mutation. Unlike 'force' field that ignores all the quota safety checks, the 'force_only' field ignores only the specified checks; other checks are still enforced. The 'force' and 'force_only' fields cannot both be set.

        :param force_only: The force_only of this ImportAdminOverridesRequest.
        :type force_only: List[str]
        """
        allowed_values = ["QUOTA_SAFETY_CHECK_UNSPECIFIED", "LIMIT_DECREASE_BELOW_USAGE", "LIMIT_DECREASE_PERCENTAGE_TOO_HIGH"]  # noqa: E501
        if not set(force_only).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `force_only` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(force_only) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._force_only = force_only

    @property
    def inline_source(self):
        """Gets the inline_source of this ImportAdminOverridesRequest.


        :return: The inline_source of this ImportAdminOverridesRequest.
        :rtype: OverrideInlineSource
        """
        return self._inline_source

    @inline_source.setter
    def inline_source(self, inline_source):
        """Sets the inline_source of this ImportAdminOverridesRequest.


        :param inline_source: The inline_source of this ImportAdminOverridesRequest.
        :type inline_source: OverrideInlineSource
        """

        self._inline_source = inline_source
