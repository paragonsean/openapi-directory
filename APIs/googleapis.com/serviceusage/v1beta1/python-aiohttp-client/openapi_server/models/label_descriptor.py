# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LabelDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, key: str=None, value_type: str=None):
        """LabelDescriptor - a model defined in OpenAPI

        :param description: The description of this LabelDescriptor.
        :param key: The key of this LabelDescriptor.
        :param value_type: The value_type of this LabelDescriptor.
        """
        self.openapi_types = {
            'description': str,
            'key': str,
            'value_type': str
        }

        self.attribute_map = {
            'description': 'description',
            'key': 'key',
            'value_type': 'valueType'
        }

        self._description = description
        self._key = key
        self._value_type = value_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabelDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabelDescriptor of this LabelDescriptor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this LabelDescriptor.

        A human-readable description for the label.

        :return: The description of this LabelDescriptor.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LabelDescriptor.

        A human-readable description for the label.

        :param description: The description of this LabelDescriptor.
        :type description: str
        """

        self._description = description

    @property
    def key(self):
        """Gets the key of this LabelDescriptor.

        The label key.

        :return: The key of this LabelDescriptor.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this LabelDescriptor.

        The label key.

        :param key: The key of this LabelDescriptor.
        :type key: str
        """

        self._key = key

    @property
    def value_type(self):
        """Gets the value_type of this LabelDescriptor.

        The type of data that can be assigned to the label.

        :return: The value_type of this LabelDescriptor.
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this LabelDescriptor.

        The type of data that can be assigned to the label.

        :param value_type: The value_type of this LabelDescriptor.
        :type value_type: str
        """
        allowed_values = ["STRING", "BOOL", "INT64"]  # noqa: E501
        if value_type not in allowed_values:
            raise ValueError(
                "Invalid value for `value_type` ({0}), must be one of {1}"
                .format(value_type, allowed_values)
            )

        self._value_type = value_type
