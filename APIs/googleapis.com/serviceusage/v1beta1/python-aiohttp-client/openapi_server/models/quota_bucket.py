# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.producer_quota_policy import ProducerQuotaPolicy
from openapi_server.models.quota_override import QuotaOverride
from openapi_server import util


class QuotaBucket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_override: QuotaOverride=None, consumer_override: QuotaOverride=None, default_limit: str=None, dimensions: Dict[str, str]=None, effective_limit: str=None, producer_override: QuotaOverride=None, producer_quota_policy: ProducerQuotaPolicy=None):
        """QuotaBucket - a model defined in OpenAPI

        :param admin_override: The admin_override of this QuotaBucket.
        :param consumer_override: The consumer_override of this QuotaBucket.
        :param default_limit: The default_limit of this QuotaBucket.
        :param dimensions: The dimensions of this QuotaBucket.
        :param effective_limit: The effective_limit of this QuotaBucket.
        :param producer_override: The producer_override of this QuotaBucket.
        :param producer_quota_policy: The producer_quota_policy of this QuotaBucket.
        """
        self.openapi_types = {
            'admin_override': QuotaOverride,
            'consumer_override': QuotaOverride,
            'default_limit': str,
            'dimensions': Dict[str, str],
            'effective_limit': str,
            'producer_override': QuotaOverride,
            'producer_quota_policy': ProducerQuotaPolicy
        }

        self.attribute_map = {
            'admin_override': 'adminOverride',
            'consumer_override': 'consumerOverride',
            'default_limit': 'defaultLimit',
            'dimensions': 'dimensions',
            'effective_limit': 'effectiveLimit',
            'producer_override': 'producerOverride',
            'producer_quota_policy': 'producerQuotaPolicy'
        }

        self._admin_override = admin_override
        self._consumer_override = consumer_override
        self._default_limit = default_limit
        self._dimensions = dimensions
        self._effective_limit = effective_limit
        self._producer_override = producer_override
        self._producer_quota_policy = producer_quota_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuotaBucket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QuotaBucket of this QuotaBucket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_override(self):
        """Gets the admin_override of this QuotaBucket.


        :return: The admin_override of this QuotaBucket.
        :rtype: QuotaOverride
        """
        return self._admin_override

    @admin_override.setter
    def admin_override(self, admin_override):
        """Sets the admin_override of this QuotaBucket.


        :param admin_override: The admin_override of this QuotaBucket.
        :type admin_override: QuotaOverride
        """

        self._admin_override = admin_override

    @property
    def consumer_override(self):
        """Gets the consumer_override of this QuotaBucket.


        :return: The consumer_override of this QuotaBucket.
        :rtype: QuotaOverride
        """
        return self._consumer_override

    @consumer_override.setter
    def consumer_override(self, consumer_override):
        """Sets the consumer_override of this QuotaBucket.


        :param consumer_override: The consumer_override of this QuotaBucket.
        :type consumer_override: QuotaOverride
        """

        self._consumer_override = consumer_override

    @property
    def default_limit(self):
        """Gets the default_limit of this QuotaBucket.

        The default limit of this quota bucket, as specified by the service configuration.

        :return: The default_limit of this QuotaBucket.
        :rtype: str
        """
        return self._default_limit

    @default_limit.setter
    def default_limit(self, default_limit):
        """Sets the default_limit of this QuotaBucket.

        The default limit of this quota bucket, as specified by the service configuration.

        :param default_limit: The default_limit of this QuotaBucket.
        :type default_limit: str
        """

        self._default_limit = default_limit

    @property
    def dimensions(self):
        """Gets the dimensions of this QuotaBucket.

        The dimensions of this quota bucket. If this map is empty, this is the global bucket, which is the default quota value applied to all requests that do not have a more specific override. If this map is nonempty, the default limit, effective limit, and quota overrides apply only to requests that have the dimensions given in the map. For example, if the map has key `region` and value `us-east-1`, then the specified effective limit is only effective in that region, and the specified overrides apply only in that region.

        :return: The dimensions of this QuotaBucket.
        :rtype: Dict[str, str]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this QuotaBucket.

        The dimensions of this quota bucket. If this map is empty, this is the global bucket, which is the default quota value applied to all requests that do not have a more specific override. If this map is nonempty, the default limit, effective limit, and quota overrides apply only to requests that have the dimensions given in the map. For example, if the map has key `region` and value `us-east-1`, then the specified effective limit is only effective in that region, and the specified overrides apply only in that region.

        :param dimensions: The dimensions of this QuotaBucket.
        :type dimensions: Dict[str, str]
        """

        self._dimensions = dimensions

    @property
    def effective_limit(self):
        """Gets the effective_limit of this QuotaBucket.

        The effective limit of this quota bucket. Equal to default_limit if there are no overrides.

        :return: The effective_limit of this QuotaBucket.
        :rtype: str
        """
        return self._effective_limit

    @effective_limit.setter
    def effective_limit(self, effective_limit):
        """Sets the effective_limit of this QuotaBucket.

        The effective limit of this quota bucket. Equal to default_limit if there are no overrides.

        :param effective_limit: The effective_limit of this QuotaBucket.
        :type effective_limit: str
        """

        self._effective_limit = effective_limit

    @property
    def producer_override(self):
        """Gets the producer_override of this QuotaBucket.


        :return: The producer_override of this QuotaBucket.
        :rtype: QuotaOverride
        """
        return self._producer_override

    @producer_override.setter
    def producer_override(self, producer_override):
        """Sets the producer_override of this QuotaBucket.


        :param producer_override: The producer_override of this QuotaBucket.
        :type producer_override: QuotaOverride
        """

        self._producer_override = producer_override

    @property
    def producer_quota_policy(self):
        """Gets the producer_quota_policy of this QuotaBucket.


        :return: The producer_quota_policy of this QuotaBucket.
        :rtype: ProducerQuotaPolicy
        """
        return self._producer_quota_policy

    @producer_quota_policy.setter
    def producer_quota_policy(self, producer_quota_policy):
        """Sets the producer_quota_policy of this QuotaBucket.


        :param producer_quota_policy: The producer_quota_policy of this QuotaBucket.
        :type producer_quota_policy: ProducerQuotaPolicy
        """

        self._producer_quota_policy = producer_quota_policy
