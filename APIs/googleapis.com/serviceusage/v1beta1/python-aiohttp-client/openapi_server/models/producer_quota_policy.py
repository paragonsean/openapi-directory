# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProducerQuotaPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container: str=None, dimensions: Dict[str, str]=None, metric: str=None, name: str=None, policy_value: str=None, unit: str=None):
        """ProducerQuotaPolicy - a model defined in OpenAPI

        :param container: The container of this ProducerQuotaPolicy.
        :param dimensions: The dimensions of this ProducerQuotaPolicy.
        :param metric: The metric of this ProducerQuotaPolicy.
        :param name: The name of this ProducerQuotaPolicy.
        :param policy_value: The policy_value of this ProducerQuotaPolicy.
        :param unit: The unit of this ProducerQuotaPolicy.
        """
        self.openapi_types = {
            'container': str,
            'dimensions': Dict[str, str],
            'metric': str,
            'name': str,
            'policy_value': str,
            'unit': str
        }

        self.attribute_map = {
            'container': 'container',
            'dimensions': 'dimensions',
            'metric': 'metric',
            'name': 'name',
            'policy_value': 'policyValue',
            'unit': 'unit'
        }

        self._container = container
        self._dimensions = dimensions
        self._metric = metric
        self._name = name
        self._policy_value = policy_value
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProducerQuotaPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProducerQuotaPolicy of this ProducerQuotaPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container(self):
        """Gets the container of this ProducerQuotaPolicy.

        The cloud resource container at which the quota policy is created. The format is `{container_type}/{container_number}`

        :return: The container of this ProducerQuotaPolicy.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this ProducerQuotaPolicy.

        The cloud resource container at which the quota policy is created. The format is `{container_type}/{container_number}`

        :param container: The container of this ProducerQuotaPolicy.
        :type container: str
        """

        self._container = container

    @property
    def dimensions(self):
        """Gets the dimensions of this ProducerQuotaPolicy.

         If this map is nonempty, then this policy applies only to specific values for dimensions defined in the limit unit. For example, a policy on a limit with the unit `1/{project}/{region}` could contain an entry with the key `region` and the value `us-east-1`; the policy is only applied to quota consumed in that region. This map has the following restrictions: * Keys that are not defined in the limit's unit are not valid keys. Any string appearing in {brackets} in the unit (besides {project} or {user}) is a defined key. * `project` is not a valid key; the project is already specified in the parent resource name. * `user` is not a valid key; the API does not support quota policies that apply only to a specific user. * If `region` appears as a key, its value must be a valid Cloud region. * If `zone` appears as a key, its value must be a valid Cloud zone. * If any valid key other than `region` or `zone` appears in the map, then all valid keys other than `region` or `zone` must also appear in the map.

        :return: The dimensions of this ProducerQuotaPolicy.
        :rtype: Dict[str, str]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this ProducerQuotaPolicy.

         If this map is nonempty, then this policy applies only to specific values for dimensions defined in the limit unit. For example, a policy on a limit with the unit `1/{project}/{region}` could contain an entry with the key `region` and the value `us-east-1`; the policy is only applied to quota consumed in that region. This map has the following restrictions: * Keys that are not defined in the limit's unit are not valid keys. Any string appearing in {brackets} in the unit (besides {project} or {user}) is a defined key. * `project` is not a valid key; the project is already specified in the parent resource name. * `user` is not a valid key; the API does not support quota policies that apply only to a specific user. * If `region` appears as a key, its value must be a valid Cloud region. * If `zone` appears as a key, its value must be a valid Cloud zone. * If any valid key other than `region` or `zone` appears in the map, then all valid keys other than `region` or `zone` must also appear in the map.

        :param dimensions: The dimensions of this ProducerQuotaPolicy.
        :type dimensions: Dict[str, str]
        """

        self._dimensions = dimensions

    @property
    def metric(self):
        """Gets the metric of this ProducerQuotaPolicy.

        The name of the metric to which this policy applies. An example name would be: `compute.googleapis.com/cpus`

        :return: The metric of this ProducerQuotaPolicy.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this ProducerQuotaPolicy.

        The name of the metric to which this policy applies. An example name would be: `compute.googleapis.com/cpus`

        :param metric: The metric of this ProducerQuotaPolicy.
        :type metric: str
        """

        self._metric = metric

    @property
    def name(self):
        """Gets the name of this ProducerQuotaPolicy.

        The resource name of the policy. This name is generated by the server when the policy is created. Example names would be: `organizations/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/producerQuotaPolicies/4a3f2c1d`

        :return: The name of this ProducerQuotaPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProducerQuotaPolicy.

        The resource name of the policy. This name is generated by the server when the policy is created. Example names would be: `organizations/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/producerQuotaPolicies/4a3f2c1d`

        :param name: The name of this ProducerQuotaPolicy.
        :type name: str
        """

        self._name = name

    @property
    def policy_value(self):
        """Gets the policy_value of this ProducerQuotaPolicy.

        The quota policy value. Can be any nonnegative integer, or -1 (unlimited quota).

        :return: The policy_value of this ProducerQuotaPolicy.
        :rtype: str
        """
        return self._policy_value

    @policy_value.setter
    def policy_value(self, policy_value):
        """Sets the policy_value of this ProducerQuotaPolicy.

        The quota policy value. Can be any nonnegative integer, or -1 (unlimited quota).

        :param policy_value: The policy_value of this ProducerQuotaPolicy.
        :type policy_value: str
        """

        self._policy_value = policy_value

    @property
    def unit(self):
        """Gets the unit of this ProducerQuotaPolicy.

        The limit unit of the limit to which this policy applies. An example unit would be: `1/{project}/{region}` Note that `{project}` and `{region}` are not placeholders in this example; the literal characters `{` and `}` occur in the string.

        :return: The unit of this ProducerQuotaPolicy.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ProducerQuotaPolicy.

        The limit unit of the limit to which this policy applies. An example unit would be: `1/{project}/{region}` Note that `{project}` and `{region}` are not placeholders in this example; the literal characters `{` and `}` occur in the string.

        :param unit: The unit of this ProducerQuotaPolicy.
        :type unit: str
        """

        self._unit = unit
