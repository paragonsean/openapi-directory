# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LongRunning(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, initial_poll_delay: str=None, max_poll_delay: str=None, poll_delay_multiplier: float=None, total_poll_timeout: str=None):
        """LongRunning - a model defined in OpenAPI

        :param initial_poll_delay: The initial_poll_delay of this LongRunning.
        :param max_poll_delay: The max_poll_delay of this LongRunning.
        :param poll_delay_multiplier: The poll_delay_multiplier of this LongRunning.
        :param total_poll_timeout: The total_poll_timeout of this LongRunning.
        """
        self.openapi_types = {
            'initial_poll_delay': str,
            'max_poll_delay': str,
            'poll_delay_multiplier': float,
            'total_poll_timeout': str
        }

        self.attribute_map = {
            'initial_poll_delay': 'initialPollDelay',
            'max_poll_delay': 'maxPollDelay',
            'poll_delay_multiplier': 'pollDelayMultiplier',
            'total_poll_timeout': 'totalPollTimeout'
        }

        self._initial_poll_delay = initial_poll_delay
        self._max_poll_delay = max_poll_delay
        self._poll_delay_multiplier = poll_delay_multiplier
        self._total_poll_timeout = total_poll_timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LongRunning':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LongRunning of this LongRunning.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def initial_poll_delay(self):
        """Gets the initial_poll_delay of this LongRunning.

        Initial delay after which the first poll request will be made. Default value: 5 seconds.

        :return: The initial_poll_delay of this LongRunning.
        :rtype: str
        """
        return self._initial_poll_delay

    @initial_poll_delay.setter
    def initial_poll_delay(self, initial_poll_delay):
        """Sets the initial_poll_delay of this LongRunning.

        Initial delay after which the first poll request will be made. Default value: 5 seconds.

        :param initial_poll_delay: The initial_poll_delay of this LongRunning.
        :type initial_poll_delay: str
        """

        self._initial_poll_delay = initial_poll_delay

    @property
    def max_poll_delay(self):
        """Gets the max_poll_delay of this LongRunning.

        Maximum time between two subsequent poll requests. Default value: 45 seconds.

        :return: The max_poll_delay of this LongRunning.
        :rtype: str
        """
        return self._max_poll_delay

    @max_poll_delay.setter
    def max_poll_delay(self, max_poll_delay):
        """Sets the max_poll_delay of this LongRunning.

        Maximum time between two subsequent poll requests. Default value: 45 seconds.

        :param max_poll_delay: The max_poll_delay of this LongRunning.
        :type max_poll_delay: str
        """

        self._max_poll_delay = max_poll_delay

    @property
    def poll_delay_multiplier(self):
        """Gets the poll_delay_multiplier of this LongRunning.

        Multiplier to gradually increase delay between subsequent polls until it reaches max_poll_delay. Default value: 1.5.

        :return: The poll_delay_multiplier of this LongRunning.
        :rtype: float
        """
        return self._poll_delay_multiplier

    @poll_delay_multiplier.setter
    def poll_delay_multiplier(self, poll_delay_multiplier):
        """Sets the poll_delay_multiplier of this LongRunning.

        Multiplier to gradually increase delay between subsequent polls until it reaches max_poll_delay. Default value: 1.5.

        :param poll_delay_multiplier: The poll_delay_multiplier of this LongRunning.
        :type poll_delay_multiplier: float
        """

        self._poll_delay_multiplier = poll_delay_multiplier

    @property
    def total_poll_timeout(self):
        """Gets the total_poll_timeout of this LongRunning.

        Total polling timeout. Default value: 5 minutes.

        :return: The total_poll_timeout of this LongRunning.
        :rtype: str
        """
        return self._total_poll_timeout

    @total_poll_timeout.setter
    def total_poll_timeout(self, total_poll_timeout):
        """Sets the total_poll_timeout of this LongRunning.

        Total polling timeout. Default value: 5 minutes.

        :param total_poll_timeout: The total_poll_timeout of this LongRunning.
        :type total_poll_timeout: str
        """

        self._total_poll_timeout = total_poll_timeout
