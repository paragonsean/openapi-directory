# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnableRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_type: str=None, groups: List[str]=None, services: List[str]=None, values: List[str]=None):
        """EnableRule - a model defined in OpenAPI

        :param enable_type: The enable_type of this EnableRule.
        :param groups: The groups of this EnableRule.
        :param services: The services of this EnableRule.
        :param values: The values of this EnableRule.
        """
        self.openapi_types = {
            'enable_type': str,
            'groups': List[str],
            'services': List[str],
            'values': List[str]
        }

        self.attribute_map = {
            'enable_type': 'enableType',
            'groups': 'groups',
            'services': 'services',
            'values': 'values'
        }

        self._enable_type = enable_type
        self._groups = groups
        self._services = services
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnableRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnableRule of this EnableRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_type(self):
        """Gets the enable_type of this EnableRule.

        Client and resource project enable type.

        :return: The enable_type of this EnableRule.
        :rtype: str
        """
        return self._enable_type

    @enable_type.setter
    def enable_type(self, enable_type):
        """Sets the enable_type of this EnableRule.

        Client and resource project enable type.

        :param enable_type: The enable_type of this EnableRule.
        :type enable_type: str
        """
        allowed_values = ["ENABLE_TYPE_UNSPECIFIED", "CLIENT", "RESOURCE", "V1_COMPATIBLE"]  # noqa: E501
        if enable_type not in allowed_values:
            raise ValueError(
                "Invalid value for `enable_type` ({0}), must be one of {1}"
                .format(enable_type, allowed_values)
            )

        self._enable_type = enable_type

    @property
    def groups(self):
        """Gets the groups of this EnableRule.

        DEPRECATED: Please use field `values`. Service group should have prefix `groups/`. The names of the service groups that are enabled (Not Implemented). Example: `groups/googleServices`.

        :return: The groups of this EnableRule.
        :rtype: List[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this EnableRule.

        DEPRECATED: Please use field `values`. Service group should have prefix `groups/`. The names of the service groups that are enabled (Not Implemented). Example: `groups/googleServices`.

        :param groups: The groups of this EnableRule.
        :type groups: List[str]
        """

        self._groups = groups

    @property
    def services(self):
        """Gets the services of this EnableRule.

        DEPRECATED: Please use field `values`. Service should have prefix `services/`. The names of the services that are enabled. Example: `storage.googleapis.com`.

        :return: The services of this EnableRule.
        :rtype: List[str]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this EnableRule.

        DEPRECATED: Please use field `values`. Service should have prefix `services/`. The names of the services that are enabled. Example: `storage.googleapis.com`.

        :param services: The services of this EnableRule.
        :type services: List[str]
        """

        self._services = services

    @property
    def values(self):
        """Gets the values of this EnableRule.

        The names of the services or service groups that are enabled. Example: `services/storage.googleapis.com`, `groups/googleServices`, `groups/allServices`.

        :return: The values of this EnableRule.
        :rtype: List[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this EnableRule.

        The names of the services or service groups that are enabled. Example: `services/storage.googleapis.com`, `groups/googleServices`, `groups/allServices`.

        :param values: The values of this EnableRule.
        :type values: List[str]
        """

        self._values = values
