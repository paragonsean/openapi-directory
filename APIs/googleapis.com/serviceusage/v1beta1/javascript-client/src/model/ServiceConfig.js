/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Api from './Api';
import Authentication from './Authentication';
import Documentation from './Documentation';
import Endpoint from './Endpoint';
import MonitoredResourceDescriptor from './MonitoredResourceDescriptor';
import Monitoring from './Monitoring';
import Quota from './Quota';
import Usage from './Usage';

/**
 * The ServiceConfig model module.
 * @module model/ServiceConfig
 * @version v1beta1
 */
class ServiceConfig {
    /**
     * Constructs a new <code>ServiceConfig</code>.
     * The configuration of the service.
     * @alias module:model/ServiceConfig
     */
    constructor() { 
        
        ServiceConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceConfig} obj Optional instance to populate.
     * @return {module:model/ServiceConfig} The populated <code>ServiceConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceConfig();

            if (data.hasOwnProperty('apis')) {
                obj['apis'] = ApiClient.convertToType(data['apis'], [Api]);
            }
            if (data.hasOwnProperty('authentication')) {
                obj['authentication'] = Authentication.constructFromObject(data['authentication']);
            }
            if (data.hasOwnProperty('documentation')) {
                obj['documentation'] = Documentation.constructFromObject(data['documentation']);
            }
            if (data.hasOwnProperty('endpoints')) {
                obj['endpoints'] = ApiClient.convertToType(data['endpoints'], [Endpoint]);
            }
            if (data.hasOwnProperty('monitoredResources')) {
                obj['monitoredResources'] = ApiClient.convertToType(data['monitoredResources'], [MonitoredResourceDescriptor]);
            }
            if (data.hasOwnProperty('monitoring')) {
                obj['monitoring'] = Monitoring.constructFromObject(data['monitoring']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('quota')) {
                obj['quota'] = Quota.constructFromObject(data['quota']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('usage')) {
                obj['usage'] = Usage.constructFromObject(data['usage']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceConfig</code>.
     */
    static validateJSON(data) {
        if (data['apis']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['apis'])) {
                throw new Error("Expected the field `apis` to be an array in the JSON data but got " + data['apis']);
            }
            // validate the optional field `apis` (array)
            for (const item of data['apis']) {
                Api.validateJSON(item);
            };
        }
        // validate the optional field `authentication`
        if (data['authentication']) { // data not null
          Authentication.validateJSON(data['authentication']);
        }
        // validate the optional field `documentation`
        if (data['documentation']) { // data not null
          Documentation.validateJSON(data['documentation']);
        }
        if (data['endpoints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['endpoints'])) {
                throw new Error("Expected the field `endpoints` to be an array in the JSON data but got " + data['endpoints']);
            }
            // validate the optional field `endpoints` (array)
            for (const item of data['endpoints']) {
                Endpoint.validateJSON(item);
            };
        }
        if (data['monitoredResources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['monitoredResources'])) {
                throw new Error("Expected the field `monitoredResources` to be an array in the JSON data but got " + data['monitoredResources']);
            }
            // validate the optional field `monitoredResources` (array)
            for (const item of data['monitoredResources']) {
                MonitoredResourceDescriptor.validateJSON(item);
            };
        }
        // validate the optional field `monitoring`
        if (data['monitoring']) { // data not null
          Monitoring.validateJSON(data['monitoring']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `quota`
        if (data['quota']) { // data not null
          Quota.validateJSON(data['quota']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // validate the optional field `usage`
        if (data['usage']) { // data not null
          Usage.validateJSON(data['usage']);
        }

        return true;
    }


}



/**
 * A list of API interfaces exported by this service. Contains only the names, versions, and method names of the interfaces.
 * @member {Array.<module:model/Api>} apis
 */
ServiceConfig.prototype['apis'] = undefined;

/**
 * @member {module:model/Authentication} authentication
 */
ServiceConfig.prototype['authentication'] = undefined;

/**
 * @member {module:model/Documentation} documentation
 */
ServiceConfig.prototype['documentation'] = undefined;

/**
 * Configuration for network endpoints. Contains only the names and aliases of the endpoints.
 * @member {Array.<module:model/Endpoint>} endpoints
 */
ServiceConfig.prototype['endpoints'] = undefined;

/**
 * Defines the monitored resources used by this service. This is required by the Service.monitoring and Service.logging configurations.
 * @member {Array.<module:model/MonitoredResourceDescriptor>} monitoredResources
 */
ServiceConfig.prototype['monitoredResources'] = undefined;

/**
 * @member {module:model/Monitoring} monitoring
 */
ServiceConfig.prototype['monitoring'] = undefined;

/**
 * The DNS address at which this service is available. An example DNS address would be: `calendar.googleapis.com`.
 * @member {String} name
 */
ServiceConfig.prototype['name'] = undefined;

/**
 * @member {module:model/Quota} quota
 */
ServiceConfig.prototype['quota'] = undefined;

/**
 * The product title for this service.
 * @member {String} title
 */
ServiceConfig.prototype['title'] = undefined;

/**
 * @member {module:model/Usage} usage
 */
ServiceConfig.prototype['usage'] = undefined;






export default ServiceConfig;

