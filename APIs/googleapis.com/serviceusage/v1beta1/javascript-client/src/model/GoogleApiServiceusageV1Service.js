/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleApiServiceusageV1ServiceConfig from './GoogleApiServiceusageV1ServiceConfig';

/**
 * The GoogleApiServiceusageV1Service model module.
 * @module model/GoogleApiServiceusageV1Service
 * @version v1beta1
 */
class GoogleApiServiceusageV1Service {
    /**
     * Constructs a new <code>GoogleApiServiceusageV1Service</code>.
     * A service that is available for use by the consumer.
     * @alias module:model/GoogleApiServiceusageV1Service
     */
    constructor() { 
        
        GoogleApiServiceusageV1Service.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleApiServiceusageV1Service</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleApiServiceusageV1Service} obj Optional instance to populate.
     * @return {module:model/GoogleApiServiceusageV1Service} The populated <code>GoogleApiServiceusageV1Service</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleApiServiceusageV1Service();

            if (data.hasOwnProperty('config')) {
                obj['config'] = GoogleApiServiceusageV1ServiceConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = ApiClient.convertToType(data['parent'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleApiServiceusageV1Service</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleApiServiceusageV1Service</code>.
     */
    static validateJSON(data) {
        // validate the optional field `config`
        if (data['config']) { // data not null
          GoogleApiServiceusageV1ServiceConfig.validateJSON(data['config']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['parent'] && !(typeof data['parent'] === 'string' || data['parent'] instanceof String)) {
            throw new Error("Expected the field `parent` to be a primitive type in the JSON string but got " + data['parent']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleApiServiceusageV1ServiceConfig} config
 */
GoogleApiServiceusageV1Service.prototype['config'] = undefined;

/**
 * The resource name of the consumer and service. A valid name would be: - projects/123/services/serviceusage.googleapis.com
 * @member {String} name
 */
GoogleApiServiceusageV1Service.prototype['name'] = undefined;

/**
 * The resource name of the consumer. A valid name would be: - projects/123
 * @member {String} parent
 */
GoogleApiServiceusageV1Service.prototype['parent'] = undefined;

/**
 * Whether or not the service has been enabled for use by the consumer.
 * @member {module:model/GoogleApiServiceusageV1Service.StateEnum} state
 */
GoogleApiServiceusageV1Service.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
GoogleApiServiceusageV1Service['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "ENABLED"
     * @const
     */
    "ENABLED": "ENABLED"
};



export default GoogleApiServiceusageV1Service;

