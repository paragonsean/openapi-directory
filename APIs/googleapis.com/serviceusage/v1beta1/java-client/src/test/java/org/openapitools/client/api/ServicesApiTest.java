/*
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchEnableServicesRequest;
import org.openapitools.client.model.ConsumerQuotaLimit;
import org.openapitools.client.model.ImportAdminOverridesRequest;
import org.openapitools.client.model.ImportConsumerOverridesRequest;
import org.openapitools.client.model.ListAdminOverridesResponse;
import org.openapitools.client.model.ListConsumerOverridesResponse;
import org.openapitools.client.model.ListConsumerQuotaMetricsResponse;
import org.openapitools.client.model.ListServicesResponse;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.QuotaOverride;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServicesApi
 */
@Disabled
public class ServicesApiTest {

    private final ServicesApi api = new ServicesApi();

    /**
     * Enables multiple services on a project. The operation is atomic: if enabling any service fails, then the entire batch fails, and no state changes occur. Operation response type: &#x60;google.protobuf.Empty&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceusageServicesBatchEnableTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchEnableServicesRequest batchEnableServicesRequest = null;
        Operation response = api.serviceusageServicesBatchEnable(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchEnableServicesRequest);
        // TODO: test validations
    }

    /**
     * Creates or updates multiple admin overrides atomically, all on the same consumer, but on many different metrics or limits. The name field in the quota override message should not be set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceusageServicesConsumerQuotaMetricsImportAdminOverridesTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ImportAdminOverridesRequest importAdminOverridesRequest = null;
        Operation response = api.serviceusageServicesConsumerQuotaMetricsImportAdminOverrides(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, importAdminOverridesRequest);
        // TODO: test validations
    }

    /**
     * Creates or updates multiple consumer overrides atomically, all on the same consumer, but on many different metrics or limits. The name field in the quota override message should not be set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceusageServicesConsumerQuotaMetricsImportConsumerOverridesTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ImportConsumerOverridesRequest importConsumerOverridesRequest = null;
        Operation response = api.serviceusageServicesConsumerQuotaMetricsImportConsumerOverrides(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, importConsumerOverridesRequest);
        // TODO: test validations
    }

    /**
     * Creates an admin override. An admin override is applied by an administrator of a parent folder or parent organization of the consumer receiving the override. An admin override is intended to limit the amount of quota the consumer can use out of the total quota pool allocated to all children of the folder or organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceusageServicesConsumerQuotaMetricsLimitsAdminOverridesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        List<String> forceOnly = null;
        QuotaOverride quotaOverride = null;
        Operation response = api.serviceusageServicesConsumerQuotaMetricsLimitsAdminOverridesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force, forceOnly, quotaOverride);
        // TODO: test validations
    }

    /**
     * Lists all admin overrides on this limit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceusageServicesConsumerQuotaMetricsLimitsAdminOverridesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAdminOverridesResponse response = api.serviceusageServicesConsumerQuotaMetricsLimitsAdminOverridesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a consumer override. A consumer override is applied to the consumer on its own authority to limit its own quota usage. Consumer overrides cannot be used to grant more quota than would be allowed by admin overrides, producer overrides, or the default limit of the service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        List<String> forceOnly = null;
        QuotaOverride quotaOverride = null;
        Operation response = api.serviceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force, forceOnly, quotaOverride);
        // TODO: test validations
    }

    /**
     * Deletes a consumer override.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        List<String> forceOnly = null;
        Operation response = api.serviceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force, forceOnly);
        // TODO: test validations
    }

    /**
     * Lists all consumer overrides on this limit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListConsumerOverridesResponse response = api.serviceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a consumer override.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        List<String> forceOnly = null;
        String updateMask = null;
        QuotaOverride quotaOverride = null;
        Operation response = api.serviceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force, forceOnly, updateMask, quotaOverride);
        // TODO: test validations
    }

    /**
     * Retrieves a summary of quota information for a specific quota limit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceusageServicesConsumerQuotaMetricsLimitsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String view = null;
        ConsumerQuotaLimit response = api.serviceusageServicesConsumerQuotaMetricsLimitsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, view);
        // TODO: test validations
    }

    /**
     * Retrieves a summary of all quota information visible to the service consumer, organized by service metric. Each metric includes information about all of its defined limits. Each limit includes the limit configuration (quota unit, preciseness, default value), the current effective limit value, and all of the overrides applied to the limit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceusageServicesConsumerQuotaMetricsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        ListConsumerQuotaMetricsResponse response = api.serviceusageServicesConsumerQuotaMetricsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, view);
        // TODO: test validations
    }

    /**
     * Disables a service so that it can no longer be used with a project. This prevents unintended usage that may cause unexpected billing charges or security leaks. It is not valid to call the disable method on a service that is not currently enabled. Callers will receive a &#x60;FAILED_PRECONDITION&#x60; status if the target service is not currently enabled. Operation response type: &#x60;google.protobuf.Empty&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceusageServicesDisableTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Operation response = api.serviceusageServicesDisable(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Enables a service so that it can be used with a project. Operation response type: &#x60;google.protobuf.Empty&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceusageServicesEnableTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Operation response = api.serviceusageServicesEnable(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Generates service identity for service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceusageServicesGenerateServiceIdentityTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Operation response = api.serviceusageServicesGenerateServiceIdentity(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all services available to the specified project, and the current state of those services with respect to the project. The list includes all public services, all services for which the calling user has the &#x60;servicemanagement.services.bind&#x60; permission, and all services that have already been enabled on the project. The list can be filtered to only include services in a specific state, for example to only include services enabled on the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceusageServicesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListServicesResponse response = api.serviceusageServicesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

}
