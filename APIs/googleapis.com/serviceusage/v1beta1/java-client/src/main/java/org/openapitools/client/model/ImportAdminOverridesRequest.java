/*
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OverrideInlineSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for ImportAdminOverrides
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:44.557258-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportAdminOverridesRequest {
  public static final String SERIALIZED_NAME_FORCE = "force";
  @SerializedName(SERIALIZED_NAME_FORCE)
  private Boolean force;

  /**
   * Gets or Sets forceOnly
   */
  @JsonAdapter(ForceOnlyEnum.Adapter.class)
  public enum ForceOnlyEnum {
    QUOTA_SAFETY_CHECK_UNSPECIFIED("QUOTA_SAFETY_CHECK_UNSPECIFIED"),
    
    LIMIT_DECREASE_BELOW_USAGE("LIMIT_DECREASE_BELOW_USAGE"),
    
    LIMIT_DECREASE_PERCENTAGE_TOO_HIGH("LIMIT_DECREASE_PERCENTAGE_TOO_HIGH");

    private String value;

    ForceOnlyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ForceOnlyEnum fromValue(String value) {
      for (ForceOnlyEnum b : ForceOnlyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ForceOnlyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ForceOnlyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ForceOnlyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ForceOnlyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ForceOnlyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORCE_ONLY = "forceOnly";
  @SerializedName(SERIALIZED_NAME_FORCE_ONLY)
  private List<ForceOnlyEnum> forceOnly = new ArrayList<>();

  public static final String SERIALIZED_NAME_INLINE_SOURCE = "inlineSource";
  @SerializedName(SERIALIZED_NAME_INLINE_SOURCE)
  private OverrideInlineSource inlineSource;

  public ImportAdminOverridesRequest() {
  }

  public ImportAdminOverridesRequest force(Boolean force) {
    this.force = force;
    return this;
  }

  /**
   * Whether to force the creation of the quota overrides. Setting the force parameter to &#39;true&#39; ignores all quota safety checks that would fail the request. QuotaSafetyCheck lists all such validations.
   * @return force
   */
  @javax.annotation.Nullable
  public Boolean getForce() {
    return force;
  }

  public void setForce(Boolean force) {
    this.force = force;
  }


  public ImportAdminOverridesRequest forceOnly(List<ForceOnlyEnum> forceOnly) {
    this.forceOnly = forceOnly;
    return this;
  }

  public ImportAdminOverridesRequest addForceOnlyItem(ForceOnlyEnum forceOnlyItem) {
    if (this.forceOnly == null) {
      this.forceOnly = new ArrayList<>();
    }
    this.forceOnly.add(forceOnlyItem);
    return this;
  }

  /**
   * The list of quota safety checks to ignore before the override mutation. Unlike &#39;force&#39; field that ignores all the quota safety checks, the &#39;force_only&#39; field ignores only the specified checks; other checks are still enforced. The &#39;force&#39; and &#39;force_only&#39; fields cannot both be set.
   * @return forceOnly
   */
  @javax.annotation.Nullable
  public List<ForceOnlyEnum> getForceOnly() {
    return forceOnly;
  }

  public void setForceOnly(List<ForceOnlyEnum> forceOnly) {
    this.forceOnly = forceOnly;
  }


  public ImportAdminOverridesRequest inlineSource(OverrideInlineSource inlineSource) {
    this.inlineSource = inlineSource;
    return this;
  }

  /**
   * Get inlineSource
   * @return inlineSource
   */
  @javax.annotation.Nullable
  public OverrideInlineSource getInlineSource() {
    return inlineSource;
  }

  public void setInlineSource(OverrideInlineSource inlineSource) {
    this.inlineSource = inlineSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportAdminOverridesRequest importAdminOverridesRequest = (ImportAdminOverridesRequest) o;
    return Objects.equals(this.force, importAdminOverridesRequest.force) &&
        Objects.equals(this.forceOnly, importAdminOverridesRequest.forceOnly) &&
        Objects.equals(this.inlineSource, importAdminOverridesRequest.inlineSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(force, forceOnly, inlineSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportAdminOverridesRequest {\n");
    sb.append("    force: ").append(toIndentedString(force)).append("\n");
    sb.append("    forceOnly: ").append(toIndentedString(forceOnly)).append("\n");
    sb.append("    inlineSource: ").append(toIndentedString(inlineSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("force");
    openapiFields.add("forceOnly");
    openapiFields.add("inlineSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportAdminOverridesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportAdminOverridesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportAdminOverridesRequest is not found in the empty JSON string", ImportAdminOverridesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportAdminOverridesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportAdminOverridesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("forceOnly") != null && !jsonObj.get("forceOnly").isJsonNull() && !jsonObj.get("forceOnly").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `forceOnly` to be an array in the JSON string but got `%s`", jsonObj.get("forceOnly").toString()));
      }
      // validate the optional field `inlineSource`
      if (jsonObj.get("inlineSource") != null && !jsonObj.get("inlineSource").isJsonNull()) {
        OverrideInlineSource.validateJsonElement(jsonObj.get("inlineSource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportAdminOverridesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportAdminOverridesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportAdminOverridesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportAdminOverridesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportAdminOverridesRequest>() {
           @Override
           public void write(JsonWriter out, ImportAdminOverridesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportAdminOverridesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportAdminOverridesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportAdminOverridesRequest
   * @throws IOException if the JSON string is invalid with respect to ImportAdminOverridesRequest
   */
  public static ImportAdminOverridesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportAdminOverridesRequest.class);
  }

  /**
   * Convert an instance of ImportAdminOverridesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

