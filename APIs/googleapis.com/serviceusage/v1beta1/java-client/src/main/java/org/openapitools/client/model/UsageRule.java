/*
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Usage configuration rules for the service. NOTE: Under development. Use this rule to configure unregistered calls for the service. Unregistered calls are calls that do not contain consumer project identity. (Example: calls that do not contain an API key). By default, API methods do not allow unregistered calls, and each method call must be identified by a consumer project identity. Use this rule to allow/disallow unregistered calls. Example of an API that wants to allow unregistered calls for entire service. usage: rules: - selector: \&quot;*\&quot; allow_unregistered_calls: true Example of a method that wants to allow unregistered calls. usage: rules: - selector: \&quot;google.example.library.v1.LibraryService.CreateBook\&quot; allow_unregistered_calls: true
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:44.557258-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UsageRule {
  public static final String SERIALIZED_NAME_ALLOW_UNREGISTERED_CALLS = "allowUnregisteredCalls";
  @SerializedName(SERIALIZED_NAME_ALLOW_UNREGISTERED_CALLS)
  private Boolean allowUnregisteredCalls;

  public static final String SERIALIZED_NAME_SELECTOR = "selector";
  @SerializedName(SERIALIZED_NAME_SELECTOR)
  private String selector;

  public static final String SERIALIZED_NAME_SKIP_SERVICE_CONTROL = "skipServiceControl";
  @SerializedName(SERIALIZED_NAME_SKIP_SERVICE_CONTROL)
  private Boolean skipServiceControl;

  public UsageRule() {
  }

  public UsageRule allowUnregisteredCalls(Boolean allowUnregisteredCalls) {
    this.allowUnregisteredCalls = allowUnregisteredCalls;
    return this;
  }

  /**
   * If true, the selected method allows unregistered calls, e.g. calls that don&#39;t identify any user or application.
   * @return allowUnregisteredCalls
   */
  @javax.annotation.Nullable
  public Boolean getAllowUnregisteredCalls() {
    return allowUnregisteredCalls;
  }

  public void setAllowUnregisteredCalls(Boolean allowUnregisteredCalls) {
    this.allowUnregisteredCalls = allowUnregisteredCalls;
  }


  public UsageRule selector(String selector) {
    this.selector = selector;
    return this;
  }

  /**
   * Selects the methods to which this rule applies. Use &#39;*&#39; to indicate all methods in all APIs. Refer to selector for syntax details.
   * @return selector
   */
  @javax.annotation.Nullable
  public String getSelector() {
    return selector;
  }

  public void setSelector(String selector) {
    this.selector = selector;
  }


  public UsageRule skipServiceControl(Boolean skipServiceControl) {
    this.skipServiceControl = skipServiceControl;
    return this;
  }

  /**
   * If true, the selected method should skip service control and the control plane features, such as quota and billing, will not be available. This flag is used by Google Cloud Endpoints to bypass checks for internal methods, such as service health check methods.
   * @return skipServiceControl
   */
  @javax.annotation.Nullable
  public Boolean getSkipServiceControl() {
    return skipServiceControl;
  }

  public void setSkipServiceControl(Boolean skipServiceControl) {
    this.skipServiceControl = skipServiceControl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageRule usageRule = (UsageRule) o;
    return Objects.equals(this.allowUnregisteredCalls, usageRule.allowUnregisteredCalls) &&
        Objects.equals(this.selector, usageRule.selector) &&
        Objects.equals(this.skipServiceControl, usageRule.skipServiceControl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowUnregisteredCalls, selector, skipServiceControl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageRule {\n");
    sb.append("    allowUnregisteredCalls: ").append(toIndentedString(allowUnregisteredCalls)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("    skipServiceControl: ").append(toIndentedString(skipServiceControl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowUnregisteredCalls");
    openapiFields.add("selector");
    openapiFields.add("skipServiceControl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsageRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsageRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsageRule is not found in the empty JSON string", UsageRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsageRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsageRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("selector") != null && !jsonObj.get("selector").isJsonNull()) && !jsonObj.get("selector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selector").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsageRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsageRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsageRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsageRule.class));

       return (TypeAdapter<T>) new TypeAdapter<UsageRule>() {
           @Override
           public void write(JsonWriter out, UsageRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsageRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsageRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsageRule
   * @throws IOException if the JSON string is invalid with respect to UsageRule
   */
  public static UsageRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsageRule.class);
  }

  /**
   * Convert an instance of UsageRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

