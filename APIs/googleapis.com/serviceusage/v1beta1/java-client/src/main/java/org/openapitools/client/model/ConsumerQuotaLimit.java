/*
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.QuotaBucket;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Consumer quota settings for a quota limit.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:44.557258-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConsumerQuotaLimit {
  public static final String SERIALIZED_NAME_ALLOWS_ADMIN_OVERRIDES = "allowsAdminOverrides";
  @SerializedName(SERIALIZED_NAME_ALLOWS_ADMIN_OVERRIDES)
  private Boolean allowsAdminOverrides;

  public static final String SERIALIZED_NAME_IS_PRECISE = "isPrecise";
  @SerializedName(SERIALIZED_NAME_IS_PRECISE)
  private Boolean isPrecise;

  public static final String SERIALIZED_NAME_METRIC = "metric";
  @SerializedName(SERIALIZED_NAME_METRIC)
  private String metric;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_QUOTA_BUCKETS = "quotaBuckets";
  @SerializedName(SERIALIZED_NAME_QUOTA_BUCKETS)
  private List<QuotaBucket> quotaBuckets = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTED_LOCATIONS = "supportedLocations";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_LOCATIONS)
  private List<String> supportedLocations = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public ConsumerQuotaLimit() {
  }

  public ConsumerQuotaLimit allowsAdminOverrides(Boolean allowsAdminOverrides) {
    this.allowsAdminOverrides = allowsAdminOverrides;
    return this;
  }

  /**
   * Whether admin overrides are allowed on this limit
   * @return allowsAdminOverrides
   */
  @javax.annotation.Nullable
  public Boolean getAllowsAdminOverrides() {
    return allowsAdminOverrides;
  }

  public void setAllowsAdminOverrides(Boolean allowsAdminOverrides) {
    this.allowsAdminOverrides = allowsAdminOverrides;
  }


  public ConsumerQuotaLimit isPrecise(Boolean isPrecise) {
    this.isPrecise = isPrecise;
    return this;
  }

  /**
   * Whether this limit is precise or imprecise.
   * @return isPrecise
   */
  @javax.annotation.Nullable
  public Boolean getIsPrecise() {
    return isPrecise;
  }

  public void setIsPrecise(Boolean isPrecise) {
    this.isPrecise = isPrecise;
  }


  public ConsumerQuotaLimit metric(String metric) {
    this.metric = metric;
    return this;
  }

  /**
   * The name of the parent metric of this limit. An example name would be: &#x60;compute.googleapis.com/cpus&#x60;
   * @return metric
   */
  @javax.annotation.Nullable
  public String getMetric() {
    return metric;
  }

  public void setMetric(String metric) {
    this.metric = metric;
  }


  public ConsumerQuotaLimit name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the quota limit. An example name would be: &#x60;projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion&#x60; The resource name is intended to be opaque and should not be parsed for its component strings, since its representation could change in the future.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ConsumerQuotaLimit quotaBuckets(List<QuotaBucket> quotaBuckets) {
    this.quotaBuckets = quotaBuckets;
    return this;
  }

  public ConsumerQuotaLimit addQuotaBucketsItem(QuotaBucket quotaBucketsItem) {
    if (this.quotaBuckets == null) {
      this.quotaBuckets = new ArrayList<>();
    }
    this.quotaBuckets.add(quotaBucketsItem);
    return this;
  }

  /**
   * Summary of the enforced quota buckets, organized by quota dimension, ordered from least specific to most specific (for example, the global default bucket, with no quota dimensions, will always appear first).
   * @return quotaBuckets
   */
  @javax.annotation.Nullable
  public List<QuotaBucket> getQuotaBuckets() {
    return quotaBuckets;
  }

  public void setQuotaBuckets(List<QuotaBucket> quotaBuckets) {
    this.quotaBuckets = quotaBuckets;
  }


  public ConsumerQuotaLimit supportedLocations(List<String> supportedLocations) {
    this.supportedLocations = supportedLocations;
    return this;
  }

  public ConsumerQuotaLimit addSupportedLocationsItem(String supportedLocationsItem) {
    if (this.supportedLocations == null) {
      this.supportedLocations = new ArrayList<>();
    }
    this.supportedLocations.add(supportedLocationsItem);
    return this;
  }

  /**
   * List of all supported locations. This field is present only if the limit has a {region} or {zone} dimension.
   * @return supportedLocations
   */
  @javax.annotation.Nullable
  public List<String> getSupportedLocations() {
    return supportedLocations;
  }

  public void setSupportedLocations(List<String> supportedLocations) {
    this.supportedLocations = supportedLocations;
  }


  public ConsumerQuotaLimit unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * The limit unit. An example unit would be &#x60;1/{project}/{region}&#x60; Note that &#x60;{project}&#x60; and &#x60;{region}&#x60; are not placeholders in this example; the literal characters &#x60;{&#x60; and &#x60;}&#x60; occur in the string.
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsumerQuotaLimit consumerQuotaLimit = (ConsumerQuotaLimit) o;
    return Objects.equals(this.allowsAdminOverrides, consumerQuotaLimit.allowsAdminOverrides) &&
        Objects.equals(this.isPrecise, consumerQuotaLimit.isPrecise) &&
        Objects.equals(this.metric, consumerQuotaLimit.metric) &&
        Objects.equals(this.name, consumerQuotaLimit.name) &&
        Objects.equals(this.quotaBuckets, consumerQuotaLimit.quotaBuckets) &&
        Objects.equals(this.supportedLocations, consumerQuotaLimit.supportedLocations) &&
        Objects.equals(this.unit, consumerQuotaLimit.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowsAdminOverrides, isPrecise, metric, name, quotaBuckets, supportedLocations, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsumerQuotaLimit {\n");
    sb.append("    allowsAdminOverrides: ").append(toIndentedString(allowsAdminOverrides)).append("\n");
    sb.append("    isPrecise: ").append(toIndentedString(isPrecise)).append("\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    quotaBuckets: ").append(toIndentedString(quotaBuckets)).append("\n");
    sb.append("    supportedLocations: ").append(toIndentedString(supportedLocations)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowsAdminOverrides");
    openapiFields.add("isPrecise");
    openapiFields.add("metric");
    openapiFields.add("name");
    openapiFields.add("quotaBuckets");
    openapiFields.add("supportedLocations");
    openapiFields.add("unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConsumerQuotaLimit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConsumerQuotaLimit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConsumerQuotaLimit is not found in the empty JSON string", ConsumerQuotaLimit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConsumerQuotaLimit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConsumerQuotaLimit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("metric") != null && !jsonObj.get("metric").isJsonNull()) && !jsonObj.get("metric").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metric` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metric").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("quotaBuckets") != null && !jsonObj.get("quotaBuckets").isJsonNull()) {
        JsonArray jsonArrayquotaBuckets = jsonObj.getAsJsonArray("quotaBuckets");
        if (jsonArrayquotaBuckets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("quotaBuckets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `quotaBuckets` to be an array in the JSON string but got `%s`", jsonObj.get("quotaBuckets").toString()));
          }

          // validate the optional field `quotaBuckets` (array)
          for (int i = 0; i < jsonArrayquotaBuckets.size(); i++) {
            QuotaBucket.validateJsonElement(jsonArrayquotaBuckets.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedLocations") != null && !jsonObj.get("supportedLocations").isJsonNull() && !jsonObj.get("supportedLocations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedLocations` to be an array in the JSON string but got `%s`", jsonObj.get("supportedLocations").toString()));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConsumerQuotaLimit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConsumerQuotaLimit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConsumerQuotaLimit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConsumerQuotaLimit.class));

       return (TypeAdapter<T>) new TypeAdapter<ConsumerQuotaLimit>() {
           @Override
           public void write(JsonWriter out, ConsumerQuotaLimit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConsumerQuotaLimit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConsumerQuotaLimit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConsumerQuotaLimit
   * @throws IOException if the JSON string is invalid with respect to ConsumerQuotaLimit
   */
  public static ConsumerQuotaLimit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConsumerQuotaLimit.class);
  }

  /**
   * Convert an instance of ConsumerQuotaLimit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

