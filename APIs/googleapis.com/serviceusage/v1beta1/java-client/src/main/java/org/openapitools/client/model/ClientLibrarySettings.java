/*
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CppSettings;
import org.openapitools.client.model.DotnetSettings;
import org.openapitools.client.model.GoSettings;
import org.openapitools.client.model.JavaSettings;
import org.openapitools.client.model.NodeSettings;
import org.openapitools.client.model.PhpSettings;
import org.openapitools.client.model.PythonSettings;
import org.openapitools.client.model.RubySettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about how and where to publish client libraries.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:44.557258-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClientLibrarySettings {
  public static final String SERIALIZED_NAME_CPP_SETTINGS = "cppSettings";
  @SerializedName(SERIALIZED_NAME_CPP_SETTINGS)
  private CppSettings cppSettings;

  public static final String SERIALIZED_NAME_DOTNET_SETTINGS = "dotnetSettings";
  @SerializedName(SERIALIZED_NAME_DOTNET_SETTINGS)
  private DotnetSettings dotnetSettings;

  public static final String SERIALIZED_NAME_GO_SETTINGS = "goSettings";
  @SerializedName(SERIALIZED_NAME_GO_SETTINGS)
  private GoSettings goSettings;

  public static final String SERIALIZED_NAME_JAVA_SETTINGS = "javaSettings";
  @SerializedName(SERIALIZED_NAME_JAVA_SETTINGS)
  private JavaSettings javaSettings;

  /**
   * Launch stage of this version of the API.
   */
  @JsonAdapter(LaunchStageEnum.Adapter.class)
  public enum LaunchStageEnum {
    LAUNCH_STAGE_UNSPECIFIED("LAUNCH_STAGE_UNSPECIFIED"),
    
    UNIMPLEMENTED("UNIMPLEMENTED"),
    
    PRELAUNCH("PRELAUNCH"),
    
    EARLY_ACCESS("EARLY_ACCESS"),
    
    ALPHA("ALPHA"),
    
    BETA("BETA"),
    
    GA("GA"),
    
    DEPRECATED("DEPRECATED");

    private String value;

    LaunchStageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LaunchStageEnum fromValue(String value) {
      for (LaunchStageEnum b : LaunchStageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LaunchStageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LaunchStageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LaunchStageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LaunchStageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LaunchStageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LAUNCH_STAGE = "launchStage";
  @SerializedName(SERIALIZED_NAME_LAUNCH_STAGE)
  private LaunchStageEnum launchStage;

  public static final String SERIALIZED_NAME_NODE_SETTINGS = "nodeSettings";
  @SerializedName(SERIALIZED_NAME_NODE_SETTINGS)
  private NodeSettings nodeSettings;

  public static final String SERIALIZED_NAME_PHP_SETTINGS = "phpSettings";
  @SerializedName(SERIALIZED_NAME_PHP_SETTINGS)
  private PhpSettings phpSettings;

  public static final String SERIALIZED_NAME_PYTHON_SETTINGS = "pythonSettings";
  @SerializedName(SERIALIZED_NAME_PYTHON_SETTINGS)
  private PythonSettings pythonSettings;

  public static final String SERIALIZED_NAME_REST_NUMERIC_ENUMS = "restNumericEnums";
  @SerializedName(SERIALIZED_NAME_REST_NUMERIC_ENUMS)
  private Boolean restNumericEnums;

  public static final String SERIALIZED_NAME_RUBY_SETTINGS = "rubySettings";
  @SerializedName(SERIALIZED_NAME_RUBY_SETTINGS)
  private RubySettings rubySettings;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public ClientLibrarySettings() {
  }

  public ClientLibrarySettings cppSettings(CppSettings cppSettings) {
    this.cppSettings = cppSettings;
    return this;
  }

  /**
   * Get cppSettings
   * @return cppSettings
   */
  @javax.annotation.Nullable
  public CppSettings getCppSettings() {
    return cppSettings;
  }

  public void setCppSettings(CppSettings cppSettings) {
    this.cppSettings = cppSettings;
  }


  public ClientLibrarySettings dotnetSettings(DotnetSettings dotnetSettings) {
    this.dotnetSettings = dotnetSettings;
    return this;
  }

  /**
   * Get dotnetSettings
   * @return dotnetSettings
   */
  @javax.annotation.Nullable
  public DotnetSettings getDotnetSettings() {
    return dotnetSettings;
  }

  public void setDotnetSettings(DotnetSettings dotnetSettings) {
    this.dotnetSettings = dotnetSettings;
  }


  public ClientLibrarySettings goSettings(GoSettings goSettings) {
    this.goSettings = goSettings;
    return this;
  }

  /**
   * Get goSettings
   * @return goSettings
   */
  @javax.annotation.Nullable
  public GoSettings getGoSettings() {
    return goSettings;
  }

  public void setGoSettings(GoSettings goSettings) {
    this.goSettings = goSettings;
  }


  public ClientLibrarySettings javaSettings(JavaSettings javaSettings) {
    this.javaSettings = javaSettings;
    return this;
  }

  /**
   * Get javaSettings
   * @return javaSettings
   */
  @javax.annotation.Nullable
  public JavaSettings getJavaSettings() {
    return javaSettings;
  }

  public void setJavaSettings(JavaSettings javaSettings) {
    this.javaSettings = javaSettings;
  }


  public ClientLibrarySettings launchStage(LaunchStageEnum launchStage) {
    this.launchStage = launchStage;
    return this;
  }

  /**
   * Launch stage of this version of the API.
   * @return launchStage
   */
  @javax.annotation.Nullable
  public LaunchStageEnum getLaunchStage() {
    return launchStage;
  }

  public void setLaunchStage(LaunchStageEnum launchStage) {
    this.launchStage = launchStage;
  }


  public ClientLibrarySettings nodeSettings(NodeSettings nodeSettings) {
    this.nodeSettings = nodeSettings;
    return this;
  }

  /**
   * Get nodeSettings
   * @return nodeSettings
   */
  @javax.annotation.Nullable
  public NodeSettings getNodeSettings() {
    return nodeSettings;
  }

  public void setNodeSettings(NodeSettings nodeSettings) {
    this.nodeSettings = nodeSettings;
  }


  public ClientLibrarySettings phpSettings(PhpSettings phpSettings) {
    this.phpSettings = phpSettings;
    return this;
  }

  /**
   * Get phpSettings
   * @return phpSettings
   */
  @javax.annotation.Nullable
  public PhpSettings getPhpSettings() {
    return phpSettings;
  }

  public void setPhpSettings(PhpSettings phpSettings) {
    this.phpSettings = phpSettings;
  }


  public ClientLibrarySettings pythonSettings(PythonSettings pythonSettings) {
    this.pythonSettings = pythonSettings;
    return this;
  }

  /**
   * Get pythonSettings
   * @return pythonSettings
   */
  @javax.annotation.Nullable
  public PythonSettings getPythonSettings() {
    return pythonSettings;
  }

  public void setPythonSettings(PythonSettings pythonSettings) {
    this.pythonSettings = pythonSettings;
  }


  public ClientLibrarySettings restNumericEnums(Boolean restNumericEnums) {
    this.restNumericEnums = restNumericEnums;
    return this;
  }

  /**
   * When using transport&#x3D;rest, the client request will encode enums as numbers rather than strings.
   * @return restNumericEnums
   */
  @javax.annotation.Nullable
  public Boolean getRestNumericEnums() {
    return restNumericEnums;
  }

  public void setRestNumericEnums(Boolean restNumericEnums) {
    this.restNumericEnums = restNumericEnums;
  }


  public ClientLibrarySettings rubySettings(RubySettings rubySettings) {
    this.rubySettings = rubySettings;
    return this;
  }

  /**
   * Get rubySettings
   * @return rubySettings
   */
  @javax.annotation.Nullable
  public RubySettings getRubySettings() {
    return rubySettings;
  }

  public void setRubySettings(RubySettings rubySettings) {
    this.rubySettings = rubySettings;
  }


  public ClientLibrarySettings version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Version of the API to apply these settings to. This is the full protobuf package for the API, ending in the version element. Examples: \&quot;google.cloud.speech.v1\&quot; and \&quot;google.spanner.admin.database.v1\&quot;.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientLibrarySettings clientLibrarySettings = (ClientLibrarySettings) o;
    return Objects.equals(this.cppSettings, clientLibrarySettings.cppSettings) &&
        Objects.equals(this.dotnetSettings, clientLibrarySettings.dotnetSettings) &&
        Objects.equals(this.goSettings, clientLibrarySettings.goSettings) &&
        Objects.equals(this.javaSettings, clientLibrarySettings.javaSettings) &&
        Objects.equals(this.launchStage, clientLibrarySettings.launchStage) &&
        Objects.equals(this.nodeSettings, clientLibrarySettings.nodeSettings) &&
        Objects.equals(this.phpSettings, clientLibrarySettings.phpSettings) &&
        Objects.equals(this.pythonSettings, clientLibrarySettings.pythonSettings) &&
        Objects.equals(this.restNumericEnums, clientLibrarySettings.restNumericEnums) &&
        Objects.equals(this.rubySettings, clientLibrarySettings.rubySettings) &&
        Objects.equals(this.version, clientLibrarySettings.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cppSettings, dotnetSettings, goSettings, javaSettings, launchStage, nodeSettings, phpSettings, pythonSettings, restNumericEnums, rubySettings, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientLibrarySettings {\n");
    sb.append("    cppSettings: ").append(toIndentedString(cppSettings)).append("\n");
    sb.append("    dotnetSettings: ").append(toIndentedString(dotnetSettings)).append("\n");
    sb.append("    goSettings: ").append(toIndentedString(goSettings)).append("\n");
    sb.append("    javaSettings: ").append(toIndentedString(javaSettings)).append("\n");
    sb.append("    launchStage: ").append(toIndentedString(launchStage)).append("\n");
    sb.append("    nodeSettings: ").append(toIndentedString(nodeSettings)).append("\n");
    sb.append("    phpSettings: ").append(toIndentedString(phpSettings)).append("\n");
    sb.append("    pythonSettings: ").append(toIndentedString(pythonSettings)).append("\n");
    sb.append("    restNumericEnums: ").append(toIndentedString(restNumericEnums)).append("\n");
    sb.append("    rubySettings: ").append(toIndentedString(rubySettings)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cppSettings");
    openapiFields.add("dotnetSettings");
    openapiFields.add("goSettings");
    openapiFields.add("javaSettings");
    openapiFields.add("launchStage");
    openapiFields.add("nodeSettings");
    openapiFields.add("phpSettings");
    openapiFields.add("pythonSettings");
    openapiFields.add("restNumericEnums");
    openapiFields.add("rubySettings");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClientLibrarySettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClientLibrarySettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClientLibrarySettings is not found in the empty JSON string", ClientLibrarySettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClientLibrarySettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClientLibrarySettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cppSettings`
      if (jsonObj.get("cppSettings") != null && !jsonObj.get("cppSettings").isJsonNull()) {
        CppSettings.validateJsonElement(jsonObj.get("cppSettings"));
      }
      // validate the optional field `dotnetSettings`
      if (jsonObj.get("dotnetSettings") != null && !jsonObj.get("dotnetSettings").isJsonNull()) {
        DotnetSettings.validateJsonElement(jsonObj.get("dotnetSettings"));
      }
      // validate the optional field `goSettings`
      if (jsonObj.get("goSettings") != null && !jsonObj.get("goSettings").isJsonNull()) {
        GoSettings.validateJsonElement(jsonObj.get("goSettings"));
      }
      // validate the optional field `javaSettings`
      if (jsonObj.get("javaSettings") != null && !jsonObj.get("javaSettings").isJsonNull()) {
        JavaSettings.validateJsonElement(jsonObj.get("javaSettings"));
      }
      if ((jsonObj.get("launchStage") != null && !jsonObj.get("launchStage").isJsonNull()) && !jsonObj.get("launchStage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `launchStage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("launchStage").toString()));
      }
      // validate the optional field `launchStage`
      if (jsonObj.get("launchStage") != null && !jsonObj.get("launchStage").isJsonNull()) {
        LaunchStageEnum.validateJsonElement(jsonObj.get("launchStage"));
      }
      // validate the optional field `nodeSettings`
      if (jsonObj.get("nodeSettings") != null && !jsonObj.get("nodeSettings").isJsonNull()) {
        NodeSettings.validateJsonElement(jsonObj.get("nodeSettings"));
      }
      // validate the optional field `phpSettings`
      if (jsonObj.get("phpSettings") != null && !jsonObj.get("phpSettings").isJsonNull()) {
        PhpSettings.validateJsonElement(jsonObj.get("phpSettings"));
      }
      // validate the optional field `pythonSettings`
      if (jsonObj.get("pythonSettings") != null && !jsonObj.get("pythonSettings").isJsonNull()) {
        PythonSettings.validateJsonElement(jsonObj.get("pythonSettings"));
      }
      // validate the optional field `rubySettings`
      if (jsonObj.get("rubySettings") != null && !jsonObj.get("rubySettings").isJsonNull()) {
        RubySettings.validateJsonElement(jsonObj.get("rubySettings"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientLibrarySettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientLibrarySettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientLibrarySettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientLibrarySettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientLibrarySettings>() {
           @Override
           public void write(JsonWriter out, ClientLibrarySettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientLibrarySettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClientLibrarySettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClientLibrarySettings
   * @throws IOException if the JSON string is invalid with respect to ClientLibrarySettings
   */
  public static ClientLibrarySettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientLibrarySettings.class);
  }

  /**
   * Convert an instance of ClientLibrarySettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

