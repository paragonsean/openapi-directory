/*
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The consumer policy rule that defines usable services and service groups.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:44.557258-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnableRule {
  /**
   * Client and resource project enable type.
   */
  @JsonAdapter(EnableTypeEnum.Adapter.class)
  public enum EnableTypeEnum {
    ENABLE_TYPE_UNSPECIFIED("ENABLE_TYPE_UNSPECIFIED"),
    
    CLIENT("CLIENT"),
    
    RESOURCE("RESOURCE"),
    
    V1_COMPATIBLE("V1_COMPATIBLE");

    private String value;

    EnableTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnableTypeEnum fromValue(String value) {
      for (EnableTypeEnum b : EnableTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnableTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnableTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnableTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnableTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnableTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENABLE_TYPE = "enableType";
  @SerializedName(SERIALIZED_NAME_ENABLE_TYPE)
  private EnableTypeEnum enableType;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<String> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private List<String> services = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<String> values = new ArrayList<>();

  public EnableRule() {
  }

  public EnableRule enableType(EnableTypeEnum enableType) {
    this.enableType = enableType;
    return this;
  }

  /**
   * Client and resource project enable type.
   * @return enableType
   */
  @javax.annotation.Nullable
  public EnableTypeEnum getEnableType() {
    return enableType;
  }

  public void setEnableType(EnableTypeEnum enableType) {
    this.enableType = enableType;
  }


  @Deprecated
  public EnableRule groups(List<String> groups) {
    this.groups = groups;
    return this;
  }

  public EnableRule addGroupsItem(String groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * DEPRECATED: Please use field &#x60;values&#x60;. Service group should have prefix &#x60;groups/&#x60;. The names of the service groups that are enabled (Not Implemented). Example: &#x60;groups/googleServices&#x60;.
   * @return groups
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<String> getGroups() {
    return groups;
  }

  @Deprecated
  public void setGroups(List<String> groups) {
    this.groups = groups;
  }


  @Deprecated
  public EnableRule services(List<String> services) {
    this.services = services;
    return this;
  }

  public EnableRule addServicesItem(String servicesItem) {
    if (this.services == null) {
      this.services = new ArrayList<>();
    }
    this.services.add(servicesItem);
    return this;
  }

  /**
   * DEPRECATED: Please use field &#x60;values&#x60;. Service should have prefix &#x60;services/&#x60;. The names of the services that are enabled. Example: &#x60;storage.googleapis.com&#x60;.
   * @return services
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<String> getServices() {
    return services;
  }

  @Deprecated
  public void setServices(List<String> services) {
    this.services = services;
  }


  public EnableRule values(List<String> values) {
    this.values = values;
    return this;
  }

  public EnableRule addValuesItem(String valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

  /**
   * The names of the services or service groups that are enabled. Example: &#x60;services/storage.googleapis.com&#x60;, &#x60;groups/googleServices&#x60;, &#x60;groups/allServices&#x60;.
   * @return values
   */
  @javax.annotation.Nullable
  public List<String> getValues() {
    return values;
  }

  public void setValues(List<String> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnableRule enableRule = (EnableRule) o;
    return Objects.equals(this.enableType, enableRule.enableType) &&
        Objects.equals(this.groups, enableRule.groups) &&
        Objects.equals(this.services, enableRule.services) &&
        Objects.equals(this.values, enableRule.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableType, groups, services, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnableRule {\n");
    sb.append("    enableType: ").append(toIndentedString(enableType)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enableType");
    openapiFields.add("groups");
    openapiFields.add("services");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnableRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnableRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnableRule is not found in the empty JSON string", EnableRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnableRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnableRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("enableType") != null && !jsonObj.get("enableType").isJsonNull()) && !jsonObj.get("enableType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enableType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enableType").toString()));
      }
      // validate the optional field `enableType`
      if (jsonObj.get("enableType") != null && !jsonObj.get("enableType").isJsonNull()) {
        EnableTypeEnum.validateJsonElement(jsonObj.get("enableType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull() && !jsonObj.get("groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull() && !jsonObj.get("services").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `services` to be an array in the JSON string but got `%s`", jsonObj.get("services").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull() && !jsonObj.get("values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnableRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnableRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnableRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnableRule.class));

       return (TypeAdapter<T>) new TypeAdapter<EnableRule>() {
           @Override
           public void write(JsonWriter out, EnableRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnableRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnableRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnableRule
   * @throws IOException if the JSON string is invalid with respect to EnableRule
   */
  public static EnableRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnableRule.class);
  }

  /**
   * Convert an instance of EnableRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

