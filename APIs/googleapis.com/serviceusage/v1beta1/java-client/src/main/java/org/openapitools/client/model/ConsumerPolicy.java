/*
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.EnableRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Consumer Policy is a set of rules that define what services or service groups can be used for a cloud resource hierarchy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:44.557258-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConsumerPolicy {
  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Map<String, String> annotations = new HashMap<>();

  public static final String SERIALIZED_NAME_ENABLE_RULES = "enableRules";
  @SerializedName(SERIALIZED_NAME_ENABLE_RULES)
  private List<EnableRule> enableRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public ConsumerPolicy() {
  }

  public ConsumerPolicy(
     String name
  ) {
    this();
    this.name = name;
  }

  public ConsumerPolicy annotations(Map<String, String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public ConsumerPolicy putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

  /**
   * Optional. Annotations is an unstructured key-value map stored with a policy that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. [AIP-128](https://google.aip.dev/128#annotations)
   * @return annotations
   */
  @javax.annotation.Nullable
  public Map<String, String> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }


  public ConsumerPolicy enableRules(List<EnableRule> enableRules) {
    this.enableRules = enableRules;
    return this;
  }

  public ConsumerPolicy addEnableRulesItem(EnableRule enableRulesItem) {
    if (this.enableRules == null) {
      this.enableRules = new ArrayList<>();
    }
    this.enableRules.add(enableRulesItem);
    return this;
  }

  /**
   * Enable rules define usable services and service groups.
   * @return enableRules
   */
  @javax.annotation.Nullable
  public List<EnableRule> getEnableRules() {
    return enableRules;
  }

  public void setEnableRules(List<EnableRule> enableRules) {
    this.enableRules = enableRules;
  }


  public ConsumerPolicy etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * An opaque tag indicating the current version of the policy, used for concurrency control.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  /**
   * Output only. The resource name of the policy. We only allow consumer policy name as &#x60;default&#x60; for now: &#x60;projects/12345/consumerPolicies/default&#x60;, &#x60;folders/12345/consumerPolicies/default&#x60;, &#x60;organizations/12345/consumerPolicies/default&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public ConsumerPolicy updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * The last-modified time.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsumerPolicy consumerPolicy = (ConsumerPolicy) o;
    return Objects.equals(this.annotations, consumerPolicy.annotations) &&
        Objects.equals(this.enableRules, consumerPolicy.enableRules) &&
        Objects.equals(this.etag, consumerPolicy.etag) &&
        Objects.equals(this.name, consumerPolicy.name) &&
        Objects.equals(this.updateTime, consumerPolicy.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, enableRules, etag, name, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsumerPolicy {\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    enableRules: ").append(toIndentedString(enableRules)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotations");
    openapiFields.add("enableRules");
    openapiFields.add("etag");
    openapiFields.add("name");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConsumerPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConsumerPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConsumerPolicy is not found in the empty JSON string", ConsumerPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConsumerPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConsumerPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("enableRules") != null && !jsonObj.get("enableRules").isJsonNull()) {
        JsonArray jsonArrayenableRules = jsonObj.getAsJsonArray("enableRules");
        if (jsonArrayenableRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enableRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enableRules` to be an array in the JSON string but got `%s`", jsonObj.get("enableRules").toString()));
          }

          // validate the optional field `enableRules` (array)
          for (int i = 0; i < jsonArrayenableRules.size(); i++) {
            EnableRule.validateJsonElement(jsonArrayenableRules.get(i));
          };
        }
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConsumerPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConsumerPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConsumerPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConsumerPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<ConsumerPolicy>() {
           @Override
           public void write(JsonWriter out, ConsumerPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConsumerPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConsumerPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConsumerPolicy
   * @throws IOException if the JSON string is invalid with respect to ConsumerPolicy
   */
  public static ConsumerPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConsumerPolicy.class);
  }

  /**
   * Convert an instance of ConsumerPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

