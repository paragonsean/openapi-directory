/*
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Api;
import org.openapitools.client.model.Authentication;
import org.openapitools.client.model.Documentation;
import org.openapitools.client.model.Endpoint;
import org.openapitools.client.model.MonitoredResourceDescriptor;
import org.openapitools.client.model.Monitoring;
import org.openapitools.client.model.Quota;
import org.openapitools.client.model.Usage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration of the service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:44.557258-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceConfig {
  public static final String SERIALIZED_NAME_APIS = "apis";
  @SerializedName(SERIALIZED_NAME_APIS)
  private List<Api> apis = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTHENTICATION = "authentication";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION)
  private Authentication authentication;

  public static final String SERIALIZED_NAME_DOCUMENTATION = "documentation";
  @SerializedName(SERIALIZED_NAME_DOCUMENTATION)
  private Documentation documentation;

  public static final String SERIALIZED_NAME_ENDPOINTS = "endpoints";
  @SerializedName(SERIALIZED_NAME_ENDPOINTS)
  private List<Endpoint> endpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_MONITORED_RESOURCES = "monitoredResources";
  @SerializedName(SERIALIZED_NAME_MONITORED_RESOURCES)
  private List<MonitoredResourceDescriptor> monitoredResources = new ArrayList<>();

  public static final String SERIALIZED_NAME_MONITORING = "monitoring";
  @SerializedName(SERIALIZED_NAME_MONITORING)
  private Monitoring monitoring;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_QUOTA = "quota";
  @SerializedName(SERIALIZED_NAME_QUOTA)
  private Quota quota;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private Usage usage;

  public ServiceConfig() {
  }

  public ServiceConfig apis(List<Api> apis) {
    this.apis = apis;
    return this;
  }

  public ServiceConfig addApisItem(Api apisItem) {
    if (this.apis == null) {
      this.apis = new ArrayList<>();
    }
    this.apis.add(apisItem);
    return this;
  }

  /**
   * A list of API interfaces exported by this service. Contains only the names, versions, and method names of the interfaces.
   * @return apis
   */
  @javax.annotation.Nullable
  public List<Api> getApis() {
    return apis;
  }

  public void setApis(List<Api> apis) {
    this.apis = apis;
  }


  public ServiceConfig authentication(Authentication authentication) {
    this.authentication = authentication;
    return this;
  }

  /**
   * Get authentication
   * @return authentication
   */
  @javax.annotation.Nullable
  public Authentication getAuthentication() {
    return authentication;
  }

  public void setAuthentication(Authentication authentication) {
    this.authentication = authentication;
  }


  public ServiceConfig documentation(Documentation documentation) {
    this.documentation = documentation;
    return this;
  }

  /**
   * Get documentation
   * @return documentation
   */
  @javax.annotation.Nullable
  public Documentation getDocumentation() {
    return documentation;
  }

  public void setDocumentation(Documentation documentation) {
    this.documentation = documentation;
  }


  public ServiceConfig endpoints(List<Endpoint> endpoints) {
    this.endpoints = endpoints;
    return this;
  }

  public ServiceConfig addEndpointsItem(Endpoint endpointsItem) {
    if (this.endpoints == null) {
      this.endpoints = new ArrayList<>();
    }
    this.endpoints.add(endpointsItem);
    return this;
  }

  /**
   * Configuration for network endpoints. Contains only the names and aliases of the endpoints.
   * @return endpoints
   */
  @javax.annotation.Nullable
  public List<Endpoint> getEndpoints() {
    return endpoints;
  }

  public void setEndpoints(List<Endpoint> endpoints) {
    this.endpoints = endpoints;
  }


  public ServiceConfig monitoredResources(List<MonitoredResourceDescriptor> monitoredResources) {
    this.monitoredResources = monitoredResources;
    return this;
  }

  public ServiceConfig addMonitoredResourcesItem(MonitoredResourceDescriptor monitoredResourcesItem) {
    if (this.monitoredResources == null) {
      this.monitoredResources = new ArrayList<>();
    }
    this.monitoredResources.add(monitoredResourcesItem);
    return this;
  }

  /**
   * Defines the monitored resources used by this service. This is required by the Service.monitoring and Service.logging configurations.
   * @return monitoredResources
   */
  @javax.annotation.Nullable
  public List<MonitoredResourceDescriptor> getMonitoredResources() {
    return monitoredResources;
  }

  public void setMonitoredResources(List<MonitoredResourceDescriptor> monitoredResources) {
    this.monitoredResources = monitoredResources;
  }


  public ServiceConfig monitoring(Monitoring monitoring) {
    this.monitoring = monitoring;
    return this;
  }

  /**
   * Get monitoring
   * @return monitoring
   */
  @javax.annotation.Nullable
  public Monitoring getMonitoring() {
    return monitoring;
  }

  public void setMonitoring(Monitoring monitoring) {
    this.monitoring = monitoring;
  }


  public ServiceConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The DNS address at which this service is available. An example DNS address would be: &#x60;calendar.googleapis.com&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ServiceConfig quota(Quota quota) {
    this.quota = quota;
    return this;
  }

  /**
   * Get quota
   * @return quota
   */
  @javax.annotation.Nullable
  public Quota getQuota() {
    return quota;
  }

  public void setQuota(Quota quota) {
    this.quota = quota;
  }


  public ServiceConfig title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The product title for this service.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ServiceConfig usage(Usage usage) {
    this.usage = usage;
    return this;
  }

  /**
   * Get usage
   * @return usage
   */
  @javax.annotation.Nullable
  public Usage getUsage() {
    return usage;
  }

  public void setUsage(Usage usage) {
    this.usage = usage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceConfig serviceConfig = (ServiceConfig) o;
    return Objects.equals(this.apis, serviceConfig.apis) &&
        Objects.equals(this.authentication, serviceConfig.authentication) &&
        Objects.equals(this.documentation, serviceConfig.documentation) &&
        Objects.equals(this.endpoints, serviceConfig.endpoints) &&
        Objects.equals(this.monitoredResources, serviceConfig.monitoredResources) &&
        Objects.equals(this.monitoring, serviceConfig.monitoring) &&
        Objects.equals(this.name, serviceConfig.name) &&
        Objects.equals(this.quota, serviceConfig.quota) &&
        Objects.equals(this.title, serviceConfig.title) &&
        Objects.equals(this.usage, serviceConfig.usage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apis, authentication, documentation, endpoints, monitoredResources, monitoring, name, quota, title, usage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceConfig {\n");
    sb.append("    apis: ").append(toIndentedString(apis)).append("\n");
    sb.append("    authentication: ").append(toIndentedString(authentication)).append("\n");
    sb.append("    documentation: ").append(toIndentedString(documentation)).append("\n");
    sb.append("    endpoints: ").append(toIndentedString(endpoints)).append("\n");
    sb.append("    monitoredResources: ").append(toIndentedString(monitoredResources)).append("\n");
    sb.append("    monitoring: ").append(toIndentedString(monitoring)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    quota: ").append(toIndentedString(quota)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apis");
    openapiFields.add("authentication");
    openapiFields.add("documentation");
    openapiFields.add("endpoints");
    openapiFields.add("monitoredResources");
    openapiFields.add("monitoring");
    openapiFields.add("name");
    openapiFields.add("quota");
    openapiFields.add("title");
    openapiFields.add("usage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceConfig is not found in the empty JSON string", ServiceConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("apis") != null && !jsonObj.get("apis").isJsonNull()) {
        JsonArray jsonArrayapis = jsonObj.getAsJsonArray("apis");
        if (jsonArrayapis != null) {
          // ensure the json data is an array
          if (!jsonObj.get("apis").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `apis` to be an array in the JSON string but got `%s`", jsonObj.get("apis").toString()));
          }

          // validate the optional field `apis` (array)
          for (int i = 0; i < jsonArrayapis.size(); i++) {
            Api.validateJsonElement(jsonArrayapis.get(i));
          };
        }
      }
      // validate the optional field `authentication`
      if (jsonObj.get("authentication") != null && !jsonObj.get("authentication").isJsonNull()) {
        Authentication.validateJsonElement(jsonObj.get("authentication"));
      }
      // validate the optional field `documentation`
      if (jsonObj.get("documentation") != null && !jsonObj.get("documentation").isJsonNull()) {
        Documentation.validateJsonElement(jsonObj.get("documentation"));
      }
      if (jsonObj.get("endpoints") != null && !jsonObj.get("endpoints").isJsonNull()) {
        JsonArray jsonArrayendpoints = jsonObj.getAsJsonArray("endpoints");
        if (jsonArrayendpoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("endpoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `endpoints` to be an array in the JSON string but got `%s`", jsonObj.get("endpoints").toString()));
          }

          // validate the optional field `endpoints` (array)
          for (int i = 0; i < jsonArrayendpoints.size(); i++) {
            Endpoint.validateJsonElement(jsonArrayendpoints.get(i));
          };
        }
      }
      if (jsonObj.get("monitoredResources") != null && !jsonObj.get("monitoredResources").isJsonNull()) {
        JsonArray jsonArraymonitoredResources = jsonObj.getAsJsonArray("monitoredResources");
        if (jsonArraymonitoredResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("monitoredResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `monitoredResources` to be an array in the JSON string but got `%s`", jsonObj.get("monitoredResources").toString()));
          }

          // validate the optional field `monitoredResources` (array)
          for (int i = 0; i < jsonArraymonitoredResources.size(); i++) {
            MonitoredResourceDescriptor.validateJsonElement(jsonArraymonitoredResources.get(i));
          };
        }
      }
      // validate the optional field `monitoring`
      if (jsonObj.get("monitoring") != null && !jsonObj.get("monitoring").isJsonNull()) {
        Monitoring.validateJsonElement(jsonObj.get("monitoring"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `quota`
      if (jsonObj.get("quota") != null && !jsonObj.get("quota").isJsonNull()) {
        Quota.validateJsonElement(jsonObj.get("quota"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `usage`
      if (jsonObj.get("usage") != null && !jsonObj.get("usage").isJsonNull()) {
        Usage.validateJsonElement(jsonObj.get("usage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceConfig>() {
           @Override
           public void write(JsonWriter out, ServiceConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceConfig
   * @throws IOException if the JSON string is invalid with respect to ServiceConfig
   */
  public static ServiceConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceConfig.class);
  }

  /**
   * Convert an instance of ServiceConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

