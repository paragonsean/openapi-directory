/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldPolicy from './FieldPolicy';

/**
 * The MethodPolicy model module.
 * @module model/MethodPolicy
 * @version v1
 */
class MethodPolicy {
    /**
     * Constructs a new <code>MethodPolicy</code>.
     * Defines policies applying to an RPC method.
     * @alias module:model/MethodPolicy
     */
    constructor() { 
        
        MethodPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MethodPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MethodPolicy} obj Optional instance to populate.
     * @return {module:model/MethodPolicy} The populated <code>MethodPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MethodPolicy();

            if (data.hasOwnProperty('requestPolicies')) {
                obj['requestPolicies'] = ApiClient.convertToType(data['requestPolicies'], [FieldPolicy]);
            }
            if (data.hasOwnProperty('selector')) {
                obj['selector'] = ApiClient.convertToType(data['selector'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MethodPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MethodPolicy</code>.
     */
    static validateJSON(data) {
        if (data['requestPolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['requestPolicies'])) {
                throw new Error("Expected the field `requestPolicies` to be an array in the JSON data but got " + data['requestPolicies']);
            }
            // validate the optional field `requestPolicies` (array)
            for (const item of data['requestPolicies']) {
                FieldPolicy.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['selector'] && !(typeof data['selector'] === 'string' || data['selector'] instanceof String)) {
            throw new Error("Expected the field `selector` to be a primitive type in the JSON string but got " + data['selector']);
        }

        return true;
    }


}



/**
 * Policies that are applicable to the request message.
 * @member {Array.<module:model/FieldPolicy>} requestPolicies
 */
MethodPolicy.prototype['requestPolicies'] = undefined;

/**
 * Selects a method to which these policies should be enforced, for example, \"google.pubsub.v1.Subscriber.CreateSubscription\". Refer to selector for syntax details. NOTE: This field must not be set in the proto annotation. It will be automatically filled by the service config compiler .
 * @member {String} selector
 */
MethodPolicy.prototype['selector'] = undefined;






export default MethodPolicy;

