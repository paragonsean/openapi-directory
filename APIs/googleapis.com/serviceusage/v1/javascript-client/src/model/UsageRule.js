/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UsageRule model module.
 * @module model/UsageRule
 * @version v1
 */
class UsageRule {
    /**
     * Constructs a new <code>UsageRule</code>.
     * Usage configuration rules for the service. NOTE: Under development. Use this rule to configure unregistered calls for the service. Unregistered calls are calls that do not contain consumer project identity. (Example: calls that do not contain an API key). By default, API methods do not allow unregistered calls, and each method call must be identified by a consumer project identity. Use this rule to allow/disallow unregistered calls. Example of an API that wants to allow unregistered calls for entire service. usage: rules: - selector: \&quot;*\&quot; allow_unregistered_calls: true Example of a method that wants to allow unregistered calls. usage: rules: - selector: \&quot;google.example.library.v1.LibraryService.CreateBook\&quot; allow_unregistered_calls: true
     * @alias module:model/UsageRule
     */
    constructor() { 
        
        UsageRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UsageRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UsageRule} obj Optional instance to populate.
     * @return {module:model/UsageRule} The populated <code>UsageRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UsageRule();

            if (data.hasOwnProperty('allowUnregisteredCalls')) {
                obj['allowUnregisteredCalls'] = ApiClient.convertToType(data['allowUnregisteredCalls'], 'Boolean');
            }
            if (data.hasOwnProperty('selector')) {
                obj['selector'] = ApiClient.convertToType(data['selector'], 'String');
            }
            if (data.hasOwnProperty('skipServiceControl')) {
                obj['skipServiceControl'] = ApiClient.convertToType(data['skipServiceControl'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UsageRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UsageRule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['selector'] && !(typeof data['selector'] === 'string' || data['selector'] instanceof String)) {
            throw new Error("Expected the field `selector` to be a primitive type in the JSON string but got " + data['selector']);
        }

        return true;
    }


}



/**
 * If true, the selected method allows unregistered calls, e.g. calls that don't identify any user or application.
 * @member {Boolean} allowUnregisteredCalls
 */
UsageRule.prototype['allowUnregisteredCalls'] = undefined;

/**
 * Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details.
 * @member {String} selector
 */
UsageRule.prototype['selector'] = undefined;

/**
 * If true, the selected method should skip service control and the control plane features, such as quota and billing, will not be available. This flag is used by Google Cloud Endpoints to bypass checks for internal methods, such as service health check methods.
 * @member {Boolean} skipServiceControl
 */
UsageRule.prototype['skipServiceControl'] = undefined;






export default UsageRule;

