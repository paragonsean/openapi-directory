/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Method from './Method';
import Mixin from './Mixin';
import Option from './Option';
import SourceContext from './SourceContext';

/**
 * The Api model module.
 * @module model/Api
 * @version v1
 */
class Api {
    /**
     * Constructs a new <code>Api</code>.
     * Api is a light-weight descriptor for an API Interface. Interfaces are also described as \&quot;protocol buffer services\&quot; in some contexts, such as by the \&quot;service\&quot; keyword in a .proto file, but they are different from API Services, which represent a concrete implementation of an interface as opposed to simply a description of methods and bindings. They are also sometimes simply referred to as \&quot;APIs\&quot; in other contexts, such as the name of this message itself. See https://cloud.google.com/apis/design/glossary for detailed terminology.
     * @alias module:model/Api
     */
    constructor() { 
        
        Api.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Api</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Api} obj Optional instance to populate.
     * @return {module:model/Api} The populated <code>Api</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Api();

            if (data.hasOwnProperty('methods')) {
                obj['methods'] = ApiClient.convertToType(data['methods'], [Method]);
            }
            if (data.hasOwnProperty('mixins')) {
                obj['mixins'] = ApiClient.convertToType(data['mixins'], [Mixin]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], [Option]);
            }
            if (data.hasOwnProperty('sourceContext')) {
                obj['sourceContext'] = SourceContext.constructFromObject(data['sourceContext']);
            }
            if (data.hasOwnProperty('syntax')) {
                obj['syntax'] = ApiClient.convertToType(data['syntax'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Api</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Api</code>.
     */
    static validateJSON(data) {
        if (data['methods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['methods'])) {
                throw new Error("Expected the field `methods` to be an array in the JSON data but got " + data['methods']);
            }
            // validate the optional field `methods` (array)
            for (const item of data['methods']) {
                Method.validateJSON(item);
            };
        }
        if (data['mixins']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mixins'])) {
                throw new Error("Expected the field `mixins` to be an array in the JSON data but got " + data['mixins']);
            }
            // validate the optional field `mixins` (array)
            for (const item of data['mixins']) {
                Mixin.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['options'])) {
                throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
            }
            // validate the optional field `options` (array)
            for (const item of data['options']) {
                Option.validateJSON(item);
            };
        }
        // validate the optional field `sourceContext`
        if (data['sourceContext']) { // data not null
          SourceContext.validateJSON(data['sourceContext']);
        }
        // ensure the json data is a string
        if (data['syntax'] && !(typeof data['syntax'] === 'string' || data['syntax'] instanceof String)) {
            throw new Error("Expected the field `syntax` to be a primitive type in the JSON string but got " + data['syntax']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * The methods of this interface, in unspecified order.
 * @member {Array.<module:model/Method>} methods
 */
Api.prototype['methods'] = undefined;

/**
 * Included interfaces. See Mixin.
 * @member {Array.<module:model/Mixin>} mixins
 */
Api.prototype['mixins'] = undefined;

/**
 * The fully qualified name of this interface, including package name followed by the interface's simple name.
 * @member {String} name
 */
Api.prototype['name'] = undefined;

/**
 * Any metadata attached to the interface.
 * @member {Array.<module:model/Option>} options
 */
Api.prototype['options'] = undefined;

/**
 * @member {module:model/SourceContext} sourceContext
 */
Api.prototype['sourceContext'] = undefined;

/**
 * The source syntax of the service.
 * @member {module:model/Api.SyntaxEnum} syntax
 */
Api.prototype['syntax'] = undefined;

/**
 * A version string for this interface. If specified, must have the form `major-version.minor-version`, as in `1.10`. If the minor version is omitted, it defaults to zero. If the entire version field is empty, the major version is derived from the package name, as outlined below. If the field is not empty, the version in the package name will be verified to be consistent with what is provided here. The versioning schema uses [semantic versioning](http://semver.org) where the major version number indicates a breaking change and the minor version an additive, non-breaking change. Both version numbers are signals to users what to expect from different versions, and should be carefully chosen based on the product plan. The major version is also reflected in the package name of the interface, which must end in `v`, as in `google.feature.v1`. For major versions 0 and 1, the suffix can be omitted. Zero major versions must only be used for experimental, non-GA interfaces. 
 * @member {String} version
 */
Api.prototype['version'] = undefined;





/**
 * Allowed values for the <code>syntax</code> property.
 * @enum {String}
 * @readonly
 */
Api['SyntaxEnum'] = {

    /**
     * value: "SYNTAX_PROTO2"
     * @const
     */
    "PROTO2": "SYNTAX_PROTO2",

    /**
     * value: "SYNTAX_PROTO3"
     * @const
     */
    "PROTO3": "SYNTAX_PROTO3",

    /**
     * value: "SYNTAX_EDITIONS"
     * @const
     */
    "EDITIONS": "SYNTAX_EDITIONS"
};



export default Api;

