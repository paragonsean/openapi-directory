/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricRule from './MetricRule';
import QuotaLimit from './QuotaLimit';

/**
 * The Quota model module.
 * @module model/Quota
 * @version v1
 */
class Quota {
    /**
     * Constructs a new <code>Quota</code>.
     * Quota configuration helps to achieve fairness and budgeting in service usage. The metric based quota configuration works this way: - The service configuration defines a set of metrics. - For API calls, the quota.metric_rules maps methods to metrics with corresponding costs. - The quota.limits defines limits on the metrics, which will be used for quota checks at runtime. An example quota configuration in yaml format: quota: limits: - name: apiWriteQpsPerProject metric: library.googleapis.com/write_calls unit: \&quot;1/min/{project}\&quot; # rate limit for consumer projects values: STANDARD: 10000 (The metric rules bind all methods to the read_calls metric, except for the UpdateBook and DeleteBook methods. These two methods are mapped to the write_calls metric, with the UpdateBook method consuming at twice rate as the DeleteBook method.) metric_rules: - selector: \&quot;*\&quot; metric_costs: library.googleapis.com/read_calls: 1 - selector: google.example.library.v1.LibraryService.UpdateBook metric_costs: library.googleapis.com/write_calls: 2 - selector: google.example.library.v1.LibraryService.DeleteBook metric_costs: library.googleapis.com/write_calls: 1 Corresponding Metric definition: metrics: - name: library.googleapis.com/read_calls display_name: Read requests metric_kind: DELTA value_type: INT64 - name: library.googleapis.com/write_calls display_name: Write requests metric_kind: DELTA value_type: INT64 
     * @alias module:model/Quota
     */
    constructor() { 
        
        Quota.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Quota</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Quota} obj Optional instance to populate.
     * @return {module:model/Quota} The populated <code>Quota</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Quota();

            if (data.hasOwnProperty('limits')) {
                obj['limits'] = ApiClient.convertToType(data['limits'], [QuotaLimit]);
            }
            if (data.hasOwnProperty('metricRules')) {
                obj['metricRules'] = ApiClient.convertToType(data['metricRules'], [MetricRule]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Quota</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Quota</code>.
     */
    static validateJSON(data) {
        if (data['limits']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['limits'])) {
                throw new Error("Expected the field `limits` to be an array in the JSON data but got " + data['limits']);
            }
            // validate the optional field `limits` (array)
            for (const item of data['limits']) {
                QuotaLimit.validateJSON(item);
            };
        }
        if (data['metricRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metricRules'])) {
                throw new Error("Expected the field `metricRules` to be an array in the JSON data but got " + data['metricRules']);
            }
            // validate the optional field `metricRules` (array)
            for (const item of data['metricRules']) {
                MetricRule.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * List of QuotaLimit definitions for the service.
 * @member {Array.<module:model/QuotaLimit>} limits
 */
Quota.prototype['limits'] = undefined;

/**
 * List of MetricRule definitions, each one mapping a selected method to one or more metrics.
 * @member {Array.<module:model/MetricRule>} metricRules
 */
Quota.prototype['metricRules'] = undefined;






export default Quota;

