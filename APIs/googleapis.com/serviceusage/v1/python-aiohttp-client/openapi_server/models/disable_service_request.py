# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DisableServiceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_if_service_has_usage: str=None, disable_dependent_services: bool=None):
        """DisableServiceRequest - a model defined in OpenAPI

        :param check_if_service_has_usage: The check_if_service_has_usage of this DisableServiceRequest.
        :param disable_dependent_services: The disable_dependent_services of this DisableServiceRequest.
        """
        self.openapi_types = {
            'check_if_service_has_usage': str,
            'disable_dependent_services': bool
        }

        self.attribute_map = {
            'check_if_service_has_usage': 'checkIfServiceHasUsage',
            'disable_dependent_services': 'disableDependentServices'
        }

        self._check_if_service_has_usage = check_if_service_has_usage
        self._disable_dependent_services = disable_dependent_services

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisableServiceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisableServiceRequest of this DisableServiceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_if_service_has_usage(self):
        """Gets the check_if_service_has_usage of this DisableServiceRequest.

        Defines the behavior for checking service usage when disabling a service.

        :return: The check_if_service_has_usage of this DisableServiceRequest.
        :rtype: str
        """
        return self._check_if_service_has_usage

    @check_if_service_has_usage.setter
    def check_if_service_has_usage(self, check_if_service_has_usage):
        """Sets the check_if_service_has_usage of this DisableServiceRequest.

        Defines the behavior for checking service usage when disabling a service.

        :param check_if_service_has_usage: The check_if_service_has_usage of this DisableServiceRequest.
        :type check_if_service_has_usage: str
        """
        allowed_values = ["CHECK_IF_SERVICE_HAS_USAGE_UNSPECIFIED", "SKIP", "CHECK"]  # noqa: E501
        if check_if_service_has_usage not in allowed_values:
            raise ValueError(
                "Invalid value for `check_if_service_has_usage` ({0}), must be one of {1}"
                .format(check_if_service_has_usage, allowed_values)
            )

        self._check_if_service_has_usage = check_if_service_has_usage

    @property
    def disable_dependent_services(self):
        """Gets the disable_dependent_services of this DisableServiceRequest.

        Indicates if services that are enabled and which depend on this service should also be disabled. If not set, an error will be generated if any enabled services depend on the service to be disabled. When set, the service, and any enabled services that depend on it, will be disabled together.

        :return: The disable_dependent_services of this DisableServiceRequest.
        :rtype: bool
        """
        return self._disable_dependent_services

    @disable_dependent_services.setter
    def disable_dependent_services(self, disable_dependent_services):
        """Sets the disable_dependent_services of this DisableServiceRequest.

        Indicates if services that are enabled and which depend on this service should also be disabled. If not set, an error will be generated if any enabled services depend on the service to be disabled. When set, the service, and any enabled services that depend on it, will be disabled together.

        :param disable_dependent_services: The disable_dependent_services of this DisableServiceRequest.
        :type disable_dependent_services: bool
        """

        self._disable_dependent_services = disable_dependent_services
