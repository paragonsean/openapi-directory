# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.http_rule import HttpRule
from openapi_server import util


class Http(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fully_decode_reserved_expansion: bool=None, rules: List[HttpRule]=None):
        """Http - a model defined in OpenAPI

        :param fully_decode_reserved_expansion: The fully_decode_reserved_expansion of this Http.
        :param rules: The rules of this Http.
        """
        self.openapi_types = {
            'fully_decode_reserved_expansion': bool,
            'rules': List[HttpRule]
        }

        self.attribute_map = {
            'fully_decode_reserved_expansion': 'fullyDecodeReservedExpansion',
            'rules': 'rules'
        }

        self._fully_decode_reserved_expansion = fully_decode_reserved_expansion
        self._rules = rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Http':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Http of this Http.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fully_decode_reserved_expansion(self):
        """Gets the fully_decode_reserved_expansion of this Http.

        When set to true, URL path parameters will be fully URI-decoded except in cases of single segment matches in reserved expansion, where \"%2F\" will be left encoded. The default behavior is to not decode RFC 6570 reserved characters in multi segment matches.

        :return: The fully_decode_reserved_expansion of this Http.
        :rtype: bool
        """
        return self._fully_decode_reserved_expansion

    @fully_decode_reserved_expansion.setter
    def fully_decode_reserved_expansion(self, fully_decode_reserved_expansion):
        """Sets the fully_decode_reserved_expansion of this Http.

        When set to true, URL path parameters will be fully URI-decoded except in cases of single segment matches in reserved expansion, where \"%2F\" will be left encoded. The default behavior is to not decode RFC 6570 reserved characters in multi segment matches.

        :param fully_decode_reserved_expansion: The fully_decode_reserved_expansion of this Http.
        :type fully_decode_reserved_expansion: bool
        """

        self._fully_decode_reserved_expansion = fully_decode_reserved_expansion

    @property
    def rules(self):
        """Gets the rules of this Http.

        A list of HTTP configuration rules that apply to individual API methods. **NOTE:** All service configuration rules follow \"last one wins\" order.

        :return: The rules of this Http.
        :rtype: List[HttpRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this Http.

        A list of HTTP configuration rules that apply to individual API methods. **NOTE:** All service configuration rules follow \"last one wins\" order.

        :param rules: The rules of this Http.
        :type rules: List[HttpRule]
        """

        self._rules = rules
