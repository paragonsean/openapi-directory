# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.common_language_settings import CommonLanguageSettings
from openapi_server import util


class DotnetSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, common: CommonLanguageSettings=None, forced_namespace_aliases: List[str]=None, handwritten_signatures: List[str]=None, ignored_resources: List[str]=None, renamed_resources: Dict[str, str]=None, renamed_services: Dict[str, str]=None):
        """DotnetSettings - a model defined in OpenAPI

        :param common: The common of this DotnetSettings.
        :param forced_namespace_aliases: The forced_namespace_aliases of this DotnetSettings.
        :param handwritten_signatures: The handwritten_signatures of this DotnetSettings.
        :param ignored_resources: The ignored_resources of this DotnetSettings.
        :param renamed_resources: The renamed_resources of this DotnetSettings.
        :param renamed_services: The renamed_services of this DotnetSettings.
        """
        self.openapi_types = {
            'common': CommonLanguageSettings,
            'forced_namespace_aliases': List[str],
            'handwritten_signatures': List[str],
            'ignored_resources': List[str],
            'renamed_resources': Dict[str, str],
            'renamed_services': Dict[str, str]
        }

        self.attribute_map = {
            'common': 'common',
            'forced_namespace_aliases': 'forcedNamespaceAliases',
            'handwritten_signatures': 'handwrittenSignatures',
            'ignored_resources': 'ignoredResources',
            'renamed_resources': 'renamedResources',
            'renamed_services': 'renamedServices'
        }

        self._common = common
        self._forced_namespace_aliases = forced_namespace_aliases
        self._handwritten_signatures = handwritten_signatures
        self._ignored_resources = ignored_resources
        self._renamed_resources = renamed_resources
        self._renamed_services = renamed_services

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DotnetSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DotnetSettings of this DotnetSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def common(self):
        """Gets the common of this DotnetSettings.


        :return: The common of this DotnetSettings.
        :rtype: CommonLanguageSettings
        """
        return self._common

    @common.setter
    def common(self, common):
        """Sets the common of this DotnetSettings.


        :param common: The common of this DotnetSettings.
        :type common: CommonLanguageSettings
        """

        self._common = common

    @property
    def forced_namespace_aliases(self):
        """Gets the forced_namespace_aliases of this DotnetSettings.

        Namespaces which must be aliased in snippets due to a known (but non-generator-predictable) naming collision

        :return: The forced_namespace_aliases of this DotnetSettings.
        :rtype: List[str]
        """
        return self._forced_namespace_aliases

    @forced_namespace_aliases.setter
    def forced_namespace_aliases(self, forced_namespace_aliases):
        """Sets the forced_namespace_aliases of this DotnetSettings.

        Namespaces which must be aliased in snippets due to a known (but non-generator-predictable) naming collision

        :param forced_namespace_aliases: The forced_namespace_aliases of this DotnetSettings.
        :type forced_namespace_aliases: List[str]
        """

        self._forced_namespace_aliases = forced_namespace_aliases

    @property
    def handwritten_signatures(self):
        """Gets the handwritten_signatures of this DotnetSettings.

        Method signatures (in the form \"service.method(signature)\") which are provided separately, so shouldn't be generated. Snippets *calling* these methods are still generated, however.

        :return: The handwritten_signatures of this DotnetSettings.
        :rtype: List[str]
        """
        return self._handwritten_signatures

    @handwritten_signatures.setter
    def handwritten_signatures(self, handwritten_signatures):
        """Sets the handwritten_signatures of this DotnetSettings.

        Method signatures (in the form \"service.method(signature)\") which are provided separately, so shouldn't be generated. Snippets *calling* these methods are still generated, however.

        :param handwritten_signatures: The handwritten_signatures of this DotnetSettings.
        :type handwritten_signatures: List[str]
        """

        self._handwritten_signatures = handwritten_signatures

    @property
    def ignored_resources(self):
        """Gets the ignored_resources of this DotnetSettings.

        List of full resource types to ignore during generation. This is typically used for API-specific Location resources, which should be handled by the generator as if they were actually the common Location resources. Example entry: \"documentai.googleapis.com/Location\"

        :return: The ignored_resources of this DotnetSettings.
        :rtype: List[str]
        """
        return self._ignored_resources

    @ignored_resources.setter
    def ignored_resources(self, ignored_resources):
        """Sets the ignored_resources of this DotnetSettings.

        List of full resource types to ignore during generation. This is typically used for API-specific Location resources, which should be handled by the generator as if they were actually the common Location resources. Example entry: \"documentai.googleapis.com/Location\"

        :param ignored_resources: The ignored_resources of this DotnetSettings.
        :type ignored_resources: List[str]
        """

        self._ignored_resources = ignored_resources

    @property
    def renamed_resources(self):
        """Gets the renamed_resources of this DotnetSettings.

        Map from full resource types to the effective short name for the resource. This is used when otherwise resource named from different services would cause naming collisions. Example entry: \"datalabeling.googleapis.com/Dataset\": \"DataLabelingDataset\"

        :return: The renamed_resources of this DotnetSettings.
        :rtype: Dict[str, str]
        """
        return self._renamed_resources

    @renamed_resources.setter
    def renamed_resources(self, renamed_resources):
        """Sets the renamed_resources of this DotnetSettings.

        Map from full resource types to the effective short name for the resource. This is used when otherwise resource named from different services would cause naming collisions. Example entry: \"datalabeling.googleapis.com/Dataset\": \"DataLabelingDataset\"

        :param renamed_resources: The renamed_resources of this DotnetSettings.
        :type renamed_resources: Dict[str, str]
        """

        self._renamed_resources = renamed_resources

    @property
    def renamed_services(self):
        """Gets the renamed_services of this DotnetSettings.

        Map from original service names to renamed versions. This is used when the default generated types would cause a naming conflict. (Neither name is fully-qualified.) Example: Subscriber to SubscriberServiceApi.

        :return: The renamed_services of this DotnetSettings.
        :rtype: Dict[str, str]
        """
        return self._renamed_services

    @renamed_services.setter
    def renamed_services(self, renamed_services):
        """Sets the renamed_services of this DotnetSettings.

        Map from original service names to renamed versions. This is used when the default generated types would cause a naming conflict. (Neither name is fully-qualified.) Example: Subscriber to SubscriberServiceApi.

        :param renamed_services: The renamed_services of this DotnetSettings.
        :type renamed_services: Dict[str, str]
        """

        self._renamed_services = renamed_services
