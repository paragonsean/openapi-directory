# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OAuthRequirements(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, canonical_scopes: str=None):
        """OAuthRequirements - a model defined in OpenAPI

        :param canonical_scopes: The canonical_scopes of this OAuthRequirements.
        """
        self.openapi_types = {
            'canonical_scopes': str
        }

        self.attribute_map = {
            'canonical_scopes': 'canonicalScopes'
        }

        self._canonical_scopes = canonical_scopes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OAuthRequirements':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OAuthRequirements of this OAuthRequirements.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def canonical_scopes(self):
        """Gets the canonical_scopes of this OAuthRequirements.

        The list of publicly documented OAuth scopes that are allowed access. An OAuth token containing any of these scopes will be accepted. Example: canonical_scopes: https://www.googleapis.com/auth/calendar, https://www.googleapis.com/auth/calendar.read

        :return: The canonical_scopes of this OAuthRequirements.
        :rtype: str
        """
        return self._canonical_scopes

    @canonical_scopes.setter
    def canonical_scopes(self, canonical_scopes):
        """Sets the canonical_scopes of this OAuthRequirements.

        The list of publicly documented OAuth scopes that are allowed access. An OAuth token containing any of these scopes will be accepted. Example: canonical_scopes: https://www.googleapis.com/auth/calendar, https://www.googleapis.com/auth/calendar.read

        :param canonical_scopes: The canonical_scopes of this OAuthRequirements.
        :type canonical_scopes: str
        """

        self._canonical_scopes = canonical_scopes
