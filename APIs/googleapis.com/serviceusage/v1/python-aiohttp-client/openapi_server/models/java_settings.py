# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.common_language_settings import CommonLanguageSettings
from openapi_server import util


class JavaSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, common: CommonLanguageSettings=None, library_package: str=None, service_class_names: Dict[str, str]=None):
        """JavaSettings - a model defined in OpenAPI

        :param common: The common of this JavaSettings.
        :param library_package: The library_package of this JavaSettings.
        :param service_class_names: The service_class_names of this JavaSettings.
        """
        self.openapi_types = {
            'common': CommonLanguageSettings,
            'library_package': str,
            'service_class_names': Dict[str, str]
        }

        self.attribute_map = {
            'common': 'common',
            'library_package': 'libraryPackage',
            'service_class_names': 'serviceClassNames'
        }

        self._common = common
        self._library_package = library_package
        self._service_class_names = service_class_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JavaSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JavaSettings of this JavaSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def common(self):
        """Gets the common of this JavaSettings.


        :return: The common of this JavaSettings.
        :rtype: CommonLanguageSettings
        """
        return self._common

    @common.setter
    def common(self, common):
        """Sets the common of this JavaSettings.


        :param common: The common of this JavaSettings.
        :type common: CommonLanguageSettings
        """

        self._common = common

    @property
    def library_package(self):
        """Gets the library_package of this JavaSettings.

        The package name to use in Java. Clobbers the java_package option set in the protobuf. This should be used **only** by APIs who have already set the language_settings.java.package_name\" field in gapic.yaml. API teams should use the protobuf java_package option where possible. Example of a YAML configuration:: publishing: java_settings: library_package: com.google.cloud.pubsub.v1

        :return: The library_package of this JavaSettings.
        :rtype: str
        """
        return self._library_package

    @library_package.setter
    def library_package(self, library_package):
        """Sets the library_package of this JavaSettings.

        The package name to use in Java. Clobbers the java_package option set in the protobuf. This should be used **only** by APIs who have already set the language_settings.java.package_name\" field in gapic.yaml. API teams should use the protobuf java_package option where possible. Example of a YAML configuration:: publishing: java_settings: library_package: com.google.cloud.pubsub.v1

        :param library_package: The library_package of this JavaSettings.
        :type library_package: str
        """

        self._library_package = library_package

    @property
    def service_class_names(self):
        """Gets the service_class_names of this JavaSettings.

        Configure the Java class name to use instead of the service's for its corresponding generated GAPIC client. Keys are fully-qualified service names as they appear in the protobuf (including the full the language_settings.java.interface_names\" field in gapic.yaml. API teams should otherwise use the service name as it appears in the protobuf. Example of a YAML configuration:: publishing: java_settings: service_class_names: - google.pubsub.v1.Publisher: TopicAdmin - google.pubsub.v1.Subscriber: SubscriptionAdmin

        :return: The service_class_names of this JavaSettings.
        :rtype: Dict[str, str]
        """
        return self._service_class_names

    @service_class_names.setter
    def service_class_names(self, service_class_names):
        """Sets the service_class_names of this JavaSettings.

        Configure the Java class name to use instead of the service's for its corresponding generated GAPIC client. Keys are fully-qualified service names as they appear in the protobuf (including the full the language_settings.java.interface_names\" field in gapic.yaml. API teams should otherwise use the service name as it appears in the protobuf. Example of a YAML configuration:: publishing: java_settings: service_class_names: - google.pubsub.v1.Publisher: TopicAdmin - google.pubsub.v1.Subscriber: SubscriptionAdmin

        :param service_class_names: The service_class_names of this JavaSettings.
        :type service_class_names: Dict[str, str]
        """

        self._service_class_names = service_class_names
