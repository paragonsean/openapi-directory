# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.client_library_settings import ClientLibrarySettings
from openapi_server.models.method_settings import MethodSettings
from openapi_server import util


class Publishing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_short_name: str=None, codeowner_github_teams: List[str]=None, doc_tag_prefix: str=None, documentation_uri: str=None, github_label: str=None, library_settings: List[ClientLibrarySettings]=None, method_settings: List[MethodSettings]=None, new_issue_uri: str=None, organization: str=None, proto_reference_documentation_uri: str=None, rest_reference_documentation_uri: str=None):
        """Publishing - a model defined in OpenAPI

        :param api_short_name: The api_short_name of this Publishing.
        :param codeowner_github_teams: The codeowner_github_teams of this Publishing.
        :param doc_tag_prefix: The doc_tag_prefix of this Publishing.
        :param documentation_uri: The documentation_uri of this Publishing.
        :param github_label: The github_label of this Publishing.
        :param library_settings: The library_settings of this Publishing.
        :param method_settings: The method_settings of this Publishing.
        :param new_issue_uri: The new_issue_uri of this Publishing.
        :param organization: The organization of this Publishing.
        :param proto_reference_documentation_uri: The proto_reference_documentation_uri of this Publishing.
        :param rest_reference_documentation_uri: The rest_reference_documentation_uri of this Publishing.
        """
        self.openapi_types = {
            'api_short_name': str,
            'codeowner_github_teams': List[str],
            'doc_tag_prefix': str,
            'documentation_uri': str,
            'github_label': str,
            'library_settings': List[ClientLibrarySettings],
            'method_settings': List[MethodSettings],
            'new_issue_uri': str,
            'organization': str,
            'proto_reference_documentation_uri': str,
            'rest_reference_documentation_uri': str
        }

        self.attribute_map = {
            'api_short_name': 'apiShortName',
            'codeowner_github_teams': 'codeownerGithubTeams',
            'doc_tag_prefix': 'docTagPrefix',
            'documentation_uri': 'documentationUri',
            'github_label': 'githubLabel',
            'library_settings': 'librarySettings',
            'method_settings': 'methodSettings',
            'new_issue_uri': 'newIssueUri',
            'organization': 'organization',
            'proto_reference_documentation_uri': 'protoReferenceDocumentationUri',
            'rest_reference_documentation_uri': 'restReferenceDocumentationUri'
        }

        self._api_short_name = api_short_name
        self._codeowner_github_teams = codeowner_github_teams
        self._doc_tag_prefix = doc_tag_prefix
        self._documentation_uri = documentation_uri
        self._github_label = github_label
        self._library_settings = library_settings
        self._method_settings = method_settings
        self._new_issue_uri = new_issue_uri
        self._organization = organization
        self._proto_reference_documentation_uri = proto_reference_documentation_uri
        self._rest_reference_documentation_uri = rest_reference_documentation_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Publishing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Publishing of this Publishing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_short_name(self):
        """Gets the api_short_name of this Publishing.

        Used as a tracking tag when collecting data about the APIs developer relations artifacts like docs, packages delivered to package managers, etc. Example: \"speech\".

        :return: The api_short_name of this Publishing.
        :rtype: str
        """
        return self._api_short_name

    @api_short_name.setter
    def api_short_name(self, api_short_name):
        """Sets the api_short_name of this Publishing.

        Used as a tracking tag when collecting data about the APIs developer relations artifacts like docs, packages delivered to package managers, etc. Example: \"speech\".

        :param api_short_name: The api_short_name of this Publishing.
        :type api_short_name: str
        """

        self._api_short_name = api_short_name

    @property
    def codeowner_github_teams(self):
        """Gets the codeowner_github_teams of this Publishing.

        GitHub teams to be added to CODEOWNERS in the directory in GitHub containing source code for the client libraries for this API.

        :return: The codeowner_github_teams of this Publishing.
        :rtype: List[str]
        """
        return self._codeowner_github_teams

    @codeowner_github_teams.setter
    def codeowner_github_teams(self, codeowner_github_teams):
        """Sets the codeowner_github_teams of this Publishing.

        GitHub teams to be added to CODEOWNERS in the directory in GitHub containing source code for the client libraries for this API.

        :param codeowner_github_teams: The codeowner_github_teams of this Publishing.
        :type codeowner_github_teams: List[str]
        """

        self._codeowner_github_teams = codeowner_github_teams

    @property
    def doc_tag_prefix(self):
        """Gets the doc_tag_prefix of this Publishing.

        A prefix used in sample code when demarking regions to be included in documentation.

        :return: The doc_tag_prefix of this Publishing.
        :rtype: str
        """
        return self._doc_tag_prefix

    @doc_tag_prefix.setter
    def doc_tag_prefix(self, doc_tag_prefix):
        """Sets the doc_tag_prefix of this Publishing.

        A prefix used in sample code when demarking regions to be included in documentation.

        :param doc_tag_prefix: The doc_tag_prefix of this Publishing.
        :type doc_tag_prefix: str
        """

        self._doc_tag_prefix = doc_tag_prefix

    @property
    def documentation_uri(self):
        """Gets the documentation_uri of this Publishing.

        Link to product home page. Example: https://cloud.google.com/asset-inventory/docs/overview

        :return: The documentation_uri of this Publishing.
        :rtype: str
        """
        return self._documentation_uri

    @documentation_uri.setter
    def documentation_uri(self, documentation_uri):
        """Sets the documentation_uri of this Publishing.

        Link to product home page. Example: https://cloud.google.com/asset-inventory/docs/overview

        :param documentation_uri: The documentation_uri of this Publishing.
        :type documentation_uri: str
        """

        self._documentation_uri = documentation_uri

    @property
    def github_label(self):
        """Gets the github_label of this Publishing.

        GitHub label to apply to issues and pull requests opened for this API.

        :return: The github_label of this Publishing.
        :rtype: str
        """
        return self._github_label

    @github_label.setter
    def github_label(self, github_label):
        """Sets the github_label of this Publishing.

        GitHub label to apply to issues and pull requests opened for this API.

        :param github_label: The github_label of this Publishing.
        :type github_label: str
        """

        self._github_label = github_label

    @property
    def library_settings(self):
        """Gets the library_settings of this Publishing.

        Client library settings. If the same version string appears multiple times in this list, then the last one wins. Settings from earlier settings with the same version string are discarded.

        :return: The library_settings of this Publishing.
        :rtype: List[ClientLibrarySettings]
        """
        return self._library_settings

    @library_settings.setter
    def library_settings(self, library_settings):
        """Sets the library_settings of this Publishing.

        Client library settings. If the same version string appears multiple times in this list, then the last one wins. Settings from earlier settings with the same version string are discarded.

        :param library_settings: The library_settings of this Publishing.
        :type library_settings: List[ClientLibrarySettings]
        """

        self._library_settings = library_settings

    @property
    def method_settings(self):
        """Gets the method_settings of this Publishing.

        A list of API method settings, e.g. the behavior for methods that use the long-running operation pattern.

        :return: The method_settings of this Publishing.
        :rtype: List[MethodSettings]
        """
        return self._method_settings

    @method_settings.setter
    def method_settings(self, method_settings):
        """Sets the method_settings of this Publishing.

        A list of API method settings, e.g. the behavior for methods that use the long-running operation pattern.

        :param method_settings: The method_settings of this Publishing.
        :type method_settings: List[MethodSettings]
        """

        self._method_settings = method_settings

    @property
    def new_issue_uri(self):
        """Gets the new_issue_uri of this Publishing.

        Link to a *public* URI where users can report issues. Example: https://issuetracker.google.com/issues/new?component=190865&template=1161103

        :return: The new_issue_uri of this Publishing.
        :rtype: str
        """
        return self._new_issue_uri

    @new_issue_uri.setter
    def new_issue_uri(self, new_issue_uri):
        """Sets the new_issue_uri of this Publishing.

        Link to a *public* URI where users can report issues. Example: https://issuetracker.google.com/issues/new?component=190865&template=1161103

        :param new_issue_uri: The new_issue_uri of this Publishing.
        :type new_issue_uri: str
        """

        self._new_issue_uri = new_issue_uri

    @property
    def organization(self):
        """Gets the organization of this Publishing.

        For whom the client library is being published.

        :return: The organization of this Publishing.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Publishing.

        For whom the client library is being published.

        :param organization: The organization of this Publishing.
        :type organization: str
        """
        allowed_values = ["CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED", "CLOUD", "ADS", "PHOTOS", "STREET_VIEW", "SHOPPING", "GEO", "GENERATIVE_AI"]  # noqa: E501
        if organization not in allowed_values:
            raise ValueError(
                "Invalid value for `organization` ({0}), must be one of {1}"
                .format(organization, allowed_values)
            )

        self._organization = organization

    @property
    def proto_reference_documentation_uri(self):
        """Gets the proto_reference_documentation_uri of this Publishing.

        Optional link to proto reference documentation. Example: https://cloud.google.com/pubsub/lite/docs/reference/rpc

        :return: The proto_reference_documentation_uri of this Publishing.
        :rtype: str
        """
        return self._proto_reference_documentation_uri

    @proto_reference_documentation_uri.setter
    def proto_reference_documentation_uri(self, proto_reference_documentation_uri):
        """Sets the proto_reference_documentation_uri of this Publishing.

        Optional link to proto reference documentation. Example: https://cloud.google.com/pubsub/lite/docs/reference/rpc

        :param proto_reference_documentation_uri: The proto_reference_documentation_uri of this Publishing.
        :type proto_reference_documentation_uri: str
        """

        self._proto_reference_documentation_uri = proto_reference_documentation_uri

    @property
    def rest_reference_documentation_uri(self):
        """Gets the rest_reference_documentation_uri of this Publishing.

        Optional link to REST reference documentation. Example: https://cloud.google.com/pubsub/lite/docs/reference/rest

        :return: The rest_reference_documentation_uri of this Publishing.
        :rtype: str
        """
        return self._rest_reference_documentation_uri

    @rest_reference_documentation_uri.setter
    def rest_reference_documentation_uri(self, rest_reference_documentation_uri):
        """Sets the rest_reference_documentation_uri of this Publishing.

        Optional link to REST reference documentation. Example: https://cloud.google.com/pubsub/lite/docs/reference/rest

        :param rest_reference_documentation_uri: The rest_reference_documentation_uri of this Publishing.
        :type rest_reference_documentation_uri: str
        """

        self._rest_reference_documentation_uri = rest_reference_documentation_uri
