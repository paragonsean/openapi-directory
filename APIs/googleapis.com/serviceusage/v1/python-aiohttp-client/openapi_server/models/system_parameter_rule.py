# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.system_parameter import SystemParameter
from openapi_server import util


class SystemParameterRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameters: List[SystemParameter]=None, selector: str=None):
        """SystemParameterRule - a model defined in OpenAPI

        :param parameters: The parameters of this SystemParameterRule.
        :param selector: The selector of this SystemParameterRule.
        """
        self.openapi_types = {
            'parameters': List[SystemParameter],
            'selector': str
        }

        self.attribute_map = {
            'parameters': 'parameters',
            'selector': 'selector'
        }

        self._parameters = parameters
        self._selector = selector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SystemParameterRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SystemParameterRule of this SystemParameterRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameters(self):
        """Gets the parameters of this SystemParameterRule.

        Define parameters. Multiple names may be defined for a parameter. For a given method call, only one of them should be used. If multiple names are used the behavior is implementation-dependent. If none of the specified names are present the behavior is parameter-dependent.

        :return: The parameters of this SystemParameterRule.
        :rtype: List[SystemParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this SystemParameterRule.

        Define parameters. Multiple names may be defined for a parameter. For a given method call, only one of them should be used. If multiple names are used the behavior is implementation-dependent. If none of the specified names are present the behavior is parameter-dependent.

        :param parameters: The parameters of this SystemParameterRule.
        :type parameters: List[SystemParameter]
        """

        self._parameters = parameters

    @property
    def selector(self):
        """Gets the selector of this SystemParameterRule.

        Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details.

        :return: The selector of this SystemParameterRule.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this SystemParameterRule.

        Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details.

        :param selector: The selector of this SystemParameterRule.
        :type selector: str
        """

        self._selector = selector
