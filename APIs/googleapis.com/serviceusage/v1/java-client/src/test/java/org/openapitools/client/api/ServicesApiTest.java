/*
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchEnableServicesRequest;
import org.openapitools.client.model.BatchGetServicesResponse;
import org.openapitools.client.model.DisableServiceRequest;
import org.openapitools.client.model.GoogleApiServiceusageV1Service;
import org.openapitools.client.model.ListServicesResponse;
import org.openapitools.client.model.Operation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServicesApi
 */
@Disabled
public class ServicesApiTest {

    private final ServicesApi api = new ServicesApi();

    /**
     * Enable multiple services on a project. The operation is atomic: if enabling any service fails, then the entire batch fails, and no state changes occur. To enable a single service, use the &#x60;EnableService&#x60; method instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceusageServicesBatchEnableTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchEnableServicesRequest batchEnableServicesRequest = null;
        Operation response = api.serviceusageServicesBatchEnable(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchEnableServicesRequest);
        // TODO: test validations
    }

    /**
     * Returns the service configurations and enabled states for a given list of services.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceusageServicesBatchGetTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> names = null;
        BatchGetServicesResponse response = api.serviceusageServicesBatchGet(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, names);
        // TODO: test validations
    }

    /**
     * Disable a service so that it can no longer be used with a project. This prevents unintended usage that may cause unexpected billing charges or security leaks. It is not valid to call the disable method on a service that is not currently enabled. Callers will receive a &#x60;FAILED_PRECONDITION&#x60; status if the target service is not currently enabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceusageServicesDisableTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DisableServiceRequest disableServiceRequest = null;
        Operation response = api.serviceusageServicesDisable(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, disableServiceRequest);
        // TODO: test validations
    }

    /**
     * Enable a service so that it can be used with a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceusageServicesEnableTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Operation response = api.serviceusageServicesEnable(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Returns the service configuration and enabled state for a given service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceusageServicesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleApiServiceusageV1Service response = api.serviceusageServicesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * List all services available to the specified project, and the current state of those services with respect to the project. The list includes all public services, all services for which the calling user has the &#x60;servicemanagement.services.bind&#x60; permission, and all services that have already been enabled on the project. The list can be filtered to only include services in a specific state, for example to only include services enabled on the project. WARNING: If you need to query enabled services frequently or across an organization, you should use [Cloud Asset Inventory API](https://cloud.google.com/asset-inventory/docs/apis), which provides higher throughput and richer filtering capability.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serviceusageServicesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListServicesResponse response = api.serviceusageServicesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

}
