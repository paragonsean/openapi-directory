/*
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for the &#x60;DisableService&#x60; method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:50.247624-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DisableServiceRequest {
  /**
   * Defines the behavior for checking service usage when disabling a service.
   */
  @JsonAdapter(CheckIfServiceHasUsageEnum.Adapter.class)
  public enum CheckIfServiceHasUsageEnum {
    CHECK_IF_SERVICE_HAS_USAGE_UNSPECIFIED("CHECK_IF_SERVICE_HAS_USAGE_UNSPECIFIED"),
    
    SKIP("SKIP"),
    
    CHECK("CHECK");

    private String value;

    CheckIfServiceHasUsageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CheckIfServiceHasUsageEnum fromValue(String value) {
      for (CheckIfServiceHasUsageEnum b : CheckIfServiceHasUsageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CheckIfServiceHasUsageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CheckIfServiceHasUsageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CheckIfServiceHasUsageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CheckIfServiceHasUsageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CheckIfServiceHasUsageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHECK_IF_SERVICE_HAS_USAGE = "checkIfServiceHasUsage";
  @SerializedName(SERIALIZED_NAME_CHECK_IF_SERVICE_HAS_USAGE)
  private CheckIfServiceHasUsageEnum checkIfServiceHasUsage;

  public static final String SERIALIZED_NAME_DISABLE_DEPENDENT_SERVICES = "disableDependentServices";
  @SerializedName(SERIALIZED_NAME_DISABLE_DEPENDENT_SERVICES)
  private Boolean disableDependentServices;

  public DisableServiceRequest() {
  }

  public DisableServiceRequest checkIfServiceHasUsage(CheckIfServiceHasUsageEnum checkIfServiceHasUsage) {
    this.checkIfServiceHasUsage = checkIfServiceHasUsage;
    return this;
  }

  /**
   * Defines the behavior for checking service usage when disabling a service.
   * @return checkIfServiceHasUsage
   */
  @javax.annotation.Nullable
  public CheckIfServiceHasUsageEnum getCheckIfServiceHasUsage() {
    return checkIfServiceHasUsage;
  }

  public void setCheckIfServiceHasUsage(CheckIfServiceHasUsageEnum checkIfServiceHasUsage) {
    this.checkIfServiceHasUsage = checkIfServiceHasUsage;
  }


  public DisableServiceRequest disableDependentServices(Boolean disableDependentServices) {
    this.disableDependentServices = disableDependentServices;
    return this;
  }

  /**
   * Indicates if services that are enabled and which depend on this service should also be disabled. If not set, an error will be generated if any enabled services depend on the service to be disabled. When set, the service, and any enabled services that depend on it, will be disabled together.
   * @return disableDependentServices
   */
  @javax.annotation.Nullable
  public Boolean getDisableDependentServices() {
    return disableDependentServices;
  }

  public void setDisableDependentServices(Boolean disableDependentServices) {
    this.disableDependentServices = disableDependentServices;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DisableServiceRequest disableServiceRequest = (DisableServiceRequest) o;
    return Objects.equals(this.checkIfServiceHasUsage, disableServiceRequest.checkIfServiceHasUsage) &&
        Objects.equals(this.disableDependentServices, disableServiceRequest.disableDependentServices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkIfServiceHasUsage, disableDependentServices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DisableServiceRequest {\n");
    sb.append("    checkIfServiceHasUsage: ").append(toIndentedString(checkIfServiceHasUsage)).append("\n");
    sb.append("    disableDependentServices: ").append(toIndentedString(disableDependentServices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checkIfServiceHasUsage");
    openapiFields.add("disableDependentServices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DisableServiceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DisableServiceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DisableServiceRequest is not found in the empty JSON string", DisableServiceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DisableServiceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DisableServiceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("checkIfServiceHasUsage") != null && !jsonObj.get("checkIfServiceHasUsage").isJsonNull()) && !jsonObj.get("checkIfServiceHasUsage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkIfServiceHasUsage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkIfServiceHasUsage").toString()));
      }
      // validate the optional field `checkIfServiceHasUsage`
      if (jsonObj.get("checkIfServiceHasUsage") != null && !jsonObj.get("checkIfServiceHasUsage").isJsonNull()) {
        CheckIfServiceHasUsageEnum.validateJsonElement(jsonObj.get("checkIfServiceHasUsage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DisableServiceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DisableServiceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DisableServiceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DisableServiceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DisableServiceRequest>() {
           @Override
           public void write(JsonWriter out, DisableServiceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DisableServiceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DisableServiceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DisableServiceRequest
   * @throws IOException if the JSON string is invalid with respect to DisableServiceRequest
   */
  public static DisableServiceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DisableServiceRequest.class);
  }

  /**
   * Convert an instance of DisableServiceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

