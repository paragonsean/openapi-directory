/*
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LongRunning;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the generator configuration for a method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:50.247624-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MethodSettings {
  public static final String SERIALIZED_NAME_AUTO_POPULATED_FIELDS = "autoPopulatedFields";
  @SerializedName(SERIALIZED_NAME_AUTO_POPULATED_FIELDS)
  private List<String> autoPopulatedFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_LONG_RUNNING = "longRunning";
  @SerializedName(SERIALIZED_NAME_LONG_RUNNING)
  private LongRunning longRunning;

  public static final String SERIALIZED_NAME_SELECTOR = "selector";
  @SerializedName(SERIALIZED_NAME_SELECTOR)
  private String selector;

  public MethodSettings() {
  }

  public MethodSettings autoPopulatedFields(List<String> autoPopulatedFields) {
    this.autoPopulatedFields = autoPopulatedFields;
    return this;
  }

  public MethodSettings addAutoPopulatedFieldsItem(String autoPopulatedFieldsItem) {
    if (this.autoPopulatedFields == null) {
      this.autoPopulatedFields = new ArrayList<>();
    }
    this.autoPopulatedFields.add(autoPopulatedFieldsItem);
    return this;
  }

  /**
   * List of top-level fields of the request message, that should be automatically populated by the client libraries based on their (google.api.field_info).format. Currently supported format: UUID4. Example of a YAML configuration: publishing: method_settings: - selector: google.example.v1.ExampleService.CreateExample auto_populated_fields: - request_id
   * @return autoPopulatedFields
   */
  @javax.annotation.Nullable
  public List<String> getAutoPopulatedFields() {
    return autoPopulatedFields;
  }

  public void setAutoPopulatedFields(List<String> autoPopulatedFields) {
    this.autoPopulatedFields = autoPopulatedFields;
  }


  public MethodSettings longRunning(LongRunning longRunning) {
    this.longRunning = longRunning;
    return this;
  }

  /**
   * Get longRunning
   * @return longRunning
   */
  @javax.annotation.Nullable
  public LongRunning getLongRunning() {
    return longRunning;
  }

  public void setLongRunning(LongRunning longRunning) {
    this.longRunning = longRunning;
  }


  public MethodSettings selector(String selector) {
    this.selector = selector;
    return this;
  }

  /**
   * The fully qualified name of the method, for which the options below apply. This is used to find the method to apply the options.
   * @return selector
   */
  @javax.annotation.Nullable
  public String getSelector() {
    return selector;
  }

  public void setSelector(String selector) {
    this.selector = selector;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MethodSettings methodSettings = (MethodSettings) o;
    return Objects.equals(this.autoPopulatedFields, methodSettings.autoPopulatedFields) &&
        Objects.equals(this.longRunning, methodSettings.longRunning) &&
        Objects.equals(this.selector, methodSettings.selector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoPopulatedFields, longRunning, selector);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MethodSettings {\n");
    sb.append("    autoPopulatedFields: ").append(toIndentedString(autoPopulatedFields)).append("\n");
    sb.append("    longRunning: ").append(toIndentedString(longRunning)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoPopulatedFields");
    openapiFields.add("longRunning");
    openapiFields.add("selector");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MethodSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MethodSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MethodSettings is not found in the empty JSON string", MethodSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MethodSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MethodSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("autoPopulatedFields") != null && !jsonObj.get("autoPopulatedFields").isJsonNull() && !jsonObj.get("autoPopulatedFields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoPopulatedFields` to be an array in the JSON string but got `%s`", jsonObj.get("autoPopulatedFields").toString()));
      }
      // validate the optional field `longRunning`
      if (jsonObj.get("longRunning") != null && !jsonObj.get("longRunning").isJsonNull()) {
        LongRunning.validateJsonElement(jsonObj.get("longRunning"));
      }
      if ((jsonObj.get("selector") != null && !jsonObj.get("selector").isJsonNull()) && !jsonObj.get("selector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selector").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MethodSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MethodSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MethodSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MethodSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<MethodSettings>() {
           @Override
           public void write(JsonWriter out, MethodSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MethodSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MethodSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MethodSettings
   * @throws IOException if the JSON string is invalid with respect to MethodSettings
   */
  public static MethodSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MethodSettings.class);
  }

  /**
   * Convert an instance of MethodSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

