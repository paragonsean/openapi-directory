/*
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BillingDestination;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Billing related configuration of the service. The following example shows how to configure monitored resources and metrics for billing, &#x60;consumer_destinations&#x60; is the only supported destination and the monitored resources need at least one label key &#x60;cloud.googleapis.com/location&#x60; to indicate the location of the billing usage, using different monitored resources between monitoring and billing is recommended so they can be evolved independently: monitored_resources: - type: library.googleapis.com/billing_branch labels: - key: cloud.googleapis.com/location description: | Predefined label to support billing location restriction. - key: city description: | Custom label to define the city where the library branch is located in. - key: name description: Custom label to define the name of the library branch. metrics: - name: library.googleapis.com/book/borrowed_count metric_kind: DELTA value_type: INT64 unit: \&quot;1\&quot; billing: consumer_destinations: - monitored_resource: library.googleapis.com/billing_branch metrics: - library.googleapis.com/book/borrowed_count
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:50.247624-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Billing {
  public static final String SERIALIZED_NAME_CONSUMER_DESTINATIONS = "consumerDestinations";
  @SerializedName(SERIALIZED_NAME_CONSUMER_DESTINATIONS)
  private List<BillingDestination> consumerDestinations = new ArrayList<>();

  public Billing() {
  }

  public Billing consumerDestinations(List<BillingDestination> consumerDestinations) {
    this.consumerDestinations = consumerDestinations;
    return this;
  }

  public Billing addConsumerDestinationsItem(BillingDestination consumerDestinationsItem) {
    if (this.consumerDestinations == null) {
      this.consumerDestinations = new ArrayList<>();
    }
    this.consumerDestinations.add(consumerDestinationsItem);
    return this;
  }

  /**
   * Billing configurations for sending metrics to the consumer project. There can be multiple consumer destinations per service, each one must have a different monitored resource type. A metric can be used in at most one consumer destination.
   * @return consumerDestinations
   */
  @javax.annotation.Nullable
  public List<BillingDestination> getConsumerDestinations() {
    return consumerDestinations;
  }

  public void setConsumerDestinations(List<BillingDestination> consumerDestinations) {
    this.consumerDestinations = consumerDestinations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Billing billing = (Billing) o;
    return Objects.equals(this.consumerDestinations, billing.consumerDestinations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumerDestinations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Billing {\n");
    sb.append("    consumerDestinations: ").append(toIndentedString(consumerDestinations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consumerDestinations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Billing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Billing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Billing is not found in the empty JSON string", Billing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Billing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Billing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("consumerDestinations") != null && !jsonObj.get("consumerDestinations").isJsonNull()) {
        JsonArray jsonArrayconsumerDestinations = jsonObj.getAsJsonArray("consumerDestinations");
        if (jsonArrayconsumerDestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("consumerDestinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `consumerDestinations` to be an array in the JSON string but got `%s`", jsonObj.get("consumerDestinations").toString()));
          }

          // validate the optional field `consumerDestinations` (array)
          for (int i = 0; i < jsonArrayconsumerDestinations.size(); i++) {
            BillingDestination.validateJsonElement(jsonArrayconsumerDestinations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Billing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Billing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Billing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Billing.class));

       return (TypeAdapter<T>) new TypeAdapter<Billing>() {
           @Override
           public void write(JsonWriter out, Billing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Billing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Billing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Billing
   * @throws IOException if the JSON string is invalid with respect to Billing
   */
  public static Billing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Billing.class);
  }

  /**
   * Convert an instance of Billing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

