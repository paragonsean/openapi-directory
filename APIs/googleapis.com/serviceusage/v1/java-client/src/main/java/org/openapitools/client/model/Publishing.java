/*
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClientLibrarySettings;
import org.openapitools.client.model.MethodSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This message configures the settings for publishing [Google Cloud Client libraries](https://cloud.google.com/apis/docs/cloud-client-libraries) generated from the service config.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:50.247624-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Publishing {
  public static final String SERIALIZED_NAME_API_SHORT_NAME = "apiShortName";
  @SerializedName(SERIALIZED_NAME_API_SHORT_NAME)
  private String apiShortName;

  public static final String SERIALIZED_NAME_CODEOWNER_GITHUB_TEAMS = "codeownerGithubTeams";
  @SerializedName(SERIALIZED_NAME_CODEOWNER_GITHUB_TEAMS)
  private List<String> codeownerGithubTeams = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOC_TAG_PREFIX = "docTagPrefix";
  @SerializedName(SERIALIZED_NAME_DOC_TAG_PREFIX)
  private String docTagPrefix;

  public static final String SERIALIZED_NAME_DOCUMENTATION_URI = "documentationUri";
  @SerializedName(SERIALIZED_NAME_DOCUMENTATION_URI)
  private String documentationUri;

  public static final String SERIALIZED_NAME_GITHUB_LABEL = "githubLabel";
  @SerializedName(SERIALIZED_NAME_GITHUB_LABEL)
  private String githubLabel;

  public static final String SERIALIZED_NAME_LIBRARY_SETTINGS = "librarySettings";
  @SerializedName(SERIALIZED_NAME_LIBRARY_SETTINGS)
  private List<ClientLibrarySettings> librarySettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_METHOD_SETTINGS = "methodSettings";
  @SerializedName(SERIALIZED_NAME_METHOD_SETTINGS)
  private List<MethodSettings> methodSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEW_ISSUE_URI = "newIssueUri";
  @SerializedName(SERIALIZED_NAME_NEW_ISSUE_URI)
  private String newIssueUri;

  /**
   * For whom the client library is being published.
   */
  @JsonAdapter(OrganizationEnum.Adapter.class)
  public enum OrganizationEnum {
    CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED("CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED"),
    
    CLOUD("CLOUD"),
    
    ADS("ADS"),
    
    PHOTOS("PHOTOS"),
    
    STREET_VIEW("STREET_VIEW"),
    
    SHOPPING("SHOPPING"),
    
    GEO("GEO"),
    
    GENERATIVE_AI("GENERATIVE_AI");

    private String value;

    OrganizationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrganizationEnum fromValue(String value) {
      for (OrganizationEnum b : OrganizationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrganizationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrganizationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrganizationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrganizationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrganizationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private OrganizationEnum organization;

  public static final String SERIALIZED_NAME_PROTO_REFERENCE_DOCUMENTATION_URI = "protoReferenceDocumentationUri";
  @SerializedName(SERIALIZED_NAME_PROTO_REFERENCE_DOCUMENTATION_URI)
  private String protoReferenceDocumentationUri;

  public static final String SERIALIZED_NAME_REST_REFERENCE_DOCUMENTATION_URI = "restReferenceDocumentationUri";
  @SerializedName(SERIALIZED_NAME_REST_REFERENCE_DOCUMENTATION_URI)
  private String restReferenceDocumentationUri;

  public Publishing() {
  }

  public Publishing apiShortName(String apiShortName) {
    this.apiShortName = apiShortName;
    return this;
  }

  /**
   * Used as a tracking tag when collecting data about the APIs developer relations artifacts like docs, packages delivered to package managers, etc. Example: \&quot;speech\&quot;.
   * @return apiShortName
   */
  @javax.annotation.Nullable
  public String getApiShortName() {
    return apiShortName;
  }

  public void setApiShortName(String apiShortName) {
    this.apiShortName = apiShortName;
  }


  public Publishing codeownerGithubTeams(List<String> codeownerGithubTeams) {
    this.codeownerGithubTeams = codeownerGithubTeams;
    return this;
  }

  public Publishing addCodeownerGithubTeamsItem(String codeownerGithubTeamsItem) {
    if (this.codeownerGithubTeams == null) {
      this.codeownerGithubTeams = new ArrayList<>();
    }
    this.codeownerGithubTeams.add(codeownerGithubTeamsItem);
    return this;
  }

  /**
   * GitHub teams to be added to CODEOWNERS in the directory in GitHub containing source code for the client libraries for this API.
   * @return codeownerGithubTeams
   */
  @javax.annotation.Nullable
  public List<String> getCodeownerGithubTeams() {
    return codeownerGithubTeams;
  }

  public void setCodeownerGithubTeams(List<String> codeownerGithubTeams) {
    this.codeownerGithubTeams = codeownerGithubTeams;
  }


  public Publishing docTagPrefix(String docTagPrefix) {
    this.docTagPrefix = docTagPrefix;
    return this;
  }

  /**
   * A prefix used in sample code when demarking regions to be included in documentation.
   * @return docTagPrefix
   */
  @javax.annotation.Nullable
  public String getDocTagPrefix() {
    return docTagPrefix;
  }

  public void setDocTagPrefix(String docTagPrefix) {
    this.docTagPrefix = docTagPrefix;
  }


  public Publishing documentationUri(String documentationUri) {
    this.documentationUri = documentationUri;
    return this;
  }

  /**
   * Link to product home page. Example: https://cloud.google.com/asset-inventory/docs/overview
   * @return documentationUri
   */
  @javax.annotation.Nullable
  public String getDocumentationUri() {
    return documentationUri;
  }

  public void setDocumentationUri(String documentationUri) {
    this.documentationUri = documentationUri;
  }


  public Publishing githubLabel(String githubLabel) {
    this.githubLabel = githubLabel;
    return this;
  }

  /**
   * GitHub label to apply to issues and pull requests opened for this API.
   * @return githubLabel
   */
  @javax.annotation.Nullable
  public String getGithubLabel() {
    return githubLabel;
  }

  public void setGithubLabel(String githubLabel) {
    this.githubLabel = githubLabel;
  }


  public Publishing librarySettings(List<ClientLibrarySettings> librarySettings) {
    this.librarySettings = librarySettings;
    return this;
  }

  public Publishing addLibrarySettingsItem(ClientLibrarySettings librarySettingsItem) {
    if (this.librarySettings == null) {
      this.librarySettings = new ArrayList<>();
    }
    this.librarySettings.add(librarySettingsItem);
    return this;
  }

  /**
   * Client library settings. If the same version string appears multiple times in this list, then the last one wins. Settings from earlier settings with the same version string are discarded.
   * @return librarySettings
   */
  @javax.annotation.Nullable
  public List<ClientLibrarySettings> getLibrarySettings() {
    return librarySettings;
  }

  public void setLibrarySettings(List<ClientLibrarySettings> librarySettings) {
    this.librarySettings = librarySettings;
  }


  public Publishing methodSettings(List<MethodSettings> methodSettings) {
    this.methodSettings = methodSettings;
    return this;
  }

  public Publishing addMethodSettingsItem(MethodSettings methodSettingsItem) {
    if (this.methodSettings == null) {
      this.methodSettings = new ArrayList<>();
    }
    this.methodSettings.add(methodSettingsItem);
    return this;
  }

  /**
   * A list of API method settings, e.g. the behavior for methods that use the long-running operation pattern.
   * @return methodSettings
   */
  @javax.annotation.Nullable
  public List<MethodSettings> getMethodSettings() {
    return methodSettings;
  }

  public void setMethodSettings(List<MethodSettings> methodSettings) {
    this.methodSettings = methodSettings;
  }


  public Publishing newIssueUri(String newIssueUri) {
    this.newIssueUri = newIssueUri;
    return this;
  }

  /**
   * Link to a *public* URI where users can report issues. Example: https://issuetracker.google.com/issues/new?component&#x3D;190865&amp;template&#x3D;1161103
   * @return newIssueUri
   */
  @javax.annotation.Nullable
  public String getNewIssueUri() {
    return newIssueUri;
  }

  public void setNewIssueUri(String newIssueUri) {
    this.newIssueUri = newIssueUri;
  }


  public Publishing organization(OrganizationEnum organization) {
    this.organization = organization;
    return this;
  }

  /**
   * For whom the client library is being published.
   * @return organization
   */
  @javax.annotation.Nullable
  public OrganizationEnum getOrganization() {
    return organization;
  }

  public void setOrganization(OrganizationEnum organization) {
    this.organization = organization;
  }


  public Publishing protoReferenceDocumentationUri(String protoReferenceDocumentationUri) {
    this.protoReferenceDocumentationUri = protoReferenceDocumentationUri;
    return this;
  }

  /**
   * Optional link to proto reference documentation. Example: https://cloud.google.com/pubsub/lite/docs/reference/rpc
   * @return protoReferenceDocumentationUri
   */
  @javax.annotation.Nullable
  public String getProtoReferenceDocumentationUri() {
    return protoReferenceDocumentationUri;
  }

  public void setProtoReferenceDocumentationUri(String protoReferenceDocumentationUri) {
    this.protoReferenceDocumentationUri = protoReferenceDocumentationUri;
  }


  public Publishing restReferenceDocumentationUri(String restReferenceDocumentationUri) {
    this.restReferenceDocumentationUri = restReferenceDocumentationUri;
    return this;
  }

  /**
   * Optional link to REST reference documentation. Example: https://cloud.google.com/pubsub/lite/docs/reference/rest
   * @return restReferenceDocumentationUri
   */
  @javax.annotation.Nullable
  public String getRestReferenceDocumentationUri() {
    return restReferenceDocumentationUri;
  }

  public void setRestReferenceDocumentationUri(String restReferenceDocumentationUri) {
    this.restReferenceDocumentationUri = restReferenceDocumentationUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Publishing publishing = (Publishing) o;
    return Objects.equals(this.apiShortName, publishing.apiShortName) &&
        Objects.equals(this.codeownerGithubTeams, publishing.codeownerGithubTeams) &&
        Objects.equals(this.docTagPrefix, publishing.docTagPrefix) &&
        Objects.equals(this.documentationUri, publishing.documentationUri) &&
        Objects.equals(this.githubLabel, publishing.githubLabel) &&
        Objects.equals(this.librarySettings, publishing.librarySettings) &&
        Objects.equals(this.methodSettings, publishing.methodSettings) &&
        Objects.equals(this.newIssueUri, publishing.newIssueUri) &&
        Objects.equals(this.organization, publishing.organization) &&
        Objects.equals(this.protoReferenceDocumentationUri, publishing.protoReferenceDocumentationUri) &&
        Objects.equals(this.restReferenceDocumentationUri, publishing.restReferenceDocumentationUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiShortName, codeownerGithubTeams, docTagPrefix, documentationUri, githubLabel, librarySettings, methodSettings, newIssueUri, organization, protoReferenceDocumentationUri, restReferenceDocumentationUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Publishing {\n");
    sb.append("    apiShortName: ").append(toIndentedString(apiShortName)).append("\n");
    sb.append("    codeownerGithubTeams: ").append(toIndentedString(codeownerGithubTeams)).append("\n");
    sb.append("    docTagPrefix: ").append(toIndentedString(docTagPrefix)).append("\n");
    sb.append("    documentationUri: ").append(toIndentedString(documentationUri)).append("\n");
    sb.append("    githubLabel: ").append(toIndentedString(githubLabel)).append("\n");
    sb.append("    librarySettings: ").append(toIndentedString(librarySettings)).append("\n");
    sb.append("    methodSettings: ").append(toIndentedString(methodSettings)).append("\n");
    sb.append("    newIssueUri: ").append(toIndentedString(newIssueUri)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    protoReferenceDocumentationUri: ").append(toIndentedString(protoReferenceDocumentationUri)).append("\n");
    sb.append("    restReferenceDocumentationUri: ").append(toIndentedString(restReferenceDocumentationUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiShortName");
    openapiFields.add("codeownerGithubTeams");
    openapiFields.add("docTagPrefix");
    openapiFields.add("documentationUri");
    openapiFields.add("githubLabel");
    openapiFields.add("librarySettings");
    openapiFields.add("methodSettings");
    openapiFields.add("newIssueUri");
    openapiFields.add("organization");
    openapiFields.add("protoReferenceDocumentationUri");
    openapiFields.add("restReferenceDocumentationUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Publishing
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Publishing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Publishing is not found in the empty JSON string", Publishing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Publishing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Publishing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiShortName") != null && !jsonObj.get("apiShortName").isJsonNull()) && !jsonObj.get("apiShortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiShortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiShortName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("codeownerGithubTeams") != null && !jsonObj.get("codeownerGithubTeams").isJsonNull() && !jsonObj.get("codeownerGithubTeams").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `codeownerGithubTeams` to be an array in the JSON string but got `%s`", jsonObj.get("codeownerGithubTeams").toString()));
      }
      if ((jsonObj.get("docTagPrefix") != null && !jsonObj.get("docTagPrefix").isJsonNull()) && !jsonObj.get("docTagPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docTagPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docTagPrefix").toString()));
      }
      if ((jsonObj.get("documentationUri") != null && !jsonObj.get("documentationUri").isJsonNull()) && !jsonObj.get("documentationUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentationUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentationUri").toString()));
      }
      if ((jsonObj.get("githubLabel") != null && !jsonObj.get("githubLabel").isJsonNull()) && !jsonObj.get("githubLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `githubLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("githubLabel").toString()));
      }
      if (jsonObj.get("librarySettings") != null && !jsonObj.get("librarySettings").isJsonNull()) {
        JsonArray jsonArraylibrarySettings = jsonObj.getAsJsonArray("librarySettings");
        if (jsonArraylibrarySettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("librarySettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `librarySettings` to be an array in the JSON string but got `%s`", jsonObj.get("librarySettings").toString()));
          }

          // validate the optional field `librarySettings` (array)
          for (int i = 0; i < jsonArraylibrarySettings.size(); i++) {
            ClientLibrarySettings.validateJsonElement(jsonArraylibrarySettings.get(i));
          };
        }
      }
      if (jsonObj.get("methodSettings") != null && !jsonObj.get("methodSettings").isJsonNull()) {
        JsonArray jsonArraymethodSettings = jsonObj.getAsJsonArray("methodSettings");
        if (jsonArraymethodSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("methodSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `methodSettings` to be an array in the JSON string but got `%s`", jsonObj.get("methodSettings").toString()));
          }

          // validate the optional field `methodSettings` (array)
          for (int i = 0; i < jsonArraymethodSettings.size(); i++) {
            MethodSettings.validateJsonElement(jsonArraymethodSettings.get(i));
          };
        }
      }
      if ((jsonObj.get("newIssueUri") != null && !jsonObj.get("newIssueUri").isJsonNull()) && !jsonObj.get("newIssueUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newIssueUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newIssueUri").toString()));
      }
      if ((jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) && !jsonObj.get("organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization").toString()));
      }
      // validate the optional field `organization`
      if (jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) {
        OrganizationEnum.validateJsonElement(jsonObj.get("organization"));
      }
      if ((jsonObj.get("protoReferenceDocumentationUri") != null && !jsonObj.get("protoReferenceDocumentationUri").isJsonNull()) && !jsonObj.get("protoReferenceDocumentationUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protoReferenceDocumentationUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protoReferenceDocumentationUri").toString()));
      }
      if ((jsonObj.get("restReferenceDocumentationUri") != null && !jsonObj.get("restReferenceDocumentationUri").isJsonNull()) && !jsonObj.get("restReferenceDocumentationUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `restReferenceDocumentationUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("restReferenceDocumentationUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Publishing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Publishing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Publishing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Publishing.class));

       return (TypeAdapter<T>) new TypeAdapter<Publishing>() {
           @Override
           public void write(JsonWriter out, Publishing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Publishing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Publishing given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Publishing
   * @throws IOException if the JSON string is invalid with respect to Publishing
   */
  public static Publishing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Publishing.class);
  }

  /**
   * Convert an instance of Publishing to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

