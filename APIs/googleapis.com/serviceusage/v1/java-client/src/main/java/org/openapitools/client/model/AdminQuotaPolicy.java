/*
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Quota policy created by quota administrator.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:50.247624-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdminQuotaPolicy {
  public static final String SERIALIZED_NAME_CONTAINER = "container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private String container;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private Map<String, String> dimensions = new HashMap<>();

  public static final String SERIALIZED_NAME_METRIC = "metric";
  @SerializedName(SERIALIZED_NAME_METRIC)
  private String metric;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POLICY_VALUE = "policyValue";
  @SerializedName(SERIALIZED_NAME_POLICY_VALUE)
  private String policyValue;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public AdminQuotaPolicy() {
  }

  public AdminQuotaPolicy container(String container) {
    this.container = container;
    return this;
  }

  /**
   * The cloud resource container at which the quota policy is created. The format is &#x60;{container_type}/{container_number}&#x60;
   * @return container
   */
  @javax.annotation.Nullable
  public String getContainer() {
    return container;
  }

  public void setContainer(String container) {
    this.container = container;
  }


  public AdminQuotaPolicy dimensions(Map<String, String> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public AdminQuotaPolicy putDimensionsItem(String key, String dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new HashMap<>();
    }
    this.dimensions.put(key, dimensionsItem);
    return this;
  }

  /**
   *  If this map is nonempty, then this policy applies only to specific values for dimensions defined in the limit unit. For example, a policy on a limit with the unit &#x60;1/{project}/{region}&#x60; could contain an entry with the key &#x60;region&#x60; and the value &#x60;us-east-1&#x60;; the policy is only applied to quota consumed in that region. This map has the following restrictions: * If &#x60;region&#x60; appears as a key, its value must be a valid Cloud region. * If &#x60;zone&#x60; appears as a key, its value must be a valid Cloud zone. * Keys other than &#x60;region&#x60; or &#x60;zone&#x60; are not valid.
   * @return dimensions
   */
  @javax.annotation.Nullable
  public Map<String, String> getDimensions() {
    return dimensions;
  }

  public void setDimensions(Map<String, String> dimensions) {
    this.dimensions = dimensions;
  }


  public AdminQuotaPolicy metric(String metric) {
    this.metric = metric;
    return this;
  }

  /**
   * The name of the metric to which this policy applies. An example name would be: &#x60;compute.googleapis.com/cpus&#x60;
   * @return metric
   */
  @javax.annotation.Nullable
  public String getMetric() {
    return metric;
  }

  public void setMetric(String metric) {
    this.metric = metric;
  }


  public AdminQuotaPolicy name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the policy. This name is generated by the server when the policy is created. Example names would be: &#x60;organizations/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/adminQuotaPolicies/4a3f2c1d&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AdminQuotaPolicy policyValue(String policyValue) {
    this.policyValue = policyValue;
    return this;
  }

  /**
   * The quota policy value. Can be any nonnegative integer, or -1 (unlimited quota).
   * @return policyValue
   */
  @javax.annotation.Nullable
  public String getPolicyValue() {
    return policyValue;
  }

  public void setPolicyValue(String policyValue) {
    this.policyValue = policyValue;
  }


  public AdminQuotaPolicy unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * The limit unit of the limit to which this policy applies. An example unit would be: &#x60;1/{project}/{region}&#x60; Note that &#x60;{project}&#x60; and &#x60;{region}&#x60; are not placeholders in this example; the literal characters &#x60;{&#x60; and &#x60;}&#x60; occur in the string.
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminQuotaPolicy adminQuotaPolicy = (AdminQuotaPolicy) o;
    return Objects.equals(this.container, adminQuotaPolicy.container) &&
        Objects.equals(this.dimensions, adminQuotaPolicy.dimensions) &&
        Objects.equals(this.metric, adminQuotaPolicy.metric) &&
        Objects.equals(this.name, adminQuotaPolicy.name) &&
        Objects.equals(this.policyValue, adminQuotaPolicy.policyValue) &&
        Objects.equals(this.unit, adminQuotaPolicy.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(container, dimensions, metric, name, policyValue, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminQuotaPolicy {\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    policyValue: ").append(toIndentedString(policyValue)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("container");
    openapiFields.add("dimensions");
    openapiFields.add("metric");
    openapiFields.add("name");
    openapiFields.add("policyValue");
    openapiFields.add("unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdminQuotaPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdminQuotaPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdminQuotaPolicy is not found in the empty JSON string", AdminQuotaPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdminQuotaPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdminQuotaPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("container") != null && !jsonObj.get("container").isJsonNull()) && !jsonObj.get("container").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `container` to be a primitive type in the JSON string but got `%s`", jsonObj.get("container").toString()));
      }
      if ((jsonObj.get("metric") != null && !jsonObj.get("metric").isJsonNull()) && !jsonObj.get("metric").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metric` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metric").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("policyValue") != null && !jsonObj.get("policyValue").isJsonNull()) && !jsonObj.get("policyValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyValue").toString()));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdminQuotaPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdminQuotaPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdminQuotaPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdminQuotaPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<AdminQuotaPolicy>() {
           @Override
           public void write(JsonWriter out, AdminQuotaPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdminQuotaPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdminQuotaPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdminQuotaPolicy
   * @throws IOException if the JSON string is invalid with respect to AdminQuotaPolicy
   */
  public static AdminQuotaPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdminQuotaPolicy.class);
  }

  /**
   * Convert an instance of AdminQuotaPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

