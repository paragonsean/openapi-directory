/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMixin.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMixin::OAIMixin(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMixin::OAIMixin() {
    this->initializeModel();
}

OAIMixin::~OAIMixin() {}

void OAIMixin::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_root_isSet = false;
    m_root_isValid = false;
}

void OAIMixin::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMixin::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_root_isValid = ::OpenAPI::fromJsonValue(m_root, json[QString("root")]);
    m_root_isSet = !json[QString("root")].isNull() && m_root_isValid;
}

QString OAIMixin::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMixin::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_root_isSet) {
        obj.insert(QString("root"), ::OpenAPI::toJsonValue(m_root));
    }
    return obj;
}

QString OAIMixin::getName() const {
    return m_name;
}
void OAIMixin::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMixin::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMixin::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMixin::getRoot() const {
    return m_root;
}
void OAIMixin::setRoot(const QString &root) {
    m_root = root;
    m_root_isSet = true;
}

bool OAIMixin::is_root_Set() const{
    return m_root_isSet;
}

bool OAIMixin::is_root_Valid() const{
    return m_root_isValid;
}

bool OAIMixin::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMixin::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
