/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisableServiceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisableServiceRequest::OAIDisableServiceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisableServiceRequest::OAIDisableServiceRequest() {
    this->initializeModel();
}

OAIDisableServiceRequest::~OAIDisableServiceRequest() {}

void OAIDisableServiceRequest::initializeModel() {

    m_check_if_service_has_usage_isSet = false;
    m_check_if_service_has_usage_isValid = false;

    m_disable_dependent_services_isSet = false;
    m_disable_dependent_services_isValid = false;
}

void OAIDisableServiceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisableServiceRequest::fromJsonObject(QJsonObject json) {

    m_check_if_service_has_usage_isValid = ::OpenAPI::fromJsonValue(m_check_if_service_has_usage, json[QString("checkIfServiceHasUsage")]);
    m_check_if_service_has_usage_isSet = !json[QString("checkIfServiceHasUsage")].isNull() && m_check_if_service_has_usage_isValid;

    m_disable_dependent_services_isValid = ::OpenAPI::fromJsonValue(m_disable_dependent_services, json[QString("disableDependentServices")]);
    m_disable_dependent_services_isSet = !json[QString("disableDependentServices")].isNull() && m_disable_dependent_services_isValid;
}

QString OAIDisableServiceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisableServiceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_check_if_service_has_usage_isSet) {
        obj.insert(QString("checkIfServiceHasUsage"), ::OpenAPI::toJsonValue(m_check_if_service_has_usage));
    }
    if (m_disable_dependent_services_isSet) {
        obj.insert(QString("disableDependentServices"), ::OpenAPI::toJsonValue(m_disable_dependent_services));
    }
    return obj;
}

QString OAIDisableServiceRequest::getCheckIfServiceHasUsage() const {
    return m_check_if_service_has_usage;
}
void OAIDisableServiceRequest::setCheckIfServiceHasUsage(const QString &check_if_service_has_usage) {
    m_check_if_service_has_usage = check_if_service_has_usage;
    m_check_if_service_has_usage_isSet = true;
}

bool OAIDisableServiceRequest::is_check_if_service_has_usage_Set() const{
    return m_check_if_service_has_usage_isSet;
}

bool OAIDisableServiceRequest::is_check_if_service_has_usage_Valid() const{
    return m_check_if_service_has_usage_isValid;
}

bool OAIDisableServiceRequest::isDisableDependentServices() const {
    return m_disable_dependent_services;
}
void OAIDisableServiceRequest::setDisableDependentServices(const bool &disable_dependent_services) {
    m_disable_dependent_services = disable_dependent_services;
    m_disable_dependent_services_isSet = true;
}

bool OAIDisableServiceRequest::is_disable_dependent_services_Set() const{
    return m_disable_dependent_services_isSet;
}

bool OAIDisableServiceRequest::is_disable_dependent_services_Valid() const{
    return m_disable_dependent_services_isValid;
}

bool OAIDisableServiceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_check_if_service_has_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_dependent_services_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisableServiceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
