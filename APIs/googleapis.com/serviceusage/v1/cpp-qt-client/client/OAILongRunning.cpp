/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILongRunning.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILongRunning::OAILongRunning(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILongRunning::OAILongRunning() {
    this->initializeModel();
}

OAILongRunning::~OAILongRunning() {}

void OAILongRunning::initializeModel() {

    m_initial_poll_delay_isSet = false;
    m_initial_poll_delay_isValid = false;

    m_max_poll_delay_isSet = false;
    m_max_poll_delay_isValid = false;

    m_poll_delay_multiplier_isSet = false;
    m_poll_delay_multiplier_isValid = false;

    m_total_poll_timeout_isSet = false;
    m_total_poll_timeout_isValid = false;
}

void OAILongRunning::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILongRunning::fromJsonObject(QJsonObject json) {

    m_initial_poll_delay_isValid = ::OpenAPI::fromJsonValue(m_initial_poll_delay, json[QString("initialPollDelay")]);
    m_initial_poll_delay_isSet = !json[QString("initialPollDelay")].isNull() && m_initial_poll_delay_isValid;

    m_max_poll_delay_isValid = ::OpenAPI::fromJsonValue(m_max_poll_delay, json[QString("maxPollDelay")]);
    m_max_poll_delay_isSet = !json[QString("maxPollDelay")].isNull() && m_max_poll_delay_isValid;

    m_poll_delay_multiplier_isValid = ::OpenAPI::fromJsonValue(m_poll_delay_multiplier, json[QString("pollDelayMultiplier")]);
    m_poll_delay_multiplier_isSet = !json[QString("pollDelayMultiplier")].isNull() && m_poll_delay_multiplier_isValid;

    m_total_poll_timeout_isValid = ::OpenAPI::fromJsonValue(m_total_poll_timeout, json[QString("totalPollTimeout")]);
    m_total_poll_timeout_isSet = !json[QString("totalPollTimeout")].isNull() && m_total_poll_timeout_isValid;
}

QString OAILongRunning::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILongRunning::asJsonObject() const {
    QJsonObject obj;
    if (m_initial_poll_delay_isSet) {
        obj.insert(QString("initialPollDelay"), ::OpenAPI::toJsonValue(m_initial_poll_delay));
    }
    if (m_max_poll_delay_isSet) {
        obj.insert(QString("maxPollDelay"), ::OpenAPI::toJsonValue(m_max_poll_delay));
    }
    if (m_poll_delay_multiplier_isSet) {
        obj.insert(QString("pollDelayMultiplier"), ::OpenAPI::toJsonValue(m_poll_delay_multiplier));
    }
    if (m_total_poll_timeout_isSet) {
        obj.insert(QString("totalPollTimeout"), ::OpenAPI::toJsonValue(m_total_poll_timeout));
    }
    return obj;
}

QString OAILongRunning::getInitialPollDelay() const {
    return m_initial_poll_delay;
}
void OAILongRunning::setInitialPollDelay(const QString &initial_poll_delay) {
    m_initial_poll_delay = initial_poll_delay;
    m_initial_poll_delay_isSet = true;
}

bool OAILongRunning::is_initial_poll_delay_Set() const{
    return m_initial_poll_delay_isSet;
}

bool OAILongRunning::is_initial_poll_delay_Valid() const{
    return m_initial_poll_delay_isValid;
}

QString OAILongRunning::getMaxPollDelay() const {
    return m_max_poll_delay;
}
void OAILongRunning::setMaxPollDelay(const QString &max_poll_delay) {
    m_max_poll_delay = max_poll_delay;
    m_max_poll_delay_isSet = true;
}

bool OAILongRunning::is_max_poll_delay_Set() const{
    return m_max_poll_delay_isSet;
}

bool OAILongRunning::is_max_poll_delay_Valid() const{
    return m_max_poll_delay_isValid;
}

float OAILongRunning::getPollDelayMultiplier() const {
    return m_poll_delay_multiplier;
}
void OAILongRunning::setPollDelayMultiplier(const float &poll_delay_multiplier) {
    m_poll_delay_multiplier = poll_delay_multiplier;
    m_poll_delay_multiplier_isSet = true;
}

bool OAILongRunning::is_poll_delay_multiplier_Set() const{
    return m_poll_delay_multiplier_isSet;
}

bool OAILongRunning::is_poll_delay_multiplier_Valid() const{
    return m_poll_delay_multiplier_isValid;
}

QString OAILongRunning::getTotalPollTimeout() const {
    return m_total_poll_timeout;
}
void OAILongRunning::setTotalPollTimeout(const QString &total_poll_timeout) {
    m_total_poll_timeout = total_poll_timeout;
    m_total_poll_timeout_isSet = true;
}

bool OAILongRunning::is_total_poll_timeout_Set() const{
    return m_total_poll_timeout_isSet;
}

bool OAILongRunning::is_total_poll_timeout_Valid() const{
    return m_total_poll_timeout_isValid;
}

bool OAILongRunning::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_initial_poll_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_poll_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poll_delay_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_poll_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILongRunning::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
