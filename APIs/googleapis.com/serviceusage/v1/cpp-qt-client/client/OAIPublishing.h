/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPublishing.h
 *
 * This message configures the settings for publishing [Google Cloud Client libraries](https://cloud.google.com/apis/docs/cloud-client-libraries) generated from the service config.
 */

#ifndef OAIPublishing_H
#define OAIPublishing_H

#include <QJsonObject>

#include "OAIClientLibrarySettings.h"
#include "OAIMethodSettings.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIClientLibrarySettings;
class OAIMethodSettings;

class OAIPublishing : public OAIObject {
public:
    OAIPublishing();
    OAIPublishing(QString json);
    ~OAIPublishing() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApiShortName() const;
    void setApiShortName(const QString &api_short_name);
    bool is_api_short_name_Set() const;
    bool is_api_short_name_Valid() const;

    QList<QString> getCodeownerGithubTeams() const;
    void setCodeownerGithubTeams(const QList<QString> &codeowner_github_teams);
    bool is_codeowner_github_teams_Set() const;
    bool is_codeowner_github_teams_Valid() const;

    QString getDocTagPrefix() const;
    void setDocTagPrefix(const QString &doc_tag_prefix);
    bool is_doc_tag_prefix_Set() const;
    bool is_doc_tag_prefix_Valid() const;

    QString getDocumentationUri() const;
    void setDocumentationUri(const QString &documentation_uri);
    bool is_documentation_uri_Set() const;
    bool is_documentation_uri_Valid() const;

    QString getGithubLabel() const;
    void setGithubLabel(const QString &github_label);
    bool is_github_label_Set() const;
    bool is_github_label_Valid() const;

    QList<OAIClientLibrarySettings> getLibrarySettings() const;
    void setLibrarySettings(const QList<OAIClientLibrarySettings> &library_settings);
    bool is_library_settings_Set() const;
    bool is_library_settings_Valid() const;

    QList<OAIMethodSettings> getMethodSettings() const;
    void setMethodSettings(const QList<OAIMethodSettings> &method_settings);
    bool is_method_settings_Set() const;
    bool is_method_settings_Valid() const;

    QString getNewIssueUri() const;
    void setNewIssueUri(const QString &new_issue_uri);
    bool is_new_issue_uri_Set() const;
    bool is_new_issue_uri_Valid() const;

    QString getOrganization() const;
    void setOrganization(const QString &organization);
    bool is_organization_Set() const;
    bool is_organization_Valid() const;

    QString getProtoReferenceDocumentationUri() const;
    void setProtoReferenceDocumentationUri(const QString &proto_reference_documentation_uri);
    bool is_proto_reference_documentation_uri_Set() const;
    bool is_proto_reference_documentation_uri_Valid() const;

    QString getRestReferenceDocumentationUri() const;
    void setRestReferenceDocumentationUri(const QString &rest_reference_documentation_uri);
    bool is_rest_reference_documentation_uri_Set() const;
    bool is_rest_reference_documentation_uri_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_api_short_name;
    bool m_api_short_name_isSet;
    bool m_api_short_name_isValid;

    QList<QString> m_codeowner_github_teams;
    bool m_codeowner_github_teams_isSet;
    bool m_codeowner_github_teams_isValid;

    QString m_doc_tag_prefix;
    bool m_doc_tag_prefix_isSet;
    bool m_doc_tag_prefix_isValid;

    QString m_documentation_uri;
    bool m_documentation_uri_isSet;
    bool m_documentation_uri_isValid;

    QString m_github_label;
    bool m_github_label_isSet;
    bool m_github_label_isValid;

    QList<OAIClientLibrarySettings> m_library_settings;
    bool m_library_settings_isSet;
    bool m_library_settings_isValid;

    QList<OAIMethodSettings> m_method_settings;
    bool m_method_settings_isSet;
    bool m_method_settings_isValid;

    QString m_new_issue_uri;
    bool m_new_issue_uri_isSet;
    bool m_new_issue_uri_isValid;

    QString m_organization;
    bool m_organization_isSet;
    bool m_organization_isValid;

    QString m_proto_reference_documentation_uri;
    bool m_proto_reference_documentation_uri_isSet;
    bool m_proto_reference_documentation_uri_isValid;

    QString m_rest_reference_documentation_uri;
    bool m_rest_reference_documentation_uri_isSet;
    bool m_rest_reference_documentation_uri_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPublishing)

#endif // OAIPublishing_H
