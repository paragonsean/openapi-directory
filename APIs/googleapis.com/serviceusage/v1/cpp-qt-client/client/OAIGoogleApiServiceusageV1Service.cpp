/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleApiServiceusageV1Service.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleApiServiceusageV1Service::OAIGoogleApiServiceusageV1Service(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleApiServiceusageV1Service::OAIGoogleApiServiceusageV1Service() {
    this->initializeModel();
}

OAIGoogleApiServiceusageV1Service::~OAIGoogleApiServiceusageV1Service() {}

void OAIGoogleApiServiceusageV1Service::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIGoogleApiServiceusageV1Service::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleApiServiceusageV1Service::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIGoogleApiServiceusageV1Service::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleApiServiceusageV1Service::asJsonObject() const {
    QJsonObject obj;
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIGoogleApiServiceusageV1ServiceConfig OAIGoogleApiServiceusageV1Service::getConfig() const {
    return m_config;
}
void OAIGoogleApiServiceusageV1Service::setConfig(const OAIGoogleApiServiceusageV1ServiceConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIGoogleApiServiceusageV1Service::is_config_Set() const{
    return m_config_isSet;
}

bool OAIGoogleApiServiceusageV1Service::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIGoogleApiServiceusageV1Service::getName() const {
    return m_name;
}
void OAIGoogleApiServiceusageV1Service::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleApiServiceusageV1Service::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleApiServiceusageV1Service::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleApiServiceusageV1Service::getParent() const {
    return m_parent;
}
void OAIGoogleApiServiceusageV1Service::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIGoogleApiServiceusageV1Service::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIGoogleApiServiceusageV1Service::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAIGoogleApiServiceusageV1Service::getState() const {
    return m_state;
}
void OAIGoogleApiServiceusageV1Service::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleApiServiceusageV1Service::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleApiServiceusageV1Service::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIGoogleApiServiceusageV1Service::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleApiServiceusageV1Service::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
