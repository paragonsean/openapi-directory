/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDocumentation.h
 *
 * &#x60;Documentation&#x60; provides the information for describing a service. Example: documentation: summary: &gt; The Google Calendar API gives access to most calendar features. pages: - name: Overview content: (&#x3D;&#x3D; include google/foo/overview.md &#x3D;&#x3D;) - name: Tutorial content: (&#x3D;&#x3D; include google/foo/tutorial.md &#x3D;&#x3D;) subpages: - name: Java content: (&#x3D;&#x3D; include google/foo/tutorial_java.md &#x3D;&#x3D;) rules: - selector: google.calendar.Calendar.Get description: &gt; ... - selector: google.calendar.Calendar.Put description: &gt; ... Documentation is provided in markdown syntax. In addition to standard markdown features, definition lists, tables and fenced code blocks are supported. Section headers can be provided and are interpreted relative to the section nesting of the context where a documentation fragment is embedded. Documentation from the IDL is merged with documentation defined via the config at normalization time, where documentation provided by config rules overrides IDL provided. A number of constructs specific to the API platform are supported in documentation text. In order to reference a proto element, the following notation can be used: [fully.qualified.proto.name][] To override the display text used for the link, this can be used: [display text][fully.qualified.proto.name] Text can be excluded from doc using the following notation: (-- internal comment --) A few directives are available in documentation. Note that directives must appear on a single line to be properly identified. The &#x60;include&#x60; directive includes a markdown file from an external source: (&#x3D;&#x3D; include path/to/file &#x3D;&#x3D;) The &#x60;resource_for&#x60; directive marks a message to be the resource of a collection in REST view. If it is not specified, tools attempt to infer the resource from the operations in a collection: (&#x3D;&#x3D; resource_for v1.shelves.books &#x3D;&#x3D;) The directive &#x60;suppress_warning&#x60; does not directly affect documentation and is documented together with service config validation.
 */

#ifndef OAIDocumentation_H
#define OAIDocumentation_H

#include <QJsonObject>

#include "OAIDocumentationRule.h"
#include "OAIPage.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPage;
class OAIDocumentationRule;

class OAIDocumentation : public OAIObject {
public:
    OAIDocumentation();
    OAIDocumentation(QString json);
    ~OAIDocumentation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDocumentationRootUrl() const;
    void setDocumentationRootUrl(const QString &documentation_root_url);
    bool is_documentation_root_url_Set() const;
    bool is_documentation_root_url_Valid() const;

    QString getOverview() const;
    void setOverview(const QString &overview);
    bool is_overview_Set() const;
    bool is_overview_Valid() const;

    QList<OAIPage> getPages() const;
    void setPages(const QList<OAIPage> &pages);
    bool is_pages_Set() const;
    bool is_pages_Valid() const;

    QList<OAIDocumentationRule> getRules() const;
    void setRules(const QList<OAIDocumentationRule> &rules);
    bool is_rules_Set() const;
    bool is_rules_Valid() const;

    QList<OAIPage> getSectionOverrides() const;
    void setSectionOverrides(const QList<OAIPage> &section_overrides);
    bool is_section_overrides_Set() const;
    bool is_section_overrides_Valid() const;

    QString getServiceRootUrl() const;
    void setServiceRootUrl(const QString &service_root_url);
    bool is_service_root_url_Set() const;
    bool is_service_root_url_Valid() const;

    QString getSummary() const;
    void setSummary(const QString &summary);
    bool is_summary_Set() const;
    bool is_summary_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_documentation_root_url;
    bool m_documentation_root_url_isSet;
    bool m_documentation_root_url_isValid;

    QString m_overview;
    bool m_overview_isSet;
    bool m_overview_isValid;

    QList<OAIPage> m_pages;
    bool m_pages_isSet;
    bool m_pages_isValid;

    QList<OAIDocumentationRule> m_rules;
    bool m_rules_isSet;
    bool m_rules_isValid;

    QList<OAIPage> m_section_overrides;
    bool m_section_overrides_isSet;
    bool m_section_overrides_isValid;

    QString m_service_root_url;
    bool m_service_root_url_isSet;
    bool m_service_root_url_isValid;

    QString m_summary;
    bool m_summary_isSet;
    bool m_summary_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDocumentation)

#endif // OAIDocumentation_H
