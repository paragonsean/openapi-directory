/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldPolicy::OAIFieldPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldPolicy::OAIFieldPolicy() {
    this->initializeModel();
}

OAIFieldPolicy::~OAIFieldPolicy() {}

void OAIFieldPolicy::initializeModel() {

    m_resource_permission_isSet = false;
    m_resource_permission_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_selector_isSet = false;
    m_selector_isValid = false;
}

void OAIFieldPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldPolicy::fromJsonObject(QJsonObject json) {

    m_resource_permission_isValid = ::OpenAPI::fromJsonValue(m_resource_permission, json[QString("resourcePermission")]);
    m_resource_permission_isSet = !json[QString("resourcePermission")].isNull() && m_resource_permission_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_selector_isValid = ::OpenAPI::fromJsonValue(m_selector, json[QString("selector")]);
    m_selector_isSet = !json[QString("selector")].isNull() && m_selector_isValid;
}

QString OAIFieldPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_permission_isSet) {
        obj.insert(QString("resourcePermission"), ::OpenAPI::toJsonValue(m_resource_permission));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_selector_isSet) {
        obj.insert(QString("selector"), ::OpenAPI::toJsonValue(m_selector));
    }
    return obj;
}

QString OAIFieldPolicy::getResourcePermission() const {
    return m_resource_permission;
}
void OAIFieldPolicy::setResourcePermission(const QString &resource_permission) {
    m_resource_permission = resource_permission;
    m_resource_permission_isSet = true;
}

bool OAIFieldPolicy::is_resource_permission_Set() const{
    return m_resource_permission_isSet;
}

bool OAIFieldPolicy::is_resource_permission_Valid() const{
    return m_resource_permission_isValid;
}

QString OAIFieldPolicy::getResourceType() const {
    return m_resource_type;
}
void OAIFieldPolicy::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIFieldPolicy::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIFieldPolicy::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIFieldPolicy::getSelector() const {
    return m_selector;
}
void OAIFieldPolicy::setSelector(const QString &selector) {
    m_selector = selector;
    m_selector_isSet = true;
}

bool OAIFieldPolicy::is_selector_Set() const{
    return m_selector_isSet;
}

bool OAIFieldPolicy::is_selector_Valid() const{
    return m_selector_isValid;
}

bool OAIFieldPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selector_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
