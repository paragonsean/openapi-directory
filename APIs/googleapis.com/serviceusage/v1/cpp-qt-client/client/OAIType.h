/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIType.h
 *
 * A protocol buffer message type.
 */

#ifndef OAIType_H
#define OAIType_H

#include <QJsonObject>

#include "OAIField.h"
#include "OAIOption.h"
#include "OAISourceContext.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIField;
class OAIOption;
class OAISourceContext;

class OAIType : public OAIObject {
public:
    OAIType();
    OAIType(QString json);
    ~OAIType() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEdition() const;
    void setEdition(const QString &edition);
    bool is_edition_Set() const;
    bool is_edition_Valid() const;

    QList<OAIField> getFields() const;
    void setFields(const QList<OAIField> &fields);
    bool is_fields_Set() const;
    bool is_fields_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<QString> getOneofs() const;
    void setOneofs(const QList<QString> &oneofs);
    bool is_oneofs_Set() const;
    bool is_oneofs_Valid() const;

    QList<OAIOption> getOptions() const;
    void setOptions(const QList<OAIOption> &options);
    bool is_options_Set() const;
    bool is_options_Valid() const;

    OAISourceContext getSourceContext() const;
    void setSourceContext(const OAISourceContext &source_context);
    bool is_source_context_Set() const;
    bool is_source_context_Valid() const;

    QString getSyntax() const;
    void setSyntax(const QString &syntax);
    bool is_syntax_Set() const;
    bool is_syntax_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_edition;
    bool m_edition_isSet;
    bool m_edition_isValid;

    QList<OAIField> m_fields;
    bool m_fields_isSet;
    bool m_fields_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<QString> m_oneofs;
    bool m_oneofs_isSet;
    bool m_oneofs_isValid;

    QList<OAIOption> m_options;
    bool m_options_isSet;
    bool m_options_isValid;

    OAISourceContext m_source_context;
    bool m_source_context_isSet;
    bool m_source_context_isValid;

    QString m_syntax;
    bool m_syntax_isSet;
    bool m_syntax_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIType)

#endif // OAIType_H
