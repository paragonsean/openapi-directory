/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDotnetSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDotnetSettings::OAIDotnetSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDotnetSettings::OAIDotnetSettings() {
    this->initializeModel();
}

OAIDotnetSettings::~OAIDotnetSettings() {}

void OAIDotnetSettings::initializeModel() {

    m_common_isSet = false;
    m_common_isValid = false;

    m_forced_namespace_aliases_isSet = false;
    m_forced_namespace_aliases_isValid = false;

    m_handwritten_signatures_isSet = false;
    m_handwritten_signatures_isValid = false;

    m_ignored_resources_isSet = false;
    m_ignored_resources_isValid = false;

    m_renamed_resources_isSet = false;
    m_renamed_resources_isValid = false;

    m_renamed_services_isSet = false;
    m_renamed_services_isValid = false;
}

void OAIDotnetSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDotnetSettings::fromJsonObject(QJsonObject json) {

    m_common_isValid = ::OpenAPI::fromJsonValue(m_common, json[QString("common")]);
    m_common_isSet = !json[QString("common")].isNull() && m_common_isValid;

    m_forced_namespace_aliases_isValid = ::OpenAPI::fromJsonValue(m_forced_namespace_aliases, json[QString("forcedNamespaceAliases")]);
    m_forced_namespace_aliases_isSet = !json[QString("forcedNamespaceAliases")].isNull() && m_forced_namespace_aliases_isValid;

    m_handwritten_signatures_isValid = ::OpenAPI::fromJsonValue(m_handwritten_signatures, json[QString("handwrittenSignatures")]);
    m_handwritten_signatures_isSet = !json[QString("handwrittenSignatures")].isNull() && m_handwritten_signatures_isValid;

    m_ignored_resources_isValid = ::OpenAPI::fromJsonValue(m_ignored_resources, json[QString("ignoredResources")]);
    m_ignored_resources_isSet = !json[QString("ignoredResources")].isNull() && m_ignored_resources_isValid;

    m_renamed_resources_isValid = ::OpenAPI::fromJsonValue(m_renamed_resources, json[QString("renamedResources")]);
    m_renamed_resources_isSet = !json[QString("renamedResources")].isNull() && m_renamed_resources_isValid;

    m_renamed_services_isValid = ::OpenAPI::fromJsonValue(m_renamed_services, json[QString("renamedServices")]);
    m_renamed_services_isSet = !json[QString("renamedServices")].isNull() && m_renamed_services_isValid;
}

QString OAIDotnetSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDotnetSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_common.isSet()) {
        obj.insert(QString("common"), ::OpenAPI::toJsonValue(m_common));
    }
    if (m_forced_namespace_aliases.size() > 0) {
        obj.insert(QString("forcedNamespaceAliases"), ::OpenAPI::toJsonValue(m_forced_namespace_aliases));
    }
    if (m_handwritten_signatures.size() > 0) {
        obj.insert(QString("handwrittenSignatures"), ::OpenAPI::toJsonValue(m_handwritten_signatures));
    }
    if (m_ignored_resources.size() > 0) {
        obj.insert(QString("ignoredResources"), ::OpenAPI::toJsonValue(m_ignored_resources));
    }
    if (m_renamed_resources.size() > 0) {
        obj.insert(QString("renamedResources"), ::OpenAPI::toJsonValue(m_renamed_resources));
    }
    if (m_renamed_services.size() > 0) {
        obj.insert(QString("renamedServices"), ::OpenAPI::toJsonValue(m_renamed_services));
    }
    return obj;
}

OAICommonLanguageSettings OAIDotnetSettings::getCommon() const {
    return m_common;
}
void OAIDotnetSettings::setCommon(const OAICommonLanguageSettings &common) {
    m_common = common;
    m_common_isSet = true;
}

bool OAIDotnetSettings::is_common_Set() const{
    return m_common_isSet;
}

bool OAIDotnetSettings::is_common_Valid() const{
    return m_common_isValid;
}

QList<QString> OAIDotnetSettings::getForcedNamespaceAliases() const {
    return m_forced_namespace_aliases;
}
void OAIDotnetSettings::setForcedNamespaceAliases(const QList<QString> &forced_namespace_aliases) {
    m_forced_namespace_aliases = forced_namespace_aliases;
    m_forced_namespace_aliases_isSet = true;
}

bool OAIDotnetSettings::is_forced_namespace_aliases_Set() const{
    return m_forced_namespace_aliases_isSet;
}

bool OAIDotnetSettings::is_forced_namespace_aliases_Valid() const{
    return m_forced_namespace_aliases_isValid;
}

QList<QString> OAIDotnetSettings::getHandwrittenSignatures() const {
    return m_handwritten_signatures;
}
void OAIDotnetSettings::setHandwrittenSignatures(const QList<QString> &handwritten_signatures) {
    m_handwritten_signatures = handwritten_signatures;
    m_handwritten_signatures_isSet = true;
}

bool OAIDotnetSettings::is_handwritten_signatures_Set() const{
    return m_handwritten_signatures_isSet;
}

bool OAIDotnetSettings::is_handwritten_signatures_Valid() const{
    return m_handwritten_signatures_isValid;
}

QList<QString> OAIDotnetSettings::getIgnoredResources() const {
    return m_ignored_resources;
}
void OAIDotnetSettings::setIgnoredResources(const QList<QString> &ignored_resources) {
    m_ignored_resources = ignored_resources;
    m_ignored_resources_isSet = true;
}

bool OAIDotnetSettings::is_ignored_resources_Set() const{
    return m_ignored_resources_isSet;
}

bool OAIDotnetSettings::is_ignored_resources_Valid() const{
    return m_ignored_resources_isValid;
}

QMap<QString, QString> OAIDotnetSettings::getRenamedResources() const {
    return m_renamed_resources;
}
void OAIDotnetSettings::setRenamedResources(const QMap<QString, QString> &renamed_resources) {
    m_renamed_resources = renamed_resources;
    m_renamed_resources_isSet = true;
}

bool OAIDotnetSettings::is_renamed_resources_Set() const{
    return m_renamed_resources_isSet;
}

bool OAIDotnetSettings::is_renamed_resources_Valid() const{
    return m_renamed_resources_isValid;
}

QMap<QString, QString> OAIDotnetSettings::getRenamedServices() const {
    return m_renamed_services;
}
void OAIDotnetSettings::setRenamedServices(const QMap<QString, QString> &renamed_services) {
    m_renamed_services = renamed_services;
    m_renamed_services_isSet = true;
}

bool OAIDotnetSettings::is_renamed_services_Set() const{
    return m_renamed_services_isSet;
}

bool OAIDotnetSettings::is_renamed_services_Valid() const{
    return m_renamed_services_isValid;
}

bool OAIDotnetSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_common.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forced_namespace_aliases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_handwritten_signatures.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignored_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_renamed_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_renamed_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDotnetSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
