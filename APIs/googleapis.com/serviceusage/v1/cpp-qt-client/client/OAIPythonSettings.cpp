/**
 * Service Usage API
 * Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPythonSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPythonSettings::OAIPythonSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPythonSettings::OAIPythonSettings() {
    this->initializeModel();
}

OAIPythonSettings::~OAIPythonSettings() {}

void OAIPythonSettings::initializeModel() {

    m_common_isSet = false;
    m_common_isValid = false;
}

void OAIPythonSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPythonSettings::fromJsonObject(QJsonObject json) {

    m_common_isValid = ::OpenAPI::fromJsonValue(m_common, json[QString("common")]);
    m_common_isSet = !json[QString("common")].isNull() && m_common_isValid;
}

QString OAIPythonSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPythonSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_common.isSet()) {
        obj.insert(QString("common"), ::OpenAPI::toJsonValue(m_common));
    }
    return obj;
}

OAICommonLanguageSettings OAIPythonSettings::getCommon() const {
    return m_common;
}
void OAIPythonSettings::setCommon(const OAICommonLanguageSettings &common) {
    m_common = common;
    m_common_isSet = true;
}

bool OAIPythonSettings::is_common_Set() const{
    return m_common_isSet;
}

bool OAIPythonSettings::is_common_Valid() const{
    return m_common_isValid;
}

bool OAIPythonSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_common.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPythonSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
