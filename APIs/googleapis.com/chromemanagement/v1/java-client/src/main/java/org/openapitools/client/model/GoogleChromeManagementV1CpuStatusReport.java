/*
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleChromeManagementV1CpuTemperatureInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about the status of the CPU. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceCpuInfo](https://chromeenterprise.google/policies/#ReportDeviceCpuInfo) * Data Collection Frequency: Every 10 minutes * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_CPU_REPORT
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:04.349803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromeManagementV1CpuStatusReport {
  public static final String SERIALIZED_NAME_CPU_TEMPERATURE_INFO = "cpuTemperatureInfo";
  @SerializedName(SERIALIZED_NAME_CPU_TEMPERATURE_INFO)
  private List<GoogleChromeManagementV1CpuTemperatureInfo> cpuTemperatureInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_CPU_UTILIZATION_PCT = "cpuUtilizationPct";
  @SerializedName(SERIALIZED_NAME_CPU_UTILIZATION_PCT)
  private Integer cpuUtilizationPct;

  public static final String SERIALIZED_NAME_REPORT_TIME = "reportTime";
  @SerializedName(SERIALIZED_NAME_REPORT_TIME)
  private String reportTime;

  public static final String SERIALIZED_NAME_SAMPLE_FREQUENCY = "sampleFrequency";
  @SerializedName(SERIALIZED_NAME_SAMPLE_FREQUENCY)
  private String sampleFrequency;

  public GoogleChromeManagementV1CpuStatusReport() {
  }

  public GoogleChromeManagementV1CpuStatusReport(
     List<GoogleChromeManagementV1CpuTemperatureInfo> cpuTemperatureInfo, 
     Integer cpuUtilizationPct, 
     String reportTime, 
     String sampleFrequency
  ) {
    this();
    this.cpuTemperatureInfo = cpuTemperatureInfo;
    this.cpuUtilizationPct = cpuUtilizationPct;
    this.reportTime = reportTime;
    this.sampleFrequency = sampleFrequency;
  }

  /**
   * Output only. CPU temperature sample info per CPU core in Celsius
   * @return cpuTemperatureInfo
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1CpuTemperatureInfo> getCpuTemperatureInfo() {
    return cpuTemperatureInfo;
  }



  /**
   * Output only. Sample of CPU utilization (0-100 percent).
   * @return cpuUtilizationPct
   */
  @javax.annotation.Nullable
  public Integer getCpuUtilizationPct() {
    return cpuUtilizationPct;
  }



  /**
   * Output only. The timestamp in milliseconds representing time at which this report was sampled.
   * @return reportTime
   */
  @javax.annotation.Nullable
  public String getReportTime() {
    return reportTime;
  }



  /**
   * Output only. Frequency the report is sampled.
   * @return sampleFrequency
   */
  @javax.annotation.Nullable
  public String getSampleFrequency() {
    return sampleFrequency;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromeManagementV1CpuStatusReport googleChromeManagementV1CpuStatusReport = (GoogleChromeManagementV1CpuStatusReport) o;
    return Objects.equals(this.cpuTemperatureInfo, googleChromeManagementV1CpuStatusReport.cpuTemperatureInfo) &&
        Objects.equals(this.cpuUtilizationPct, googleChromeManagementV1CpuStatusReport.cpuUtilizationPct) &&
        Objects.equals(this.reportTime, googleChromeManagementV1CpuStatusReport.reportTime) &&
        Objects.equals(this.sampleFrequency, googleChromeManagementV1CpuStatusReport.sampleFrequency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpuTemperatureInfo, cpuUtilizationPct, reportTime, sampleFrequency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromeManagementV1CpuStatusReport {\n");
    sb.append("    cpuTemperatureInfo: ").append(toIndentedString(cpuTemperatureInfo)).append("\n");
    sb.append("    cpuUtilizationPct: ").append(toIndentedString(cpuUtilizationPct)).append("\n");
    sb.append("    reportTime: ").append(toIndentedString(reportTime)).append("\n");
    sb.append("    sampleFrequency: ").append(toIndentedString(sampleFrequency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cpuTemperatureInfo");
    openapiFields.add("cpuUtilizationPct");
    openapiFields.add("reportTime");
    openapiFields.add("sampleFrequency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromeManagementV1CpuStatusReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromeManagementV1CpuStatusReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromeManagementV1CpuStatusReport is not found in the empty JSON string", GoogleChromeManagementV1CpuStatusReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromeManagementV1CpuStatusReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromeManagementV1CpuStatusReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("cpuTemperatureInfo") != null && !jsonObj.get("cpuTemperatureInfo").isJsonNull()) {
        JsonArray jsonArraycpuTemperatureInfo = jsonObj.getAsJsonArray("cpuTemperatureInfo");
        if (jsonArraycpuTemperatureInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cpuTemperatureInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cpuTemperatureInfo` to be an array in the JSON string but got `%s`", jsonObj.get("cpuTemperatureInfo").toString()));
          }

          // validate the optional field `cpuTemperatureInfo` (array)
          for (int i = 0; i < jsonArraycpuTemperatureInfo.size(); i++) {
            GoogleChromeManagementV1CpuTemperatureInfo.validateJsonElement(jsonArraycpuTemperatureInfo.get(i));
          };
        }
      }
      if ((jsonObj.get("reportTime") != null && !jsonObj.get("reportTime").isJsonNull()) && !jsonObj.get("reportTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportTime").toString()));
      }
      if ((jsonObj.get("sampleFrequency") != null && !jsonObj.get("sampleFrequency").isJsonNull()) && !jsonObj.get("sampleFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sampleFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sampleFrequency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromeManagementV1CpuStatusReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromeManagementV1CpuStatusReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromeManagementV1CpuStatusReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromeManagementV1CpuStatusReport.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromeManagementV1CpuStatusReport>() {
           @Override
           public void write(JsonWriter out, GoogleChromeManagementV1CpuStatusReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromeManagementV1CpuStatusReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromeManagementV1CpuStatusReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromeManagementV1CpuStatusReport
   * @throws IOException if the JSON string is invalid with respect to GoogleChromeManagementV1CpuStatusReport
   */
  public static GoogleChromeManagementV1CpuStatusReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromeManagementV1CpuStatusReport.class);
  }

  /**
   * Convert an instance of GoogleChromeManagementV1CpuStatusReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

