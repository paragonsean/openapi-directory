/*
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleChromeManagementV1BatterySampleReport;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Status data for battery. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDevicePowerStatus](https://chromeenterprise.google/policies/#ReportDevicePowerStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_BATTERY_REPORT
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:04.349803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromeManagementV1BatteryStatusReport {
  /**
   * Output only. Battery health.
   */
  @JsonAdapter(BatteryHealthEnum.Adapter.class)
  public enum BatteryHealthEnum {
    HEALTH_UNSPECIFIED("BATTERY_HEALTH_UNSPECIFIED"),
    
    HEALTH_NORMAL("BATTERY_HEALTH_NORMAL"),
    
    REPLACE_SOON("BATTERY_REPLACE_SOON"),
    
    REPLACE_NOW("BATTERY_REPLACE_NOW");

    private String value;

    BatteryHealthEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BatteryHealthEnum fromValue(String value) {
      for (BatteryHealthEnum b : BatteryHealthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BatteryHealthEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BatteryHealthEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BatteryHealthEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BatteryHealthEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BatteryHealthEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BATTERY_HEALTH = "batteryHealth";
  @SerializedName(SERIALIZED_NAME_BATTERY_HEALTH)
  private BatteryHealthEnum batteryHealth;

  public static final String SERIALIZED_NAME_CYCLE_COUNT = "cycleCount";
  @SerializedName(SERIALIZED_NAME_CYCLE_COUNT)
  private Integer cycleCount;

  public static final String SERIALIZED_NAME_FULL_CHARGE_CAPACITY = "fullChargeCapacity";
  @SerializedName(SERIALIZED_NAME_FULL_CHARGE_CAPACITY)
  private String fullChargeCapacity;

  public static final String SERIALIZED_NAME_REPORT_TIME = "reportTime";
  @SerializedName(SERIALIZED_NAME_REPORT_TIME)
  private String reportTime;

  public static final String SERIALIZED_NAME_SAMPLE = "sample";
  @SerializedName(SERIALIZED_NAME_SAMPLE)
  private List<GoogleChromeManagementV1BatterySampleReport> sample = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public GoogleChromeManagementV1BatteryStatusReport() {
  }

  public GoogleChromeManagementV1BatteryStatusReport(
     BatteryHealthEnum batteryHealth, 
     Integer cycleCount, 
     String fullChargeCapacity, 
     String reportTime, 
     List<GoogleChromeManagementV1BatterySampleReport> sample, 
     String serialNumber
  ) {
    this();
    this.batteryHealth = batteryHealth;
    this.cycleCount = cycleCount;
    this.fullChargeCapacity = fullChargeCapacity;
    this.reportTime = reportTime;
    this.sample = sample;
    this.serialNumber = serialNumber;
  }

  /**
   * Output only. Battery health.
   * @return batteryHealth
   */
  @javax.annotation.Nullable
  public BatteryHealthEnum getBatteryHealth() {
    return batteryHealth;
  }



  /**
   * Output only. Cycle count.
   * @return cycleCount
   */
  @javax.annotation.Nullable
  public Integer getCycleCount() {
    return cycleCount;
  }



  /**
   * Output only. Full charge capacity (mAmpere-hours).
   * @return fullChargeCapacity
   */
  @javax.annotation.Nullable
  public String getFullChargeCapacity() {
    return fullChargeCapacity;
  }



  /**
   * Output only. Timestamp of when the sample was collected on device
   * @return reportTime
   */
  @javax.annotation.Nullable
  public String getReportTime() {
    return reportTime;
  }



  /**
   * Output only. Sampling data for the battery sorted in a decreasing order of report_time.
   * @return sample
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1BatterySampleReport> getSample() {
    return sample;
  }



  /**
   * Output only. Battery serial number.
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromeManagementV1BatteryStatusReport googleChromeManagementV1BatteryStatusReport = (GoogleChromeManagementV1BatteryStatusReport) o;
    return Objects.equals(this.batteryHealth, googleChromeManagementV1BatteryStatusReport.batteryHealth) &&
        Objects.equals(this.cycleCount, googleChromeManagementV1BatteryStatusReport.cycleCount) &&
        Objects.equals(this.fullChargeCapacity, googleChromeManagementV1BatteryStatusReport.fullChargeCapacity) &&
        Objects.equals(this.reportTime, googleChromeManagementV1BatteryStatusReport.reportTime) &&
        Objects.equals(this.sample, googleChromeManagementV1BatteryStatusReport.sample) &&
        Objects.equals(this.serialNumber, googleChromeManagementV1BatteryStatusReport.serialNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batteryHealth, cycleCount, fullChargeCapacity, reportTime, sample, serialNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromeManagementV1BatteryStatusReport {\n");
    sb.append("    batteryHealth: ").append(toIndentedString(batteryHealth)).append("\n");
    sb.append("    cycleCount: ").append(toIndentedString(cycleCount)).append("\n");
    sb.append("    fullChargeCapacity: ").append(toIndentedString(fullChargeCapacity)).append("\n");
    sb.append("    reportTime: ").append(toIndentedString(reportTime)).append("\n");
    sb.append("    sample: ").append(toIndentedString(sample)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("batteryHealth");
    openapiFields.add("cycleCount");
    openapiFields.add("fullChargeCapacity");
    openapiFields.add("reportTime");
    openapiFields.add("sample");
    openapiFields.add("serialNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromeManagementV1BatteryStatusReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromeManagementV1BatteryStatusReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromeManagementV1BatteryStatusReport is not found in the empty JSON string", GoogleChromeManagementV1BatteryStatusReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromeManagementV1BatteryStatusReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromeManagementV1BatteryStatusReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("batteryHealth") != null && !jsonObj.get("batteryHealth").isJsonNull()) && !jsonObj.get("batteryHealth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batteryHealth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batteryHealth").toString()));
      }
      // validate the optional field `batteryHealth`
      if (jsonObj.get("batteryHealth") != null && !jsonObj.get("batteryHealth").isJsonNull()) {
        BatteryHealthEnum.validateJsonElement(jsonObj.get("batteryHealth"));
      }
      if ((jsonObj.get("fullChargeCapacity") != null && !jsonObj.get("fullChargeCapacity").isJsonNull()) && !jsonObj.get("fullChargeCapacity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullChargeCapacity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullChargeCapacity").toString()));
      }
      if ((jsonObj.get("reportTime") != null && !jsonObj.get("reportTime").isJsonNull()) && !jsonObj.get("reportTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportTime").toString()));
      }
      if (jsonObj.get("sample") != null && !jsonObj.get("sample").isJsonNull()) {
        JsonArray jsonArraysample = jsonObj.getAsJsonArray("sample");
        if (jsonArraysample != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sample").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sample` to be an array in the JSON string but got `%s`", jsonObj.get("sample").toString()));
          }

          // validate the optional field `sample` (array)
          for (int i = 0; i < jsonArraysample.size(); i++) {
            GoogleChromeManagementV1BatterySampleReport.validateJsonElement(jsonArraysample.get(i));
          };
        }
      }
      if ((jsonObj.get("serialNumber") != null && !jsonObj.get("serialNumber").isJsonNull()) && !jsonObj.get("serialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serialNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromeManagementV1BatteryStatusReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromeManagementV1BatteryStatusReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromeManagementV1BatteryStatusReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromeManagementV1BatteryStatusReport.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromeManagementV1BatteryStatusReport>() {
           @Override
           public void write(JsonWriter out, GoogleChromeManagementV1BatteryStatusReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromeManagementV1BatteryStatusReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromeManagementV1BatteryStatusReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromeManagementV1BatteryStatusReport
   * @throws IOException if the JSON string is invalid with respect to GoogleChromeManagementV1BatteryStatusReport
   */
  public static GoogleChromeManagementV1BatteryStatusReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromeManagementV1BatteryStatusReport.class);
  }

  /**
   * Convert an instance of GoogleChromeManagementV1BatteryStatusReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

