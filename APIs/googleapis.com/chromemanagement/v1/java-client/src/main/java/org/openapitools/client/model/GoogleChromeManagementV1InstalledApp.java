/*
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes an installed app.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:04.349803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromeManagementV1InstalledApp {
  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  /**
   * Output only. How the app was installed.
   */
  @JsonAdapter(AppInstallTypeEnum.Adapter.class)
  public enum AppInstallTypeEnum {
    APP_INSTALL_TYPE_UNSPECIFIED("APP_INSTALL_TYPE_UNSPECIFIED"),
    
    MULTIPLE("MULTIPLE"),
    
    NORMAL("NORMAL"),
    
    ADMIN("ADMIN"),
    
    DEVELOPMENT("DEVELOPMENT"),
    
    SIDELOAD("SIDELOAD"),
    
    OTHER("OTHER");

    private String value;

    AppInstallTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AppInstallTypeEnum fromValue(String value) {
      for (AppInstallTypeEnum b : AppInstallTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AppInstallTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AppInstallTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AppInstallTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AppInstallTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AppInstallTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APP_INSTALL_TYPE = "appInstallType";
  @SerializedName(SERIALIZED_NAME_APP_INSTALL_TYPE)
  private AppInstallTypeEnum appInstallType;

  /**
   * Output only. Source of the installed app.
   */
  @JsonAdapter(AppSourceEnum.Adapter.class)
  public enum AppSourceEnum {
    APP_SOURCE_UNSPECIFIED("APP_SOURCE_UNSPECIFIED"),
    
    CHROME_WEBSTORE("CHROME_WEBSTORE"),
    
    PLAY_STORE("PLAY_STORE");

    private String value;

    AppSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AppSourceEnum fromValue(String value) {
      for (AppSourceEnum b : AppSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AppSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AppSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AppSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AppSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AppSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APP_SOURCE = "appSource";
  @SerializedName(SERIALIZED_NAME_APP_SOURCE)
  private AppSourceEnum appSource;

  /**
   * Output only. Type of the app.
   */
  @JsonAdapter(AppTypeEnum.Adapter.class)
  public enum AppTypeEnum {
    APP_TYPE_UNSPECIFIED("APP_TYPE_UNSPECIFIED"),
    
    EXTENSION("EXTENSION"),
    
    APP("APP"),
    
    THEME("THEME"),
    
    HOSTED_APP("HOSTED_APP"),
    
    ANDROID_APP("ANDROID_APP");

    private String value;

    AppTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AppTypeEnum fromValue(String value) {
      for (AppTypeEnum b : AppTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AppTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AppTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AppTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AppTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AppTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APP_TYPE = "appType";
  @SerializedName(SERIALIZED_NAME_APP_TYPE)
  private AppTypeEnum appType;

  public static final String SERIALIZED_NAME_BROWSER_DEVICE_COUNT = "browserDeviceCount";
  @SerializedName(SERIALIZED_NAME_BROWSER_DEVICE_COUNT)
  private String browserDeviceCount;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_HOMEPAGE_URI = "homepageUri";
  @SerializedName(SERIALIZED_NAME_HOMEPAGE_URI)
  private String homepageUri;

  public static final String SERIALIZED_NAME_OS_USER_COUNT = "osUserCount";
  @SerializedName(SERIALIZED_NAME_OS_USER_COUNT)
  private String osUserCount;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List<String> permissions = new ArrayList<>();

  public GoogleChromeManagementV1InstalledApp() {
  }

  public GoogleChromeManagementV1InstalledApp(
     String appId, 
     AppInstallTypeEnum appInstallType, 
     AppSourceEnum appSource, 
     AppTypeEnum appType, 
     String browserDeviceCount, 
     String description, 
     Boolean disabled, 
     String displayName, 
     String homepageUri, 
     String osUserCount, 
     List<String> permissions
  ) {
    this();
    this.appId = appId;
    this.appInstallType = appInstallType;
    this.appSource = appSource;
    this.appType = appType;
    this.browserDeviceCount = browserDeviceCount;
    this.description = description;
    this.disabled = disabled;
    this.displayName = displayName;
    this.homepageUri = homepageUri;
    this.osUserCount = osUserCount;
    this.permissions = permissions;
  }

  /**
   * Output only. Unique identifier of the app. For Chrome apps and extensions, the 32-character id (e.g. ehoadneljpdggcbbknedodolkkjodefl). For Android apps, the package name (e.g. com.evernote).
   * @return appId
   */
  @javax.annotation.Nullable
  public String getAppId() {
    return appId;
  }



  /**
   * Output only. How the app was installed.
   * @return appInstallType
   */
  @javax.annotation.Nullable
  public AppInstallTypeEnum getAppInstallType() {
    return appInstallType;
  }



  /**
   * Output only. Source of the installed app.
   * @return appSource
   */
  @javax.annotation.Nullable
  public AppSourceEnum getAppSource() {
    return appSource;
  }



  /**
   * Output only. Type of the app.
   * @return appType
   */
  @javax.annotation.Nullable
  public AppTypeEnum getAppType() {
    return appType;
  }



  /**
   * Output only. Count of browser devices with this app installed.
   * @return browserDeviceCount
   */
  @javax.annotation.Nullable
  public String getBrowserDeviceCount() {
    return browserDeviceCount;
  }



  /**
   * Output only. Description of the installed app.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Output only. Whether the app is disabled.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }



  /**
   * Output only. Name of the installed app.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * Output only. Homepage uri of the installed app.
   * @return homepageUri
   */
  @javax.annotation.Nullable
  public String getHomepageUri() {
    return homepageUri;
  }



  /**
   * Output only. Count of ChromeOS users with this app installed.
   * @return osUserCount
   */
  @javax.annotation.Nullable
  public String getOsUserCount() {
    return osUserCount;
  }



  /**
   * Output only. Permissions of the installed app.
   * @return permissions
   */
  @javax.annotation.Nullable
  public List<String> getPermissions() {
    return permissions;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromeManagementV1InstalledApp googleChromeManagementV1InstalledApp = (GoogleChromeManagementV1InstalledApp) o;
    return Objects.equals(this.appId, googleChromeManagementV1InstalledApp.appId) &&
        Objects.equals(this.appInstallType, googleChromeManagementV1InstalledApp.appInstallType) &&
        Objects.equals(this.appSource, googleChromeManagementV1InstalledApp.appSource) &&
        Objects.equals(this.appType, googleChromeManagementV1InstalledApp.appType) &&
        Objects.equals(this.browserDeviceCount, googleChromeManagementV1InstalledApp.browserDeviceCount) &&
        Objects.equals(this.description, googleChromeManagementV1InstalledApp.description) &&
        Objects.equals(this.disabled, googleChromeManagementV1InstalledApp.disabled) &&
        Objects.equals(this.displayName, googleChromeManagementV1InstalledApp.displayName) &&
        Objects.equals(this.homepageUri, googleChromeManagementV1InstalledApp.homepageUri) &&
        Objects.equals(this.osUserCount, googleChromeManagementV1InstalledApp.osUserCount) &&
        Objects.equals(this.permissions, googleChromeManagementV1InstalledApp.permissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, appInstallType, appSource, appType, browserDeviceCount, description, disabled, displayName, homepageUri, osUserCount, permissions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromeManagementV1InstalledApp {\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    appInstallType: ").append(toIndentedString(appInstallType)).append("\n");
    sb.append("    appSource: ").append(toIndentedString(appSource)).append("\n");
    sb.append("    appType: ").append(toIndentedString(appType)).append("\n");
    sb.append("    browserDeviceCount: ").append(toIndentedString(browserDeviceCount)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    homepageUri: ").append(toIndentedString(homepageUri)).append("\n");
    sb.append("    osUserCount: ").append(toIndentedString(osUserCount)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appId");
    openapiFields.add("appInstallType");
    openapiFields.add("appSource");
    openapiFields.add("appType");
    openapiFields.add("browserDeviceCount");
    openapiFields.add("description");
    openapiFields.add("disabled");
    openapiFields.add("displayName");
    openapiFields.add("homepageUri");
    openapiFields.add("osUserCount");
    openapiFields.add("permissions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromeManagementV1InstalledApp
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromeManagementV1InstalledApp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromeManagementV1InstalledApp is not found in the empty JSON string", GoogleChromeManagementV1InstalledApp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromeManagementV1InstalledApp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromeManagementV1InstalledApp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appId") != null && !jsonObj.get("appId").isJsonNull()) && !jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      if ((jsonObj.get("appInstallType") != null && !jsonObj.get("appInstallType").isJsonNull()) && !jsonObj.get("appInstallType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appInstallType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appInstallType").toString()));
      }
      // validate the optional field `appInstallType`
      if (jsonObj.get("appInstallType") != null && !jsonObj.get("appInstallType").isJsonNull()) {
        AppInstallTypeEnum.validateJsonElement(jsonObj.get("appInstallType"));
      }
      if ((jsonObj.get("appSource") != null && !jsonObj.get("appSource").isJsonNull()) && !jsonObj.get("appSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appSource").toString()));
      }
      // validate the optional field `appSource`
      if (jsonObj.get("appSource") != null && !jsonObj.get("appSource").isJsonNull()) {
        AppSourceEnum.validateJsonElement(jsonObj.get("appSource"));
      }
      if ((jsonObj.get("appType") != null && !jsonObj.get("appType").isJsonNull()) && !jsonObj.get("appType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appType").toString()));
      }
      // validate the optional field `appType`
      if (jsonObj.get("appType") != null && !jsonObj.get("appType").isJsonNull()) {
        AppTypeEnum.validateJsonElement(jsonObj.get("appType"));
      }
      if ((jsonObj.get("browserDeviceCount") != null && !jsonObj.get("browserDeviceCount").isJsonNull()) && !jsonObj.get("browserDeviceCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browserDeviceCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserDeviceCount").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("homepageUri") != null && !jsonObj.get("homepageUri").isJsonNull()) && !jsonObj.get("homepageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homepageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homepageUri").toString()));
      }
      if ((jsonObj.get("osUserCount") != null && !jsonObj.get("osUserCount").isJsonNull()) && !jsonObj.get("osUserCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osUserCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osUserCount").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull() && !jsonObj.get("permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromeManagementV1InstalledApp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromeManagementV1InstalledApp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromeManagementV1InstalledApp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromeManagementV1InstalledApp.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromeManagementV1InstalledApp>() {
           @Override
           public void write(JsonWriter out, GoogleChromeManagementV1InstalledApp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromeManagementV1InstalledApp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromeManagementV1InstalledApp given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromeManagementV1InstalledApp
   * @throws IOException if the JSON string is invalid with respect to GoogleChromeManagementV1InstalledApp
   */
  public static GoogleChromeManagementV1InstalledApp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromeManagementV1InstalledApp.class);
  }

  /**
   * Convert an instance of GoogleChromeManagementV1InstalledApp to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

