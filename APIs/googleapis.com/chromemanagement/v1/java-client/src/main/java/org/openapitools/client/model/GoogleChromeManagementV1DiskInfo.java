/*
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Status of the single storage device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:04.349803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromeManagementV1DiskInfo {
  public static final String SERIALIZED_NAME_BYTES_READ_THIS_SESSION = "bytesReadThisSession";
  @SerializedName(SERIALIZED_NAME_BYTES_READ_THIS_SESSION)
  private String bytesReadThisSession;

  public static final String SERIALIZED_NAME_BYTES_WRITTEN_THIS_SESSION = "bytesWrittenThisSession";
  @SerializedName(SERIALIZED_NAME_BYTES_WRITTEN_THIS_SESSION)
  private String bytesWrittenThisSession;

  public static final String SERIALIZED_NAME_DISCARD_TIME_THIS_SESSION = "discardTimeThisSession";
  @SerializedName(SERIALIZED_NAME_DISCARD_TIME_THIS_SESSION)
  private String discardTimeThisSession;

  public static final String SERIALIZED_NAME_HEALTH = "health";
  @SerializedName(SERIALIZED_NAME_HEALTH)
  private String health;

  public static final String SERIALIZED_NAME_IO_TIME_THIS_SESSION = "ioTimeThisSession";
  @SerializedName(SERIALIZED_NAME_IO_TIME_THIS_SESSION)
  private String ioTimeThisSession;

  public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER)
  private String manufacturer;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_READ_TIME_THIS_SESSION = "readTimeThisSession";
  @SerializedName(SERIALIZED_NAME_READ_TIME_THIS_SESSION)
  private String readTimeThisSession;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_SIZE_BYTES = "sizeBytes";
  @SerializedName(SERIALIZED_NAME_SIZE_BYTES)
  private String sizeBytes;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VOLUME_IDS = "volumeIds";
  @SerializedName(SERIALIZED_NAME_VOLUME_IDS)
  private List<String> volumeIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_WRITE_TIME_THIS_SESSION = "writeTimeThisSession";
  @SerializedName(SERIALIZED_NAME_WRITE_TIME_THIS_SESSION)
  private String writeTimeThisSession;

  public GoogleChromeManagementV1DiskInfo() {
  }

  public GoogleChromeManagementV1DiskInfo(
     String bytesReadThisSession, 
     String bytesWrittenThisSession, 
     String discardTimeThisSession, 
     String health, 
     String ioTimeThisSession, 
     String manufacturer, 
     String model, 
     String readTimeThisSession, 
     String serialNumber, 
     String sizeBytes, 
     String type, 
     List<String> volumeIds, 
     String writeTimeThisSession
  ) {
    this();
    this.bytesReadThisSession = bytesReadThisSession;
    this.bytesWrittenThisSession = bytesWrittenThisSession;
    this.discardTimeThisSession = discardTimeThisSession;
    this.health = health;
    this.ioTimeThisSession = ioTimeThisSession;
    this.manufacturer = manufacturer;
    this.model = model;
    this.readTimeThisSession = readTimeThisSession;
    this.serialNumber = serialNumber;
    this.sizeBytes = sizeBytes;
    this.type = type;
    this.volumeIds = volumeIds;
    this.writeTimeThisSession = writeTimeThisSession;
  }

  /**
   * Output only. Number of bytes read since last boot.
   * @return bytesReadThisSession
   */
  @javax.annotation.Nullable
  public String getBytesReadThisSession() {
    return bytesReadThisSession;
  }



  /**
   * Output only. Number of bytes written since last boot.
   * @return bytesWrittenThisSession
   */
  @javax.annotation.Nullable
  public String getBytesWrittenThisSession() {
    return bytesWrittenThisSession;
  }



  /**
   * Output only. Time spent discarding since last boot. Discarding is writing to clear blocks which are no longer in use. Supported on kernels 4.18+.
   * @return discardTimeThisSession
   */
  @javax.annotation.Nullable
  public String getDiscardTimeThisSession() {
    return discardTimeThisSession;
  }



  /**
   * Output only. Disk health.
   * @return health
   */
  @javax.annotation.Nullable
  public String getHealth() {
    return health;
  }



  /**
   * Output only. Counts the time the disk and queue were busy, so unlike the fields above, parallel requests are not counted multiple times.
   * @return ioTimeThisSession
   */
  @javax.annotation.Nullable
  public String getIoTimeThisSession() {
    return ioTimeThisSession;
  }



  /**
   * Output only. Disk manufacturer.
   * @return manufacturer
   */
  @javax.annotation.Nullable
  public String getManufacturer() {
    return manufacturer;
  }



  /**
   * Output only. Disk model.
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }



  /**
   * Output only. Time spent reading from disk since last boot.
   * @return readTimeThisSession
   */
  @javax.annotation.Nullable
  public String getReadTimeThisSession() {
    return readTimeThisSession;
  }



  /**
   * Output only. Disk serial number.
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }



  /**
   * Output only. Disk size.
   * @return sizeBytes
   */
  @javax.annotation.Nullable
  public String getSizeBytes() {
    return sizeBytes;
  }



  /**
   * Output only. Disk type: eMMC / NVMe / ATA / SCSI.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }



  /**
   * Output only. Disk volumes.
   * @return volumeIds
   */
  @javax.annotation.Nullable
  public List<String> getVolumeIds() {
    return volumeIds;
  }



  /**
   * Output only. Time spent writing to disk since last boot.
   * @return writeTimeThisSession
   */
  @javax.annotation.Nullable
  public String getWriteTimeThisSession() {
    return writeTimeThisSession;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromeManagementV1DiskInfo googleChromeManagementV1DiskInfo = (GoogleChromeManagementV1DiskInfo) o;
    return Objects.equals(this.bytesReadThisSession, googleChromeManagementV1DiskInfo.bytesReadThisSession) &&
        Objects.equals(this.bytesWrittenThisSession, googleChromeManagementV1DiskInfo.bytesWrittenThisSession) &&
        Objects.equals(this.discardTimeThisSession, googleChromeManagementV1DiskInfo.discardTimeThisSession) &&
        Objects.equals(this.health, googleChromeManagementV1DiskInfo.health) &&
        Objects.equals(this.ioTimeThisSession, googleChromeManagementV1DiskInfo.ioTimeThisSession) &&
        Objects.equals(this.manufacturer, googleChromeManagementV1DiskInfo.manufacturer) &&
        Objects.equals(this.model, googleChromeManagementV1DiskInfo.model) &&
        Objects.equals(this.readTimeThisSession, googleChromeManagementV1DiskInfo.readTimeThisSession) &&
        Objects.equals(this.serialNumber, googleChromeManagementV1DiskInfo.serialNumber) &&
        Objects.equals(this.sizeBytes, googleChromeManagementV1DiskInfo.sizeBytes) &&
        Objects.equals(this.type, googleChromeManagementV1DiskInfo.type) &&
        Objects.equals(this.volumeIds, googleChromeManagementV1DiskInfo.volumeIds) &&
        Objects.equals(this.writeTimeThisSession, googleChromeManagementV1DiskInfo.writeTimeThisSession);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bytesReadThisSession, bytesWrittenThisSession, discardTimeThisSession, health, ioTimeThisSession, manufacturer, model, readTimeThisSession, serialNumber, sizeBytes, type, volumeIds, writeTimeThisSession);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromeManagementV1DiskInfo {\n");
    sb.append("    bytesReadThisSession: ").append(toIndentedString(bytesReadThisSession)).append("\n");
    sb.append("    bytesWrittenThisSession: ").append(toIndentedString(bytesWrittenThisSession)).append("\n");
    sb.append("    discardTimeThisSession: ").append(toIndentedString(discardTimeThisSession)).append("\n");
    sb.append("    health: ").append(toIndentedString(health)).append("\n");
    sb.append("    ioTimeThisSession: ").append(toIndentedString(ioTimeThisSession)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    readTimeThisSession: ").append(toIndentedString(readTimeThisSession)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    sizeBytes: ").append(toIndentedString(sizeBytes)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    volumeIds: ").append(toIndentedString(volumeIds)).append("\n");
    sb.append("    writeTimeThisSession: ").append(toIndentedString(writeTimeThisSession)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bytesReadThisSession");
    openapiFields.add("bytesWrittenThisSession");
    openapiFields.add("discardTimeThisSession");
    openapiFields.add("health");
    openapiFields.add("ioTimeThisSession");
    openapiFields.add("manufacturer");
    openapiFields.add("model");
    openapiFields.add("readTimeThisSession");
    openapiFields.add("serialNumber");
    openapiFields.add("sizeBytes");
    openapiFields.add("type");
    openapiFields.add("volumeIds");
    openapiFields.add("writeTimeThisSession");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromeManagementV1DiskInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromeManagementV1DiskInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromeManagementV1DiskInfo is not found in the empty JSON string", GoogleChromeManagementV1DiskInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromeManagementV1DiskInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromeManagementV1DiskInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bytesReadThisSession") != null && !jsonObj.get("bytesReadThisSession").isJsonNull()) && !jsonObj.get("bytesReadThisSession").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bytesReadThisSession` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bytesReadThisSession").toString()));
      }
      if ((jsonObj.get("bytesWrittenThisSession") != null && !jsonObj.get("bytesWrittenThisSession").isJsonNull()) && !jsonObj.get("bytesWrittenThisSession").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bytesWrittenThisSession` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bytesWrittenThisSession").toString()));
      }
      if ((jsonObj.get("discardTimeThisSession") != null && !jsonObj.get("discardTimeThisSession").isJsonNull()) && !jsonObj.get("discardTimeThisSession").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discardTimeThisSession` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discardTimeThisSession").toString()));
      }
      if ((jsonObj.get("health") != null && !jsonObj.get("health").isJsonNull()) && !jsonObj.get("health").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `health` to be a primitive type in the JSON string but got `%s`", jsonObj.get("health").toString()));
      }
      if ((jsonObj.get("ioTimeThisSession") != null && !jsonObj.get("ioTimeThisSession").isJsonNull()) && !jsonObj.get("ioTimeThisSession").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ioTimeThisSession` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ioTimeThisSession").toString()));
      }
      if ((jsonObj.get("manufacturer") != null && !jsonObj.get("manufacturer").isJsonNull()) && !jsonObj.get("manufacturer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manufacturer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manufacturer").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("readTimeThisSession") != null && !jsonObj.get("readTimeThisSession").isJsonNull()) && !jsonObj.get("readTimeThisSession").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readTimeThisSession` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readTimeThisSession").toString()));
      }
      if ((jsonObj.get("serialNumber") != null && !jsonObj.get("serialNumber").isJsonNull()) && !jsonObj.get("serialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serialNumber").toString()));
      }
      if ((jsonObj.get("sizeBytes") != null && !jsonObj.get("sizeBytes").isJsonNull()) && !jsonObj.get("sizeBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sizeBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sizeBytes").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("volumeIds") != null && !jsonObj.get("volumeIds").isJsonNull() && !jsonObj.get("volumeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeIds` to be an array in the JSON string but got `%s`", jsonObj.get("volumeIds").toString()));
      }
      if ((jsonObj.get("writeTimeThisSession") != null && !jsonObj.get("writeTimeThisSession").isJsonNull()) && !jsonObj.get("writeTimeThisSession").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `writeTimeThisSession` to be a primitive type in the JSON string but got `%s`", jsonObj.get("writeTimeThisSession").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromeManagementV1DiskInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromeManagementV1DiskInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromeManagementV1DiskInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromeManagementV1DiskInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromeManagementV1DiskInfo>() {
           @Override
           public void write(JsonWriter out, GoogleChromeManagementV1DiskInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromeManagementV1DiskInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromeManagementV1DiskInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromeManagementV1DiskInfo
   * @throws IOException if the JSON string is invalid with respect to GoogleChromeManagementV1DiskInfo
   */
  public static GoogleChromeManagementV1DiskInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromeManagementV1DiskInfo.class);
  }

  /**
   * Convert an instance of GoogleChromeManagementV1DiskInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

