/*
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information regarding the current OS update status. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceOsUpdateStatus](https://chromeenterprise.google/policies/#ReportDeviceOsUpdateStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_OS_REPORT
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:04.349803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromeManagementV1OsUpdateStatus {
  public static final String SERIALIZED_NAME_LAST_REBOOT_TIME = "lastRebootTime";
  @SerializedName(SERIALIZED_NAME_LAST_REBOOT_TIME)
  private String lastRebootTime;

  public static final String SERIALIZED_NAME_LAST_UPDATE_CHECK_TIME = "lastUpdateCheckTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_CHECK_TIME)
  private String lastUpdateCheckTime;

  public static final String SERIALIZED_NAME_LAST_UPDATE_TIME = "lastUpdateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TIME)
  private String lastUpdateTime;

  public static final String SERIALIZED_NAME_NEW_PLATFORM_VERSION = "newPlatformVersion";
  @SerializedName(SERIALIZED_NAME_NEW_PLATFORM_VERSION)
  private String newPlatformVersion;

  public static final String SERIALIZED_NAME_NEW_REQUESTED_PLATFORM_VERSION = "newRequestedPlatformVersion";
  @SerializedName(SERIALIZED_NAME_NEW_REQUESTED_PLATFORM_VERSION)
  private String newRequestedPlatformVersion;

  /**
   * Output only. Current state of the os update.
   */
  @JsonAdapter(UpdateStateEnum.Adapter.class)
  public enum UpdateStateEnum {
    UPDATE_STATE_UNSPECIFIED("UPDATE_STATE_UNSPECIFIED"),
    
    OS_IMAGE_DOWNLOAD_NOT_STARTED("OS_IMAGE_DOWNLOAD_NOT_STARTED"),
    
    OS_IMAGE_DOWNLOAD_IN_PROGRESS("OS_IMAGE_DOWNLOAD_IN_PROGRESS"),
    
    OS_UPDATE_NEED_REBOOT("OS_UPDATE_NEED_REBOOT");

    private String value;

    UpdateStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UpdateStateEnum fromValue(String value) {
      for (UpdateStateEnum b : UpdateStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UpdateStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UpdateStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UpdateStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UpdateStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UpdateStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UPDATE_STATE = "updateState";
  @SerializedName(SERIALIZED_NAME_UPDATE_STATE)
  private UpdateStateEnum updateState;

  public GoogleChromeManagementV1OsUpdateStatus() {
  }

  public GoogleChromeManagementV1OsUpdateStatus(
     String lastRebootTime, 
     String lastUpdateCheckTime, 
     String lastUpdateTime, 
     String newPlatformVersion, 
     String newRequestedPlatformVersion, 
     UpdateStateEnum updateState
  ) {
    this();
    this.lastRebootTime = lastRebootTime;
    this.lastUpdateCheckTime = lastUpdateCheckTime;
    this.lastUpdateTime = lastUpdateTime;
    this.newPlatformVersion = newPlatformVersion;
    this.newRequestedPlatformVersion = newRequestedPlatformVersion;
    this.updateState = updateState;
  }

  /**
   * Output only. Timestamp of the last reboot.
   * @return lastRebootTime
   */
  @javax.annotation.Nullable
  public String getLastRebootTime() {
    return lastRebootTime;
  }



  /**
   * Output only. Timestamp of the last update check.
   * @return lastUpdateCheckTime
   */
  @javax.annotation.Nullable
  public String getLastUpdateCheckTime() {
    return lastUpdateCheckTime;
  }



  /**
   * Output only. Timestamp of the last successful update.
   * @return lastUpdateTime
   */
  @javax.annotation.Nullable
  public String getLastUpdateTime() {
    return lastUpdateTime;
  }



  /**
   * Output only. New platform version of the os image being downloaded and applied. It is only set when update status is OS_IMAGE_DOWNLOAD_IN_PROGRESS or OS_UPDATE_NEED_REBOOT. Note this could be a dummy \&quot;0.0.0.0\&quot; for OS_UPDATE_NEED_REBOOT status for some edge cases, e.g. update engine is restarted without a reboot.
   * @return newPlatformVersion
   */
  @javax.annotation.Nullable
  public String getNewPlatformVersion() {
    return newPlatformVersion;
  }



  /**
   * Output only. New requested platform version from the pending updated kiosk app.
   * @return newRequestedPlatformVersion
   */
  @javax.annotation.Nullable
  public String getNewRequestedPlatformVersion() {
    return newRequestedPlatformVersion;
  }



  /**
   * Output only. Current state of the os update.
   * @return updateState
   */
  @javax.annotation.Nullable
  public UpdateStateEnum getUpdateState() {
    return updateState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromeManagementV1OsUpdateStatus googleChromeManagementV1OsUpdateStatus = (GoogleChromeManagementV1OsUpdateStatus) o;
    return Objects.equals(this.lastRebootTime, googleChromeManagementV1OsUpdateStatus.lastRebootTime) &&
        Objects.equals(this.lastUpdateCheckTime, googleChromeManagementV1OsUpdateStatus.lastUpdateCheckTime) &&
        Objects.equals(this.lastUpdateTime, googleChromeManagementV1OsUpdateStatus.lastUpdateTime) &&
        Objects.equals(this.newPlatformVersion, googleChromeManagementV1OsUpdateStatus.newPlatformVersion) &&
        Objects.equals(this.newRequestedPlatformVersion, googleChromeManagementV1OsUpdateStatus.newRequestedPlatformVersion) &&
        Objects.equals(this.updateState, googleChromeManagementV1OsUpdateStatus.updateState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastRebootTime, lastUpdateCheckTime, lastUpdateTime, newPlatformVersion, newRequestedPlatformVersion, updateState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromeManagementV1OsUpdateStatus {\n");
    sb.append("    lastRebootTime: ").append(toIndentedString(lastRebootTime)).append("\n");
    sb.append("    lastUpdateCheckTime: ").append(toIndentedString(lastUpdateCheckTime)).append("\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("    newPlatformVersion: ").append(toIndentedString(newPlatformVersion)).append("\n");
    sb.append("    newRequestedPlatformVersion: ").append(toIndentedString(newRequestedPlatformVersion)).append("\n");
    sb.append("    updateState: ").append(toIndentedString(updateState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lastRebootTime");
    openapiFields.add("lastUpdateCheckTime");
    openapiFields.add("lastUpdateTime");
    openapiFields.add("newPlatformVersion");
    openapiFields.add("newRequestedPlatformVersion");
    openapiFields.add("updateState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromeManagementV1OsUpdateStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromeManagementV1OsUpdateStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromeManagementV1OsUpdateStatus is not found in the empty JSON string", GoogleChromeManagementV1OsUpdateStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromeManagementV1OsUpdateStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromeManagementV1OsUpdateStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("lastRebootTime") != null && !jsonObj.get("lastRebootTime").isJsonNull()) && !jsonObj.get("lastRebootTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastRebootTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastRebootTime").toString()));
      }
      if ((jsonObj.get("lastUpdateCheckTime") != null && !jsonObj.get("lastUpdateCheckTime").isJsonNull()) && !jsonObj.get("lastUpdateCheckTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdateCheckTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdateCheckTime").toString()));
      }
      if ((jsonObj.get("lastUpdateTime") != null && !jsonObj.get("lastUpdateTime").isJsonNull()) && !jsonObj.get("lastUpdateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdateTime").toString()));
      }
      if ((jsonObj.get("newPlatformVersion") != null && !jsonObj.get("newPlatformVersion").isJsonNull()) && !jsonObj.get("newPlatformVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newPlatformVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newPlatformVersion").toString()));
      }
      if ((jsonObj.get("newRequestedPlatformVersion") != null && !jsonObj.get("newRequestedPlatformVersion").isJsonNull()) && !jsonObj.get("newRequestedPlatformVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newRequestedPlatformVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newRequestedPlatformVersion").toString()));
      }
      if ((jsonObj.get("updateState") != null && !jsonObj.get("updateState").isJsonNull()) && !jsonObj.get("updateState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateState").toString()));
      }
      // validate the optional field `updateState`
      if (jsonObj.get("updateState") != null && !jsonObj.get("updateState").isJsonNull()) {
        UpdateStateEnum.validateJsonElement(jsonObj.get("updateState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromeManagementV1OsUpdateStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromeManagementV1OsUpdateStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromeManagementV1OsUpdateStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromeManagementV1OsUpdateStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromeManagementV1OsUpdateStatus>() {
           @Override
           public void write(JsonWriter out, GoogleChromeManagementV1OsUpdateStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromeManagementV1OsUpdateStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromeManagementV1OsUpdateStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromeManagementV1OsUpdateStatus
   * @throws IOException if the JSON string is invalid with respect to GoogleChromeManagementV1OsUpdateStatus
   */
  public static GoogleChromeManagementV1OsUpdateStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromeManagementV1OsUpdateStatus.class);
  }

  /**
   * Convert an instance of GoogleChromeManagementV1OsUpdateStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

