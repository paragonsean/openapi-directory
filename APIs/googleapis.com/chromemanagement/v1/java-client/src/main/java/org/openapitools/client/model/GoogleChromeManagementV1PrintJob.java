/*
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a request to print a document that has been submitted to a printer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:04.349803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromeManagementV1PrintJob {
  /**
   * Color mode.
   */
  @JsonAdapter(ColorModeEnum.Adapter.class)
  public enum ColorModeEnum {
    COLOR_MODE_UNSPECIFIED("COLOR_MODE_UNSPECIFIED"),
    
    BLACK_AND_WHITE("BLACK_AND_WHITE"),
    
    COLOR("COLOR");

    private String value;

    ColorModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ColorModeEnum fromValue(String value) {
      for (ColorModeEnum b : ColorModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ColorModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ColorModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ColorModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ColorModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ColorModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COLOR_MODE = "colorMode";
  @SerializedName(SERIALIZED_NAME_COLOR_MODE)
  private ColorModeEnum colorMode;

  public static final String SERIALIZED_NAME_COMPLETE_TIME = "completeTime";
  @SerializedName(SERIALIZED_NAME_COMPLETE_TIME)
  private String completeTime;

  public static final String SERIALIZED_NAME_COPY_COUNT = "copyCount";
  @SerializedName(SERIALIZED_NAME_COPY_COUNT)
  private Integer copyCount;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DOCUMENT_PAGE_COUNT = "documentPageCount";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_PAGE_COUNT)
  private Integer documentPageCount;

  /**
   * Duplex mode.
   */
  @JsonAdapter(DuplexModeEnum.Adapter.class)
  public enum DuplexModeEnum {
    DUPLEX_MODE_UNSPECIFIED("DUPLEX_MODE_UNSPECIFIED"),
    
    ONE_SIDED("ONE_SIDED"),
    
    TWO_SIDED_LONG_EDGE("TWO_SIDED_LONG_EDGE"),
    
    TWO_SIDED_SHORT_EDGE("TWO_SIDED_SHORT_EDGE");

    private String value;

    DuplexModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DuplexModeEnum fromValue(String value) {
      for (DuplexModeEnum b : DuplexModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DuplexModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DuplexModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DuplexModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DuplexModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DuplexModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DUPLEX_MODE = "duplexMode";
  @SerializedName(SERIALIZED_NAME_DUPLEX_MODE)
  private DuplexModeEnum duplexMode;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PRINTER = "printer";
  @SerializedName(SERIALIZED_NAME_PRINTER)
  private String printer;

  public static final String SERIALIZED_NAME_PRINTER_ID = "printerId";
  @SerializedName(SERIALIZED_NAME_PRINTER_ID)
  private String printerId;

  /**
   * The final state of the job.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    PRINTED("PRINTED"),
    
    CANCELLED("CANCELLED"),
    
    FAILED("FAILED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_USER_EMAIL = "userEmail";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public GoogleChromeManagementV1PrintJob() {
  }

  public GoogleChromeManagementV1PrintJob colorMode(ColorModeEnum colorMode) {
    this.colorMode = colorMode;
    return this;
  }

  /**
   * Color mode.
   * @return colorMode
   */
  @javax.annotation.Nullable
  public ColorModeEnum getColorMode() {
    return colorMode;
  }

  public void setColorMode(ColorModeEnum colorMode) {
    this.colorMode = colorMode;
  }


  public GoogleChromeManagementV1PrintJob completeTime(String completeTime) {
    this.completeTime = completeTime;
    return this;
  }

  /**
   * Print job completion timestamp.
   * @return completeTime
   */
  @javax.annotation.Nullable
  public String getCompleteTime() {
    return completeTime;
  }

  public void setCompleteTime(String completeTime) {
    this.completeTime = completeTime;
  }


  public GoogleChromeManagementV1PrintJob copyCount(Integer copyCount) {
    this.copyCount = copyCount;
    return this;
  }

  /**
   * Number of copies.
   * @return copyCount
   */
  @javax.annotation.Nullable
  public Integer getCopyCount() {
    return copyCount;
  }

  public void setCopyCount(Integer copyCount) {
    this.copyCount = copyCount;
  }


  public GoogleChromeManagementV1PrintJob createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Print job creation timestamp.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public GoogleChromeManagementV1PrintJob documentPageCount(Integer documentPageCount) {
    this.documentPageCount = documentPageCount;
    return this;
  }

  /**
   * Number of pages in the document.
   * @return documentPageCount
   */
  @javax.annotation.Nullable
  public Integer getDocumentPageCount() {
    return documentPageCount;
  }

  public void setDocumentPageCount(Integer documentPageCount) {
    this.documentPageCount = documentPageCount;
  }


  public GoogleChromeManagementV1PrintJob duplexMode(DuplexModeEnum duplexMode) {
    this.duplexMode = duplexMode;
    return this;
  }

  /**
   * Duplex mode.
   * @return duplexMode
   */
  @javax.annotation.Nullable
  public DuplexModeEnum getDuplexMode() {
    return duplexMode;
  }

  public void setDuplexMode(DuplexModeEnum duplexMode) {
    this.duplexMode = duplexMode;
  }


  public GoogleChromeManagementV1PrintJob id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique ID of the print job.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GoogleChromeManagementV1PrintJob printer(String printer) {
    this.printer = printer;
    return this;
  }

  /**
   * Name of the printer used for printing.
   * @return printer
   */
  @javax.annotation.Nullable
  public String getPrinter() {
    return printer;
  }

  public void setPrinter(String printer) {
    this.printer = printer;
  }


  public GoogleChromeManagementV1PrintJob printerId(String printerId) {
    this.printerId = printerId;
    return this;
  }

  /**
   * API ID of the printer used for printing.
   * @return printerId
   */
  @javax.annotation.Nullable
  public String getPrinterId() {
    return printerId;
  }

  public void setPrinterId(String printerId) {
    this.printerId = printerId;
  }


  public GoogleChromeManagementV1PrintJob state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The final state of the job.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public GoogleChromeManagementV1PrintJob title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the document.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public GoogleChromeManagementV1PrintJob userEmail(String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

  /**
   * The primary e-mail address of the user who submitted the print job.
   * @return userEmail
   */
  @javax.annotation.Nullable
  public String getUserEmail() {
    return userEmail;
  }

  public void setUserEmail(String userEmail) {
    this.userEmail = userEmail;
  }


  public GoogleChromeManagementV1PrintJob userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The unique Directory API ID of the user who submitted the print job.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromeManagementV1PrintJob googleChromeManagementV1PrintJob = (GoogleChromeManagementV1PrintJob) o;
    return Objects.equals(this.colorMode, googleChromeManagementV1PrintJob.colorMode) &&
        Objects.equals(this.completeTime, googleChromeManagementV1PrintJob.completeTime) &&
        Objects.equals(this.copyCount, googleChromeManagementV1PrintJob.copyCount) &&
        Objects.equals(this.createTime, googleChromeManagementV1PrintJob.createTime) &&
        Objects.equals(this.documentPageCount, googleChromeManagementV1PrintJob.documentPageCount) &&
        Objects.equals(this.duplexMode, googleChromeManagementV1PrintJob.duplexMode) &&
        Objects.equals(this.id, googleChromeManagementV1PrintJob.id) &&
        Objects.equals(this.printer, googleChromeManagementV1PrintJob.printer) &&
        Objects.equals(this.printerId, googleChromeManagementV1PrintJob.printerId) &&
        Objects.equals(this.state, googleChromeManagementV1PrintJob.state) &&
        Objects.equals(this.title, googleChromeManagementV1PrintJob.title) &&
        Objects.equals(this.userEmail, googleChromeManagementV1PrintJob.userEmail) &&
        Objects.equals(this.userId, googleChromeManagementV1PrintJob.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colorMode, completeTime, copyCount, createTime, documentPageCount, duplexMode, id, printer, printerId, state, title, userEmail, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromeManagementV1PrintJob {\n");
    sb.append("    colorMode: ").append(toIndentedString(colorMode)).append("\n");
    sb.append("    completeTime: ").append(toIndentedString(completeTime)).append("\n");
    sb.append("    copyCount: ").append(toIndentedString(copyCount)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    documentPageCount: ").append(toIndentedString(documentPageCount)).append("\n");
    sb.append("    duplexMode: ").append(toIndentedString(duplexMode)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    printer: ").append(toIndentedString(printer)).append("\n");
    sb.append("    printerId: ").append(toIndentedString(printerId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colorMode");
    openapiFields.add("completeTime");
    openapiFields.add("copyCount");
    openapiFields.add("createTime");
    openapiFields.add("documentPageCount");
    openapiFields.add("duplexMode");
    openapiFields.add("id");
    openapiFields.add("printer");
    openapiFields.add("printerId");
    openapiFields.add("state");
    openapiFields.add("title");
    openapiFields.add("userEmail");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromeManagementV1PrintJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromeManagementV1PrintJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromeManagementV1PrintJob is not found in the empty JSON string", GoogleChromeManagementV1PrintJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromeManagementV1PrintJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromeManagementV1PrintJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("colorMode") != null && !jsonObj.get("colorMode").isJsonNull()) && !jsonObj.get("colorMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colorMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colorMode").toString()));
      }
      // validate the optional field `colorMode`
      if (jsonObj.get("colorMode") != null && !jsonObj.get("colorMode").isJsonNull()) {
        ColorModeEnum.validateJsonElement(jsonObj.get("colorMode"));
      }
      if ((jsonObj.get("completeTime") != null && !jsonObj.get("completeTime").isJsonNull()) && !jsonObj.get("completeTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completeTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completeTime").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("duplexMode") != null && !jsonObj.get("duplexMode").isJsonNull()) && !jsonObj.get("duplexMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duplexMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duplexMode").toString()));
      }
      // validate the optional field `duplexMode`
      if (jsonObj.get("duplexMode") != null && !jsonObj.get("duplexMode").isJsonNull()) {
        DuplexModeEnum.validateJsonElement(jsonObj.get("duplexMode"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("printer") != null && !jsonObj.get("printer").isJsonNull()) && !jsonObj.get("printer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `printer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("printer").toString()));
      }
      if ((jsonObj.get("printerId") != null && !jsonObj.get("printerId").isJsonNull()) && !jsonObj.get("printerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `printerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("printerId").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("userEmail") != null && !jsonObj.get("userEmail").isJsonNull()) && !jsonObj.get("userEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userEmail").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromeManagementV1PrintJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromeManagementV1PrintJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromeManagementV1PrintJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromeManagementV1PrintJob.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromeManagementV1PrintJob>() {
           @Override
           public void write(JsonWriter out, GoogleChromeManagementV1PrintJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromeManagementV1PrintJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromeManagementV1PrintJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromeManagementV1PrintJob
   * @throws IOException if the JSON string is invalid with respect to GoogleChromeManagementV1PrintJob
   */
  public static GoogleChromeManagementV1PrintJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromeManagementV1PrintJob.class);
  }

  /**
   * Convert an instance of GoogleChromeManagementV1PrintJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

