/*
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information of a display device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:04.349803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromeManagementV1DisplayDevice {
  public static final String SERIALIZED_NAME_DISPLAY_HEIGHT_MM = "displayHeightMm";
  @SerializedName(SERIALIZED_NAME_DISPLAY_HEIGHT_MM)
  private Integer displayHeightMm;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DISPLAY_WIDTH_MM = "displayWidthMm";
  @SerializedName(SERIALIZED_NAME_DISPLAY_WIDTH_MM)
  private Integer displayWidthMm;

  public static final String SERIALIZED_NAME_INTERNAL = "internal";
  @SerializedName(SERIALIZED_NAME_INTERNAL)
  private Boolean internal;

  public static final String SERIALIZED_NAME_MANUFACTURE_YEAR = "manufactureYear";
  @SerializedName(SERIALIZED_NAME_MANUFACTURE_YEAR)
  private Integer manufactureYear;

  public static final String SERIALIZED_NAME_MANUFACTURER_ID = "manufacturerId";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER_ID)
  private String manufacturerId;

  public static final String SERIALIZED_NAME_MODEL_ID = "modelId";
  @SerializedName(SERIALIZED_NAME_MODEL_ID)
  private Integer modelId;

  public GoogleChromeManagementV1DisplayDevice() {
  }

  public GoogleChromeManagementV1DisplayDevice(
     Integer displayHeightMm, 
     String displayName, 
     Integer displayWidthMm, 
     Boolean internal, 
     Integer manufactureYear, 
     String manufacturerId, 
     Integer modelId
  ) {
    this();
    this.displayHeightMm = displayHeightMm;
    this.displayName = displayName;
    this.displayWidthMm = displayWidthMm;
    this.internal = internal;
    this.manufactureYear = manufactureYear;
    this.manufacturerId = manufacturerId;
    this.modelId = modelId;
  }

  /**
   * Output only. Display height in millimeters.
   * @return displayHeightMm
   */
  @javax.annotation.Nullable
  public Integer getDisplayHeightMm() {
    return displayHeightMm;
  }



  /**
   * Output only. Display device name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * Output only. Display width in millimeters.
   * @return displayWidthMm
   */
  @javax.annotation.Nullable
  public Integer getDisplayWidthMm() {
    return displayWidthMm;
  }



  /**
   * Output only. Is display internal or not.
   * @return internal
   */
  @javax.annotation.Nullable
  public Boolean getInternal() {
    return internal;
  }



  /**
   * Output only. Year of manufacture.
   * @return manufactureYear
   */
  @javax.annotation.Nullable
  public Integer getManufactureYear() {
    return manufactureYear;
  }



  /**
   * Output only. Three letter manufacturer ID.
   * @return manufacturerId
   */
  @javax.annotation.Nullable
  public String getManufacturerId() {
    return manufacturerId;
  }



  /**
   * Output only. Manufacturer product code.
   * @return modelId
   */
  @javax.annotation.Nullable
  public Integer getModelId() {
    return modelId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromeManagementV1DisplayDevice googleChromeManagementV1DisplayDevice = (GoogleChromeManagementV1DisplayDevice) o;
    return Objects.equals(this.displayHeightMm, googleChromeManagementV1DisplayDevice.displayHeightMm) &&
        Objects.equals(this.displayName, googleChromeManagementV1DisplayDevice.displayName) &&
        Objects.equals(this.displayWidthMm, googleChromeManagementV1DisplayDevice.displayWidthMm) &&
        Objects.equals(this.internal, googleChromeManagementV1DisplayDevice.internal) &&
        Objects.equals(this.manufactureYear, googleChromeManagementV1DisplayDevice.manufactureYear) &&
        Objects.equals(this.manufacturerId, googleChromeManagementV1DisplayDevice.manufacturerId) &&
        Objects.equals(this.modelId, googleChromeManagementV1DisplayDevice.modelId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayHeightMm, displayName, displayWidthMm, internal, manufactureYear, manufacturerId, modelId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromeManagementV1DisplayDevice {\n");
    sb.append("    displayHeightMm: ").append(toIndentedString(displayHeightMm)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    displayWidthMm: ").append(toIndentedString(displayWidthMm)).append("\n");
    sb.append("    internal: ").append(toIndentedString(internal)).append("\n");
    sb.append("    manufactureYear: ").append(toIndentedString(manufactureYear)).append("\n");
    sb.append("    manufacturerId: ").append(toIndentedString(manufacturerId)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayHeightMm");
    openapiFields.add("displayName");
    openapiFields.add("displayWidthMm");
    openapiFields.add("internal");
    openapiFields.add("manufactureYear");
    openapiFields.add("manufacturerId");
    openapiFields.add("modelId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromeManagementV1DisplayDevice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromeManagementV1DisplayDevice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromeManagementV1DisplayDevice is not found in the empty JSON string", GoogleChromeManagementV1DisplayDevice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromeManagementV1DisplayDevice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromeManagementV1DisplayDevice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("manufacturerId") != null && !jsonObj.get("manufacturerId").isJsonNull()) && !jsonObj.get("manufacturerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manufacturerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manufacturerId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromeManagementV1DisplayDevice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromeManagementV1DisplayDevice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromeManagementV1DisplayDevice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromeManagementV1DisplayDevice.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromeManagementV1DisplayDevice>() {
           @Override
           public void write(JsonWriter out, GoogleChromeManagementV1DisplayDevice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromeManagementV1DisplayDevice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromeManagementV1DisplayDevice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromeManagementV1DisplayDevice
   * @throws IOException if the JSON string is invalid with respect to GoogleChromeManagementV1DisplayDevice
   */
  public static GoogleChromeManagementV1DisplayDevice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromeManagementV1DisplayDevice.class);
  }

  /**
   * Convert an instance of GoogleChromeManagementV1DisplayDevice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

