/*
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * State of visible/configured networks. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportNetworkStatus](https://chromeenterprise.google/policies/#ReportNetworkStatus) * Data Collection Frequency: 60 minutes * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: Yes * Granular permission needed: TELEMETRY_API_NETWORK_REPORT
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:04.349803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromeManagementV1NetworkStatusReport {
  /**
   * Output only. Current connection state of the network.
   */
  @JsonAdapter(ConnectionStateEnum.Adapter.class)
  public enum ConnectionStateEnum {
    NETWORK_CONNECTION_STATE_UNSPECIFIED("NETWORK_CONNECTION_STATE_UNSPECIFIED"),
    
    ONLINE("ONLINE"),
    
    CONNECTED("CONNECTED"),
    
    PORTAL("PORTAL"),
    
    CONNECTING("CONNECTING"),
    
    NOT_CONNECTED("NOT_CONNECTED");

    private String value;

    ConnectionStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionStateEnum fromValue(String value) {
      for (ConnectionStateEnum b : ConnectionStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectionStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectionStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_STATE = "connectionState";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATE)
  private ConnectionStateEnum connectionState;

  /**
   * Output only. Network connection type.
   */
  @JsonAdapter(ConnectionTypeEnum.Adapter.class)
  public enum ConnectionTypeEnum {
    NETWORK_TYPE_UNSPECIFIED("NETWORK_TYPE_UNSPECIFIED"),
    
    CELLULAR("CELLULAR"),
    
    ETHERNET("ETHERNET"),
    
    TETHER("TETHER"),
    
    VPN("VPN"),
    
    WIFI("WIFI");

    private String value;

    ConnectionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionTypeEnum fromValue(String value) {
      for (ConnectionTypeEnum b : ConnectionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_TYPE = "connectionType";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TYPE)
  private ConnectionTypeEnum connectionType;

  public static final String SERIALIZED_NAME_ENCRYPTION_ON = "encryptionOn";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_ON)
  private Boolean encryptionOn;

  public static final String SERIALIZED_NAME_GATEWAY_IP_ADDRESS = "gatewayIpAddress";
  @SerializedName(SERIALIZED_NAME_GATEWAY_IP_ADDRESS)
  private String gatewayIpAddress;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_LAN_IP_ADDRESS = "lanIpAddress";
  @SerializedName(SERIALIZED_NAME_LAN_IP_ADDRESS)
  private String lanIpAddress;

  public static final String SERIALIZED_NAME_RECEIVING_BIT_RATE_MBPS = "receivingBitRateMbps";
  @SerializedName(SERIALIZED_NAME_RECEIVING_BIT_RATE_MBPS)
  private String receivingBitRateMbps;

  public static final String SERIALIZED_NAME_REPORT_TIME = "reportTime";
  @SerializedName(SERIALIZED_NAME_REPORT_TIME)
  private String reportTime;

  public static final String SERIALIZED_NAME_SAMPLE_FREQUENCY = "sampleFrequency";
  @SerializedName(SERIALIZED_NAME_SAMPLE_FREQUENCY)
  private String sampleFrequency;

  public static final String SERIALIZED_NAME_SIGNAL_STRENGTH_DBM = "signalStrengthDbm";
  @SerializedName(SERIALIZED_NAME_SIGNAL_STRENGTH_DBM)
  private Integer signalStrengthDbm;

  public static final String SERIALIZED_NAME_TRANSMISSION_BIT_RATE_MBPS = "transmissionBitRateMbps";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION_BIT_RATE_MBPS)
  private String transmissionBitRateMbps;

  public static final String SERIALIZED_NAME_TRANSMISSION_POWER_DBM = "transmissionPowerDbm";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION_POWER_DBM)
  private Integer transmissionPowerDbm;

  public static final String SERIALIZED_NAME_WIFI_LINK_QUALITY = "wifiLinkQuality";
  @SerializedName(SERIALIZED_NAME_WIFI_LINK_QUALITY)
  private String wifiLinkQuality;

  public static final String SERIALIZED_NAME_WIFI_POWER_MANAGEMENT_ENABLED = "wifiPowerManagementEnabled";
  @SerializedName(SERIALIZED_NAME_WIFI_POWER_MANAGEMENT_ENABLED)
  private Boolean wifiPowerManagementEnabled;

  public GoogleChromeManagementV1NetworkStatusReport() {
  }

  public GoogleChromeManagementV1NetworkStatusReport(
     ConnectionStateEnum connectionState, 
     ConnectionTypeEnum connectionType, 
     Boolean encryptionOn, 
     String gatewayIpAddress, 
     String guid, 
     String lanIpAddress, 
     String receivingBitRateMbps, 
     String reportTime, 
     String sampleFrequency, 
     Integer signalStrengthDbm, 
     String transmissionBitRateMbps, 
     Integer transmissionPowerDbm, 
     String wifiLinkQuality, 
     Boolean wifiPowerManagementEnabled
  ) {
    this();
    this.connectionState = connectionState;
    this.connectionType = connectionType;
    this.encryptionOn = encryptionOn;
    this.gatewayIpAddress = gatewayIpAddress;
    this.guid = guid;
    this.lanIpAddress = lanIpAddress;
    this.receivingBitRateMbps = receivingBitRateMbps;
    this.reportTime = reportTime;
    this.sampleFrequency = sampleFrequency;
    this.signalStrengthDbm = signalStrengthDbm;
    this.transmissionBitRateMbps = transmissionBitRateMbps;
    this.transmissionPowerDbm = transmissionPowerDbm;
    this.wifiLinkQuality = wifiLinkQuality;
    this.wifiPowerManagementEnabled = wifiPowerManagementEnabled;
  }

  /**
   * Output only. Current connection state of the network.
   * @return connectionState
   */
  @javax.annotation.Nullable
  public ConnectionStateEnum getConnectionState() {
    return connectionState;
  }



  /**
   * Output only. Network connection type.
   * @return connectionType
   */
  @javax.annotation.Nullable
  public ConnectionTypeEnum getConnectionType() {
    return connectionType;
  }



  /**
   * Output only. Whether the wifi encryption key is turned off.
   * @return encryptionOn
   */
  @javax.annotation.Nullable
  public Boolean getEncryptionOn() {
    return encryptionOn;
  }



  /**
   * Output only. Gateway IP address.
   * @return gatewayIpAddress
   */
  @javax.annotation.Nullable
  public String getGatewayIpAddress() {
    return gatewayIpAddress;
  }



  /**
   * Output only. Network connection guid.
   * @return guid
   */
  @javax.annotation.Nullable
  public String getGuid() {
    return guid;
  }



  /**
   * Output only. LAN IP address.
   * @return lanIpAddress
   */
  @javax.annotation.Nullable
  public String getLanIpAddress() {
    return lanIpAddress;
  }



  /**
   * Output only. Receiving bit rate measured in Megabits per second.
   * @return receivingBitRateMbps
   */
  @javax.annotation.Nullable
  public String getReceivingBitRateMbps() {
    return receivingBitRateMbps;
  }



  /**
   * Output only. Time at which the network state was reported.
   * @return reportTime
   */
  @javax.annotation.Nullable
  public String getReportTime() {
    return reportTime;
  }



  /**
   * Output only. Frequency the report is sampled.
   * @return sampleFrequency
   */
  @javax.annotation.Nullable
  public String getSampleFrequency() {
    return sampleFrequency;
  }



  /**
   * Output only. Signal strength for wireless networks measured in decibels.
   * @return signalStrengthDbm
   */
  @javax.annotation.Nullable
  public Integer getSignalStrengthDbm() {
    return signalStrengthDbm;
  }



  /**
   * Output only. Transmission bit rate measured in Megabits per second.
   * @return transmissionBitRateMbps
   */
  @javax.annotation.Nullable
  public String getTransmissionBitRateMbps() {
    return transmissionBitRateMbps;
  }



  /**
   * Output only. Transmission power measured in decibels.
   * @return transmissionPowerDbm
   */
  @javax.annotation.Nullable
  public Integer getTransmissionPowerDbm() {
    return transmissionPowerDbm;
  }



  /**
   * Output only. Wifi link quality. Value ranges from [0, 70]. 0 indicates no signal and 70 indicates a strong signal.
   * @return wifiLinkQuality
   */
  @javax.annotation.Nullable
  public String getWifiLinkQuality() {
    return wifiLinkQuality;
  }



  /**
   * Output only. Wifi power management enabled
   * @return wifiPowerManagementEnabled
   */
  @javax.annotation.Nullable
  public Boolean getWifiPowerManagementEnabled() {
    return wifiPowerManagementEnabled;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromeManagementV1NetworkStatusReport googleChromeManagementV1NetworkStatusReport = (GoogleChromeManagementV1NetworkStatusReport) o;
    return Objects.equals(this.connectionState, googleChromeManagementV1NetworkStatusReport.connectionState) &&
        Objects.equals(this.connectionType, googleChromeManagementV1NetworkStatusReport.connectionType) &&
        Objects.equals(this.encryptionOn, googleChromeManagementV1NetworkStatusReport.encryptionOn) &&
        Objects.equals(this.gatewayIpAddress, googleChromeManagementV1NetworkStatusReport.gatewayIpAddress) &&
        Objects.equals(this.guid, googleChromeManagementV1NetworkStatusReport.guid) &&
        Objects.equals(this.lanIpAddress, googleChromeManagementV1NetworkStatusReport.lanIpAddress) &&
        Objects.equals(this.receivingBitRateMbps, googleChromeManagementV1NetworkStatusReport.receivingBitRateMbps) &&
        Objects.equals(this.reportTime, googleChromeManagementV1NetworkStatusReport.reportTime) &&
        Objects.equals(this.sampleFrequency, googleChromeManagementV1NetworkStatusReport.sampleFrequency) &&
        Objects.equals(this.signalStrengthDbm, googleChromeManagementV1NetworkStatusReport.signalStrengthDbm) &&
        Objects.equals(this.transmissionBitRateMbps, googleChromeManagementV1NetworkStatusReport.transmissionBitRateMbps) &&
        Objects.equals(this.transmissionPowerDbm, googleChromeManagementV1NetworkStatusReport.transmissionPowerDbm) &&
        Objects.equals(this.wifiLinkQuality, googleChromeManagementV1NetworkStatusReport.wifiLinkQuality) &&
        Objects.equals(this.wifiPowerManagementEnabled, googleChromeManagementV1NetworkStatusReport.wifiPowerManagementEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionState, connectionType, encryptionOn, gatewayIpAddress, guid, lanIpAddress, receivingBitRateMbps, reportTime, sampleFrequency, signalStrengthDbm, transmissionBitRateMbps, transmissionPowerDbm, wifiLinkQuality, wifiPowerManagementEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromeManagementV1NetworkStatusReport {\n");
    sb.append("    connectionState: ").append(toIndentedString(connectionState)).append("\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    encryptionOn: ").append(toIndentedString(encryptionOn)).append("\n");
    sb.append("    gatewayIpAddress: ").append(toIndentedString(gatewayIpAddress)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    lanIpAddress: ").append(toIndentedString(lanIpAddress)).append("\n");
    sb.append("    receivingBitRateMbps: ").append(toIndentedString(receivingBitRateMbps)).append("\n");
    sb.append("    reportTime: ").append(toIndentedString(reportTime)).append("\n");
    sb.append("    sampleFrequency: ").append(toIndentedString(sampleFrequency)).append("\n");
    sb.append("    signalStrengthDbm: ").append(toIndentedString(signalStrengthDbm)).append("\n");
    sb.append("    transmissionBitRateMbps: ").append(toIndentedString(transmissionBitRateMbps)).append("\n");
    sb.append("    transmissionPowerDbm: ").append(toIndentedString(transmissionPowerDbm)).append("\n");
    sb.append("    wifiLinkQuality: ").append(toIndentedString(wifiLinkQuality)).append("\n");
    sb.append("    wifiPowerManagementEnabled: ").append(toIndentedString(wifiPowerManagementEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectionState");
    openapiFields.add("connectionType");
    openapiFields.add("encryptionOn");
    openapiFields.add("gatewayIpAddress");
    openapiFields.add("guid");
    openapiFields.add("lanIpAddress");
    openapiFields.add("receivingBitRateMbps");
    openapiFields.add("reportTime");
    openapiFields.add("sampleFrequency");
    openapiFields.add("signalStrengthDbm");
    openapiFields.add("transmissionBitRateMbps");
    openapiFields.add("transmissionPowerDbm");
    openapiFields.add("wifiLinkQuality");
    openapiFields.add("wifiPowerManagementEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromeManagementV1NetworkStatusReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromeManagementV1NetworkStatusReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromeManagementV1NetworkStatusReport is not found in the empty JSON string", GoogleChromeManagementV1NetworkStatusReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromeManagementV1NetworkStatusReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromeManagementV1NetworkStatusReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectionState") != null && !jsonObj.get("connectionState").isJsonNull()) && !jsonObj.get("connectionState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionState").toString()));
      }
      // validate the optional field `connectionState`
      if (jsonObj.get("connectionState") != null && !jsonObj.get("connectionState").isJsonNull()) {
        ConnectionStateEnum.validateJsonElement(jsonObj.get("connectionState"));
      }
      if ((jsonObj.get("connectionType") != null && !jsonObj.get("connectionType").isJsonNull()) && !jsonObj.get("connectionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionType").toString()));
      }
      // validate the optional field `connectionType`
      if (jsonObj.get("connectionType") != null && !jsonObj.get("connectionType").isJsonNull()) {
        ConnectionTypeEnum.validateJsonElement(jsonObj.get("connectionType"));
      }
      if ((jsonObj.get("gatewayIpAddress") != null && !jsonObj.get("gatewayIpAddress").isJsonNull()) && !jsonObj.get("gatewayIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewayIpAddress").toString()));
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      if ((jsonObj.get("lanIpAddress") != null && !jsonObj.get("lanIpAddress").isJsonNull()) && !jsonObj.get("lanIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lanIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lanIpAddress").toString()));
      }
      if ((jsonObj.get("receivingBitRateMbps") != null && !jsonObj.get("receivingBitRateMbps").isJsonNull()) && !jsonObj.get("receivingBitRateMbps").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receivingBitRateMbps` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receivingBitRateMbps").toString()));
      }
      if ((jsonObj.get("reportTime") != null && !jsonObj.get("reportTime").isJsonNull()) && !jsonObj.get("reportTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportTime").toString()));
      }
      if ((jsonObj.get("sampleFrequency") != null && !jsonObj.get("sampleFrequency").isJsonNull()) && !jsonObj.get("sampleFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sampleFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sampleFrequency").toString()));
      }
      if ((jsonObj.get("transmissionBitRateMbps") != null && !jsonObj.get("transmissionBitRateMbps").isJsonNull()) && !jsonObj.get("transmissionBitRateMbps").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transmissionBitRateMbps` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transmissionBitRateMbps").toString()));
      }
      if ((jsonObj.get("wifiLinkQuality") != null && !jsonObj.get("wifiLinkQuality").isJsonNull()) && !jsonObj.get("wifiLinkQuality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wifiLinkQuality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wifiLinkQuality").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromeManagementV1NetworkStatusReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromeManagementV1NetworkStatusReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromeManagementV1NetworkStatusReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromeManagementV1NetworkStatusReport.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromeManagementV1NetworkStatusReport>() {
           @Override
           public void write(JsonWriter out, GoogleChromeManagementV1NetworkStatusReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromeManagementV1NetworkStatusReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromeManagementV1NetworkStatusReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromeManagementV1NetworkStatusReport
   * @throws IOException if the JSON string is invalid with respect to GoogleChromeManagementV1NetworkStatusReport
   */
  public static GoogleChromeManagementV1NetworkStatusReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromeManagementV1NetworkStatusReport.class);
  }

  /**
   * Convert an instance of GoogleChromeManagementV1NetworkStatusReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

