/*
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleChromeManagementV1HttpsLatencyRoutineData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Https latency routine is run periodically and &#x60;TelemetryHttpsLatencyChangeEvent&#x60; is triggered if a latency problem was detected or if the device has recovered from a latency problem. * Granular permission needed: TELEMETRY_API_NETWORK_REPORT
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:04.349803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent {
  public static final String SERIALIZED_NAME_HTTPS_LATENCY_ROUTINE_DATA = "httpsLatencyRoutineData";
  @SerializedName(SERIALIZED_NAME_HTTPS_LATENCY_ROUTINE_DATA)
  private GoogleChromeManagementV1HttpsLatencyRoutineData httpsLatencyRoutineData;

  /**
   * Current HTTPS latency state.
   */
  @JsonAdapter(HttpsLatencyStateEnum.Adapter.class)
  public enum HttpsLatencyStateEnum {
    HTTPS_LATENCY_STATE_UNSPECIFIED("HTTPS_LATENCY_STATE_UNSPECIFIED"),
    
    RECOVERY("RECOVERY"),
    
    PROBLEM("PROBLEM");

    private String value;

    HttpsLatencyStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HttpsLatencyStateEnum fromValue(String value) {
      for (HttpsLatencyStateEnum b : HttpsLatencyStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HttpsLatencyStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HttpsLatencyStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HttpsLatencyStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HttpsLatencyStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HttpsLatencyStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HTTPS_LATENCY_STATE = "httpsLatencyState";
  @SerializedName(SERIALIZED_NAME_HTTPS_LATENCY_STATE)
  private HttpsLatencyStateEnum httpsLatencyState;

  public GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent() {
  }

  public GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent httpsLatencyRoutineData(GoogleChromeManagementV1HttpsLatencyRoutineData httpsLatencyRoutineData) {
    this.httpsLatencyRoutineData = httpsLatencyRoutineData;
    return this;
  }

  /**
   * Get httpsLatencyRoutineData
   * @return httpsLatencyRoutineData
   */
  @javax.annotation.Nullable
  public GoogleChromeManagementV1HttpsLatencyRoutineData getHttpsLatencyRoutineData() {
    return httpsLatencyRoutineData;
  }

  public void setHttpsLatencyRoutineData(GoogleChromeManagementV1HttpsLatencyRoutineData httpsLatencyRoutineData) {
    this.httpsLatencyRoutineData = httpsLatencyRoutineData;
  }


  public GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent httpsLatencyState(HttpsLatencyStateEnum httpsLatencyState) {
    this.httpsLatencyState = httpsLatencyState;
    return this;
  }

  /**
   * Current HTTPS latency state.
   * @return httpsLatencyState
   */
  @javax.annotation.Nullable
  public HttpsLatencyStateEnum getHttpsLatencyState() {
    return httpsLatencyState;
  }

  public void setHttpsLatencyState(HttpsLatencyStateEnum httpsLatencyState) {
    this.httpsLatencyState = httpsLatencyState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent googleChromeManagementV1TelemetryHttpsLatencyChangeEvent = (GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent) o;
    return Objects.equals(this.httpsLatencyRoutineData, googleChromeManagementV1TelemetryHttpsLatencyChangeEvent.httpsLatencyRoutineData) &&
        Objects.equals(this.httpsLatencyState, googleChromeManagementV1TelemetryHttpsLatencyChangeEvent.httpsLatencyState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(httpsLatencyRoutineData, httpsLatencyState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent {\n");
    sb.append("    httpsLatencyRoutineData: ").append(toIndentedString(httpsLatencyRoutineData)).append("\n");
    sb.append("    httpsLatencyState: ").append(toIndentedString(httpsLatencyState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("httpsLatencyRoutineData");
    openapiFields.add("httpsLatencyState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent is not found in the empty JSON string", GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `httpsLatencyRoutineData`
      if (jsonObj.get("httpsLatencyRoutineData") != null && !jsonObj.get("httpsLatencyRoutineData").isJsonNull()) {
        GoogleChromeManagementV1HttpsLatencyRoutineData.validateJsonElement(jsonObj.get("httpsLatencyRoutineData"));
      }
      if ((jsonObj.get("httpsLatencyState") != null && !jsonObj.get("httpsLatencyState").isJsonNull()) && !jsonObj.get("httpsLatencyState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpsLatencyState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpsLatencyState").toString()));
      }
      // validate the optional field `httpsLatencyState`
      if (jsonObj.get("httpsLatencyState") != null && !jsonObj.get("httpsLatencyState").isJsonNull()) {
        HttpsLatencyStateEnum.validateJsonElement(jsonObj.get("httpsLatencyState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent>() {
           @Override
           public void write(JsonWriter out, GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent
   * @throws IOException if the JSON string is invalid with respect to GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent
   */
  public static GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.class);
  }

  /**
   * Convert an instance of GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

