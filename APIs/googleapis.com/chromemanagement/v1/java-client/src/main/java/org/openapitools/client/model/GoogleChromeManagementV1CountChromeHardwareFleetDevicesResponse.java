/*
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleChromeManagementV1DeviceHardwareCountReport;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response containing a list of devices with a specific type of hardware specification from the requested hardware type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:04.349803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse {
  public static final String SERIALIZED_NAME_CPU_REPORTS = "cpuReports";
  @SerializedName(SERIALIZED_NAME_CPU_REPORTS)
  private List<GoogleChromeManagementV1DeviceHardwareCountReport> cpuReports = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEMORY_REPORTS = "memoryReports";
  @SerializedName(SERIALIZED_NAME_MEMORY_REPORTS)
  private List<GoogleChromeManagementV1DeviceHardwareCountReport> memoryReports = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODEL_REPORTS = "modelReports";
  @SerializedName(SERIALIZED_NAME_MODEL_REPORTS)
  private List<GoogleChromeManagementV1DeviceHardwareCountReport> modelReports = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORAGE_REPORTS = "storageReports";
  @SerializedName(SERIALIZED_NAME_STORAGE_REPORTS)
  private List<GoogleChromeManagementV1DeviceHardwareCountReport> storageReports = new ArrayList<>();

  public GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse() {
  }

  public GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse cpuReports(List<GoogleChromeManagementV1DeviceHardwareCountReport> cpuReports) {
    this.cpuReports = cpuReports;
    return this;
  }

  public GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse addCpuReportsItem(GoogleChromeManagementV1DeviceHardwareCountReport cpuReportsItem) {
    if (this.cpuReports == null) {
      this.cpuReports = new ArrayList<>();
    }
    this.cpuReports.add(cpuReportsItem);
    return this;
  }

  /**
   * The DeviceHardwareCountReport for device cpu type (for example Intel(R) Core(TM) i7-10610U CPU @ 1.80GHz).
   * @return cpuReports
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1DeviceHardwareCountReport> getCpuReports() {
    return cpuReports;
  }

  public void setCpuReports(List<GoogleChromeManagementV1DeviceHardwareCountReport> cpuReports) {
    this.cpuReports = cpuReports;
  }


  public GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse memoryReports(List<GoogleChromeManagementV1DeviceHardwareCountReport> memoryReports) {
    this.memoryReports = memoryReports;
    return this;
  }

  public GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse addMemoryReportsItem(GoogleChromeManagementV1DeviceHardwareCountReport memoryReportsItem) {
    if (this.memoryReports == null) {
      this.memoryReports = new ArrayList<>();
    }
    this.memoryReports.add(memoryReportsItem);
    return this;
  }

  /**
   * The DeviceHardwareCountReport for device memory amount in gigabytes (for example 16).
   * @return memoryReports
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1DeviceHardwareCountReport> getMemoryReports() {
    return memoryReports;
  }

  public void setMemoryReports(List<GoogleChromeManagementV1DeviceHardwareCountReport> memoryReports) {
    this.memoryReports = memoryReports;
  }


  public GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse modelReports(List<GoogleChromeManagementV1DeviceHardwareCountReport> modelReports) {
    this.modelReports = modelReports;
    return this;
  }

  public GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse addModelReportsItem(GoogleChromeManagementV1DeviceHardwareCountReport modelReportsItem) {
    if (this.modelReports == null) {
      this.modelReports = new ArrayList<>();
    }
    this.modelReports.add(modelReportsItem);
    return this;
  }

  /**
   * The DeviceHardwareCountReport for device model type (for example Acer C7 Chromebook).
   * @return modelReports
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1DeviceHardwareCountReport> getModelReports() {
    return modelReports;
  }

  public void setModelReports(List<GoogleChromeManagementV1DeviceHardwareCountReport> modelReports) {
    this.modelReports = modelReports;
  }


  public GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse storageReports(List<GoogleChromeManagementV1DeviceHardwareCountReport> storageReports) {
    this.storageReports = storageReports;
    return this;
  }

  public GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse addStorageReportsItem(GoogleChromeManagementV1DeviceHardwareCountReport storageReportsItem) {
    if (this.storageReports == null) {
      this.storageReports = new ArrayList<>();
    }
    this.storageReports.add(storageReportsItem);
    return this;
  }

  /**
   * The DeviceHardwareCountReport for device storage amount in gigabytes (for example 128).
   * @return storageReports
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1DeviceHardwareCountReport> getStorageReports() {
    return storageReports;
  }

  public void setStorageReports(List<GoogleChromeManagementV1DeviceHardwareCountReport> storageReports) {
    this.storageReports = storageReports;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse googleChromeManagementV1CountChromeHardwareFleetDevicesResponse = (GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse) o;
    return Objects.equals(this.cpuReports, googleChromeManagementV1CountChromeHardwareFleetDevicesResponse.cpuReports) &&
        Objects.equals(this.memoryReports, googleChromeManagementV1CountChromeHardwareFleetDevicesResponse.memoryReports) &&
        Objects.equals(this.modelReports, googleChromeManagementV1CountChromeHardwareFleetDevicesResponse.modelReports) &&
        Objects.equals(this.storageReports, googleChromeManagementV1CountChromeHardwareFleetDevicesResponse.storageReports);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpuReports, memoryReports, modelReports, storageReports);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse {\n");
    sb.append("    cpuReports: ").append(toIndentedString(cpuReports)).append("\n");
    sb.append("    memoryReports: ").append(toIndentedString(memoryReports)).append("\n");
    sb.append("    modelReports: ").append(toIndentedString(modelReports)).append("\n");
    sb.append("    storageReports: ").append(toIndentedString(storageReports)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cpuReports");
    openapiFields.add("memoryReports");
    openapiFields.add("modelReports");
    openapiFields.add("storageReports");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse is not found in the empty JSON string", GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("cpuReports") != null && !jsonObj.get("cpuReports").isJsonNull()) {
        JsonArray jsonArraycpuReports = jsonObj.getAsJsonArray("cpuReports");
        if (jsonArraycpuReports != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cpuReports").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cpuReports` to be an array in the JSON string but got `%s`", jsonObj.get("cpuReports").toString()));
          }

          // validate the optional field `cpuReports` (array)
          for (int i = 0; i < jsonArraycpuReports.size(); i++) {
            GoogleChromeManagementV1DeviceHardwareCountReport.validateJsonElement(jsonArraycpuReports.get(i));
          };
        }
      }
      if (jsonObj.get("memoryReports") != null && !jsonObj.get("memoryReports").isJsonNull()) {
        JsonArray jsonArraymemoryReports = jsonObj.getAsJsonArray("memoryReports");
        if (jsonArraymemoryReports != null) {
          // ensure the json data is an array
          if (!jsonObj.get("memoryReports").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `memoryReports` to be an array in the JSON string but got `%s`", jsonObj.get("memoryReports").toString()));
          }

          // validate the optional field `memoryReports` (array)
          for (int i = 0; i < jsonArraymemoryReports.size(); i++) {
            GoogleChromeManagementV1DeviceHardwareCountReport.validateJsonElement(jsonArraymemoryReports.get(i));
          };
        }
      }
      if (jsonObj.get("modelReports") != null && !jsonObj.get("modelReports").isJsonNull()) {
        JsonArray jsonArraymodelReports = jsonObj.getAsJsonArray("modelReports");
        if (jsonArraymodelReports != null) {
          // ensure the json data is an array
          if (!jsonObj.get("modelReports").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `modelReports` to be an array in the JSON string but got `%s`", jsonObj.get("modelReports").toString()));
          }

          // validate the optional field `modelReports` (array)
          for (int i = 0; i < jsonArraymodelReports.size(); i++) {
            GoogleChromeManagementV1DeviceHardwareCountReport.validateJsonElement(jsonArraymodelReports.get(i));
          };
        }
      }
      if (jsonObj.get("storageReports") != null && !jsonObj.get("storageReports").isJsonNull()) {
        JsonArray jsonArraystorageReports = jsonObj.getAsJsonArray("storageReports");
        if (jsonArraystorageReports != null) {
          // ensure the json data is an array
          if (!jsonObj.get("storageReports").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `storageReports` to be an array in the JSON string but got `%s`", jsonObj.get("storageReports").toString()));
          }

          // validate the optional field `storageReports` (array)
          for (int i = 0; i < jsonArraystorageReports.size(); i++) {
            GoogleChromeManagementV1DeviceHardwareCountReport.validateJsonElement(jsonArraystorageReports.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse>() {
           @Override
           public void write(JsonWriter out, GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse
   * @throws IOException if the JSON string is invalid with respect to GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse
   */
  public static GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse.class);
  }

  /**
   * Convert an instance of GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

