/*
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * USB connected peripheral report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:04.349803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromeManagementV1UsbPeripheralReport {
  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLASS_ID = "classId";
  @SerializedName(SERIALIZED_NAME_CLASS_ID)
  private Integer classId;

  public static final String SERIALIZED_NAME_FIRMWARE_VERSION = "firmwareVersion";
  @SerializedName(SERIALIZED_NAME_FIRMWARE_VERSION)
  private String firmwareVersion;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PID = "pid";
  @SerializedName(SERIALIZED_NAME_PID)
  private Integer pid;

  public static final String SERIALIZED_NAME_SUBCLASS_ID = "subclassId";
  @SerializedName(SERIALIZED_NAME_SUBCLASS_ID)
  private Integer subclassId;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private String vendor;

  public static final String SERIALIZED_NAME_VID = "vid";
  @SerializedName(SERIALIZED_NAME_VID)
  private Integer vid;

  public GoogleChromeManagementV1UsbPeripheralReport() {
  }

  public GoogleChromeManagementV1UsbPeripheralReport(
     List<String> categories, 
     Integer classId, 
     String firmwareVersion, 
     String name, 
     Integer pid, 
     Integer subclassId, 
     String vendor, 
     Integer vid
  ) {
    this();
    this.categories = categories;
    this.classId = classId;
    this.firmwareVersion = firmwareVersion;
    this.name = name;
    this.pid = pid;
    this.subclassId = subclassId;
    this.vendor = vendor;
    this.vid = vid;
  }

  /**
   * Output only. Categories the device belongs to https://www.usb.org/defined-class-codes
   * @return categories
   */
  @javax.annotation.Nullable
  public List<String> getCategories() {
    return categories;
  }



  /**
   * Output only. Class ID https://www.usb.org/defined-class-codes
   * @return classId
   */
  @javax.annotation.Nullable
  public Integer getClassId() {
    return classId;
  }



  /**
   * Output only. Firmware version
   * @return firmwareVersion
   */
  @javax.annotation.Nullable
  public String getFirmwareVersion() {
    return firmwareVersion;
  }



  /**
   * Output only. Device name, model name, or product name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. Product ID
   * @return pid
   */
  @javax.annotation.Nullable
  public Integer getPid() {
    return pid;
  }



  /**
   * Output only. Subclass ID https://www.usb.org/defined-class-codes
   * @return subclassId
   */
  @javax.annotation.Nullable
  public Integer getSubclassId() {
    return subclassId;
  }



  /**
   * Output only. Vendor name
   * @return vendor
   */
  @javax.annotation.Nullable
  public String getVendor() {
    return vendor;
  }



  /**
   * Output only. Vendor ID
   * @return vid
   */
  @javax.annotation.Nullable
  public Integer getVid() {
    return vid;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromeManagementV1UsbPeripheralReport googleChromeManagementV1UsbPeripheralReport = (GoogleChromeManagementV1UsbPeripheralReport) o;
    return Objects.equals(this.categories, googleChromeManagementV1UsbPeripheralReport.categories) &&
        Objects.equals(this.classId, googleChromeManagementV1UsbPeripheralReport.classId) &&
        Objects.equals(this.firmwareVersion, googleChromeManagementV1UsbPeripheralReport.firmwareVersion) &&
        Objects.equals(this.name, googleChromeManagementV1UsbPeripheralReport.name) &&
        Objects.equals(this.pid, googleChromeManagementV1UsbPeripheralReport.pid) &&
        Objects.equals(this.subclassId, googleChromeManagementV1UsbPeripheralReport.subclassId) &&
        Objects.equals(this.vendor, googleChromeManagementV1UsbPeripheralReport.vendor) &&
        Objects.equals(this.vid, googleChromeManagementV1UsbPeripheralReport.vid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categories, classId, firmwareVersion, name, pid, subclassId, vendor, vid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromeManagementV1UsbPeripheralReport {\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    classId: ").append(toIndentedString(classId)).append("\n");
    sb.append("    firmwareVersion: ").append(toIndentedString(firmwareVersion)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    subclassId: ").append(toIndentedString(subclassId)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("    vid: ").append(toIndentedString(vid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categories");
    openapiFields.add("classId");
    openapiFields.add("firmwareVersion");
    openapiFields.add("name");
    openapiFields.add("pid");
    openapiFields.add("subclassId");
    openapiFields.add("vendor");
    openapiFields.add("vid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromeManagementV1UsbPeripheralReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromeManagementV1UsbPeripheralReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromeManagementV1UsbPeripheralReport is not found in the empty JSON string", GoogleChromeManagementV1UsbPeripheralReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromeManagementV1UsbPeripheralReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromeManagementV1UsbPeripheralReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull() && !jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      if ((jsonObj.get("firmwareVersion") != null && !jsonObj.get("firmwareVersion").isJsonNull()) && !jsonObj.get("firmwareVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firmwareVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firmwareVersion").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("vendor") != null && !jsonObj.get("vendor").isJsonNull()) && !jsonObj.get("vendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromeManagementV1UsbPeripheralReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromeManagementV1UsbPeripheralReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromeManagementV1UsbPeripheralReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromeManagementV1UsbPeripheralReport.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromeManagementV1UsbPeripheralReport>() {
           @Override
           public void write(JsonWriter out, GoogleChromeManagementV1UsbPeripheralReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromeManagementV1UsbPeripheralReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromeManagementV1UsbPeripheralReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromeManagementV1UsbPeripheralReport
   * @throws IOException if the JSON string is invalid with respect to GoogleChromeManagementV1UsbPeripheralReport
   */
  public static GoogleChromeManagementV1UsbPeripheralReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromeManagementV1UsbPeripheralReport.class);
  }

  /**
   * Convert an instance of GoogleChromeManagementV1UsbPeripheralReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

