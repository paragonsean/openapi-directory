/*
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Memory encryption information of a device. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceMemoryInfo](https://chromeenterprise.google/policies/#ReportDeviceMemoryInfo) * Data Collection Frequency: At device startup * Default Data Reporting Frequency: At device startup - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: N/A
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:04.349803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromeManagementV1TotalMemoryEncryptionInfo {
  /**
   * Memory encryption algorithm.
   */
  @JsonAdapter(EncryptionAlgorithmEnum.Adapter.class)
  public enum EncryptionAlgorithmEnum {
    UNSPECIFIED("MEMORY_ENCRYPTION_ALGORITHM_UNSPECIFIED"),
    
    UNKNOWN("MEMORY_ENCRYPTION_ALGORITHM_UNKNOWN"),
    
    AES_XTS_128("MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_128"),
    
    AES_XTS_256("MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_256");

    private String value;

    EncryptionAlgorithmEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncryptionAlgorithmEnum fromValue(String value) {
      for (EncryptionAlgorithmEnum b : EncryptionAlgorithmEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncryptionAlgorithmEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncryptionAlgorithmEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncryptionAlgorithmEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncryptionAlgorithmEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncryptionAlgorithmEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCRYPTION_ALGORITHM = "encryptionAlgorithm";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_ALGORITHM)
  private EncryptionAlgorithmEnum encryptionAlgorithm;

  /**
   * The state of memory encryption on the device.
   */
  @JsonAdapter(EncryptionStateEnum.Adapter.class)
  public enum EncryptionStateEnum {
    UNSPECIFIED("MEMORY_ENCRYPTION_STATE_UNSPECIFIED"),
    
    UNKNOWN("MEMORY_ENCRYPTION_STATE_UNKNOWN"),
    
    DISABLED("MEMORY_ENCRYPTION_STATE_DISABLED"),
    
    TME("MEMORY_ENCRYPTION_STATE_TME"),
    
    MKTME("MEMORY_ENCRYPTION_STATE_MKTME");

    private String value;

    EncryptionStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncryptionStateEnum fromValue(String value) {
      for (EncryptionStateEnum b : EncryptionStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncryptionStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncryptionStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncryptionStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncryptionStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncryptionStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCRYPTION_STATE = "encryptionState";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_STATE)
  private EncryptionStateEnum encryptionState;

  public static final String SERIALIZED_NAME_KEY_LENGTH = "keyLength";
  @SerializedName(SERIALIZED_NAME_KEY_LENGTH)
  private String keyLength;

  public static final String SERIALIZED_NAME_MAX_KEYS = "maxKeys";
  @SerializedName(SERIALIZED_NAME_MAX_KEYS)
  private String maxKeys;

  public GoogleChromeManagementV1TotalMemoryEncryptionInfo() {
  }

  public GoogleChromeManagementV1TotalMemoryEncryptionInfo encryptionAlgorithm(EncryptionAlgorithmEnum encryptionAlgorithm) {
    this.encryptionAlgorithm = encryptionAlgorithm;
    return this;
  }

  /**
   * Memory encryption algorithm.
   * @return encryptionAlgorithm
   */
  @javax.annotation.Nullable
  public EncryptionAlgorithmEnum getEncryptionAlgorithm() {
    return encryptionAlgorithm;
  }

  public void setEncryptionAlgorithm(EncryptionAlgorithmEnum encryptionAlgorithm) {
    this.encryptionAlgorithm = encryptionAlgorithm;
  }


  public GoogleChromeManagementV1TotalMemoryEncryptionInfo encryptionState(EncryptionStateEnum encryptionState) {
    this.encryptionState = encryptionState;
    return this;
  }

  /**
   * The state of memory encryption on the device.
   * @return encryptionState
   */
  @javax.annotation.Nullable
  public EncryptionStateEnum getEncryptionState() {
    return encryptionState;
  }

  public void setEncryptionState(EncryptionStateEnum encryptionState) {
    this.encryptionState = encryptionState;
  }


  public GoogleChromeManagementV1TotalMemoryEncryptionInfo keyLength(String keyLength) {
    this.keyLength = keyLength;
    return this;
  }

  /**
   * The length of the encryption keys.
   * @return keyLength
   */
  @javax.annotation.Nullable
  public String getKeyLength() {
    return keyLength;
  }

  public void setKeyLength(String keyLength) {
    this.keyLength = keyLength;
  }


  public GoogleChromeManagementV1TotalMemoryEncryptionInfo maxKeys(String maxKeys) {
    this.maxKeys = maxKeys;
    return this;
  }

  /**
   * The maximum number of keys that can be used for encryption.
   * @return maxKeys
   */
  @javax.annotation.Nullable
  public String getMaxKeys() {
    return maxKeys;
  }

  public void setMaxKeys(String maxKeys) {
    this.maxKeys = maxKeys;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromeManagementV1TotalMemoryEncryptionInfo googleChromeManagementV1TotalMemoryEncryptionInfo = (GoogleChromeManagementV1TotalMemoryEncryptionInfo) o;
    return Objects.equals(this.encryptionAlgorithm, googleChromeManagementV1TotalMemoryEncryptionInfo.encryptionAlgorithm) &&
        Objects.equals(this.encryptionState, googleChromeManagementV1TotalMemoryEncryptionInfo.encryptionState) &&
        Objects.equals(this.keyLength, googleChromeManagementV1TotalMemoryEncryptionInfo.keyLength) &&
        Objects.equals(this.maxKeys, googleChromeManagementV1TotalMemoryEncryptionInfo.maxKeys);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encryptionAlgorithm, encryptionState, keyLength, maxKeys);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromeManagementV1TotalMemoryEncryptionInfo {\n");
    sb.append("    encryptionAlgorithm: ").append(toIndentedString(encryptionAlgorithm)).append("\n");
    sb.append("    encryptionState: ").append(toIndentedString(encryptionState)).append("\n");
    sb.append("    keyLength: ").append(toIndentedString(keyLength)).append("\n");
    sb.append("    maxKeys: ").append(toIndentedString(maxKeys)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encryptionAlgorithm");
    openapiFields.add("encryptionState");
    openapiFields.add("keyLength");
    openapiFields.add("maxKeys");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromeManagementV1TotalMemoryEncryptionInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromeManagementV1TotalMemoryEncryptionInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromeManagementV1TotalMemoryEncryptionInfo is not found in the empty JSON string", GoogleChromeManagementV1TotalMemoryEncryptionInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromeManagementV1TotalMemoryEncryptionInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromeManagementV1TotalMemoryEncryptionInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("encryptionAlgorithm") != null && !jsonObj.get("encryptionAlgorithm").isJsonNull()) && !jsonObj.get("encryptionAlgorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionAlgorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionAlgorithm").toString()));
      }
      // validate the optional field `encryptionAlgorithm`
      if (jsonObj.get("encryptionAlgorithm") != null && !jsonObj.get("encryptionAlgorithm").isJsonNull()) {
        EncryptionAlgorithmEnum.validateJsonElement(jsonObj.get("encryptionAlgorithm"));
      }
      if ((jsonObj.get("encryptionState") != null && !jsonObj.get("encryptionState").isJsonNull()) && !jsonObj.get("encryptionState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionState").toString()));
      }
      // validate the optional field `encryptionState`
      if (jsonObj.get("encryptionState") != null && !jsonObj.get("encryptionState").isJsonNull()) {
        EncryptionStateEnum.validateJsonElement(jsonObj.get("encryptionState"));
      }
      if ((jsonObj.get("keyLength") != null && !jsonObj.get("keyLength").isJsonNull()) && !jsonObj.get("keyLength").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyLength` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyLength").toString()));
      }
      if ((jsonObj.get("maxKeys") != null && !jsonObj.get("maxKeys").isJsonNull()) && !jsonObj.get("maxKeys").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxKeys` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxKeys").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromeManagementV1TotalMemoryEncryptionInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromeManagementV1TotalMemoryEncryptionInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromeManagementV1TotalMemoryEncryptionInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromeManagementV1TotalMemoryEncryptionInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromeManagementV1TotalMemoryEncryptionInfo>() {
           @Override
           public void write(JsonWriter out, GoogleChromeManagementV1TotalMemoryEncryptionInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromeManagementV1TotalMemoryEncryptionInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromeManagementV1TotalMemoryEncryptionInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromeManagementV1TotalMemoryEncryptionInfo
   * @throws IOException if the JSON string is invalid with respect to GoogleChromeManagementV1TotalMemoryEncryptionInfo
   */
  public static GoogleChromeManagementV1TotalMemoryEncryptionInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromeManagementV1TotalMemoryEncryptionInfo.class);
  }

  /**
   * Convert an instance of GoogleChromeManagementV1TotalMemoryEncryptionInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

