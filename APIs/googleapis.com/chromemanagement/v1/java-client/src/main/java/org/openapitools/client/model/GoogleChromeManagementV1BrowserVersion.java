/*
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a browser version and its install count.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:04.349803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromeManagementV1BrowserVersion {
  /**
   * Output only. The release channel of the installed browser.
   */
  @JsonAdapter(ChannelEnum.Adapter.class)
  public enum ChannelEnum {
    RELEASE_CHANNEL_UNSPECIFIED("RELEASE_CHANNEL_UNSPECIFIED"),
    
    CANARY("CANARY"),
    
    DEV("DEV"),
    
    BETA("BETA"),
    
    STABLE("STABLE");

    private String value;

    ChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChannelEnum fromValue(String value) {
      for (ChannelEnum b : ChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChannelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChannelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private ChannelEnum channel;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private String count;

  public static final String SERIALIZED_NAME_DEVICE_OS_VERSION = "deviceOsVersion";
  @SerializedName(SERIALIZED_NAME_DEVICE_OS_VERSION)
  private String deviceOsVersion;

  /**
   * Output only. The device operating system.
   */
  @JsonAdapter(SystemEnum.Adapter.class)
  public enum SystemEnum {
    DEVICE_SYSTEM_UNSPECIFIED("DEVICE_SYSTEM_UNSPECIFIED"),
    
    SYSTEM_OTHER("SYSTEM_OTHER"),
    
    SYSTEM_ANDROID("SYSTEM_ANDROID"),
    
    SYSTEM_IOS("SYSTEM_IOS"),
    
    SYSTEM_CROS("SYSTEM_CROS"),
    
    SYSTEM_WINDOWS("SYSTEM_WINDOWS"),
    
    SYSTEM_MAC("SYSTEM_MAC"),
    
    SYSTEM_LINUX("SYSTEM_LINUX");

    private String value;

    SystemEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SystemEnum fromValue(String value) {
      for (SystemEnum b : SystemEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SystemEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SystemEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SystemEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SystemEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SystemEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYSTEM = "system";
  @SerializedName(SERIALIZED_NAME_SYSTEM)
  private SystemEnum system;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public GoogleChromeManagementV1BrowserVersion() {
  }

  public GoogleChromeManagementV1BrowserVersion(
     ChannelEnum channel, 
     String count, 
     String deviceOsVersion, 
     SystemEnum system, 
     String version
  ) {
    this();
    this.channel = channel;
    this.count = count;
    this.deviceOsVersion = deviceOsVersion;
    this.system = system;
    this.version = version;
  }

  /**
   * Output only. The release channel of the installed browser.
   * @return channel
   */
  @javax.annotation.Nullable
  public ChannelEnum getChannel() {
    return channel;
  }



  /**
   * Output only. Count grouped by device_system and major version
   * @return count
   */
  @javax.annotation.Nullable
  public String getCount() {
    return count;
  }



  /**
   * Output only. Version of the system-specified operating system.
   * @return deviceOsVersion
   */
  @javax.annotation.Nullable
  public String getDeviceOsVersion() {
    return deviceOsVersion;
  }



  /**
   * Output only. The device operating system.
   * @return system
   */
  @javax.annotation.Nullable
  public SystemEnum getSystem() {
    return system;
  }



  /**
   * Output only. The full version of the installed browser.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromeManagementV1BrowserVersion googleChromeManagementV1BrowserVersion = (GoogleChromeManagementV1BrowserVersion) o;
    return Objects.equals(this.channel, googleChromeManagementV1BrowserVersion.channel) &&
        Objects.equals(this.count, googleChromeManagementV1BrowserVersion.count) &&
        Objects.equals(this.deviceOsVersion, googleChromeManagementV1BrowserVersion.deviceOsVersion) &&
        Objects.equals(this.system, googleChromeManagementV1BrowserVersion.system) &&
        Objects.equals(this.version, googleChromeManagementV1BrowserVersion.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channel, count, deviceOsVersion, system, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromeManagementV1BrowserVersion {\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    deviceOsVersion: ").append(toIndentedString(deviceOsVersion)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channel");
    openapiFields.add("count");
    openapiFields.add("deviceOsVersion");
    openapiFields.add("system");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromeManagementV1BrowserVersion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromeManagementV1BrowserVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromeManagementV1BrowserVersion is not found in the empty JSON string", GoogleChromeManagementV1BrowserVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromeManagementV1BrowserVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromeManagementV1BrowserVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      // validate the optional field `channel`
      if (jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) {
        ChannelEnum.validateJsonElement(jsonObj.get("channel"));
      }
      if ((jsonObj.get("count") != null && !jsonObj.get("count").isJsonNull()) && !jsonObj.get("count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("count").toString()));
      }
      if ((jsonObj.get("deviceOsVersion") != null && !jsonObj.get("deviceOsVersion").isJsonNull()) && !jsonObj.get("deviceOsVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceOsVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceOsVersion").toString()));
      }
      if ((jsonObj.get("system") != null && !jsonObj.get("system").isJsonNull()) && !jsonObj.get("system").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `system` to be a primitive type in the JSON string but got `%s`", jsonObj.get("system").toString()));
      }
      // validate the optional field `system`
      if (jsonObj.get("system") != null && !jsonObj.get("system").isJsonNull()) {
        SystemEnum.validateJsonElement(jsonObj.get("system"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromeManagementV1BrowserVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromeManagementV1BrowserVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromeManagementV1BrowserVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromeManagementV1BrowserVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromeManagementV1BrowserVersion>() {
           @Override
           public void write(JsonWriter out, GoogleChromeManagementV1BrowserVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromeManagementV1BrowserVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromeManagementV1BrowserVersion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromeManagementV1BrowserVersion
   * @throws IOException if the JSON string is invalid with respect to GoogleChromeManagementV1BrowserVersion
   */
  public static GoogleChromeManagementV1BrowserVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromeManagementV1BrowserVersion.class);
  }

  /**
   * Convert an instance of GoogleChromeManagementV1BrowserVersion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

