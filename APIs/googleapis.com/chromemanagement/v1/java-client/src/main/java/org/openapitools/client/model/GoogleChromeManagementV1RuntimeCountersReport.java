/*
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Runtime counters retrieved from CPU. Currently the runtime counters telemetry is only supported by Intel vPro PSR on Gen 14+.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:04.349803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromeManagementV1RuntimeCountersReport {
  public static final String SERIALIZED_NAME_ENTER_HIBERNATION_COUNT = "enterHibernationCount";
  @SerializedName(SERIALIZED_NAME_ENTER_HIBERNATION_COUNT)
  private String enterHibernationCount;

  public static final String SERIALIZED_NAME_ENTER_POWEROFF_COUNT = "enterPoweroffCount";
  @SerializedName(SERIALIZED_NAME_ENTER_POWEROFF_COUNT)
  private String enterPoweroffCount;

  public static final String SERIALIZED_NAME_ENTER_SLEEP_COUNT = "enterSleepCount";
  @SerializedName(SERIALIZED_NAME_ENTER_SLEEP_COUNT)
  private String enterSleepCount;

  public static final String SERIALIZED_NAME_REPORT_TIME = "reportTime";
  @SerializedName(SERIALIZED_NAME_REPORT_TIME)
  private String reportTime;

  public static final String SERIALIZED_NAME_UPTIME_RUNTIME_DURATION = "uptimeRuntimeDuration";
  @SerializedName(SERIALIZED_NAME_UPTIME_RUNTIME_DURATION)
  private String uptimeRuntimeDuration;

  public GoogleChromeManagementV1RuntimeCountersReport() {
  }

  public GoogleChromeManagementV1RuntimeCountersReport enterHibernationCount(String enterHibernationCount) {
    this.enterHibernationCount = enterHibernationCount;
    return this;
  }

  /**
   * Number of times that the device has entered into the hibernation state. Currently obtained via the PSR, count from S0-&gt;S4.
   * @return enterHibernationCount
   */
  @javax.annotation.Nullable
  public String getEnterHibernationCount() {
    return enterHibernationCount;
  }

  public void setEnterHibernationCount(String enterHibernationCount) {
    this.enterHibernationCount = enterHibernationCount;
  }


  public GoogleChromeManagementV1RuntimeCountersReport enterPoweroffCount(String enterPoweroffCount) {
    this.enterPoweroffCount = enterPoweroffCount;
    return this;
  }

  /**
   * Number of times that the device has entered into the power-off state. Currently obtained via the PSR, count from S0-&gt;S5.
   * @return enterPoweroffCount
   */
  @javax.annotation.Nullable
  public String getEnterPoweroffCount() {
    return enterPoweroffCount;
  }

  public void setEnterPoweroffCount(String enterPoweroffCount) {
    this.enterPoweroffCount = enterPoweroffCount;
  }


  public GoogleChromeManagementV1RuntimeCountersReport enterSleepCount(String enterSleepCount) {
    this.enterSleepCount = enterSleepCount;
    return this;
  }

  /**
   * Number of times that the device has entered into the sleep state. Currently obtained via the PSR, count from S0-&gt;S3.
   * @return enterSleepCount
   */
  @javax.annotation.Nullable
  public String getEnterSleepCount() {
    return enterSleepCount;
  }

  public void setEnterSleepCount(String enterSleepCount) {
    this.enterSleepCount = enterSleepCount;
  }


  public GoogleChromeManagementV1RuntimeCountersReport reportTime(String reportTime) {
    this.reportTime = reportTime;
    return this;
  }

  /**
   * Timestamp when the report was collected.
   * @return reportTime
   */
  @javax.annotation.Nullable
  public String getReportTime() {
    return reportTime;
  }

  public void setReportTime(String reportTime) {
    this.reportTime = reportTime;
  }


  public GoogleChromeManagementV1RuntimeCountersReport uptimeRuntimeDuration(String uptimeRuntimeDuration) {
    this.uptimeRuntimeDuration = uptimeRuntimeDuration;
    return this;
  }

  /**
   * Total lifetime runtime. Currently always S0 runtime from Intel vPro PSR.
   * @return uptimeRuntimeDuration
   */
  @javax.annotation.Nullable
  public String getUptimeRuntimeDuration() {
    return uptimeRuntimeDuration;
  }

  public void setUptimeRuntimeDuration(String uptimeRuntimeDuration) {
    this.uptimeRuntimeDuration = uptimeRuntimeDuration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromeManagementV1RuntimeCountersReport googleChromeManagementV1RuntimeCountersReport = (GoogleChromeManagementV1RuntimeCountersReport) o;
    return Objects.equals(this.enterHibernationCount, googleChromeManagementV1RuntimeCountersReport.enterHibernationCount) &&
        Objects.equals(this.enterPoweroffCount, googleChromeManagementV1RuntimeCountersReport.enterPoweroffCount) &&
        Objects.equals(this.enterSleepCount, googleChromeManagementV1RuntimeCountersReport.enterSleepCount) &&
        Objects.equals(this.reportTime, googleChromeManagementV1RuntimeCountersReport.reportTime) &&
        Objects.equals(this.uptimeRuntimeDuration, googleChromeManagementV1RuntimeCountersReport.uptimeRuntimeDuration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enterHibernationCount, enterPoweroffCount, enterSleepCount, reportTime, uptimeRuntimeDuration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromeManagementV1RuntimeCountersReport {\n");
    sb.append("    enterHibernationCount: ").append(toIndentedString(enterHibernationCount)).append("\n");
    sb.append("    enterPoweroffCount: ").append(toIndentedString(enterPoweroffCount)).append("\n");
    sb.append("    enterSleepCount: ").append(toIndentedString(enterSleepCount)).append("\n");
    sb.append("    reportTime: ").append(toIndentedString(reportTime)).append("\n");
    sb.append("    uptimeRuntimeDuration: ").append(toIndentedString(uptimeRuntimeDuration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enterHibernationCount");
    openapiFields.add("enterPoweroffCount");
    openapiFields.add("enterSleepCount");
    openapiFields.add("reportTime");
    openapiFields.add("uptimeRuntimeDuration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromeManagementV1RuntimeCountersReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromeManagementV1RuntimeCountersReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromeManagementV1RuntimeCountersReport is not found in the empty JSON string", GoogleChromeManagementV1RuntimeCountersReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromeManagementV1RuntimeCountersReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromeManagementV1RuntimeCountersReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("enterHibernationCount") != null && !jsonObj.get("enterHibernationCount").isJsonNull()) && !jsonObj.get("enterHibernationCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enterHibernationCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enterHibernationCount").toString()));
      }
      if ((jsonObj.get("enterPoweroffCount") != null && !jsonObj.get("enterPoweroffCount").isJsonNull()) && !jsonObj.get("enterPoweroffCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enterPoweroffCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enterPoweroffCount").toString()));
      }
      if ((jsonObj.get("enterSleepCount") != null && !jsonObj.get("enterSleepCount").isJsonNull()) && !jsonObj.get("enterSleepCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enterSleepCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enterSleepCount").toString()));
      }
      if ((jsonObj.get("reportTime") != null && !jsonObj.get("reportTime").isJsonNull()) && !jsonObj.get("reportTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportTime").toString()));
      }
      if ((jsonObj.get("uptimeRuntimeDuration") != null && !jsonObj.get("uptimeRuntimeDuration").isJsonNull()) && !jsonObj.get("uptimeRuntimeDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uptimeRuntimeDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uptimeRuntimeDuration").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromeManagementV1RuntimeCountersReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromeManagementV1RuntimeCountersReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromeManagementV1RuntimeCountersReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromeManagementV1RuntimeCountersReport.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromeManagementV1RuntimeCountersReport>() {
           @Override
           public void write(JsonWriter out, GoogleChromeManagementV1RuntimeCountersReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromeManagementV1RuntimeCountersReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromeManagementV1RuntimeCountersReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromeManagementV1RuntimeCountersReport
   * @throws IOException if the JSON string is invalid with respect to GoogleChromeManagementV1RuntimeCountersReport
   */
  public static GoogleChromeManagementV1RuntimeCountersReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromeManagementV1RuntimeCountersReport.class);
  }

  /**
   * Convert an instance of GoogleChromeManagementV1RuntimeCountersReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

