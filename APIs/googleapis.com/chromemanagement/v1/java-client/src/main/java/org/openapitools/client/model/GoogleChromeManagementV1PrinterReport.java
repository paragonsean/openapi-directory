/*
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Report for CountPrintJobsByPrinter, contains statistics on printer usage. Contains the total number of print jobs initiated with this printer, the number of users and the number of devices that have initiated at least one print job with this printer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:04.349803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromeManagementV1PrinterReport {
  public static final String SERIALIZED_NAME_DEVICE_COUNT = "deviceCount";
  @SerializedName(SERIALIZED_NAME_DEVICE_COUNT)
  private String deviceCount;

  public static final String SERIALIZED_NAME_JOB_COUNT = "jobCount";
  @SerializedName(SERIALIZED_NAME_JOB_COUNT)
  private String jobCount;

  public static final String SERIALIZED_NAME_PRINTER = "printer";
  @SerializedName(SERIALIZED_NAME_PRINTER)
  private String printer;

  public static final String SERIALIZED_NAME_PRINTER_ID = "printerId";
  @SerializedName(SERIALIZED_NAME_PRINTER_ID)
  private String printerId;

  public static final String SERIALIZED_NAME_PRINTER_MODEL = "printerModel";
  @SerializedName(SERIALIZED_NAME_PRINTER_MODEL)
  private String printerModel;

  public static final String SERIALIZED_NAME_USER_COUNT = "userCount";
  @SerializedName(SERIALIZED_NAME_USER_COUNT)
  private String userCount;

  public GoogleChromeManagementV1PrinterReport() {
  }

  public GoogleChromeManagementV1PrinterReport deviceCount(String deviceCount) {
    this.deviceCount = deviceCount;
    return this;
  }

  /**
   * Number of chrome devices that have been used to send print jobs to the specified printer.
   * @return deviceCount
   */
  @javax.annotation.Nullable
  public String getDeviceCount() {
    return deviceCount;
  }

  public void setDeviceCount(String deviceCount) {
    this.deviceCount = deviceCount;
  }


  public GoogleChromeManagementV1PrinterReport jobCount(String jobCount) {
    this.jobCount = jobCount;
    return this;
  }

  /**
   * Number of print jobs sent to the printer.
   * @return jobCount
   */
  @javax.annotation.Nullable
  public String getJobCount() {
    return jobCount;
  }

  public void setJobCount(String jobCount) {
    this.jobCount = jobCount;
  }


  public GoogleChromeManagementV1PrinterReport printer(String printer) {
    this.printer = printer;
    return this;
  }

  /**
   * Printer name.
   * @return printer
   */
  @javax.annotation.Nullable
  public String getPrinter() {
    return printer;
  }

  public void setPrinter(String printer) {
    this.printer = printer;
  }


  public GoogleChromeManagementV1PrinterReport printerId(String printerId) {
    this.printerId = printerId;
    return this;
  }

  /**
   * Printer API ID.
   * @return printerId
   */
  @javax.annotation.Nullable
  public String getPrinterId() {
    return printerId;
  }

  public void setPrinterId(String printerId) {
    this.printerId = printerId;
  }


  public GoogleChromeManagementV1PrinterReport printerModel(String printerModel) {
    this.printerModel = printerModel;
    return this;
  }

  /**
   * Printer model.
   * @return printerModel
   */
  @javax.annotation.Nullable
  public String getPrinterModel() {
    return printerModel;
  }

  public void setPrinterModel(String printerModel) {
    this.printerModel = printerModel;
  }


  public GoogleChromeManagementV1PrinterReport userCount(String userCount) {
    this.userCount = userCount;
    return this;
  }

  /**
   * Number of users that have sent print jobs to the printer.
   * @return userCount
   */
  @javax.annotation.Nullable
  public String getUserCount() {
    return userCount;
  }

  public void setUserCount(String userCount) {
    this.userCount = userCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromeManagementV1PrinterReport googleChromeManagementV1PrinterReport = (GoogleChromeManagementV1PrinterReport) o;
    return Objects.equals(this.deviceCount, googleChromeManagementV1PrinterReport.deviceCount) &&
        Objects.equals(this.jobCount, googleChromeManagementV1PrinterReport.jobCount) &&
        Objects.equals(this.printer, googleChromeManagementV1PrinterReport.printer) &&
        Objects.equals(this.printerId, googleChromeManagementV1PrinterReport.printerId) &&
        Objects.equals(this.printerModel, googleChromeManagementV1PrinterReport.printerModel) &&
        Objects.equals(this.userCount, googleChromeManagementV1PrinterReport.userCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceCount, jobCount, printer, printerId, printerModel, userCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromeManagementV1PrinterReport {\n");
    sb.append("    deviceCount: ").append(toIndentedString(deviceCount)).append("\n");
    sb.append("    jobCount: ").append(toIndentedString(jobCount)).append("\n");
    sb.append("    printer: ").append(toIndentedString(printer)).append("\n");
    sb.append("    printerId: ").append(toIndentedString(printerId)).append("\n");
    sb.append("    printerModel: ").append(toIndentedString(printerModel)).append("\n");
    sb.append("    userCount: ").append(toIndentedString(userCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deviceCount");
    openapiFields.add("jobCount");
    openapiFields.add("printer");
    openapiFields.add("printerId");
    openapiFields.add("printerModel");
    openapiFields.add("userCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromeManagementV1PrinterReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromeManagementV1PrinterReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromeManagementV1PrinterReport is not found in the empty JSON string", GoogleChromeManagementV1PrinterReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromeManagementV1PrinterReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromeManagementV1PrinterReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("deviceCount") != null && !jsonObj.get("deviceCount").isJsonNull()) && !jsonObj.get("deviceCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceCount").toString()));
      }
      if ((jsonObj.get("jobCount") != null && !jsonObj.get("jobCount").isJsonNull()) && !jsonObj.get("jobCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobCount").toString()));
      }
      if ((jsonObj.get("printer") != null && !jsonObj.get("printer").isJsonNull()) && !jsonObj.get("printer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `printer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("printer").toString()));
      }
      if ((jsonObj.get("printerId") != null && !jsonObj.get("printerId").isJsonNull()) && !jsonObj.get("printerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `printerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("printerId").toString()));
      }
      if ((jsonObj.get("printerModel") != null && !jsonObj.get("printerModel").isJsonNull()) && !jsonObj.get("printerModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `printerModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("printerModel").toString()));
      }
      if ((jsonObj.get("userCount") != null && !jsonObj.get("userCount").isJsonNull()) && !jsonObj.get("userCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromeManagementV1PrinterReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromeManagementV1PrinterReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromeManagementV1PrinterReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromeManagementV1PrinterReport.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromeManagementV1PrinterReport>() {
           @Override
           public void write(JsonWriter out, GoogleChromeManagementV1PrinterReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromeManagementV1PrinterReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromeManagementV1PrinterReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromeManagementV1PrinterReport
   * @throws IOException if the JSON string is invalid with respect to GoogleChromeManagementV1PrinterReport
   */
  public static GoogleChromeManagementV1PrinterReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromeManagementV1PrinterReport.class);
  }

  /**
   * Convert an instance of GoogleChromeManagementV1PrinterReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

