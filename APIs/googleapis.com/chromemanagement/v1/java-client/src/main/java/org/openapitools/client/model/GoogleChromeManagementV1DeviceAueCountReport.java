/*
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Report for CountChromeDevicesPerAueDateResponse, contains the count of devices of a specific model and auto update expiration range.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:04.349803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromeManagementV1DeviceAueCountReport {
  /**
   * Enum value of month corresponding to the auto update expiration date in UTC time zone. If the device is already expired, this field is empty.
   */
  @JsonAdapter(AueMonthEnum.Adapter.class)
  public enum AueMonthEnum {
    MONTH_UNSPECIFIED("MONTH_UNSPECIFIED"),
    
    JANUARY("JANUARY"),
    
    FEBRUARY("FEBRUARY"),
    
    MARCH("MARCH"),
    
    APRIL("APRIL"),
    
    MAY("MAY"),
    
    JUNE("JUNE"),
    
    JULY("JULY"),
    
    AUGUST("AUGUST"),
    
    SEPTEMBER("SEPTEMBER"),
    
    OCTOBER("OCTOBER"),
    
    NOVEMBER("NOVEMBER"),
    
    DECEMBER("DECEMBER");

    private String value;

    AueMonthEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AueMonthEnum fromValue(String value) {
      for (AueMonthEnum b : AueMonthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AueMonthEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AueMonthEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AueMonthEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AueMonthEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AueMonthEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUE_MONTH = "aueMonth";
  @SerializedName(SERIALIZED_NAME_AUE_MONTH)
  private AueMonthEnum aueMonth;

  public static final String SERIALIZED_NAME_AUE_YEAR = "aueYear";
  @SerializedName(SERIALIZED_NAME_AUE_YEAR)
  private String aueYear;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private String count;

  public static final String SERIALIZED_NAME_EXPIRED = "expired";
  @SerializedName(SERIALIZED_NAME_EXPIRED)
  private Boolean expired;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public GoogleChromeManagementV1DeviceAueCountReport() {
  }

  public GoogleChromeManagementV1DeviceAueCountReport aueMonth(AueMonthEnum aueMonth) {
    this.aueMonth = aueMonth;
    return this;
  }

  /**
   * Enum value of month corresponding to the auto update expiration date in UTC time zone. If the device is already expired, this field is empty.
   * @return aueMonth
   */
  @javax.annotation.Nullable
  public AueMonthEnum getAueMonth() {
    return aueMonth;
  }

  public void setAueMonth(AueMonthEnum aueMonth) {
    this.aueMonth = aueMonth;
  }


  public GoogleChromeManagementV1DeviceAueCountReport aueYear(String aueYear) {
    this.aueYear = aueYear;
    return this;
  }

  /**
   * Int value of year corresponding to the Auto Update Expiration date in UTC time zone. If the device is already expired, this field is empty.
   * @return aueYear
   */
  @javax.annotation.Nullable
  public String getAueYear() {
    return aueYear;
  }

  public void setAueYear(String aueYear) {
    this.aueYear = aueYear;
  }


  public GoogleChromeManagementV1DeviceAueCountReport count(String count) {
    this.count = count;
    return this;
  }

  /**
   * Count of devices of this model.
   * @return count
   */
  @javax.annotation.Nullable
  public String getCount() {
    return count;
  }

  public void setCount(String count) {
    this.count = count;
  }


  public GoogleChromeManagementV1DeviceAueCountReport expired(Boolean expired) {
    this.expired = expired;
    return this;
  }

  /**
   * Boolean value for whether or not the device has already expired.
   * @return expired
   */
  @javax.annotation.Nullable
  public Boolean getExpired() {
    return expired;
  }

  public void setExpired(Boolean expired) {
    this.expired = expired;
  }


  public GoogleChromeManagementV1DeviceAueCountReport model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Public model name of the devices.
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromeManagementV1DeviceAueCountReport googleChromeManagementV1DeviceAueCountReport = (GoogleChromeManagementV1DeviceAueCountReport) o;
    return Objects.equals(this.aueMonth, googleChromeManagementV1DeviceAueCountReport.aueMonth) &&
        Objects.equals(this.aueYear, googleChromeManagementV1DeviceAueCountReport.aueYear) &&
        Objects.equals(this.count, googleChromeManagementV1DeviceAueCountReport.count) &&
        Objects.equals(this.expired, googleChromeManagementV1DeviceAueCountReport.expired) &&
        Objects.equals(this.model, googleChromeManagementV1DeviceAueCountReport.model);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aueMonth, aueYear, count, expired, model);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromeManagementV1DeviceAueCountReport {\n");
    sb.append("    aueMonth: ").append(toIndentedString(aueMonth)).append("\n");
    sb.append("    aueYear: ").append(toIndentedString(aueYear)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    expired: ").append(toIndentedString(expired)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aueMonth");
    openapiFields.add("aueYear");
    openapiFields.add("count");
    openapiFields.add("expired");
    openapiFields.add("model");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromeManagementV1DeviceAueCountReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromeManagementV1DeviceAueCountReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromeManagementV1DeviceAueCountReport is not found in the empty JSON string", GoogleChromeManagementV1DeviceAueCountReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromeManagementV1DeviceAueCountReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromeManagementV1DeviceAueCountReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aueMonth") != null && !jsonObj.get("aueMonth").isJsonNull()) && !jsonObj.get("aueMonth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aueMonth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aueMonth").toString()));
      }
      // validate the optional field `aueMonth`
      if (jsonObj.get("aueMonth") != null && !jsonObj.get("aueMonth").isJsonNull()) {
        AueMonthEnum.validateJsonElement(jsonObj.get("aueMonth"));
      }
      if ((jsonObj.get("aueYear") != null && !jsonObj.get("aueYear").isJsonNull()) && !jsonObj.get("aueYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aueYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aueYear").toString()));
      }
      if ((jsonObj.get("count") != null && !jsonObj.get("count").isJsonNull()) && !jsonObj.get("count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("count").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromeManagementV1DeviceAueCountReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromeManagementV1DeviceAueCountReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromeManagementV1DeviceAueCountReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromeManagementV1DeviceAueCountReport.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromeManagementV1DeviceAueCountReport>() {
           @Override
           public void write(JsonWriter out, GoogleChromeManagementV1DeviceAueCountReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromeManagementV1DeviceAueCountReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromeManagementV1DeviceAueCountReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromeManagementV1DeviceAueCountReport
   * @throws IOException if the JSON string is invalid with respect to GoogleChromeManagementV1DeviceAueCountReport
   */
  public static GoogleChromeManagementV1DeviceAueCountReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromeManagementV1DeviceAueCountReport.class);
  }

  /**
   * Convert an instance of GoogleChromeManagementV1DeviceAueCountReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

