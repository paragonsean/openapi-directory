/*
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleChromeManagementV1TelemetryEventNotificationFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configures how the telemetry data should be filtered.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:04.349803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromeManagementV1TelemetryNotificationFilter {
  public static final String SERIALIZED_NAME_DEVICE_ID = "deviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_DEVICE_ORG_UNIT_ID = "deviceOrgUnitId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ORG_UNIT_ID)
  private String deviceOrgUnitId;

  public static final String SERIALIZED_NAME_TELEMETRY_EVENT_NOTIFICATION_FILTER = "telemetryEventNotificationFilter";
  @SerializedName(SERIALIZED_NAME_TELEMETRY_EVENT_NOTIFICATION_FILTER)
  private GoogleChromeManagementV1TelemetryEventNotificationFilter telemetryEventNotificationFilter;

  public static final String SERIALIZED_NAME_USER_EMAIL = "userEmail";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public static final String SERIALIZED_NAME_USER_ORG_UNIT_ID = "userOrgUnitId";
  @SerializedName(SERIALIZED_NAME_USER_ORG_UNIT_ID)
  private String userOrgUnitId;

  public GoogleChromeManagementV1TelemetryNotificationFilter() {
  }

  public GoogleChromeManagementV1TelemetryNotificationFilter deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * If set, only sends notifications for telemetry data coming from this device.
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public GoogleChromeManagementV1TelemetryNotificationFilter deviceOrgUnitId(String deviceOrgUnitId) {
    this.deviceOrgUnitId = deviceOrgUnitId;
    return this;
  }

  /**
   * If set, only sends notifications for telemetry data coming from devices in this org unit.
   * @return deviceOrgUnitId
   */
  @javax.annotation.Nullable
  public String getDeviceOrgUnitId() {
    return deviceOrgUnitId;
  }

  public void setDeviceOrgUnitId(String deviceOrgUnitId) {
    this.deviceOrgUnitId = deviceOrgUnitId;
  }


  public GoogleChromeManagementV1TelemetryNotificationFilter telemetryEventNotificationFilter(GoogleChromeManagementV1TelemetryEventNotificationFilter telemetryEventNotificationFilter) {
    this.telemetryEventNotificationFilter = telemetryEventNotificationFilter;
    return this;
  }

  /**
   * Get telemetryEventNotificationFilter
   * @return telemetryEventNotificationFilter
   */
  @javax.annotation.Nullable
  public GoogleChromeManagementV1TelemetryEventNotificationFilter getTelemetryEventNotificationFilter() {
    return telemetryEventNotificationFilter;
  }

  public void setTelemetryEventNotificationFilter(GoogleChromeManagementV1TelemetryEventNotificationFilter telemetryEventNotificationFilter) {
    this.telemetryEventNotificationFilter = telemetryEventNotificationFilter;
  }


  public GoogleChromeManagementV1TelemetryNotificationFilter userEmail(String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

  /**
   * If set, only sends notifications for telemetry data coming from devices owned by this user.
   * @return userEmail
   */
  @javax.annotation.Nullable
  public String getUserEmail() {
    return userEmail;
  }

  public void setUserEmail(String userEmail) {
    this.userEmail = userEmail;
  }


  public GoogleChromeManagementV1TelemetryNotificationFilter userOrgUnitId(String userOrgUnitId) {
    this.userOrgUnitId = userOrgUnitId;
    return this;
  }

  /**
   * If set, only sends notifications for telemetry data coming from devices owned by users in this org unit.
   * @return userOrgUnitId
   */
  @javax.annotation.Nullable
  public String getUserOrgUnitId() {
    return userOrgUnitId;
  }

  public void setUserOrgUnitId(String userOrgUnitId) {
    this.userOrgUnitId = userOrgUnitId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromeManagementV1TelemetryNotificationFilter googleChromeManagementV1TelemetryNotificationFilter = (GoogleChromeManagementV1TelemetryNotificationFilter) o;
    return Objects.equals(this.deviceId, googleChromeManagementV1TelemetryNotificationFilter.deviceId) &&
        Objects.equals(this.deviceOrgUnitId, googleChromeManagementV1TelemetryNotificationFilter.deviceOrgUnitId) &&
        Objects.equals(this.telemetryEventNotificationFilter, googleChromeManagementV1TelemetryNotificationFilter.telemetryEventNotificationFilter) &&
        Objects.equals(this.userEmail, googleChromeManagementV1TelemetryNotificationFilter.userEmail) &&
        Objects.equals(this.userOrgUnitId, googleChromeManagementV1TelemetryNotificationFilter.userOrgUnitId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceId, deviceOrgUnitId, telemetryEventNotificationFilter, userEmail, userOrgUnitId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromeManagementV1TelemetryNotificationFilter {\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    deviceOrgUnitId: ").append(toIndentedString(deviceOrgUnitId)).append("\n");
    sb.append("    telemetryEventNotificationFilter: ").append(toIndentedString(telemetryEventNotificationFilter)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("    userOrgUnitId: ").append(toIndentedString(userOrgUnitId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deviceId");
    openapiFields.add("deviceOrgUnitId");
    openapiFields.add("telemetryEventNotificationFilter");
    openapiFields.add("userEmail");
    openapiFields.add("userOrgUnitId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromeManagementV1TelemetryNotificationFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromeManagementV1TelemetryNotificationFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromeManagementV1TelemetryNotificationFilter is not found in the empty JSON string", GoogleChromeManagementV1TelemetryNotificationFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromeManagementV1TelemetryNotificationFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromeManagementV1TelemetryNotificationFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("deviceId") != null && !jsonObj.get("deviceId").isJsonNull()) && !jsonObj.get("deviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceId").toString()));
      }
      if ((jsonObj.get("deviceOrgUnitId") != null && !jsonObj.get("deviceOrgUnitId").isJsonNull()) && !jsonObj.get("deviceOrgUnitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceOrgUnitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceOrgUnitId").toString()));
      }
      // validate the optional field `telemetryEventNotificationFilter`
      if (jsonObj.get("telemetryEventNotificationFilter") != null && !jsonObj.get("telemetryEventNotificationFilter").isJsonNull()) {
        GoogleChromeManagementV1TelemetryEventNotificationFilter.validateJsonElement(jsonObj.get("telemetryEventNotificationFilter"));
      }
      if ((jsonObj.get("userEmail") != null && !jsonObj.get("userEmail").isJsonNull()) && !jsonObj.get("userEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userEmail").toString()));
      }
      if ((jsonObj.get("userOrgUnitId") != null && !jsonObj.get("userOrgUnitId").isJsonNull()) && !jsonObj.get("userOrgUnitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userOrgUnitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userOrgUnitId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromeManagementV1TelemetryNotificationFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromeManagementV1TelemetryNotificationFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromeManagementV1TelemetryNotificationFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromeManagementV1TelemetryNotificationFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromeManagementV1TelemetryNotificationFilter>() {
           @Override
           public void write(JsonWriter out, GoogleChromeManagementV1TelemetryNotificationFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromeManagementV1TelemetryNotificationFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromeManagementV1TelemetryNotificationFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromeManagementV1TelemetryNotificationFilter
   * @throws IOException if the JSON string is invalid with respect to GoogleChromeManagementV1TelemetryNotificationFilter
   */
  public static GoogleChromeManagementV1TelemetryNotificationFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromeManagementV1TelemetryNotificationFilter.class);
  }

  /**
   * Convert an instance of GoogleChromeManagementV1TelemetryNotificationFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

