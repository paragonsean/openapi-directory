/*
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleChromeManagementV1TelemetryUserDevice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Telemetry data collected from a managed user. * Granular permission needed: TELEMETRY_API_USER
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:04.349803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromeManagementV1TelemetryUser {
  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private String customer;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORG_UNIT_ID = "orgUnitId";
  @SerializedName(SERIALIZED_NAME_ORG_UNIT_ID)
  private String orgUnitId;

  public static final String SERIALIZED_NAME_USER_DEVICE = "userDevice";
  @SerializedName(SERIALIZED_NAME_USER_DEVICE)
  private List<GoogleChromeManagementV1TelemetryUserDevice> userDevice = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_EMAIL = "userEmail";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public GoogleChromeManagementV1TelemetryUser() {
  }

  public GoogleChromeManagementV1TelemetryUser customer(String customer) {
    this.customer = customer;
    return this;
  }

  /**
   * G Suite Customer whose enterprise enrolled the device.
   * @return customer
   */
  @javax.annotation.Nullable
  public String getCustomer() {
    return customer;
  }

  public void setCustomer(String customer) {
    this.customer = customer;
  }


  public GoogleChromeManagementV1TelemetryUser name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Resource name of the user.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleChromeManagementV1TelemetryUser orgUnitId(String orgUnitId) {
    this.orgUnitId = orgUnitId;
    return this;
  }

  /**
   * Organization unit of the user.
   * @return orgUnitId
   */
  @javax.annotation.Nullable
  public String getOrgUnitId() {
    return orgUnitId;
  }

  public void setOrgUnitId(String orgUnitId) {
    this.orgUnitId = orgUnitId;
  }


  public GoogleChromeManagementV1TelemetryUser userDevice(List<GoogleChromeManagementV1TelemetryUserDevice> userDevice) {
    this.userDevice = userDevice;
    return this;
  }

  public GoogleChromeManagementV1TelemetryUser addUserDeviceItem(GoogleChromeManagementV1TelemetryUserDevice userDeviceItem) {
    if (this.userDevice == null) {
      this.userDevice = new ArrayList<>();
    }
    this.userDevice.add(userDeviceItem);
    return this;
  }

  /**
   * Telemetry data collected from a managed user and device.
   * @return userDevice
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1TelemetryUserDevice> getUserDevice() {
    return userDevice;
  }

  public void setUserDevice(List<GoogleChromeManagementV1TelemetryUserDevice> userDevice) {
    this.userDevice = userDevice;
  }


  public GoogleChromeManagementV1TelemetryUser userEmail(String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

  /**
   * Email address of the user.
   * @return userEmail
   */
  @javax.annotation.Nullable
  public String getUserEmail() {
    return userEmail;
  }

  public void setUserEmail(String userEmail) {
    this.userEmail = userEmail;
  }


  public GoogleChromeManagementV1TelemetryUser userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Directory ID of the user.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromeManagementV1TelemetryUser googleChromeManagementV1TelemetryUser = (GoogleChromeManagementV1TelemetryUser) o;
    return Objects.equals(this.customer, googleChromeManagementV1TelemetryUser.customer) &&
        Objects.equals(this.name, googleChromeManagementV1TelemetryUser.name) &&
        Objects.equals(this.orgUnitId, googleChromeManagementV1TelemetryUser.orgUnitId) &&
        Objects.equals(this.userDevice, googleChromeManagementV1TelemetryUser.userDevice) &&
        Objects.equals(this.userEmail, googleChromeManagementV1TelemetryUser.userEmail) &&
        Objects.equals(this.userId, googleChromeManagementV1TelemetryUser.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customer, name, orgUnitId, userDevice, userEmail, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromeManagementV1TelemetryUser {\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orgUnitId: ").append(toIndentedString(orgUnitId)).append("\n");
    sb.append("    userDevice: ").append(toIndentedString(userDevice)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customer");
    openapiFields.add("name");
    openapiFields.add("orgUnitId");
    openapiFields.add("userDevice");
    openapiFields.add("userEmail");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromeManagementV1TelemetryUser
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromeManagementV1TelemetryUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromeManagementV1TelemetryUser is not found in the empty JSON string", GoogleChromeManagementV1TelemetryUser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromeManagementV1TelemetryUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromeManagementV1TelemetryUser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) && !jsonObj.get("customer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("orgUnitId") != null && !jsonObj.get("orgUnitId").isJsonNull()) && !jsonObj.get("orgUnitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgUnitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgUnitId").toString()));
      }
      if (jsonObj.get("userDevice") != null && !jsonObj.get("userDevice").isJsonNull()) {
        JsonArray jsonArrayuserDevice = jsonObj.getAsJsonArray("userDevice");
        if (jsonArrayuserDevice != null) {
          // ensure the json data is an array
          if (!jsonObj.get("userDevice").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `userDevice` to be an array in the JSON string but got `%s`", jsonObj.get("userDevice").toString()));
          }

          // validate the optional field `userDevice` (array)
          for (int i = 0; i < jsonArrayuserDevice.size(); i++) {
            GoogleChromeManagementV1TelemetryUserDevice.validateJsonElement(jsonArrayuserDevice.get(i));
          };
        }
      }
      if ((jsonObj.get("userEmail") != null && !jsonObj.get("userEmail").isJsonNull()) && !jsonObj.get("userEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userEmail").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromeManagementV1TelemetryUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromeManagementV1TelemetryUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromeManagementV1TelemetryUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromeManagementV1TelemetryUser.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromeManagementV1TelemetryUser>() {
           @Override
           public void write(JsonWriter out, GoogleChromeManagementV1TelemetryUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromeManagementV1TelemetryUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromeManagementV1TelemetryUser given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromeManagementV1TelemetryUser
   * @throws IOException if the JSON string is invalid with respect to GoogleChromeManagementV1TelemetryUser
   */
  public static GoogleChromeManagementV1TelemetryUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromeManagementV1TelemetryUser.class);
  }

  /**
   * Convert an instance of GoogleChromeManagementV1TelemetryUser to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

