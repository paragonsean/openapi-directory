/*
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleChromeManagementV1TelemetryDeviceInfo;
import org.openapitools.client.model.GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent;
import org.openapitools.client.model.GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent;
import org.openapitools.client.model.GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent;
import org.openapitools.client.model.GoogleChromeManagementV1TelemetryUsbPeripheralsEvent;
import org.openapitools.client.model.GoogleChromeManagementV1TelemetryUserInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Telemetry data reported by a managed device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:04.349803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromeManagementV1TelemetryEvent {
  public static final String SERIALIZED_NAME_AUDIO_SEVERE_UNDERRUN_EVENT = "audioSevereUnderrunEvent";
  @SerializedName(SERIALIZED_NAME_AUDIO_SEVERE_UNDERRUN_EVENT)
  private Object audioSevereUnderrunEvent;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private GoogleChromeManagementV1TelemetryDeviceInfo device;

  /**
   * The event type of the current event.
   */
  @JsonAdapter(EventTypeEnum.Adapter.class)
  public enum EventTypeEnum {
    EVENT_TYPE_UNSPECIFIED("EVENT_TYPE_UNSPECIFIED"),
    
    AUDIO_SEVERE_UNDERRUN("AUDIO_SEVERE_UNDERRUN"),
    
    NETWORK_STATE_CHANGE("NETWORK_STATE_CHANGE"),
    
    USB_ADDED("USB_ADDED"),
    
    USB_REMOVED("USB_REMOVED"),
    
    NETWORK_HTTPS_LATENCY_CHANGE("NETWORK_HTTPS_LATENCY_CHANGE"),
    
    WIFI_SIGNAL_STRENGTH_LOW("WIFI_SIGNAL_STRENGTH_LOW"),
    
    WIFI_SIGNAL_STRENGTH_RECOVERED("WIFI_SIGNAL_STRENGTH_RECOVERED"),
    
    VPN_CONNECTION_STATE_CHANGE("VPN_CONNECTION_STATE_CHANGE");

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventTypeEnum fromValue(String value) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private EventTypeEnum eventType;

  public static final String SERIALIZED_NAME_HTTPS_LATENCY_CHANGE_EVENT = "httpsLatencyChangeEvent";
  @SerializedName(SERIALIZED_NAME_HTTPS_LATENCY_CHANGE_EVENT)
  private GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent httpsLatencyChangeEvent;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK_STATE_CHANGE_EVENT = "networkStateChangeEvent";
  @SerializedName(SERIALIZED_NAME_NETWORK_STATE_CHANGE_EVENT)
  private GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent networkStateChangeEvent;

  public static final String SERIALIZED_NAME_REPORT_TIME = "reportTime";
  @SerializedName(SERIALIZED_NAME_REPORT_TIME)
  private String reportTime;

  public static final String SERIALIZED_NAME_USB_PERIPHERALS_EVENT = "usbPeripheralsEvent";
  @SerializedName(SERIALIZED_NAME_USB_PERIPHERALS_EVENT)
  private GoogleChromeManagementV1TelemetryUsbPeripheralsEvent usbPeripheralsEvent;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private GoogleChromeManagementV1TelemetryUserInfo user;

  public static final String SERIALIZED_NAME_VPN_CONNECTION_STATE_CHANGE_EVENT = "vpnConnectionStateChangeEvent";
  @SerializedName(SERIALIZED_NAME_VPN_CONNECTION_STATE_CHANGE_EVENT)
  private GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent vpnConnectionStateChangeEvent;

  public static final String SERIALIZED_NAME_WIFI_SIGNAL_STRENGTH_EVENT = "wifiSignalStrengthEvent";
  @SerializedName(SERIALIZED_NAME_WIFI_SIGNAL_STRENGTH_EVENT)
  private GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent wifiSignalStrengthEvent;

  public GoogleChromeManagementV1TelemetryEvent() {
  }

  public GoogleChromeManagementV1TelemetryEvent(
     String name
  ) {
    this();
    this.name = name;
  }

  public GoogleChromeManagementV1TelemetryEvent audioSevereUnderrunEvent(Object audioSevereUnderrunEvent) {
    this.audioSevereUnderrunEvent = audioSevereUnderrunEvent;
    return this;
  }

  /**
   * &#x60;TelemetryAudioSevereUnderrunEvent&#x60; is triggered when a audio devices run out of buffer data for more than 5 seconds. * Granular permission needed: TELEMETRY_API_AUDIO_REPORT
   * @return audioSevereUnderrunEvent
   */
  @javax.annotation.Nullable
  public Object getAudioSevereUnderrunEvent() {
    return audioSevereUnderrunEvent;
  }

  public void setAudioSevereUnderrunEvent(Object audioSevereUnderrunEvent) {
    this.audioSevereUnderrunEvent = audioSevereUnderrunEvent;
  }


  public GoogleChromeManagementV1TelemetryEvent device(GoogleChromeManagementV1TelemetryDeviceInfo device) {
    this.device = device;
    return this;
  }

  /**
   * Get device
   * @return device
   */
  @javax.annotation.Nullable
  public GoogleChromeManagementV1TelemetryDeviceInfo getDevice() {
    return device;
  }

  public void setDevice(GoogleChromeManagementV1TelemetryDeviceInfo device) {
    this.device = device;
  }


  public GoogleChromeManagementV1TelemetryEvent eventType(EventTypeEnum eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * The event type of the current event.
   * @return eventType
   */
  @javax.annotation.Nullable
  public EventTypeEnum getEventType() {
    return eventType;
  }

  public void setEventType(EventTypeEnum eventType) {
    this.eventType = eventType;
  }


  public GoogleChromeManagementV1TelemetryEvent httpsLatencyChangeEvent(GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent httpsLatencyChangeEvent) {
    this.httpsLatencyChangeEvent = httpsLatencyChangeEvent;
    return this;
  }

  /**
   * Get httpsLatencyChangeEvent
   * @return httpsLatencyChangeEvent
   */
  @javax.annotation.Nullable
  public GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent getHttpsLatencyChangeEvent() {
    return httpsLatencyChangeEvent;
  }

  public void setHttpsLatencyChangeEvent(GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent httpsLatencyChangeEvent) {
    this.httpsLatencyChangeEvent = httpsLatencyChangeEvent;
  }


  /**
   * Output only. Resource name of the event.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public GoogleChromeManagementV1TelemetryEvent networkStateChangeEvent(GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent networkStateChangeEvent) {
    this.networkStateChangeEvent = networkStateChangeEvent;
    return this;
  }

  /**
   * Get networkStateChangeEvent
   * @return networkStateChangeEvent
   */
  @javax.annotation.Nullable
  public GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent getNetworkStateChangeEvent() {
    return networkStateChangeEvent;
  }

  public void setNetworkStateChangeEvent(GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent networkStateChangeEvent) {
    this.networkStateChangeEvent = networkStateChangeEvent;
  }


  public GoogleChromeManagementV1TelemetryEvent reportTime(String reportTime) {
    this.reportTime = reportTime;
    return this;
  }

  /**
   * Timestamp that represents when the event was reported.
   * @return reportTime
   */
  @javax.annotation.Nullable
  public String getReportTime() {
    return reportTime;
  }

  public void setReportTime(String reportTime) {
    this.reportTime = reportTime;
  }


  public GoogleChromeManagementV1TelemetryEvent usbPeripheralsEvent(GoogleChromeManagementV1TelemetryUsbPeripheralsEvent usbPeripheralsEvent) {
    this.usbPeripheralsEvent = usbPeripheralsEvent;
    return this;
  }

  /**
   * Get usbPeripheralsEvent
   * @return usbPeripheralsEvent
   */
  @javax.annotation.Nullable
  public GoogleChromeManagementV1TelemetryUsbPeripheralsEvent getUsbPeripheralsEvent() {
    return usbPeripheralsEvent;
  }

  public void setUsbPeripheralsEvent(GoogleChromeManagementV1TelemetryUsbPeripheralsEvent usbPeripheralsEvent) {
    this.usbPeripheralsEvent = usbPeripheralsEvent;
  }


  public GoogleChromeManagementV1TelemetryEvent user(GoogleChromeManagementV1TelemetryUserInfo user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public GoogleChromeManagementV1TelemetryUserInfo getUser() {
    return user;
  }

  public void setUser(GoogleChromeManagementV1TelemetryUserInfo user) {
    this.user = user;
  }


  public GoogleChromeManagementV1TelemetryEvent vpnConnectionStateChangeEvent(GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent vpnConnectionStateChangeEvent) {
    this.vpnConnectionStateChangeEvent = vpnConnectionStateChangeEvent;
    return this;
  }

  /**
   * Get vpnConnectionStateChangeEvent
   * @return vpnConnectionStateChangeEvent
   */
  @javax.annotation.Nullable
  public GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent getVpnConnectionStateChangeEvent() {
    return vpnConnectionStateChangeEvent;
  }

  public void setVpnConnectionStateChangeEvent(GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent vpnConnectionStateChangeEvent) {
    this.vpnConnectionStateChangeEvent = vpnConnectionStateChangeEvent;
  }


  public GoogleChromeManagementV1TelemetryEvent wifiSignalStrengthEvent(GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent wifiSignalStrengthEvent) {
    this.wifiSignalStrengthEvent = wifiSignalStrengthEvent;
    return this;
  }

  /**
   * Get wifiSignalStrengthEvent
   * @return wifiSignalStrengthEvent
   */
  @javax.annotation.Nullable
  public GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent getWifiSignalStrengthEvent() {
    return wifiSignalStrengthEvent;
  }

  public void setWifiSignalStrengthEvent(GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent wifiSignalStrengthEvent) {
    this.wifiSignalStrengthEvent = wifiSignalStrengthEvent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromeManagementV1TelemetryEvent googleChromeManagementV1TelemetryEvent = (GoogleChromeManagementV1TelemetryEvent) o;
    return Objects.equals(this.audioSevereUnderrunEvent, googleChromeManagementV1TelemetryEvent.audioSevereUnderrunEvent) &&
        Objects.equals(this.device, googleChromeManagementV1TelemetryEvent.device) &&
        Objects.equals(this.eventType, googleChromeManagementV1TelemetryEvent.eventType) &&
        Objects.equals(this.httpsLatencyChangeEvent, googleChromeManagementV1TelemetryEvent.httpsLatencyChangeEvent) &&
        Objects.equals(this.name, googleChromeManagementV1TelemetryEvent.name) &&
        Objects.equals(this.networkStateChangeEvent, googleChromeManagementV1TelemetryEvent.networkStateChangeEvent) &&
        Objects.equals(this.reportTime, googleChromeManagementV1TelemetryEvent.reportTime) &&
        Objects.equals(this.usbPeripheralsEvent, googleChromeManagementV1TelemetryEvent.usbPeripheralsEvent) &&
        Objects.equals(this.user, googleChromeManagementV1TelemetryEvent.user) &&
        Objects.equals(this.vpnConnectionStateChangeEvent, googleChromeManagementV1TelemetryEvent.vpnConnectionStateChangeEvent) &&
        Objects.equals(this.wifiSignalStrengthEvent, googleChromeManagementV1TelemetryEvent.wifiSignalStrengthEvent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioSevereUnderrunEvent, device, eventType, httpsLatencyChangeEvent, name, networkStateChangeEvent, reportTime, usbPeripheralsEvent, user, vpnConnectionStateChangeEvent, wifiSignalStrengthEvent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromeManagementV1TelemetryEvent {\n");
    sb.append("    audioSevereUnderrunEvent: ").append(toIndentedString(audioSevereUnderrunEvent)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    httpsLatencyChangeEvent: ").append(toIndentedString(httpsLatencyChangeEvent)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkStateChangeEvent: ").append(toIndentedString(networkStateChangeEvent)).append("\n");
    sb.append("    reportTime: ").append(toIndentedString(reportTime)).append("\n");
    sb.append("    usbPeripheralsEvent: ").append(toIndentedString(usbPeripheralsEvent)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    vpnConnectionStateChangeEvent: ").append(toIndentedString(vpnConnectionStateChangeEvent)).append("\n");
    sb.append("    wifiSignalStrengthEvent: ").append(toIndentedString(wifiSignalStrengthEvent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audioSevereUnderrunEvent");
    openapiFields.add("device");
    openapiFields.add("eventType");
    openapiFields.add("httpsLatencyChangeEvent");
    openapiFields.add("name");
    openapiFields.add("networkStateChangeEvent");
    openapiFields.add("reportTime");
    openapiFields.add("usbPeripheralsEvent");
    openapiFields.add("user");
    openapiFields.add("vpnConnectionStateChangeEvent");
    openapiFields.add("wifiSignalStrengthEvent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromeManagementV1TelemetryEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromeManagementV1TelemetryEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromeManagementV1TelemetryEvent is not found in the empty JSON string", GoogleChromeManagementV1TelemetryEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromeManagementV1TelemetryEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromeManagementV1TelemetryEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `device`
      if (jsonObj.get("device") != null && !jsonObj.get("device").isJsonNull()) {
        GoogleChromeManagementV1TelemetryDeviceInfo.validateJsonElement(jsonObj.get("device"));
      }
      if ((jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) && !jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      // validate the optional field `eventType`
      if (jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) {
        EventTypeEnum.validateJsonElement(jsonObj.get("eventType"));
      }
      // validate the optional field `httpsLatencyChangeEvent`
      if (jsonObj.get("httpsLatencyChangeEvent") != null && !jsonObj.get("httpsLatencyChangeEvent").isJsonNull()) {
        GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.validateJsonElement(jsonObj.get("httpsLatencyChangeEvent"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `networkStateChangeEvent`
      if (jsonObj.get("networkStateChangeEvent") != null && !jsonObj.get("networkStateChangeEvent").isJsonNull()) {
        GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent.validateJsonElement(jsonObj.get("networkStateChangeEvent"));
      }
      if ((jsonObj.get("reportTime") != null && !jsonObj.get("reportTime").isJsonNull()) && !jsonObj.get("reportTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportTime").toString()));
      }
      // validate the optional field `usbPeripheralsEvent`
      if (jsonObj.get("usbPeripheralsEvent") != null && !jsonObj.get("usbPeripheralsEvent").isJsonNull()) {
        GoogleChromeManagementV1TelemetryUsbPeripheralsEvent.validateJsonElement(jsonObj.get("usbPeripheralsEvent"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        GoogleChromeManagementV1TelemetryUserInfo.validateJsonElement(jsonObj.get("user"));
      }
      // validate the optional field `vpnConnectionStateChangeEvent`
      if (jsonObj.get("vpnConnectionStateChangeEvent") != null && !jsonObj.get("vpnConnectionStateChangeEvent").isJsonNull()) {
        GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent.validateJsonElement(jsonObj.get("vpnConnectionStateChangeEvent"));
      }
      // validate the optional field `wifiSignalStrengthEvent`
      if (jsonObj.get("wifiSignalStrengthEvent") != null && !jsonObj.get("wifiSignalStrengthEvent").isJsonNull()) {
        GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent.validateJsonElement(jsonObj.get("wifiSignalStrengthEvent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromeManagementV1TelemetryEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromeManagementV1TelemetryEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromeManagementV1TelemetryEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromeManagementV1TelemetryEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromeManagementV1TelemetryEvent>() {
           @Override
           public void write(JsonWriter out, GoogleChromeManagementV1TelemetryEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromeManagementV1TelemetryEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromeManagementV1TelemetryEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromeManagementV1TelemetryEvent
   * @throws IOException if the JSON string is invalid with respect to GoogleChromeManagementV1TelemetryEvent
   */
  public static GoogleChromeManagementV1TelemetryEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromeManagementV1TelemetryEvent.class);
  }

  /**
   * Convert an instance of GoogleChromeManagementV1TelemetryEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

