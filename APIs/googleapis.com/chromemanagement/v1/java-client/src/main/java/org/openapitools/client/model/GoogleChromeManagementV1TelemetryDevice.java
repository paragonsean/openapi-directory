/*
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleChromeManagementV1AudioStatusReport;
import org.openapitools.client.model.GoogleChromeManagementV1BatteryInfo;
import org.openapitools.client.model.GoogleChromeManagementV1BatteryStatusReport;
import org.openapitools.client.model.GoogleChromeManagementV1BootPerformanceReport;
import org.openapitools.client.model.GoogleChromeManagementV1CpuInfo;
import org.openapitools.client.model.GoogleChromeManagementV1CpuStatusReport;
import org.openapitools.client.model.GoogleChromeManagementV1GraphicsInfo;
import org.openapitools.client.model.GoogleChromeManagementV1GraphicsStatusReport;
import org.openapitools.client.model.GoogleChromeManagementV1HeartbeatStatusReport;
import org.openapitools.client.model.GoogleChromeManagementV1KioskAppStatusReport;
import org.openapitools.client.model.GoogleChromeManagementV1MemoryInfo;
import org.openapitools.client.model.GoogleChromeManagementV1MemoryStatusReport;
import org.openapitools.client.model.GoogleChromeManagementV1NetworkBandwidthReport;
import org.openapitools.client.model.GoogleChromeManagementV1NetworkDiagnosticsReport;
import org.openapitools.client.model.GoogleChromeManagementV1NetworkInfo;
import org.openapitools.client.model.GoogleChromeManagementV1NetworkStatusReport;
import org.openapitools.client.model.GoogleChromeManagementV1OsUpdateStatus;
import org.openapitools.client.model.GoogleChromeManagementV1PeripheralsReport;
import org.openapitools.client.model.GoogleChromeManagementV1RuntimeCountersReport;
import org.openapitools.client.model.GoogleChromeManagementV1StorageInfo;
import org.openapitools.client.model.GoogleChromeManagementV1StorageStatusReport;
import org.openapitools.client.model.GoogleChromeManagementV1ThunderboltInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Telemetry data collected from a managed device. * Granular permission needed: TELEMETRY_API_DEVICE
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:04.349803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromeManagementV1TelemetryDevice {
  public static final String SERIALIZED_NAME_AUDIO_STATUS_REPORT = "audioStatusReport";
  @SerializedName(SERIALIZED_NAME_AUDIO_STATUS_REPORT)
  private List<GoogleChromeManagementV1AudioStatusReport> audioStatusReport = new ArrayList<>();

  public static final String SERIALIZED_NAME_BATTERY_INFO = "batteryInfo";
  @SerializedName(SERIALIZED_NAME_BATTERY_INFO)
  private List<GoogleChromeManagementV1BatteryInfo> batteryInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_BATTERY_STATUS_REPORT = "batteryStatusReport";
  @SerializedName(SERIALIZED_NAME_BATTERY_STATUS_REPORT)
  private List<GoogleChromeManagementV1BatteryStatusReport> batteryStatusReport = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOOT_PERFORMANCE_REPORT = "bootPerformanceReport";
  @SerializedName(SERIALIZED_NAME_BOOT_PERFORMANCE_REPORT)
  private List<GoogleChromeManagementV1BootPerformanceReport> bootPerformanceReport = new ArrayList<>();

  public static final String SERIALIZED_NAME_CPU_INFO = "cpuInfo";
  @SerializedName(SERIALIZED_NAME_CPU_INFO)
  private List<GoogleChromeManagementV1CpuInfo> cpuInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_CPU_STATUS_REPORT = "cpuStatusReport";
  @SerializedName(SERIALIZED_NAME_CPU_STATUS_REPORT)
  private List<GoogleChromeManagementV1CpuStatusReport> cpuStatusReport = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private String customer;

  public static final String SERIALIZED_NAME_DEVICE_ID = "deviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_GRAPHICS_INFO = "graphicsInfo";
  @SerializedName(SERIALIZED_NAME_GRAPHICS_INFO)
  private GoogleChromeManagementV1GraphicsInfo graphicsInfo;

  public static final String SERIALIZED_NAME_GRAPHICS_STATUS_REPORT = "graphicsStatusReport";
  @SerializedName(SERIALIZED_NAME_GRAPHICS_STATUS_REPORT)
  private List<GoogleChromeManagementV1GraphicsStatusReport> graphicsStatusReport = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEARTBEAT_STATUS_REPORT = "heartbeatStatusReport";
  @SerializedName(SERIALIZED_NAME_HEARTBEAT_STATUS_REPORT)
  private List<GoogleChromeManagementV1HeartbeatStatusReport> heartbeatStatusReport = new ArrayList<>();

  public static final String SERIALIZED_NAME_KIOSK_APP_STATUS_REPORT = "kioskAppStatusReport";
  @SerializedName(SERIALIZED_NAME_KIOSK_APP_STATUS_REPORT)
  private List<GoogleChromeManagementV1KioskAppStatusReport> kioskAppStatusReport = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEMORY_INFO = "memoryInfo";
  @SerializedName(SERIALIZED_NAME_MEMORY_INFO)
  private GoogleChromeManagementV1MemoryInfo memoryInfo;

  public static final String SERIALIZED_NAME_MEMORY_STATUS_REPORT = "memoryStatusReport";
  @SerializedName(SERIALIZED_NAME_MEMORY_STATUS_REPORT)
  private List<GoogleChromeManagementV1MemoryStatusReport> memoryStatusReport = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK_BANDWIDTH_REPORT = "networkBandwidthReport";
  @SerializedName(SERIALIZED_NAME_NETWORK_BANDWIDTH_REPORT)
  private List<GoogleChromeManagementV1NetworkBandwidthReport> networkBandwidthReport = new ArrayList<>();

  public static final String SERIALIZED_NAME_NETWORK_DIAGNOSTICS_REPORT = "networkDiagnosticsReport";
  @SerializedName(SERIALIZED_NAME_NETWORK_DIAGNOSTICS_REPORT)
  private List<GoogleChromeManagementV1NetworkDiagnosticsReport> networkDiagnosticsReport = new ArrayList<>();

  public static final String SERIALIZED_NAME_NETWORK_INFO = "networkInfo";
  @SerializedName(SERIALIZED_NAME_NETWORK_INFO)
  private GoogleChromeManagementV1NetworkInfo networkInfo;

  public static final String SERIALIZED_NAME_NETWORK_STATUS_REPORT = "networkStatusReport";
  @SerializedName(SERIALIZED_NAME_NETWORK_STATUS_REPORT)
  private List<GoogleChromeManagementV1NetworkStatusReport> networkStatusReport = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORG_UNIT_ID = "orgUnitId";
  @SerializedName(SERIALIZED_NAME_ORG_UNIT_ID)
  private String orgUnitId;

  public static final String SERIALIZED_NAME_OS_UPDATE_STATUS = "osUpdateStatus";
  @SerializedName(SERIALIZED_NAME_OS_UPDATE_STATUS)
  private List<GoogleChromeManagementV1OsUpdateStatus> osUpdateStatus = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERIPHERALS_REPORT = "peripheralsReport";
  @SerializedName(SERIALIZED_NAME_PERIPHERALS_REPORT)
  private List<GoogleChromeManagementV1PeripheralsReport> peripheralsReport = new ArrayList<>();

  public static final String SERIALIZED_NAME_RUNTIME_COUNTERS_REPORT = "runtimeCountersReport";
  @SerializedName(SERIALIZED_NAME_RUNTIME_COUNTERS_REPORT)
  private List<GoogleChromeManagementV1RuntimeCountersReport> runtimeCountersReport = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_STORAGE_INFO = "storageInfo";
  @SerializedName(SERIALIZED_NAME_STORAGE_INFO)
  private GoogleChromeManagementV1StorageInfo storageInfo;

  public static final String SERIALIZED_NAME_STORAGE_STATUS_REPORT = "storageStatusReport";
  @SerializedName(SERIALIZED_NAME_STORAGE_STATUS_REPORT)
  private List<GoogleChromeManagementV1StorageStatusReport> storageStatusReport = new ArrayList<>();

  public static final String SERIALIZED_NAME_THUNDERBOLT_INFO = "thunderboltInfo";
  @SerializedName(SERIALIZED_NAME_THUNDERBOLT_INFO)
  private List<GoogleChromeManagementV1ThunderboltInfo> thunderboltInfo = new ArrayList<>();

  public GoogleChromeManagementV1TelemetryDevice() {
  }

  public GoogleChromeManagementV1TelemetryDevice(
     List<GoogleChromeManagementV1AudioStatusReport> audioStatusReport, 
     List<GoogleChromeManagementV1BatteryInfo> batteryInfo, 
     List<GoogleChromeManagementV1BatteryStatusReport> batteryStatusReport, 
     List<GoogleChromeManagementV1BootPerformanceReport> bootPerformanceReport, 
     List<GoogleChromeManagementV1CpuInfo> cpuInfo, 
     List<GoogleChromeManagementV1CpuStatusReport> cpuStatusReport, 
     String customer, 
     String deviceId, 
     List<GoogleChromeManagementV1GraphicsStatusReport> graphicsStatusReport, 
     List<GoogleChromeManagementV1HeartbeatStatusReport> heartbeatStatusReport, 
     List<GoogleChromeManagementV1KioskAppStatusReport> kioskAppStatusReport, 
     List<GoogleChromeManagementV1MemoryStatusReport> memoryStatusReport, 
     String name, 
     List<GoogleChromeManagementV1NetworkBandwidthReport> networkBandwidthReport, 
     List<GoogleChromeManagementV1NetworkDiagnosticsReport> networkDiagnosticsReport, 
     List<GoogleChromeManagementV1NetworkStatusReport> networkStatusReport, 
     String orgUnitId, 
     List<GoogleChromeManagementV1OsUpdateStatus> osUpdateStatus, 
     List<GoogleChromeManagementV1PeripheralsReport> peripheralsReport, 
     List<GoogleChromeManagementV1RuntimeCountersReport> runtimeCountersReport, 
     String serialNumber, 
     List<GoogleChromeManagementV1StorageStatusReport> storageStatusReport, 
     List<GoogleChromeManagementV1ThunderboltInfo> thunderboltInfo
  ) {
    this();
    this.audioStatusReport = audioStatusReport;
    this.batteryInfo = batteryInfo;
    this.batteryStatusReport = batteryStatusReport;
    this.bootPerformanceReport = bootPerformanceReport;
    this.cpuInfo = cpuInfo;
    this.cpuStatusReport = cpuStatusReport;
    this.customer = customer;
    this.deviceId = deviceId;
    this.graphicsStatusReport = graphicsStatusReport;
    this.heartbeatStatusReport = heartbeatStatusReport;
    this.kioskAppStatusReport = kioskAppStatusReport;
    this.memoryStatusReport = memoryStatusReport;
    this.name = name;
    this.networkBandwidthReport = networkBandwidthReport;
    this.networkDiagnosticsReport = networkDiagnosticsReport;
    this.networkStatusReport = networkStatusReport;
    this.orgUnitId = orgUnitId;
    this.osUpdateStatus = osUpdateStatus;
    this.peripheralsReport = peripheralsReport;
    this.runtimeCountersReport = runtimeCountersReport;
    this.serialNumber = serialNumber;
    this.storageStatusReport = storageStatusReport;
    this.thunderboltInfo = thunderboltInfo;
  }

  /**
   * Output only. Audio reports collected periodically sorted in a decreasing order of report_time.
   * @return audioStatusReport
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1AudioStatusReport> getAudioStatusReport() {
    return audioStatusReport;
  }



  /**
   * Output only. Information on battery specs for the device.
   * @return batteryInfo
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1BatteryInfo> getBatteryInfo() {
    return batteryInfo;
  }



  /**
   * Output only. Battery reports collected periodically.
   * @return batteryStatusReport
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1BatteryStatusReport> getBatteryStatusReport() {
    return batteryStatusReport;
  }



  /**
   * Output only. Boot performance reports of the device.
   * @return bootPerformanceReport
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1BootPerformanceReport> getBootPerformanceReport() {
    return bootPerformanceReport;
  }



  /**
   * Output only. Information regarding CPU specs for the device.
   * @return cpuInfo
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1CpuInfo> getCpuInfo() {
    return cpuInfo;
  }



  /**
   * Output only. CPU status reports collected periodically sorted in a decreasing order of report_time.
   * @return cpuStatusReport
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1CpuStatusReport> getCpuStatusReport() {
    return cpuStatusReport;
  }



  /**
   * Output only. Google Workspace Customer whose enterprise enrolled the device.
   * @return customer
   */
  @javax.annotation.Nullable
  public String getCustomer() {
    return customer;
  }



  /**
   * Output only. The unique Directory API ID of the device. This value is the same as the Admin Console&#39;s Directory API ID in the ChromeOS Devices tab
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }



  public GoogleChromeManagementV1TelemetryDevice graphicsInfo(GoogleChromeManagementV1GraphicsInfo graphicsInfo) {
    this.graphicsInfo = graphicsInfo;
    return this;
  }

  /**
   * Get graphicsInfo
   * @return graphicsInfo
   */
  @javax.annotation.Nullable
  public GoogleChromeManagementV1GraphicsInfo getGraphicsInfo() {
    return graphicsInfo;
  }

  public void setGraphicsInfo(GoogleChromeManagementV1GraphicsInfo graphicsInfo) {
    this.graphicsInfo = graphicsInfo;
  }


  /**
   * Output only. Graphics reports collected periodically.
   * @return graphicsStatusReport
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1GraphicsStatusReport> getGraphicsStatusReport() {
    return graphicsStatusReport;
  }



  /**
   * Output only. Heartbeat status report containing timestamps periodically sorted in decreasing order of report_time
   * @return heartbeatStatusReport
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1HeartbeatStatusReport> getHeartbeatStatusReport() {
    return heartbeatStatusReport;
  }



  /**
   * Output only. Kiosk app status report for the kiosk device
   * @return kioskAppStatusReport
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1KioskAppStatusReport> getKioskAppStatusReport() {
    return kioskAppStatusReport;
  }



  public GoogleChromeManagementV1TelemetryDevice memoryInfo(GoogleChromeManagementV1MemoryInfo memoryInfo) {
    this.memoryInfo = memoryInfo;
    return this;
  }

  /**
   * Get memoryInfo
   * @return memoryInfo
   */
  @javax.annotation.Nullable
  public GoogleChromeManagementV1MemoryInfo getMemoryInfo() {
    return memoryInfo;
  }

  public void setMemoryInfo(GoogleChromeManagementV1MemoryInfo memoryInfo) {
    this.memoryInfo = memoryInfo;
  }


  /**
   * Output only. Memory status reports collected periodically sorted decreasing by report_time.
   * @return memoryStatusReport
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1MemoryStatusReport> getMemoryStatusReport() {
    return memoryStatusReport;
  }



  /**
   * Output only. Resource name of the device.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. Network bandwidth reports collected periodically sorted in a decreasing order of report_time.
   * @return networkBandwidthReport
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1NetworkBandwidthReport> getNetworkBandwidthReport() {
    return networkBandwidthReport;
  }



  /**
   * Output only. Network diagnostics collected periodically.
   * @return networkDiagnosticsReport
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1NetworkDiagnosticsReport> getNetworkDiagnosticsReport() {
    return networkDiagnosticsReport;
  }



  public GoogleChromeManagementV1TelemetryDevice networkInfo(GoogleChromeManagementV1NetworkInfo networkInfo) {
    this.networkInfo = networkInfo;
    return this;
  }

  /**
   * Get networkInfo
   * @return networkInfo
   */
  @javax.annotation.Nullable
  public GoogleChromeManagementV1NetworkInfo getNetworkInfo() {
    return networkInfo;
  }

  public void setNetworkInfo(GoogleChromeManagementV1NetworkInfo networkInfo) {
    this.networkInfo = networkInfo;
  }


  /**
   * Output only. Network specs collected periodically.
   * @return networkStatusReport
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1NetworkStatusReport> getNetworkStatusReport() {
    return networkStatusReport;
  }



  /**
   * Output only. Organization unit ID of the device.
   * @return orgUnitId
   */
  @javax.annotation.Nullable
  public String getOrgUnitId() {
    return orgUnitId;
  }



  /**
   * Output only. Contains relevant information regarding ChromeOS update status.
   * @return osUpdateStatus
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1OsUpdateStatus> getOsUpdateStatus() {
    return osUpdateStatus;
  }



  /**
   * Output only. Peripherals reports collected periodically sorted in a decreasing order of report_time.
   * @return peripheralsReport
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1PeripheralsReport> getPeripheralsReport() {
    return peripheralsReport;
  }



  /**
   * Output only. Runtime counters reports collected device lifetime runtime, as well as the counts of S0-&gt;S3, S0-&gt;S4, and S0-&gt;S5 transitions, meaning entering into sleep, hibernation, and power-off states
   * @return runtimeCountersReport
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1RuntimeCountersReport> getRuntimeCountersReport() {
    return runtimeCountersReport;
  }



  /**
   * Output only. Device serial number. This value is the same as the Admin Console&#39;s Serial Number in the ChromeOS Devices tab.
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }



  public GoogleChromeManagementV1TelemetryDevice storageInfo(GoogleChromeManagementV1StorageInfo storageInfo) {
    this.storageInfo = storageInfo;
    return this;
  }

  /**
   * Get storageInfo
   * @return storageInfo
   */
  @javax.annotation.Nullable
  public GoogleChromeManagementV1StorageInfo getStorageInfo() {
    return storageInfo;
  }

  public void setStorageInfo(GoogleChromeManagementV1StorageInfo storageInfo) {
    this.storageInfo = storageInfo;
  }


  /**
   * Output only. Storage reports collected periodically.
   * @return storageStatusReport
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1StorageStatusReport> getStorageStatusReport() {
    return storageStatusReport;
  }



  /**
   * Output only. Information on Thunderbolt bus.
   * @return thunderboltInfo
   */
  @javax.annotation.Nullable
  public List<GoogleChromeManagementV1ThunderboltInfo> getThunderboltInfo() {
    return thunderboltInfo;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromeManagementV1TelemetryDevice googleChromeManagementV1TelemetryDevice = (GoogleChromeManagementV1TelemetryDevice) o;
    return Objects.equals(this.audioStatusReport, googleChromeManagementV1TelemetryDevice.audioStatusReport) &&
        Objects.equals(this.batteryInfo, googleChromeManagementV1TelemetryDevice.batteryInfo) &&
        Objects.equals(this.batteryStatusReport, googleChromeManagementV1TelemetryDevice.batteryStatusReport) &&
        Objects.equals(this.bootPerformanceReport, googleChromeManagementV1TelemetryDevice.bootPerformanceReport) &&
        Objects.equals(this.cpuInfo, googleChromeManagementV1TelemetryDevice.cpuInfo) &&
        Objects.equals(this.cpuStatusReport, googleChromeManagementV1TelemetryDevice.cpuStatusReport) &&
        Objects.equals(this.customer, googleChromeManagementV1TelemetryDevice.customer) &&
        Objects.equals(this.deviceId, googleChromeManagementV1TelemetryDevice.deviceId) &&
        Objects.equals(this.graphicsInfo, googleChromeManagementV1TelemetryDevice.graphicsInfo) &&
        Objects.equals(this.graphicsStatusReport, googleChromeManagementV1TelemetryDevice.graphicsStatusReport) &&
        Objects.equals(this.heartbeatStatusReport, googleChromeManagementV1TelemetryDevice.heartbeatStatusReport) &&
        Objects.equals(this.kioskAppStatusReport, googleChromeManagementV1TelemetryDevice.kioskAppStatusReport) &&
        Objects.equals(this.memoryInfo, googleChromeManagementV1TelemetryDevice.memoryInfo) &&
        Objects.equals(this.memoryStatusReport, googleChromeManagementV1TelemetryDevice.memoryStatusReport) &&
        Objects.equals(this.name, googleChromeManagementV1TelemetryDevice.name) &&
        Objects.equals(this.networkBandwidthReport, googleChromeManagementV1TelemetryDevice.networkBandwidthReport) &&
        Objects.equals(this.networkDiagnosticsReport, googleChromeManagementV1TelemetryDevice.networkDiagnosticsReport) &&
        Objects.equals(this.networkInfo, googleChromeManagementV1TelemetryDevice.networkInfo) &&
        Objects.equals(this.networkStatusReport, googleChromeManagementV1TelemetryDevice.networkStatusReport) &&
        Objects.equals(this.orgUnitId, googleChromeManagementV1TelemetryDevice.orgUnitId) &&
        Objects.equals(this.osUpdateStatus, googleChromeManagementV1TelemetryDevice.osUpdateStatus) &&
        Objects.equals(this.peripheralsReport, googleChromeManagementV1TelemetryDevice.peripheralsReport) &&
        Objects.equals(this.runtimeCountersReport, googleChromeManagementV1TelemetryDevice.runtimeCountersReport) &&
        Objects.equals(this.serialNumber, googleChromeManagementV1TelemetryDevice.serialNumber) &&
        Objects.equals(this.storageInfo, googleChromeManagementV1TelemetryDevice.storageInfo) &&
        Objects.equals(this.storageStatusReport, googleChromeManagementV1TelemetryDevice.storageStatusReport) &&
        Objects.equals(this.thunderboltInfo, googleChromeManagementV1TelemetryDevice.thunderboltInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioStatusReport, batteryInfo, batteryStatusReport, bootPerformanceReport, cpuInfo, cpuStatusReport, customer, deviceId, graphicsInfo, graphicsStatusReport, heartbeatStatusReport, kioskAppStatusReport, memoryInfo, memoryStatusReport, name, networkBandwidthReport, networkDiagnosticsReport, networkInfo, networkStatusReport, orgUnitId, osUpdateStatus, peripheralsReport, runtimeCountersReport, serialNumber, storageInfo, storageStatusReport, thunderboltInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromeManagementV1TelemetryDevice {\n");
    sb.append("    audioStatusReport: ").append(toIndentedString(audioStatusReport)).append("\n");
    sb.append("    batteryInfo: ").append(toIndentedString(batteryInfo)).append("\n");
    sb.append("    batteryStatusReport: ").append(toIndentedString(batteryStatusReport)).append("\n");
    sb.append("    bootPerformanceReport: ").append(toIndentedString(bootPerformanceReport)).append("\n");
    sb.append("    cpuInfo: ").append(toIndentedString(cpuInfo)).append("\n");
    sb.append("    cpuStatusReport: ").append(toIndentedString(cpuStatusReport)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    graphicsInfo: ").append(toIndentedString(graphicsInfo)).append("\n");
    sb.append("    graphicsStatusReport: ").append(toIndentedString(graphicsStatusReport)).append("\n");
    sb.append("    heartbeatStatusReport: ").append(toIndentedString(heartbeatStatusReport)).append("\n");
    sb.append("    kioskAppStatusReport: ").append(toIndentedString(kioskAppStatusReport)).append("\n");
    sb.append("    memoryInfo: ").append(toIndentedString(memoryInfo)).append("\n");
    sb.append("    memoryStatusReport: ").append(toIndentedString(memoryStatusReport)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkBandwidthReport: ").append(toIndentedString(networkBandwidthReport)).append("\n");
    sb.append("    networkDiagnosticsReport: ").append(toIndentedString(networkDiagnosticsReport)).append("\n");
    sb.append("    networkInfo: ").append(toIndentedString(networkInfo)).append("\n");
    sb.append("    networkStatusReport: ").append(toIndentedString(networkStatusReport)).append("\n");
    sb.append("    orgUnitId: ").append(toIndentedString(orgUnitId)).append("\n");
    sb.append("    osUpdateStatus: ").append(toIndentedString(osUpdateStatus)).append("\n");
    sb.append("    peripheralsReport: ").append(toIndentedString(peripheralsReport)).append("\n");
    sb.append("    runtimeCountersReport: ").append(toIndentedString(runtimeCountersReport)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    storageInfo: ").append(toIndentedString(storageInfo)).append("\n");
    sb.append("    storageStatusReport: ").append(toIndentedString(storageStatusReport)).append("\n");
    sb.append("    thunderboltInfo: ").append(toIndentedString(thunderboltInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audioStatusReport");
    openapiFields.add("batteryInfo");
    openapiFields.add("batteryStatusReport");
    openapiFields.add("bootPerformanceReport");
    openapiFields.add("cpuInfo");
    openapiFields.add("cpuStatusReport");
    openapiFields.add("customer");
    openapiFields.add("deviceId");
    openapiFields.add("graphicsInfo");
    openapiFields.add("graphicsStatusReport");
    openapiFields.add("heartbeatStatusReport");
    openapiFields.add("kioskAppStatusReport");
    openapiFields.add("memoryInfo");
    openapiFields.add("memoryStatusReport");
    openapiFields.add("name");
    openapiFields.add("networkBandwidthReport");
    openapiFields.add("networkDiagnosticsReport");
    openapiFields.add("networkInfo");
    openapiFields.add("networkStatusReport");
    openapiFields.add("orgUnitId");
    openapiFields.add("osUpdateStatus");
    openapiFields.add("peripheralsReport");
    openapiFields.add("runtimeCountersReport");
    openapiFields.add("serialNumber");
    openapiFields.add("storageInfo");
    openapiFields.add("storageStatusReport");
    openapiFields.add("thunderboltInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromeManagementV1TelemetryDevice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromeManagementV1TelemetryDevice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromeManagementV1TelemetryDevice is not found in the empty JSON string", GoogleChromeManagementV1TelemetryDevice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromeManagementV1TelemetryDevice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromeManagementV1TelemetryDevice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("audioStatusReport") != null && !jsonObj.get("audioStatusReport").isJsonNull()) {
        JsonArray jsonArrayaudioStatusReport = jsonObj.getAsJsonArray("audioStatusReport");
        if (jsonArrayaudioStatusReport != null) {
          // ensure the json data is an array
          if (!jsonObj.get("audioStatusReport").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `audioStatusReport` to be an array in the JSON string but got `%s`", jsonObj.get("audioStatusReport").toString()));
          }

          // validate the optional field `audioStatusReport` (array)
          for (int i = 0; i < jsonArrayaudioStatusReport.size(); i++) {
            GoogleChromeManagementV1AudioStatusReport.validateJsonElement(jsonArrayaudioStatusReport.get(i));
          };
        }
      }
      if (jsonObj.get("batteryInfo") != null && !jsonObj.get("batteryInfo").isJsonNull()) {
        JsonArray jsonArraybatteryInfo = jsonObj.getAsJsonArray("batteryInfo");
        if (jsonArraybatteryInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("batteryInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `batteryInfo` to be an array in the JSON string but got `%s`", jsonObj.get("batteryInfo").toString()));
          }

          // validate the optional field `batteryInfo` (array)
          for (int i = 0; i < jsonArraybatteryInfo.size(); i++) {
            GoogleChromeManagementV1BatteryInfo.validateJsonElement(jsonArraybatteryInfo.get(i));
          };
        }
      }
      if (jsonObj.get("batteryStatusReport") != null && !jsonObj.get("batteryStatusReport").isJsonNull()) {
        JsonArray jsonArraybatteryStatusReport = jsonObj.getAsJsonArray("batteryStatusReport");
        if (jsonArraybatteryStatusReport != null) {
          // ensure the json data is an array
          if (!jsonObj.get("batteryStatusReport").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `batteryStatusReport` to be an array in the JSON string but got `%s`", jsonObj.get("batteryStatusReport").toString()));
          }

          // validate the optional field `batteryStatusReport` (array)
          for (int i = 0; i < jsonArraybatteryStatusReport.size(); i++) {
            GoogleChromeManagementV1BatteryStatusReport.validateJsonElement(jsonArraybatteryStatusReport.get(i));
          };
        }
      }
      if (jsonObj.get("bootPerformanceReport") != null && !jsonObj.get("bootPerformanceReport").isJsonNull()) {
        JsonArray jsonArraybootPerformanceReport = jsonObj.getAsJsonArray("bootPerformanceReport");
        if (jsonArraybootPerformanceReport != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bootPerformanceReport").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bootPerformanceReport` to be an array in the JSON string but got `%s`", jsonObj.get("bootPerformanceReport").toString()));
          }

          // validate the optional field `bootPerformanceReport` (array)
          for (int i = 0; i < jsonArraybootPerformanceReport.size(); i++) {
            GoogleChromeManagementV1BootPerformanceReport.validateJsonElement(jsonArraybootPerformanceReport.get(i));
          };
        }
      }
      if (jsonObj.get("cpuInfo") != null && !jsonObj.get("cpuInfo").isJsonNull()) {
        JsonArray jsonArraycpuInfo = jsonObj.getAsJsonArray("cpuInfo");
        if (jsonArraycpuInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cpuInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cpuInfo` to be an array in the JSON string but got `%s`", jsonObj.get("cpuInfo").toString()));
          }

          // validate the optional field `cpuInfo` (array)
          for (int i = 0; i < jsonArraycpuInfo.size(); i++) {
            GoogleChromeManagementV1CpuInfo.validateJsonElement(jsonArraycpuInfo.get(i));
          };
        }
      }
      if (jsonObj.get("cpuStatusReport") != null && !jsonObj.get("cpuStatusReport").isJsonNull()) {
        JsonArray jsonArraycpuStatusReport = jsonObj.getAsJsonArray("cpuStatusReport");
        if (jsonArraycpuStatusReport != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cpuStatusReport").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cpuStatusReport` to be an array in the JSON string but got `%s`", jsonObj.get("cpuStatusReport").toString()));
          }

          // validate the optional field `cpuStatusReport` (array)
          for (int i = 0; i < jsonArraycpuStatusReport.size(); i++) {
            GoogleChromeManagementV1CpuStatusReport.validateJsonElement(jsonArraycpuStatusReport.get(i));
          };
        }
      }
      if ((jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) && !jsonObj.get("customer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer").toString()));
      }
      if ((jsonObj.get("deviceId") != null && !jsonObj.get("deviceId").isJsonNull()) && !jsonObj.get("deviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceId").toString()));
      }
      // validate the optional field `graphicsInfo`
      if (jsonObj.get("graphicsInfo") != null && !jsonObj.get("graphicsInfo").isJsonNull()) {
        GoogleChromeManagementV1GraphicsInfo.validateJsonElement(jsonObj.get("graphicsInfo"));
      }
      if (jsonObj.get("graphicsStatusReport") != null && !jsonObj.get("graphicsStatusReport").isJsonNull()) {
        JsonArray jsonArraygraphicsStatusReport = jsonObj.getAsJsonArray("graphicsStatusReport");
        if (jsonArraygraphicsStatusReport != null) {
          // ensure the json data is an array
          if (!jsonObj.get("graphicsStatusReport").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `graphicsStatusReport` to be an array in the JSON string but got `%s`", jsonObj.get("graphicsStatusReport").toString()));
          }

          // validate the optional field `graphicsStatusReport` (array)
          for (int i = 0; i < jsonArraygraphicsStatusReport.size(); i++) {
            GoogleChromeManagementV1GraphicsStatusReport.validateJsonElement(jsonArraygraphicsStatusReport.get(i));
          };
        }
      }
      if (jsonObj.get("heartbeatStatusReport") != null && !jsonObj.get("heartbeatStatusReport").isJsonNull()) {
        JsonArray jsonArrayheartbeatStatusReport = jsonObj.getAsJsonArray("heartbeatStatusReport");
        if (jsonArrayheartbeatStatusReport != null) {
          // ensure the json data is an array
          if (!jsonObj.get("heartbeatStatusReport").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `heartbeatStatusReport` to be an array in the JSON string but got `%s`", jsonObj.get("heartbeatStatusReport").toString()));
          }

          // validate the optional field `heartbeatStatusReport` (array)
          for (int i = 0; i < jsonArrayheartbeatStatusReport.size(); i++) {
            GoogleChromeManagementV1HeartbeatStatusReport.validateJsonElement(jsonArrayheartbeatStatusReport.get(i));
          };
        }
      }
      if (jsonObj.get("kioskAppStatusReport") != null && !jsonObj.get("kioskAppStatusReport").isJsonNull()) {
        JsonArray jsonArraykioskAppStatusReport = jsonObj.getAsJsonArray("kioskAppStatusReport");
        if (jsonArraykioskAppStatusReport != null) {
          // ensure the json data is an array
          if (!jsonObj.get("kioskAppStatusReport").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `kioskAppStatusReport` to be an array in the JSON string but got `%s`", jsonObj.get("kioskAppStatusReport").toString()));
          }

          // validate the optional field `kioskAppStatusReport` (array)
          for (int i = 0; i < jsonArraykioskAppStatusReport.size(); i++) {
            GoogleChromeManagementV1KioskAppStatusReport.validateJsonElement(jsonArraykioskAppStatusReport.get(i));
          };
        }
      }
      // validate the optional field `memoryInfo`
      if (jsonObj.get("memoryInfo") != null && !jsonObj.get("memoryInfo").isJsonNull()) {
        GoogleChromeManagementV1MemoryInfo.validateJsonElement(jsonObj.get("memoryInfo"));
      }
      if (jsonObj.get("memoryStatusReport") != null && !jsonObj.get("memoryStatusReport").isJsonNull()) {
        JsonArray jsonArraymemoryStatusReport = jsonObj.getAsJsonArray("memoryStatusReport");
        if (jsonArraymemoryStatusReport != null) {
          // ensure the json data is an array
          if (!jsonObj.get("memoryStatusReport").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `memoryStatusReport` to be an array in the JSON string but got `%s`", jsonObj.get("memoryStatusReport").toString()));
          }

          // validate the optional field `memoryStatusReport` (array)
          for (int i = 0; i < jsonArraymemoryStatusReport.size(); i++) {
            GoogleChromeManagementV1MemoryStatusReport.validateJsonElement(jsonArraymemoryStatusReport.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("networkBandwidthReport") != null && !jsonObj.get("networkBandwidthReport").isJsonNull()) {
        JsonArray jsonArraynetworkBandwidthReport = jsonObj.getAsJsonArray("networkBandwidthReport");
        if (jsonArraynetworkBandwidthReport != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networkBandwidthReport").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networkBandwidthReport` to be an array in the JSON string but got `%s`", jsonObj.get("networkBandwidthReport").toString()));
          }

          // validate the optional field `networkBandwidthReport` (array)
          for (int i = 0; i < jsonArraynetworkBandwidthReport.size(); i++) {
            GoogleChromeManagementV1NetworkBandwidthReport.validateJsonElement(jsonArraynetworkBandwidthReport.get(i));
          };
        }
      }
      if (jsonObj.get("networkDiagnosticsReport") != null && !jsonObj.get("networkDiagnosticsReport").isJsonNull()) {
        JsonArray jsonArraynetworkDiagnosticsReport = jsonObj.getAsJsonArray("networkDiagnosticsReport");
        if (jsonArraynetworkDiagnosticsReport != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networkDiagnosticsReport").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networkDiagnosticsReport` to be an array in the JSON string but got `%s`", jsonObj.get("networkDiagnosticsReport").toString()));
          }

          // validate the optional field `networkDiagnosticsReport` (array)
          for (int i = 0; i < jsonArraynetworkDiagnosticsReport.size(); i++) {
            GoogleChromeManagementV1NetworkDiagnosticsReport.validateJsonElement(jsonArraynetworkDiagnosticsReport.get(i));
          };
        }
      }
      // validate the optional field `networkInfo`
      if (jsonObj.get("networkInfo") != null && !jsonObj.get("networkInfo").isJsonNull()) {
        GoogleChromeManagementV1NetworkInfo.validateJsonElement(jsonObj.get("networkInfo"));
      }
      if (jsonObj.get("networkStatusReport") != null && !jsonObj.get("networkStatusReport").isJsonNull()) {
        JsonArray jsonArraynetworkStatusReport = jsonObj.getAsJsonArray("networkStatusReport");
        if (jsonArraynetworkStatusReport != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networkStatusReport").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networkStatusReport` to be an array in the JSON string but got `%s`", jsonObj.get("networkStatusReport").toString()));
          }

          // validate the optional field `networkStatusReport` (array)
          for (int i = 0; i < jsonArraynetworkStatusReport.size(); i++) {
            GoogleChromeManagementV1NetworkStatusReport.validateJsonElement(jsonArraynetworkStatusReport.get(i));
          };
        }
      }
      if ((jsonObj.get("orgUnitId") != null && !jsonObj.get("orgUnitId").isJsonNull()) && !jsonObj.get("orgUnitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgUnitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgUnitId").toString()));
      }
      if (jsonObj.get("osUpdateStatus") != null && !jsonObj.get("osUpdateStatus").isJsonNull()) {
        JsonArray jsonArrayosUpdateStatus = jsonObj.getAsJsonArray("osUpdateStatus");
        if (jsonArrayosUpdateStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("osUpdateStatus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `osUpdateStatus` to be an array in the JSON string but got `%s`", jsonObj.get("osUpdateStatus").toString()));
          }

          // validate the optional field `osUpdateStatus` (array)
          for (int i = 0; i < jsonArrayosUpdateStatus.size(); i++) {
            GoogleChromeManagementV1OsUpdateStatus.validateJsonElement(jsonArrayosUpdateStatus.get(i));
          };
        }
      }
      if (jsonObj.get("peripheralsReport") != null && !jsonObj.get("peripheralsReport").isJsonNull()) {
        JsonArray jsonArrayperipheralsReport = jsonObj.getAsJsonArray("peripheralsReport");
        if (jsonArrayperipheralsReport != null) {
          // ensure the json data is an array
          if (!jsonObj.get("peripheralsReport").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `peripheralsReport` to be an array in the JSON string but got `%s`", jsonObj.get("peripheralsReport").toString()));
          }

          // validate the optional field `peripheralsReport` (array)
          for (int i = 0; i < jsonArrayperipheralsReport.size(); i++) {
            GoogleChromeManagementV1PeripheralsReport.validateJsonElement(jsonArrayperipheralsReport.get(i));
          };
        }
      }
      if (jsonObj.get("runtimeCountersReport") != null && !jsonObj.get("runtimeCountersReport").isJsonNull()) {
        JsonArray jsonArrayruntimeCountersReport = jsonObj.getAsJsonArray("runtimeCountersReport");
        if (jsonArrayruntimeCountersReport != null) {
          // ensure the json data is an array
          if (!jsonObj.get("runtimeCountersReport").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `runtimeCountersReport` to be an array in the JSON string but got `%s`", jsonObj.get("runtimeCountersReport").toString()));
          }

          // validate the optional field `runtimeCountersReport` (array)
          for (int i = 0; i < jsonArrayruntimeCountersReport.size(); i++) {
            GoogleChromeManagementV1RuntimeCountersReport.validateJsonElement(jsonArrayruntimeCountersReport.get(i));
          };
        }
      }
      if ((jsonObj.get("serialNumber") != null && !jsonObj.get("serialNumber").isJsonNull()) && !jsonObj.get("serialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serialNumber").toString()));
      }
      // validate the optional field `storageInfo`
      if (jsonObj.get("storageInfo") != null && !jsonObj.get("storageInfo").isJsonNull()) {
        GoogleChromeManagementV1StorageInfo.validateJsonElement(jsonObj.get("storageInfo"));
      }
      if (jsonObj.get("storageStatusReport") != null && !jsonObj.get("storageStatusReport").isJsonNull()) {
        JsonArray jsonArraystorageStatusReport = jsonObj.getAsJsonArray("storageStatusReport");
        if (jsonArraystorageStatusReport != null) {
          // ensure the json data is an array
          if (!jsonObj.get("storageStatusReport").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `storageStatusReport` to be an array in the JSON string but got `%s`", jsonObj.get("storageStatusReport").toString()));
          }

          // validate the optional field `storageStatusReport` (array)
          for (int i = 0; i < jsonArraystorageStatusReport.size(); i++) {
            GoogleChromeManagementV1StorageStatusReport.validateJsonElement(jsonArraystorageStatusReport.get(i));
          };
        }
      }
      if (jsonObj.get("thunderboltInfo") != null && !jsonObj.get("thunderboltInfo").isJsonNull()) {
        JsonArray jsonArraythunderboltInfo = jsonObj.getAsJsonArray("thunderboltInfo");
        if (jsonArraythunderboltInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("thunderboltInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `thunderboltInfo` to be an array in the JSON string but got `%s`", jsonObj.get("thunderboltInfo").toString()));
          }

          // validate the optional field `thunderboltInfo` (array)
          for (int i = 0; i < jsonArraythunderboltInfo.size(); i++) {
            GoogleChromeManagementV1ThunderboltInfo.validateJsonElement(jsonArraythunderboltInfo.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromeManagementV1TelemetryDevice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromeManagementV1TelemetryDevice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromeManagementV1TelemetryDevice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromeManagementV1TelemetryDevice.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromeManagementV1TelemetryDevice>() {
           @Override
           public void write(JsonWriter out, GoogleChromeManagementV1TelemetryDevice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromeManagementV1TelemetryDevice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromeManagementV1TelemetryDevice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromeManagementV1TelemetryDevice
   * @throws IOException if the JSON string is invalid with respect to GoogleChromeManagementV1TelemetryDevice
   */
  public static GoogleChromeManagementV1TelemetryDevice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromeManagementV1TelemetryDevice.class);
  }

  /**
   * Convert an instance of GoogleChromeManagementV1TelemetryDevice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

