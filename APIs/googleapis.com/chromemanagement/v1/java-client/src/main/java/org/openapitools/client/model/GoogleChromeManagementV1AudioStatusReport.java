/*
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Status data for storage. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceAudioStatus](https://chromeenterprise.google/policies/#ReportDeviceAudioStatus) * Data Collection Frequency: 10 minutes * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_AUDIO_REPORT
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:04.349803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleChromeManagementV1AudioStatusReport {
  public static final String SERIALIZED_NAME_INPUT_DEVICE = "inputDevice";
  @SerializedName(SERIALIZED_NAME_INPUT_DEVICE)
  private String inputDevice;

  public static final String SERIALIZED_NAME_INPUT_GAIN = "inputGain";
  @SerializedName(SERIALIZED_NAME_INPUT_GAIN)
  private Integer inputGain;

  public static final String SERIALIZED_NAME_INPUT_MUTE = "inputMute";
  @SerializedName(SERIALIZED_NAME_INPUT_MUTE)
  private Boolean inputMute;

  public static final String SERIALIZED_NAME_OUTPUT_DEVICE = "outputDevice";
  @SerializedName(SERIALIZED_NAME_OUTPUT_DEVICE)
  private String outputDevice;

  public static final String SERIALIZED_NAME_OUTPUT_MUTE = "outputMute";
  @SerializedName(SERIALIZED_NAME_OUTPUT_MUTE)
  private Boolean outputMute;

  public static final String SERIALIZED_NAME_OUTPUT_VOLUME = "outputVolume";
  @SerializedName(SERIALIZED_NAME_OUTPUT_VOLUME)
  private Integer outputVolume;

  public static final String SERIALIZED_NAME_REPORT_TIME = "reportTime";
  @SerializedName(SERIALIZED_NAME_REPORT_TIME)
  private String reportTime;

  public GoogleChromeManagementV1AudioStatusReport() {
  }

  public GoogleChromeManagementV1AudioStatusReport(
     String inputDevice, 
     Integer inputGain, 
     Boolean inputMute, 
     String outputDevice, 
     Boolean outputMute, 
     Integer outputVolume, 
     String reportTime
  ) {
    this();
    this.inputDevice = inputDevice;
    this.inputGain = inputGain;
    this.inputMute = inputMute;
    this.outputDevice = outputDevice;
    this.outputMute = outputMute;
    this.outputVolume = outputVolume;
    this.reportTime = reportTime;
  }

  /**
   * Output only. Active input device&#39;s name.
   * @return inputDevice
   */
  @javax.annotation.Nullable
  public String getInputDevice() {
    return inputDevice;
  }



  /**
   * Output only. Active input device&#39;s gain in [0, 100].
   * @return inputGain
   */
  @javax.annotation.Nullable
  public Integer getInputGain() {
    return inputGain;
  }



  /**
   * Output only. Is active input device mute or not.
   * @return inputMute
   */
  @javax.annotation.Nullable
  public Boolean getInputMute() {
    return inputMute;
  }



  /**
   * Output only. Active output device&#39;s name.
   * @return outputDevice
   */
  @javax.annotation.Nullable
  public String getOutputDevice() {
    return outputDevice;
  }



  /**
   * Output only. Is active output device mute or not.
   * @return outputMute
   */
  @javax.annotation.Nullable
  public Boolean getOutputMute() {
    return outputMute;
  }



  /**
   * Output only. Active output device&#39;s volume in [0, 100].
   * @return outputVolume
   */
  @javax.annotation.Nullable
  public Integer getOutputVolume() {
    return outputVolume;
  }



  /**
   * Output only. Timestamp of when the sample was collected on device.
   * @return reportTime
   */
  @javax.annotation.Nullable
  public String getReportTime() {
    return reportTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleChromeManagementV1AudioStatusReport googleChromeManagementV1AudioStatusReport = (GoogleChromeManagementV1AudioStatusReport) o;
    return Objects.equals(this.inputDevice, googleChromeManagementV1AudioStatusReport.inputDevice) &&
        Objects.equals(this.inputGain, googleChromeManagementV1AudioStatusReport.inputGain) &&
        Objects.equals(this.inputMute, googleChromeManagementV1AudioStatusReport.inputMute) &&
        Objects.equals(this.outputDevice, googleChromeManagementV1AudioStatusReport.outputDevice) &&
        Objects.equals(this.outputMute, googleChromeManagementV1AudioStatusReport.outputMute) &&
        Objects.equals(this.outputVolume, googleChromeManagementV1AudioStatusReport.outputVolume) &&
        Objects.equals(this.reportTime, googleChromeManagementV1AudioStatusReport.reportTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputDevice, inputGain, inputMute, outputDevice, outputMute, outputVolume, reportTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleChromeManagementV1AudioStatusReport {\n");
    sb.append("    inputDevice: ").append(toIndentedString(inputDevice)).append("\n");
    sb.append("    inputGain: ").append(toIndentedString(inputGain)).append("\n");
    sb.append("    inputMute: ").append(toIndentedString(inputMute)).append("\n");
    sb.append("    outputDevice: ").append(toIndentedString(outputDevice)).append("\n");
    sb.append("    outputMute: ").append(toIndentedString(outputMute)).append("\n");
    sb.append("    outputVolume: ").append(toIndentedString(outputVolume)).append("\n");
    sb.append("    reportTime: ").append(toIndentedString(reportTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inputDevice");
    openapiFields.add("inputGain");
    openapiFields.add("inputMute");
    openapiFields.add("outputDevice");
    openapiFields.add("outputMute");
    openapiFields.add("outputVolume");
    openapiFields.add("reportTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleChromeManagementV1AudioStatusReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleChromeManagementV1AudioStatusReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleChromeManagementV1AudioStatusReport is not found in the empty JSON string", GoogleChromeManagementV1AudioStatusReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleChromeManagementV1AudioStatusReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleChromeManagementV1AudioStatusReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("inputDevice") != null && !jsonObj.get("inputDevice").isJsonNull()) && !jsonObj.get("inputDevice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputDevice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputDevice").toString()));
      }
      if ((jsonObj.get("outputDevice") != null && !jsonObj.get("outputDevice").isJsonNull()) && !jsonObj.get("outputDevice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputDevice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputDevice").toString()));
      }
      if ((jsonObj.get("reportTime") != null && !jsonObj.get("reportTime").isJsonNull()) && !jsonObj.get("reportTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleChromeManagementV1AudioStatusReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleChromeManagementV1AudioStatusReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleChromeManagementV1AudioStatusReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleChromeManagementV1AudioStatusReport.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleChromeManagementV1AudioStatusReport>() {
           @Override
           public void write(JsonWriter out, GoogleChromeManagementV1AudioStatusReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleChromeManagementV1AudioStatusReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleChromeManagementV1AudioStatusReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleChromeManagementV1AudioStatusReport
   * @throws IOException if the JSON string is invalid with respect to GoogleChromeManagementV1AudioStatusReport
   */
  public static GoogleChromeManagementV1AudioStatusReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleChromeManagementV1AudioStatusReport.class);
  }

  /**
   * Convert an instance of GoogleChromeManagementV1AudioStatusReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

