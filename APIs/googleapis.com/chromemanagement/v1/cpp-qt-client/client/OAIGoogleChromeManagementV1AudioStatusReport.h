/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleChromeManagementV1AudioStatusReport.h
 *
 * Status data for storage. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceAudioStatus](https://chromeenterprise.google/policies/#ReportDeviceAudioStatus) * Data Collection Frequency: 10 minutes * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_AUDIO_REPORT
 */

#ifndef OAIGoogleChromeManagementV1AudioStatusReport_H
#define OAIGoogleChromeManagementV1AudioStatusReport_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleChromeManagementV1AudioStatusReport : public OAIObject {
public:
    OAIGoogleChromeManagementV1AudioStatusReport();
    OAIGoogleChromeManagementV1AudioStatusReport(QString json);
    ~OAIGoogleChromeManagementV1AudioStatusReport() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getInputDevice() const;
    void setInputDevice(const QString &input_device);
    bool is_input_device_Set() const;
    bool is_input_device_Valid() const;

    qint32 getInputGain() const;
    void setInputGain(const qint32 &input_gain);
    bool is_input_gain_Set() const;
    bool is_input_gain_Valid() const;

    bool isInputMute() const;
    void setInputMute(const bool &input_mute);
    bool is_input_mute_Set() const;
    bool is_input_mute_Valid() const;

    QString getOutputDevice() const;
    void setOutputDevice(const QString &output_device);
    bool is_output_device_Set() const;
    bool is_output_device_Valid() const;

    bool isOutputMute() const;
    void setOutputMute(const bool &output_mute);
    bool is_output_mute_Set() const;
    bool is_output_mute_Valid() const;

    qint32 getOutputVolume() const;
    void setOutputVolume(const qint32 &output_volume);
    bool is_output_volume_Set() const;
    bool is_output_volume_Valid() const;

    QString getReportTime() const;
    void setReportTime(const QString &report_time);
    bool is_report_time_Set() const;
    bool is_report_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_input_device;
    bool m_input_device_isSet;
    bool m_input_device_isValid;

    qint32 m_input_gain;
    bool m_input_gain_isSet;
    bool m_input_gain_isValid;

    bool m_input_mute;
    bool m_input_mute_isSet;
    bool m_input_mute_isValid;

    QString m_output_device;
    bool m_output_device_isSet;
    bool m_output_device_isValid;

    bool m_output_mute;
    bool m_output_mute_isSet;
    bool m_output_mute_isValid;

    qint32 m_output_volume;
    bool m_output_volume_isSet;
    bool m_output_volume_isValid;

    QString m_report_time;
    bool m_report_time_isSet;
    bool m_report_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleChromeManagementV1AudioStatusReport)

#endif // OAIGoogleChromeManagementV1AudioStatusReport_H
