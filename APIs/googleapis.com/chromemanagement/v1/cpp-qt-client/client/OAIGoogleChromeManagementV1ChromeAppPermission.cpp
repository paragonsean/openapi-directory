/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1ChromeAppPermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1ChromeAppPermission::OAIGoogleChromeManagementV1ChromeAppPermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1ChromeAppPermission::OAIGoogleChromeManagementV1ChromeAppPermission() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1ChromeAppPermission::~OAIGoogleChromeManagementV1ChromeAppPermission() {}

void OAIGoogleChromeManagementV1ChromeAppPermission::initializeModel() {

    m_access_user_data_isSet = false;
    m_access_user_data_isValid = false;

    m_documentation_uri_isSet = false;
    m_documentation_uri_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleChromeManagementV1ChromeAppPermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1ChromeAppPermission::fromJsonObject(QJsonObject json) {

    m_access_user_data_isValid = ::OpenAPI::fromJsonValue(m_access_user_data, json[QString("accessUserData")]);
    m_access_user_data_isSet = !json[QString("accessUserData")].isNull() && m_access_user_data_isValid;

    m_documentation_uri_isValid = ::OpenAPI::fromJsonValue(m_documentation_uri, json[QString("documentationUri")]);
    m_documentation_uri_isSet = !json[QString("documentationUri")].isNull() && m_documentation_uri_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleChromeManagementV1ChromeAppPermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1ChromeAppPermission::asJsonObject() const {
    QJsonObject obj;
    if (m_access_user_data_isSet) {
        obj.insert(QString("accessUserData"), ::OpenAPI::toJsonValue(m_access_user_data));
    }
    if (m_documentation_uri_isSet) {
        obj.insert(QString("documentationUri"), ::OpenAPI::toJsonValue(m_documentation_uri));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIGoogleChromeManagementV1ChromeAppPermission::isAccessUserData() const {
    return m_access_user_data;
}
void OAIGoogleChromeManagementV1ChromeAppPermission::setAccessUserData(const bool &access_user_data) {
    m_access_user_data = access_user_data;
    m_access_user_data_isSet = true;
}

bool OAIGoogleChromeManagementV1ChromeAppPermission::is_access_user_data_Set() const{
    return m_access_user_data_isSet;
}

bool OAIGoogleChromeManagementV1ChromeAppPermission::is_access_user_data_Valid() const{
    return m_access_user_data_isValid;
}

QString OAIGoogleChromeManagementV1ChromeAppPermission::getDocumentationUri() const {
    return m_documentation_uri;
}
void OAIGoogleChromeManagementV1ChromeAppPermission::setDocumentationUri(const QString &documentation_uri) {
    m_documentation_uri = documentation_uri;
    m_documentation_uri_isSet = true;
}

bool OAIGoogleChromeManagementV1ChromeAppPermission::is_documentation_uri_Set() const{
    return m_documentation_uri_isSet;
}

bool OAIGoogleChromeManagementV1ChromeAppPermission::is_documentation_uri_Valid() const{
    return m_documentation_uri_isValid;
}

QString OAIGoogleChromeManagementV1ChromeAppPermission::getType() const {
    return m_type;
}
void OAIGoogleChromeManagementV1ChromeAppPermission::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleChromeManagementV1ChromeAppPermission::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleChromeManagementV1ChromeAppPermission::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleChromeManagementV1ChromeAppPermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_user_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1ChromeAppPermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
