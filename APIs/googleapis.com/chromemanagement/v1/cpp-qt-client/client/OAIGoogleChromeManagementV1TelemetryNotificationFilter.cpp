/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1TelemetryNotificationFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1TelemetryNotificationFilter::OAIGoogleChromeManagementV1TelemetryNotificationFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1TelemetryNotificationFilter::OAIGoogleChromeManagementV1TelemetryNotificationFilter() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1TelemetryNotificationFilter::~OAIGoogleChromeManagementV1TelemetryNotificationFilter() {}

void OAIGoogleChromeManagementV1TelemetryNotificationFilter::initializeModel() {

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_device_org_unit_id_isSet = false;
    m_device_org_unit_id_isValid = false;

    m_telemetry_event_notification_filter_isSet = false;
    m_telemetry_event_notification_filter_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;

    m_user_org_unit_id_isSet = false;
    m_user_org_unit_id_isValid = false;
}

void OAIGoogleChromeManagementV1TelemetryNotificationFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1TelemetryNotificationFilter::fromJsonObject(QJsonObject json) {

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_device_org_unit_id_isValid = ::OpenAPI::fromJsonValue(m_device_org_unit_id, json[QString("deviceOrgUnitId")]);
    m_device_org_unit_id_isSet = !json[QString("deviceOrgUnitId")].isNull() && m_device_org_unit_id_isValid;

    m_telemetry_event_notification_filter_isValid = ::OpenAPI::fromJsonValue(m_telemetry_event_notification_filter, json[QString("telemetryEventNotificationFilter")]);
    m_telemetry_event_notification_filter_isSet = !json[QString("telemetryEventNotificationFilter")].isNull() && m_telemetry_event_notification_filter_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("userEmail")]);
    m_user_email_isSet = !json[QString("userEmail")].isNull() && m_user_email_isValid;

    m_user_org_unit_id_isValid = ::OpenAPI::fromJsonValue(m_user_org_unit_id, json[QString("userOrgUnitId")]);
    m_user_org_unit_id_isSet = !json[QString("userOrgUnitId")].isNull() && m_user_org_unit_id_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryNotificationFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1TelemetryNotificationFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_device_org_unit_id_isSet) {
        obj.insert(QString("deviceOrgUnitId"), ::OpenAPI::toJsonValue(m_device_org_unit_id));
    }
    if (m_telemetry_event_notification_filter.isSet()) {
        obj.insert(QString("telemetryEventNotificationFilter"), ::OpenAPI::toJsonValue(m_telemetry_event_notification_filter));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("userEmail"), ::OpenAPI::toJsonValue(m_user_email));
    }
    if (m_user_org_unit_id_isSet) {
        obj.insert(QString("userOrgUnitId"), ::OpenAPI::toJsonValue(m_user_org_unit_id));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1TelemetryNotificationFilter::getDeviceId() const {
    return m_device_id;
}
void OAIGoogleChromeManagementV1TelemetryNotificationFilter::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationFilter::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationFilter::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryNotificationFilter::getDeviceOrgUnitId() const {
    return m_device_org_unit_id;
}
void OAIGoogleChromeManagementV1TelemetryNotificationFilter::setDeviceOrgUnitId(const QString &device_org_unit_id) {
    m_device_org_unit_id = device_org_unit_id;
    m_device_org_unit_id_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationFilter::is_device_org_unit_id_Set() const{
    return m_device_org_unit_id_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationFilter::is_device_org_unit_id_Valid() const{
    return m_device_org_unit_id_isValid;
}

OAIGoogleChromeManagementV1TelemetryEventNotificationFilter OAIGoogleChromeManagementV1TelemetryNotificationFilter::getTelemetryEventNotificationFilter() const {
    return m_telemetry_event_notification_filter;
}
void OAIGoogleChromeManagementV1TelemetryNotificationFilter::setTelemetryEventNotificationFilter(const OAIGoogleChromeManagementV1TelemetryEventNotificationFilter &telemetry_event_notification_filter) {
    m_telemetry_event_notification_filter = telemetry_event_notification_filter;
    m_telemetry_event_notification_filter_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationFilter::is_telemetry_event_notification_filter_Set() const{
    return m_telemetry_event_notification_filter_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationFilter::is_telemetry_event_notification_filter_Valid() const{
    return m_telemetry_event_notification_filter_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryNotificationFilter::getUserEmail() const {
    return m_user_email;
}
void OAIGoogleChromeManagementV1TelemetryNotificationFilter::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationFilter::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationFilter::is_user_email_Valid() const{
    return m_user_email_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryNotificationFilter::getUserOrgUnitId() const {
    return m_user_org_unit_id;
}
void OAIGoogleChromeManagementV1TelemetryNotificationFilter::setUserOrgUnitId(const QString &user_org_unit_id) {
    m_user_org_unit_id = user_org_unit_id;
    m_user_org_unit_id_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationFilter::is_user_org_unit_id_Set() const{
    return m_user_org_unit_id_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationFilter::is_user_org_unit_id_Valid() const{
    return m_user_org_unit_id_isValid;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_org_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telemetry_event_notification_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_org_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
