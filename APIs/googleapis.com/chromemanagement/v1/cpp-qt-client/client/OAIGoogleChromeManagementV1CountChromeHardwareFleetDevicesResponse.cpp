/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::~OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse() {}

void OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::initializeModel() {

    m_cpu_reports_isSet = false;
    m_cpu_reports_isValid = false;

    m_memory_reports_isSet = false;
    m_memory_reports_isValid = false;

    m_model_reports_isSet = false;
    m_model_reports_isValid = false;

    m_storage_reports_isSet = false;
    m_storage_reports_isValid = false;
}

void OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::fromJsonObject(QJsonObject json) {

    m_cpu_reports_isValid = ::OpenAPI::fromJsonValue(m_cpu_reports, json[QString("cpuReports")]);
    m_cpu_reports_isSet = !json[QString("cpuReports")].isNull() && m_cpu_reports_isValid;

    m_memory_reports_isValid = ::OpenAPI::fromJsonValue(m_memory_reports, json[QString("memoryReports")]);
    m_memory_reports_isSet = !json[QString("memoryReports")].isNull() && m_memory_reports_isValid;

    m_model_reports_isValid = ::OpenAPI::fromJsonValue(m_model_reports, json[QString("modelReports")]);
    m_model_reports_isSet = !json[QString("modelReports")].isNull() && m_model_reports_isValid;

    m_storage_reports_isValid = ::OpenAPI::fromJsonValue(m_storage_reports, json[QString("storageReports")]);
    m_storage_reports_isSet = !json[QString("storageReports")].isNull() && m_storage_reports_isValid;
}

QString OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_cpu_reports.size() > 0) {
        obj.insert(QString("cpuReports"), ::OpenAPI::toJsonValue(m_cpu_reports));
    }
    if (m_memory_reports.size() > 0) {
        obj.insert(QString("memoryReports"), ::OpenAPI::toJsonValue(m_memory_reports));
    }
    if (m_model_reports.size() > 0) {
        obj.insert(QString("modelReports"), ::OpenAPI::toJsonValue(m_model_reports));
    }
    if (m_storage_reports.size() > 0) {
        obj.insert(QString("storageReports"), ::OpenAPI::toJsonValue(m_storage_reports));
    }
    return obj;
}

QList<OAIGoogleChromeManagementV1DeviceHardwareCountReport> OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::getCpuReports() const {
    return m_cpu_reports;
}
void OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::setCpuReports(const QList<OAIGoogleChromeManagementV1DeviceHardwareCountReport> &cpu_reports) {
    m_cpu_reports = cpu_reports;
    m_cpu_reports_isSet = true;
}

bool OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::is_cpu_reports_Set() const{
    return m_cpu_reports_isSet;
}

bool OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::is_cpu_reports_Valid() const{
    return m_cpu_reports_isValid;
}

QList<OAIGoogleChromeManagementV1DeviceHardwareCountReport> OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::getMemoryReports() const {
    return m_memory_reports;
}
void OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::setMemoryReports(const QList<OAIGoogleChromeManagementV1DeviceHardwareCountReport> &memory_reports) {
    m_memory_reports = memory_reports;
    m_memory_reports_isSet = true;
}

bool OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::is_memory_reports_Set() const{
    return m_memory_reports_isSet;
}

bool OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::is_memory_reports_Valid() const{
    return m_memory_reports_isValid;
}

QList<OAIGoogleChromeManagementV1DeviceHardwareCountReport> OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::getModelReports() const {
    return m_model_reports;
}
void OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::setModelReports(const QList<OAIGoogleChromeManagementV1DeviceHardwareCountReport> &model_reports) {
    m_model_reports = model_reports;
    m_model_reports_isSet = true;
}

bool OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::is_model_reports_Set() const{
    return m_model_reports_isSet;
}

bool OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::is_model_reports_Valid() const{
    return m_model_reports_isValid;
}

QList<OAIGoogleChromeManagementV1DeviceHardwareCountReport> OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::getStorageReports() const {
    return m_storage_reports;
}
void OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::setStorageReports(const QList<OAIGoogleChromeManagementV1DeviceHardwareCountReport> &storage_reports) {
    m_storage_reports = storage_reports;
    m_storage_reports_isSet = true;
}

bool OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::is_storage_reports_Set() const{
    return m_storage_reports_isSet;
}

bool OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::is_storage_reports_Valid() const{
    return m_storage_reports_isValid;
}

bool OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpu_reports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_reports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_reports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_reports.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
