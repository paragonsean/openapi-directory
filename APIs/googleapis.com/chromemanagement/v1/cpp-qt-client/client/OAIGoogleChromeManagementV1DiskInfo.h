/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleChromeManagementV1DiskInfo.h
 *
 * Status of the single storage device.
 */

#ifndef OAIGoogleChromeManagementV1DiskInfo_H
#define OAIGoogleChromeManagementV1DiskInfo_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleChromeManagementV1DiskInfo : public OAIObject {
public:
    OAIGoogleChromeManagementV1DiskInfo();
    OAIGoogleChromeManagementV1DiskInfo(QString json);
    ~OAIGoogleChromeManagementV1DiskInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBytesReadThisSession() const;
    void setBytesReadThisSession(const QString &bytes_read_this_session);
    bool is_bytes_read_this_session_Set() const;
    bool is_bytes_read_this_session_Valid() const;

    QString getBytesWrittenThisSession() const;
    void setBytesWrittenThisSession(const QString &bytes_written_this_session);
    bool is_bytes_written_this_session_Set() const;
    bool is_bytes_written_this_session_Valid() const;

    QString getDiscardTimeThisSession() const;
    void setDiscardTimeThisSession(const QString &discard_time_this_session);
    bool is_discard_time_this_session_Set() const;
    bool is_discard_time_this_session_Valid() const;

    QString getHealth() const;
    void setHealth(const QString &health);
    bool is_health_Set() const;
    bool is_health_Valid() const;

    QString getIoTimeThisSession() const;
    void setIoTimeThisSession(const QString &io_time_this_session);
    bool is_io_time_this_session_Set() const;
    bool is_io_time_this_session_Valid() const;

    QString getManufacturer() const;
    void setManufacturer(const QString &manufacturer);
    bool is_manufacturer_Set() const;
    bool is_manufacturer_Valid() const;

    QString getModel() const;
    void setModel(const QString &model);
    bool is_model_Set() const;
    bool is_model_Valid() const;

    QString getReadTimeThisSession() const;
    void setReadTimeThisSession(const QString &read_time_this_session);
    bool is_read_time_this_session_Set() const;
    bool is_read_time_this_session_Valid() const;

    QString getSerialNumber() const;
    void setSerialNumber(const QString &serial_number);
    bool is_serial_number_Set() const;
    bool is_serial_number_Valid() const;

    QString getSizeBytes() const;
    void setSizeBytes(const QString &size_bytes);
    bool is_size_bytes_Set() const;
    bool is_size_bytes_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QList<QString> getVolumeIds() const;
    void setVolumeIds(const QList<QString> &volume_ids);
    bool is_volume_ids_Set() const;
    bool is_volume_ids_Valid() const;

    QString getWriteTimeThisSession() const;
    void setWriteTimeThisSession(const QString &write_time_this_session);
    bool is_write_time_this_session_Set() const;
    bool is_write_time_this_session_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bytes_read_this_session;
    bool m_bytes_read_this_session_isSet;
    bool m_bytes_read_this_session_isValid;

    QString m_bytes_written_this_session;
    bool m_bytes_written_this_session_isSet;
    bool m_bytes_written_this_session_isValid;

    QString m_discard_time_this_session;
    bool m_discard_time_this_session_isSet;
    bool m_discard_time_this_session_isValid;

    QString m_health;
    bool m_health_isSet;
    bool m_health_isValid;

    QString m_io_time_this_session;
    bool m_io_time_this_session_isSet;
    bool m_io_time_this_session_isValid;

    QString m_manufacturer;
    bool m_manufacturer_isSet;
    bool m_manufacturer_isValid;

    QString m_model;
    bool m_model_isSet;
    bool m_model_isValid;

    QString m_read_time_this_session;
    bool m_read_time_this_session_isSet;
    bool m_read_time_this_session_isValid;

    QString m_serial_number;
    bool m_serial_number_isSet;
    bool m_serial_number_isValid;

    QString m_size_bytes;
    bool m_size_bytes_isSet;
    bool m_size_bytes_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QList<QString> m_volume_ids;
    bool m_volume_ids_isSet;
    bool m_volume_ids_isValid;

    QString m_write_time_this_session;
    bool m_write_time_this_session_isSet;
    bool m_write_time_this_session_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleChromeManagementV1DiskInfo)

#endif // OAIGoogleChromeManagementV1DiskInfo_H
