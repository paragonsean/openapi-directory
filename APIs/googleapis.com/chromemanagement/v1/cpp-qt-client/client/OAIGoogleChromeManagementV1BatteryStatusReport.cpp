/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1BatteryStatusReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1BatteryStatusReport::OAIGoogleChromeManagementV1BatteryStatusReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1BatteryStatusReport::OAIGoogleChromeManagementV1BatteryStatusReport() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1BatteryStatusReport::~OAIGoogleChromeManagementV1BatteryStatusReport() {}

void OAIGoogleChromeManagementV1BatteryStatusReport::initializeModel() {

    m_battery_health_isSet = false;
    m_battery_health_isValid = false;

    m_cycle_count_isSet = false;
    m_cycle_count_isValid = false;

    m_full_charge_capacity_isSet = false;
    m_full_charge_capacity_isValid = false;

    m_report_time_isSet = false;
    m_report_time_isValid = false;

    m_sample_isSet = false;
    m_sample_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;
}

void OAIGoogleChromeManagementV1BatteryStatusReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1BatteryStatusReport::fromJsonObject(QJsonObject json) {

    m_battery_health_isValid = ::OpenAPI::fromJsonValue(m_battery_health, json[QString("batteryHealth")]);
    m_battery_health_isSet = !json[QString("batteryHealth")].isNull() && m_battery_health_isValid;

    m_cycle_count_isValid = ::OpenAPI::fromJsonValue(m_cycle_count, json[QString("cycleCount")]);
    m_cycle_count_isSet = !json[QString("cycleCount")].isNull() && m_cycle_count_isValid;

    m_full_charge_capacity_isValid = ::OpenAPI::fromJsonValue(m_full_charge_capacity, json[QString("fullChargeCapacity")]);
    m_full_charge_capacity_isSet = !json[QString("fullChargeCapacity")].isNull() && m_full_charge_capacity_isValid;

    m_report_time_isValid = ::OpenAPI::fromJsonValue(m_report_time, json[QString("reportTime")]);
    m_report_time_isSet = !json[QString("reportTime")].isNull() && m_report_time_isValid;

    m_sample_isValid = ::OpenAPI::fromJsonValue(m_sample, json[QString("sample")]);
    m_sample_isSet = !json[QString("sample")].isNull() && m_sample_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;
}

QString OAIGoogleChromeManagementV1BatteryStatusReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1BatteryStatusReport::asJsonObject() const {
    QJsonObject obj;
    if (m_battery_health_isSet) {
        obj.insert(QString("batteryHealth"), ::OpenAPI::toJsonValue(m_battery_health));
    }
    if (m_cycle_count_isSet) {
        obj.insert(QString("cycleCount"), ::OpenAPI::toJsonValue(m_cycle_count));
    }
    if (m_full_charge_capacity_isSet) {
        obj.insert(QString("fullChargeCapacity"), ::OpenAPI::toJsonValue(m_full_charge_capacity));
    }
    if (m_report_time_isSet) {
        obj.insert(QString("reportTime"), ::OpenAPI::toJsonValue(m_report_time));
    }
    if (m_sample.size() > 0) {
        obj.insert(QString("sample"), ::OpenAPI::toJsonValue(m_sample));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1BatteryStatusReport::getBatteryHealth() const {
    return m_battery_health;
}
void OAIGoogleChromeManagementV1BatteryStatusReport::setBatteryHealth(const QString &battery_health) {
    m_battery_health = battery_health;
    m_battery_health_isSet = true;
}

bool OAIGoogleChromeManagementV1BatteryStatusReport::is_battery_health_Set() const{
    return m_battery_health_isSet;
}

bool OAIGoogleChromeManagementV1BatteryStatusReport::is_battery_health_Valid() const{
    return m_battery_health_isValid;
}

qint32 OAIGoogleChromeManagementV1BatteryStatusReport::getCycleCount() const {
    return m_cycle_count;
}
void OAIGoogleChromeManagementV1BatteryStatusReport::setCycleCount(const qint32 &cycle_count) {
    m_cycle_count = cycle_count;
    m_cycle_count_isSet = true;
}

bool OAIGoogleChromeManagementV1BatteryStatusReport::is_cycle_count_Set() const{
    return m_cycle_count_isSet;
}

bool OAIGoogleChromeManagementV1BatteryStatusReport::is_cycle_count_Valid() const{
    return m_cycle_count_isValid;
}

QString OAIGoogleChromeManagementV1BatteryStatusReport::getFullChargeCapacity() const {
    return m_full_charge_capacity;
}
void OAIGoogleChromeManagementV1BatteryStatusReport::setFullChargeCapacity(const QString &full_charge_capacity) {
    m_full_charge_capacity = full_charge_capacity;
    m_full_charge_capacity_isSet = true;
}

bool OAIGoogleChromeManagementV1BatteryStatusReport::is_full_charge_capacity_Set() const{
    return m_full_charge_capacity_isSet;
}

bool OAIGoogleChromeManagementV1BatteryStatusReport::is_full_charge_capacity_Valid() const{
    return m_full_charge_capacity_isValid;
}

QString OAIGoogleChromeManagementV1BatteryStatusReport::getReportTime() const {
    return m_report_time;
}
void OAIGoogleChromeManagementV1BatteryStatusReport::setReportTime(const QString &report_time) {
    m_report_time = report_time;
    m_report_time_isSet = true;
}

bool OAIGoogleChromeManagementV1BatteryStatusReport::is_report_time_Set() const{
    return m_report_time_isSet;
}

bool OAIGoogleChromeManagementV1BatteryStatusReport::is_report_time_Valid() const{
    return m_report_time_isValid;
}

QList<OAIGoogleChromeManagementV1BatterySampleReport> OAIGoogleChromeManagementV1BatteryStatusReport::getSample() const {
    return m_sample;
}
void OAIGoogleChromeManagementV1BatteryStatusReport::setSample(const QList<OAIGoogleChromeManagementV1BatterySampleReport> &sample) {
    m_sample = sample;
    m_sample_isSet = true;
}

bool OAIGoogleChromeManagementV1BatteryStatusReport::is_sample_Set() const{
    return m_sample_isSet;
}

bool OAIGoogleChromeManagementV1BatteryStatusReport::is_sample_Valid() const{
    return m_sample_isValid;
}

QString OAIGoogleChromeManagementV1BatteryStatusReport::getSerialNumber() const {
    return m_serial_number;
}
void OAIGoogleChromeManagementV1BatteryStatusReport::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIGoogleChromeManagementV1BatteryStatusReport::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIGoogleChromeManagementV1BatteryStatusReport::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

bool OAIGoogleChromeManagementV1BatteryStatusReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_battery_health_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycle_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_charge_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1BatteryStatusReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
