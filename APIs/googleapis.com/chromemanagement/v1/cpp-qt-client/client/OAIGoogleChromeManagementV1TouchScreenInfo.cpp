/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1TouchScreenInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1TouchScreenInfo::OAIGoogleChromeManagementV1TouchScreenInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1TouchScreenInfo::OAIGoogleChromeManagementV1TouchScreenInfo() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1TouchScreenInfo::~OAIGoogleChromeManagementV1TouchScreenInfo() {}

void OAIGoogleChromeManagementV1TouchScreenInfo::initializeModel() {

    m_devices_isSet = false;
    m_devices_isValid = false;

    m_touchpad_library_isSet = false;
    m_touchpad_library_isValid = false;
}

void OAIGoogleChromeManagementV1TouchScreenInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1TouchScreenInfo::fromJsonObject(QJsonObject json) {

    m_devices_isValid = ::OpenAPI::fromJsonValue(m_devices, json[QString("devices")]);
    m_devices_isSet = !json[QString("devices")].isNull() && m_devices_isValid;

    m_touchpad_library_isValid = ::OpenAPI::fromJsonValue(m_touchpad_library, json[QString("touchpadLibrary")]);
    m_touchpad_library_isSet = !json[QString("touchpadLibrary")].isNull() && m_touchpad_library_isValid;
}

QString OAIGoogleChromeManagementV1TouchScreenInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1TouchScreenInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_devices.size() > 0) {
        obj.insert(QString("devices"), ::OpenAPI::toJsonValue(m_devices));
    }
    if (m_touchpad_library_isSet) {
        obj.insert(QString("touchpadLibrary"), ::OpenAPI::toJsonValue(m_touchpad_library));
    }
    return obj;
}

QList<OAIGoogleChromeManagementV1TouchScreenDevice> OAIGoogleChromeManagementV1TouchScreenInfo::getDevices() const {
    return m_devices;
}
void OAIGoogleChromeManagementV1TouchScreenInfo::setDevices(const QList<OAIGoogleChromeManagementV1TouchScreenDevice> &devices) {
    m_devices = devices;
    m_devices_isSet = true;
}

bool OAIGoogleChromeManagementV1TouchScreenInfo::is_devices_Set() const{
    return m_devices_isSet;
}

bool OAIGoogleChromeManagementV1TouchScreenInfo::is_devices_Valid() const{
    return m_devices_isValid;
}

QString OAIGoogleChromeManagementV1TouchScreenInfo::getTouchpadLibrary() const {
    return m_touchpad_library;
}
void OAIGoogleChromeManagementV1TouchScreenInfo::setTouchpadLibrary(const QString &touchpad_library) {
    m_touchpad_library = touchpad_library;
    m_touchpad_library_isSet = true;
}

bool OAIGoogleChromeManagementV1TouchScreenInfo::is_touchpad_library_Set() const{
    return m_touchpad_library_isSet;
}

bool OAIGoogleChromeManagementV1TouchScreenInfo::is_touchpad_library_Valid() const{
    return m_touchpad_library_isValid;
}

bool OAIGoogleChromeManagementV1TouchScreenInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_devices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_touchpad_library_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1TouchScreenInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
