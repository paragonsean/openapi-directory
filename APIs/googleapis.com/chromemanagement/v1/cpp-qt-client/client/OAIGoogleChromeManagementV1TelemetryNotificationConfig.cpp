/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1TelemetryNotificationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1TelemetryNotificationConfig::OAIGoogleChromeManagementV1TelemetryNotificationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1TelemetryNotificationConfig::OAIGoogleChromeManagementV1TelemetryNotificationConfig() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1TelemetryNotificationConfig::~OAIGoogleChromeManagementV1TelemetryNotificationConfig() {}

void OAIGoogleChromeManagementV1TelemetryNotificationConfig::initializeModel() {

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_google_cloud_pubsub_topic_isSet = false;
    m_google_cloud_pubsub_topic_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIGoogleChromeManagementV1TelemetryNotificationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1TelemetryNotificationConfig::fromJsonObject(QJsonObject json) {

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_google_cloud_pubsub_topic_isValid = ::OpenAPI::fromJsonValue(m_google_cloud_pubsub_topic, json[QString("googleCloudPubsubTopic")]);
    m_google_cloud_pubsub_topic_isSet = !json[QString("googleCloudPubsubTopic")].isNull() && m_google_cloud_pubsub_topic_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryNotificationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1TelemetryNotificationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_isSet) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_google_cloud_pubsub_topic_isSet) {
        obj.insert(QString("googleCloudPubsubTopic"), ::OpenAPI::toJsonValue(m_google_cloud_pubsub_topic));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1TelemetryNotificationConfig::getCustomer() const {
    return m_customer;
}
void OAIGoogleChromeManagementV1TelemetryNotificationConfig::setCustomer(const QString &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationConfig::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationConfig::is_customer_Valid() const{
    return m_customer_isValid;
}

OAIGoogleChromeManagementV1TelemetryNotificationFilter OAIGoogleChromeManagementV1TelemetryNotificationConfig::getFilter() const {
    return m_filter;
}
void OAIGoogleChromeManagementV1TelemetryNotificationConfig::setFilter(const OAIGoogleChromeManagementV1TelemetryNotificationFilter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationConfig::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationConfig::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryNotificationConfig::getGoogleCloudPubsubTopic() const {
    return m_google_cloud_pubsub_topic;
}
void OAIGoogleChromeManagementV1TelemetryNotificationConfig::setGoogleCloudPubsubTopic(const QString &google_cloud_pubsub_topic) {
    m_google_cloud_pubsub_topic = google_cloud_pubsub_topic;
    m_google_cloud_pubsub_topic_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationConfig::is_google_cloud_pubsub_topic_Set() const{
    return m_google_cloud_pubsub_topic_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationConfig::is_google_cloud_pubsub_topic_Valid() const{
    return m_google_cloud_pubsub_topic_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryNotificationConfig::getName() const {
    return m_name;
}
void OAIGoogleChromeManagementV1TelemetryNotificationConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationConfig::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_cloud_pubsub_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1TelemetryNotificationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
