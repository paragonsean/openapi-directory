/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1StorageInfoDiskVolume.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1StorageInfoDiskVolume::OAIGoogleChromeManagementV1StorageInfoDiskVolume(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1StorageInfoDiskVolume::OAIGoogleChromeManagementV1StorageInfoDiskVolume() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1StorageInfoDiskVolume::~OAIGoogleChromeManagementV1StorageInfoDiskVolume() {}

void OAIGoogleChromeManagementV1StorageInfoDiskVolume::initializeModel() {

    m_storage_free_bytes_isSet = false;
    m_storage_free_bytes_isValid = false;

    m_storage_total_bytes_isSet = false;
    m_storage_total_bytes_isValid = false;

    m_volume_id_isSet = false;
    m_volume_id_isValid = false;
}

void OAIGoogleChromeManagementV1StorageInfoDiskVolume::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1StorageInfoDiskVolume::fromJsonObject(QJsonObject json) {

    m_storage_free_bytes_isValid = ::OpenAPI::fromJsonValue(m_storage_free_bytes, json[QString("storageFreeBytes")]);
    m_storage_free_bytes_isSet = !json[QString("storageFreeBytes")].isNull() && m_storage_free_bytes_isValid;

    m_storage_total_bytes_isValid = ::OpenAPI::fromJsonValue(m_storage_total_bytes, json[QString("storageTotalBytes")]);
    m_storage_total_bytes_isSet = !json[QString("storageTotalBytes")].isNull() && m_storage_total_bytes_isValid;

    m_volume_id_isValid = ::OpenAPI::fromJsonValue(m_volume_id, json[QString("volumeId")]);
    m_volume_id_isSet = !json[QString("volumeId")].isNull() && m_volume_id_isValid;
}

QString OAIGoogleChromeManagementV1StorageInfoDiskVolume::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1StorageInfoDiskVolume::asJsonObject() const {
    QJsonObject obj;
    if (m_storage_free_bytes_isSet) {
        obj.insert(QString("storageFreeBytes"), ::OpenAPI::toJsonValue(m_storage_free_bytes));
    }
    if (m_storage_total_bytes_isSet) {
        obj.insert(QString("storageTotalBytes"), ::OpenAPI::toJsonValue(m_storage_total_bytes));
    }
    if (m_volume_id_isSet) {
        obj.insert(QString("volumeId"), ::OpenAPI::toJsonValue(m_volume_id));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1StorageInfoDiskVolume::getStorageFreeBytes() const {
    return m_storage_free_bytes;
}
void OAIGoogleChromeManagementV1StorageInfoDiskVolume::setStorageFreeBytes(const QString &storage_free_bytes) {
    m_storage_free_bytes = storage_free_bytes;
    m_storage_free_bytes_isSet = true;
}

bool OAIGoogleChromeManagementV1StorageInfoDiskVolume::is_storage_free_bytes_Set() const{
    return m_storage_free_bytes_isSet;
}

bool OAIGoogleChromeManagementV1StorageInfoDiskVolume::is_storage_free_bytes_Valid() const{
    return m_storage_free_bytes_isValid;
}

QString OAIGoogleChromeManagementV1StorageInfoDiskVolume::getStorageTotalBytes() const {
    return m_storage_total_bytes;
}
void OAIGoogleChromeManagementV1StorageInfoDiskVolume::setStorageTotalBytes(const QString &storage_total_bytes) {
    m_storage_total_bytes = storage_total_bytes;
    m_storage_total_bytes_isSet = true;
}

bool OAIGoogleChromeManagementV1StorageInfoDiskVolume::is_storage_total_bytes_Set() const{
    return m_storage_total_bytes_isSet;
}

bool OAIGoogleChromeManagementV1StorageInfoDiskVolume::is_storage_total_bytes_Valid() const{
    return m_storage_total_bytes_isValid;
}

QString OAIGoogleChromeManagementV1StorageInfoDiskVolume::getVolumeId() const {
    return m_volume_id;
}
void OAIGoogleChromeManagementV1StorageInfoDiskVolume::setVolumeId(const QString &volume_id) {
    m_volume_id = volume_id;
    m_volume_id_isSet = true;
}

bool OAIGoogleChromeManagementV1StorageInfoDiskVolume::is_volume_id_Set() const{
    return m_volume_id_isSet;
}

bool OAIGoogleChromeManagementV1StorageInfoDiskVolume::is_volume_id_Valid() const{
    return m_volume_id_isValid;
}

bool OAIGoogleChromeManagementV1StorageInfoDiskVolume::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_storage_free_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_total_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1StorageInfoDiskVolume::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
