/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1TelemetryEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1TelemetryEvent::OAIGoogleChromeManagementV1TelemetryEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1TelemetryEvent::OAIGoogleChromeManagementV1TelemetryEvent() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1TelemetryEvent::~OAIGoogleChromeManagementV1TelemetryEvent() {}

void OAIGoogleChromeManagementV1TelemetryEvent::initializeModel() {

    m_audio_severe_underrun_event_isSet = false;
    m_audio_severe_underrun_event_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_https_latency_change_event_isSet = false;
    m_https_latency_change_event_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_state_change_event_isSet = false;
    m_network_state_change_event_isValid = false;

    m_report_time_isSet = false;
    m_report_time_isValid = false;

    m_usb_peripherals_event_isSet = false;
    m_usb_peripherals_event_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_vpn_connection_state_change_event_isSet = false;
    m_vpn_connection_state_change_event_isValid = false;

    m_wifi_signal_strength_event_isSet = false;
    m_wifi_signal_strength_event_isValid = false;
}

void OAIGoogleChromeManagementV1TelemetryEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1TelemetryEvent::fromJsonObject(QJsonObject json) {

    m_audio_severe_underrun_event_isValid = ::OpenAPI::fromJsonValue(m_audio_severe_underrun_event, json[QString("audioSevereUnderrunEvent")]);
    m_audio_severe_underrun_event_isSet = !json[QString("audioSevereUnderrunEvent")].isNull() && m_audio_severe_underrun_event_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_https_latency_change_event_isValid = ::OpenAPI::fromJsonValue(m_https_latency_change_event, json[QString("httpsLatencyChangeEvent")]);
    m_https_latency_change_event_isSet = !json[QString("httpsLatencyChangeEvent")].isNull() && m_https_latency_change_event_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_state_change_event_isValid = ::OpenAPI::fromJsonValue(m_network_state_change_event, json[QString("networkStateChangeEvent")]);
    m_network_state_change_event_isSet = !json[QString("networkStateChangeEvent")].isNull() && m_network_state_change_event_isValid;

    m_report_time_isValid = ::OpenAPI::fromJsonValue(m_report_time, json[QString("reportTime")]);
    m_report_time_isSet = !json[QString("reportTime")].isNull() && m_report_time_isValid;

    m_usb_peripherals_event_isValid = ::OpenAPI::fromJsonValue(m_usb_peripherals_event, json[QString("usbPeripheralsEvent")]);
    m_usb_peripherals_event_isSet = !json[QString("usbPeripheralsEvent")].isNull() && m_usb_peripherals_event_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_vpn_connection_state_change_event_isValid = ::OpenAPI::fromJsonValue(m_vpn_connection_state_change_event, json[QString("vpnConnectionStateChangeEvent")]);
    m_vpn_connection_state_change_event_isSet = !json[QString("vpnConnectionStateChangeEvent")].isNull() && m_vpn_connection_state_change_event_isValid;

    m_wifi_signal_strength_event_isValid = ::OpenAPI::fromJsonValue(m_wifi_signal_strength_event, json[QString("wifiSignalStrengthEvent")]);
    m_wifi_signal_strength_event_isSet = !json[QString("wifiSignalStrengthEvent")].isNull() && m_wifi_signal_strength_event_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1TelemetryEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_severe_underrun_event_isSet) {
        obj.insert(QString("audioSevereUnderrunEvent"), ::OpenAPI::toJsonValue(m_audio_severe_underrun_event));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_https_latency_change_event.isSet()) {
        obj.insert(QString("httpsLatencyChangeEvent"), ::OpenAPI::toJsonValue(m_https_latency_change_event));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_state_change_event.isSet()) {
        obj.insert(QString("networkStateChangeEvent"), ::OpenAPI::toJsonValue(m_network_state_change_event));
    }
    if (m_report_time_isSet) {
        obj.insert(QString("reportTime"), ::OpenAPI::toJsonValue(m_report_time));
    }
    if (m_usb_peripherals_event.isSet()) {
        obj.insert(QString("usbPeripheralsEvent"), ::OpenAPI::toJsonValue(m_usb_peripherals_event));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_vpn_connection_state_change_event.isSet()) {
        obj.insert(QString("vpnConnectionStateChangeEvent"), ::OpenAPI::toJsonValue(m_vpn_connection_state_change_event));
    }
    if (m_wifi_signal_strength_event.isSet()) {
        obj.insert(QString("wifiSignalStrengthEvent"), ::OpenAPI::toJsonValue(m_wifi_signal_strength_event));
    }
    return obj;
}

OAIObject OAIGoogleChromeManagementV1TelemetryEvent::getAudioSevereUnderrunEvent() const {
    return m_audio_severe_underrun_event;
}
void OAIGoogleChromeManagementV1TelemetryEvent::setAudioSevereUnderrunEvent(const OAIObject &audio_severe_underrun_event) {
    m_audio_severe_underrun_event = audio_severe_underrun_event;
    m_audio_severe_underrun_event_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_audio_severe_underrun_event_Set() const{
    return m_audio_severe_underrun_event_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_audio_severe_underrun_event_Valid() const{
    return m_audio_severe_underrun_event_isValid;
}

OAIGoogleChromeManagementV1TelemetryDeviceInfo OAIGoogleChromeManagementV1TelemetryEvent::getDevice() const {
    return m_device;
}
void OAIGoogleChromeManagementV1TelemetryEvent::setDevice(const OAIGoogleChromeManagementV1TelemetryDeviceInfo &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_device_Set() const{
    return m_device_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_device_Valid() const{
    return m_device_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryEvent::getEventType() const {
    return m_event_type;
}
void OAIGoogleChromeManagementV1TelemetryEvent::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent OAIGoogleChromeManagementV1TelemetryEvent::getHttpsLatencyChangeEvent() const {
    return m_https_latency_change_event;
}
void OAIGoogleChromeManagementV1TelemetryEvent::setHttpsLatencyChangeEvent(const OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent &https_latency_change_event) {
    m_https_latency_change_event = https_latency_change_event;
    m_https_latency_change_event_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_https_latency_change_event_Set() const{
    return m_https_latency_change_event_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_https_latency_change_event_Valid() const{
    return m_https_latency_change_event_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryEvent::getName() const {
    return m_name;
}
void OAIGoogleChromeManagementV1TelemetryEvent::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_name_Valid() const{
    return m_name_isValid;
}

OAIGoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent OAIGoogleChromeManagementV1TelemetryEvent::getNetworkStateChangeEvent() const {
    return m_network_state_change_event;
}
void OAIGoogleChromeManagementV1TelemetryEvent::setNetworkStateChangeEvent(const OAIGoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent &network_state_change_event) {
    m_network_state_change_event = network_state_change_event;
    m_network_state_change_event_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_network_state_change_event_Set() const{
    return m_network_state_change_event_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_network_state_change_event_Valid() const{
    return m_network_state_change_event_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryEvent::getReportTime() const {
    return m_report_time;
}
void OAIGoogleChromeManagementV1TelemetryEvent::setReportTime(const QString &report_time) {
    m_report_time = report_time;
    m_report_time_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_report_time_Set() const{
    return m_report_time_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_report_time_Valid() const{
    return m_report_time_isValid;
}

OAIGoogleChromeManagementV1TelemetryUsbPeripheralsEvent OAIGoogleChromeManagementV1TelemetryEvent::getUsbPeripheralsEvent() const {
    return m_usb_peripherals_event;
}
void OAIGoogleChromeManagementV1TelemetryEvent::setUsbPeripheralsEvent(const OAIGoogleChromeManagementV1TelemetryUsbPeripheralsEvent &usb_peripherals_event) {
    m_usb_peripherals_event = usb_peripherals_event;
    m_usb_peripherals_event_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_usb_peripherals_event_Set() const{
    return m_usb_peripherals_event_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_usb_peripherals_event_Valid() const{
    return m_usb_peripherals_event_isValid;
}

OAIGoogleChromeManagementV1TelemetryUserInfo OAIGoogleChromeManagementV1TelemetryEvent::getUser() const {
    return m_user;
}
void OAIGoogleChromeManagementV1TelemetryEvent::setUser(const OAIGoogleChromeManagementV1TelemetryUserInfo &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_user_Set() const{
    return m_user_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_user_Valid() const{
    return m_user_isValid;
}

OAIGoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent OAIGoogleChromeManagementV1TelemetryEvent::getVpnConnectionStateChangeEvent() const {
    return m_vpn_connection_state_change_event;
}
void OAIGoogleChromeManagementV1TelemetryEvent::setVpnConnectionStateChangeEvent(const OAIGoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent &vpn_connection_state_change_event) {
    m_vpn_connection_state_change_event = vpn_connection_state_change_event;
    m_vpn_connection_state_change_event_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_vpn_connection_state_change_event_Set() const{
    return m_vpn_connection_state_change_event_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_vpn_connection_state_change_event_Valid() const{
    return m_vpn_connection_state_change_event_isValid;
}

OAIGoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent OAIGoogleChromeManagementV1TelemetryEvent::getWifiSignalStrengthEvent() const {
    return m_wifi_signal_strength_event;
}
void OAIGoogleChromeManagementV1TelemetryEvent::setWifiSignalStrengthEvent(const OAIGoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent &wifi_signal_strength_event) {
    m_wifi_signal_strength_event = wifi_signal_strength_event;
    m_wifi_signal_strength_event_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_wifi_signal_strength_event_Set() const{
    return m_wifi_signal_strength_event_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::is_wifi_signal_strength_event_Valid() const{
    return m_wifi_signal_strength_event_isValid;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_severe_underrun_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_https_latency_change_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_state_change_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usb_peripherals_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_connection_state_change_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_signal_strength_event.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1TelemetryEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
