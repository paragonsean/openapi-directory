/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1AudioStatusReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1AudioStatusReport::OAIGoogleChromeManagementV1AudioStatusReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1AudioStatusReport::OAIGoogleChromeManagementV1AudioStatusReport() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1AudioStatusReport::~OAIGoogleChromeManagementV1AudioStatusReport() {}

void OAIGoogleChromeManagementV1AudioStatusReport::initializeModel() {

    m_input_device_isSet = false;
    m_input_device_isValid = false;

    m_input_gain_isSet = false;
    m_input_gain_isValid = false;

    m_input_mute_isSet = false;
    m_input_mute_isValid = false;

    m_output_device_isSet = false;
    m_output_device_isValid = false;

    m_output_mute_isSet = false;
    m_output_mute_isValid = false;

    m_output_volume_isSet = false;
    m_output_volume_isValid = false;

    m_report_time_isSet = false;
    m_report_time_isValid = false;
}

void OAIGoogleChromeManagementV1AudioStatusReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1AudioStatusReport::fromJsonObject(QJsonObject json) {

    m_input_device_isValid = ::OpenAPI::fromJsonValue(m_input_device, json[QString("inputDevice")]);
    m_input_device_isSet = !json[QString("inputDevice")].isNull() && m_input_device_isValid;

    m_input_gain_isValid = ::OpenAPI::fromJsonValue(m_input_gain, json[QString("inputGain")]);
    m_input_gain_isSet = !json[QString("inputGain")].isNull() && m_input_gain_isValid;

    m_input_mute_isValid = ::OpenAPI::fromJsonValue(m_input_mute, json[QString("inputMute")]);
    m_input_mute_isSet = !json[QString("inputMute")].isNull() && m_input_mute_isValid;

    m_output_device_isValid = ::OpenAPI::fromJsonValue(m_output_device, json[QString("outputDevice")]);
    m_output_device_isSet = !json[QString("outputDevice")].isNull() && m_output_device_isValid;

    m_output_mute_isValid = ::OpenAPI::fromJsonValue(m_output_mute, json[QString("outputMute")]);
    m_output_mute_isSet = !json[QString("outputMute")].isNull() && m_output_mute_isValid;

    m_output_volume_isValid = ::OpenAPI::fromJsonValue(m_output_volume, json[QString("outputVolume")]);
    m_output_volume_isSet = !json[QString("outputVolume")].isNull() && m_output_volume_isValid;

    m_report_time_isValid = ::OpenAPI::fromJsonValue(m_report_time, json[QString("reportTime")]);
    m_report_time_isSet = !json[QString("reportTime")].isNull() && m_report_time_isValid;
}

QString OAIGoogleChromeManagementV1AudioStatusReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1AudioStatusReport::asJsonObject() const {
    QJsonObject obj;
    if (m_input_device_isSet) {
        obj.insert(QString("inputDevice"), ::OpenAPI::toJsonValue(m_input_device));
    }
    if (m_input_gain_isSet) {
        obj.insert(QString("inputGain"), ::OpenAPI::toJsonValue(m_input_gain));
    }
    if (m_input_mute_isSet) {
        obj.insert(QString("inputMute"), ::OpenAPI::toJsonValue(m_input_mute));
    }
    if (m_output_device_isSet) {
        obj.insert(QString("outputDevice"), ::OpenAPI::toJsonValue(m_output_device));
    }
    if (m_output_mute_isSet) {
        obj.insert(QString("outputMute"), ::OpenAPI::toJsonValue(m_output_mute));
    }
    if (m_output_volume_isSet) {
        obj.insert(QString("outputVolume"), ::OpenAPI::toJsonValue(m_output_volume));
    }
    if (m_report_time_isSet) {
        obj.insert(QString("reportTime"), ::OpenAPI::toJsonValue(m_report_time));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1AudioStatusReport::getInputDevice() const {
    return m_input_device;
}
void OAIGoogleChromeManagementV1AudioStatusReport::setInputDevice(const QString &input_device) {
    m_input_device = input_device;
    m_input_device_isSet = true;
}

bool OAIGoogleChromeManagementV1AudioStatusReport::is_input_device_Set() const{
    return m_input_device_isSet;
}

bool OAIGoogleChromeManagementV1AudioStatusReport::is_input_device_Valid() const{
    return m_input_device_isValid;
}

qint32 OAIGoogleChromeManagementV1AudioStatusReport::getInputGain() const {
    return m_input_gain;
}
void OAIGoogleChromeManagementV1AudioStatusReport::setInputGain(const qint32 &input_gain) {
    m_input_gain = input_gain;
    m_input_gain_isSet = true;
}

bool OAIGoogleChromeManagementV1AudioStatusReport::is_input_gain_Set() const{
    return m_input_gain_isSet;
}

bool OAIGoogleChromeManagementV1AudioStatusReport::is_input_gain_Valid() const{
    return m_input_gain_isValid;
}

bool OAIGoogleChromeManagementV1AudioStatusReport::isInputMute() const {
    return m_input_mute;
}
void OAIGoogleChromeManagementV1AudioStatusReport::setInputMute(const bool &input_mute) {
    m_input_mute = input_mute;
    m_input_mute_isSet = true;
}

bool OAIGoogleChromeManagementV1AudioStatusReport::is_input_mute_Set() const{
    return m_input_mute_isSet;
}

bool OAIGoogleChromeManagementV1AudioStatusReport::is_input_mute_Valid() const{
    return m_input_mute_isValid;
}

QString OAIGoogleChromeManagementV1AudioStatusReport::getOutputDevice() const {
    return m_output_device;
}
void OAIGoogleChromeManagementV1AudioStatusReport::setOutputDevice(const QString &output_device) {
    m_output_device = output_device;
    m_output_device_isSet = true;
}

bool OAIGoogleChromeManagementV1AudioStatusReport::is_output_device_Set() const{
    return m_output_device_isSet;
}

bool OAIGoogleChromeManagementV1AudioStatusReport::is_output_device_Valid() const{
    return m_output_device_isValid;
}

bool OAIGoogleChromeManagementV1AudioStatusReport::isOutputMute() const {
    return m_output_mute;
}
void OAIGoogleChromeManagementV1AudioStatusReport::setOutputMute(const bool &output_mute) {
    m_output_mute = output_mute;
    m_output_mute_isSet = true;
}

bool OAIGoogleChromeManagementV1AudioStatusReport::is_output_mute_Set() const{
    return m_output_mute_isSet;
}

bool OAIGoogleChromeManagementV1AudioStatusReport::is_output_mute_Valid() const{
    return m_output_mute_isValid;
}

qint32 OAIGoogleChromeManagementV1AudioStatusReport::getOutputVolume() const {
    return m_output_volume;
}
void OAIGoogleChromeManagementV1AudioStatusReport::setOutputVolume(const qint32 &output_volume) {
    m_output_volume = output_volume;
    m_output_volume_isSet = true;
}

bool OAIGoogleChromeManagementV1AudioStatusReport::is_output_volume_Set() const{
    return m_output_volume_isSet;
}

bool OAIGoogleChromeManagementV1AudioStatusReport::is_output_volume_Valid() const{
    return m_output_volume_isValid;
}

QString OAIGoogleChromeManagementV1AudioStatusReport::getReportTime() const {
    return m_report_time;
}
void OAIGoogleChromeManagementV1AudioStatusReport::setReportTime(const QString &report_time) {
    m_report_time = report_time;
    m_report_time_isSet = true;
}

bool OAIGoogleChromeManagementV1AudioStatusReport::is_report_time_Set() const{
    return m_report_time_isSet;
}

bool OAIGoogleChromeManagementV1AudioStatusReport::is_report_time_Valid() const{
    return m_report_time_isValid;
}

bool OAIGoogleChromeManagementV1AudioStatusReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_gain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_mute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_mute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1AudioStatusReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
