/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1RuntimeCountersReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1RuntimeCountersReport::OAIGoogleChromeManagementV1RuntimeCountersReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1RuntimeCountersReport::OAIGoogleChromeManagementV1RuntimeCountersReport() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1RuntimeCountersReport::~OAIGoogleChromeManagementV1RuntimeCountersReport() {}

void OAIGoogleChromeManagementV1RuntimeCountersReport::initializeModel() {

    m_enter_hibernation_count_isSet = false;
    m_enter_hibernation_count_isValid = false;

    m_enter_poweroff_count_isSet = false;
    m_enter_poweroff_count_isValid = false;

    m_enter_sleep_count_isSet = false;
    m_enter_sleep_count_isValid = false;

    m_report_time_isSet = false;
    m_report_time_isValid = false;

    m_uptime_runtime_duration_isSet = false;
    m_uptime_runtime_duration_isValid = false;
}

void OAIGoogleChromeManagementV1RuntimeCountersReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1RuntimeCountersReport::fromJsonObject(QJsonObject json) {

    m_enter_hibernation_count_isValid = ::OpenAPI::fromJsonValue(m_enter_hibernation_count, json[QString("enterHibernationCount")]);
    m_enter_hibernation_count_isSet = !json[QString("enterHibernationCount")].isNull() && m_enter_hibernation_count_isValid;

    m_enter_poweroff_count_isValid = ::OpenAPI::fromJsonValue(m_enter_poweroff_count, json[QString("enterPoweroffCount")]);
    m_enter_poweroff_count_isSet = !json[QString("enterPoweroffCount")].isNull() && m_enter_poweroff_count_isValid;

    m_enter_sleep_count_isValid = ::OpenAPI::fromJsonValue(m_enter_sleep_count, json[QString("enterSleepCount")]);
    m_enter_sleep_count_isSet = !json[QString("enterSleepCount")].isNull() && m_enter_sleep_count_isValid;

    m_report_time_isValid = ::OpenAPI::fromJsonValue(m_report_time, json[QString("reportTime")]);
    m_report_time_isSet = !json[QString("reportTime")].isNull() && m_report_time_isValid;

    m_uptime_runtime_duration_isValid = ::OpenAPI::fromJsonValue(m_uptime_runtime_duration, json[QString("uptimeRuntimeDuration")]);
    m_uptime_runtime_duration_isSet = !json[QString("uptimeRuntimeDuration")].isNull() && m_uptime_runtime_duration_isValid;
}

QString OAIGoogleChromeManagementV1RuntimeCountersReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1RuntimeCountersReport::asJsonObject() const {
    QJsonObject obj;
    if (m_enter_hibernation_count_isSet) {
        obj.insert(QString("enterHibernationCount"), ::OpenAPI::toJsonValue(m_enter_hibernation_count));
    }
    if (m_enter_poweroff_count_isSet) {
        obj.insert(QString("enterPoweroffCount"), ::OpenAPI::toJsonValue(m_enter_poweroff_count));
    }
    if (m_enter_sleep_count_isSet) {
        obj.insert(QString("enterSleepCount"), ::OpenAPI::toJsonValue(m_enter_sleep_count));
    }
    if (m_report_time_isSet) {
        obj.insert(QString("reportTime"), ::OpenAPI::toJsonValue(m_report_time));
    }
    if (m_uptime_runtime_duration_isSet) {
        obj.insert(QString("uptimeRuntimeDuration"), ::OpenAPI::toJsonValue(m_uptime_runtime_duration));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1RuntimeCountersReport::getEnterHibernationCount() const {
    return m_enter_hibernation_count;
}
void OAIGoogleChromeManagementV1RuntimeCountersReport::setEnterHibernationCount(const QString &enter_hibernation_count) {
    m_enter_hibernation_count = enter_hibernation_count;
    m_enter_hibernation_count_isSet = true;
}

bool OAIGoogleChromeManagementV1RuntimeCountersReport::is_enter_hibernation_count_Set() const{
    return m_enter_hibernation_count_isSet;
}

bool OAIGoogleChromeManagementV1RuntimeCountersReport::is_enter_hibernation_count_Valid() const{
    return m_enter_hibernation_count_isValid;
}

QString OAIGoogleChromeManagementV1RuntimeCountersReport::getEnterPoweroffCount() const {
    return m_enter_poweroff_count;
}
void OAIGoogleChromeManagementV1RuntimeCountersReport::setEnterPoweroffCount(const QString &enter_poweroff_count) {
    m_enter_poweroff_count = enter_poweroff_count;
    m_enter_poweroff_count_isSet = true;
}

bool OAIGoogleChromeManagementV1RuntimeCountersReport::is_enter_poweroff_count_Set() const{
    return m_enter_poweroff_count_isSet;
}

bool OAIGoogleChromeManagementV1RuntimeCountersReport::is_enter_poweroff_count_Valid() const{
    return m_enter_poweroff_count_isValid;
}

QString OAIGoogleChromeManagementV1RuntimeCountersReport::getEnterSleepCount() const {
    return m_enter_sleep_count;
}
void OAIGoogleChromeManagementV1RuntimeCountersReport::setEnterSleepCount(const QString &enter_sleep_count) {
    m_enter_sleep_count = enter_sleep_count;
    m_enter_sleep_count_isSet = true;
}

bool OAIGoogleChromeManagementV1RuntimeCountersReport::is_enter_sleep_count_Set() const{
    return m_enter_sleep_count_isSet;
}

bool OAIGoogleChromeManagementV1RuntimeCountersReport::is_enter_sleep_count_Valid() const{
    return m_enter_sleep_count_isValid;
}

QString OAIGoogleChromeManagementV1RuntimeCountersReport::getReportTime() const {
    return m_report_time;
}
void OAIGoogleChromeManagementV1RuntimeCountersReport::setReportTime(const QString &report_time) {
    m_report_time = report_time;
    m_report_time_isSet = true;
}

bool OAIGoogleChromeManagementV1RuntimeCountersReport::is_report_time_Set() const{
    return m_report_time_isSet;
}

bool OAIGoogleChromeManagementV1RuntimeCountersReport::is_report_time_Valid() const{
    return m_report_time_isValid;
}

QString OAIGoogleChromeManagementV1RuntimeCountersReport::getUptimeRuntimeDuration() const {
    return m_uptime_runtime_duration;
}
void OAIGoogleChromeManagementV1RuntimeCountersReport::setUptimeRuntimeDuration(const QString &uptime_runtime_duration) {
    m_uptime_runtime_duration = uptime_runtime_duration;
    m_uptime_runtime_duration_isSet = true;
}

bool OAIGoogleChromeManagementV1RuntimeCountersReport::is_uptime_runtime_duration_Set() const{
    return m_uptime_runtime_duration_isSet;
}

bool OAIGoogleChromeManagementV1RuntimeCountersReport::is_uptime_runtime_duration_Valid() const{
    return m_uptime_runtime_duration_isValid;
}

bool OAIGoogleChromeManagementV1RuntimeCountersReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enter_hibernation_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enter_poweroff_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enter_sleep_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uptime_runtime_duration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1RuntimeCountersReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
