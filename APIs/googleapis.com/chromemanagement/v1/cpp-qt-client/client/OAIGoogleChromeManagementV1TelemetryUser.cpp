/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1TelemetryUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1TelemetryUser::OAIGoogleChromeManagementV1TelemetryUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1TelemetryUser::OAIGoogleChromeManagementV1TelemetryUser() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1TelemetryUser::~OAIGoogleChromeManagementV1TelemetryUser() {}

void OAIGoogleChromeManagementV1TelemetryUser::initializeModel() {

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_org_unit_id_isSet = false;
    m_org_unit_id_isValid = false;

    m_user_device_isSet = false;
    m_user_device_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIGoogleChromeManagementV1TelemetryUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1TelemetryUser::fromJsonObject(QJsonObject json) {

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_org_unit_id_isValid = ::OpenAPI::fromJsonValue(m_org_unit_id, json[QString("orgUnitId")]);
    m_org_unit_id_isSet = !json[QString("orgUnitId")].isNull() && m_org_unit_id_isValid;

    m_user_device_isValid = ::OpenAPI::fromJsonValue(m_user_device, json[QString("userDevice")]);
    m_user_device_isSet = !json[QString("userDevice")].isNull() && m_user_device_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("userEmail")]);
    m_user_email_isSet = !json[QString("userEmail")].isNull() && m_user_email_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1TelemetryUser::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_isSet) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_org_unit_id_isSet) {
        obj.insert(QString("orgUnitId"), ::OpenAPI::toJsonValue(m_org_unit_id));
    }
    if (m_user_device.size() > 0) {
        obj.insert(QString("userDevice"), ::OpenAPI::toJsonValue(m_user_device));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("userEmail"), ::OpenAPI::toJsonValue(m_user_email));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1TelemetryUser::getCustomer() const {
    return m_customer;
}
void OAIGoogleChromeManagementV1TelemetryUser::setCustomer(const QString &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryUser::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryUser::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryUser::getName() const {
    return m_name;
}
void OAIGoogleChromeManagementV1TelemetryUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryUser::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryUser::getOrgUnitId() const {
    return m_org_unit_id;
}
void OAIGoogleChromeManagementV1TelemetryUser::setOrgUnitId(const QString &org_unit_id) {
    m_org_unit_id = org_unit_id;
    m_org_unit_id_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryUser::is_org_unit_id_Set() const{
    return m_org_unit_id_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryUser::is_org_unit_id_Valid() const{
    return m_org_unit_id_isValid;
}

QList<OAIGoogleChromeManagementV1TelemetryUserDevice> OAIGoogleChromeManagementV1TelemetryUser::getUserDevice() const {
    return m_user_device;
}
void OAIGoogleChromeManagementV1TelemetryUser::setUserDevice(const QList<OAIGoogleChromeManagementV1TelemetryUserDevice> &user_device) {
    m_user_device = user_device;
    m_user_device_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryUser::is_user_device_Set() const{
    return m_user_device_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryUser::is_user_device_Valid() const{
    return m_user_device_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryUser::getUserEmail() const {
    return m_user_email;
}
void OAIGoogleChromeManagementV1TelemetryUser::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryUser::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryUser::is_user_email_Valid() const{
    return m_user_email_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryUser::getUserId() const {
    return m_user_id;
}
void OAIGoogleChromeManagementV1TelemetryUser::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryUser::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryUser::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIGoogleChromeManagementV1TelemetryUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_device.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1TelemetryUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
