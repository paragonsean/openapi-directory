/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1BrowserVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1BrowserVersion::OAIGoogleChromeManagementV1BrowserVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1BrowserVersion::OAIGoogleChromeManagementV1BrowserVersion() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1BrowserVersion::~OAIGoogleChromeManagementV1BrowserVersion() {}

void OAIGoogleChromeManagementV1BrowserVersion::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_device_os_version_isSet = false;
    m_device_os_version_isValid = false;

    m_system_isSet = false;
    m_system_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIGoogleChromeManagementV1BrowserVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1BrowserVersion::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_device_os_version_isValid = ::OpenAPI::fromJsonValue(m_device_os_version, json[QString("deviceOsVersion")]);
    m_device_os_version_isSet = !json[QString("deviceOsVersion")].isNull() && m_device_os_version_isValid;

    m_system_isValid = ::OpenAPI::fromJsonValue(m_system, json[QString("system")]);
    m_system_isSet = !json[QString("system")].isNull() && m_system_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIGoogleChromeManagementV1BrowserVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1BrowserVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_device_os_version_isSet) {
        obj.insert(QString("deviceOsVersion"), ::OpenAPI::toJsonValue(m_device_os_version));
    }
    if (m_system_isSet) {
        obj.insert(QString("system"), ::OpenAPI::toJsonValue(m_system));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1BrowserVersion::getChannel() const {
    return m_channel;
}
void OAIGoogleChromeManagementV1BrowserVersion::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIGoogleChromeManagementV1BrowserVersion::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIGoogleChromeManagementV1BrowserVersion::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIGoogleChromeManagementV1BrowserVersion::getCount() const {
    return m_count;
}
void OAIGoogleChromeManagementV1BrowserVersion::setCount(const QString &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIGoogleChromeManagementV1BrowserVersion::is_count_Set() const{
    return m_count_isSet;
}

bool OAIGoogleChromeManagementV1BrowserVersion::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIGoogleChromeManagementV1BrowserVersion::getDeviceOsVersion() const {
    return m_device_os_version;
}
void OAIGoogleChromeManagementV1BrowserVersion::setDeviceOsVersion(const QString &device_os_version) {
    m_device_os_version = device_os_version;
    m_device_os_version_isSet = true;
}

bool OAIGoogleChromeManagementV1BrowserVersion::is_device_os_version_Set() const{
    return m_device_os_version_isSet;
}

bool OAIGoogleChromeManagementV1BrowserVersion::is_device_os_version_Valid() const{
    return m_device_os_version_isValid;
}

QString OAIGoogleChromeManagementV1BrowserVersion::getSystem() const {
    return m_system;
}
void OAIGoogleChromeManagementV1BrowserVersion::setSystem(const QString &system) {
    m_system = system;
    m_system_isSet = true;
}

bool OAIGoogleChromeManagementV1BrowserVersion::is_system_Set() const{
    return m_system_isSet;
}

bool OAIGoogleChromeManagementV1BrowserVersion::is_system_Valid() const{
    return m_system_isValid;
}

QString OAIGoogleChromeManagementV1BrowserVersion::getVersion() const {
    return m_version;
}
void OAIGoogleChromeManagementV1BrowserVersion::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGoogleChromeManagementV1BrowserVersion::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGoogleChromeManagementV1BrowserVersion::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIGoogleChromeManagementV1BrowserVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1BrowserVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
