/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleChromeManagementV1OsUpdateStatus.h
 *
 * Contains information regarding the current OS update status. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceOsUpdateStatus](https://chromeenterprise.google/policies/#ReportDeviceOsUpdateStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_OS_REPORT
 */

#ifndef OAIGoogleChromeManagementV1OsUpdateStatus_H
#define OAIGoogleChromeManagementV1OsUpdateStatus_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleChromeManagementV1OsUpdateStatus : public OAIObject {
public:
    OAIGoogleChromeManagementV1OsUpdateStatus();
    OAIGoogleChromeManagementV1OsUpdateStatus(QString json);
    ~OAIGoogleChromeManagementV1OsUpdateStatus() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLastRebootTime() const;
    void setLastRebootTime(const QString &last_reboot_time);
    bool is_last_reboot_time_Set() const;
    bool is_last_reboot_time_Valid() const;

    QString getLastUpdateCheckTime() const;
    void setLastUpdateCheckTime(const QString &last_update_check_time);
    bool is_last_update_check_time_Set() const;
    bool is_last_update_check_time_Valid() const;

    QString getLastUpdateTime() const;
    void setLastUpdateTime(const QString &last_update_time);
    bool is_last_update_time_Set() const;
    bool is_last_update_time_Valid() const;

    QString getNewPlatformVersion() const;
    void setNewPlatformVersion(const QString &new_platform_version);
    bool is_new_platform_version_Set() const;
    bool is_new_platform_version_Valid() const;

    QString getNewRequestedPlatformVersion() const;
    void setNewRequestedPlatformVersion(const QString &new_requested_platform_version);
    bool is_new_requested_platform_version_Set() const;
    bool is_new_requested_platform_version_Valid() const;

    QString getUpdateState() const;
    void setUpdateState(const QString &update_state);
    bool is_update_state_Set() const;
    bool is_update_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_last_reboot_time;
    bool m_last_reboot_time_isSet;
    bool m_last_reboot_time_isValid;

    QString m_last_update_check_time;
    bool m_last_update_check_time_isSet;
    bool m_last_update_check_time_isValid;

    QString m_last_update_time;
    bool m_last_update_time_isSet;
    bool m_last_update_time_isValid;

    QString m_new_platform_version;
    bool m_new_platform_version_isSet;
    bool m_new_platform_version_isValid;

    QString m_new_requested_platform_version;
    bool m_new_requested_platform_version_isSet;
    bool m_new_requested_platform_version_isValid;

    QString m_update_state;
    bool m_update_state_isSet;
    bool m_update_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleChromeManagementV1OsUpdateStatus)

#endif // OAIGoogleChromeManagementV1OsUpdateStatus_H
