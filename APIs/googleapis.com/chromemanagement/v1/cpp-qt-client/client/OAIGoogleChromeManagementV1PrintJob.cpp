/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1PrintJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1PrintJob::OAIGoogleChromeManagementV1PrintJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1PrintJob::OAIGoogleChromeManagementV1PrintJob() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1PrintJob::~OAIGoogleChromeManagementV1PrintJob() {}

void OAIGoogleChromeManagementV1PrintJob::initializeModel() {

    m_color_mode_isSet = false;
    m_color_mode_isValid = false;

    m_complete_time_isSet = false;
    m_complete_time_isValid = false;

    m_copy_count_isSet = false;
    m_copy_count_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_document_page_count_isSet = false;
    m_document_page_count_isValid = false;

    m_duplex_mode_isSet = false;
    m_duplex_mode_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_printer_isSet = false;
    m_printer_isValid = false;

    m_printer_id_isSet = false;
    m_printer_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIGoogleChromeManagementV1PrintJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1PrintJob::fromJsonObject(QJsonObject json) {

    m_color_mode_isValid = ::OpenAPI::fromJsonValue(m_color_mode, json[QString("colorMode")]);
    m_color_mode_isSet = !json[QString("colorMode")].isNull() && m_color_mode_isValid;

    m_complete_time_isValid = ::OpenAPI::fromJsonValue(m_complete_time, json[QString("completeTime")]);
    m_complete_time_isSet = !json[QString("completeTime")].isNull() && m_complete_time_isValid;

    m_copy_count_isValid = ::OpenAPI::fromJsonValue(m_copy_count, json[QString("copyCount")]);
    m_copy_count_isSet = !json[QString("copyCount")].isNull() && m_copy_count_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_document_page_count_isValid = ::OpenAPI::fromJsonValue(m_document_page_count, json[QString("documentPageCount")]);
    m_document_page_count_isSet = !json[QString("documentPageCount")].isNull() && m_document_page_count_isValid;

    m_duplex_mode_isValid = ::OpenAPI::fromJsonValue(m_duplex_mode, json[QString("duplexMode")]);
    m_duplex_mode_isSet = !json[QString("duplexMode")].isNull() && m_duplex_mode_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_printer_isValid = ::OpenAPI::fromJsonValue(m_printer, json[QString("printer")]);
    m_printer_isSet = !json[QString("printer")].isNull() && m_printer_isValid;

    m_printer_id_isValid = ::OpenAPI::fromJsonValue(m_printer_id, json[QString("printerId")]);
    m_printer_id_isSet = !json[QString("printerId")].isNull() && m_printer_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("userEmail")]);
    m_user_email_isSet = !json[QString("userEmail")].isNull() && m_user_email_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIGoogleChromeManagementV1PrintJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1PrintJob::asJsonObject() const {
    QJsonObject obj;
    if (m_color_mode_isSet) {
        obj.insert(QString("colorMode"), ::OpenAPI::toJsonValue(m_color_mode));
    }
    if (m_complete_time_isSet) {
        obj.insert(QString("completeTime"), ::OpenAPI::toJsonValue(m_complete_time));
    }
    if (m_copy_count_isSet) {
        obj.insert(QString("copyCount"), ::OpenAPI::toJsonValue(m_copy_count));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_document_page_count_isSet) {
        obj.insert(QString("documentPageCount"), ::OpenAPI::toJsonValue(m_document_page_count));
    }
    if (m_duplex_mode_isSet) {
        obj.insert(QString("duplexMode"), ::OpenAPI::toJsonValue(m_duplex_mode));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_printer_isSet) {
        obj.insert(QString("printer"), ::OpenAPI::toJsonValue(m_printer));
    }
    if (m_printer_id_isSet) {
        obj.insert(QString("printerId"), ::OpenAPI::toJsonValue(m_printer_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("userEmail"), ::OpenAPI::toJsonValue(m_user_email));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1PrintJob::getColorMode() const {
    return m_color_mode;
}
void OAIGoogleChromeManagementV1PrintJob::setColorMode(const QString &color_mode) {
    m_color_mode = color_mode;
    m_color_mode_isSet = true;
}

bool OAIGoogleChromeManagementV1PrintJob::is_color_mode_Set() const{
    return m_color_mode_isSet;
}

bool OAIGoogleChromeManagementV1PrintJob::is_color_mode_Valid() const{
    return m_color_mode_isValid;
}

QString OAIGoogleChromeManagementV1PrintJob::getCompleteTime() const {
    return m_complete_time;
}
void OAIGoogleChromeManagementV1PrintJob::setCompleteTime(const QString &complete_time) {
    m_complete_time = complete_time;
    m_complete_time_isSet = true;
}

bool OAIGoogleChromeManagementV1PrintJob::is_complete_time_Set() const{
    return m_complete_time_isSet;
}

bool OAIGoogleChromeManagementV1PrintJob::is_complete_time_Valid() const{
    return m_complete_time_isValid;
}

qint32 OAIGoogleChromeManagementV1PrintJob::getCopyCount() const {
    return m_copy_count;
}
void OAIGoogleChromeManagementV1PrintJob::setCopyCount(const qint32 &copy_count) {
    m_copy_count = copy_count;
    m_copy_count_isSet = true;
}

bool OAIGoogleChromeManagementV1PrintJob::is_copy_count_Set() const{
    return m_copy_count_isSet;
}

bool OAIGoogleChromeManagementV1PrintJob::is_copy_count_Valid() const{
    return m_copy_count_isValid;
}

QString OAIGoogleChromeManagementV1PrintJob::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleChromeManagementV1PrintJob::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleChromeManagementV1PrintJob::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleChromeManagementV1PrintJob::is_create_time_Valid() const{
    return m_create_time_isValid;
}

qint32 OAIGoogleChromeManagementV1PrintJob::getDocumentPageCount() const {
    return m_document_page_count;
}
void OAIGoogleChromeManagementV1PrintJob::setDocumentPageCount(const qint32 &document_page_count) {
    m_document_page_count = document_page_count;
    m_document_page_count_isSet = true;
}

bool OAIGoogleChromeManagementV1PrintJob::is_document_page_count_Set() const{
    return m_document_page_count_isSet;
}

bool OAIGoogleChromeManagementV1PrintJob::is_document_page_count_Valid() const{
    return m_document_page_count_isValid;
}

QString OAIGoogleChromeManagementV1PrintJob::getDuplexMode() const {
    return m_duplex_mode;
}
void OAIGoogleChromeManagementV1PrintJob::setDuplexMode(const QString &duplex_mode) {
    m_duplex_mode = duplex_mode;
    m_duplex_mode_isSet = true;
}

bool OAIGoogleChromeManagementV1PrintJob::is_duplex_mode_Set() const{
    return m_duplex_mode_isSet;
}

bool OAIGoogleChromeManagementV1PrintJob::is_duplex_mode_Valid() const{
    return m_duplex_mode_isValid;
}

QString OAIGoogleChromeManagementV1PrintJob::getId() const {
    return m_id;
}
void OAIGoogleChromeManagementV1PrintJob::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGoogleChromeManagementV1PrintJob::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGoogleChromeManagementV1PrintJob::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGoogleChromeManagementV1PrintJob::getPrinter() const {
    return m_printer;
}
void OAIGoogleChromeManagementV1PrintJob::setPrinter(const QString &printer) {
    m_printer = printer;
    m_printer_isSet = true;
}

bool OAIGoogleChromeManagementV1PrintJob::is_printer_Set() const{
    return m_printer_isSet;
}

bool OAIGoogleChromeManagementV1PrintJob::is_printer_Valid() const{
    return m_printer_isValid;
}

QString OAIGoogleChromeManagementV1PrintJob::getPrinterId() const {
    return m_printer_id;
}
void OAIGoogleChromeManagementV1PrintJob::setPrinterId(const QString &printer_id) {
    m_printer_id = printer_id;
    m_printer_id_isSet = true;
}

bool OAIGoogleChromeManagementV1PrintJob::is_printer_id_Set() const{
    return m_printer_id_isSet;
}

bool OAIGoogleChromeManagementV1PrintJob::is_printer_id_Valid() const{
    return m_printer_id_isValid;
}

QString OAIGoogleChromeManagementV1PrintJob::getState() const {
    return m_state;
}
void OAIGoogleChromeManagementV1PrintJob::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleChromeManagementV1PrintJob::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleChromeManagementV1PrintJob::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIGoogleChromeManagementV1PrintJob::getTitle() const {
    return m_title;
}
void OAIGoogleChromeManagementV1PrintJob::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGoogleChromeManagementV1PrintJob::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGoogleChromeManagementV1PrintJob::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIGoogleChromeManagementV1PrintJob::getUserEmail() const {
    return m_user_email;
}
void OAIGoogleChromeManagementV1PrintJob::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAIGoogleChromeManagementV1PrintJob::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAIGoogleChromeManagementV1PrintJob::is_user_email_Valid() const{
    return m_user_email_isValid;
}

QString OAIGoogleChromeManagementV1PrintJob::getUserId() const {
    return m_user_id;
}
void OAIGoogleChromeManagementV1PrintJob::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIGoogleChromeManagementV1PrintJob::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIGoogleChromeManagementV1PrintJob::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIGoogleChromeManagementV1PrintJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_page_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplex_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_printer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_printer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1PrintJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
