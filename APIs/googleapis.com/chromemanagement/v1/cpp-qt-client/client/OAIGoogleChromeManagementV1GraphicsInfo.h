/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleChromeManagementV1GraphicsInfo.h
 *
 * Information of the graphics subsystem. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceGraphicsStatus](https://chromeenterprise.google/policies/#ReportDeviceGraphicsStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_GRAPHICS_INFO
 */

#ifndef OAIGoogleChromeManagementV1GraphicsInfo_H
#define OAIGoogleChromeManagementV1GraphicsInfo_H

#include <QJsonObject>

#include "OAIGoogleChromeManagementV1DisplayDevice.h"
#include "OAIGoogleChromeManagementV1GraphicsAdapterInfo.h"
#include "OAIGoogleChromeManagementV1TouchScreenInfo.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleChromeManagementV1GraphicsAdapterInfo;
class OAIGoogleChromeManagementV1DisplayDevice;
class OAIGoogleChromeManagementV1TouchScreenInfo;

class OAIGoogleChromeManagementV1GraphicsInfo : public OAIObject {
public:
    OAIGoogleChromeManagementV1GraphicsInfo();
    OAIGoogleChromeManagementV1GraphicsInfo(QString json);
    ~OAIGoogleChromeManagementV1GraphicsInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGoogleChromeManagementV1GraphicsAdapterInfo getAdapterInfo() const;
    void setAdapterInfo(const OAIGoogleChromeManagementV1GraphicsAdapterInfo &adapter_info);
    bool is_adapter_info_Set() const;
    bool is_adapter_info_Valid() const;

    QList<OAIGoogleChromeManagementV1DisplayDevice> getDisplayDevices() const;
    void setDisplayDevices(const QList<OAIGoogleChromeManagementV1DisplayDevice> &display_devices);
    bool is_display_devices_Set() const;
    bool is_display_devices_Valid() const;

    bool isEprivacySupported() const;
    void setEprivacySupported(const bool &eprivacy_supported);
    bool is_eprivacy_supported_Set() const;
    bool is_eprivacy_supported_Valid() const;

    OAIGoogleChromeManagementV1TouchScreenInfo getTouchScreenInfo() const;
    void setTouchScreenInfo(const OAIGoogleChromeManagementV1TouchScreenInfo &touch_screen_info);
    bool is_touch_screen_info_Set() const;
    bool is_touch_screen_info_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGoogleChromeManagementV1GraphicsAdapterInfo m_adapter_info;
    bool m_adapter_info_isSet;
    bool m_adapter_info_isValid;

    QList<OAIGoogleChromeManagementV1DisplayDevice> m_display_devices;
    bool m_display_devices_isSet;
    bool m_display_devices_isValid;

    bool m_eprivacy_supported;
    bool m_eprivacy_supported_isSet;
    bool m_eprivacy_supported_isValid;

    OAIGoogleChromeManagementV1TouchScreenInfo m_touch_screen_info;
    bool m_touch_screen_info_isSet;
    bool m_touch_screen_info_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleChromeManagementV1GraphicsInfo)

#endif // OAIGoogleChromeManagementV1GraphicsInfo_H
