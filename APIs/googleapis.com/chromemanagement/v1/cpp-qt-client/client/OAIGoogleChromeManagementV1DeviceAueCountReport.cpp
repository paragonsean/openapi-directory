/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1DeviceAueCountReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1DeviceAueCountReport::OAIGoogleChromeManagementV1DeviceAueCountReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1DeviceAueCountReport::OAIGoogleChromeManagementV1DeviceAueCountReport() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1DeviceAueCountReport::~OAIGoogleChromeManagementV1DeviceAueCountReport() {}

void OAIGoogleChromeManagementV1DeviceAueCountReport::initializeModel() {

    m_aue_month_isSet = false;
    m_aue_month_isValid = false;

    m_aue_year_isSet = false;
    m_aue_year_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_expired_isSet = false;
    m_expired_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;
}

void OAIGoogleChromeManagementV1DeviceAueCountReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1DeviceAueCountReport::fromJsonObject(QJsonObject json) {

    m_aue_month_isValid = ::OpenAPI::fromJsonValue(m_aue_month, json[QString("aueMonth")]);
    m_aue_month_isSet = !json[QString("aueMonth")].isNull() && m_aue_month_isValid;

    m_aue_year_isValid = ::OpenAPI::fromJsonValue(m_aue_year, json[QString("aueYear")]);
    m_aue_year_isSet = !json[QString("aueYear")].isNull() && m_aue_year_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_expired_isValid = ::OpenAPI::fromJsonValue(m_expired, json[QString("expired")]);
    m_expired_isSet = !json[QString("expired")].isNull() && m_expired_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;
}

QString OAIGoogleChromeManagementV1DeviceAueCountReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1DeviceAueCountReport::asJsonObject() const {
    QJsonObject obj;
    if (m_aue_month_isSet) {
        obj.insert(QString("aueMonth"), ::OpenAPI::toJsonValue(m_aue_month));
    }
    if (m_aue_year_isSet) {
        obj.insert(QString("aueYear"), ::OpenAPI::toJsonValue(m_aue_year));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_expired_isSet) {
        obj.insert(QString("expired"), ::OpenAPI::toJsonValue(m_expired));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1DeviceAueCountReport::getAueMonth() const {
    return m_aue_month;
}
void OAIGoogleChromeManagementV1DeviceAueCountReport::setAueMonth(const QString &aue_month) {
    m_aue_month = aue_month;
    m_aue_month_isSet = true;
}

bool OAIGoogleChromeManagementV1DeviceAueCountReport::is_aue_month_Set() const{
    return m_aue_month_isSet;
}

bool OAIGoogleChromeManagementV1DeviceAueCountReport::is_aue_month_Valid() const{
    return m_aue_month_isValid;
}

QString OAIGoogleChromeManagementV1DeviceAueCountReport::getAueYear() const {
    return m_aue_year;
}
void OAIGoogleChromeManagementV1DeviceAueCountReport::setAueYear(const QString &aue_year) {
    m_aue_year = aue_year;
    m_aue_year_isSet = true;
}

bool OAIGoogleChromeManagementV1DeviceAueCountReport::is_aue_year_Set() const{
    return m_aue_year_isSet;
}

bool OAIGoogleChromeManagementV1DeviceAueCountReport::is_aue_year_Valid() const{
    return m_aue_year_isValid;
}

QString OAIGoogleChromeManagementV1DeviceAueCountReport::getCount() const {
    return m_count;
}
void OAIGoogleChromeManagementV1DeviceAueCountReport::setCount(const QString &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIGoogleChromeManagementV1DeviceAueCountReport::is_count_Set() const{
    return m_count_isSet;
}

bool OAIGoogleChromeManagementV1DeviceAueCountReport::is_count_Valid() const{
    return m_count_isValid;
}

bool OAIGoogleChromeManagementV1DeviceAueCountReport::isExpired() const {
    return m_expired;
}
void OAIGoogleChromeManagementV1DeviceAueCountReport::setExpired(const bool &expired) {
    m_expired = expired;
    m_expired_isSet = true;
}

bool OAIGoogleChromeManagementV1DeviceAueCountReport::is_expired_Set() const{
    return m_expired_isSet;
}

bool OAIGoogleChromeManagementV1DeviceAueCountReport::is_expired_Valid() const{
    return m_expired_isValid;
}

QString OAIGoogleChromeManagementV1DeviceAueCountReport::getModel() const {
    return m_model;
}
void OAIGoogleChromeManagementV1DeviceAueCountReport::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIGoogleChromeManagementV1DeviceAueCountReport::is_model_Set() const{
    return m_model_isSet;
}

bool OAIGoogleChromeManagementV1DeviceAueCountReport::is_model_Valid() const{
    return m_model_isValid;
}

bool OAIGoogleChromeManagementV1DeviceAueCountReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aue_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aue_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1DeviceAueCountReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
