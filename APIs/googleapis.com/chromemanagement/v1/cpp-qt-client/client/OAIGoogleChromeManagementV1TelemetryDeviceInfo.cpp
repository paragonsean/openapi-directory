/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1TelemetryDeviceInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1TelemetryDeviceInfo::OAIGoogleChromeManagementV1TelemetryDeviceInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1TelemetryDeviceInfo::OAIGoogleChromeManagementV1TelemetryDeviceInfo() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1TelemetryDeviceInfo::~OAIGoogleChromeManagementV1TelemetryDeviceInfo() {}

void OAIGoogleChromeManagementV1TelemetryDeviceInfo::initializeModel() {

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_org_unit_id_isSet = false;
    m_org_unit_id_isValid = false;
}

void OAIGoogleChromeManagementV1TelemetryDeviceInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1TelemetryDeviceInfo::fromJsonObject(QJsonObject json) {

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_org_unit_id_isValid = ::OpenAPI::fromJsonValue(m_org_unit_id, json[QString("orgUnitId")]);
    m_org_unit_id_isSet = !json[QString("orgUnitId")].isNull() && m_org_unit_id_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryDeviceInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1TelemetryDeviceInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_org_unit_id_isSet) {
        obj.insert(QString("orgUnitId"), ::OpenAPI::toJsonValue(m_org_unit_id));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1TelemetryDeviceInfo::getDeviceId() const {
    return m_device_id;
}
void OAIGoogleChromeManagementV1TelemetryDeviceInfo::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDeviceInfo::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDeviceInfo::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryDeviceInfo::getOrgUnitId() const {
    return m_org_unit_id;
}
void OAIGoogleChromeManagementV1TelemetryDeviceInfo::setOrgUnitId(const QString &org_unit_id) {
    m_org_unit_id = org_unit_id;
    m_org_unit_id_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDeviceInfo::is_org_unit_id_Set() const{
    return m_org_unit_id_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDeviceInfo::is_org_unit_id_Valid() const{
    return m_org_unit_id_isValid;
}

bool OAIGoogleChromeManagementV1TelemetryDeviceInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1TelemetryDeviceInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
