/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1CpuStatusReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1CpuStatusReport::OAIGoogleChromeManagementV1CpuStatusReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1CpuStatusReport::OAIGoogleChromeManagementV1CpuStatusReport() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1CpuStatusReport::~OAIGoogleChromeManagementV1CpuStatusReport() {}

void OAIGoogleChromeManagementV1CpuStatusReport::initializeModel() {

    m_cpu_temperature_info_isSet = false;
    m_cpu_temperature_info_isValid = false;

    m_cpu_utilization_pct_isSet = false;
    m_cpu_utilization_pct_isValid = false;

    m_report_time_isSet = false;
    m_report_time_isValid = false;

    m_sample_frequency_isSet = false;
    m_sample_frequency_isValid = false;
}

void OAIGoogleChromeManagementV1CpuStatusReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1CpuStatusReport::fromJsonObject(QJsonObject json) {

    m_cpu_temperature_info_isValid = ::OpenAPI::fromJsonValue(m_cpu_temperature_info, json[QString("cpuTemperatureInfo")]);
    m_cpu_temperature_info_isSet = !json[QString("cpuTemperatureInfo")].isNull() && m_cpu_temperature_info_isValid;

    m_cpu_utilization_pct_isValid = ::OpenAPI::fromJsonValue(m_cpu_utilization_pct, json[QString("cpuUtilizationPct")]);
    m_cpu_utilization_pct_isSet = !json[QString("cpuUtilizationPct")].isNull() && m_cpu_utilization_pct_isValid;

    m_report_time_isValid = ::OpenAPI::fromJsonValue(m_report_time, json[QString("reportTime")]);
    m_report_time_isSet = !json[QString("reportTime")].isNull() && m_report_time_isValid;

    m_sample_frequency_isValid = ::OpenAPI::fromJsonValue(m_sample_frequency, json[QString("sampleFrequency")]);
    m_sample_frequency_isSet = !json[QString("sampleFrequency")].isNull() && m_sample_frequency_isValid;
}

QString OAIGoogleChromeManagementV1CpuStatusReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1CpuStatusReport::asJsonObject() const {
    QJsonObject obj;
    if (m_cpu_temperature_info.size() > 0) {
        obj.insert(QString("cpuTemperatureInfo"), ::OpenAPI::toJsonValue(m_cpu_temperature_info));
    }
    if (m_cpu_utilization_pct_isSet) {
        obj.insert(QString("cpuUtilizationPct"), ::OpenAPI::toJsonValue(m_cpu_utilization_pct));
    }
    if (m_report_time_isSet) {
        obj.insert(QString("reportTime"), ::OpenAPI::toJsonValue(m_report_time));
    }
    if (m_sample_frequency_isSet) {
        obj.insert(QString("sampleFrequency"), ::OpenAPI::toJsonValue(m_sample_frequency));
    }
    return obj;
}

QList<OAIGoogleChromeManagementV1CpuTemperatureInfo> OAIGoogleChromeManagementV1CpuStatusReport::getCpuTemperatureInfo() const {
    return m_cpu_temperature_info;
}
void OAIGoogleChromeManagementV1CpuStatusReport::setCpuTemperatureInfo(const QList<OAIGoogleChromeManagementV1CpuTemperatureInfo> &cpu_temperature_info) {
    m_cpu_temperature_info = cpu_temperature_info;
    m_cpu_temperature_info_isSet = true;
}

bool OAIGoogleChromeManagementV1CpuStatusReport::is_cpu_temperature_info_Set() const{
    return m_cpu_temperature_info_isSet;
}

bool OAIGoogleChromeManagementV1CpuStatusReport::is_cpu_temperature_info_Valid() const{
    return m_cpu_temperature_info_isValid;
}

qint32 OAIGoogleChromeManagementV1CpuStatusReport::getCpuUtilizationPct() const {
    return m_cpu_utilization_pct;
}
void OAIGoogleChromeManagementV1CpuStatusReport::setCpuUtilizationPct(const qint32 &cpu_utilization_pct) {
    m_cpu_utilization_pct = cpu_utilization_pct;
    m_cpu_utilization_pct_isSet = true;
}

bool OAIGoogleChromeManagementV1CpuStatusReport::is_cpu_utilization_pct_Set() const{
    return m_cpu_utilization_pct_isSet;
}

bool OAIGoogleChromeManagementV1CpuStatusReport::is_cpu_utilization_pct_Valid() const{
    return m_cpu_utilization_pct_isValid;
}

QString OAIGoogleChromeManagementV1CpuStatusReport::getReportTime() const {
    return m_report_time;
}
void OAIGoogleChromeManagementV1CpuStatusReport::setReportTime(const QString &report_time) {
    m_report_time = report_time;
    m_report_time_isSet = true;
}

bool OAIGoogleChromeManagementV1CpuStatusReport::is_report_time_Set() const{
    return m_report_time_isSet;
}

bool OAIGoogleChromeManagementV1CpuStatusReport::is_report_time_Valid() const{
    return m_report_time_isValid;
}

QString OAIGoogleChromeManagementV1CpuStatusReport::getSampleFrequency() const {
    return m_sample_frequency;
}
void OAIGoogleChromeManagementV1CpuStatusReport::setSampleFrequency(const QString &sample_frequency) {
    m_sample_frequency = sample_frequency;
    m_sample_frequency_isSet = true;
}

bool OAIGoogleChromeManagementV1CpuStatusReport::is_sample_frequency_Set() const{
    return m_sample_frequency_isSet;
}

bool OAIGoogleChromeManagementV1CpuStatusReport::is_sample_frequency_Valid() const{
    return m_sample_frequency_isValid;
}

bool OAIGoogleChromeManagementV1CpuStatusReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpu_temperature_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_utilization_pct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1CpuStatusReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
