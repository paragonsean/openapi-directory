/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1GraphicsInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1GraphicsInfo::OAIGoogleChromeManagementV1GraphicsInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1GraphicsInfo::OAIGoogleChromeManagementV1GraphicsInfo() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1GraphicsInfo::~OAIGoogleChromeManagementV1GraphicsInfo() {}

void OAIGoogleChromeManagementV1GraphicsInfo::initializeModel() {

    m_adapter_info_isSet = false;
    m_adapter_info_isValid = false;

    m_display_devices_isSet = false;
    m_display_devices_isValid = false;

    m_eprivacy_supported_isSet = false;
    m_eprivacy_supported_isValid = false;

    m_touch_screen_info_isSet = false;
    m_touch_screen_info_isValid = false;
}

void OAIGoogleChromeManagementV1GraphicsInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1GraphicsInfo::fromJsonObject(QJsonObject json) {

    m_adapter_info_isValid = ::OpenAPI::fromJsonValue(m_adapter_info, json[QString("adapterInfo")]);
    m_adapter_info_isSet = !json[QString("adapterInfo")].isNull() && m_adapter_info_isValid;

    m_display_devices_isValid = ::OpenAPI::fromJsonValue(m_display_devices, json[QString("displayDevices")]);
    m_display_devices_isSet = !json[QString("displayDevices")].isNull() && m_display_devices_isValid;

    m_eprivacy_supported_isValid = ::OpenAPI::fromJsonValue(m_eprivacy_supported, json[QString("eprivacySupported")]);
    m_eprivacy_supported_isSet = !json[QString("eprivacySupported")].isNull() && m_eprivacy_supported_isValid;

    m_touch_screen_info_isValid = ::OpenAPI::fromJsonValue(m_touch_screen_info, json[QString("touchScreenInfo")]);
    m_touch_screen_info_isSet = !json[QString("touchScreenInfo")].isNull() && m_touch_screen_info_isValid;
}

QString OAIGoogleChromeManagementV1GraphicsInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1GraphicsInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_adapter_info.isSet()) {
        obj.insert(QString("adapterInfo"), ::OpenAPI::toJsonValue(m_adapter_info));
    }
    if (m_display_devices.size() > 0) {
        obj.insert(QString("displayDevices"), ::OpenAPI::toJsonValue(m_display_devices));
    }
    if (m_eprivacy_supported_isSet) {
        obj.insert(QString("eprivacySupported"), ::OpenAPI::toJsonValue(m_eprivacy_supported));
    }
    if (m_touch_screen_info.isSet()) {
        obj.insert(QString("touchScreenInfo"), ::OpenAPI::toJsonValue(m_touch_screen_info));
    }
    return obj;
}

OAIGoogleChromeManagementV1GraphicsAdapterInfo OAIGoogleChromeManagementV1GraphicsInfo::getAdapterInfo() const {
    return m_adapter_info;
}
void OAIGoogleChromeManagementV1GraphicsInfo::setAdapterInfo(const OAIGoogleChromeManagementV1GraphicsAdapterInfo &adapter_info) {
    m_adapter_info = adapter_info;
    m_adapter_info_isSet = true;
}

bool OAIGoogleChromeManagementV1GraphicsInfo::is_adapter_info_Set() const{
    return m_adapter_info_isSet;
}

bool OAIGoogleChromeManagementV1GraphicsInfo::is_adapter_info_Valid() const{
    return m_adapter_info_isValid;
}

QList<OAIGoogleChromeManagementV1DisplayDevice> OAIGoogleChromeManagementV1GraphicsInfo::getDisplayDevices() const {
    return m_display_devices;
}
void OAIGoogleChromeManagementV1GraphicsInfo::setDisplayDevices(const QList<OAIGoogleChromeManagementV1DisplayDevice> &display_devices) {
    m_display_devices = display_devices;
    m_display_devices_isSet = true;
}

bool OAIGoogleChromeManagementV1GraphicsInfo::is_display_devices_Set() const{
    return m_display_devices_isSet;
}

bool OAIGoogleChromeManagementV1GraphicsInfo::is_display_devices_Valid() const{
    return m_display_devices_isValid;
}

bool OAIGoogleChromeManagementV1GraphicsInfo::isEprivacySupported() const {
    return m_eprivacy_supported;
}
void OAIGoogleChromeManagementV1GraphicsInfo::setEprivacySupported(const bool &eprivacy_supported) {
    m_eprivacy_supported = eprivacy_supported;
    m_eprivacy_supported_isSet = true;
}

bool OAIGoogleChromeManagementV1GraphicsInfo::is_eprivacy_supported_Set() const{
    return m_eprivacy_supported_isSet;
}

bool OAIGoogleChromeManagementV1GraphicsInfo::is_eprivacy_supported_Valid() const{
    return m_eprivacy_supported_isValid;
}

OAIGoogleChromeManagementV1TouchScreenInfo OAIGoogleChromeManagementV1GraphicsInfo::getTouchScreenInfo() const {
    return m_touch_screen_info;
}
void OAIGoogleChromeManagementV1GraphicsInfo::setTouchScreenInfo(const OAIGoogleChromeManagementV1TouchScreenInfo &touch_screen_info) {
    m_touch_screen_info = touch_screen_info;
    m_touch_screen_info_isSet = true;
}

bool OAIGoogleChromeManagementV1GraphicsInfo::is_touch_screen_info_Set() const{
    return m_touch_screen_info_isSet;
}

bool OAIGoogleChromeManagementV1GraphicsInfo::is_touch_screen_info_Valid() const{
    return m_touch_screen_info_isValid;
}

bool OAIGoogleChromeManagementV1GraphicsInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adapter_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_devices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_eprivacy_supported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_touch_screen_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1GraphicsInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
