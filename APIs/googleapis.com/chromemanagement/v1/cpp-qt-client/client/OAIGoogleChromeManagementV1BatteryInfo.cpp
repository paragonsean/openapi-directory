/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1BatteryInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1BatteryInfo::OAIGoogleChromeManagementV1BatteryInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1BatteryInfo::OAIGoogleChromeManagementV1BatteryInfo() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1BatteryInfo::~OAIGoogleChromeManagementV1BatteryInfo() {}

void OAIGoogleChromeManagementV1BatteryInfo::initializeModel() {

    m_design_capacity_isSet = false;
    m_design_capacity_isValid = false;

    m_design_min_voltage_isSet = false;
    m_design_min_voltage_isValid = false;

    m_manufacture_date_isSet = false;
    m_manufacture_date_isValid = false;

    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_technology_isSet = false;
    m_technology_isValid = false;
}

void OAIGoogleChromeManagementV1BatteryInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1BatteryInfo::fromJsonObject(QJsonObject json) {

    m_design_capacity_isValid = ::OpenAPI::fromJsonValue(m_design_capacity, json[QString("designCapacity")]);
    m_design_capacity_isSet = !json[QString("designCapacity")].isNull() && m_design_capacity_isValid;

    m_design_min_voltage_isValid = ::OpenAPI::fromJsonValue(m_design_min_voltage, json[QString("designMinVoltage")]);
    m_design_min_voltage_isSet = !json[QString("designMinVoltage")].isNull() && m_design_min_voltage_isValid;

    m_manufacture_date_isValid = ::OpenAPI::fromJsonValue(m_manufacture_date, json[QString("manufactureDate")]);
    m_manufacture_date_isSet = !json[QString("manufactureDate")].isNull() && m_manufacture_date_isValid;

    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_manufacturer, json[QString("manufacturer")]);
    m_manufacturer_isSet = !json[QString("manufacturer")].isNull() && m_manufacturer_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_technology_isValid = ::OpenAPI::fromJsonValue(m_technology, json[QString("technology")]);
    m_technology_isSet = !json[QString("technology")].isNull() && m_technology_isValid;
}

QString OAIGoogleChromeManagementV1BatteryInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1BatteryInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_design_capacity_isSet) {
        obj.insert(QString("designCapacity"), ::OpenAPI::toJsonValue(m_design_capacity));
    }
    if (m_design_min_voltage_isSet) {
        obj.insert(QString("designMinVoltage"), ::OpenAPI::toJsonValue(m_design_min_voltage));
    }
    if (m_manufacture_date.isSet()) {
        obj.insert(QString("manufactureDate"), ::OpenAPI::toJsonValue(m_manufacture_date));
    }
    if (m_manufacturer_isSet) {
        obj.insert(QString("manufacturer"), ::OpenAPI::toJsonValue(m_manufacturer));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_technology_isSet) {
        obj.insert(QString("technology"), ::OpenAPI::toJsonValue(m_technology));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1BatteryInfo::getDesignCapacity() const {
    return m_design_capacity;
}
void OAIGoogleChromeManagementV1BatteryInfo::setDesignCapacity(const QString &design_capacity) {
    m_design_capacity = design_capacity;
    m_design_capacity_isSet = true;
}

bool OAIGoogleChromeManagementV1BatteryInfo::is_design_capacity_Set() const{
    return m_design_capacity_isSet;
}

bool OAIGoogleChromeManagementV1BatteryInfo::is_design_capacity_Valid() const{
    return m_design_capacity_isValid;
}

qint32 OAIGoogleChromeManagementV1BatteryInfo::getDesignMinVoltage() const {
    return m_design_min_voltage;
}
void OAIGoogleChromeManagementV1BatteryInfo::setDesignMinVoltage(const qint32 &design_min_voltage) {
    m_design_min_voltage = design_min_voltage;
    m_design_min_voltage_isSet = true;
}

bool OAIGoogleChromeManagementV1BatteryInfo::is_design_min_voltage_Set() const{
    return m_design_min_voltage_isSet;
}

bool OAIGoogleChromeManagementV1BatteryInfo::is_design_min_voltage_Valid() const{
    return m_design_min_voltage_isValid;
}

OAIGoogleTypeDate OAIGoogleChromeManagementV1BatteryInfo::getManufactureDate() const {
    return m_manufacture_date;
}
void OAIGoogleChromeManagementV1BatteryInfo::setManufactureDate(const OAIGoogleTypeDate &manufacture_date) {
    m_manufacture_date = manufacture_date;
    m_manufacture_date_isSet = true;
}

bool OAIGoogleChromeManagementV1BatteryInfo::is_manufacture_date_Set() const{
    return m_manufacture_date_isSet;
}

bool OAIGoogleChromeManagementV1BatteryInfo::is_manufacture_date_Valid() const{
    return m_manufacture_date_isValid;
}

QString OAIGoogleChromeManagementV1BatteryInfo::getManufacturer() const {
    return m_manufacturer;
}
void OAIGoogleChromeManagementV1BatteryInfo::setManufacturer(const QString &manufacturer) {
    m_manufacturer = manufacturer;
    m_manufacturer_isSet = true;
}

bool OAIGoogleChromeManagementV1BatteryInfo::is_manufacturer_Set() const{
    return m_manufacturer_isSet;
}

bool OAIGoogleChromeManagementV1BatteryInfo::is_manufacturer_Valid() const{
    return m_manufacturer_isValid;
}

QString OAIGoogleChromeManagementV1BatteryInfo::getSerialNumber() const {
    return m_serial_number;
}
void OAIGoogleChromeManagementV1BatteryInfo::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIGoogleChromeManagementV1BatteryInfo::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIGoogleChromeManagementV1BatteryInfo::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAIGoogleChromeManagementV1BatteryInfo::getTechnology() const {
    return m_technology;
}
void OAIGoogleChromeManagementV1BatteryInfo::setTechnology(const QString &technology) {
    m_technology = technology;
    m_technology_isSet = true;
}

bool OAIGoogleChromeManagementV1BatteryInfo::is_technology_Set() const{
    return m_technology_isSet;
}

bool OAIGoogleChromeManagementV1BatteryInfo::is_technology_Valid() const{
    return m_technology_isValid;
}

bool OAIGoogleChromeManagementV1BatteryInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_design_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_design_min_voltage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacture_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_technology_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1BatteryInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
