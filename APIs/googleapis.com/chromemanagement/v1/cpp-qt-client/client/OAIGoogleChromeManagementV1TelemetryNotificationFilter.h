/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleChromeManagementV1TelemetryNotificationFilter.h
 *
 * Configures how the telemetry data should be filtered.
 */

#ifndef OAIGoogleChromeManagementV1TelemetryNotificationFilter_H
#define OAIGoogleChromeManagementV1TelemetryNotificationFilter_H

#include <QJsonObject>

#include "OAIGoogleChromeManagementV1TelemetryEventNotificationFilter.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleChromeManagementV1TelemetryEventNotificationFilter;

class OAIGoogleChromeManagementV1TelemetryNotificationFilter : public OAIObject {
public:
    OAIGoogleChromeManagementV1TelemetryNotificationFilter();
    OAIGoogleChromeManagementV1TelemetryNotificationFilter(QString json);
    ~OAIGoogleChromeManagementV1TelemetryNotificationFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDeviceId() const;
    void setDeviceId(const QString &device_id);
    bool is_device_id_Set() const;
    bool is_device_id_Valid() const;

    QString getDeviceOrgUnitId() const;
    void setDeviceOrgUnitId(const QString &device_org_unit_id);
    bool is_device_org_unit_id_Set() const;
    bool is_device_org_unit_id_Valid() const;

    OAIGoogleChromeManagementV1TelemetryEventNotificationFilter getTelemetryEventNotificationFilter() const;
    void setTelemetryEventNotificationFilter(const OAIGoogleChromeManagementV1TelemetryEventNotificationFilter &telemetry_event_notification_filter);
    bool is_telemetry_event_notification_filter_Set() const;
    bool is_telemetry_event_notification_filter_Valid() const;

    QString getUserEmail() const;
    void setUserEmail(const QString &user_email);
    bool is_user_email_Set() const;
    bool is_user_email_Valid() const;

    QString getUserOrgUnitId() const;
    void setUserOrgUnitId(const QString &user_org_unit_id);
    bool is_user_org_unit_id_Set() const;
    bool is_user_org_unit_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_device_id;
    bool m_device_id_isSet;
    bool m_device_id_isValid;

    QString m_device_org_unit_id;
    bool m_device_org_unit_id_isSet;
    bool m_device_org_unit_id_isValid;

    OAIGoogleChromeManagementV1TelemetryEventNotificationFilter m_telemetry_event_notification_filter;
    bool m_telemetry_event_notification_filter_isSet;
    bool m_telemetry_event_notification_filter_isValid;

    QString m_user_email;
    bool m_user_email_isSet;
    bool m_user_email_isValid;

    QString m_user_org_unit_id;
    bool m_user_org_unit_id_isSet;
    bool m_user_org_unit_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleChromeManagementV1TelemetryNotificationFilter)

#endif // OAIGoogleChromeManagementV1TelemetryNotificationFilter_H
