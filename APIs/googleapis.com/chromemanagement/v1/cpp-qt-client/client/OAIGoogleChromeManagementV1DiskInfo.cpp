/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1DiskInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1DiskInfo::OAIGoogleChromeManagementV1DiskInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1DiskInfo::OAIGoogleChromeManagementV1DiskInfo() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1DiskInfo::~OAIGoogleChromeManagementV1DiskInfo() {}

void OAIGoogleChromeManagementV1DiskInfo::initializeModel() {

    m_bytes_read_this_session_isSet = false;
    m_bytes_read_this_session_isValid = false;

    m_bytes_written_this_session_isSet = false;
    m_bytes_written_this_session_isValid = false;

    m_discard_time_this_session_isSet = false;
    m_discard_time_this_session_isValid = false;

    m_health_isSet = false;
    m_health_isValid = false;

    m_io_time_this_session_isSet = false;
    m_io_time_this_session_isValid = false;

    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_read_time_this_session_isSet = false;
    m_read_time_this_session_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_size_bytes_isSet = false;
    m_size_bytes_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_volume_ids_isSet = false;
    m_volume_ids_isValid = false;

    m_write_time_this_session_isSet = false;
    m_write_time_this_session_isValid = false;
}

void OAIGoogleChromeManagementV1DiskInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1DiskInfo::fromJsonObject(QJsonObject json) {

    m_bytes_read_this_session_isValid = ::OpenAPI::fromJsonValue(m_bytes_read_this_session, json[QString("bytesReadThisSession")]);
    m_bytes_read_this_session_isSet = !json[QString("bytesReadThisSession")].isNull() && m_bytes_read_this_session_isValid;

    m_bytes_written_this_session_isValid = ::OpenAPI::fromJsonValue(m_bytes_written_this_session, json[QString("bytesWrittenThisSession")]);
    m_bytes_written_this_session_isSet = !json[QString("bytesWrittenThisSession")].isNull() && m_bytes_written_this_session_isValid;

    m_discard_time_this_session_isValid = ::OpenAPI::fromJsonValue(m_discard_time_this_session, json[QString("discardTimeThisSession")]);
    m_discard_time_this_session_isSet = !json[QString("discardTimeThisSession")].isNull() && m_discard_time_this_session_isValid;

    m_health_isValid = ::OpenAPI::fromJsonValue(m_health, json[QString("health")]);
    m_health_isSet = !json[QString("health")].isNull() && m_health_isValid;

    m_io_time_this_session_isValid = ::OpenAPI::fromJsonValue(m_io_time_this_session, json[QString("ioTimeThisSession")]);
    m_io_time_this_session_isSet = !json[QString("ioTimeThisSession")].isNull() && m_io_time_this_session_isValid;

    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_manufacturer, json[QString("manufacturer")]);
    m_manufacturer_isSet = !json[QString("manufacturer")].isNull() && m_manufacturer_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_read_time_this_session_isValid = ::OpenAPI::fromJsonValue(m_read_time_this_session, json[QString("readTimeThisSession")]);
    m_read_time_this_session_isSet = !json[QString("readTimeThisSession")].isNull() && m_read_time_this_session_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_bytes, json[QString("sizeBytes")]);
    m_size_bytes_isSet = !json[QString("sizeBytes")].isNull() && m_size_bytes_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_volume_ids_isValid = ::OpenAPI::fromJsonValue(m_volume_ids, json[QString("volumeIds")]);
    m_volume_ids_isSet = !json[QString("volumeIds")].isNull() && m_volume_ids_isValid;

    m_write_time_this_session_isValid = ::OpenAPI::fromJsonValue(m_write_time_this_session, json[QString("writeTimeThisSession")]);
    m_write_time_this_session_isSet = !json[QString("writeTimeThisSession")].isNull() && m_write_time_this_session_isValid;
}

QString OAIGoogleChromeManagementV1DiskInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1DiskInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_bytes_read_this_session_isSet) {
        obj.insert(QString("bytesReadThisSession"), ::OpenAPI::toJsonValue(m_bytes_read_this_session));
    }
    if (m_bytes_written_this_session_isSet) {
        obj.insert(QString("bytesWrittenThisSession"), ::OpenAPI::toJsonValue(m_bytes_written_this_session));
    }
    if (m_discard_time_this_session_isSet) {
        obj.insert(QString("discardTimeThisSession"), ::OpenAPI::toJsonValue(m_discard_time_this_session));
    }
    if (m_health_isSet) {
        obj.insert(QString("health"), ::OpenAPI::toJsonValue(m_health));
    }
    if (m_io_time_this_session_isSet) {
        obj.insert(QString("ioTimeThisSession"), ::OpenAPI::toJsonValue(m_io_time_this_session));
    }
    if (m_manufacturer_isSet) {
        obj.insert(QString("manufacturer"), ::OpenAPI::toJsonValue(m_manufacturer));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_read_time_this_session_isSet) {
        obj.insert(QString("readTimeThisSession"), ::OpenAPI::toJsonValue(m_read_time_this_session));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_size_bytes_isSet) {
        obj.insert(QString("sizeBytes"), ::OpenAPI::toJsonValue(m_size_bytes));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_volume_ids.size() > 0) {
        obj.insert(QString("volumeIds"), ::OpenAPI::toJsonValue(m_volume_ids));
    }
    if (m_write_time_this_session_isSet) {
        obj.insert(QString("writeTimeThisSession"), ::OpenAPI::toJsonValue(m_write_time_this_session));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1DiskInfo::getBytesReadThisSession() const {
    return m_bytes_read_this_session;
}
void OAIGoogleChromeManagementV1DiskInfo::setBytesReadThisSession(const QString &bytes_read_this_session) {
    m_bytes_read_this_session = bytes_read_this_session;
    m_bytes_read_this_session_isSet = true;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_bytes_read_this_session_Set() const{
    return m_bytes_read_this_session_isSet;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_bytes_read_this_session_Valid() const{
    return m_bytes_read_this_session_isValid;
}

QString OAIGoogleChromeManagementV1DiskInfo::getBytesWrittenThisSession() const {
    return m_bytes_written_this_session;
}
void OAIGoogleChromeManagementV1DiskInfo::setBytesWrittenThisSession(const QString &bytes_written_this_session) {
    m_bytes_written_this_session = bytes_written_this_session;
    m_bytes_written_this_session_isSet = true;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_bytes_written_this_session_Set() const{
    return m_bytes_written_this_session_isSet;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_bytes_written_this_session_Valid() const{
    return m_bytes_written_this_session_isValid;
}

QString OAIGoogleChromeManagementV1DiskInfo::getDiscardTimeThisSession() const {
    return m_discard_time_this_session;
}
void OAIGoogleChromeManagementV1DiskInfo::setDiscardTimeThisSession(const QString &discard_time_this_session) {
    m_discard_time_this_session = discard_time_this_session;
    m_discard_time_this_session_isSet = true;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_discard_time_this_session_Set() const{
    return m_discard_time_this_session_isSet;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_discard_time_this_session_Valid() const{
    return m_discard_time_this_session_isValid;
}

QString OAIGoogleChromeManagementV1DiskInfo::getHealth() const {
    return m_health;
}
void OAIGoogleChromeManagementV1DiskInfo::setHealth(const QString &health) {
    m_health = health;
    m_health_isSet = true;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_health_Set() const{
    return m_health_isSet;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_health_Valid() const{
    return m_health_isValid;
}

QString OAIGoogleChromeManagementV1DiskInfo::getIoTimeThisSession() const {
    return m_io_time_this_session;
}
void OAIGoogleChromeManagementV1DiskInfo::setIoTimeThisSession(const QString &io_time_this_session) {
    m_io_time_this_session = io_time_this_session;
    m_io_time_this_session_isSet = true;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_io_time_this_session_Set() const{
    return m_io_time_this_session_isSet;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_io_time_this_session_Valid() const{
    return m_io_time_this_session_isValid;
}

QString OAIGoogleChromeManagementV1DiskInfo::getManufacturer() const {
    return m_manufacturer;
}
void OAIGoogleChromeManagementV1DiskInfo::setManufacturer(const QString &manufacturer) {
    m_manufacturer = manufacturer;
    m_manufacturer_isSet = true;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_manufacturer_Set() const{
    return m_manufacturer_isSet;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_manufacturer_Valid() const{
    return m_manufacturer_isValid;
}

QString OAIGoogleChromeManagementV1DiskInfo::getModel() const {
    return m_model;
}
void OAIGoogleChromeManagementV1DiskInfo::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_model_Set() const{
    return m_model_isSet;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIGoogleChromeManagementV1DiskInfo::getReadTimeThisSession() const {
    return m_read_time_this_session;
}
void OAIGoogleChromeManagementV1DiskInfo::setReadTimeThisSession(const QString &read_time_this_session) {
    m_read_time_this_session = read_time_this_session;
    m_read_time_this_session_isSet = true;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_read_time_this_session_Set() const{
    return m_read_time_this_session_isSet;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_read_time_this_session_Valid() const{
    return m_read_time_this_session_isValid;
}

QString OAIGoogleChromeManagementV1DiskInfo::getSerialNumber() const {
    return m_serial_number;
}
void OAIGoogleChromeManagementV1DiskInfo::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAIGoogleChromeManagementV1DiskInfo::getSizeBytes() const {
    return m_size_bytes;
}
void OAIGoogleChromeManagementV1DiskInfo::setSizeBytes(const QString &size_bytes) {
    m_size_bytes = size_bytes;
    m_size_bytes_isSet = true;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_size_bytes_Set() const{
    return m_size_bytes_isSet;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_size_bytes_Valid() const{
    return m_size_bytes_isValid;
}

QString OAIGoogleChromeManagementV1DiskInfo::getType() const {
    return m_type;
}
void OAIGoogleChromeManagementV1DiskInfo::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_type_Valid() const{
    return m_type_isValid;
}

QList<QString> OAIGoogleChromeManagementV1DiskInfo::getVolumeIds() const {
    return m_volume_ids;
}
void OAIGoogleChromeManagementV1DiskInfo::setVolumeIds(const QList<QString> &volume_ids) {
    m_volume_ids = volume_ids;
    m_volume_ids_isSet = true;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_volume_ids_Set() const{
    return m_volume_ids_isSet;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_volume_ids_Valid() const{
    return m_volume_ids_isValid;
}

QString OAIGoogleChromeManagementV1DiskInfo::getWriteTimeThisSession() const {
    return m_write_time_this_session;
}
void OAIGoogleChromeManagementV1DiskInfo::setWriteTimeThisSession(const QString &write_time_this_session) {
    m_write_time_this_session = write_time_this_session;
    m_write_time_this_session_isSet = true;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_write_time_this_session_Set() const{
    return m_write_time_this_session_isSet;
}

bool OAIGoogleChromeManagementV1DiskInfo::is_write_time_this_session_Valid() const{
    return m_write_time_this_session_isValid;
}

bool OAIGoogleChromeManagementV1DiskInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bytes_read_this_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_written_this_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discard_time_this_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_io_time_this_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_time_this_session_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_time_this_session_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1DiskInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
