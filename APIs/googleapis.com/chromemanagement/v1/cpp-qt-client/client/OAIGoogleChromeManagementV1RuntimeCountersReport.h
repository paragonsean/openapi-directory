/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleChromeManagementV1RuntimeCountersReport.h
 *
 * Runtime counters retrieved from CPU. Currently the runtime counters telemetry is only supported by Intel vPro PSR on Gen 14+.
 */

#ifndef OAIGoogleChromeManagementV1RuntimeCountersReport_H
#define OAIGoogleChromeManagementV1RuntimeCountersReport_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleChromeManagementV1RuntimeCountersReport : public OAIObject {
public:
    OAIGoogleChromeManagementV1RuntimeCountersReport();
    OAIGoogleChromeManagementV1RuntimeCountersReport(QString json);
    ~OAIGoogleChromeManagementV1RuntimeCountersReport() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEnterHibernationCount() const;
    void setEnterHibernationCount(const QString &enter_hibernation_count);
    bool is_enter_hibernation_count_Set() const;
    bool is_enter_hibernation_count_Valid() const;

    QString getEnterPoweroffCount() const;
    void setEnterPoweroffCount(const QString &enter_poweroff_count);
    bool is_enter_poweroff_count_Set() const;
    bool is_enter_poweroff_count_Valid() const;

    QString getEnterSleepCount() const;
    void setEnterSleepCount(const QString &enter_sleep_count);
    bool is_enter_sleep_count_Set() const;
    bool is_enter_sleep_count_Valid() const;

    QString getReportTime() const;
    void setReportTime(const QString &report_time);
    bool is_report_time_Set() const;
    bool is_report_time_Valid() const;

    QString getUptimeRuntimeDuration() const;
    void setUptimeRuntimeDuration(const QString &uptime_runtime_duration);
    bool is_uptime_runtime_duration_Set() const;
    bool is_uptime_runtime_duration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_enter_hibernation_count;
    bool m_enter_hibernation_count_isSet;
    bool m_enter_hibernation_count_isValid;

    QString m_enter_poweroff_count;
    bool m_enter_poweroff_count_isSet;
    bool m_enter_poweroff_count_isValid;

    QString m_enter_sleep_count;
    bool m_enter_sleep_count_isSet;
    bool m_enter_sleep_count_isValid;

    QString m_report_time;
    bool m_report_time_isSet;
    bool m_report_time_isValid;

    QString m_uptime_runtime_duration;
    bool m_uptime_runtime_duration_isSet;
    bool m_uptime_runtime_duration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleChromeManagementV1RuntimeCountersReport)

#endif // OAIGoogleChromeManagementV1RuntimeCountersReport_H
