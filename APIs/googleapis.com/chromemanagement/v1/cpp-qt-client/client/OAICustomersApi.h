/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomersApi_H
#define OAI_OAICustomersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleChromeManagementV1CountChromeAppRequestsResponse.h"
#include "OAIGoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse.h"
#include "OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse.h"
#include "OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse.h"
#include "OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse.h"
#include "OAIGoogleChromeManagementV1CountChromeVersionsResponse.h"
#include "OAIGoogleChromeManagementV1CountInstalledAppsResponse.h"
#include "OAIGoogleChromeManagementV1CountPrintJobsByPrinterResponse.h"
#include "OAIGoogleChromeManagementV1CountPrintJobsByUserResponse.h"
#include "OAIGoogleChromeManagementV1EnumeratePrintJobsResponse.h"
#include "OAIGoogleChromeManagementV1FindInstalledAppDevicesResponse.h"
#include "OAIGoogleChromeManagementV1ListTelemetryDevicesResponse.h"
#include "OAIGoogleChromeManagementV1ListTelemetryEventsResponse.h"
#include "OAIGoogleChromeManagementV1ListTelemetryNotificationConfigsResponse.h"
#include "OAIGoogleChromeManagementV1ListTelemetryUsersResponse.h"
#include "OAIGoogleChromeManagementV1TelemetryNotificationConfig.h"
#include "OAIGoogleChromeManagementV1TelemetryUser.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomersApi : public QObject {
    Q_OBJECT

public:
    OAICustomersApi(const int timeOut = 0);
    ~OAICustomersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  org_unit_id QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void chromemanagement_customers_apps_countChromeAppRequests(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_unit_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  org_unit_id QString [optional]
    */
    virtual void chromemanagement_customers_reports_countChromeBrowsersNeedingAttention(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_unit_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  max_aue_date QString [optional]
    * @param[in]  min_aue_date QString [optional]
    * @param[in]  org_unit_id QString [optional]
    */
    virtual void chromemanagement_customers_reports_countChromeDevicesReachingAutoExpirationDate(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_aue_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min_aue_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_unit_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  org_unit_id QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void chromemanagement_customers_reports_countChromeDevicesThatNeedAttention(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_unit_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  org_unit_id QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void chromemanagement_customers_reports_countChromeHardwareFleetDevices(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_unit_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  org_unit_id QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void chromemanagement_customers_reports_countChromeVersions(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_unit_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  org_unit_id QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void chromemanagement_customers_reports_countInstalledApps(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_unit_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  printer_org_unit_id QString [optional]
    */
    virtual void chromemanagement_customers_reports_countPrintJobsByPrinter(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &printer_org_unit_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  printer_org_unit_id QString [optional]
    */
    virtual void chromemanagement_customers_reports_countPrintJobsByUser(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &printer_org_unit_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  printer_org_unit_id QString [optional]
    */
    virtual void chromemanagement_customers_reports_enumeratePrintJobs(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &printer_org_unit_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  app_id QString [optional]
    * @param[in]  app_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  org_unit_id QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void chromemanagement_customers_reports_findInstalledAppDevices(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &app_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &app_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_unit_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void chromemanagement_customers_telemetry_devices_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void chromemanagement_customers_telemetry_events_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_chrome_management_v1_telemetry_notification_config OAIGoogleChromeManagementV1TelemetryNotificationConfig [optional]
    */
    virtual void chromemanagement_customers_telemetry_notificationConfigs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleChromeManagementV1TelemetryNotificationConfig> &oai_google_chrome_management_v1_telemetry_notification_config = ::OpenAPI::OptionalParam<OAIGoogleChromeManagementV1TelemetryNotificationConfig>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void chromemanagement_customers_telemetry_notificationConfigs_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void chromemanagement_customers_telemetry_notificationConfigs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void chromemanagement_customers_telemetry_users_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  read_mask QString [optional]
    */
    virtual void chromemanagement_customers_telemetry_users_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &read_mask = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void chromemanagement_customers_apps_countChromeAppRequestsCallback(OAIHttpRequestWorker *worker);
    void chromemanagement_customers_reports_countChromeBrowsersNeedingAttentionCallback(OAIHttpRequestWorker *worker);
    void chromemanagement_customers_reports_countChromeDevicesReachingAutoExpirationDateCallback(OAIHttpRequestWorker *worker);
    void chromemanagement_customers_reports_countChromeDevicesThatNeedAttentionCallback(OAIHttpRequestWorker *worker);
    void chromemanagement_customers_reports_countChromeHardwareFleetDevicesCallback(OAIHttpRequestWorker *worker);
    void chromemanagement_customers_reports_countChromeVersionsCallback(OAIHttpRequestWorker *worker);
    void chromemanagement_customers_reports_countInstalledAppsCallback(OAIHttpRequestWorker *worker);
    void chromemanagement_customers_reports_countPrintJobsByPrinterCallback(OAIHttpRequestWorker *worker);
    void chromemanagement_customers_reports_countPrintJobsByUserCallback(OAIHttpRequestWorker *worker);
    void chromemanagement_customers_reports_enumeratePrintJobsCallback(OAIHttpRequestWorker *worker);
    void chromemanagement_customers_reports_findInstalledAppDevicesCallback(OAIHttpRequestWorker *worker);
    void chromemanagement_customers_telemetry_devices_listCallback(OAIHttpRequestWorker *worker);
    void chromemanagement_customers_telemetry_events_listCallback(OAIHttpRequestWorker *worker);
    void chromemanagement_customers_telemetry_notificationConfigs_createCallback(OAIHttpRequestWorker *worker);
    void chromemanagement_customers_telemetry_notificationConfigs_deleteCallback(OAIHttpRequestWorker *worker);
    void chromemanagement_customers_telemetry_notificationConfigs_listCallback(OAIHttpRequestWorker *worker);
    void chromemanagement_customers_telemetry_users_getCallback(OAIHttpRequestWorker *worker);
    void chromemanagement_customers_telemetry_users_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void chromemanagement_customers_apps_countChromeAppRequestsSignal(OAIGoogleChromeManagementV1CountChromeAppRequestsResponse summary);
    void chromemanagement_customers_reports_countChromeBrowsersNeedingAttentionSignal(OAIGoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse summary);
    void chromemanagement_customers_reports_countChromeDevicesReachingAutoExpirationDateSignal(OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse summary);
    void chromemanagement_customers_reports_countChromeDevicesThatNeedAttentionSignal(OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse summary);
    void chromemanagement_customers_reports_countChromeHardwareFleetDevicesSignal(OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse summary);
    void chromemanagement_customers_reports_countChromeVersionsSignal(OAIGoogleChromeManagementV1CountChromeVersionsResponse summary);
    void chromemanagement_customers_reports_countInstalledAppsSignal(OAIGoogleChromeManagementV1CountInstalledAppsResponse summary);
    void chromemanagement_customers_reports_countPrintJobsByPrinterSignal(OAIGoogleChromeManagementV1CountPrintJobsByPrinterResponse summary);
    void chromemanagement_customers_reports_countPrintJobsByUserSignal(OAIGoogleChromeManagementV1CountPrintJobsByUserResponse summary);
    void chromemanagement_customers_reports_enumeratePrintJobsSignal(OAIGoogleChromeManagementV1EnumeratePrintJobsResponse summary);
    void chromemanagement_customers_reports_findInstalledAppDevicesSignal(OAIGoogleChromeManagementV1FindInstalledAppDevicesResponse summary);
    void chromemanagement_customers_telemetry_devices_listSignal(OAIGoogleChromeManagementV1ListTelemetryDevicesResponse summary);
    void chromemanagement_customers_telemetry_events_listSignal(OAIGoogleChromeManagementV1ListTelemetryEventsResponse summary);
    void chromemanagement_customers_telemetry_notificationConfigs_createSignal(OAIGoogleChromeManagementV1TelemetryNotificationConfig summary);
    void chromemanagement_customers_telemetry_notificationConfigs_deleteSignal(OAIObject summary);
    void chromemanagement_customers_telemetry_notificationConfigs_listSignal(OAIGoogleChromeManagementV1ListTelemetryNotificationConfigsResponse summary);
    void chromemanagement_customers_telemetry_users_getSignal(OAIGoogleChromeManagementV1TelemetryUser summary);
    void chromemanagement_customers_telemetry_users_listSignal(OAIGoogleChromeManagementV1ListTelemetryUsersResponse summary);


    void chromemanagement_customers_apps_countChromeAppRequestsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromeManagementV1CountChromeAppRequestsResponse summary);
    void chromemanagement_customers_reports_countChromeBrowsersNeedingAttentionSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse summary);
    void chromemanagement_customers_reports_countChromeDevicesReachingAutoExpirationDateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse summary);
    void chromemanagement_customers_reports_countChromeDevicesThatNeedAttentionSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse summary);
    void chromemanagement_customers_reports_countChromeHardwareFleetDevicesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse summary);
    void chromemanagement_customers_reports_countChromeVersionsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromeManagementV1CountChromeVersionsResponse summary);
    void chromemanagement_customers_reports_countInstalledAppsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromeManagementV1CountInstalledAppsResponse summary);
    void chromemanagement_customers_reports_countPrintJobsByPrinterSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromeManagementV1CountPrintJobsByPrinterResponse summary);
    void chromemanagement_customers_reports_countPrintJobsByUserSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromeManagementV1CountPrintJobsByUserResponse summary);
    void chromemanagement_customers_reports_enumeratePrintJobsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromeManagementV1EnumeratePrintJobsResponse summary);
    void chromemanagement_customers_reports_findInstalledAppDevicesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromeManagementV1FindInstalledAppDevicesResponse summary);
    void chromemanagement_customers_telemetry_devices_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromeManagementV1ListTelemetryDevicesResponse summary);
    void chromemanagement_customers_telemetry_events_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromeManagementV1ListTelemetryEventsResponse summary);
    void chromemanagement_customers_telemetry_notificationConfigs_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromeManagementV1TelemetryNotificationConfig summary);
    void chromemanagement_customers_telemetry_notificationConfigs_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void chromemanagement_customers_telemetry_notificationConfigs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromeManagementV1ListTelemetryNotificationConfigsResponse summary);
    void chromemanagement_customers_telemetry_users_getSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromeManagementV1TelemetryUser summary);
    void chromemanagement_customers_telemetry_users_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleChromeManagementV1ListTelemetryUsersResponse summary);

    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_apps_countChromeAppRequestsSignalError() instead")
    void chromemanagement_customers_apps_countChromeAppRequestsSignalE(OAIGoogleChromeManagementV1CountChromeAppRequestsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_apps_countChromeAppRequestsSignalError(OAIGoogleChromeManagementV1CountChromeAppRequestsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_reports_countChromeBrowsersNeedingAttentionSignalError() instead")
    void chromemanagement_customers_reports_countChromeBrowsersNeedingAttentionSignalE(OAIGoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_reports_countChromeBrowsersNeedingAttentionSignalError(OAIGoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_reports_countChromeDevicesReachingAutoExpirationDateSignalError() instead")
    void chromemanagement_customers_reports_countChromeDevicesReachingAutoExpirationDateSignalE(OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_reports_countChromeDevicesReachingAutoExpirationDateSignalError(OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_reports_countChromeDevicesThatNeedAttentionSignalError() instead")
    void chromemanagement_customers_reports_countChromeDevicesThatNeedAttentionSignalE(OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_reports_countChromeDevicesThatNeedAttentionSignalError(OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_reports_countChromeHardwareFleetDevicesSignalError() instead")
    void chromemanagement_customers_reports_countChromeHardwareFleetDevicesSignalE(OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_reports_countChromeHardwareFleetDevicesSignalError(OAIGoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_reports_countChromeVersionsSignalError() instead")
    void chromemanagement_customers_reports_countChromeVersionsSignalE(OAIGoogleChromeManagementV1CountChromeVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_reports_countChromeVersionsSignalError(OAIGoogleChromeManagementV1CountChromeVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_reports_countInstalledAppsSignalError() instead")
    void chromemanagement_customers_reports_countInstalledAppsSignalE(OAIGoogleChromeManagementV1CountInstalledAppsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_reports_countInstalledAppsSignalError(OAIGoogleChromeManagementV1CountInstalledAppsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_reports_countPrintJobsByPrinterSignalError() instead")
    void chromemanagement_customers_reports_countPrintJobsByPrinterSignalE(OAIGoogleChromeManagementV1CountPrintJobsByPrinterResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_reports_countPrintJobsByPrinterSignalError(OAIGoogleChromeManagementV1CountPrintJobsByPrinterResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_reports_countPrintJobsByUserSignalError() instead")
    void chromemanagement_customers_reports_countPrintJobsByUserSignalE(OAIGoogleChromeManagementV1CountPrintJobsByUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_reports_countPrintJobsByUserSignalError(OAIGoogleChromeManagementV1CountPrintJobsByUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_reports_enumeratePrintJobsSignalError() instead")
    void chromemanagement_customers_reports_enumeratePrintJobsSignalE(OAIGoogleChromeManagementV1EnumeratePrintJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_reports_enumeratePrintJobsSignalError(OAIGoogleChromeManagementV1EnumeratePrintJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_reports_findInstalledAppDevicesSignalError() instead")
    void chromemanagement_customers_reports_findInstalledAppDevicesSignalE(OAIGoogleChromeManagementV1FindInstalledAppDevicesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_reports_findInstalledAppDevicesSignalError(OAIGoogleChromeManagementV1FindInstalledAppDevicesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_telemetry_devices_listSignalError() instead")
    void chromemanagement_customers_telemetry_devices_listSignalE(OAIGoogleChromeManagementV1ListTelemetryDevicesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_telemetry_devices_listSignalError(OAIGoogleChromeManagementV1ListTelemetryDevicesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_telemetry_events_listSignalError() instead")
    void chromemanagement_customers_telemetry_events_listSignalE(OAIGoogleChromeManagementV1ListTelemetryEventsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_telemetry_events_listSignalError(OAIGoogleChromeManagementV1ListTelemetryEventsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_telemetry_notificationConfigs_createSignalError() instead")
    void chromemanagement_customers_telemetry_notificationConfigs_createSignalE(OAIGoogleChromeManagementV1TelemetryNotificationConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_telemetry_notificationConfigs_createSignalError(OAIGoogleChromeManagementV1TelemetryNotificationConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_telemetry_notificationConfigs_deleteSignalError() instead")
    void chromemanagement_customers_telemetry_notificationConfigs_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_telemetry_notificationConfigs_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_telemetry_notificationConfigs_listSignalError() instead")
    void chromemanagement_customers_telemetry_notificationConfigs_listSignalE(OAIGoogleChromeManagementV1ListTelemetryNotificationConfigsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_telemetry_notificationConfigs_listSignalError(OAIGoogleChromeManagementV1ListTelemetryNotificationConfigsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_telemetry_users_getSignalError() instead")
    void chromemanagement_customers_telemetry_users_getSignalE(OAIGoogleChromeManagementV1TelemetryUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_telemetry_users_getSignalError(OAIGoogleChromeManagementV1TelemetryUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_telemetry_users_listSignalError() instead")
    void chromemanagement_customers_telemetry_users_listSignalE(OAIGoogleChromeManagementV1ListTelemetryUsersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_telemetry_users_listSignalError(OAIGoogleChromeManagementV1ListTelemetryUsersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_apps_countChromeAppRequestsSignalErrorFull() instead")
    void chromemanagement_customers_apps_countChromeAppRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_apps_countChromeAppRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_reports_countChromeBrowsersNeedingAttentionSignalErrorFull() instead")
    void chromemanagement_customers_reports_countChromeBrowsersNeedingAttentionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_reports_countChromeBrowsersNeedingAttentionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_reports_countChromeDevicesReachingAutoExpirationDateSignalErrorFull() instead")
    void chromemanagement_customers_reports_countChromeDevicesReachingAutoExpirationDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_reports_countChromeDevicesReachingAutoExpirationDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_reports_countChromeDevicesThatNeedAttentionSignalErrorFull() instead")
    void chromemanagement_customers_reports_countChromeDevicesThatNeedAttentionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_reports_countChromeDevicesThatNeedAttentionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_reports_countChromeHardwareFleetDevicesSignalErrorFull() instead")
    void chromemanagement_customers_reports_countChromeHardwareFleetDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_reports_countChromeHardwareFleetDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_reports_countChromeVersionsSignalErrorFull() instead")
    void chromemanagement_customers_reports_countChromeVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_reports_countChromeVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_reports_countInstalledAppsSignalErrorFull() instead")
    void chromemanagement_customers_reports_countInstalledAppsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_reports_countInstalledAppsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_reports_countPrintJobsByPrinterSignalErrorFull() instead")
    void chromemanagement_customers_reports_countPrintJobsByPrinterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_reports_countPrintJobsByPrinterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_reports_countPrintJobsByUserSignalErrorFull() instead")
    void chromemanagement_customers_reports_countPrintJobsByUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_reports_countPrintJobsByUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_reports_enumeratePrintJobsSignalErrorFull() instead")
    void chromemanagement_customers_reports_enumeratePrintJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_reports_enumeratePrintJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_reports_findInstalledAppDevicesSignalErrorFull() instead")
    void chromemanagement_customers_reports_findInstalledAppDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_reports_findInstalledAppDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_telemetry_devices_listSignalErrorFull() instead")
    void chromemanagement_customers_telemetry_devices_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_telemetry_devices_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_telemetry_events_listSignalErrorFull() instead")
    void chromemanagement_customers_telemetry_events_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_telemetry_events_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_telemetry_notificationConfigs_createSignalErrorFull() instead")
    void chromemanagement_customers_telemetry_notificationConfigs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_telemetry_notificationConfigs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_telemetry_notificationConfigs_deleteSignalErrorFull() instead")
    void chromemanagement_customers_telemetry_notificationConfigs_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_telemetry_notificationConfigs_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_telemetry_notificationConfigs_listSignalErrorFull() instead")
    void chromemanagement_customers_telemetry_notificationConfigs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_telemetry_notificationConfigs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_telemetry_users_getSignalErrorFull() instead")
    void chromemanagement_customers_telemetry_users_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_telemetry_users_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chromemanagement_customers_telemetry_users_listSignalErrorFull() instead")
    void chromemanagement_customers_telemetry_users_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chromemanagement_customers_telemetry_users_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
