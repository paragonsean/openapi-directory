/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleChromeManagementV1BatteryInfo.h
 *
 * Information about the battery. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDevicePowerStatus](https://chromeenterprise.google/policies/#ReportDevicePowerStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_BATTERY_INFO
 */

#ifndef OAIGoogleChromeManagementV1BatteryInfo_H
#define OAIGoogleChromeManagementV1BatteryInfo_H

#include <QJsonObject>

#include "OAIGoogleTypeDate.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleTypeDate;

class OAIGoogleChromeManagementV1BatteryInfo : public OAIObject {
public:
    OAIGoogleChromeManagementV1BatteryInfo();
    OAIGoogleChromeManagementV1BatteryInfo(QString json);
    ~OAIGoogleChromeManagementV1BatteryInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDesignCapacity() const;
    void setDesignCapacity(const QString &design_capacity);
    bool is_design_capacity_Set() const;
    bool is_design_capacity_Valid() const;

    qint32 getDesignMinVoltage() const;
    void setDesignMinVoltage(const qint32 &design_min_voltage);
    bool is_design_min_voltage_Set() const;
    bool is_design_min_voltage_Valid() const;

    OAIGoogleTypeDate getManufactureDate() const;
    void setManufactureDate(const OAIGoogleTypeDate &manufacture_date);
    bool is_manufacture_date_Set() const;
    bool is_manufacture_date_Valid() const;

    QString getManufacturer() const;
    void setManufacturer(const QString &manufacturer);
    bool is_manufacturer_Set() const;
    bool is_manufacturer_Valid() const;

    QString getSerialNumber() const;
    void setSerialNumber(const QString &serial_number);
    bool is_serial_number_Set() const;
    bool is_serial_number_Valid() const;

    QString getTechnology() const;
    void setTechnology(const QString &technology);
    bool is_technology_Set() const;
    bool is_technology_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_design_capacity;
    bool m_design_capacity_isSet;
    bool m_design_capacity_isValid;

    qint32 m_design_min_voltage;
    bool m_design_min_voltage_isSet;
    bool m_design_min_voltage_isValid;

    OAIGoogleTypeDate m_manufacture_date;
    bool m_manufacture_date_isSet;
    bool m_manufacture_date_isValid;

    QString m_manufacturer;
    bool m_manufacturer_isSet;
    bool m_manufacturer_isValid;

    QString m_serial_number;
    bool m_serial_number_isSet;
    bool m_serial_number_isValid;

    QString m_technology;
    bool m_technology_isSet;
    bool m_technology_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleChromeManagementV1BatteryInfo)

#endif // OAIGoogleChromeManagementV1BatteryInfo_H
