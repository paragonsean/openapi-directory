/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1ChromeAppInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1ChromeAppInfo::OAIGoogleChromeManagementV1ChromeAppInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1ChromeAppInfo::OAIGoogleChromeManagementV1ChromeAppInfo() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1ChromeAppInfo::~OAIGoogleChromeManagementV1ChromeAppInfo() {}

void OAIGoogleChromeManagementV1ChromeAppInfo::initializeModel() {

    m_google_owned_isSet = false;
    m_google_owned_isValid = false;

    m_is_cws_hosted_isSet = false;
    m_is_cws_hosted_isValid = false;

    m_is_extension_policy_supported_isSet = false;
    m_is_extension_policy_supported_isValid = false;

    m_is_kiosk_only_isSet = false;
    m_is_kiosk_only_isValid = false;

    m_is_theme_isSet = false;
    m_is_theme_isValid = false;

    m_kiosk_enabled_isSet = false;
    m_kiosk_enabled_isValid = false;

    m_min_user_count_isSet = false;
    m_min_user_count_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_site_access_isSet = false;
    m_site_access_isValid = false;

    m_support_enabled_isSet = false;
    m_support_enabled_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleChromeManagementV1ChromeAppInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1ChromeAppInfo::fromJsonObject(QJsonObject json) {

    m_google_owned_isValid = ::OpenAPI::fromJsonValue(m_google_owned, json[QString("googleOwned")]);
    m_google_owned_isSet = !json[QString("googleOwned")].isNull() && m_google_owned_isValid;

    m_is_cws_hosted_isValid = ::OpenAPI::fromJsonValue(m_is_cws_hosted, json[QString("isCwsHosted")]);
    m_is_cws_hosted_isSet = !json[QString("isCwsHosted")].isNull() && m_is_cws_hosted_isValid;

    m_is_extension_policy_supported_isValid = ::OpenAPI::fromJsonValue(m_is_extension_policy_supported, json[QString("isExtensionPolicySupported")]);
    m_is_extension_policy_supported_isSet = !json[QString("isExtensionPolicySupported")].isNull() && m_is_extension_policy_supported_isValid;

    m_is_kiosk_only_isValid = ::OpenAPI::fromJsonValue(m_is_kiosk_only, json[QString("isKioskOnly")]);
    m_is_kiosk_only_isSet = !json[QString("isKioskOnly")].isNull() && m_is_kiosk_only_isValid;

    m_is_theme_isValid = ::OpenAPI::fromJsonValue(m_is_theme, json[QString("isTheme")]);
    m_is_theme_isSet = !json[QString("isTheme")].isNull() && m_is_theme_isValid;

    m_kiosk_enabled_isValid = ::OpenAPI::fromJsonValue(m_kiosk_enabled, json[QString("kioskEnabled")]);
    m_kiosk_enabled_isSet = !json[QString("kioskEnabled")].isNull() && m_kiosk_enabled_isValid;

    m_min_user_count_isValid = ::OpenAPI::fromJsonValue(m_min_user_count, json[QString("minUserCount")]);
    m_min_user_count_isSet = !json[QString("minUserCount")].isNull() && m_min_user_count_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_site_access_isValid = ::OpenAPI::fromJsonValue(m_site_access, json[QString("siteAccess")]);
    m_site_access_isSet = !json[QString("siteAccess")].isNull() && m_site_access_isValid;

    m_support_enabled_isValid = ::OpenAPI::fromJsonValue(m_support_enabled, json[QString("supportEnabled")]);
    m_support_enabled_isSet = !json[QString("supportEnabled")].isNull() && m_support_enabled_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleChromeManagementV1ChromeAppInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1ChromeAppInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_google_owned_isSet) {
        obj.insert(QString("googleOwned"), ::OpenAPI::toJsonValue(m_google_owned));
    }
    if (m_is_cws_hosted_isSet) {
        obj.insert(QString("isCwsHosted"), ::OpenAPI::toJsonValue(m_is_cws_hosted));
    }
    if (m_is_extension_policy_supported_isSet) {
        obj.insert(QString("isExtensionPolicySupported"), ::OpenAPI::toJsonValue(m_is_extension_policy_supported));
    }
    if (m_is_kiosk_only_isSet) {
        obj.insert(QString("isKioskOnly"), ::OpenAPI::toJsonValue(m_is_kiosk_only));
    }
    if (m_is_theme_isSet) {
        obj.insert(QString("isTheme"), ::OpenAPI::toJsonValue(m_is_theme));
    }
    if (m_kiosk_enabled_isSet) {
        obj.insert(QString("kioskEnabled"), ::OpenAPI::toJsonValue(m_kiosk_enabled));
    }
    if (m_min_user_count_isSet) {
        obj.insert(QString("minUserCount"), ::OpenAPI::toJsonValue(m_min_user_count));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_site_access.size() > 0) {
        obj.insert(QString("siteAccess"), ::OpenAPI::toJsonValue(m_site_access));
    }
    if (m_support_enabled_isSet) {
        obj.insert(QString("supportEnabled"), ::OpenAPI::toJsonValue(m_support_enabled));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::isGoogleOwned() const {
    return m_google_owned;
}
void OAIGoogleChromeManagementV1ChromeAppInfo::setGoogleOwned(const bool &google_owned) {
    m_google_owned = google_owned;
    m_google_owned_isSet = true;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_google_owned_Set() const{
    return m_google_owned_isSet;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_google_owned_Valid() const{
    return m_google_owned_isValid;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::isIsCwsHosted() const {
    return m_is_cws_hosted;
}
void OAIGoogleChromeManagementV1ChromeAppInfo::setIsCwsHosted(const bool &is_cws_hosted) {
    m_is_cws_hosted = is_cws_hosted;
    m_is_cws_hosted_isSet = true;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_is_cws_hosted_Set() const{
    return m_is_cws_hosted_isSet;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_is_cws_hosted_Valid() const{
    return m_is_cws_hosted_isValid;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::isIsExtensionPolicySupported() const {
    return m_is_extension_policy_supported;
}
void OAIGoogleChromeManagementV1ChromeAppInfo::setIsExtensionPolicySupported(const bool &is_extension_policy_supported) {
    m_is_extension_policy_supported = is_extension_policy_supported;
    m_is_extension_policy_supported_isSet = true;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_is_extension_policy_supported_Set() const{
    return m_is_extension_policy_supported_isSet;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_is_extension_policy_supported_Valid() const{
    return m_is_extension_policy_supported_isValid;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::isIsKioskOnly() const {
    return m_is_kiosk_only;
}
void OAIGoogleChromeManagementV1ChromeAppInfo::setIsKioskOnly(const bool &is_kiosk_only) {
    m_is_kiosk_only = is_kiosk_only;
    m_is_kiosk_only_isSet = true;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_is_kiosk_only_Set() const{
    return m_is_kiosk_only_isSet;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_is_kiosk_only_Valid() const{
    return m_is_kiosk_only_isValid;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::isIsTheme() const {
    return m_is_theme;
}
void OAIGoogleChromeManagementV1ChromeAppInfo::setIsTheme(const bool &is_theme) {
    m_is_theme = is_theme;
    m_is_theme_isSet = true;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_is_theme_Set() const{
    return m_is_theme_isSet;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_is_theme_Valid() const{
    return m_is_theme_isValid;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::isKioskEnabled() const {
    return m_kiosk_enabled;
}
void OAIGoogleChromeManagementV1ChromeAppInfo::setKioskEnabled(const bool &kiosk_enabled) {
    m_kiosk_enabled = kiosk_enabled;
    m_kiosk_enabled_isSet = true;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_kiosk_enabled_Set() const{
    return m_kiosk_enabled_isSet;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_kiosk_enabled_Valid() const{
    return m_kiosk_enabled_isValid;
}

qint32 OAIGoogleChromeManagementV1ChromeAppInfo::getMinUserCount() const {
    return m_min_user_count;
}
void OAIGoogleChromeManagementV1ChromeAppInfo::setMinUserCount(const qint32 &min_user_count) {
    m_min_user_count = min_user_count;
    m_min_user_count_isSet = true;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_min_user_count_Set() const{
    return m_min_user_count_isSet;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_min_user_count_Valid() const{
    return m_min_user_count_isValid;
}

QList<OAIGoogleChromeManagementV1ChromeAppPermission> OAIGoogleChromeManagementV1ChromeAppInfo::getPermissions() const {
    return m_permissions;
}
void OAIGoogleChromeManagementV1ChromeAppInfo::setPermissions(const QList<OAIGoogleChromeManagementV1ChromeAppPermission> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QList<OAIGoogleChromeManagementV1ChromeAppSiteAccess> OAIGoogleChromeManagementV1ChromeAppInfo::getSiteAccess() const {
    return m_site_access;
}
void OAIGoogleChromeManagementV1ChromeAppInfo::setSiteAccess(const QList<OAIGoogleChromeManagementV1ChromeAppSiteAccess> &site_access) {
    m_site_access = site_access;
    m_site_access_isSet = true;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_site_access_Set() const{
    return m_site_access_isSet;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_site_access_Valid() const{
    return m_site_access_isValid;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::isSupportEnabled() const {
    return m_support_enabled;
}
void OAIGoogleChromeManagementV1ChromeAppInfo::setSupportEnabled(const bool &support_enabled) {
    m_support_enabled = support_enabled;
    m_support_enabled_isSet = true;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_support_enabled_Set() const{
    return m_support_enabled_isSet;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_support_enabled_Valid() const{
    return m_support_enabled_isValid;
}

QString OAIGoogleChromeManagementV1ChromeAppInfo::getType() const {
    return m_type;
}
void OAIGoogleChromeManagementV1ChromeAppInfo::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_google_owned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_cws_hosted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_extension_policy_supported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_kiosk_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_theme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kiosk_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_user_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_access.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1ChromeAppInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
