/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1DisplayInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1DisplayInfo::OAIGoogleChromeManagementV1DisplayInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1DisplayInfo::OAIGoogleChromeManagementV1DisplayInfo() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1DisplayInfo::~OAIGoogleChromeManagementV1DisplayInfo() {}

void OAIGoogleChromeManagementV1DisplayInfo::initializeModel() {

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_is_internal_isSet = false;
    m_is_internal_isValid = false;

    m_refresh_rate_isSet = false;
    m_refresh_rate_isValid = false;

    m_resolution_height_isSet = false;
    m_resolution_height_isValid = false;

    m_resolution_width_isSet = false;
    m_resolution_width_isValid = false;
}

void OAIGoogleChromeManagementV1DisplayInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1DisplayInfo::fromJsonObject(QJsonObject json) {

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_is_internal_isValid = ::OpenAPI::fromJsonValue(m_is_internal, json[QString("isInternal")]);
    m_is_internal_isSet = !json[QString("isInternal")].isNull() && m_is_internal_isValid;

    m_refresh_rate_isValid = ::OpenAPI::fromJsonValue(m_refresh_rate, json[QString("refreshRate")]);
    m_refresh_rate_isSet = !json[QString("refreshRate")].isNull() && m_refresh_rate_isValid;

    m_resolution_height_isValid = ::OpenAPI::fromJsonValue(m_resolution_height, json[QString("resolutionHeight")]);
    m_resolution_height_isSet = !json[QString("resolutionHeight")].isNull() && m_resolution_height_isValid;

    m_resolution_width_isValid = ::OpenAPI::fromJsonValue(m_resolution_width, json[QString("resolutionWidth")]);
    m_resolution_width_isSet = !json[QString("resolutionWidth")].isNull() && m_resolution_width_isValid;
}

QString OAIGoogleChromeManagementV1DisplayInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1DisplayInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_is_internal_isSet) {
        obj.insert(QString("isInternal"), ::OpenAPI::toJsonValue(m_is_internal));
    }
    if (m_refresh_rate_isSet) {
        obj.insert(QString("refreshRate"), ::OpenAPI::toJsonValue(m_refresh_rate));
    }
    if (m_resolution_height_isSet) {
        obj.insert(QString("resolutionHeight"), ::OpenAPI::toJsonValue(m_resolution_height));
    }
    if (m_resolution_width_isSet) {
        obj.insert(QString("resolutionWidth"), ::OpenAPI::toJsonValue(m_resolution_width));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1DisplayInfo::getDeviceId() const {
    return m_device_id;
}
void OAIGoogleChromeManagementV1DisplayInfo::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIGoogleChromeManagementV1DisplayInfo::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIGoogleChromeManagementV1DisplayInfo::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIGoogleChromeManagementV1DisplayInfo::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleChromeManagementV1DisplayInfo::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleChromeManagementV1DisplayInfo::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleChromeManagementV1DisplayInfo::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIGoogleChromeManagementV1DisplayInfo::isIsInternal() const {
    return m_is_internal;
}
void OAIGoogleChromeManagementV1DisplayInfo::setIsInternal(const bool &is_internal) {
    m_is_internal = is_internal;
    m_is_internal_isSet = true;
}

bool OAIGoogleChromeManagementV1DisplayInfo::is_is_internal_Set() const{
    return m_is_internal_isSet;
}

bool OAIGoogleChromeManagementV1DisplayInfo::is_is_internal_Valid() const{
    return m_is_internal_isValid;
}

qint32 OAIGoogleChromeManagementV1DisplayInfo::getRefreshRate() const {
    return m_refresh_rate;
}
void OAIGoogleChromeManagementV1DisplayInfo::setRefreshRate(const qint32 &refresh_rate) {
    m_refresh_rate = refresh_rate;
    m_refresh_rate_isSet = true;
}

bool OAIGoogleChromeManagementV1DisplayInfo::is_refresh_rate_Set() const{
    return m_refresh_rate_isSet;
}

bool OAIGoogleChromeManagementV1DisplayInfo::is_refresh_rate_Valid() const{
    return m_refresh_rate_isValid;
}

qint32 OAIGoogleChromeManagementV1DisplayInfo::getResolutionHeight() const {
    return m_resolution_height;
}
void OAIGoogleChromeManagementV1DisplayInfo::setResolutionHeight(const qint32 &resolution_height) {
    m_resolution_height = resolution_height;
    m_resolution_height_isSet = true;
}

bool OAIGoogleChromeManagementV1DisplayInfo::is_resolution_height_Set() const{
    return m_resolution_height_isSet;
}

bool OAIGoogleChromeManagementV1DisplayInfo::is_resolution_height_Valid() const{
    return m_resolution_height_isValid;
}

qint32 OAIGoogleChromeManagementV1DisplayInfo::getResolutionWidth() const {
    return m_resolution_width;
}
void OAIGoogleChromeManagementV1DisplayInfo::setResolutionWidth(const qint32 &resolution_width) {
    m_resolution_width = resolution_width;
    m_resolution_width_isSet = true;
}

bool OAIGoogleChromeManagementV1DisplayInfo::is_resolution_width_Set() const{
    return m_resolution_width_isSet;
}

bool OAIGoogleChromeManagementV1DisplayInfo::is_resolution_width_Valid() const{
    return m_resolution_width_isValid;
}

bool OAIGoogleChromeManagementV1DisplayInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_internal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1DisplayInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
