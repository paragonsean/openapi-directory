/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1TelemetryUserDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1TelemetryUserDevice::OAIGoogleChromeManagementV1TelemetryUserDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1TelemetryUserDevice::OAIGoogleChromeManagementV1TelemetryUserDevice() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1TelemetryUserDevice::~OAIGoogleChromeManagementV1TelemetryUserDevice() {}

void OAIGoogleChromeManagementV1TelemetryUserDevice::initializeModel() {

    m_audio_status_report_isSet = false;
    m_audio_status_report_isValid = false;

    m_device_activity_report_isSet = false;
    m_device_activity_report_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_network_bandwidth_report_isSet = false;
    m_network_bandwidth_report_isValid = false;

    m_peripherals_report_isSet = false;
    m_peripherals_report_isValid = false;
}

void OAIGoogleChromeManagementV1TelemetryUserDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1TelemetryUserDevice::fromJsonObject(QJsonObject json) {

    m_audio_status_report_isValid = ::OpenAPI::fromJsonValue(m_audio_status_report, json[QString("audioStatusReport")]);
    m_audio_status_report_isSet = !json[QString("audioStatusReport")].isNull() && m_audio_status_report_isValid;

    m_device_activity_report_isValid = ::OpenAPI::fromJsonValue(m_device_activity_report, json[QString("deviceActivityReport")]);
    m_device_activity_report_isSet = !json[QString("deviceActivityReport")].isNull() && m_device_activity_report_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_network_bandwidth_report_isValid = ::OpenAPI::fromJsonValue(m_network_bandwidth_report, json[QString("networkBandwidthReport")]);
    m_network_bandwidth_report_isSet = !json[QString("networkBandwidthReport")].isNull() && m_network_bandwidth_report_isValid;

    m_peripherals_report_isValid = ::OpenAPI::fromJsonValue(m_peripherals_report, json[QString("peripheralsReport")]);
    m_peripherals_report_isSet = !json[QString("peripheralsReport")].isNull() && m_peripherals_report_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryUserDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1TelemetryUserDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_status_report.size() > 0) {
        obj.insert(QString("audioStatusReport"), ::OpenAPI::toJsonValue(m_audio_status_report));
    }
    if (m_device_activity_report.size() > 0) {
        obj.insert(QString("deviceActivityReport"), ::OpenAPI::toJsonValue(m_device_activity_report));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_network_bandwidth_report.size() > 0) {
        obj.insert(QString("networkBandwidthReport"), ::OpenAPI::toJsonValue(m_network_bandwidth_report));
    }
    if (m_peripherals_report.size() > 0) {
        obj.insert(QString("peripheralsReport"), ::OpenAPI::toJsonValue(m_peripherals_report));
    }
    return obj;
}

QList<OAIGoogleChromeManagementV1AudioStatusReport> OAIGoogleChromeManagementV1TelemetryUserDevice::getAudioStatusReport() const {
    return m_audio_status_report;
}
void OAIGoogleChromeManagementV1TelemetryUserDevice::setAudioStatusReport(const QList<OAIGoogleChromeManagementV1AudioStatusReport> &audio_status_report) {
    m_audio_status_report = audio_status_report;
    m_audio_status_report_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryUserDevice::is_audio_status_report_Set() const{
    return m_audio_status_report_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryUserDevice::is_audio_status_report_Valid() const{
    return m_audio_status_report_isValid;
}

QList<OAIGoogleChromeManagementV1DeviceActivityReport> OAIGoogleChromeManagementV1TelemetryUserDevice::getDeviceActivityReport() const {
    return m_device_activity_report;
}
void OAIGoogleChromeManagementV1TelemetryUserDevice::setDeviceActivityReport(const QList<OAIGoogleChromeManagementV1DeviceActivityReport> &device_activity_report) {
    m_device_activity_report = device_activity_report;
    m_device_activity_report_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryUserDevice::is_device_activity_report_Set() const{
    return m_device_activity_report_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryUserDevice::is_device_activity_report_Valid() const{
    return m_device_activity_report_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryUserDevice::getDeviceId() const {
    return m_device_id;
}
void OAIGoogleChromeManagementV1TelemetryUserDevice::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryUserDevice::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryUserDevice::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QList<OAIGoogleChromeManagementV1NetworkBandwidthReport> OAIGoogleChromeManagementV1TelemetryUserDevice::getNetworkBandwidthReport() const {
    return m_network_bandwidth_report;
}
void OAIGoogleChromeManagementV1TelemetryUserDevice::setNetworkBandwidthReport(const QList<OAIGoogleChromeManagementV1NetworkBandwidthReport> &network_bandwidth_report) {
    m_network_bandwidth_report = network_bandwidth_report;
    m_network_bandwidth_report_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryUserDevice::is_network_bandwidth_report_Set() const{
    return m_network_bandwidth_report_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryUserDevice::is_network_bandwidth_report_Valid() const{
    return m_network_bandwidth_report_isValid;
}

QList<OAIGoogleChromeManagementV1PeripheralsReport> OAIGoogleChromeManagementV1TelemetryUserDevice::getPeripheralsReport() const {
    return m_peripherals_report;
}
void OAIGoogleChromeManagementV1TelemetryUserDevice::setPeripheralsReport(const QList<OAIGoogleChromeManagementV1PeripheralsReport> &peripherals_report) {
    m_peripherals_report = peripherals_report;
    m_peripherals_report_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryUserDevice::is_peripherals_report_Set() const{
    return m_peripherals_report_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryUserDevice::is_peripherals_report_Valid() const{
    return m_peripherals_report_isValid;
}

bool OAIGoogleChromeManagementV1TelemetryUserDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_status_report.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_activity_report.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_bandwidth_report.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_peripherals_report.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1TelemetryUserDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
