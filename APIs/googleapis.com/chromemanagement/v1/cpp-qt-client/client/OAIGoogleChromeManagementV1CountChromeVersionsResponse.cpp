/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1CountChromeVersionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1CountChromeVersionsResponse::OAIGoogleChromeManagementV1CountChromeVersionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1CountChromeVersionsResponse::OAIGoogleChromeManagementV1CountChromeVersionsResponse() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1CountChromeVersionsResponse::~OAIGoogleChromeManagementV1CountChromeVersionsResponse() {}

void OAIGoogleChromeManagementV1CountChromeVersionsResponse::initializeModel() {

    m_browser_versions_isSet = false;
    m_browser_versions_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_total_size_isSet = false;
    m_total_size_isValid = false;
}

void OAIGoogleChromeManagementV1CountChromeVersionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1CountChromeVersionsResponse::fromJsonObject(QJsonObject json) {

    m_browser_versions_isValid = ::OpenAPI::fromJsonValue(m_browser_versions, json[QString("browserVersions")]);
    m_browser_versions_isSet = !json[QString("browserVersions")].isNull() && m_browser_versions_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_total_size_isValid = ::OpenAPI::fromJsonValue(m_total_size, json[QString("totalSize")]);
    m_total_size_isSet = !json[QString("totalSize")].isNull() && m_total_size_isValid;
}

QString OAIGoogleChromeManagementV1CountChromeVersionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1CountChromeVersionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_browser_versions.size() > 0) {
        obj.insert(QString("browserVersions"), ::OpenAPI::toJsonValue(m_browser_versions));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_total_size_isSet) {
        obj.insert(QString("totalSize"), ::OpenAPI::toJsonValue(m_total_size));
    }
    return obj;
}

QList<OAIGoogleChromeManagementV1BrowserVersion> OAIGoogleChromeManagementV1CountChromeVersionsResponse::getBrowserVersions() const {
    return m_browser_versions;
}
void OAIGoogleChromeManagementV1CountChromeVersionsResponse::setBrowserVersions(const QList<OAIGoogleChromeManagementV1BrowserVersion> &browser_versions) {
    m_browser_versions = browser_versions;
    m_browser_versions_isSet = true;
}

bool OAIGoogleChromeManagementV1CountChromeVersionsResponse::is_browser_versions_Set() const{
    return m_browser_versions_isSet;
}

bool OAIGoogleChromeManagementV1CountChromeVersionsResponse::is_browser_versions_Valid() const{
    return m_browser_versions_isValid;
}

QString OAIGoogleChromeManagementV1CountChromeVersionsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleChromeManagementV1CountChromeVersionsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleChromeManagementV1CountChromeVersionsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleChromeManagementV1CountChromeVersionsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

qint32 OAIGoogleChromeManagementV1CountChromeVersionsResponse::getTotalSize() const {
    return m_total_size;
}
void OAIGoogleChromeManagementV1CountChromeVersionsResponse::setTotalSize(const qint32 &total_size) {
    m_total_size = total_size;
    m_total_size_isSet = true;
}

bool OAIGoogleChromeManagementV1CountChromeVersionsResponse::is_total_size_Set() const{
    return m_total_size_isSet;
}

bool OAIGoogleChromeManagementV1CountChromeVersionsResponse::is_total_size_Valid() const{
    return m_total_size_isValid;
}

bool OAIGoogleChromeManagementV1CountChromeVersionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_browser_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1CountChromeVersionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
