/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1DisplayDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1DisplayDevice::OAIGoogleChromeManagementV1DisplayDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1DisplayDevice::OAIGoogleChromeManagementV1DisplayDevice() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1DisplayDevice::~OAIGoogleChromeManagementV1DisplayDevice() {}

void OAIGoogleChromeManagementV1DisplayDevice::initializeModel() {

    m_display_height_mm_isSet = false;
    m_display_height_mm_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_display_width_mm_isSet = false;
    m_display_width_mm_isValid = false;

    m_internal_isSet = false;
    m_internal_isValid = false;

    m_manufacture_year_isSet = false;
    m_manufacture_year_isValid = false;

    m_manufacturer_id_isSet = false;
    m_manufacturer_id_isValid = false;

    m_model_id_isSet = false;
    m_model_id_isValid = false;
}

void OAIGoogleChromeManagementV1DisplayDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1DisplayDevice::fromJsonObject(QJsonObject json) {

    m_display_height_mm_isValid = ::OpenAPI::fromJsonValue(m_display_height_mm, json[QString("displayHeightMm")]);
    m_display_height_mm_isSet = !json[QString("displayHeightMm")].isNull() && m_display_height_mm_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_display_width_mm_isValid = ::OpenAPI::fromJsonValue(m_display_width_mm, json[QString("displayWidthMm")]);
    m_display_width_mm_isSet = !json[QString("displayWidthMm")].isNull() && m_display_width_mm_isValid;

    m_internal_isValid = ::OpenAPI::fromJsonValue(m_internal, json[QString("internal")]);
    m_internal_isSet = !json[QString("internal")].isNull() && m_internal_isValid;

    m_manufacture_year_isValid = ::OpenAPI::fromJsonValue(m_manufacture_year, json[QString("manufactureYear")]);
    m_manufacture_year_isSet = !json[QString("manufactureYear")].isNull() && m_manufacture_year_isValid;

    m_manufacturer_id_isValid = ::OpenAPI::fromJsonValue(m_manufacturer_id, json[QString("manufacturerId")]);
    m_manufacturer_id_isSet = !json[QString("manufacturerId")].isNull() && m_manufacturer_id_isValid;

    m_model_id_isValid = ::OpenAPI::fromJsonValue(m_model_id, json[QString("modelId")]);
    m_model_id_isSet = !json[QString("modelId")].isNull() && m_model_id_isValid;
}

QString OAIGoogleChromeManagementV1DisplayDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1DisplayDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_display_height_mm_isSet) {
        obj.insert(QString("displayHeightMm"), ::OpenAPI::toJsonValue(m_display_height_mm));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_display_width_mm_isSet) {
        obj.insert(QString("displayWidthMm"), ::OpenAPI::toJsonValue(m_display_width_mm));
    }
    if (m_internal_isSet) {
        obj.insert(QString("internal"), ::OpenAPI::toJsonValue(m_internal));
    }
    if (m_manufacture_year_isSet) {
        obj.insert(QString("manufactureYear"), ::OpenAPI::toJsonValue(m_manufacture_year));
    }
    if (m_manufacturer_id_isSet) {
        obj.insert(QString("manufacturerId"), ::OpenAPI::toJsonValue(m_manufacturer_id));
    }
    if (m_model_id_isSet) {
        obj.insert(QString("modelId"), ::OpenAPI::toJsonValue(m_model_id));
    }
    return obj;
}

qint32 OAIGoogleChromeManagementV1DisplayDevice::getDisplayHeightMm() const {
    return m_display_height_mm;
}
void OAIGoogleChromeManagementV1DisplayDevice::setDisplayHeightMm(const qint32 &display_height_mm) {
    m_display_height_mm = display_height_mm;
    m_display_height_mm_isSet = true;
}

bool OAIGoogleChromeManagementV1DisplayDevice::is_display_height_mm_Set() const{
    return m_display_height_mm_isSet;
}

bool OAIGoogleChromeManagementV1DisplayDevice::is_display_height_mm_Valid() const{
    return m_display_height_mm_isValid;
}

QString OAIGoogleChromeManagementV1DisplayDevice::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleChromeManagementV1DisplayDevice::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleChromeManagementV1DisplayDevice::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleChromeManagementV1DisplayDevice::is_display_name_Valid() const{
    return m_display_name_isValid;
}

qint32 OAIGoogleChromeManagementV1DisplayDevice::getDisplayWidthMm() const {
    return m_display_width_mm;
}
void OAIGoogleChromeManagementV1DisplayDevice::setDisplayWidthMm(const qint32 &display_width_mm) {
    m_display_width_mm = display_width_mm;
    m_display_width_mm_isSet = true;
}

bool OAIGoogleChromeManagementV1DisplayDevice::is_display_width_mm_Set() const{
    return m_display_width_mm_isSet;
}

bool OAIGoogleChromeManagementV1DisplayDevice::is_display_width_mm_Valid() const{
    return m_display_width_mm_isValid;
}

bool OAIGoogleChromeManagementV1DisplayDevice::isInternal() const {
    return m_internal;
}
void OAIGoogleChromeManagementV1DisplayDevice::setInternal(const bool &internal) {
    m_internal = internal;
    m_internal_isSet = true;
}

bool OAIGoogleChromeManagementV1DisplayDevice::is_internal_Set() const{
    return m_internal_isSet;
}

bool OAIGoogleChromeManagementV1DisplayDevice::is_internal_Valid() const{
    return m_internal_isValid;
}

qint32 OAIGoogleChromeManagementV1DisplayDevice::getManufactureYear() const {
    return m_manufacture_year;
}
void OAIGoogleChromeManagementV1DisplayDevice::setManufactureYear(const qint32 &manufacture_year) {
    m_manufacture_year = manufacture_year;
    m_manufacture_year_isSet = true;
}

bool OAIGoogleChromeManagementV1DisplayDevice::is_manufacture_year_Set() const{
    return m_manufacture_year_isSet;
}

bool OAIGoogleChromeManagementV1DisplayDevice::is_manufacture_year_Valid() const{
    return m_manufacture_year_isValid;
}

QString OAIGoogleChromeManagementV1DisplayDevice::getManufacturerId() const {
    return m_manufacturer_id;
}
void OAIGoogleChromeManagementV1DisplayDevice::setManufacturerId(const QString &manufacturer_id) {
    m_manufacturer_id = manufacturer_id;
    m_manufacturer_id_isSet = true;
}

bool OAIGoogleChromeManagementV1DisplayDevice::is_manufacturer_id_Set() const{
    return m_manufacturer_id_isSet;
}

bool OAIGoogleChromeManagementV1DisplayDevice::is_manufacturer_id_Valid() const{
    return m_manufacturer_id_isValid;
}

qint32 OAIGoogleChromeManagementV1DisplayDevice::getModelId() const {
    return m_model_id;
}
void OAIGoogleChromeManagementV1DisplayDevice::setModelId(const qint32 &model_id) {
    m_model_id = model_id;
    m_model_id_isSet = true;
}

bool OAIGoogleChromeManagementV1DisplayDevice::is_model_id_Set() const{
    return m_model_id_isSet;
}

bool OAIGoogleChromeManagementV1DisplayDevice::is_model_id_Valid() const{
    return m_model_id_isValid;
}

bool OAIGoogleChromeManagementV1DisplayDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_height_mm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_width_mm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacture_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1DisplayDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
