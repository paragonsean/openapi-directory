/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse::OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse::OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse::~OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse() {}

void OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse::initializeModel() {

    m_device_aue_count_reports_isSet = false;
    m_device_aue_count_reports_isValid = false;
}

void OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse::fromJsonObject(QJsonObject json) {

    m_device_aue_count_reports_isValid = ::OpenAPI::fromJsonValue(m_device_aue_count_reports, json[QString("deviceAueCountReports")]);
    m_device_aue_count_reports_isSet = !json[QString("deviceAueCountReports")].isNull() && m_device_aue_count_reports_isValid;
}

QString OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_device_aue_count_reports.size() > 0) {
        obj.insert(QString("deviceAueCountReports"), ::OpenAPI::toJsonValue(m_device_aue_count_reports));
    }
    return obj;
}

QList<OAIGoogleChromeManagementV1DeviceAueCountReport> OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse::getDeviceAueCountReports() const {
    return m_device_aue_count_reports;
}
void OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse::setDeviceAueCountReports(const QList<OAIGoogleChromeManagementV1DeviceAueCountReport> &device_aue_count_reports) {
    m_device_aue_count_reports = device_aue_count_reports;
    m_device_aue_count_reports_isSet = true;
}

bool OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse::is_device_aue_count_reports_Set() const{
    return m_device_aue_count_reports_isSet;
}

bool OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse::is_device_aue_count_reports_Valid() const{
    return m_device_aue_count_reports_isValid;
}

bool OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_aue_count_reports.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
