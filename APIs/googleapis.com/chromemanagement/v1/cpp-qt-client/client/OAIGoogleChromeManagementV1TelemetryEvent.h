/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleChromeManagementV1TelemetryEvent.h
 *
 * Telemetry data reported by a managed device.
 */

#ifndef OAIGoogleChromeManagementV1TelemetryEvent_H
#define OAIGoogleChromeManagementV1TelemetryEvent_H

#include <QJsonObject>

#include "OAIGoogleChromeManagementV1TelemetryDeviceInfo.h"
#include "OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.h"
#include "OAIGoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent.h"
#include "OAIGoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent.h"
#include "OAIGoogleChromeManagementV1TelemetryUsbPeripheralsEvent.h"
#include "OAIGoogleChromeManagementV1TelemetryUserInfo.h"
#include "OAIObject.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleChromeManagementV1TelemetryDeviceInfo;
class OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent;
class OAIGoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent;
class OAIGoogleChromeManagementV1TelemetryUsbPeripheralsEvent;
class OAIGoogleChromeManagementV1TelemetryUserInfo;
class OAIGoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent;

class OAIGoogleChromeManagementV1TelemetryEvent : public OAIObject {
public:
    OAIGoogleChromeManagementV1TelemetryEvent();
    OAIGoogleChromeManagementV1TelemetryEvent(QString json);
    ~OAIGoogleChromeManagementV1TelemetryEvent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIObject getAudioSevereUnderrunEvent() const;
    void setAudioSevereUnderrunEvent(const OAIObject &audio_severe_underrun_event);
    bool is_audio_severe_underrun_event_Set() const;
    bool is_audio_severe_underrun_event_Valid() const;

    OAIGoogleChromeManagementV1TelemetryDeviceInfo getDevice() const;
    void setDevice(const OAIGoogleChromeManagementV1TelemetryDeviceInfo &device);
    bool is_device_Set() const;
    bool is_device_Valid() const;

    QString getEventType() const;
    void setEventType(const QString &event_type);
    bool is_event_type_Set() const;
    bool is_event_type_Valid() const;

    OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent getHttpsLatencyChangeEvent() const;
    void setHttpsLatencyChangeEvent(const OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent &https_latency_change_event);
    bool is_https_latency_change_event_Set() const;
    bool is_https_latency_change_event_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIGoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent getNetworkStateChangeEvent() const;
    void setNetworkStateChangeEvent(const OAIGoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent &network_state_change_event);
    bool is_network_state_change_event_Set() const;
    bool is_network_state_change_event_Valid() const;

    QString getReportTime() const;
    void setReportTime(const QString &report_time);
    bool is_report_time_Set() const;
    bool is_report_time_Valid() const;

    OAIGoogleChromeManagementV1TelemetryUsbPeripheralsEvent getUsbPeripheralsEvent() const;
    void setUsbPeripheralsEvent(const OAIGoogleChromeManagementV1TelemetryUsbPeripheralsEvent &usb_peripherals_event);
    bool is_usb_peripherals_event_Set() const;
    bool is_usb_peripherals_event_Valid() const;

    OAIGoogleChromeManagementV1TelemetryUserInfo getUser() const;
    void setUser(const OAIGoogleChromeManagementV1TelemetryUserInfo &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    OAIGoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent getVpnConnectionStateChangeEvent() const;
    void setVpnConnectionStateChangeEvent(const OAIGoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent &vpn_connection_state_change_event);
    bool is_vpn_connection_state_change_event_Set() const;
    bool is_vpn_connection_state_change_event_Valid() const;

    OAIGoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent getWifiSignalStrengthEvent() const;
    void setWifiSignalStrengthEvent(const OAIGoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent &wifi_signal_strength_event);
    bool is_wifi_signal_strength_event_Set() const;
    bool is_wifi_signal_strength_event_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIObject m_audio_severe_underrun_event;
    bool m_audio_severe_underrun_event_isSet;
    bool m_audio_severe_underrun_event_isValid;

    OAIGoogleChromeManagementV1TelemetryDeviceInfo m_device;
    bool m_device_isSet;
    bool m_device_isValid;

    QString m_event_type;
    bool m_event_type_isSet;
    bool m_event_type_isValid;

    OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent m_https_latency_change_event;
    bool m_https_latency_change_event_isSet;
    bool m_https_latency_change_event_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIGoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent m_network_state_change_event;
    bool m_network_state_change_event_isSet;
    bool m_network_state_change_event_isValid;

    QString m_report_time;
    bool m_report_time_isSet;
    bool m_report_time_isValid;

    OAIGoogleChromeManagementV1TelemetryUsbPeripheralsEvent m_usb_peripherals_event;
    bool m_usb_peripherals_event_isSet;
    bool m_usb_peripherals_event_isValid;

    OAIGoogleChromeManagementV1TelemetryUserInfo m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    OAIGoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent m_vpn_connection_state_change_event;
    bool m_vpn_connection_state_change_event_isSet;
    bool m_vpn_connection_state_change_event_isValid;

    OAIGoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent m_wifi_signal_strength_event;
    bool m_wifi_signal_strength_event_isSet;
    bool m_wifi_signal_strength_event_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleChromeManagementV1TelemetryEvent)

#endif // OAIGoogleChromeManagementV1TelemetryEvent_H
