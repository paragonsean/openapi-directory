/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::~OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo() {}

void OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::initializeModel() {

    m_encryption_algorithm_isSet = false;
    m_encryption_algorithm_isValid = false;

    m_encryption_state_isSet = false;
    m_encryption_state_isValid = false;

    m_key_length_isSet = false;
    m_key_length_isValid = false;

    m_max_keys_isSet = false;
    m_max_keys_isValid = false;
}

void OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::fromJsonObject(QJsonObject json) {

    m_encryption_algorithm_isValid = ::OpenAPI::fromJsonValue(m_encryption_algorithm, json[QString("encryptionAlgorithm")]);
    m_encryption_algorithm_isSet = !json[QString("encryptionAlgorithm")].isNull() && m_encryption_algorithm_isValid;

    m_encryption_state_isValid = ::OpenAPI::fromJsonValue(m_encryption_state, json[QString("encryptionState")]);
    m_encryption_state_isSet = !json[QString("encryptionState")].isNull() && m_encryption_state_isValid;

    m_key_length_isValid = ::OpenAPI::fromJsonValue(m_key_length, json[QString("keyLength")]);
    m_key_length_isSet = !json[QString("keyLength")].isNull() && m_key_length_isValid;

    m_max_keys_isValid = ::OpenAPI::fromJsonValue(m_max_keys, json[QString("maxKeys")]);
    m_max_keys_isSet = !json[QString("maxKeys")].isNull() && m_max_keys_isValid;
}

QString OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_algorithm_isSet) {
        obj.insert(QString("encryptionAlgorithm"), ::OpenAPI::toJsonValue(m_encryption_algorithm));
    }
    if (m_encryption_state_isSet) {
        obj.insert(QString("encryptionState"), ::OpenAPI::toJsonValue(m_encryption_state));
    }
    if (m_key_length_isSet) {
        obj.insert(QString("keyLength"), ::OpenAPI::toJsonValue(m_key_length));
    }
    if (m_max_keys_isSet) {
        obj.insert(QString("maxKeys"), ::OpenAPI::toJsonValue(m_max_keys));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::getEncryptionAlgorithm() const {
    return m_encryption_algorithm;
}
void OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::setEncryptionAlgorithm(const QString &encryption_algorithm) {
    m_encryption_algorithm = encryption_algorithm;
    m_encryption_algorithm_isSet = true;
}

bool OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::is_encryption_algorithm_Set() const{
    return m_encryption_algorithm_isSet;
}

bool OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::is_encryption_algorithm_Valid() const{
    return m_encryption_algorithm_isValid;
}

QString OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::getEncryptionState() const {
    return m_encryption_state;
}
void OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::setEncryptionState(const QString &encryption_state) {
    m_encryption_state = encryption_state;
    m_encryption_state_isSet = true;
}

bool OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::is_encryption_state_Set() const{
    return m_encryption_state_isSet;
}

bool OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::is_encryption_state_Valid() const{
    return m_encryption_state_isValid;
}

QString OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::getKeyLength() const {
    return m_key_length;
}
void OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::setKeyLength(const QString &key_length) {
    m_key_length = key_length;
    m_key_length_isSet = true;
}

bool OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::is_key_length_Set() const{
    return m_key_length_isSet;
}

bool OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::is_key_length_Valid() const{
    return m_key_length_isValid;
}

QString OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::getMaxKeys() const {
    return m_max_keys;
}
void OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::setMaxKeys(const QString &max_keys) {
    m_max_keys = max_keys;
    m_max_keys_isSet = true;
}

bool OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::is_max_keys_Set() const{
    return m_max_keys_isSet;
}

bool OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::is_max_keys_Valid() const{
    return m_max_keys_isValid;
}

bool OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_keys_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
