/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1InstalledApp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1InstalledApp::OAIGoogleChromeManagementV1InstalledApp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1InstalledApp::OAIGoogleChromeManagementV1InstalledApp() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1InstalledApp::~OAIGoogleChromeManagementV1InstalledApp() {}

void OAIGoogleChromeManagementV1InstalledApp::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_app_install_type_isSet = false;
    m_app_install_type_isValid = false;

    m_app_source_isSet = false;
    m_app_source_isValid = false;

    m_app_type_isSet = false;
    m_app_type_isValid = false;

    m_browser_device_count_isSet = false;
    m_browser_device_count_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_homepage_uri_isSet = false;
    m_homepage_uri_isValid = false;

    m_os_user_count_isSet = false;
    m_os_user_count_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;
}

void OAIGoogleChromeManagementV1InstalledApp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1InstalledApp::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_app_install_type_isValid = ::OpenAPI::fromJsonValue(m_app_install_type, json[QString("appInstallType")]);
    m_app_install_type_isSet = !json[QString("appInstallType")].isNull() && m_app_install_type_isValid;

    m_app_source_isValid = ::OpenAPI::fromJsonValue(m_app_source, json[QString("appSource")]);
    m_app_source_isSet = !json[QString("appSource")].isNull() && m_app_source_isValid;

    m_app_type_isValid = ::OpenAPI::fromJsonValue(m_app_type, json[QString("appType")]);
    m_app_type_isSet = !json[QString("appType")].isNull() && m_app_type_isValid;

    m_browser_device_count_isValid = ::OpenAPI::fromJsonValue(m_browser_device_count, json[QString("browserDeviceCount")]);
    m_browser_device_count_isSet = !json[QString("browserDeviceCount")].isNull() && m_browser_device_count_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_homepage_uri_isValid = ::OpenAPI::fromJsonValue(m_homepage_uri, json[QString("homepageUri")]);
    m_homepage_uri_isSet = !json[QString("homepageUri")].isNull() && m_homepage_uri_isValid;

    m_os_user_count_isValid = ::OpenAPI::fromJsonValue(m_os_user_count, json[QString("osUserCount")]);
    m_os_user_count_isSet = !json[QString("osUserCount")].isNull() && m_os_user_count_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;
}

QString OAIGoogleChromeManagementV1InstalledApp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1InstalledApp::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_app_install_type_isSet) {
        obj.insert(QString("appInstallType"), ::OpenAPI::toJsonValue(m_app_install_type));
    }
    if (m_app_source_isSet) {
        obj.insert(QString("appSource"), ::OpenAPI::toJsonValue(m_app_source));
    }
    if (m_app_type_isSet) {
        obj.insert(QString("appType"), ::OpenAPI::toJsonValue(m_app_type));
    }
    if (m_browser_device_count_isSet) {
        obj.insert(QString("browserDeviceCount"), ::OpenAPI::toJsonValue(m_browser_device_count));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_homepage_uri_isSet) {
        obj.insert(QString("homepageUri"), ::OpenAPI::toJsonValue(m_homepage_uri));
    }
    if (m_os_user_count_isSet) {
        obj.insert(QString("osUserCount"), ::OpenAPI::toJsonValue(m_os_user_count));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1InstalledApp::getAppId() const {
    return m_app_id;
}
void OAIGoogleChromeManagementV1InstalledApp::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIGoogleChromeManagementV1InstalledApp::getAppInstallType() const {
    return m_app_install_type;
}
void OAIGoogleChromeManagementV1InstalledApp::setAppInstallType(const QString &app_install_type) {
    m_app_install_type = app_install_type;
    m_app_install_type_isSet = true;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_app_install_type_Set() const{
    return m_app_install_type_isSet;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_app_install_type_Valid() const{
    return m_app_install_type_isValid;
}

QString OAIGoogleChromeManagementV1InstalledApp::getAppSource() const {
    return m_app_source;
}
void OAIGoogleChromeManagementV1InstalledApp::setAppSource(const QString &app_source) {
    m_app_source = app_source;
    m_app_source_isSet = true;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_app_source_Set() const{
    return m_app_source_isSet;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_app_source_Valid() const{
    return m_app_source_isValid;
}

QString OAIGoogleChromeManagementV1InstalledApp::getAppType() const {
    return m_app_type;
}
void OAIGoogleChromeManagementV1InstalledApp::setAppType(const QString &app_type) {
    m_app_type = app_type;
    m_app_type_isSet = true;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_app_type_Set() const{
    return m_app_type_isSet;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_app_type_Valid() const{
    return m_app_type_isValid;
}

QString OAIGoogleChromeManagementV1InstalledApp::getBrowserDeviceCount() const {
    return m_browser_device_count;
}
void OAIGoogleChromeManagementV1InstalledApp::setBrowserDeviceCount(const QString &browser_device_count) {
    m_browser_device_count = browser_device_count;
    m_browser_device_count_isSet = true;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_browser_device_count_Set() const{
    return m_browser_device_count_isSet;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_browser_device_count_Valid() const{
    return m_browser_device_count_isValid;
}

QString OAIGoogleChromeManagementV1InstalledApp::getDescription() const {
    return m_description;
}
void OAIGoogleChromeManagementV1InstalledApp::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIGoogleChromeManagementV1InstalledApp::isDisabled() const {
    return m_disabled;
}
void OAIGoogleChromeManagementV1InstalledApp::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QString OAIGoogleChromeManagementV1InstalledApp::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleChromeManagementV1InstalledApp::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGoogleChromeManagementV1InstalledApp::getHomepageUri() const {
    return m_homepage_uri;
}
void OAIGoogleChromeManagementV1InstalledApp::setHomepageUri(const QString &homepage_uri) {
    m_homepage_uri = homepage_uri;
    m_homepage_uri_isSet = true;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_homepage_uri_Set() const{
    return m_homepage_uri_isSet;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_homepage_uri_Valid() const{
    return m_homepage_uri_isValid;
}

QString OAIGoogleChromeManagementV1InstalledApp::getOsUserCount() const {
    return m_os_user_count;
}
void OAIGoogleChromeManagementV1InstalledApp::setOsUserCount(const QString &os_user_count) {
    m_os_user_count = os_user_count;
    m_os_user_count_isSet = true;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_os_user_count_Set() const{
    return m_os_user_count_isSet;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_os_user_count_Valid() const{
    return m_os_user_count_isValid;
}

QList<QString> OAIGoogleChromeManagementV1InstalledApp::getPermissions() const {
    return m_permissions;
}
void OAIGoogleChromeManagementV1InstalledApp::setPermissions(const QList<QString> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIGoogleChromeManagementV1InstalledApp::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool OAIGoogleChromeManagementV1InstalledApp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_install_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_browser_device_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_homepage_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_user_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1InstalledApp::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
