/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::~OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse() {}

void OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::initializeModel() {

    m_no_recent_policy_sync_count_isSet = false;
    m_no_recent_policy_sync_count_isValid = false;

    m_no_recent_user_activity_count_isSet = false;
    m_no_recent_user_activity_count_isValid = false;

    m_os_version_not_compliant_count_isSet = false;
    m_os_version_not_compliant_count_isValid = false;

    m_pending_update_isSet = false;
    m_pending_update_isValid = false;

    m_unsupported_policy_count_isSet = false;
    m_unsupported_policy_count_isValid = false;
}

void OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::fromJsonObject(QJsonObject json) {

    m_no_recent_policy_sync_count_isValid = ::OpenAPI::fromJsonValue(m_no_recent_policy_sync_count, json[QString("noRecentPolicySyncCount")]);
    m_no_recent_policy_sync_count_isSet = !json[QString("noRecentPolicySyncCount")].isNull() && m_no_recent_policy_sync_count_isValid;

    m_no_recent_user_activity_count_isValid = ::OpenAPI::fromJsonValue(m_no_recent_user_activity_count, json[QString("noRecentUserActivityCount")]);
    m_no_recent_user_activity_count_isSet = !json[QString("noRecentUserActivityCount")].isNull() && m_no_recent_user_activity_count_isValid;

    m_os_version_not_compliant_count_isValid = ::OpenAPI::fromJsonValue(m_os_version_not_compliant_count, json[QString("osVersionNotCompliantCount")]);
    m_os_version_not_compliant_count_isSet = !json[QString("osVersionNotCompliantCount")].isNull() && m_os_version_not_compliant_count_isValid;

    m_pending_update_isValid = ::OpenAPI::fromJsonValue(m_pending_update, json[QString("pendingUpdate")]);
    m_pending_update_isSet = !json[QString("pendingUpdate")].isNull() && m_pending_update_isValid;

    m_unsupported_policy_count_isValid = ::OpenAPI::fromJsonValue(m_unsupported_policy_count, json[QString("unsupportedPolicyCount")]);
    m_unsupported_policy_count_isSet = !json[QString("unsupportedPolicyCount")].isNull() && m_unsupported_policy_count_isValid;
}

QString OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_no_recent_policy_sync_count_isSet) {
        obj.insert(QString("noRecentPolicySyncCount"), ::OpenAPI::toJsonValue(m_no_recent_policy_sync_count));
    }
    if (m_no_recent_user_activity_count_isSet) {
        obj.insert(QString("noRecentUserActivityCount"), ::OpenAPI::toJsonValue(m_no_recent_user_activity_count));
    }
    if (m_os_version_not_compliant_count_isSet) {
        obj.insert(QString("osVersionNotCompliantCount"), ::OpenAPI::toJsonValue(m_os_version_not_compliant_count));
    }
    if (m_pending_update_isSet) {
        obj.insert(QString("pendingUpdate"), ::OpenAPI::toJsonValue(m_pending_update));
    }
    if (m_unsupported_policy_count_isSet) {
        obj.insert(QString("unsupportedPolicyCount"), ::OpenAPI::toJsonValue(m_unsupported_policy_count));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::getNoRecentPolicySyncCount() const {
    return m_no_recent_policy_sync_count;
}
void OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::setNoRecentPolicySyncCount(const QString &no_recent_policy_sync_count) {
    m_no_recent_policy_sync_count = no_recent_policy_sync_count;
    m_no_recent_policy_sync_count_isSet = true;
}

bool OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::is_no_recent_policy_sync_count_Set() const{
    return m_no_recent_policy_sync_count_isSet;
}

bool OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::is_no_recent_policy_sync_count_Valid() const{
    return m_no_recent_policy_sync_count_isValid;
}

QString OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::getNoRecentUserActivityCount() const {
    return m_no_recent_user_activity_count;
}
void OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::setNoRecentUserActivityCount(const QString &no_recent_user_activity_count) {
    m_no_recent_user_activity_count = no_recent_user_activity_count;
    m_no_recent_user_activity_count_isSet = true;
}

bool OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::is_no_recent_user_activity_count_Set() const{
    return m_no_recent_user_activity_count_isSet;
}

bool OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::is_no_recent_user_activity_count_Valid() const{
    return m_no_recent_user_activity_count_isValid;
}

QString OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::getOsVersionNotCompliantCount() const {
    return m_os_version_not_compliant_count;
}
void OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::setOsVersionNotCompliantCount(const QString &os_version_not_compliant_count) {
    m_os_version_not_compliant_count = os_version_not_compliant_count;
    m_os_version_not_compliant_count_isSet = true;
}

bool OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::is_os_version_not_compliant_count_Set() const{
    return m_os_version_not_compliant_count_isSet;
}

bool OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::is_os_version_not_compliant_count_Valid() const{
    return m_os_version_not_compliant_count_isValid;
}

QString OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::getPendingUpdate() const {
    return m_pending_update;
}
void OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::setPendingUpdate(const QString &pending_update) {
    m_pending_update = pending_update;
    m_pending_update_isSet = true;
}

bool OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::is_pending_update_Set() const{
    return m_pending_update_isSet;
}

bool OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::is_pending_update_Valid() const{
    return m_pending_update_isValid;
}

QString OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::getUnsupportedPolicyCount() const {
    return m_unsupported_policy_count;
}
void OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::setUnsupportedPolicyCount(const QString &unsupported_policy_count) {
    m_unsupported_policy_count = unsupported_policy_count;
    m_unsupported_policy_count_isSet = true;
}

bool OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::is_unsupported_policy_count_Set() const{
    return m_unsupported_policy_count_isSet;
}

bool OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::is_unsupported_policy_count_Valid() const{
    return m_unsupported_policy_count_isValid;
}

bool OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_no_recent_policy_sync_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_recent_user_activity_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_not_compliant_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsupported_policy_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
