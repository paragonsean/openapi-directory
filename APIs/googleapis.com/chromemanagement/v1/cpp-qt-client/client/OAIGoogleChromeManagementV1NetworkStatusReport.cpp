/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1NetworkStatusReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1NetworkStatusReport::OAIGoogleChromeManagementV1NetworkStatusReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1NetworkStatusReport::OAIGoogleChromeManagementV1NetworkStatusReport() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1NetworkStatusReport::~OAIGoogleChromeManagementV1NetworkStatusReport() {}

void OAIGoogleChromeManagementV1NetworkStatusReport::initializeModel() {

    m_connection_state_isSet = false;
    m_connection_state_isValid = false;

    m_connection_type_isSet = false;
    m_connection_type_isValid = false;

    m_encryption_on_isSet = false;
    m_encryption_on_isValid = false;

    m_gateway_ip_address_isSet = false;
    m_gateway_ip_address_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_lan_ip_address_isSet = false;
    m_lan_ip_address_isValid = false;

    m_receiving_bit_rate_mbps_isSet = false;
    m_receiving_bit_rate_mbps_isValid = false;

    m_report_time_isSet = false;
    m_report_time_isValid = false;

    m_sample_frequency_isSet = false;
    m_sample_frequency_isValid = false;

    m_signal_strength_dbm_isSet = false;
    m_signal_strength_dbm_isValid = false;

    m_transmission_bit_rate_mbps_isSet = false;
    m_transmission_bit_rate_mbps_isValid = false;

    m_transmission_power_dbm_isSet = false;
    m_transmission_power_dbm_isValid = false;

    m_wifi_link_quality_isSet = false;
    m_wifi_link_quality_isValid = false;

    m_wifi_power_management_enabled_isSet = false;
    m_wifi_power_management_enabled_isValid = false;
}

void OAIGoogleChromeManagementV1NetworkStatusReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1NetworkStatusReport::fromJsonObject(QJsonObject json) {

    m_connection_state_isValid = ::OpenAPI::fromJsonValue(m_connection_state, json[QString("connectionState")]);
    m_connection_state_isSet = !json[QString("connectionState")].isNull() && m_connection_state_isValid;

    m_connection_type_isValid = ::OpenAPI::fromJsonValue(m_connection_type, json[QString("connectionType")]);
    m_connection_type_isSet = !json[QString("connectionType")].isNull() && m_connection_type_isValid;

    m_encryption_on_isValid = ::OpenAPI::fromJsonValue(m_encryption_on, json[QString("encryptionOn")]);
    m_encryption_on_isSet = !json[QString("encryptionOn")].isNull() && m_encryption_on_isValid;

    m_gateway_ip_address_isValid = ::OpenAPI::fromJsonValue(m_gateway_ip_address, json[QString("gatewayIpAddress")]);
    m_gateway_ip_address_isSet = !json[QString("gatewayIpAddress")].isNull() && m_gateway_ip_address_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_lan_ip_address_isValid = ::OpenAPI::fromJsonValue(m_lan_ip_address, json[QString("lanIpAddress")]);
    m_lan_ip_address_isSet = !json[QString("lanIpAddress")].isNull() && m_lan_ip_address_isValid;

    m_receiving_bit_rate_mbps_isValid = ::OpenAPI::fromJsonValue(m_receiving_bit_rate_mbps, json[QString("receivingBitRateMbps")]);
    m_receiving_bit_rate_mbps_isSet = !json[QString("receivingBitRateMbps")].isNull() && m_receiving_bit_rate_mbps_isValid;

    m_report_time_isValid = ::OpenAPI::fromJsonValue(m_report_time, json[QString("reportTime")]);
    m_report_time_isSet = !json[QString("reportTime")].isNull() && m_report_time_isValid;

    m_sample_frequency_isValid = ::OpenAPI::fromJsonValue(m_sample_frequency, json[QString("sampleFrequency")]);
    m_sample_frequency_isSet = !json[QString("sampleFrequency")].isNull() && m_sample_frequency_isValid;

    m_signal_strength_dbm_isValid = ::OpenAPI::fromJsonValue(m_signal_strength_dbm, json[QString("signalStrengthDbm")]);
    m_signal_strength_dbm_isSet = !json[QString("signalStrengthDbm")].isNull() && m_signal_strength_dbm_isValid;

    m_transmission_bit_rate_mbps_isValid = ::OpenAPI::fromJsonValue(m_transmission_bit_rate_mbps, json[QString("transmissionBitRateMbps")]);
    m_transmission_bit_rate_mbps_isSet = !json[QString("transmissionBitRateMbps")].isNull() && m_transmission_bit_rate_mbps_isValid;

    m_transmission_power_dbm_isValid = ::OpenAPI::fromJsonValue(m_transmission_power_dbm, json[QString("transmissionPowerDbm")]);
    m_transmission_power_dbm_isSet = !json[QString("transmissionPowerDbm")].isNull() && m_transmission_power_dbm_isValid;

    m_wifi_link_quality_isValid = ::OpenAPI::fromJsonValue(m_wifi_link_quality, json[QString("wifiLinkQuality")]);
    m_wifi_link_quality_isSet = !json[QString("wifiLinkQuality")].isNull() && m_wifi_link_quality_isValid;

    m_wifi_power_management_enabled_isValid = ::OpenAPI::fromJsonValue(m_wifi_power_management_enabled, json[QString("wifiPowerManagementEnabled")]);
    m_wifi_power_management_enabled_isSet = !json[QString("wifiPowerManagementEnabled")].isNull() && m_wifi_power_management_enabled_isValid;
}

QString OAIGoogleChromeManagementV1NetworkStatusReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1NetworkStatusReport::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_state_isSet) {
        obj.insert(QString("connectionState"), ::OpenAPI::toJsonValue(m_connection_state));
    }
    if (m_connection_type_isSet) {
        obj.insert(QString("connectionType"), ::OpenAPI::toJsonValue(m_connection_type));
    }
    if (m_encryption_on_isSet) {
        obj.insert(QString("encryptionOn"), ::OpenAPI::toJsonValue(m_encryption_on));
    }
    if (m_gateway_ip_address_isSet) {
        obj.insert(QString("gatewayIpAddress"), ::OpenAPI::toJsonValue(m_gateway_ip_address));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_lan_ip_address_isSet) {
        obj.insert(QString("lanIpAddress"), ::OpenAPI::toJsonValue(m_lan_ip_address));
    }
    if (m_receiving_bit_rate_mbps_isSet) {
        obj.insert(QString("receivingBitRateMbps"), ::OpenAPI::toJsonValue(m_receiving_bit_rate_mbps));
    }
    if (m_report_time_isSet) {
        obj.insert(QString("reportTime"), ::OpenAPI::toJsonValue(m_report_time));
    }
    if (m_sample_frequency_isSet) {
        obj.insert(QString("sampleFrequency"), ::OpenAPI::toJsonValue(m_sample_frequency));
    }
    if (m_signal_strength_dbm_isSet) {
        obj.insert(QString("signalStrengthDbm"), ::OpenAPI::toJsonValue(m_signal_strength_dbm));
    }
    if (m_transmission_bit_rate_mbps_isSet) {
        obj.insert(QString("transmissionBitRateMbps"), ::OpenAPI::toJsonValue(m_transmission_bit_rate_mbps));
    }
    if (m_transmission_power_dbm_isSet) {
        obj.insert(QString("transmissionPowerDbm"), ::OpenAPI::toJsonValue(m_transmission_power_dbm));
    }
    if (m_wifi_link_quality_isSet) {
        obj.insert(QString("wifiLinkQuality"), ::OpenAPI::toJsonValue(m_wifi_link_quality));
    }
    if (m_wifi_power_management_enabled_isSet) {
        obj.insert(QString("wifiPowerManagementEnabled"), ::OpenAPI::toJsonValue(m_wifi_power_management_enabled));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1NetworkStatusReport::getConnectionState() const {
    return m_connection_state;
}
void OAIGoogleChromeManagementV1NetworkStatusReport::setConnectionState(const QString &connection_state) {
    m_connection_state = connection_state;
    m_connection_state_isSet = true;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_connection_state_Set() const{
    return m_connection_state_isSet;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_connection_state_Valid() const{
    return m_connection_state_isValid;
}

QString OAIGoogleChromeManagementV1NetworkStatusReport::getConnectionType() const {
    return m_connection_type;
}
void OAIGoogleChromeManagementV1NetworkStatusReport::setConnectionType(const QString &connection_type) {
    m_connection_type = connection_type;
    m_connection_type_isSet = true;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_connection_type_Set() const{
    return m_connection_type_isSet;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_connection_type_Valid() const{
    return m_connection_type_isValid;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::isEncryptionOn() const {
    return m_encryption_on;
}
void OAIGoogleChromeManagementV1NetworkStatusReport::setEncryptionOn(const bool &encryption_on) {
    m_encryption_on = encryption_on;
    m_encryption_on_isSet = true;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_encryption_on_Set() const{
    return m_encryption_on_isSet;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_encryption_on_Valid() const{
    return m_encryption_on_isValid;
}

QString OAIGoogleChromeManagementV1NetworkStatusReport::getGatewayIpAddress() const {
    return m_gateway_ip_address;
}
void OAIGoogleChromeManagementV1NetworkStatusReport::setGatewayIpAddress(const QString &gateway_ip_address) {
    m_gateway_ip_address = gateway_ip_address;
    m_gateway_ip_address_isSet = true;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_gateway_ip_address_Set() const{
    return m_gateway_ip_address_isSet;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_gateway_ip_address_Valid() const{
    return m_gateway_ip_address_isValid;
}

QString OAIGoogleChromeManagementV1NetworkStatusReport::getGuid() const {
    return m_guid;
}
void OAIGoogleChromeManagementV1NetworkStatusReport::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_guid_Valid() const{
    return m_guid_isValid;
}

QString OAIGoogleChromeManagementV1NetworkStatusReport::getLanIpAddress() const {
    return m_lan_ip_address;
}
void OAIGoogleChromeManagementV1NetworkStatusReport::setLanIpAddress(const QString &lan_ip_address) {
    m_lan_ip_address = lan_ip_address;
    m_lan_ip_address_isSet = true;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_lan_ip_address_Set() const{
    return m_lan_ip_address_isSet;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_lan_ip_address_Valid() const{
    return m_lan_ip_address_isValid;
}

QString OAIGoogleChromeManagementV1NetworkStatusReport::getReceivingBitRateMbps() const {
    return m_receiving_bit_rate_mbps;
}
void OAIGoogleChromeManagementV1NetworkStatusReport::setReceivingBitRateMbps(const QString &receiving_bit_rate_mbps) {
    m_receiving_bit_rate_mbps = receiving_bit_rate_mbps;
    m_receiving_bit_rate_mbps_isSet = true;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_receiving_bit_rate_mbps_Set() const{
    return m_receiving_bit_rate_mbps_isSet;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_receiving_bit_rate_mbps_Valid() const{
    return m_receiving_bit_rate_mbps_isValid;
}

QString OAIGoogleChromeManagementV1NetworkStatusReport::getReportTime() const {
    return m_report_time;
}
void OAIGoogleChromeManagementV1NetworkStatusReport::setReportTime(const QString &report_time) {
    m_report_time = report_time;
    m_report_time_isSet = true;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_report_time_Set() const{
    return m_report_time_isSet;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_report_time_Valid() const{
    return m_report_time_isValid;
}

QString OAIGoogleChromeManagementV1NetworkStatusReport::getSampleFrequency() const {
    return m_sample_frequency;
}
void OAIGoogleChromeManagementV1NetworkStatusReport::setSampleFrequency(const QString &sample_frequency) {
    m_sample_frequency = sample_frequency;
    m_sample_frequency_isSet = true;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_sample_frequency_Set() const{
    return m_sample_frequency_isSet;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_sample_frequency_Valid() const{
    return m_sample_frequency_isValid;
}

qint32 OAIGoogleChromeManagementV1NetworkStatusReport::getSignalStrengthDbm() const {
    return m_signal_strength_dbm;
}
void OAIGoogleChromeManagementV1NetworkStatusReport::setSignalStrengthDbm(const qint32 &signal_strength_dbm) {
    m_signal_strength_dbm = signal_strength_dbm;
    m_signal_strength_dbm_isSet = true;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_signal_strength_dbm_Set() const{
    return m_signal_strength_dbm_isSet;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_signal_strength_dbm_Valid() const{
    return m_signal_strength_dbm_isValid;
}

QString OAIGoogleChromeManagementV1NetworkStatusReport::getTransmissionBitRateMbps() const {
    return m_transmission_bit_rate_mbps;
}
void OAIGoogleChromeManagementV1NetworkStatusReport::setTransmissionBitRateMbps(const QString &transmission_bit_rate_mbps) {
    m_transmission_bit_rate_mbps = transmission_bit_rate_mbps;
    m_transmission_bit_rate_mbps_isSet = true;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_transmission_bit_rate_mbps_Set() const{
    return m_transmission_bit_rate_mbps_isSet;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_transmission_bit_rate_mbps_Valid() const{
    return m_transmission_bit_rate_mbps_isValid;
}

qint32 OAIGoogleChromeManagementV1NetworkStatusReport::getTransmissionPowerDbm() const {
    return m_transmission_power_dbm;
}
void OAIGoogleChromeManagementV1NetworkStatusReport::setTransmissionPowerDbm(const qint32 &transmission_power_dbm) {
    m_transmission_power_dbm = transmission_power_dbm;
    m_transmission_power_dbm_isSet = true;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_transmission_power_dbm_Set() const{
    return m_transmission_power_dbm_isSet;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_transmission_power_dbm_Valid() const{
    return m_transmission_power_dbm_isValid;
}

QString OAIGoogleChromeManagementV1NetworkStatusReport::getWifiLinkQuality() const {
    return m_wifi_link_quality;
}
void OAIGoogleChromeManagementV1NetworkStatusReport::setWifiLinkQuality(const QString &wifi_link_quality) {
    m_wifi_link_quality = wifi_link_quality;
    m_wifi_link_quality_isSet = true;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_wifi_link_quality_Set() const{
    return m_wifi_link_quality_isSet;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_wifi_link_quality_Valid() const{
    return m_wifi_link_quality_isValid;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::isWifiPowerManagementEnabled() const {
    return m_wifi_power_management_enabled;
}
void OAIGoogleChromeManagementV1NetworkStatusReport::setWifiPowerManagementEnabled(const bool &wifi_power_management_enabled) {
    m_wifi_power_management_enabled = wifi_power_management_enabled;
    m_wifi_power_management_enabled_isSet = true;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_wifi_power_management_enabled_Set() const{
    return m_wifi_power_management_enabled_isSet;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::is_wifi_power_management_enabled_Valid() const{
    return m_wifi_power_management_enabled_isValid;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lan_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_bit_rate_mbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signal_strength_dbm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission_bit_rate_mbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission_power_dbm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_link_quality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_power_management_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1NetworkStatusReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
