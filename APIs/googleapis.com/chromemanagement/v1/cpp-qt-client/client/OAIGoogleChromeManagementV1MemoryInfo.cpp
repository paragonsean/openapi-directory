/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1MemoryInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1MemoryInfo::OAIGoogleChromeManagementV1MemoryInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1MemoryInfo::OAIGoogleChromeManagementV1MemoryInfo() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1MemoryInfo::~OAIGoogleChromeManagementV1MemoryInfo() {}

void OAIGoogleChromeManagementV1MemoryInfo::initializeModel() {

    m_available_ram_bytes_isSet = false;
    m_available_ram_bytes_isValid = false;

    m_total_memory_encryption_isSet = false;
    m_total_memory_encryption_isValid = false;

    m_total_ram_bytes_isSet = false;
    m_total_ram_bytes_isValid = false;
}

void OAIGoogleChromeManagementV1MemoryInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1MemoryInfo::fromJsonObject(QJsonObject json) {

    m_available_ram_bytes_isValid = ::OpenAPI::fromJsonValue(m_available_ram_bytes, json[QString("availableRamBytes")]);
    m_available_ram_bytes_isSet = !json[QString("availableRamBytes")].isNull() && m_available_ram_bytes_isValid;

    m_total_memory_encryption_isValid = ::OpenAPI::fromJsonValue(m_total_memory_encryption, json[QString("totalMemoryEncryption")]);
    m_total_memory_encryption_isSet = !json[QString("totalMemoryEncryption")].isNull() && m_total_memory_encryption_isValid;

    m_total_ram_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_ram_bytes, json[QString("totalRamBytes")]);
    m_total_ram_bytes_isSet = !json[QString("totalRamBytes")].isNull() && m_total_ram_bytes_isValid;
}

QString OAIGoogleChromeManagementV1MemoryInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1MemoryInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_available_ram_bytes_isSet) {
        obj.insert(QString("availableRamBytes"), ::OpenAPI::toJsonValue(m_available_ram_bytes));
    }
    if (m_total_memory_encryption.isSet()) {
        obj.insert(QString("totalMemoryEncryption"), ::OpenAPI::toJsonValue(m_total_memory_encryption));
    }
    if (m_total_ram_bytes_isSet) {
        obj.insert(QString("totalRamBytes"), ::OpenAPI::toJsonValue(m_total_ram_bytes));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1MemoryInfo::getAvailableRamBytes() const {
    return m_available_ram_bytes;
}
void OAIGoogleChromeManagementV1MemoryInfo::setAvailableRamBytes(const QString &available_ram_bytes) {
    m_available_ram_bytes = available_ram_bytes;
    m_available_ram_bytes_isSet = true;
}

bool OAIGoogleChromeManagementV1MemoryInfo::is_available_ram_bytes_Set() const{
    return m_available_ram_bytes_isSet;
}

bool OAIGoogleChromeManagementV1MemoryInfo::is_available_ram_bytes_Valid() const{
    return m_available_ram_bytes_isValid;
}

OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo OAIGoogleChromeManagementV1MemoryInfo::getTotalMemoryEncryption() const {
    return m_total_memory_encryption;
}
void OAIGoogleChromeManagementV1MemoryInfo::setTotalMemoryEncryption(const OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo &total_memory_encryption) {
    m_total_memory_encryption = total_memory_encryption;
    m_total_memory_encryption_isSet = true;
}

bool OAIGoogleChromeManagementV1MemoryInfo::is_total_memory_encryption_Set() const{
    return m_total_memory_encryption_isSet;
}

bool OAIGoogleChromeManagementV1MemoryInfo::is_total_memory_encryption_Valid() const{
    return m_total_memory_encryption_isValid;
}

QString OAIGoogleChromeManagementV1MemoryInfo::getTotalRamBytes() const {
    return m_total_ram_bytes;
}
void OAIGoogleChromeManagementV1MemoryInfo::setTotalRamBytes(const QString &total_ram_bytes) {
    m_total_ram_bytes = total_ram_bytes;
    m_total_ram_bytes_isSet = true;
}

bool OAIGoogleChromeManagementV1MemoryInfo::is_total_ram_bytes_Set() const{
    return m_total_ram_bytes_isSet;
}

bool OAIGoogleChromeManagementV1MemoryInfo::is_total_ram_bytes_Valid() const{
    return m_total_ram_bytes_isValid;
}

bool OAIGoogleChromeManagementV1MemoryInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_ram_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_memory_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_ram_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1MemoryInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
