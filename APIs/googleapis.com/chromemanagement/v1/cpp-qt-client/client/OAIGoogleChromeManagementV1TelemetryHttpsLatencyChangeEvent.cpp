/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent::OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent::OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent::~OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent() {}

void OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent::initializeModel() {

    m_https_latency_routine_data_isSet = false;
    m_https_latency_routine_data_isValid = false;

    m_https_latency_state_isSet = false;
    m_https_latency_state_isValid = false;
}

void OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent::fromJsonObject(QJsonObject json) {

    m_https_latency_routine_data_isValid = ::OpenAPI::fromJsonValue(m_https_latency_routine_data, json[QString("httpsLatencyRoutineData")]);
    m_https_latency_routine_data_isSet = !json[QString("httpsLatencyRoutineData")].isNull() && m_https_latency_routine_data_isValid;

    m_https_latency_state_isValid = ::OpenAPI::fromJsonValue(m_https_latency_state, json[QString("httpsLatencyState")]);
    m_https_latency_state_isSet = !json[QString("httpsLatencyState")].isNull() && m_https_latency_state_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_https_latency_routine_data.isSet()) {
        obj.insert(QString("httpsLatencyRoutineData"), ::OpenAPI::toJsonValue(m_https_latency_routine_data));
    }
    if (m_https_latency_state_isSet) {
        obj.insert(QString("httpsLatencyState"), ::OpenAPI::toJsonValue(m_https_latency_state));
    }
    return obj;
}

OAIGoogleChromeManagementV1HttpsLatencyRoutineData OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent::getHttpsLatencyRoutineData() const {
    return m_https_latency_routine_data;
}
void OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent::setHttpsLatencyRoutineData(const OAIGoogleChromeManagementV1HttpsLatencyRoutineData &https_latency_routine_data) {
    m_https_latency_routine_data = https_latency_routine_data;
    m_https_latency_routine_data_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent::is_https_latency_routine_data_Set() const{
    return m_https_latency_routine_data_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent::is_https_latency_routine_data_Valid() const{
    return m_https_latency_routine_data_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent::getHttpsLatencyState() const {
    return m_https_latency_state;
}
void OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent::setHttpsLatencyState(const QString &https_latency_state) {
    m_https_latency_state = https_latency_state;
    m_https_latency_state_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent::is_https_latency_state_Set() const{
    return m_https_latency_state_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent::is_https_latency_state_Valid() const{
    return m_https_latency_state_isValid;
}

bool OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_https_latency_routine_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_https_latency_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
