/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleChromeManagementV1InstalledApp.h
 *
 * Describes an installed app.
 */

#ifndef OAIGoogleChromeManagementV1InstalledApp_H
#define OAIGoogleChromeManagementV1InstalledApp_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleChromeManagementV1InstalledApp : public OAIObject {
public:
    OAIGoogleChromeManagementV1InstalledApp();
    OAIGoogleChromeManagementV1InstalledApp(QString json);
    ~OAIGoogleChromeManagementV1InstalledApp() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAppId() const;
    void setAppId(const QString &app_id);
    bool is_app_id_Set() const;
    bool is_app_id_Valid() const;

    QString getAppInstallType() const;
    void setAppInstallType(const QString &app_install_type);
    bool is_app_install_type_Set() const;
    bool is_app_install_type_Valid() const;

    QString getAppSource() const;
    void setAppSource(const QString &app_source);
    bool is_app_source_Set() const;
    bool is_app_source_Valid() const;

    QString getAppType() const;
    void setAppType(const QString &app_type);
    bool is_app_type_Set() const;
    bool is_app_type_Valid() const;

    QString getBrowserDeviceCount() const;
    void setBrowserDeviceCount(const QString &browser_device_count);
    bool is_browser_device_count_Set() const;
    bool is_browser_device_count_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool isDisabled() const;
    void setDisabled(const bool &disabled);
    bool is_disabled_Set() const;
    bool is_disabled_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getHomepageUri() const;
    void setHomepageUri(const QString &homepage_uri);
    bool is_homepage_uri_Set() const;
    bool is_homepage_uri_Valid() const;

    QString getOsUserCount() const;
    void setOsUserCount(const QString &os_user_count);
    bool is_os_user_count_Set() const;
    bool is_os_user_count_Valid() const;

    QList<QString> getPermissions() const;
    void setPermissions(const QList<QString> &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_app_id;
    bool m_app_id_isSet;
    bool m_app_id_isValid;

    QString m_app_install_type;
    bool m_app_install_type_isSet;
    bool m_app_install_type_isValid;

    QString m_app_source;
    bool m_app_source_isSet;
    bool m_app_source_isValid;

    QString m_app_type;
    bool m_app_type_isSet;
    bool m_app_type_isValid;

    QString m_browser_device_count;
    bool m_browser_device_count_isSet;
    bool m_browser_device_count_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_disabled;
    bool m_disabled_isSet;
    bool m_disabled_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_homepage_uri;
    bool m_homepage_uri_isSet;
    bool m_homepage_uri_isValid;

    QString m_os_user_count;
    bool m_os_user_count_isSet;
    bool m_os_user_count_isValid;

    QList<QString> m_permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleChromeManagementV1InstalledApp)

#endif // OAIGoogleChromeManagementV1InstalledApp_H
