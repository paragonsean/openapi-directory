/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleChromeManagementV1NetworkStatusReport.h
 *
 * State of visible/configured networks. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportNetworkStatus](https://chromeenterprise.google/policies/#ReportNetworkStatus) * Data Collection Frequency: 60 minutes * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: Yes * Granular permission needed: TELEMETRY_API_NETWORK_REPORT
 */

#ifndef OAIGoogleChromeManagementV1NetworkStatusReport_H
#define OAIGoogleChromeManagementV1NetworkStatusReport_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleChromeManagementV1NetworkStatusReport : public OAIObject {
public:
    OAIGoogleChromeManagementV1NetworkStatusReport();
    OAIGoogleChromeManagementV1NetworkStatusReport(QString json);
    ~OAIGoogleChromeManagementV1NetworkStatusReport() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConnectionState() const;
    void setConnectionState(const QString &connection_state);
    bool is_connection_state_Set() const;
    bool is_connection_state_Valid() const;

    QString getConnectionType() const;
    void setConnectionType(const QString &connection_type);
    bool is_connection_type_Set() const;
    bool is_connection_type_Valid() const;

    bool isEncryptionOn() const;
    void setEncryptionOn(const bool &encryption_on);
    bool is_encryption_on_Set() const;
    bool is_encryption_on_Valid() const;

    QString getGatewayIpAddress() const;
    void setGatewayIpAddress(const QString &gateway_ip_address);
    bool is_gateway_ip_address_Set() const;
    bool is_gateway_ip_address_Valid() const;

    QString getGuid() const;
    void setGuid(const QString &guid);
    bool is_guid_Set() const;
    bool is_guid_Valid() const;

    QString getLanIpAddress() const;
    void setLanIpAddress(const QString &lan_ip_address);
    bool is_lan_ip_address_Set() const;
    bool is_lan_ip_address_Valid() const;

    QString getReceivingBitRateMbps() const;
    void setReceivingBitRateMbps(const QString &receiving_bit_rate_mbps);
    bool is_receiving_bit_rate_mbps_Set() const;
    bool is_receiving_bit_rate_mbps_Valid() const;

    QString getReportTime() const;
    void setReportTime(const QString &report_time);
    bool is_report_time_Set() const;
    bool is_report_time_Valid() const;

    QString getSampleFrequency() const;
    void setSampleFrequency(const QString &sample_frequency);
    bool is_sample_frequency_Set() const;
    bool is_sample_frequency_Valid() const;

    qint32 getSignalStrengthDbm() const;
    void setSignalStrengthDbm(const qint32 &signal_strength_dbm);
    bool is_signal_strength_dbm_Set() const;
    bool is_signal_strength_dbm_Valid() const;

    QString getTransmissionBitRateMbps() const;
    void setTransmissionBitRateMbps(const QString &transmission_bit_rate_mbps);
    bool is_transmission_bit_rate_mbps_Set() const;
    bool is_transmission_bit_rate_mbps_Valid() const;

    qint32 getTransmissionPowerDbm() const;
    void setTransmissionPowerDbm(const qint32 &transmission_power_dbm);
    bool is_transmission_power_dbm_Set() const;
    bool is_transmission_power_dbm_Valid() const;

    QString getWifiLinkQuality() const;
    void setWifiLinkQuality(const QString &wifi_link_quality);
    bool is_wifi_link_quality_Set() const;
    bool is_wifi_link_quality_Valid() const;

    bool isWifiPowerManagementEnabled() const;
    void setWifiPowerManagementEnabled(const bool &wifi_power_management_enabled);
    bool is_wifi_power_management_enabled_Set() const;
    bool is_wifi_power_management_enabled_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_connection_state;
    bool m_connection_state_isSet;
    bool m_connection_state_isValid;

    QString m_connection_type;
    bool m_connection_type_isSet;
    bool m_connection_type_isValid;

    bool m_encryption_on;
    bool m_encryption_on_isSet;
    bool m_encryption_on_isValid;

    QString m_gateway_ip_address;
    bool m_gateway_ip_address_isSet;
    bool m_gateway_ip_address_isValid;

    QString m_guid;
    bool m_guid_isSet;
    bool m_guid_isValid;

    QString m_lan_ip_address;
    bool m_lan_ip_address_isSet;
    bool m_lan_ip_address_isValid;

    QString m_receiving_bit_rate_mbps;
    bool m_receiving_bit_rate_mbps_isSet;
    bool m_receiving_bit_rate_mbps_isValid;

    QString m_report_time;
    bool m_report_time_isSet;
    bool m_report_time_isValid;

    QString m_sample_frequency;
    bool m_sample_frequency_isSet;
    bool m_sample_frequency_isValid;

    qint32 m_signal_strength_dbm;
    bool m_signal_strength_dbm_isSet;
    bool m_signal_strength_dbm_isValid;

    QString m_transmission_bit_rate_mbps;
    bool m_transmission_bit_rate_mbps_isSet;
    bool m_transmission_bit_rate_mbps_isValid;

    qint32 m_transmission_power_dbm;
    bool m_transmission_power_dbm_isSet;
    bool m_transmission_power_dbm_isValid;

    QString m_wifi_link_quality;
    bool m_wifi_link_quality_isSet;
    bool m_wifi_link_quality_isValid;

    bool m_wifi_power_management_enabled;
    bool m_wifi_power_management_enabled_isSet;
    bool m_wifi_power_management_enabled_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleChromeManagementV1NetworkStatusReport)

#endif // OAIGoogleChromeManagementV1NetworkStatusReport_H
