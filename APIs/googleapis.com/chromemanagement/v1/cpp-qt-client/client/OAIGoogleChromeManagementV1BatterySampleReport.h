/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleChromeManagementV1BatterySampleReport.h
 *
 * Sampling data for battery. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDevicePowerStatus](https://chromeenterprise.google/policies/#ReportDevicePowerStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A
 */

#ifndef OAIGoogleChromeManagementV1BatterySampleReport_H
#define OAIGoogleChromeManagementV1BatterySampleReport_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleChromeManagementV1BatterySampleReport : public OAIObject {
public:
    OAIGoogleChromeManagementV1BatterySampleReport();
    OAIGoogleChromeManagementV1BatterySampleReport(QString json);
    ~OAIGoogleChromeManagementV1BatterySampleReport() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getChargeRate() const;
    void setChargeRate(const qint32 &charge_rate);
    bool is_charge_rate_Set() const;
    bool is_charge_rate_Valid() const;

    QString getCurrent() const;
    void setCurrent(const QString &current);
    bool is_current_Set() const;
    bool is_current_Valid() const;

    qint32 getDischargeRate() const;
    void setDischargeRate(const qint32 &discharge_rate);
    bool is_discharge_rate_Set() const;
    bool is_discharge_rate_Valid() const;

    QString getRemainingCapacity() const;
    void setRemainingCapacity(const QString &remaining_capacity);
    bool is_remaining_capacity_Set() const;
    bool is_remaining_capacity_Valid() const;

    QString getReportTime() const;
    void setReportTime(const QString &report_time);
    bool is_report_time_Set() const;
    bool is_report_time_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    qint32 getTemperature() const;
    void setTemperature(const qint32 &temperature);
    bool is_temperature_Set() const;
    bool is_temperature_Valid() const;

    QString getVoltage() const;
    void setVoltage(const QString &voltage);
    bool is_voltage_Set() const;
    bool is_voltage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_charge_rate;
    bool m_charge_rate_isSet;
    bool m_charge_rate_isValid;

    QString m_current;
    bool m_current_isSet;
    bool m_current_isValid;

    qint32 m_discharge_rate;
    bool m_discharge_rate_isSet;
    bool m_discharge_rate_isValid;

    QString m_remaining_capacity;
    bool m_remaining_capacity_isSet;
    bool m_remaining_capacity_isValid;

    QString m_report_time;
    bool m_report_time_isSet;
    bool m_report_time_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint32 m_temperature;
    bool m_temperature_isSet;
    bool m_temperature_isValid;

    QString m_voltage;
    bool m_voltage_isSet;
    bool m_voltage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleChromeManagementV1BatterySampleReport)

#endif // OAIGoogleChromeManagementV1BatterySampleReport_H
