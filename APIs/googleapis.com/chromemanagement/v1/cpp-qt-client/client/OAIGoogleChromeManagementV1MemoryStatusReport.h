/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleChromeManagementV1MemoryStatusReport.h
 *
 * Contains samples of memory status reports. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceMemoryInfo](https://chromeenterprise.google/policies/#ReportDeviceMemoryInfo) * Data Collection Frequency: Only at upload, SystemRamFreeByes is collected every 10 minutes * Default Data Reporting Frequency: Every 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_MEMORY_REPORT
 */

#ifndef OAIGoogleChromeManagementV1MemoryStatusReport_H
#define OAIGoogleChromeManagementV1MemoryStatusReport_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleChromeManagementV1MemoryStatusReport : public OAIObject {
public:
    OAIGoogleChromeManagementV1MemoryStatusReport();
    OAIGoogleChromeManagementV1MemoryStatusReport(QString json);
    ~OAIGoogleChromeManagementV1MemoryStatusReport() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getPageFaults() const;
    void setPageFaults(const qint32 &page_faults);
    bool is_page_faults_Set() const;
    bool is_page_faults_Valid() const;

    QString getReportTime() const;
    void setReportTime(const QString &report_time);
    bool is_report_time_Set() const;
    bool is_report_time_Valid() const;

    QString getSampleFrequency() const;
    void setSampleFrequency(const QString &sample_frequency);
    bool is_sample_frequency_Set() const;
    bool is_sample_frequency_Valid() const;

    QString getSystemRamFreeBytes() const;
    void setSystemRamFreeBytes(const QString &system_ram_free_bytes);
    bool is_system_ram_free_bytes_Set() const;
    bool is_system_ram_free_bytes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_page_faults;
    bool m_page_faults_isSet;
    bool m_page_faults_isValid;

    QString m_report_time;
    bool m_report_time_isSet;
    bool m_report_time_isValid;

    QString m_sample_frequency;
    bool m_sample_frequency_isSet;
    bool m_sample_frequency_isValid;

    QString m_system_ram_free_bytes;
    bool m_system_ram_free_bytes_isSet;
    bool m_system_ram_free_bytes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleChromeManagementV1MemoryStatusReport)

#endif // OAIGoogleChromeManagementV1MemoryStatusReport_H
