/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1UsbPeripheralReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1UsbPeripheralReport::OAIGoogleChromeManagementV1UsbPeripheralReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1UsbPeripheralReport::OAIGoogleChromeManagementV1UsbPeripheralReport() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1UsbPeripheralReport::~OAIGoogleChromeManagementV1UsbPeripheralReport() {}

void OAIGoogleChromeManagementV1UsbPeripheralReport::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_class_id_isSet = false;
    m_class_id_isValid = false;

    m_firmware_version_isSet = false;
    m_firmware_version_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_subclass_id_isSet = false;
    m_subclass_id_isValid = false;

    m_vendor_isSet = false;
    m_vendor_isValid = false;

    m_vid_isSet = false;
    m_vid_isValid = false;
}

void OAIGoogleChromeManagementV1UsbPeripheralReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1UsbPeripheralReport::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_class_id_isValid = ::OpenAPI::fromJsonValue(m_class_id, json[QString("classId")]);
    m_class_id_isSet = !json[QString("classId")].isNull() && m_class_id_isValid;

    m_firmware_version_isValid = ::OpenAPI::fromJsonValue(m_firmware_version, json[QString("firmwareVersion")]);
    m_firmware_version_isSet = !json[QString("firmwareVersion")].isNull() && m_firmware_version_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_subclass_id_isValid = ::OpenAPI::fromJsonValue(m_subclass_id, json[QString("subclassId")]);
    m_subclass_id_isSet = !json[QString("subclassId")].isNull() && m_subclass_id_isValid;

    m_vendor_isValid = ::OpenAPI::fromJsonValue(m_vendor, json[QString("vendor")]);
    m_vendor_isSet = !json[QString("vendor")].isNull() && m_vendor_isValid;

    m_vid_isValid = ::OpenAPI::fromJsonValue(m_vid, json[QString("vid")]);
    m_vid_isSet = !json[QString("vid")].isNull() && m_vid_isValid;
}

QString OAIGoogleChromeManagementV1UsbPeripheralReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1UsbPeripheralReport::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_class_id_isSet) {
        obj.insert(QString("classId"), ::OpenAPI::toJsonValue(m_class_id));
    }
    if (m_firmware_version_isSet) {
        obj.insert(QString("firmwareVersion"), ::OpenAPI::toJsonValue(m_firmware_version));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_subclass_id_isSet) {
        obj.insert(QString("subclassId"), ::OpenAPI::toJsonValue(m_subclass_id));
    }
    if (m_vendor_isSet) {
        obj.insert(QString("vendor"), ::OpenAPI::toJsonValue(m_vendor));
    }
    if (m_vid_isSet) {
        obj.insert(QString("vid"), ::OpenAPI::toJsonValue(m_vid));
    }
    return obj;
}

QList<QString> OAIGoogleChromeManagementV1UsbPeripheralReport::getCategories() const {
    return m_categories;
}
void OAIGoogleChromeManagementV1UsbPeripheralReport::setCategories(const QList<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIGoogleChromeManagementV1UsbPeripheralReport::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIGoogleChromeManagementV1UsbPeripheralReport::is_categories_Valid() const{
    return m_categories_isValid;
}

qint32 OAIGoogleChromeManagementV1UsbPeripheralReport::getClassId() const {
    return m_class_id;
}
void OAIGoogleChromeManagementV1UsbPeripheralReport::setClassId(const qint32 &class_id) {
    m_class_id = class_id;
    m_class_id_isSet = true;
}

bool OAIGoogleChromeManagementV1UsbPeripheralReport::is_class_id_Set() const{
    return m_class_id_isSet;
}

bool OAIGoogleChromeManagementV1UsbPeripheralReport::is_class_id_Valid() const{
    return m_class_id_isValid;
}

QString OAIGoogleChromeManagementV1UsbPeripheralReport::getFirmwareVersion() const {
    return m_firmware_version;
}
void OAIGoogleChromeManagementV1UsbPeripheralReport::setFirmwareVersion(const QString &firmware_version) {
    m_firmware_version = firmware_version;
    m_firmware_version_isSet = true;
}

bool OAIGoogleChromeManagementV1UsbPeripheralReport::is_firmware_version_Set() const{
    return m_firmware_version_isSet;
}

bool OAIGoogleChromeManagementV1UsbPeripheralReport::is_firmware_version_Valid() const{
    return m_firmware_version_isValid;
}

QString OAIGoogleChromeManagementV1UsbPeripheralReport::getName() const {
    return m_name;
}
void OAIGoogleChromeManagementV1UsbPeripheralReport::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleChromeManagementV1UsbPeripheralReport::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleChromeManagementV1UsbPeripheralReport::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIGoogleChromeManagementV1UsbPeripheralReport::getPid() const {
    return m_pid;
}
void OAIGoogleChromeManagementV1UsbPeripheralReport::setPid(const qint32 &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIGoogleChromeManagementV1UsbPeripheralReport::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIGoogleChromeManagementV1UsbPeripheralReport::is_pid_Valid() const{
    return m_pid_isValid;
}

qint32 OAIGoogleChromeManagementV1UsbPeripheralReport::getSubclassId() const {
    return m_subclass_id;
}
void OAIGoogleChromeManagementV1UsbPeripheralReport::setSubclassId(const qint32 &subclass_id) {
    m_subclass_id = subclass_id;
    m_subclass_id_isSet = true;
}

bool OAIGoogleChromeManagementV1UsbPeripheralReport::is_subclass_id_Set() const{
    return m_subclass_id_isSet;
}

bool OAIGoogleChromeManagementV1UsbPeripheralReport::is_subclass_id_Valid() const{
    return m_subclass_id_isValid;
}

QString OAIGoogleChromeManagementV1UsbPeripheralReport::getVendor() const {
    return m_vendor;
}
void OAIGoogleChromeManagementV1UsbPeripheralReport::setVendor(const QString &vendor) {
    m_vendor = vendor;
    m_vendor_isSet = true;
}

bool OAIGoogleChromeManagementV1UsbPeripheralReport::is_vendor_Set() const{
    return m_vendor_isSet;
}

bool OAIGoogleChromeManagementV1UsbPeripheralReport::is_vendor_Valid() const{
    return m_vendor_isValid;
}

qint32 OAIGoogleChromeManagementV1UsbPeripheralReport::getVid() const {
    return m_vid;
}
void OAIGoogleChromeManagementV1UsbPeripheralReport::setVid(const qint32 &vid) {
    m_vid = vid;
    m_vid_isSet = true;
}

bool OAIGoogleChromeManagementV1UsbPeripheralReport::is_vid_Set() const{
    return m_vid_isSet;
}

bool OAIGoogleChromeManagementV1UsbPeripheralReport::is_vid_Valid() const{
    return m_vid_isValid;
}

bool OAIGoogleChromeManagementV1UsbPeripheralReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subclass_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1UsbPeripheralReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
