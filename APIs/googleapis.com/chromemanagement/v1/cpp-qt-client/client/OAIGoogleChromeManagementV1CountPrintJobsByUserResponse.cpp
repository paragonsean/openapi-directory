/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1CountPrintJobsByUserResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::OAIGoogleChromeManagementV1CountPrintJobsByUserResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::OAIGoogleChromeManagementV1CountPrintJobsByUserResponse() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::~OAIGoogleChromeManagementV1CountPrintJobsByUserResponse() {}

void OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_total_size_isSet = false;
    m_total_size_isValid = false;

    m_user_print_reports_isSet = false;
    m_user_print_reports_isValid = false;
}

void OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_total_size_isValid = ::OpenAPI::fromJsonValue(m_total_size, json[QString("totalSize")]);
    m_total_size_isSet = !json[QString("totalSize")].isNull() && m_total_size_isValid;

    m_user_print_reports_isValid = ::OpenAPI::fromJsonValue(m_user_print_reports, json[QString("userPrintReports")]);
    m_user_print_reports_isSet = !json[QString("userPrintReports")].isNull() && m_user_print_reports_isValid;
}

QString OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_total_size_isSet) {
        obj.insert(QString("totalSize"), ::OpenAPI::toJsonValue(m_total_size));
    }
    if (m_user_print_reports.size() > 0) {
        obj.insert(QString("userPrintReports"), ::OpenAPI::toJsonValue(m_user_print_reports));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QString OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::getTotalSize() const {
    return m_total_size;
}
void OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::setTotalSize(const QString &total_size) {
    m_total_size = total_size;
    m_total_size_isSet = true;
}

bool OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::is_total_size_Set() const{
    return m_total_size_isSet;
}

bool OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::is_total_size_Valid() const{
    return m_total_size_isValid;
}

QList<OAIGoogleChromeManagementV1UserPrintReport> OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::getUserPrintReports() const {
    return m_user_print_reports;
}
void OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::setUserPrintReports(const QList<OAIGoogleChromeManagementV1UserPrintReport> &user_print_reports) {
    m_user_print_reports = user_print_reports;
    m_user_print_reports_isSet = true;
}

bool OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::is_user_print_reports_Set() const{
    return m_user_print_reports_isSet;
}

bool OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::is_user_print_reports_Valid() const{
    return m_user_print_reports_isValid;
}

bool OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_print_reports.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1CountPrintJobsByUserResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
