/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleChromeManagementV1DisplayInfo.h
 *
 * Information for a display.
 */

#ifndef OAIGoogleChromeManagementV1DisplayInfo_H
#define OAIGoogleChromeManagementV1DisplayInfo_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleChromeManagementV1DisplayInfo : public OAIObject {
public:
    OAIGoogleChromeManagementV1DisplayInfo();
    OAIGoogleChromeManagementV1DisplayInfo(QString json);
    ~OAIGoogleChromeManagementV1DisplayInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDeviceId() const;
    void setDeviceId(const QString &device_id);
    bool is_device_id_Set() const;
    bool is_device_id_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    bool isIsInternal() const;
    void setIsInternal(const bool &is_internal);
    bool is_is_internal_Set() const;
    bool is_is_internal_Valid() const;

    qint32 getRefreshRate() const;
    void setRefreshRate(const qint32 &refresh_rate);
    bool is_refresh_rate_Set() const;
    bool is_refresh_rate_Valid() const;

    qint32 getResolutionHeight() const;
    void setResolutionHeight(const qint32 &resolution_height);
    bool is_resolution_height_Set() const;
    bool is_resolution_height_Valid() const;

    qint32 getResolutionWidth() const;
    void setResolutionWidth(const qint32 &resolution_width);
    bool is_resolution_width_Set() const;
    bool is_resolution_width_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_device_id;
    bool m_device_id_isSet;
    bool m_device_id_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    bool m_is_internal;
    bool m_is_internal_isSet;
    bool m_is_internal_isValid;

    qint32 m_refresh_rate;
    bool m_refresh_rate_isSet;
    bool m_refresh_rate_isValid;

    qint32 m_resolution_height;
    bool m_resolution_height_isSet;
    bool m_resolution_height_isValid;

    qint32 m_resolution_width;
    bool m_resolution_width_isSet;
    bool m_resolution_width_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleChromeManagementV1DisplayInfo)

#endif // OAIGoogleChromeManagementV1DisplayInfo_H
