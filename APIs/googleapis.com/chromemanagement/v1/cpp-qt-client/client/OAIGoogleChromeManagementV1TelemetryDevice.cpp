/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1TelemetryDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1TelemetryDevice::OAIGoogleChromeManagementV1TelemetryDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1TelemetryDevice::OAIGoogleChromeManagementV1TelemetryDevice() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1TelemetryDevice::~OAIGoogleChromeManagementV1TelemetryDevice() {}

void OAIGoogleChromeManagementV1TelemetryDevice::initializeModel() {

    m_audio_status_report_isSet = false;
    m_audio_status_report_isValid = false;

    m_battery_info_isSet = false;
    m_battery_info_isValid = false;

    m_battery_status_report_isSet = false;
    m_battery_status_report_isValid = false;

    m_boot_performance_report_isSet = false;
    m_boot_performance_report_isValid = false;

    m_cpu_info_isSet = false;
    m_cpu_info_isValid = false;

    m_cpu_status_report_isSet = false;
    m_cpu_status_report_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_graphics_info_isSet = false;
    m_graphics_info_isValid = false;

    m_graphics_status_report_isSet = false;
    m_graphics_status_report_isValid = false;

    m_heartbeat_status_report_isSet = false;
    m_heartbeat_status_report_isValid = false;

    m_kiosk_app_status_report_isSet = false;
    m_kiosk_app_status_report_isValid = false;

    m_memory_info_isSet = false;
    m_memory_info_isValid = false;

    m_memory_status_report_isSet = false;
    m_memory_status_report_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_bandwidth_report_isSet = false;
    m_network_bandwidth_report_isValid = false;

    m_network_diagnostics_report_isSet = false;
    m_network_diagnostics_report_isValid = false;

    m_network_info_isSet = false;
    m_network_info_isValid = false;

    m_network_status_report_isSet = false;
    m_network_status_report_isValid = false;

    m_org_unit_id_isSet = false;
    m_org_unit_id_isValid = false;

    m_os_update_status_isSet = false;
    m_os_update_status_isValid = false;

    m_peripherals_report_isSet = false;
    m_peripherals_report_isValid = false;

    m_runtime_counters_report_isSet = false;
    m_runtime_counters_report_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_storage_info_isSet = false;
    m_storage_info_isValid = false;

    m_storage_status_report_isSet = false;
    m_storage_status_report_isValid = false;

    m_thunderbolt_info_isSet = false;
    m_thunderbolt_info_isValid = false;
}

void OAIGoogleChromeManagementV1TelemetryDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1TelemetryDevice::fromJsonObject(QJsonObject json) {

    m_audio_status_report_isValid = ::OpenAPI::fromJsonValue(m_audio_status_report, json[QString("audioStatusReport")]);
    m_audio_status_report_isSet = !json[QString("audioStatusReport")].isNull() && m_audio_status_report_isValid;

    m_battery_info_isValid = ::OpenAPI::fromJsonValue(m_battery_info, json[QString("batteryInfo")]);
    m_battery_info_isSet = !json[QString("batteryInfo")].isNull() && m_battery_info_isValid;

    m_battery_status_report_isValid = ::OpenAPI::fromJsonValue(m_battery_status_report, json[QString("batteryStatusReport")]);
    m_battery_status_report_isSet = !json[QString("batteryStatusReport")].isNull() && m_battery_status_report_isValid;

    m_boot_performance_report_isValid = ::OpenAPI::fromJsonValue(m_boot_performance_report, json[QString("bootPerformanceReport")]);
    m_boot_performance_report_isSet = !json[QString("bootPerformanceReport")].isNull() && m_boot_performance_report_isValid;

    m_cpu_info_isValid = ::OpenAPI::fromJsonValue(m_cpu_info, json[QString("cpuInfo")]);
    m_cpu_info_isSet = !json[QString("cpuInfo")].isNull() && m_cpu_info_isValid;

    m_cpu_status_report_isValid = ::OpenAPI::fromJsonValue(m_cpu_status_report, json[QString("cpuStatusReport")]);
    m_cpu_status_report_isSet = !json[QString("cpuStatusReport")].isNull() && m_cpu_status_report_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_graphics_info_isValid = ::OpenAPI::fromJsonValue(m_graphics_info, json[QString("graphicsInfo")]);
    m_graphics_info_isSet = !json[QString("graphicsInfo")].isNull() && m_graphics_info_isValid;

    m_graphics_status_report_isValid = ::OpenAPI::fromJsonValue(m_graphics_status_report, json[QString("graphicsStatusReport")]);
    m_graphics_status_report_isSet = !json[QString("graphicsStatusReport")].isNull() && m_graphics_status_report_isValid;

    m_heartbeat_status_report_isValid = ::OpenAPI::fromJsonValue(m_heartbeat_status_report, json[QString("heartbeatStatusReport")]);
    m_heartbeat_status_report_isSet = !json[QString("heartbeatStatusReport")].isNull() && m_heartbeat_status_report_isValid;

    m_kiosk_app_status_report_isValid = ::OpenAPI::fromJsonValue(m_kiosk_app_status_report, json[QString("kioskAppStatusReport")]);
    m_kiosk_app_status_report_isSet = !json[QString("kioskAppStatusReport")].isNull() && m_kiosk_app_status_report_isValid;

    m_memory_info_isValid = ::OpenAPI::fromJsonValue(m_memory_info, json[QString("memoryInfo")]);
    m_memory_info_isSet = !json[QString("memoryInfo")].isNull() && m_memory_info_isValid;

    m_memory_status_report_isValid = ::OpenAPI::fromJsonValue(m_memory_status_report, json[QString("memoryStatusReport")]);
    m_memory_status_report_isSet = !json[QString("memoryStatusReport")].isNull() && m_memory_status_report_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_bandwidth_report_isValid = ::OpenAPI::fromJsonValue(m_network_bandwidth_report, json[QString("networkBandwidthReport")]);
    m_network_bandwidth_report_isSet = !json[QString("networkBandwidthReport")].isNull() && m_network_bandwidth_report_isValid;

    m_network_diagnostics_report_isValid = ::OpenAPI::fromJsonValue(m_network_diagnostics_report, json[QString("networkDiagnosticsReport")]);
    m_network_diagnostics_report_isSet = !json[QString("networkDiagnosticsReport")].isNull() && m_network_diagnostics_report_isValid;

    m_network_info_isValid = ::OpenAPI::fromJsonValue(m_network_info, json[QString("networkInfo")]);
    m_network_info_isSet = !json[QString("networkInfo")].isNull() && m_network_info_isValid;

    m_network_status_report_isValid = ::OpenAPI::fromJsonValue(m_network_status_report, json[QString("networkStatusReport")]);
    m_network_status_report_isSet = !json[QString("networkStatusReport")].isNull() && m_network_status_report_isValid;

    m_org_unit_id_isValid = ::OpenAPI::fromJsonValue(m_org_unit_id, json[QString("orgUnitId")]);
    m_org_unit_id_isSet = !json[QString("orgUnitId")].isNull() && m_org_unit_id_isValid;

    m_os_update_status_isValid = ::OpenAPI::fromJsonValue(m_os_update_status, json[QString("osUpdateStatus")]);
    m_os_update_status_isSet = !json[QString("osUpdateStatus")].isNull() && m_os_update_status_isValid;

    m_peripherals_report_isValid = ::OpenAPI::fromJsonValue(m_peripherals_report, json[QString("peripheralsReport")]);
    m_peripherals_report_isSet = !json[QString("peripheralsReport")].isNull() && m_peripherals_report_isValid;

    m_runtime_counters_report_isValid = ::OpenAPI::fromJsonValue(m_runtime_counters_report, json[QString("runtimeCountersReport")]);
    m_runtime_counters_report_isSet = !json[QString("runtimeCountersReport")].isNull() && m_runtime_counters_report_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_storage_info_isValid = ::OpenAPI::fromJsonValue(m_storage_info, json[QString("storageInfo")]);
    m_storage_info_isSet = !json[QString("storageInfo")].isNull() && m_storage_info_isValid;

    m_storage_status_report_isValid = ::OpenAPI::fromJsonValue(m_storage_status_report, json[QString("storageStatusReport")]);
    m_storage_status_report_isSet = !json[QString("storageStatusReport")].isNull() && m_storage_status_report_isValid;

    m_thunderbolt_info_isValid = ::OpenAPI::fromJsonValue(m_thunderbolt_info, json[QString("thunderboltInfo")]);
    m_thunderbolt_info_isSet = !json[QString("thunderboltInfo")].isNull() && m_thunderbolt_info_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1TelemetryDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_status_report.size() > 0) {
        obj.insert(QString("audioStatusReport"), ::OpenAPI::toJsonValue(m_audio_status_report));
    }
    if (m_battery_info.size() > 0) {
        obj.insert(QString("batteryInfo"), ::OpenAPI::toJsonValue(m_battery_info));
    }
    if (m_battery_status_report.size() > 0) {
        obj.insert(QString("batteryStatusReport"), ::OpenAPI::toJsonValue(m_battery_status_report));
    }
    if (m_boot_performance_report.size() > 0) {
        obj.insert(QString("bootPerformanceReport"), ::OpenAPI::toJsonValue(m_boot_performance_report));
    }
    if (m_cpu_info.size() > 0) {
        obj.insert(QString("cpuInfo"), ::OpenAPI::toJsonValue(m_cpu_info));
    }
    if (m_cpu_status_report.size() > 0) {
        obj.insert(QString("cpuStatusReport"), ::OpenAPI::toJsonValue(m_cpu_status_report));
    }
    if (m_customer_isSet) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_graphics_info.isSet()) {
        obj.insert(QString("graphicsInfo"), ::OpenAPI::toJsonValue(m_graphics_info));
    }
    if (m_graphics_status_report.size() > 0) {
        obj.insert(QString("graphicsStatusReport"), ::OpenAPI::toJsonValue(m_graphics_status_report));
    }
    if (m_heartbeat_status_report.size() > 0) {
        obj.insert(QString("heartbeatStatusReport"), ::OpenAPI::toJsonValue(m_heartbeat_status_report));
    }
    if (m_kiosk_app_status_report.size() > 0) {
        obj.insert(QString("kioskAppStatusReport"), ::OpenAPI::toJsonValue(m_kiosk_app_status_report));
    }
    if (m_memory_info.isSet()) {
        obj.insert(QString("memoryInfo"), ::OpenAPI::toJsonValue(m_memory_info));
    }
    if (m_memory_status_report.size() > 0) {
        obj.insert(QString("memoryStatusReport"), ::OpenAPI::toJsonValue(m_memory_status_report));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_bandwidth_report.size() > 0) {
        obj.insert(QString("networkBandwidthReport"), ::OpenAPI::toJsonValue(m_network_bandwidth_report));
    }
    if (m_network_diagnostics_report.size() > 0) {
        obj.insert(QString("networkDiagnosticsReport"), ::OpenAPI::toJsonValue(m_network_diagnostics_report));
    }
    if (m_network_info.isSet()) {
        obj.insert(QString("networkInfo"), ::OpenAPI::toJsonValue(m_network_info));
    }
    if (m_network_status_report.size() > 0) {
        obj.insert(QString("networkStatusReport"), ::OpenAPI::toJsonValue(m_network_status_report));
    }
    if (m_org_unit_id_isSet) {
        obj.insert(QString("orgUnitId"), ::OpenAPI::toJsonValue(m_org_unit_id));
    }
    if (m_os_update_status.size() > 0) {
        obj.insert(QString("osUpdateStatus"), ::OpenAPI::toJsonValue(m_os_update_status));
    }
    if (m_peripherals_report.size() > 0) {
        obj.insert(QString("peripheralsReport"), ::OpenAPI::toJsonValue(m_peripherals_report));
    }
    if (m_runtime_counters_report.size() > 0) {
        obj.insert(QString("runtimeCountersReport"), ::OpenAPI::toJsonValue(m_runtime_counters_report));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_storage_info.isSet()) {
        obj.insert(QString("storageInfo"), ::OpenAPI::toJsonValue(m_storage_info));
    }
    if (m_storage_status_report.size() > 0) {
        obj.insert(QString("storageStatusReport"), ::OpenAPI::toJsonValue(m_storage_status_report));
    }
    if (m_thunderbolt_info.size() > 0) {
        obj.insert(QString("thunderboltInfo"), ::OpenAPI::toJsonValue(m_thunderbolt_info));
    }
    return obj;
}

QList<OAIGoogleChromeManagementV1AudioStatusReport> OAIGoogleChromeManagementV1TelemetryDevice::getAudioStatusReport() const {
    return m_audio_status_report;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setAudioStatusReport(const QList<OAIGoogleChromeManagementV1AudioStatusReport> &audio_status_report) {
    m_audio_status_report = audio_status_report;
    m_audio_status_report_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_audio_status_report_Set() const{
    return m_audio_status_report_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_audio_status_report_Valid() const{
    return m_audio_status_report_isValid;
}

QList<OAIGoogleChromeManagementV1BatteryInfo> OAIGoogleChromeManagementV1TelemetryDevice::getBatteryInfo() const {
    return m_battery_info;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setBatteryInfo(const QList<OAIGoogleChromeManagementV1BatteryInfo> &battery_info) {
    m_battery_info = battery_info;
    m_battery_info_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_battery_info_Set() const{
    return m_battery_info_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_battery_info_Valid() const{
    return m_battery_info_isValid;
}

QList<OAIGoogleChromeManagementV1BatteryStatusReport> OAIGoogleChromeManagementV1TelemetryDevice::getBatteryStatusReport() const {
    return m_battery_status_report;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setBatteryStatusReport(const QList<OAIGoogleChromeManagementV1BatteryStatusReport> &battery_status_report) {
    m_battery_status_report = battery_status_report;
    m_battery_status_report_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_battery_status_report_Set() const{
    return m_battery_status_report_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_battery_status_report_Valid() const{
    return m_battery_status_report_isValid;
}

QList<OAIGoogleChromeManagementV1BootPerformanceReport> OAIGoogleChromeManagementV1TelemetryDevice::getBootPerformanceReport() const {
    return m_boot_performance_report;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setBootPerformanceReport(const QList<OAIGoogleChromeManagementV1BootPerformanceReport> &boot_performance_report) {
    m_boot_performance_report = boot_performance_report;
    m_boot_performance_report_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_boot_performance_report_Set() const{
    return m_boot_performance_report_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_boot_performance_report_Valid() const{
    return m_boot_performance_report_isValid;
}

QList<OAIGoogleChromeManagementV1CpuInfo> OAIGoogleChromeManagementV1TelemetryDevice::getCpuInfo() const {
    return m_cpu_info;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setCpuInfo(const QList<OAIGoogleChromeManagementV1CpuInfo> &cpu_info) {
    m_cpu_info = cpu_info;
    m_cpu_info_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_cpu_info_Set() const{
    return m_cpu_info_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_cpu_info_Valid() const{
    return m_cpu_info_isValid;
}

QList<OAIGoogleChromeManagementV1CpuStatusReport> OAIGoogleChromeManagementV1TelemetryDevice::getCpuStatusReport() const {
    return m_cpu_status_report;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setCpuStatusReport(const QList<OAIGoogleChromeManagementV1CpuStatusReport> &cpu_status_report) {
    m_cpu_status_report = cpu_status_report;
    m_cpu_status_report_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_cpu_status_report_Set() const{
    return m_cpu_status_report_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_cpu_status_report_Valid() const{
    return m_cpu_status_report_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryDevice::getCustomer() const {
    return m_customer;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setCustomer(const QString &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryDevice::getDeviceId() const {
    return m_device_id;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_device_id_Valid() const{
    return m_device_id_isValid;
}

OAIGoogleChromeManagementV1GraphicsInfo OAIGoogleChromeManagementV1TelemetryDevice::getGraphicsInfo() const {
    return m_graphics_info;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setGraphicsInfo(const OAIGoogleChromeManagementV1GraphicsInfo &graphics_info) {
    m_graphics_info = graphics_info;
    m_graphics_info_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_graphics_info_Set() const{
    return m_graphics_info_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_graphics_info_Valid() const{
    return m_graphics_info_isValid;
}

QList<OAIGoogleChromeManagementV1GraphicsStatusReport> OAIGoogleChromeManagementV1TelemetryDevice::getGraphicsStatusReport() const {
    return m_graphics_status_report;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setGraphicsStatusReport(const QList<OAIGoogleChromeManagementV1GraphicsStatusReport> &graphics_status_report) {
    m_graphics_status_report = graphics_status_report;
    m_graphics_status_report_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_graphics_status_report_Set() const{
    return m_graphics_status_report_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_graphics_status_report_Valid() const{
    return m_graphics_status_report_isValid;
}

QList<OAIGoogleChromeManagementV1HeartbeatStatusReport> OAIGoogleChromeManagementV1TelemetryDevice::getHeartbeatStatusReport() const {
    return m_heartbeat_status_report;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setHeartbeatStatusReport(const QList<OAIGoogleChromeManagementV1HeartbeatStatusReport> &heartbeat_status_report) {
    m_heartbeat_status_report = heartbeat_status_report;
    m_heartbeat_status_report_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_heartbeat_status_report_Set() const{
    return m_heartbeat_status_report_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_heartbeat_status_report_Valid() const{
    return m_heartbeat_status_report_isValid;
}

QList<OAIGoogleChromeManagementV1KioskAppStatusReport> OAIGoogleChromeManagementV1TelemetryDevice::getKioskAppStatusReport() const {
    return m_kiosk_app_status_report;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setKioskAppStatusReport(const QList<OAIGoogleChromeManagementV1KioskAppStatusReport> &kiosk_app_status_report) {
    m_kiosk_app_status_report = kiosk_app_status_report;
    m_kiosk_app_status_report_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_kiosk_app_status_report_Set() const{
    return m_kiosk_app_status_report_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_kiosk_app_status_report_Valid() const{
    return m_kiosk_app_status_report_isValid;
}

OAIGoogleChromeManagementV1MemoryInfo OAIGoogleChromeManagementV1TelemetryDevice::getMemoryInfo() const {
    return m_memory_info;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setMemoryInfo(const OAIGoogleChromeManagementV1MemoryInfo &memory_info) {
    m_memory_info = memory_info;
    m_memory_info_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_memory_info_Set() const{
    return m_memory_info_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_memory_info_Valid() const{
    return m_memory_info_isValid;
}

QList<OAIGoogleChromeManagementV1MemoryStatusReport> OAIGoogleChromeManagementV1TelemetryDevice::getMemoryStatusReport() const {
    return m_memory_status_report;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setMemoryStatusReport(const QList<OAIGoogleChromeManagementV1MemoryStatusReport> &memory_status_report) {
    m_memory_status_report = memory_status_report;
    m_memory_status_report_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_memory_status_report_Set() const{
    return m_memory_status_report_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_memory_status_report_Valid() const{
    return m_memory_status_report_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryDevice::getName() const {
    return m_name;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIGoogleChromeManagementV1NetworkBandwidthReport> OAIGoogleChromeManagementV1TelemetryDevice::getNetworkBandwidthReport() const {
    return m_network_bandwidth_report;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setNetworkBandwidthReport(const QList<OAIGoogleChromeManagementV1NetworkBandwidthReport> &network_bandwidth_report) {
    m_network_bandwidth_report = network_bandwidth_report;
    m_network_bandwidth_report_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_network_bandwidth_report_Set() const{
    return m_network_bandwidth_report_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_network_bandwidth_report_Valid() const{
    return m_network_bandwidth_report_isValid;
}

QList<OAIGoogleChromeManagementV1NetworkDiagnosticsReport> OAIGoogleChromeManagementV1TelemetryDevice::getNetworkDiagnosticsReport() const {
    return m_network_diagnostics_report;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setNetworkDiagnosticsReport(const QList<OAIGoogleChromeManagementV1NetworkDiagnosticsReport> &network_diagnostics_report) {
    m_network_diagnostics_report = network_diagnostics_report;
    m_network_diagnostics_report_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_network_diagnostics_report_Set() const{
    return m_network_diagnostics_report_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_network_diagnostics_report_Valid() const{
    return m_network_diagnostics_report_isValid;
}

OAIGoogleChromeManagementV1NetworkInfo OAIGoogleChromeManagementV1TelemetryDevice::getNetworkInfo() const {
    return m_network_info;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setNetworkInfo(const OAIGoogleChromeManagementV1NetworkInfo &network_info) {
    m_network_info = network_info;
    m_network_info_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_network_info_Set() const{
    return m_network_info_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_network_info_Valid() const{
    return m_network_info_isValid;
}

QList<OAIGoogleChromeManagementV1NetworkStatusReport> OAIGoogleChromeManagementV1TelemetryDevice::getNetworkStatusReport() const {
    return m_network_status_report;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setNetworkStatusReport(const QList<OAIGoogleChromeManagementV1NetworkStatusReport> &network_status_report) {
    m_network_status_report = network_status_report;
    m_network_status_report_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_network_status_report_Set() const{
    return m_network_status_report_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_network_status_report_Valid() const{
    return m_network_status_report_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryDevice::getOrgUnitId() const {
    return m_org_unit_id;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setOrgUnitId(const QString &org_unit_id) {
    m_org_unit_id = org_unit_id;
    m_org_unit_id_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_org_unit_id_Set() const{
    return m_org_unit_id_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_org_unit_id_Valid() const{
    return m_org_unit_id_isValid;
}

QList<OAIGoogleChromeManagementV1OsUpdateStatus> OAIGoogleChromeManagementV1TelemetryDevice::getOsUpdateStatus() const {
    return m_os_update_status;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setOsUpdateStatus(const QList<OAIGoogleChromeManagementV1OsUpdateStatus> &os_update_status) {
    m_os_update_status = os_update_status;
    m_os_update_status_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_os_update_status_Set() const{
    return m_os_update_status_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_os_update_status_Valid() const{
    return m_os_update_status_isValid;
}

QList<OAIGoogleChromeManagementV1PeripheralsReport> OAIGoogleChromeManagementV1TelemetryDevice::getPeripheralsReport() const {
    return m_peripherals_report;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setPeripheralsReport(const QList<OAIGoogleChromeManagementV1PeripheralsReport> &peripherals_report) {
    m_peripherals_report = peripherals_report;
    m_peripherals_report_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_peripherals_report_Set() const{
    return m_peripherals_report_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_peripherals_report_Valid() const{
    return m_peripherals_report_isValid;
}

QList<OAIGoogleChromeManagementV1RuntimeCountersReport> OAIGoogleChromeManagementV1TelemetryDevice::getRuntimeCountersReport() const {
    return m_runtime_counters_report;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setRuntimeCountersReport(const QList<OAIGoogleChromeManagementV1RuntimeCountersReport> &runtime_counters_report) {
    m_runtime_counters_report = runtime_counters_report;
    m_runtime_counters_report_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_runtime_counters_report_Set() const{
    return m_runtime_counters_report_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_runtime_counters_report_Valid() const{
    return m_runtime_counters_report_isValid;
}

QString OAIGoogleChromeManagementV1TelemetryDevice::getSerialNumber() const {
    return m_serial_number;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

OAIGoogleChromeManagementV1StorageInfo OAIGoogleChromeManagementV1TelemetryDevice::getStorageInfo() const {
    return m_storage_info;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setStorageInfo(const OAIGoogleChromeManagementV1StorageInfo &storage_info) {
    m_storage_info = storage_info;
    m_storage_info_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_storage_info_Set() const{
    return m_storage_info_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_storage_info_Valid() const{
    return m_storage_info_isValid;
}

QList<OAIGoogleChromeManagementV1StorageStatusReport> OAIGoogleChromeManagementV1TelemetryDevice::getStorageStatusReport() const {
    return m_storage_status_report;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setStorageStatusReport(const QList<OAIGoogleChromeManagementV1StorageStatusReport> &storage_status_report) {
    m_storage_status_report = storage_status_report;
    m_storage_status_report_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_storage_status_report_Set() const{
    return m_storage_status_report_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_storage_status_report_Valid() const{
    return m_storage_status_report_isValid;
}

QList<OAIGoogleChromeManagementV1ThunderboltInfo> OAIGoogleChromeManagementV1TelemetryDevice::getThunderboltInfo() const {
    return m_thunderbolt_info;
}
void OAIGoogleChromeManagementV1TelemetryDevice::setThunderboltInfo(const QList<OAIGoogleChromeManagementV1ThunderboltInfo> &thunderbolt_info) {
    m_thunderbolt_info = thunderbolt_info;
    m_thunderbolt_info_isSet = true;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_thunderbolt_info_Set() const{
    return m_thunderbolt_info_isSet;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::is_thunderbolt_info_Valid() const{
    return m_thunderbolt_info_isValid;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_status_report.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_battery_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_battery_status_report.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_boot_performance_report.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_status_report.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_graphics_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_graphics_status_report.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_heartbeat_status_report.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kiosk_app_status_report.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_status_report.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_bandwidth_report.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_diagnostics_report.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_status_report.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_update_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_peripherals_report.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_counters_report.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_status_report.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_thunderbolt_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1TelemetryDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
