/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1CpuInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1CpuInfo::OAIGoogleChromeManagementV1CpuInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1CpuInfo::OAIGoogleChromeManagementV1CpuInfo() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1CpuInfo::~OAIGoogleChromeManagementV1CpuInfo() {}

void OAIGoogleChromeManagementV1CpuInfo::initializeModel() {

    m_architecture_isSet = false;
    m_architecture_isValid = false;

    m_keylocker_configured_isSet = false;
    m_keylocker_configured_isValid = false;

    m_keylocker_supported_isSet = false;
    m_keylocker_supported_isValid = false;

    m_max_clock_speed_isSet = false;
    m_max_clock_speed_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;
}

void OAIGoogleChromeManagementV1CpuInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1CpuInfo::fromJsonObject(QJsonObject json) {

    m_architecture_isValid = ::OpenAPI::fromJsonValue(m_architecture, json[QString("architecture")]);
    m_architecture_isSet = !json[QString("architecture")].isNull() && m_architecture_isValid;

    m_keylocker_configured_isValid = ::OpenAPI::fromJsonValue(m_keylocker_configured, json[QString("keylockerConfigured")]);
    m_keylocker_configured_isSet = !json[QString("keylockerConfigured")].isNull() && m_keylocker_configured_isValid;

    m_keylocker_supported_isValid = ::OpenAPI::fromJsonValue(m_keylocker_supported, json[QString("keylockerSupported")]);
    m_keylocker_supported_isSet = !json[QString("keylockerSupported")].isNull() && m_keylocker_supported_isValid;

    m_max_clock_speed_isValid = ::OpenAPI::fromJsonValue(m_max_clock_speed, json[QString("maxClockSpeed")]);
    m_max_clock_speed_isSet = !json[QString("maxClockSpeed")].isNull() && m_max_clock_speed_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;
}

QString OAIGoogleChromeManagementV1CpuInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1CpuInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_architecture_isSet) {
        obj.insert(QString("architecture"), ::OpenAPI::toJsonValue(m_architecture));
    }
    if (m_keylocker_configured_isSet) {
        obj.insert(QString("keylockerConfigured"), ::OpenAPI::toJsonValue(m_keylocker_configured));
    }
    if (m_keylocker_supported_isSet) {
        obj.insert(QString("keylockerSupported"), ::OpenAPI::toJsonValue(m_keylocker_supported));
    }
    if (m_max_clock_speed_isSet) {
        obj.insert(QString("maxClockSpeed"), ::OpenAPI::toJsonValue(m_max_clock_speed));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1CpuInfo::getArchitecture() const {
    return m_architecture;
}
void OAIGoogleChromeManagementV1CpuInfo::setArchitecture(const QString &architecture) {
    m_architecture = architecture;
    m_architecture_isSet = true;
}

bool OAIGoogleChromeManagementV1CpuInfo::is_architecture_Set() const{
    return m_architecture_isSet;
}

bool OAIGoogleChromeManagementV1CpuInfo::is_architecture_Valid() const{
    return m_architecture_isValid;
}

bool OAIGoogleChromeManagementV1CpuInfo::isKeylockerConfigured() const {
    return m_keylocker_configured;
}
void OAIGoogleChromeManagementV1CpuInfo::setKeylockerConfigured(const bool &keylocker_configured) {
    m_keylocker_configured = keylocker_configured;
    m_keylocker_configured_isSet = true;
}

bool OAIGoogleChromeManagementV1CpuInfo::is_keylocker_configured_Set() const{
    return m_keylocker_configured_isSet;
}

bool OAIGoogleChromeManagementV1CpuInfo::is_keylocker_configured_Valid() const{
    return m_keylocker_configured_isValid;
}

bool OAIGoogleChromeManagementV1CpuInfo::isKeylockerSupported() const {
    return m_keylocker_supported;
}
void OAIGoogleChromeManagementV1CpuInfo::setKeylockerSupported(const bool &keylocker_supported) {
    m_keylocker_supported = keylocker_supported;
    m_keylocker_supported_isSet = true;
}

bool OAIGoogleChromeManagementV1CpuInfo::is_keylocker_supported_Set() const{
    return m_keylocker_supported_isSet;
}

bool OAIGoogleChromeManagementV1CpuInfo::is_keylocker_supported_Valid() const{
    return m_keylocker_supported_isValid;
}

qint32 OAIGoogleChromeManagementV1CpuInfo::getMaxClockSpeed() const {
    return m_max_clock_speed;
}
void OAIGoogleChromeManagementV1CpuInfo::setMaxClockSpeed(const qint32 &max_clock_speed) {
    m_max_clock_speed = max_clock_speed;
    m_max_clock_speed_isSet = true;
}

bool OAIGoogleChromeManagementV1CpuInfo::is_max_clock_speed_Set() const{
    return m_max_clock_speed_isSet;
}

bool OAIGoogleChromeManagementV1CpuInfo::is_max_clock_speed_Valid() const{
    return m_max_clock_speed_isValid;
}

QString OAIGoogleChromeManagementV1CpuInfo::getModel() const {
    return m_model;
}
void OAIGoogleChromeManagementV1CpuInfo::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIGoogleChromeManagementV1CpuInfo::is_model_Set() const{
    return m_model_isSet;
}

bool OAIGoogleChromeManagementV1CpuInfo::is_model_Valid() const{
    return m_model_isValid;
}

bool OAIGoogleChromeManagementV1CpuInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keylocker_configured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keylocker_supported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_clock_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1CpuInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
