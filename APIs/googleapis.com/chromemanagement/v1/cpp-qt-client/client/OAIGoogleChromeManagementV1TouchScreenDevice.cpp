/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1TouchScreenDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1TouchScreenDevice::OAIGoogleChromeManagementV1TouchScreenDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1TouchScreenDevice::OAIGoogleChromeManagementV1TouchScreenDevice() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1TouchScreenDevice::~OAIGoogleChromeManagementV1TouchScreenDevice() {}

void OAIGoogleChromeManagementV1TouchScreenDevice::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_stylus_capable_isSet = false;
    m_stylus_capable_isValid = false;

    m_touch_point_count_isSet = false;
    m_touch_point_count_isValid = false;
}

void OAIGoogleChromeManagementV1TouchScreenDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1TouchScreenDevice::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_stylus_capable_isValid = ::OpenAPI::fromJsonValue(m_stylus_capable, json[QString("stylusCapable")]);
    m_stylus_capable_isSet = !json[QString("stylusCapable")].isNull() && m_stylus_capable_isValid;

    m_touch_point_count_isValid = ::OpenAPI::fromJsonValue(m_touch_point_count, json[QString("touchPointCount")]);
    m_touch_point_count_isSet = !json[QString("touchPointCount")].isNull() && m_touch_point_count_isValid;
}

QString OAIGoogleChromeManagementV1TouchScreenDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1TouchScreenDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_stylus_capable_isSet) {
        obj.insert(QString("stylusCapable"), ::OpenAPI::toJsonValue(m_stylus_capable));
    }
    if (m_touch_point_count_isSet) {
        obj.insert(QString("touchPointCount"), ::OpenAPI::toJsonValue(m_touch_point_count));
    }
    return obj;
}

QString OAIGoogleChromeManagementV1TouchScreenDevice::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleChromeManagementV1TouchScreenDevice::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleChromeManagementV1TouchScreenDevice::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleChromeManagementV1TouchScreenDevice::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIGoogleChromeManagementV1TouchScreenDevice::isStylusCapable() const {
    return m_stylus_capable;
}
void OAIGoogleChromeManagementV1TouchScreenDevice::setStylusCapable(const bool &stylus_capable) {
    m_stylus_capable = stylus_capable;
    m_stylus_capable_isSet = true;
}

bool OAIGoogleChromeManagementV1TouchScreenDevice::is_stylus_capable_Set() const{
    return m_stylus_capable_isSet;
}

bool OAIGoogleChromeManagementV1TouchScreenDevice::is_stylus_capable_Valid() const{
    return m_stylus_capable_isValid;
}

qint32 OAIGoogleChromeManagementV1TouchScreenDevice::getTouchPointCount() const {
    return m_touch_point_count;
}
void OAIGoogleChromeManagementV1TouchScreenDevice::setTouchPointCount(const qint32 &touch_point_count) {
    m_touch_point_count = touch_point_count;
    m_touch_point_count_isSet = true;
}

bool OAIGoogleChromeManagementV1TouchScreenDevice::is_touch_point_count_Set() const{
    return m_touch_point_count_isSet;
}

bool OAIGoogleChromeManagementV1TouchScreenDevice::is_touch_point_count_Valid() const{
    return m_touch_point_count_isValid;
}

bool OAIGoogleChromeManagementV1TouchScreenDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stylus_capable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_touch_point_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1TouchScreenDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
