/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleChromeManagementV1BatterySampleReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleChromeManagementV1BatterySampleReport::OAIGoogleChromeManagementV1BatterySampleReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleChromeManagementV1BatterySampleReport::OAIGoogleChromeManagementV1BatterySampleReport() {
    this->initializeModel();
}

OAIGoogleChromeManagementV1BatterySampleReport::~OAIGoogleChromeManagementV1BatterySampleReport() {}

void OAIGoogleChromeManagementV1BatterySampleReport::initializeModel() {

    m_charge_rate_isSet = false;
    m_charge_rate_isValid = false;

    m_current_isSet = false;
    m_current_isValid = false;

    m_discharge_rate_isSet = false;
    m_discharge_rate_isValid = false;

    m_remaining_capacity_isSet = false;
    m_remaining_capacity_isValid = false;

    m_report_time_isSet = false;
    m_report_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_temperature_isSet = false;
    m_temperature_isValid = false;

    m_voltage_isSet = false;
    m_voltage_isValid = false;
}

void OAIGoogleChromeManagementV1BatterySampleReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleChromeManagementV1BatterySampleReport::fromJsonObject(QJsonObject json) {

    m_charge_rate_isValid = ::OpenAPI::fromJsonValue(m_charge_rate, json[QString("chargeRate")]);
    m_charge_rate_isSet = !json[QString("chargeRate")].isNull() && m_charge_rate_isValid;

    m_current_isValid = ::OpenAPI::fromJsonValue(m_current, json[QString("current")]);
    m_current_isSet = !json[QString("current")].isNull() && m_current_isValid;

    m_discharge_rate_isValid = ::OpenAPI::fromJsonValue(m_discharge_rate, json[QString("dischargeRate")]);
    m_discharge_rate_isSet = !json[QString("dischargeRate")].isNull() && m_discharge_rate_isValid;

    m_remaining_capacity_isValid = ::OpenAPI::fromJsonValue(m_remaining_capacity, json[QString("remainingCapacity")]);
    m_remaining_capacity_isSet = !json[QString("remainingCapacity")].isNull() && m_remaining_capacity_isValid;

    m_report_time_isValid = ::OpenAPI::fromJsonValue(m_report_time, json[QString("reportTime")]);
    m_report_time_isSet = !json[QString("reportTime")].isNull() && m_report_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_temperature_isValid = ::OpenAPI::fromJsonValue(m_temperature, json[QString("temperature")]);
    m_temperature_isSet = !json[QString("temperature")].isNull() && m_temperature_isValid;

    m_voltage_isValid = ::OpenAPI::fromJsonValue(m_voltage, json[QString("voltage")]);
    m_voltage_isSet = !json[QString("voltage")].isNull() && m_voltage_isValid;
}

QString OAIGoogleChromeManagementV1BatterySampleReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleChromeManagementV1BatterySampleReport::asJsonObject() const {
    QJsonObject obj;
    if (m_charge_rate_isSet) {
        obj.insert(QString("chargeRate"), ::OpenAPI::toJsonValue(m_charge_rate));
    }
    if (m_current_isSet) {
        obj.insert(QString("current"), ::OpenAPI::toJsonValue(m_current));
    }
    if (m_discharge_rate_isSet) {
        obj.insert(QString("dischargeRate"), ::OpenAPI::toJsonValue(m_discharge_rate));
    }
    if (m_remaining_capacity_isSet) {
        obj.insert(QString("remainingCapacity"), ::OpenAPI::toJsonValue(m_remaining_capacity));
    }
    if (m_report_time_isSet) {
        obj.insert(QString("reportTime"), ::OpenAPI::toJsonValue(m_report_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_temperature_isSet) {
        obj.insert(QString("temperature"), ::OpenAPI::toJsonValue(m_temperature));
    }
    if (m_voltage_isSet) {
        obj.insert(QString("voltage"), ::OpenAPI::toJsonValue(m_voltage));
    }
    return obj;
}

qint32 OAIGoogleChromeManagementV1BatterySampleReport::getChargeRate() const {
    return m_charge_rate;
}
void OAIGoogleChromeManagementV1BatterySampleReport::setChargeRate(const qint32 &charge_rate) {
    m_charge_rate = charge_rate;
    m_charge_rate_isSet = true;
}

bool OAIGoogleChromeManagementV1BatterySampleReport::is_charge_rate_Set() const{
    return m_charge_rate_isSet;
}

bool OAIGoogleChromeManagementV1BatterySampleReport::is_charge_rate_Valid() const{
    return m_charge_rate_isValid;
}

QString OAIGoogleChromeManagementV1BatterySampleReport::getCurrent() const {
    return m_current;
}
void OAIGoogleChromeManagementV1BatterySampleReport::setCurrent(const QString &current) {
    m_current = current;
    m_current_isSet = true;
}

bool OAIGoogleChromeManagementV1BatterySampleReport::is_current_Set() const{
    return m_current_isSet;
}

bool OAIGoogleChromeManagementV1BatterySampleReport::is_current_Valid() const{
    return m_current_isValid;
}

qint32 OAIGoogleChromeManagementV1BatterySampleReport::getDischargeRate() const {
    return m_discharge_rate;
}
void OAIGoogleChromeManagementV1BatterySampleReport::setDischargeRate(const qint32 &discharge_rate) {
    m_discharge_rate = discharge_rate;
    m_discharge_rate_isSet = true;
}

bool OAIGoogleChromeManagementV1BatterySampleReport::is_discharge_rate_Set() const{
    return m_discharge_rate_isSet;
}

bool OAIGoogleChromeManagementV1BatterySampleReport::is_discharge_rate_Valid() const{
    return m_discharge_rate_isValid;
}

QString OAIGoogleChromeManagementV1BatterySampleReport::getRemainingCapacity() const {
    return m_remaining_capacity;
}
void OAIGoogleChromeManagementV1BatterySampleReport::setRemainingCapacity(const QString &remaining_capacity) {
    m_remaining_capacity = remaining_capacity;
    m_remaining_capacity_isSet = true;
}

bool OAIGoogleChromeManagementV1BatterySampleReport::is_remaining_capacity_Set() const{
    return m_remaining_capacity_isSet;
}

bool OAIGoogleChromeManagementV1BatterySampleReport::is_remaining_capacity_Valid() const{
    return m_remaining_capacity_isValid;
}

QString OAIGoogleChromeManagementV1BatterySampleReport::getReportTime() const {
    return m_report_time;
}
void OAIGoogleChromeManagementV1BatterySampleReport::setReportTime(const QString &report_time) {
    m_report_time = report_time;
    m_report_time_isSet = true;
}

bool OAIGoogleChromeManagementV1BatterySampleReport::is_report_time_Set() const{
    return m_report_time_isSet;
}

bool OAIGoogleChromeManagementV1BatterySampleReport::is_report_time_Valid() const{
    return m_report_time_isValid;
}

QString OAIGoogleChromeManagementV1BatterySampleReport::getStatus() const {
    return m_status;
}
void OAIGoogleChromeManagementV1BatterySampleReport::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGoogleChromeManagementV1BatterySampleReport::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGoogleChromeManagementV1BatterySampleReport::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIGoogleChromeManagementV1BatterySampleReport::getTemperature() const {
    return m_temperature;
}
void OAIGoogleChromeManagementV1BatterySampleReport::setTemperature(const qint32 &temperature) {
    m_temperature = temperature;
    m_temperature_isSet = true;
}

bool OAIGoogleChromeManagementV1BatterySampleReport::is_temperature_Set() const{
    return m_temperature_isSet;
}

bool OAIGoogleChromeManagementV1BatterySampleReport::is_temperature_Valid() const{
    return m_temperature_isValid;
}

QString OAIGoogleChromeManagementV1BatterySampleReport::getVoltage() const {
    return m_voltage;
}
void OAIGoogleChromeManagementV1BatterySampleReport::setVoltage(const QString &voltage) {
    m_voltage = voltage;
    m_voltage_isSet = true;
}

bool OAIGoogleChromeManagementV1BatterySampleReport::is_voltage_Set() const{
    return m_voltage_isSet;
}

bool OAIGoogleChromeManagementV1BatterySampleReport::is_voltage_Valid() const{
    return m_voltage_isValid;
}

bool OAIGoogleChromeManagementV1BatterySampleReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_charge_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discharge_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temperature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voltage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleChromeManagementV1BatterySampleReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
