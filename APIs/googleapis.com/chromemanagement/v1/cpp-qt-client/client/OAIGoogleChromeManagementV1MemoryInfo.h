/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleChromeManagementV1MemoryInfo.h
 *
 * Memory information of a device. * This field has both telemetry and device information: - &#x60;totalRamBytes&#x60; - Device information - &#x60;availableRamBytes&#x60; - Telemetry information - &#x60;totalMemoryEncryption&#x60; - Device information * Data for this field is controlled via policy: [ReportDeviceMemoryInfo](https://chromeenterprise.google/policies/#ReportDeviceMemoryInfo) * Data Collection Frequency: - &#x60;totalRamBytes&#x60; - Only at upload - &#x60;availableRamBytes&#x60; - Every 10 minutes - &#x60;totalMemoryEncryption&#x60; - at device startup * Default Data Reporting Frequency: - &#x60;totalRamBytes&#x60; - 3 hours - &#x60;availableRamBytes&#x60; - 3 hours - &#x60;totalMemoryEncryption&#x60; - at device startup - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: only for &#x60;totalMemoryEncryption&#x60; * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_MEMORY_INFO
 */

#ifndef OAIGoogleChromeManagementV1MemoryInfo_H
#define OAIGoogleChromeManagementV1MemoryInfo_H

#include <QJsonObject>

#include "OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo;

class OAIGoogleChromeManagementV1MemoryInfo : public OAIObject {
public:
    OAIGoogleChromeManagementV1MemoryInfo();
    OAIGoogleChromeManagementV1MemoryInfo(QString json);
    ~OAIGoogleChromeManagementV1MemoryInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAvailableRamBytes() const;
    void setAvailableRamBytes(const QString &available_ram_bytes);
    bool is_available_ram_bytes_Set() const;
    bool is_available_ram_bytes_Valid() const;

    OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo getTotalMemoryEncryption() const;
    void setTotalMemoryEncryption(const OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo &total_memory_encryption);
    bool is_total_memory_encryption_Set() const;
    bool is_total_memory_encryption_Valid() const;

    QString getTotalRamBytes() const;
    void setTotalRamBytes(const QString &total_ram_bytes);
    bool is_total_ram_bytes_Set() const;
    bool is_total_ram_bytes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_available_ram_bytes;
    bool m_available_ram_bytes_isSet;
    bool m_available_ram_bytes_isValid;

    OAIGoogleChromeManagementV1TotalMemoryEncryptionInfo m_total_memory_encryption;
    bool m_total_memory_encryption_isSet;
    bool m_total_memory_encryption_isValid;

    QString m_total_ram_bytes;
    bool m_total_ram_bytes_isSet;
    bool m_total_ram_bytes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleChromeManagementV1MemoryInfo)

#endif // OAIGoogleChromeManagementV1MemoryInfo_H
