/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ChromeManagementApi);
  }
}(this, function(expect, ChromeManagementApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GoogleChromeManagementV1TelemetryDevice', function() {
    it('should create an instance of GoogleChromeManagementV1TelemetryDevice', function() {
      // uncomment below and update the code to test GoogleChromeManagementV1TelemetryDevice
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be.a(ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice);
    });

    it('should have the property audioStatusReport (base name: "audioStatusReport")', function() {
      // uncomment below and update the code to test the property audioStatusReport
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property batteryInfo (base name: "batteryInfo")', function() {
      // uncomment below and update the code to test the property batteryInfo
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property batteryStatusReport (base name: "batteryStatusReport")', function() {
      // uncomment below and update the code to test the property batteryStatusReport
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property bootPerformanceReport (base name: "bootPerformanceReport")', function() {
      // uncomment below and update the code to test the property bootPerformanceReport
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property cpuInfo (base name: "cpuInfo")', function() {
      // uncomment below and update the code to test the property cpuInfo
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property cpuStatusReport (base name: "cpuStatusReport")', function() {
      // uncomment below and update the code to test the property cpuStatusReport
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property customer (base name: "customer")', function() {
      // uncomment below and update the code to test the property customer
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property deviceId (base name: "deviceId")', function() {
      // uncomment below and update the code to test the property deviceId
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property graphicsInfo (base name: "graphicsInfo")', function() {
      // uncomment below and update the code to test the property graphicsInfo
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property graphicsStatusReport (base name: "graphicsStatusReport")', function() {
      // uncomment below and update the code to test the property graphicsStatusReport
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property heartbeatStatusReport (base name: "heartbeatStatusReport")', function() {
      // uncomment below and update the code to test the property heartbeatStatusReport
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property kioskAppStatusReport (base name: "kioskAppStatusReport")', function() {
      // uncomment below and update the code to test the property kioskAppStatusReport
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property memoryInfo (base name: "memoryInfo")', function() {
      // uncomment below and update the code to test the property memoryInfo
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property memoryStatusReport (base name: "memoryStatusReport")', function() {
      // uncomment below and update the code to test the property memoryStatusReport
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property networkBandwidthReport (base name: "networkBandwidthReport")', function() {
      // uncomment below and update the code to test the property networkBandwidthReport
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property networkDiagnosticsReport (base name: "networkDiagnosticsReport")', function() {
      // uncomment below and update the code to test the property networkDiagnosticsReport
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property networkInfo (base name: "networkInfo")', function() {
      // uncomment below and update the code to test the property networkInfo
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property networkStatusReport (base name: "networkStatusReport")', function() {
      // uncomment below and update the code to test the property networkStatusReport
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property orgUnitId (base name: "orgUnitId")', function() {
      // uncomment below and update the code to test the property orgUnitId
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property osUpdateStatus (base name: "osUpdateStatus")', function() {
      // uncomment below and update the code to test the property osUpdateStatus
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property peripheralsReport (base name: "peripheralsReport")', function() {
      // uncomment below and update the code to test the property peripheralsReport
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property runtimeCountersReport (base name: "runtimeCountersReport")', function() {
      // uncomment below and update the code to test the property runtimeCountersReport
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property serialNumber (base name: "serialNumber")', function() {
      // uncomment below and update the code to test the property serialNumber
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property storageInfo (base name: "storageInfo")', function() {
      // uncomment below and update the code to test the property storageInfo
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property storageStatusReport (base name: "storageStatusReport")', function() {
      // uncomment below and update the code to test the property storageStatusReport
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

    it('should have the property thunderboltInfo (base name: "thunderboltInfo")', function() {
      // uncomment below and update the code to test the property thunderboltInfo
      //var instance = new ChromeManagementApi.GoogleChromeManagementV1TelemetryDevice();
      //expect(instance).to.be();
    });

  });

}));
