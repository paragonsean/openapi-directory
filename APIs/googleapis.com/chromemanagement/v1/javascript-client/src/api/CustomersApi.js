/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GoogleChromeManagementV1CountChromeAppRequestsResponse from '../model/GoogleChromeManagementV1CountChromeAppRequestsResponse';
import GoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse from '../model/GoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse';
import GoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse from '../model/GoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse';
import GoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse from '../model/GoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse';
import GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse from '../model/GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse';
import GoogleChromeManagementV1CountChromeVersionsResponse from '../model/GoogleChromeManagementV1CountChromeVersionsResponse';
import GoogleChromeManagementV1CountInstalledAppsResponse from '../model/GoogleChromeManagementV1CountInstalledAppsResponse';
import GoogleChromeManagementV1CountPrintJobsByPrinterResponse from '../model/GoogleChromeManagementV1CountPrintJobsByPrinterResponse';
import GoogleChromeManagementV1CountPrintJobsByUserResponse from '../model/GoogleChromeManagementV1CountPrintJobsByUserResponse';
import GoogleChromeManagementV1EnumeratePrintJobsResponse from '../model/GoogleChromeManagementV1EnumeratePrintJobsResponse';
import GoogleChromeManagementV1FindInstalledAppDevicesResponse from '../model/GoogleChromeManagementV1FindInstalledAppDevicesResponse';
import GoogleChromeManagementV1ListTelemetryDevicesResponse from '../model/GoogleChromeManagementV1ListTelemetryDevicesResponse';
import GoogleChromeManagementV1ListTelemetryEventsResponse from '../model/GoogleChromeManagementV1ListTelemetryEventsResponse';
import GoogleChromeManagementV1ListTelemetryNotificationConfigsResponse from '../model/GoogleChromeManagementV1ListTelemetryNotificationConfigsResponse';
import GoogleChromeManagementV1ListTelemetryUsersResponse from '../model/GoogleChromeManagementV1ListTelemetryUsersResponse';
import GoogleChromeManagementV1TelemetryNotificationConfig from '../model/GoogleChromeManagementV1TelemetryNotificationConfig';
import GoogleChromeManagementV1TelemetryUser from '../model/GoogleChromeManagementV1TelemetryUser';

/**
* Customers service.
* @module api/CustomersApi
* @version v1
*/
export default class CustomersApi {

    /**
    * Constructs a new CustomersApi. 
    * @alias module:api/CustomersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the chromemanagementCustomersAppsCountChromeAppRequests operation.
     * @callback module:api/CustomersApi~chromemanagementCustomersAppsCountChromeAppRequestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromeManagementV1CountChromeAppRequestsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate summary of app installation requests.
     * @param {String} customer Required. Customer id or \"my_customer\" to use the customer associated to the account making the request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [orderBy] Field used to order results. Supported fields: * request_count * latest_request_time
     * @param {String} [orgUnitId] The ID of the organizational unit.
     * @param {Number} [pageSize] Maximum number of results to return. Maximum and default are 50, anything above will be coerced to 50.
     * @param {String} [pageToken] Token to specify the page of the request to be returned.
     * @param {module:api/CustomersApi~chromemanagementCustomersAppsCountChromeAppRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromeManagementV1CountChromeAppRequestsResponse}
     */
    chromemanagementCustomersAppsCountChromeAppRequests(customer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromemanagementCustomersAppsCountChromeAppRequests");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'orderBy': opts['orderBy'],
        'orgUnitId': opts['orgUnitId'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleChromeManagementV1CountChromeAppRequestsResponse;
      return this.apiClient.callApi(
        '/v1/{customer}/apps:countChromeAppRequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromemanagementCustomersReportsCountChromeBrowsersNeedingAttention operation.
     * @callback module:api/CustomersApi~chromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count of Chrome Browsers that have been recently enrolled, have new policy to be synced, or have no recent activity.
     * @param {String} customer Required. The customer ID or \"my_customer\" prefixed with \"customers/\".
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [orgUnitId] Optional. The ID of the organizational unit. If omitted, all data will be returned.
     * @param {module:api/CustomersApi~chromemanagementCustomersReportsCountChromeBrowsersNeedingAttentionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse}
     */
    chromemanagementCustomersReportsCountChromeBrowsersNeedingAttention(customer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromemanagementCustomersReportsCountChromeBrowsersNeedingAttention");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'orgUnitId': opts['orgUnitId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse;
      return this.apiClient.callApi(
        '/v1/{customer}/reports:countChromeBrowsersNeedingAttention', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDate operation.
     * @callback module:api/CustomersApi~chromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate report of the number of devices expiring in each month of the selected time frame. Devices are grouped by auto update expiration date and model. Further information can be found [here](https://support.google.com/chrome/a/answer/10564947).
     * @param {String} customer Required. The customer ID or \"my_customer\" prefixed with \"customers/\".
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [maxAueDate] Optional. Maximum expiration date in format yyyy-mm-dd in UTC timezone. If included returns all devices that have already expired and devices with auto expiration date equal to or earlier than the maximum date.
     * @param {String} [minAueDate] Optional. Maximum expiration date in format yyyy-mm-dd in UTC timezone. If included returns all devices that have already expired and devices with auto expiration date equal to or later than the minimum date.
     * @param {String} [orgUnitId] Optional. The organizational unit ID, if omitted, will return data for all organizational units.
     * @param {module:api/CustomersApi~chromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse}
     */
    chromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDate(customer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromemanagementCustomersReportsCountChromeDevicesReachingAutoExpirationDate");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'maxAueDate': opts['maxAueDate'],
        'minAueDate': opts['minAueDate'],
        'orgUnitId': opts['orgUnitId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse;
      return this.apiClient.callApi(
        '/v1/{customer}/reports:countChromeDevicesReachingAutoExpirationDate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromemanagementCustomersReportsCountChromeDevicesThatNeedAttention operation.
     * @callback module:api/CustomersApi~chromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Counts of ChromeOS devices that have not synced policies or have lacked user activity in the past 28 days, are out of date, or are not complaint. Further information can be found here https://support.google.com/chrome/a/answer/10564947
     * @param {String} customer Required. The customer ID or \"my_customer\" prefixed with \"customers/\".
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [orgUnitId] Optional. The ID of the organizational unit. If omitted, all data will be returned.
     * @param {String} [readMask] Required. Mask of the fields that should be populated in the returned report.
     * @param {module:api/CustomersApi~chromemanagementCustomersReportsCountChromeDevicesThatNeedAttentionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse}
     */
    chromemanagementCustomersReportsCountChromeDevicesThatNeedAttention(customer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromemanagementCustomersReportsCountChromeDevicesThatNeedAttention");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'orgUnitId': opts['orgUnitId'],
        'readMask': opts['readMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse;
      return this.apiClient.callApi(
        '/v1/{customer}/reports:countChromeDevicesThatNeedAttention', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromemanagementCustomersReportsCountChromeHardwareFleetDevices operation.
     * @callback module:api/CustomersApi~chromemanagementCustomersReportsCountChromeHardwareFleetDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Counts of devices with a specific hardware specification from the requested hardware type (for example model name, processor type). Further information can be found here https://support.google.com/chrome/a/answer/10564947
     * @param {String} customer Required. The customer ID or \"my_customer\".
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [orgUnitId] Optional. The ID of the organizational unit. If omitted, all data will be returned.
     * @param {String} [readMask] Required. Mask of the fields that should be populated in the returned report.
     * @param {module:api/CustomersApi~chromemanagementCustomersReportsCountChromeHardwareFleetDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse}
     */
    chromemanagementCustomersReportsCountChromeHardwareFleetDevices(customer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromemanagementCustomersReportsCountChromeHardwareFleetDevices");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'orgUnitId': opts['orgUnitId'],
        'readMask': opts['readMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse;
      return this.apiClient.callApi(
        '/v1/{customer}/reports:countChromeHardwareFleetDevices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromemanagementCustomersReportsCountChromeVersions operation.
     * @callback module:api/CustomersApi~chromemanagementCustomersReportsCountChromeVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromeManagementV1CountChromeVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate report of installed Chrome versions.
     * @param {String} customer Required. Customer id or \"my_customer\" to use the customer associated to the account making the request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Query string to filter results, AND-separated fields in EBNF syntax. Note: OR operations are not supported in this filter. Supported filter fields: * last_active_date
     * @param {String} [orgUnitId] The ID of the organizational unit.
     * @param {Number} [pageSize] Maximum number of results to return. Maximum and default are 100.
     * @param {String} [pageToken] Token to specify the page of the request to be returned.
     * @param {module:api/CustomersApi~chromemanagementCustomersReportsCountChromeVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromeManagementV1CountChromeVersionsResponse}
     */
    chromemanagementCustomersReportsCountChromeVersions(customer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromemanagementCustomersReportsCountChromeVersions");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orgUnitId': opts['orgUnitId'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleChromeManagementV1CountChromeVersionsResponse;
      return this.apiClient.callApi(
        '/v1/{customer}/reports:countChromeVersions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromemanagementCustomersReportsCountInstalledApps operation.
     * @callback module:api/CustomersApi~chromemanagementCustomersReportsCountInstalledAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromeManagementV1CountInstalledAppsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate report of app installations.
     * @param {String} customer Required. Customer id or \"my_customer\" to use the customer associated to the account making the request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Query string to filter results, AND-separated fields in EBNF syntax. Note: OR operations are not supported in this filter. Supported filter fields: * app_name * app_type * install_type * number_of_permissions * total_install_count * latest_profile_active_date * permission_name * app_id
     * @param {String} [orderBy] Field used to order results. Supported order by fields: * app_name * app_type * install_type * number_of_permissions * total_install_count * app_id
     * @param {String} [orgUnitId] The ID of the organizational unit.
     * @param {Number} [pageSize] Maximum number of results to return. Maximum and default are 100.
     * @param {String} [pageToken] Token to specify the page of the request to be returned.
     * @param {module:api/CustomersApi~chromemanagementCustomersReportsCountInstalledAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromeManagementV1CountInstalledAppsResponse}
     */
    chromemanagementCustomersReportsCountInstalledApps(customer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromemanagementCustomersReportsCountInstalledApps");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'orgUnitId': opts['orgUnitId'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleChromeManagementV1CountInstalledAppsResponse;
      return this.apiClient.callApi(
        '/v1/{customer}/reports:countInstalledApps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromemanagementCustomersReportsCountPrintJobsByPrinter operation.
     * @callback module:api/CustomersApi~chromemanagementCustomersReportsCountPrintJobsByPrinterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromeManagementV1CountPrintJobsByPrinterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a summary of printing done by each printer.
     * @param {String} customer Required. Customer ID prefixed with \"customers/\" or \"customers/my_customer\" to use the customer associated to the account making the request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Query string to filter results, AND-separated fields in EBNF syntax. Note: OR operations are not supported in this filter. Note: Only >= and <= comparators are supported in this filter. Supported filter fields: * complete_time
     * @param {String} [orderBy] Field used to order results. If omitted, results will be ordered in ascending order of the 'printer' field. Supported order_by fields: * printer * job_count * device_count * user_count
     * @param {Number} [pageSize] Maximum number of results to return. Maximum and default are 100.
     * @param {String} [pageToken] Token to specify the page of the response to be returned.
     * @param {String} [printerOrgUnitId] The ID of the organizational unit for printers. If specified, only data for printers from the specified organizational unit will be returned. If omitted, data for printers from all organizational units will be returned.
     * @param {module:api/CustomersApi~chromemanagementCustomersReportsCountPrintJobsByPrinterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromeManagementV1CountPrintJobsByPrinterResponse}
     */
    chromemanagementCustomersReportsCountPrintJobsByPrinter(customer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromemanagementCustomersReportsCountPrintJobsByPrinter");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'printerOrgUnitId': opts['printerOrgUnitId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleChromeManagementV1CountPrintJobsByPrinterResponse;
      return this.apiClient.callApi(
        '/v1/{customer}/reports:countPrintJobsByPrinter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromemanagementCustomersReportsCountPrintJobsByUser operation.
     * @callback module:api/CustomersApi~chromemanagementCustomersReportsCountPrintJobsByUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromeManagementV1CountPrintJobsByUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a summary of printing done by each user.
     * @param {String} customer Required. Customer ID prefixed with \"customers/\" or \"customers/my_customer\" to use the customer associated to the account making the request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Query string to filter results, AND-separated fields in EBNF syntax. Note: OR operations are not supported in this filter. Note: Only >= and <= comparators are supported in this filter. Supported filter fields: * complete_time
     * @param {String} [orderBy] Field used to order results. If omitted, results will be ordered in ascending order of the 'user_email' field. Supported order_by fields: * user_email * job_count * printer_count * device_count
     * @param {Number} [pageSize] Maximum number of results to return. Maximum and default are 100.
     * @param {String} [pageToken] Token to specify the page of the response to be returned.
     * @param {String} [printerOrgUnitId] The ID of the organizational unit for printers. If specified, only print jobs initiated with printers from the specified organizational unit will be counted. If omitted, all print jobs will be counted.
     * @param {module:api/CustomersApi~chromemanagementCustomersReportsCountPrintJobsByUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromeManagementV1CountPrintJobsByUserResponse}
     */
    chromemanagementCustomersReportsCountPrintJobsByUser(customer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromemanagementCustomersReportsCountPrintJobsByUser");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'printerOrgUnitId': opts['printerOrgUnitId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleChromeManagementV1CountPrintJobsByUserResponse;
      return this.apiClient.callApi(
        '/v1/{customer}/reports:countPrintJobsByUser', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromemanagementCustomersReportsEnumeratePrintJobs operation.
     * @callback module:api/CustomersApi~chromemanagementCustomersReportsEnumeratePrintJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromeManagementV1EnumeratePrintJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of print jobs.
     * @param {String} customer Required. Customer ID prefixed with \"customers/\" or \"customers/my_customer\" to use the customer associated to the account making the request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Query string to filter results, AND-separated fields in EBNF syntax. Note: OR operations are not supported in this filter. Note: Only >= and <= comparators are supported for `complete_time`. Note: Only = comparator supported for `user_id` and `printer_id`. Supported filter fields: * complete_time * printer_id * user_id
     * @param {String} [orderBy] Field used to order results. If not specified, results will be ordered in descending order of the `complete_time` field. Supported order by fields: * title * state * create_time * complete_time * document_page_count * color_mode * duplex_mode * printer * user_email
     * @param {Number} [pageSize] The number of print jobs in the page from 0 to 100 inclusive, if page_size is not specified or zero, the size will be 50.
     * @param {String} [pageToken] A page token received from a previous `EnumeratePrintJobs` call. Provide this to retrieve the subsequent page. If omitted, the first page of results will be returned. When paginating, all other parameters provided to `EnumeratePrintJobs` must match the call that provided the page token.
     * @param {String} [printerOrgUnitId] The ID of the organizational unit for printers. If specified, only print jobs submitted to printers from the specified organizational unit will be returned.
     * @param {module:api/CustomersApi~chromemanagementCustomersReportsEnumeratePrintJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromeManagementV1EnumeratePrintJobsResponse}
     */
    chromemanagementCustomersReportsEnumeratePrintJobs(customer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromemanagementCustomersReportsEnumeratePrintJobs");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'printerOrgUnitId': opts['printerOrgUnitId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleChromeManagementV1EnumeratePrintJobsResponse;
      return this.apiClient.callApi(
        '/v1/{customer}/reports:enumeratePrintJobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromemanagementCustomersReportsFindInstalledAppDevices operation.
     * @callback module:api/CustomersApi~chromemanagementCustomersReportsFindInstalledAppDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromeManagementV1FindInstalledAppDevicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate report of managed Chrome browser devices that have a specified app installed.
     * @param {String} customer Required. Customer id or \"my_customer\" to use the customer associated to the account making the request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [appId] Unique identifier of the app. For Chrome apps and extensions, the 32-character id (e.g. ehoadneljpdggcbbknedodolkkjodefl). For Android apps, the package name (e.g. com.evernote).
     * @param {module:model/String} [appType] Type of the app.
     * @param {String} [filter] Query string to filter results, AND-separated fields in EBNF syntax. Note: OR operations are not supported in this filter. Supported filter fields: * last_active_date
     * @param {String} [orderBy] Field used to order results. Supported order by fields: * machine * device_id
     * @param {String} [orgUnitId] The ID of the organizational unit.
     * @param {Number} [pageSize] Maximum number of results to return. Maximum and default are 100.
     * @param {String} [pageToken] Token to specify the page of the request to be returned.
     * @param {module:api/CustomersApi~chromemanagementCustomersReportsFindInstalledAppDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromeManagementV1FindInstalledAppDevicesResponse}
     */
    chromemanagementCustomersReportsFindInstalledAppDevices(customer, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling chromemanagementCustomersReportsFindInstalledAppDevices");
      }

      let pathParams = {
        'customer': customer
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'appId': opts['appId'],
        'appType': opts['appType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'orgUnitId': opts['orgUnitId'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleChromeManagementV1FindInstalledAppDevicesResponse;
      return this.apiClient.callApi(
        '/v1/{customer}/reports:findInstalledAppDevices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromemanagementCustomersTelemetryDevicesList operation.
     * @callback module:api/CustomersApi~chromemanagementCustomersTelemetryDevicesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromeManagementV1ListTelemetryDevicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all telemetry devices.
     * @param {String} parent Required. Customer id or \"my_customer\" to use the customer associated to the account making the request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Optional. Only include resources that match the filter. Supported filter fields: - org_unit_id - serial_number - device_id - reports_timestamp The \"reports_timestamp\" filter accepts either the Unix Epoch milliseconds format or the RFC3339 UTC \"Zulu\" format with nanosecond resolution and up to nine fractional digits. Both formats should be surrounded by simple double quotes. Examples: \"2014-10-02T15:01:23Z\", \"2014-10-02T15:01:23.045123456Z\", \"1679283943823\".
     * @param {Number} [pageSize] Maximum number of results to return. Default value is 100. Maximum value is 1000.
     * @param {String} [pageToken] Token to specify next page in the list.
     * @param {String} [readMask] Required. Read mask to specify which fields to return.
     * @param {module:api/CustomersApi~chromemanagementCustomersTelemetryDevicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromeManagementV1ListTelemetryDevicesResponse}
     */
    chromemanagementCustomersTelemetryDevicesList(parent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parent' is set
      if (parent === undefined || parent === null) {
        throw new Error("Missing the required parameter 'parent' when calling chromemanagementCustomersTelemetryDevicesList");
      }

      let pathParams = {
        'parent': parent
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'readMask': opts['readMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleChromeManagementV1ListTelemetryDevicesResponse;
      return this.apiClient.callApi(
        '/v1/{parent}/telemetry/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromemanagementCustomersTelemetryEventsList operation.
     * @callback module:api/CustomersApi~chromemanagementCustomersTelemetryEventsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromeManagementV1ListTelemetryEventsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List telemetry events.
     * @param {String} parent Required. Customer id or \"my_customer\" to use the customer associated to the account making the request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Optional. Only include resources that match the filter. Although this parameter is currently optional, this parameter will be required- please specify at least 1 event type. Supported filter fields: - device_id - user_id - device_org_unit_id - user_org_unit_id - timestamp - event_type The \"timestamp\" filter accepts either the Unix Epoch milliseconds format or the RFC3339 UTC \"Zulu\" format with nanosecond resolution and up to nine fractional digits. Both formats should be surrounded by simple double quotes. Examples: \"2014-10-02T15:01:23Z\", \"2014-10-02T15:01:23.045123456Z\", \"1679283943823\".
     * @param {Number} [pageSize] Optional. Maximum number of results to return. Default value is 100. Maximum value is 1000.
     * @param {String} [pageToken] Optional. Token to specify next page in the list.
     * @param {String} [readMask] Required. Read mask to specify which fields to return. Although currently required, this field will become optional, while the filter parameter with an event type will be come required.
     * @param {module:api/CustomersApi~chromemanagementCustomersTelemetryEventsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromeManagementV1ListTelemetryEventsResponse}
     */
    chromemanagementCustomersTelemetryEventsList(parent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parent' is set
      if (parent === undefined || parent === null) {
        throw new Error("Missing the required parameter 'parent' when calling chromemanagementCustomersTelemetryEventsList");
      }

      let pathParams = {
        'parent': parent
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'readMask': opts['readMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleChromeManagementV1ListTelemetryEventsResponse;
      return this.apiClient.callApi(
        '/v1/{parent}/telemetry/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromemanagementCustomersTelemetryNotificationConfigsCreate operation.
     * @callback module:api/CustomersApi~chromemanagementCustomersTelemetryNotificationConfigsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromeManagementV1TelemetryNotificationConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a telemetry notification config.
     * @param {String} parent Required. The parent resource where this notification config will be created. Format: `customers/{customer}`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/GoogleChromeManagementV1TelemetryNotificationConfig} [googleChromeManagementV1TelemetryNotificationConfig] 
     * @param {module:api/CustomersApi~chromemanagementCustomersTelemetryNotificationConfigsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromeManagementV1TelemetryNotificationConfig}
     */
    chromemanagementCustomersTelemetryNotificationConfigsCreate(parent, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleChromeManagementV1TelemetryNotificationConfig'];
      // verify the required parameter 'parent' is set
      if (parent === undefined || parent === null) {
        throw new Error("Missing the required parameter 'parent' when calling chromemanagementCustomersTelemetryNotificationConfigsCreate");
      }

      let pathParams = {
        'parent': parent
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GoogleChromeManagementV1TelemetryNotificationConfig;
      return this.apiClient.callApi(
        '/v1/{parent}/telemetry/notificationConfigs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromemanagementCustomersTelemetryNotificationConfigsDelete operation.
     * @callback module:api/CustomersApi~chromemanagementCustomersTelemetryNotificationConfigsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a telemetry notification config.
     * @param {String} name Required. The name of the notification config to delete. Format: `customers/{customer}/telemetry/notificationConfigs/{notification_config}`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/CustomersApi~chromemanagementCustomersTelemetryNotificationConfigsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    chromemanagementCustomersTelemetryNotificationConfigsDelete(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling chromemanagementCustomersTelemetryNotificationConfigsDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromemanagementCustomersTelemetryNotificationConfigsList operation.
     * @callback module:api/CustomersApi~chromemanagementCustomersTelemetryNotificationConfigsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromeManagementV1ListTelemetryNotificationConfigsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all telemetry notification configs.
     * @param {String} parent Required. The parent which owns the notification configs.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] The maximum number of notification configs to return. The service may return fewer than this value. If unspecified, at most 100 notification configs will be returned. The maximum value is 100; values above 100 will be coerced to 100.
     * @param {String} [pageToken] A page token, received from a previous `ListTelemetryNotificationConfigs` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListTelemetryNotificationConfigs` must match the call that provided the page token.
     * @param {module:api/CustomersApi~chromemanagementCustomersTelemetryNotificationConfigsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromeManagementV1ListTelemetryNotificationConfigsResponse}
     */
    chromemanagementCustomersTelemetryNotificationConfigsList(parent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parent' is set
      if (parent === undefined || parent === null) {
        throw new Error("Missing the required parameter 'parent' when calling chromemanagementCustomersTelemetryNotificationConfigsList");
      }

      let pathParams = {
        'parent': parent
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleChromeManagementV1ListTelemetryNotificationConfigsResponse;
      return this.apiClient.callApi(
        '/v1/{parent}/telemetry/notificationConfigs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromemanagementCustomersTelemetryUsersGet operation.
     * @callback module:api/CustomersApi~chromemanagementCustomersTelemetryUsersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromeManagementV1TelemetryUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get telemetry user.
     * @param {String} name Required. Name of the `TelemetryUser` to return.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [readMask] Read mask to specify which fields to return.
     * @param {module:api/CustomersApi~chromemanagementCustomersTelemetryUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromeManagementV1TelemetryUser}
     */
    chromemanagementCustomersTelemetryUsersGet(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling chromemanagementCustomersTelemetryUsersGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'readMask': opts['readMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleChromeManagementV1TelemetryUser;
      return this.apiClient.callApi(
        '/v1/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chromemanagementCustomersTelemetryUsersList operation.
     * @callback module:api/CustomersApi~chromemanagementCustomersTelemetryUsersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleChromeManagementV1ListTelemetryUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all telemetry users.
     * @param {String} parent Required. Customer id or \"my_customer\" to use the customer associated to the account making the request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Only include resources that match the filter. Supported filter fields: - user_id - user_org_unit_id 
     * @param {Number} [pageSize] Maximum number of results to return. Default value is 100. Maximum value is 1000.
     * @param {String} [pageToken] Token to specify next page in the list.
     * @param {String} [readMask] Read mask to specify which fields to return.
     * @param {module:api/CustomersApi~chromemanagementCustomersTelemetryUsersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleChromeManagementV1ListTelemetryUsersResponse}
     */
    chromemanagementCustomersTelemetryUsersList(parent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parent' is set
      if (parent === undefined || parent === null) {
        throw new Error("Missing the required parameter 'parent' when calling chromemanagementCustomersTelemetryUsersList");
      }

      let pathParams = {
        'parent': parent
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'readMask': opts['readMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GoogleChromeManagementV1ListTelemetryUsersResponse;
      return this.apiClient.callApi(
        '/v1/{parent}/telemetry/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
