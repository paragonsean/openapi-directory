/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleChromeManagementV1DisplayDevice from './GoogleChromeManagementV1DisplayDevice';
import GoogleChromeManagementV1GraphicsAdapterInfo from './GoogleChromeManagementV1GraphicsAdapterInfo';
import GoogleChromeManagementV1TouchScreenInfo from './GoogleChromeManagementV1TouchScreenInfo';

/**
 * The GoogleChromeManagementV1GraphicsInfo model module.
 * @module model/GoogleChromeManagementV1GraphicsInfo
 * @version v1
 */
class GoogleChromeManagementV1GraphicsInfo {
    /**
     * Constructs a new <code>GoogleChromeManagementV1GraphicsInfo</code>.
     * Information of the graphics subsystem. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceGraphicsStatus](https://chromeenterprise.google/policies/#ReportDeviceGraphicsStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_GRAPHICS_INFO
     * @alias module:model/GoogleChromeManagementV1GraphicsInfo
     */
    constructor() { 
        
        GoogleChromeManagementV1GraphicsInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromeManagementV1GraphicsInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromeManagementV1GraphicsInfo} obj Optional instance to populate.
     * @return {module:model/GoogleChromeManagementV1GraphicsInfo} The populated <code>GoogleChromeManagementV1GraphicsInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromeManagementV1GraphicsInfo();

            if (data.hasOwnProperty('adapterInfo')) {
                obj['adapterInfo'] = GoogleChromeManagementV1GraphicsAdapterInfo.constructFromObject(data['adapterInfo']);
            }
            if (data.hasOwnProperty('displayDevices')) {
                obj['displayDevices'] = ApiClient.convertToType(data['displayDevices'], [GoogleChromeManagementV1DisplayDevice]);
            }
            if (data.hasOwnProperty('eprivacySupported')) {
                obj['eprivacySupported'] = ApiClient.convertToType(data['eprivacySupported'], 'Boolean');
            }
            if (data.hasOwnProperty('touchScreenInfo')) {
                obj['touchScreenInfo'] = GoogleChromeManagementV1TouchScreenInfo.constructFromObject(data['touchScreenInfo']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromeManagementV1GraphicsInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromeManagementV1GraphicsInfo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `adapterInfo`
        if (data['adapterInfo']) { // data not null
          GoogleChromeManagementV1GraphicsAdapterInfo.validateJSON(data['adapterInfo']);
        }
        if (data['displayDevices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['displayDevices'])) {
                throw new Error("Expected the field `displayDevices` to be an array in the JSON data but got " + data['displayDevices']);
            }
            // validate the optional field `displayDevices` (array)
            for (const item of data['displayDevices']) {
                GoogleChromeManagementV1DisplayDevice.validateJSON(item);
            };
        }
        // validate the optional field `touchScreenInfo`
        if (data['touchScreenInfo']) { // data not null
          GoogleChromeManagementV1TouchScreenInfo.validateJSON(data['touchScreenInfo']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleChromeManagementV1GraphicsAdapterInfo} adapterInfo
 */
GoogleChromeManagementV1GraphicsInfo.prototype['adapterInfo'] = undefined;

/**
 * Output only. Information about the display(s) of the device.
 * @member {Array.<module:model/GoogleChromeManagementV1DisplayDevice>} displayDevices
 */
GoogleChromeManagementV1GraphicsInfo.prototype['displayDevices'] = undefined;

/**
 * Output only. Is ePrivacy screen supported or not.
 * @member {Boolean} eprivacySupported
 */
GoogleChromeManagementV1GraphicsInfo.prototype['eprivacySupported'] = undefined;

/**
 * @member {module:model/GoogleChromeManagementV1TouchScreenInfo} touchScreenInfo
 */
GoogleChromeManagementV1GraphicsInfo.prototype['touchScreenInfo'] = undefined;






export default GoogleChromeManagementV1GraphicsInfo;

