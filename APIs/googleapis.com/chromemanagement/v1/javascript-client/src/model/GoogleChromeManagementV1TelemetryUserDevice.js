/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleChromeManagementV1AudioStatusReport from './GoogleChromeManagementV1AudioStatusReport';
import GoogleChromeManagementV1DeviceActivityReport from './GoogleChromeManagementV1DeviceActivityReport';
import GoogleChromeManagementV1NetworkBandwidthReport from './GoogleChromeManagementV1NetworkBandwidthReport';
import GoogleChromeManagementV1PeripheralsReport from './GoogleChromeManagementV1PeripheralsReport';

/**
 * The GoogleChromeManagementV1TelemetryUserDevice model module.
 * @module model/GoogleChromeManagementV1TelemetryUserDevice
 * @version v1
 */
class GoogleChromeManagementV1TelemetryUserDevice {
    /**
     * Constructs a new <code>GoogleChromeManagementV1TelemetryUserDevice</code>.
     * Telemetry data collected for a managed user and device. * Granular permission needed: TELEMETRY_API_DEVICE
     * @alias module:model/GoogleChromeManagementV1TelemetryUserDevice
     */
    constructor() { 
        
        GoogleChromeManagementV1TelemetryUserDevice.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromeManagementV1TelemetryUserDevice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromeManagementV1TelemetryUserDevice} obj Optional instance to populate.
     * @return {module:model/GoogleChromeManagementV1TelemetryUserDevice} The populated <code>GoogleChromeManagementV1TelemetryUserDevice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromeManagementV1TelemetryUserDevice();

            if (data.hasOwnProperty('audioStatusReport')) {
                obj['audioStatusReport'] = ApiClient.convertToType(data['audioStatusReport'], [GoogleChromeManagementV1AudioStatusReport]);
            }
            if (data.hasOwnProperty('deviceActivityReport')) {
                obj['deviceActivityReport'] = ApiClient.convertToType(data['deviceActivityReport'], [GoogleChromeManagementV1DeviceActivityReport]);
            }
            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = ApiClient.convertToType(data['deviceId'], 'String');
            }
            if (data.hasOwnProperty('networkBandwidthReport')) {
                obj['networkBandwidthReport'] = ApiClient.convertToType(data['networkBandwidthReport'], [GoogleChromeManagementV1NetworkBandwidthReport]);
            }
            if (data.hasOwnProperty('peripheralsReport')) {
                obj['peripheralsReport'] = ApiClient.convertToType(data['peripheralsReport'], [GoogleChromeManagementV1PeripheralsReport]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromeManagementV1TelemetryUserDevice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromeManagementV1TelemetryUserDevice</code>.
     */
    static validateJSON(data) {
        if (data['audioStatusReport']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['audioStatusReport'])) {
                throw new Error("Expected the field `audioStatusReport` to be an array in the JSON data but got " + data['audioStatusReport']);
            }
            // validate the optional field `audioStatusReport` (array)
            for (const item of data['audioStatusReport']) {
                GoogleChromeManagementV1AudioStatusReport.validateJSON(item);
            };
        }
        if (data['deviceActivityReport']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['deviceActivityReport'])) {
                throw new Error("Expected the field `deviceActivityReport` to be an array in the JSON data but got " + data['deviceActivityReport']);
            }
            // validate the optional field `deviceActivityReport` (array)
            for (const item of data['deviceActivityReport']) {
                GoogleChromeManagementV1DeviceActivityReport.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['deviceId'] && !(typeof data['deviceId'] === 'string' || data['deviceId'] instanceof String)) {
            throw new Error("Expected the field `deviceId` to be a primitive type in the JSON string but got " + data['deviceId']);
        }
        if (data['networkBandwidthReport']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['networkBandwidthReport'])) {
                throw new Error("Expected the field `networkBandwidthReport` to be an array in the JSON data but got " + data['networkBandwidthReport']);
            }
            // validate the optional field `networkBandwidthReport` (array)
            for (const item of data['networkBandwidthReport']) {
                GoogleChromeManagementV1NetworkBandwidthReport.validateJSON(item);
            };
        }
        if (data['peripheralsReport']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['peripheralsReport'])) {
                throw new Error("Expected the field `peripheralsReport` to be an array in the JSON data but got " + data['peripheralsReport']);
            }
            // validate the optional field `peripheralsReport` (array)
            for (const item of data['peripheralsReport']) {
                GoogleChromeManagementV1PeripheralsReport.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Output only. Audio reports collected periodically sorted in a decreasing order of report_time.
 * @member {Array.<module:model/GoogleChromeManagementV1AudioStatusReport>} audioStatusReport
 */
GoogleChromeManagementV1TelemetryUserDevice.prototype['audioStatusReport'] = undefined;

/**
 * Output only. Device activity reports collected periodically sorted in a decreasing order of report_time.
 * @member {Array.<module:model/GoogleChromeManagementV1DeviceActivityReport>} deviceActivityReport
 */
GoogleChromeManagementV1TelemetryUserDevice.prototype['deviceActivityReport'] = undefined;

/**
 * The unique Directory API ID of the device. This value is the same as the Admin Console's Directory API ID in the ChromeOS Devices tab.
 * @member {String} deviceId
 */
GoogleChromeManagementV1TelemetryUserDevice.prototype['deviceId'] = undefined;

/**
 * Output only. Network bandwidth reports collected periodically sorted in a decreasing order of report_time.
 * @member {Array.<module:model/GoogleChromeManagementV1NetworkBandwidthReport>} networkBandwidthReport
 */
GoogleChromeManagementV1TelemetryUserDevice.prototype['networkBandwidthReport'] = undefined;

/**
 * Output only. Peripherals reports collected periodically sorted in a decreasing order of report_time.
 * @member {Array.<module:model/GoogleChromeManagementV1PeripheralsReport>} peripheralsReport
 */
GoogleChromeManagementV1TelemetryUserDevice.prototype['peripheralsReport'] = undefined;






export default GoogleChromeManagementV1TelemetryUserDevice;

