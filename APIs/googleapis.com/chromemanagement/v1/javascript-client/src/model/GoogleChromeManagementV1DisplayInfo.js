/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleChromeManagementV1DisplayInfo model module.
 * @module model/GoogleChromeManagementV1DisplayInfo
 * @version v1
 */
class GoogleChromeManagementV1DisplayInfo {
    /**
     * Constructs a new <code>GoogleChromeManagementV1DisplayInfo</code>.
     * Information for a display.
     * @alias module:model/GoogleChromeManagementV1DisplayInfo
     */
    constructor() { 
        
        GoogleChromeManagementV1DisplayInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromeManagementV1DisplayInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromeManagementV1DisplayInfo} obj Optional instance to populate.
     * @return {module:model/GoogleChromeManagementV1DisplayInfo} The populated <code>GoogleChromeManagementV1DisplayInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromeManagementV1DisplayInfo();

            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = ApiClient.convertToType(data['deviceId'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('isInternal')) {
                obj['isInternal'] = ApiClient.convertToType(data['isInternal'], 'Boolean');
            }
            if (data.hasOwnProperty('refreshRate')) {
                obj['refreshRate'] = ApiClient.convertToType(data['refreshRate'], 'Number');
            }
            if (data.hasOwnProperty('resolutionHeight')) {
                obj['resolutionHeight'] = ApiClient.convertToType(data['resolutionHeight'], 'Number');
            }
            if (data.hasOwnProperty('resolutionWidth')) {
                obj['resolutionWidth'] = ApiClient.convertToType(data['resolutionWidth'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromeManagementV1DisplayInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromeManagementV1DisplayInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deviceId'] && !(typeof data['deviceId'] === 'string' || data['deviceId'] instanceof String)) {
            throw new Error("Expected the field `deviceId` to be a primitive type in the JSON string but got " + data['deviceId']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }

        return true;
    }


}



/**
 * Output only. Represents the graphics card device id.
 * @member {String} deviceId
 */
GoogleChromeManagementV1DisplayInfo.prototype['deviceId'] = undefined;

/**
 * Output only. Display device name.
 * @member {String} displayName
 */
GoogleChromeManagementV1DisplayInfo.prototype['displayName'] = undefined;

/**
 * Output only. Indicates if display is internal or not.
 * @member {Boolean} isInternal
 */
GoogleChromeManagementV1DisplayInfo.prototype['isInternal'] = undefined;

/**
 * Output only. Refresh rate in Hz.
 * @member {Number} refreshRate
 */
GoogleChromeManagementV1DisplayInfo.prototype['refreshRate'] = undefined;

/**
 * Output only. Resolution height in pixels.
 * @member {Number} resolutionHeight
 */
GoogleChromeManagementV1DisplayInfo.prototype['resolutionHeight'] = undefined;

/**
 * Output only. Resolution width in pixels.
 * @member {Number} resolutionWidth
 */
GoogleChromeManagementV1DisplayInfo.prototype['resolutionWidth'] = undefined;






export default GoogleChromeManagementV1DisplayInfo;

