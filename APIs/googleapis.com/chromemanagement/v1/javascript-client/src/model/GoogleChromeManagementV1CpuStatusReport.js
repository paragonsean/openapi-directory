/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleChromeManagementV1CpuTemperatureInfo from './GoogleChromeManagementV1CpuTemperatureInfo';

/**
 * The GoogleChromeManagementV1CpuStatusReport model module.
 * @module model/GoogleChromeManagementV1CpuStatusReport
 * @version v1
 */
class GoogleChromeManagementV1CpuStatusReport {
    /**
     * Constructs a new <code>GoogleChromeManagementV1CpuStatusReport</code>.
     * Provides information about the status of the CPU. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceCpuInfo](https://chromeenterprise.google/policies/#ReportDeviceCpuInfo) * Data Collection Frequency: Every 10 minutes * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_CPU_REPORT
     * @alias module:model/GoogleChromeManagementV1CpuStatusReport
     */
    constructor() { 
        
        GoogleChromeManagementV1CpuStatusReport.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromeManagementV1CpuStatusReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromeManagementV1CpuStatusReport} obj Optional instance to populate.
     * @return {module:model/GoogleChromeManagementV1CpuStatusReport} The populated <code>GoogleChromeManagementV1CpuStatusReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromeManagementV1CpuStatusReport();

            if (data.hasOwnProperty('cpuTemperatureInfo')) {
                obj['cpuTemperatureInfo'] = ApiClient.convertToType(data['cpuTemperatureInfo'], [GoogleChromeManagementV1CpuTemperatureInfo]);
            }
            if (data.hasOwnProperty('cpuUtilizationPct')) {
                obj['cpuUtilizationPct'] = ApiClient.convertToType(data['cpuUtilizationPct'], 'Number');
            }
            if (data.hasOwnProperty('reportTime')) {
                obj['reportTime'] = ApiClient.convertToType(data['reportTime'], 'String');
            }
            if (data.hasOwnProperty('sampleFrequency')) {
                obj['sampleFrequency'] = ApiClient.convertToType(data['sampleFrequency'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromeManagementV1CpuStatusReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromeManagementV1CpuStatusReport</code>.
     */
    static validateJSON(data) {
        if (data['cpuTemperatureInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cpuTemperatureInfo'])) {
                throw new Error("Expected the field `cpuTemperatureInfo` to be an array in the JSON data but got " + data['cpuTemperatureInfo']);
            }
            // validate the optional field `cpuTemperatureInfo` (array)
            for (const item of data['cpuTemperatureInfo']) {
                GoogleChromeManagementV1CpuTemperatureInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['reportTime'] && !(typeof data['reportTime'] === 'string' || data['reportTime'] instanceof String)) {
            throw new Error("Expected the field `reportTime` to be a primitive type in the JSON string but got " + data['reportTime']);
        }
        // ensure the json data is a string
        if (data['sampleFrequency'] && !(typeof data['sampleFrequency'] === 'string' || data['sampleFrequency'] instanceof String)) {
            throw new Error("Expected the field `sampleFrequency` to be a primitive type in the JSON string but got " + data['sampleFrequency']);
        }

        return true;
    }


}



/**
 * Output only. CPU temperature sample info per CPU core in Celsius
 * @member {Array.<module:model/GoogleChromeManagementV1CpuTemperatureInfo>} cpuTemperatureInfo
 */
GoogleChromeManagementV1CpuStatusReport.prototype['cpuTemperatureInfo'] = undefined;

/**
 * Output only. Sample of CPU utilization (0-100 percent).
 * @member {Number} cpuUtilizationPct
 */
GoogleChromeManagementV1CpuStatusReport.prototype['cpuUtilizationPct'] = undefined;

/**
 * Output only. The timestamp in milliseconds representing time at which this report was sampled.
 * @member {String} reportTime
 */
GoogleChromeManagementV1CpuStatusReport.prototype['reportTime'] = undefined;

/**
 * Output only. Frequency the report is sampled.
 * @member {String} sampleFrequency
 */
GoogleChromeManagementV1CpuStatusReport.prototype['sampleFrequency'] = undefined;






export default GoogleChromeManagementV1CpuStatusReport;

