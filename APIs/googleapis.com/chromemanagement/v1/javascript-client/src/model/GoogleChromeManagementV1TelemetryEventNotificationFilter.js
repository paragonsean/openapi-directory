/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleChromeManagementV1TelemetryEventNotificationFilter model module.
 * @module model/GoogleChromeManagementV1TelemetryEventNotificationFilter
 * @version v1
 */
class GoogleChromeManagementV1TelemetryEventNotificationFilter {
    /**
     * Constructs a new <code>GoogleChromeManagementV1TelemetryEventNotificationFilter</code>.
     * Configures how the telemetry events should be filtered.
     * @alias module:model/GoogleChromeManagementV1TelemetryEventNotificationFilter
     */
    constructor() { 
        
        GoogleChromeManagementV1TelemetryEventNotificationFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromeManagementV1TelemetryEventNotificationFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromeManagementV1TelemetryEventNotificationFilter} obj Optional instance to populate.
     * @return {module:model/GoogleChromeManagementV1TelemetryEventNotificationFilter} The populated <code>GoogleChromeManagementV1TelemetryEventNotificationFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromeManagementV1TelemetryEventNotificationFilter();

            if (data.hasOwnProperty('eventTypes')) {
                obj['eventTypes'] = ApiClient.convertToType(data['eventTypes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromeManagementV1TelemetryEventNotificationFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromeManagementV1TelemetryEventNotificationFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['eventTypes'])) {
            throw new Error("Expected the field `eventTypes` to be an array in the JSON data but got " + data['eventTypes']);
        }

        return true;
    }


}



/**
 * Only sends the notifications for events of these types. Must not be empty.
 * @member {Array.<module:model/GoogleChromeManagementV1TelemetryEventNotificationFilter.EventTypesEnum>} eventTypes
 */
GoogleChromeManagementV1TelemetryEventNotificationFilter.prototype['eventTypes'] = undefined;





/**
 * Allowed values for the <code>eventTypes</code> property.
 * @enum {String}
 * @readonly
 */
GoogleChromeManagementV1TelemetryEventNotificationFilter['EventTypesEnum'] = {

    /**
     * value: "EVENT_TYPE_UNSPECIFIED"
     * @const
     */
    "EVENT_TYPE_UNSPECIFIED": "EVENT_TYPE_UNSPECIFIED",

    /**
     * value: "AUDIO_SEVERE_UNDERRUN"
     * @const
     */
    "AUDIO_SEVERE_UNDERRUN": "AUDIO_SEVERE_UNDERRUN",

    /**
     * value: "NETWORK_STATE_CHANGE"
     * @const
     */
    "NETWORK_STATE_CHANGE": "NETWORK_STATE_CHANGE",

    /**
     * value: "USB_ADDED"
     * @const
     */
    "USB_ADDED": "USB_ADDED",

    /**
     * value: "USB_REMOVED"
     * @const
     */
    "USB_REMOVED": "USB_REMOVED",

    /**
     * value: "NETWORK_HTTPS_LATENCY_CHANGE"
     * @const
     */
    "NETWORK_HTTPS_LATENCY_CHANGE": "NETWORK_HTTPS_LATENCY_CHANGE",

    /**
     * value: "WIFI_SIGNAL_STRENGTH_LOW"
     * @const
     */
    "WIFI_SIGNAL_STRENGTH_LOW": "WIFI_SIGNAL_STRENGTH_LOW",

    /**
     * value: "WIFI_SIGNAL_STRENGTH_RECOVERED"
     * @const
     */
    "WIFI_SIGNAL_STRENGTH_RECOVERED": "WIFI_SIGNAL_STRENGTH_RECOVERED",

    /**
     * value: "VPN_CONNECTION_STATE_CHANGE"
     * @const
     */
    "VPN_CONNECTION_STATE_CHANGE": "VPN_CONNECTION_STATE_CHANGE"
};



export default GoogleChromeManagementV1TelemetryEventNotificationFilter;

