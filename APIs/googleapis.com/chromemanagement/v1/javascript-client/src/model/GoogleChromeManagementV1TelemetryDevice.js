/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleChromeManagementV1AudioStatusReport from './GoogleChromeManagementV1AudioStatusReport';
import GoogleChromeManagementV1BatteryInfo from './GoogleChromeManagementV1BatteryInfo';
import GoogleChromeManagementV1BatteryStatusReport from './GoogleChromeManagementV1BatteryStatusReport';
import GoogleChromeManagementV1BootPerformanceReport from './GoogleChromeManagementV1BootPerformanceReport';
import GoogleChromeManagementV1CpuInfo from './GoogleChromeManagementV1CpuInfo';
import GoogleChromeManagementV1CpuStatusReport from './GoogleChromeManagementV1CpuStatusReport';
import GoogleChromeManagementV1GraphicsInfo from './GoogleChromeManagementV1GraphicsInfo';
import GoogleChromeManagementV1GraphicsStatusReport from './GoogleChromeManagementV1GraphicsStatusReport';
import GoogleChromeManagementV1HeartbeatStatusReport from './GoogleChromeManagementV1HeartbeatStatusReport';
import GoogleChromeManagementV1KioskAppStatusReport from './GoogleChromeManagementV1KioskAppStatusReport';
import GoogleChromeManagementV1MemoryInfo from './GoogleChromeManagementV1MemoryInfo';
import GoogleChromeManagementV1MemoryStatusReport from './GoogleChromeManagementV1MemoryStatusReport';
import GoogleChromeManagementV1NetworkBandwidthReport from './GoogleChromeManagementV1NetworkBandwidthReport';
import GoogleChromeManagementV1NetworkDiagnosticsReport from './GoogleChromeManagementV1NetworkDiagnosticsReport';
import GoogleChromeManagementV1NetworkInfo from './GoogleChromeManagementV1NetworkInfo';
import GoogleChromeManagementV1NetworkStatusReport from './GoogleChromeManagementV1NetworkStatusReport';
import GoogleChromeManagementV1OsUpdateStatus from './GoogleChromeManagementV1OsUpdateStatus';
import GoogleChromeManagementV1PeripheralsReport from './GoogleChromeManagementV1PeripheralsReport';
import GoogleChromeManagementV1RuntimeCountersReport from './GoogleChromeManagementV1RuntimeCountersReport';
import GoogleChromeManagementV1StorageInfo from './GoogleChromeManagementV1StorageInfo';
import GoogleChromeManagementV1StorageStatusReport from './GoogleChromeManagementV1StorageStatusReport';
import GoogleChromeManagementV1ThunderboltInfo from './GoogleChromeManagementV1ThunderboltInfo';

/**
 * The GoogleChromeManagementV1TelemetryDevice model module.
 * @module model/GoogleChromeManagementV1TelemetryDevice
 * @version v1
 */
class GoogleChromeManagementV1TelemetryDevice {
    /**
     * Constructs a new <code>GoogleChromeManagementV1TelemetryDevice</code>.
     * Telemetry data collected from a managed device. * Granular permission needed: TELEMETRY_API_DEVICE
     * @alias module:model/GoogleChromeManagementV1TelemetryDevice
     */
    constructor() { 
        
        GoogleChromeManagementV1TelemetryDevice.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromeManagementV1TelemetryDevice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromeManagementV1TelemetryDevice} obj Optional instance to populate.
     * @return {module:model/GoogleChromeManagementV1TelemetryDevice} The populated <code>GoogleChromeManagementV1TelemetryDevice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromeManagementV1TelemetryDevice();

            if (data.hasOwnProperty('audioStatusReport')) {
                obj['audioStatusReport'] = ApiClient.convertToType(data['audioStatusReport'], [GoogleChromeManagementV1AudioStatusReport]);
            }
            if (data.hasOwnProperty('batteryInfo')) {
                obj['batteryInfo'] = ApiClient.convertToType(data['batteryInfo'], [GoogleChromeManagementV1BatteryInfo]);
            }
            if (data.hasOwnProperty('batteryStatusReport')) {
                obj['batteryStatusReport'] = ApiClient.convertToType(data['batteryStatusReport'], [GoogleChromeManagementV1BatteryStatusReport]);
            }
            if (data.hasOwnProperty('bootPerformanceReport')) {
                obj['bootPerformanceReport'] = ApiClient.convertToType(data['bootPerformanceReport'], [GoogleChromeManagementV1BootPerformanceReport]);
            }
            if (data.hasOwnProperty('cpuInfo')) {
                obj['cpuInfo'] = ApiClient.convertToType(data['cpuInfo'], [GoogleChromeManagementV1CpuInfo]);
            }
            if (data.hasOwnProperty('cpuStatusReport')) {
                obj['cpuStatusReport'] = ApiClient.convertToType(data['cpuStatusReport'], [GoogleChromeManagementV1CpuStatusReport]);
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = ApiClient.convertToType(data['customer'], 'String');
            }
            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = ApiClient.convertToType(data['deviceId'], 'String');
            }
            if (data.hasOwnProperty('graphicsInfo')) {
                obj['graphicsInfo'] = GoogleChromeManagementV1GraphicsInfo.constructFromObject(data['graphicsInfo']);
            }
            if (data.hasOwnProperty('graphicsStatusReport')) {
                obj['graphicsStatusReport'] = ApiClient.convertToType(data['graphicsStatusReport'], [GoogleChromeManagementV1GraphicsStatusReport]);
            }
            if (data.hasOwnProperty('heartbeatStatusReport')) {
                obj['heartbeatStatusReport'] = ApiClient.convertToType(data['heartbeatStatusReport'], [GoogleChromeManagementV1HeartbeatStatusReport]);
            }
            if (data.hasOwnProperty('kioskAppStatusReport')) {
                obj['kioskAppStatusReport'] = ApiClient.convertToType(data['kioskAppStatusReport'], [GoogleChromeManagementV1KioskAppStatusReport]);
            }
            if (data.hasOwnProperty('memoryInfo')) {
                obj['memoryInfo'] = GoogleChromeManagementV1MemoryInfo.constructFromObject(data['memoryInfo']);
            }
            if (data.hasOwnProperty('memoryStatusReport')) {
                obj['memoryStatusReport'] = ApiClient.convertToType(data['memoryStatusReport'], [GoogleChromeManagementV1MemoryStatusReport]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('networkBandwidthReport')) {
                obj['networkBandwidthReport'] = ApiClient.convertToType(data['networkBandwidthReport'], [GoogleChromeManagementV1NetworkBandwidthReport]);
            }
            if (data.hasOwnProperty('networkDiagnosticsReport')) {
                obj['networkDiagnosticsReport'] = ApiClient.convertToType(data['networkDiagnosticsReport'], [GoogleChromeManagementV1NetworkDiagnosticsReport]);
            }
            if (data.hasOwnProperty('networkInfo')) {
                obj['networkInfo'] = GoogleChromeManagementV1NetworkInfo.constructFromObject(data['networkInfo']);
            }
            if (data.hasOwnProperty('networkStatusReport')) {
                obj['networkStatusReport'] = ApiClient.convertToType(data['networkStatusReport'], [GoogleChromeManagementV1NetworkStatusReport]);
            }
            if (data.hasOwnProperty('orgUnitId')) {
                obj['orgUnitId'] = ApiClient.convertToType(data['orgUnitId'], 'String');
            }
            if (data.hasOwnProperty('osUpdateStatus')) {
                obj['osUpdateStatus'] = ApiClient.convertToType(data['osUpdateStatus'], [GoogleChromeManagementV1OsUpdateStatus]);
            }
            if (data.hasOwnProperty('peripheralsReport')) {
                obj['peripheralsReport'] = ApiClient.convertToType(data['peripheralsReport'], [GoogleChromeManagementV1PeripheralsReport]);
            }
            if (data.hasOwnProperty('runtimeCountersReport')) {
                obj['runtimeCountersReport'] = ApiClient.convertToType(data['runtimeCountersReport'], [GoogleChromeManagementV1RuntimeCountersReport]);
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
            }
            if (data.hasOwnProperty('storageInfo')) {
                obj['storageInfo'] = GoogleChromeManagementV1StorageInfo.constructFromObject(data['storageInfo']);
            }
            if (data.hasOwnProperty('storageStatusReport')) {
                obj['storageStatusReport'] = ApiClient.convertToType(data['storageStatusReport'], [GoogleChromeManagementV1StorageStatusReport]);
            }
            if (data.hasOwnProperty('thunderboltInfo')) {
                obj['thunderboltInfo'] = ApiClient.convertToType(data['thunderboltInfo'], [GoogleChromeManagementV1ThunderboltInfo]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromeManagementV1TelemetryDevice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromeManagementV1TelemetryDevice</code>.
     */
    static validateJSON(data) {
        if (data['audioStatusReport']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['audioStatusReport'])) {
                throw new Error("Expected the field `audioStatusReport` to be an array in the JSON data but got " + data['audioStatusReport']);
            }
            // validate the optional field `audioStatusReport` (array)
            for (const item of data['audioStatusReport']) {
                GoogleChromeManagementV1AudioStatusReport.validateJSON(item);
            };
        }
        if (data['batteryInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['batteryInfo'])) {
                throw new Error("Expected the field `batteryInfo` to be an array in the JSON data but got " + data['batteryInfo']);
            }
            // validate the optional field `batteryInfo` (array)
            for (const item of data['batteryInfo']) {
                GoogleChromeManagementV1BatteryInfo.validateJSON(item);
            };
        }
        if (data['batteryStatusReport']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['batteryStatusReport'])) {
                throw new Error("Expected the field `batteryStatusReport` to be an array in the JSON data but got " + data['batteryStatusReport']);
            }
            // validate the optional field `batteryStatusReport` (array)
            for (const item of data['batteryStatusReport']) {
                GoogleChromeManagementV1BatteryStatusReport.validateJSON(item);
            };
        }
        if (data['bootPerformanceReport']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bootPerformanceReport'])) {
                throw new Error("Expected the field `bootPerformanceReport` to be an array in the JSON data but got " + data['bootPerformanceReport']);
            }
            // validate the optional field `bootPerformanceReport` (array)
            for (const item of data['bootPerformanceReport']) {
                GoogleChromeManagementV1BootPerformanceReport.validateJSON(item);
            };
        }
        if (data['cpuInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cpuInfo'])) {
                throw new Error("Expected the field `cpuInfo` to be an array in the JSON data but got " + data['cpuInfo']);
            }
            // validate the optional field `cpuInfo` (array)
            for (const item of data['cpuInfo']) {
                GoogleChromeManagementV1CpuInfo.validateJSON(item);
            };
        }
        if (data['cpuStatusReport']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cpuStatusReport'])) {
                throw new Error("Expected the field `cpuStatusReport` to be an array in the JSON data but got " + data['cpuStatusReport']);
            }
            // validate the optional field `cpuStatusReport` (array)
            for (const item of data['cpuStatusReport']) {
                GoogleChromeManagementV1CpuStatusReport.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['customer'] && !(typeof data['customer'] === 'string' || data['customer'] instanceof String)) {
            throw new Error("Expected the field `customer` to be a primitive type in the JSON string but got " + data['customer']);
        }
        // ensure the json data is a string
        if (data['deviceId'] && !(typeof data['deviceId'] === 'string' || data['deviceId'] instanceof String)) {
            throw new Error("Expected the field `deviceId` to be a primitive type in the JSON string but got " + data['deviceId']);
        }
        // validate the optional field `graphicsInfo`
        if (data['graphicsInfo']) { // data not null
          GoogleChromeManagementV1GraphicsInfo.validateJSON(data['graphicsInfo']);
        }
        if (data['graphicsStatusReport']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['graphicsStatusReport'])) {
                throw new Error("Expected the field `graphicsStatusReport` to be an array in the JSON data but got " + data['graphicsStatusReport']);
            }
            // validate the optional field `graphicsStatusReport` (array)
            for (const item of data['graphicsStatusReport']) {
                GoogleChromeManagementV1GraphicsStatusReport.validateJSON(item);
            };
        }
        if (data['heartbeatStatusReport']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['heartbeatStatusReport'])) {
                throw new Error("Expected the field `heartbeatStatusReport` to be an array in the JSON data but got " + data['heartbeatStatusReport']);
            }
            // validate the optional field `heartbeatStatusReport` (array)
            for (const item of data['heartbeatStatusReport']) {
                GoogleChromeManagementV1HeartbeatStatusReport.validateJSON(item);
            };
        }
        if (data['kioskAppStatusReport']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['kioskAppStatusReport'])) {
                throw new Error("Expected the field `kioskAppStatusReport` to be an array in the JSON data but got " + data['kioskAppStatusReport']);
            }
            // validate the optional field `kioskAppStatusReport` (array)
            for (const item of data['kioskAppStatusReport']) {
                GoogleChromeManagementV1KioskAppStatusReport.validateJSON(item);
            };
        }
        // validate the optional field `memoryInfo`
        if (data['memoryInfo']) { // data not null
          GoogleChromeManagementV1MemoryInfo.validateJSON(data['memoryInfo']);
        }
        if (data['memoryStatusReport']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['memoryStatusReport'])) {
                throw new Error("Expected the field `memoryStatusReport` to be an array in the JSON data but got " + data['memoryStatusReport']);
            }
            // validate the optional field `memoryStatusReport` (array)
            for (const item of data['memoryStatusReport']) {
                GoogleChromeManagementV1MemoryStatusReport.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['networkBandwidthReport']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['networkBandwidthReport'])) {
                throw new Error("Expected the field `networkBandwidthReport` to be an array in the JSON data but got " + data['networkBandwidthReport']);
            }
            // validate the optional field `networkBandwidthReport` (array)
            for (const item of data['networkBandwidthReport']) {
                GoogleChromeManagementV1NetworkBandwidthReport.validateJSON(item);
            };
        }
        if (data['networkDiagnosticsReport']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['networkDiagnosticsReport'])) {
                throw new Error("Expected the field `networkDiagnosticsReport` to be an array in the JSON data but got " + data['networkDiagnosticsReport']);
            }
            // validate the optional field `networkDiagnosticsReport` (array)
            for (const item of data['networkDiagnosticsReport']) {
                GoogleChromeManagementV1NetworkDiagnosticsReport.validateJSON(item);
            };
        }
        // validate the optional field `networkInfo`
        if (data['networkInfo']) { // data not null
          GoogleChromeManagementV1NetworkInfo.validateJSON(data['networkInfo']);
        }
        if (data['networkStatusReport']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['networkStatusReport'])) {
                throw new Error("Expected the field `networkStatusReport` to be an array in the JSON data but got " + data['networkStatusReport']);
            }
            // validate the optional field `networkStatusReport` (array)
            for (const item of data['networkStatusReport']) {
                GoogleChromeManagementV1NetworkStatusReport.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['orgUnitId'] && !(typeof data['orgUnitId'] === 'string' || data['orgUnitId'] instanceof String)) {
            throw new Error("Expected the field `orgUnitId` to be a primitive type in the JSON string but got " + data['orgUnitId']);
        }
        if (data['osUpdateStatus']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['osUpdateStatus'])) {
                throw new Error("Expected the field `osUpdateStatus` to be an array in the JSON data but got " + data['osUpdateStatus']);
            }
            // validate the optional field `osUpdateStatus` (array)
            for (const item of data['osUpdateStatus']) {
                GoogleChromeManagementV1OsUpdateStatus.validateJSON(item);
            };
        }
        if (data['peripheralsReport']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['peripheralsReport'])) {
                throw new Error("Expected the field `peripheralsReport` to be an array in the JSON data but got " + data['peripheralsReport']);
            }
            // validate the optional field `peripheralsReport` (array)
            for (const item of data['peripheralsReport']) {
                GoogleChromeManagementV1PeripheralsReport.validateJSON(item);
            };
        }
        if (data['runtimeCountersReport']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['runtimeCountersReport'])) {
                throw new Error("Expected the field `runtimeCountersReport` to be an array in the JSON data but got " + data['runtimeCountersReport']);
            }
            // validate the optional field `runtimeCountersReport` (array)
            for (const item of data['runtimeCountersReport']) {
                GoogleChromeManagementV1RuntimeCountersReport.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['serialNumber'] && !(typeof data['serialNumber'] === 'string' || data['serialNumber'] instanceof String)) {
            throw new Error("Expected the field `serialNumber` to be a primitive type in the JSON string but got " + data['serialNumber']);
        }
        // validate the optional field `storageInfo`
        if (data['storageInfo']) { // data not null
          GoogleChromeManagementV1StorageInfo.validateJSON(data['storageInfo']);
        }
        if (data['storageStatusReport']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['storageStatusReport'])) {
                throw new Error("Expected the field `storageStatusReport` to be an array in the JSON data but got " + data['storageStatusReport']);
            }
            // validate the optional field `storageStatusReport` (array)
            for (const item of data['storageStatusReport']) {
                GoogleChromeManagementV1StorageStatusReport.validateJSON(item);
            };
        }
        if (data['thunderboltInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['thunderboltInfo'])) {
                throw new Error("Expected the field `thunderboltInfo` to be an array in the JSON data but got " + data['thunderboltInfo']);
            }
            // validate the optional field `thunderboltInfo` (array)
            for (const item of data['thunderboltInfo']) {
                GoogleChromeManagementV1ThunderboltInfo.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Output only. Audio reports collected periodically sorted in a decreasing order of report_time.
 * @member {Array.<module:model/GoogleChromeManagementV1AudioStatusReport>} audioStatusReport
 */
GoogleChromeManagementV1TelemetryDevice.prototype['audioStatusReport'] = undefined;

/**
 * Output only. Information on battery specs for the device.
 * @member {Array.<module:model/GoogleChromeManagementV1BatteryInfo>} batteryInfo
 */
GoogleChromeManagementV1TelemetryDevice.prototype['batteryInfo'] = undefined;

/**
 * Output only. Battery reports collected periodically.
 * @member {Array.<module:model/GoogleChromeManagementV1BatteryStatusReport>} batteryStatusReport
 */
GoogleChromeManagementV1TelemetryDevice.prototype['batteryStatusReport'] = undefined;

/**
 * Output only. Boot performance reports of the device.
 * @member {Array.<module:model/GoogleChromeManagementV1BootPerformanceReport>} bootPerformanceReport
 */
GoogleChromeManagementV1TelemetryDevice.prototype['bootPerformanceReport'] = undefined;

/**
 * Output only. Information regarding CPU specs for the device.
 * @member {Array.<module:model/GoogleChromeManagementV1CpuInfo>} cpuInfo
 */
GoogleChromeManagementV1TelemetryDevice.prototype['cpuInfo'] = undefined;

/**
 * Output only. CPU status reports collected periodically sorted in a decreasing order of report_time.
 * @member {Array.<module:model/GoogleChromeManagementV1CpuStatusReport>} cpuStatusReport
 */
GoogleChromeManagementV1TelemetryDevice.prototype['cpuStatusReport'] = undefined;

/**
 * Output only. Google Workspace Customer whose enterprise enrolled the device.
 * @member {String} customer
 */
GoogleChromeManagementV1TelemetryDevice.prototype['customer'] = undefined;

/**
 * Output only. The unique Directory API ID of the device. This value is the same as the Admin Console's Directory API ID in the ChromeOS Devices tab
 * @member {String} deviceId
 */
GoogleChromeManagementV1TelemetryDevice.prototype['deviceId'] = undefined;

/**
 * @member {module:model/GoogleChromeManagementV1GraphicsInfo} graphicsInfo
 */
GoogleChromeManagementV1TelemetryDevice.prototype['graphicsInfo'] = undefined;

/**
 * Output only. Graphics reports collected periodically.
 * @member {Array.<module:model/GoogleChromeManagementV1GraphicsStatusReport>} graphicsStatusReport
 */
GoogleChromeManagementV1TelemetryDevice.prototype['graphicsStatusReport'] = undefined;

/**
 * Output only. Heartbeat status report containing timestamps periodically sorted in decreasing order of report_time
 * @member {Array.<module:model/GoogleChromeManagementV1HeartbeatStatusReport>} heartbeatStatusReport
 */
GoogleChromeManagementV1TelemetryDevice.prototype['heartbeatStatusReport'] = undefined;

/**
 * Output only. Kiosk app status report for the kiosk device
 * @member {Array.<module:model/GoogleChromeManagementV1KioskAppStatusReport>} kioskAppStatusReport
 */
GoogleChromeManagementV1TelemetryDevice.prototype['kioskAppStatusReport'] = undefined;

/**
 * @member {module:model/GoogleChromeManagementV1MemoryInfo} memoryInfo
 */
GoogleChromeManagementV1TelemetryDevice.prototype['memoryInfo'] = undefined;

/**
 * Output only. Memory status reports collected periodically sorted decreasing by report_time.
 * @member {Array.<module:model/GoogleChromeManagementV1MemoryStatusReport>} memoryStatusReport
 */
GoogleChromeManagementV1TelemetryDevice.prototype['memoryStatusReport'] = undefined;

/**
 * Output only. Resource name of the device.
 * @member {String} name
 */
GoogleChromeManagementV1TelemetryDevice.prototype['name'] = undefined;

/**
 * Output only. Network bandwidth reports collected periodically sorted in a decreasing order of report_time.
 * @member {Array.<module:model/GoogleChromeManagementV1NetworkBandwidthReport>} networkBandwidthReport
 */
GoogleChromeManagementV1TelemetryDevice.prototype['networkBandwidthReport'] = undefined;

/**
 * Output only. Network diagnostics collected periodically.
 * @member {Array.<module:model/GoogleChromeManagementV1NetworkDiagnosticsReport>} networkDiagnosticsReport
 */
GoogleChromeManagementV1TelemetryDevice.prototype['networkDiagnosticsReport'] = undefined;

/**
 * @member {module:model/GoogleChromeManagementV1NetworkInfo} networkInfo
 */
GoogleChromeManagementV1TelemetryDevice.prototype['networkInfo'] = undefined;

/**
 * Output only. Network specs collected periodically.
 * @member {Array.<module:model/GoogleChromeManagementV1NetworkStatusReport>} networkStatusReport
 */
GoogleChromeManagementV1TelemetryDevice.prototype['networkStatusReport'] = undefined;

/**
 * Output only. Organization unit ID of the device.
 * @member {String} orgUnitId
 */
GoogleChromeManagementV1TelemetryDevice.prototype['orgUnitId'] = undefined;

/**
 * Output only. Contains relevant information regarding ChromeOS update status.
 * @member {Array.<module:model/GoogleChromeManagementV1OsUpdateStatus>} osUpdateStatus
 */
GoogleChromeManagementV1TelemetryDevice.prototype['osUpdateStatus'] = undefined;

/**
 * Output only. Peripherals reports collected periodically sorted in a decreasing order of report_time.
 * @member {Array.<module:model/GoogleChromeManagementV1PeripheralsReport>} peripheralsReport
 */
GoogleChromeManagementV1TelemetryDevice.prototype['peripheralsReport'] = undefined;

/**
 * Output only. Runtime counters reports collected device lifetime runtime, as well as the counts of S0->S3, S0->S4, and S0->S5 transitions, meaning entering into sleep, hibernation, and power-off states
 * @member {Array.<module:model/GoogleChromeManagementV1RuntimeCountersReport>} runtimeCountersReport
 */
GoogleChromeManagementV1TelemetryDevice.prototype['runtimeCountersReport'] = undefined;

/**
 * Output only. Device serial number. This value is the same as the Admin Console's Serial Number in the ChromeOS Devices tab.
 * @member {String} serialNumber
 */
GoogleChromeManagementV1TelemetryDevice.prototype['serialNumber'] = undefined;

/**
 * @member {module:model/GoogleChromeManagementV1StorageInfo} storageInfo
 */
GoogleChromeManagementV1TelemetryDevice.prototype['storageInfo'] = undefined;

/**
 * Output only. Storage reports collected periodically.
 * @member {Array.<module:model/GoogleChromeManagementV1StorageStatusReport>} storageStatusReport
 */
GoogleChromeManagementV1TelemetryDevice.prototype['storageStatusReport'] = undefined;

/**
 * Output only. Information on Thunderbolt bus.
 * @member {Array.<module:model/GoogleChromeManagementV1ThunderboltInfo>} thunderboltInfo
 */
GoogleChromeManagementV1TelemetryDevice.prototype['thunderboltInfo'] = undefined;






export default GoogleChromeManagementV1TelemetryDevice;

