/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleChromeManagementV1TelemetryDeviceInfo from './GoogleChromeManagementV1TelemetryDeviceInfo';
import GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent from './GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent';
import GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent from './GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent';
import GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent from './GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent';
import GoogleChromeManagementV1TelemetryUsbPeripheralsEvent from './GoogleChromeManagementV1TelemetryUsbPeripheralsEvent';
import GoogleChromeManagementV1TelemetryUserInfo from './GoogleChromeManagementV1TelemetryUserInfo';

/**
 * The GoogleChromeManagementV1TelemetryEvent model module.
 * @module model/GoogleChromeManagementV1TelemetryEvent
 * @version v1
 */
class GoogleChromeManagementV1TelemetryEvent {
    /**
     * Constructs a new <code>GoogleChromeManagementV1TelemetryEvent</code>.
     * Telemetry data reported by a managed device.
     * @alias module:model/GoogleChromeManagementV1TelemetryEvent
     */
    constructor() { 
        
        GoogleChromeManagementV1TelemetryEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromeManagementV1TelemetryEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromeManagementV1TelemetryEvent} obj Optional instance to populate.
     * @return {module:model/GoogleChromeManagementV1TelemetryEvent} The populated <code>GoogleChromeManagementV1TelemetryEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromeManagementV1TelemetryEvent();

            if (data.hasOwnProperty('audioSevereUnderrunEvent')) {
                obj['audioSevereUnderrunEvent'] = ApiClient.convertToType(data['audioSevereUnderrunEvent'], Object);
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = GoogleChromeManagementV1TelemetryDeviceInfo.constructFromObject(data['device']);
            }
            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
            }
            if (data.hasOwnProperty('httpsLatencyChangeEvent')) {
                obj['httpsLatencyChangeEvent'] = GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.constructFromObject(data['httpsLatencyChangeEvent']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('networkStateChangeEvent')) {
                obj['networkStateChangeEvent'] = GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent.constructFromObject(data['networkStateChangeEvent']);
            }
            if (data.hasOwnProperty('reportTime')) {
                obj['reportTime'] = ApiClient.convertToType(data['reportTime'], 'String');
            }
            if (data.hasOwnProperty('usbPeripheralsEvent')) {
                obj['usbPeripheralsEvent'] = GoogleChromeManagementV1TelemetryUsbPeripheralsEvent.constructFromObject(data['usbPeripheralsEvent']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = GoogleChromeManagementV1TelemetryUserInfo.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('vpnConnectionStateChangeEvent')) {
                obj['vpnConnectionStateChangeEvent'] = GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent.constructFromObject(data['vpnConnectionStateChangeEvent']);
            }
            if (data.hasOwnProperty('wifiSignalStrengthEvent')) {
                obj['wifiSignalStrengthEvent'] = GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent.constructFromObject(data['wifiSignalStrengthEvent']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromeManagementV1TelemetryEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromeManagementV1TelemetryEvent</code>.
     */
    static validateJSON(data) {
        // validate the optional field `device`
        if (data['device']) { // data not null
          GoogleChromeManagementV1TelemetryDeviceInfo.validateJSON(data['device']);
        }
        // ensure the json data is a string
        if (data['eventType'] && !(typeof data['eventType'] === 'string' || data['eventType'] instanceof String)) {
            throw new Error("Expected the field `eventType` to be a primitive type in the JSON string but got " + data['eventType']);
        }
        // validate the optional field `httpsLatencyChangeEvent`
        if (data['httpsLatencyChangeEvent']) { // data not null
          GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.validateJSON(data['httpsLatencyChangeEvent']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `networkStateChangeEvent`
        if (data['networkStateChangeEvent']) { // data not null
          GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent.validateJSON(data['networkStateChangeEvent']);
        }
        // ensure the json data is a string
        if (data['reportTime'] && !(typeof data['reportTime'] === 'string' || data['reportTime'] instanceof String)) {
            throw new Error("Expected the field `reportTime` to be a primitive type in the JSON string but got " + data['reportTime']);
        }
        // validate the optional field `usbPeripheralsEvent`
        if (data['usbPeripheralsEvent']) { // data not null
          GoogleChromeManagementV1TelemetryUsbPeripheralsEvent.validateJSON(data['usbPeripheralsEvent']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          GoogleChromeManagementV1TelemetryUserInfo.validateJSON(data['user']);
        }
        // validate the optional field `vpnConnectionStateChangeEvent`
        if (data['vpnConnectionStateChangeEvent']) { // data not null
          GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent.validateJSON(data['vpnConnectionStateChangeEvent']);
        }
        // validate the optional field `wifiSignalStrengthEvent`
        if (data['wifiSignalStrengthEvent']) { // data not null
          GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent.validateJSON(data['wifiSignalStrengthEvent']);
        }

        return true;
    }


}



/**
 * `TelemetryAudioSevereUnderrunEvent` is triggered when a audio devices run out of buffer data for more than 5 seconds. * Granular permission needed: TELEMETRY_API_AUDIO_REPORT
 * @member {Object} audioSevereUnderrunEvent
 */
GoogleChromeManagementV1TelemetryEvent.prototype['audioSevereUnderrunEvent'] = undefined;

/**
 * @member {module:model/GoogleChromeManagementV1TelemetryDeviceInfo} device
 */
GoogleChromeManagementV1TelemetryEvent.prototype['device'] = undefined;

/**
 * The event type of the current event.
 * @member {module:model/GoogleChromeManagementV1TelemetryEvent.EventTypeEnum} eventType
 */
GoogleChromeManagementV1TelemetryEvent.prototype['eventType'] = undefined;

/**
 * @member {module:model/GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent} httpsLatencyChangeEvent
 */
GoogleChromeManagementV1TelemetryEvent.prototype['httpsLatencyChangeEvent'] = undefined;

/**
 * Output only. Resource name of the event.
 * @member {String} name
 */
GoogleChromeManagementV1TelemetryEvent.prototype['name'] = undefined;

/**
 * @member {module:model/GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent} networkStateChangeEvent
 */
GoogleChromeManagementV1TelemetryEvent.prototype['networkStateChangeEvent'] = undefined;

/**
 * Timestamp that represents when the event was reported.
 * @member {String} reportTime
 */
GoogleChromeManagementV1TelemetryEvent.prototype['reportTime'] = undefined;

/**
 * @member {module:model/GoogleChromeManagementV1TelemetryUsbPeripheralsEvent} usbPeripheralsEvent
 */
GoogleChromeManagementV1TelemetryEvent.prototype['usbPeripheralsEvent'] = undefined;

/**
 * @member {module:model/GoogleChromeManagementV1TelemetryUserInfo} user
 */
GoogleChromeManagementV1TelemetryEvent.prototype['user'] = undefined;

/**
 * @member {module:model/GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent} vpnConnectionStateChangeEvent
 */
GoogleChromeManagementV1TelemetryEvent.prototype['vpnConnectionStateChangeEvent'] = undefined;

/**
 * @member {module:model/GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent} wifiSignalStrengthEvent
 */
GoogleChromeManagementV1TelemetryEvent.prototype['wifiSignalStrengthEvent'] = undefined;





/**
 * Allowed values for the <code>eventType</code> property.
 * @enum {String}
 * @readonly
 */
GoogleChromeManagementV1TelemetryEvent['EventTypeEnum'] = {

    /**
     * value: "EVENT_TYPE_UNSPECIFIED"
     * @const
     */
    "EVENT_TYPE_UNSPECIFIED": "EVENT_TYPE_UNSPECIFIED",

    /**
     * value: "AUDIO_SEVERE_UNDERRUN"
     * @const
     */
    "AUDIO_SEVERE_UNDERRUN": "AUDIO_SEVERE_UNDERRUN",

    /**
     * value: "NETWORK_STATE_CHANGE"
     * @const
     */
    "NETWORK_STATE_CHANGE": "NETWORK_STATE_CHANGE",

    /**
     * value: "USB_ADDED"
     * @const
     */
    "USB_ADDED": "USB_ADDED",

    /**
     * value: "USB_REMOVED"
     * @const
     */
    "USB_REMOVED": "USB_REMOVED",

    /**
     * value: "NETWORK_HTTPS_LATENCY_CHANGE"
     * @const
     */
    "NETWORK_HTTPS_LATENCY_CHANGE": "NETWORK_HTTPS_LATENCY_CHANGE",

    /**
     * value: "WIFI_SIGNAL_STRENGTH_LOW"
     * @const
     */
    "WIFI_SIGNAL_STRENGTH_LOW": "WIFI_SIGNAL_STRENGTH_LOW",

    /**
     * value: "WIFI_SIGNAL_STRENGTH_RECOVERED"
     * @const
     */
    "WIFI_SIGNAL_STRENGTH_RECOVERED": "WIFI_SIGNAL_STRENGTH_RECOVERED",

    /**
     * value: "VPN_CONNECTION_STATE_CHANGE"
     * @const
     */
    "VPN_CONNECTION_STATE_CHANGE": "VPN_CONNECTION_STATE_CHANGE"
};



export default GoogleChromeManagementV1TelemetryEvent;

