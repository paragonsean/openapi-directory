/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleChromeManagementV1CpuInfo model module.
 * @module model/GoogleChromeManagementV1CpuInfo
 * @version v1
 */
class GoogleChromeManagementV1CpuInfo {
    /**
     * Constructs a new <code>GoogleChromeManagementV1CpuInfo</code>.
     * CPU specifications for the device * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceCpuInfo](https://chromeenterprise.google/policies/#ReportDeviceCpuInfo) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_CPU_INFO
     * @alias module:model/GoogleChromeManagementV1CpuInfo
     */
    constructor() { 
        
        GoogleChromeManagementV1CpuInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromeManagementV1CpuInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromeManagementV1CpuInfo} obj Optional instance to populate.
     * @return {module:model/GoogleChromeManagementV1CpuInfo} The populated <code>GoogleChromeManagementV1CpuInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromeManagementV1CpuInfo();

            if (data.hasOwnProperty('architecture')) {
                obj['architecture'] = ApiClient.convertToType(data['architecture'], 'String');
            }
            if (data.hasOwnProperty('keylockerConfigured')) {
                obj['keylockerConfigured'] = ApiClient.convertToType(data['keylockerConfigured'], 'Boolean');
            }
            if (data.hasOwnProperty('keylockerSupported')) {
                obj['keylockerSupported'] = ApiClient.convertToType(data['keylockerSupported'], 'Boolean');
            }
            if (data.hasOwnProperty('maxClockSpeed')) {
                obj['maxClockSpeed'] = ApiClient.convertToType(data['maxClockSpeed'], 'Number');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromeManagementV1CpuInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromeManagementV1CpuInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['architecture'] && !(typeof data['architecture'] === 'string' || data['architecture'] instanceof String)) {
            throw new Error("Expected the field `architecture` to be a primitive type in the JSON string but got " + data['architecture']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }

        return true;
    }


}



/**
 * Output only. Architecture type for the CPU. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceCpuInfo](https://chromeenterprise.google/policies/#ReportDeviceCpuInfo) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A
 * @member {module:model/GoogleChromeManagementV1CpuInfo.ArchitectureEnum} architecture
 */
GoogleChromeManagementV1CpuInfo.prototype['architecture'] = undefined;

/**
 * Output only. Whether keylocker is configured.`TRUE` = Enabled; `FALSE` = disabled. Only reported if keylockerSupported = `TRUE`.
 * @member {Boolean} keylockerConfigured
 */
GoogleChromeManagementV1CpuInfo.prototype['keylockerConfigured'] = undefined;

/**
 * Output only. Whether keylocker is supported.
 * @member {Boolean} keylockerSupported
 */
GoogleChromeManagementV1CpuInfo.prototype['keylockerSupported'] = undefined;

/**
 * Output only. The max CPU clock speed in kHz.
 * @member {Number} maxClockSpeed
 */
GoogleChromeManagementV1CpuInfo.prototype['maxClockSpeed'] = undefined;

/**
 * Output only. The CPU model name. Example: Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz
 * @member {String} model
 */
GoogleChromeManagementV1CpuInfo.prototype['model'] = undefined;





/**
 * Allowed values for the <code>architecture</code> property.
 * @enum {String}
 * @readonly
 */
GoogleChromeManagementV1CpuInfo['ArchitectureEnum'] = {

    /**
     * value: "ARCHITECTURE_UNSPECIFIED"
     * @const
     */
    "ARCHITECTURE_UNSPECIFIED": "ARCHITECTURE_UNSPECIFIED",

    /**
     * value: "X64"
     * @const
     */
    "X64": "X64"
};



export default GoogleChromeManagementV1CpuInfo;

