/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleChromeManagementV1BatterySampleReport model module.
 * @module model/GoogleChromeManagementV1BatterySampleReport
 * @version v1
 */
class GoogleChromeManagementV1BatterySampleReport {
    /**
     * Constructs a new <code>GoogleChromeManagementV1BatterySampleReport</code>.
     * Sampling data for battery. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDevicePowerStatus](https://chromeenterprise.google/policies/#ReportDevicePowerStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A
     * @alias module:model/GoogleChromeManagementV1BatterySampleReport
     */
    constructor() { 
        
        GoogleChromeManagementV1BatterySampleReport.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromeManagementV1BatterySampleReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromeManagementV1BatterySampleReport} obj Optional instance to populate.
     * @return {module:model/GoogleChromeManagementV1BatterySampleReport} The populated <code>GoogleChromeManagementV1BatterySampleReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromeManagementV1BatterySampleReport();

            if (data.hasOwnProperty('chargeRate')) {
                obj['chargeRate'] = ApiClient.convertToType(data['chargeRate'], 'Number');
            }
            if (data.hasOwnProperty('current')) {
                obj['current'] = ApiClient.convertToType(data['current'], 'String');
            }
            if (data.hasOwnProperty('dischargeRate')) {
                obj['dischargeRate'] = ApiClient.convertToType(data['dischargeRate'], 'Number');
            }
            if (data.hasOwnProperty('remainingCapacity')) {
                obj['remainingCapacity'] = ApiClient.convertToType(data['remainingCapacity'], 'String');
            }
            if (data.hasOwnProperty('reportTime')) {
                obj['reportTime'] = ApiClient.convertToType(data['reportTime'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('temperature')) {
                obj['temperature'] = ApiClient.convertToType(data['temperature'], 'Number');
            }
            if (data.hasOwnProperty('voltage')) {
                obj['voltage'] = ApiClient.convertToType(data['voltage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromeManagementV1BatterySampleReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromeManagementV1BatterySampleReport</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['current'] && !(typeof data['current'] === 'string' || data['current'] instanceof String)) {
            throw new Error("Expected the field `current` to be a primitive type in the JSON string but got " + data['current']);
        }
        // ensure the json data is a string
        if (data['remainingCapacity'] && !(typeof data['remainingCapacity'] === 'string' || data['remainingCapacity'] instanceof String)) {
            throw new Error("Expected the field `remainingCapacity` to be a primitive type in the JSON string but got " + data['remainingCapacity']);
        }
        // ensure the json data is a string
        if (data['reportTime'] && !(typeof data['reportTime'] === 'string' || data['reportTime'] instanceof String)) {
            throw new Error("Expected the field `reportTime` to be a primitive type in the JSON string but got " + data['reportTime']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['voltage'] && !(typeof data['voltage'] === 'string' || data['voltage'] instanceof String)) {
            throw new Error("Expected the field `voltage` to be a primitive type in the JSON string but got " + data['voltage']);
        }

        return true;
    }


}



/**
 * Output only. Battery charge percentage.
 * @member {Number} chargeRate
 */
GoogleChromeManagementV1BatterySampleReport.prototype['chargeRate'] = undefined;

/**
 * Output only. Battery current (mA).
 * @member {String} current
 */
GoogleChromeManagementV1BatterySampleReport.prototype['current'] = undefined;

/**
 * Output only. The battery discharge rate measured in mW. Positive if the battery is being discharged, negative if it's being charged.
 * @member {Number} dischargeRate
 */
GoogleChromeManagementV1BatterySampleReport.prototype['dischargeRate'] = undefined;

/**
 * Output only. Battery remaining capacity (mAmpere-hours).
 * @member {String} remainingCapacity
 */
GoogleChromeManagementV1BatterySampleReport.prototype['remainingCapacity'] = undefined;

/**
 * Output only. Timestamp of when the sample was collected on device
 * @member {String} reportTime
 */
GoogleChromeManagementV1BatterySampleReport.prototype['reportTime'] = undefined;

/**
 * Output only. Battery status read from sysfs. Example: Discharging
 * @member {String} status
 */
GoogleChromeManagementV1BatterySampleReport.prototype['status'] = undefined;

/**
 * Output only. Temperature in Celsius degrees.
 * @member {Number} temperature
 */
GoogleChromeManagementV1BatterySampleReport.prototype['temperature'] = undefined;

/**
 * Output only. Battery voltage (millivolt).
 * @member {String} voltage
 */
GoogleChromeManagementV1BatterySampleReport.prototype['voltage'] = undefined;






export default GoogleChromeManagementV1BatterySampleReport;

