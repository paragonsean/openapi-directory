/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleChromeManagementV1DiskInfo model module.
 * @module model/GoogleChromeManagementV1DiskInfo
 * @version v1
 */
class GoogleChromeManagementV1DiskInfo {
    /**
     * Constructs a new <code>GoogleChromeManagementV1DiskInfo</code>.
     * Status of the single storage device.
     * @alias module:model/GoogleChromeManagementV1DiskInfo
     */
    constructor() { 
        
        GoogleChromeManagementV1DiskInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromeManagementV1DiskInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromeManagementV1DiskInfo} obj Optional instance to populate.
     * @return {module:model/GoogleChromeManagementV1DiskInfo} The populated <code>GoogleChromeManagementV1DiskInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromeManagementV1DiskInfo();

            if (data.hasOwnProperty('bytesReadThisSession')) {
                obj['bytesReadThisSession'] = ApiClient.convertToType(data['bytesReadThisSession'], 'String');
            }
            if (data.hasOwnProperty('bytesWrittenThisSession')) {
                obj['bytesWrittenThisSession'] = ApiClient.convertToType(data['bytesWrittenThisSession'], 'String');
            }
            if (data.hasOwnProperty('discardTimeThisSession')) {
                obj['discardTimeThisSession'] = ApiClient.convertToType(data['discardTimeThisSession'], 'String');
            }
            if (data.hasOwnProperty('health')) {
                obj['health'] = ApiClient.convertToType(data['health'], 'String');
            }
            if (data.hasOwnProperty('ioTimeThisSession')) {
                obj['ioTimeThisSession'] = ApiClient.convertToType(data['ioTimeThisSession'], 'String');
            }
            if (data.hasOwnProperty('manufacturer')) {
                obj['manufacturer'] = ApiClient.convertToType(data['manufacturer'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('readTimeThisSession')) {
                obj['readTimeThisSession'] = ApiClient.convertToType(data['readTimeThisSession'], 'String');
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
            }
            if (data.hasOwnProperty('sizeBytes')) {
                obj['sizeBytes'] = ApiClient.convertToType(data['sizeBytes'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('volumeIds')) {
                obj['volumeIds'] = ApiClient.convertToType(data['volumeIds'], ['String']);
            }
            if (data.hasOwnProperty('writeTimeThisSession')) {
                obj['writeTimeThisSession'] = ApiClient.convertToType(data['writeTimeThisSession'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromeManagementV1DiskInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromeManagementV1DiskInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bytesReadThisSession'] && !(typeof data['bytesReadThisSession'] === 'string' || data['bytesReadThisSession'] instanceof String)) {
            throw new Error("Expected the field `bytesReadThisSession` to be a primitive type in the JSON string but got " + data['bytesReadThisSession']);
        }
        // ensure the json data is a string
        if (data['bytesWrittenThisSession'] && !(typeof data['bytesWrittenThisSession'] === 'string' || data['bytesWrittenThisSession'] instanceof String)) {
            throw new Error("Expected the field `bytesWrittenThisSession` to be a primitive type in the JSON string but got " + data['bytesWrittenThisSession']);
        }
        // ensure the json data is a string
        if (data['discardTimeThisSession'] && !(typeof data['discardTimeThisSession'] === 'string' || data['discardTimeThisSession'] instanceof String)) {
            throw new Error("Expected the field `discardTimeThisSession` to be a primitive type in the JSON string but got " + data['discardTimeThisSession']);
        }
        // ensure the json data is a string
        if (data['health'] && !(typeof data['health'] === 'string' || data['health'] instanceof String)) {
            throw new Error("Expected the field `health` to be a primitive type in the JSON string but got " + data['health']);
        }
        // ensure the json data is a string
        if (data['ioTimeThisSession'] && !(typeof data['ioTimeThisSession'] === 'string' || data['ioTimeThisSession'] instanceof String)) {
            throw new Error("Expected the field `ioTimeThisSession` to be a primitive type in the JSON string but got " + data['ioTimeThisSession']);
        }
        // ensure the json data is a string
        if (data['manufacturer'] && !(typeof data['manufacturer'] === 'string' || data['manufacturer'] instanceof String)) {
            throw new Error("Expected the field `manufacturer` to be a primitive type in the JSON string but got " + data['manufacturer']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['readTimeThisSession'] && !(typeof data['readTimeThisSession'] === 'string' || data['readTimeThisSession'] instanceof String)) {
            throw new Error("Expected the field `readTimeThisSession` to be a primitive type in the JSON string but got " + data['readTimeThisSession']);
        }
        // ensure the json data is a string
        if (data['serialNumber'] && !(typeof data['serialNumber'] === 'string' || data['serialNumber'] instanceof String)) {
            throw new Error("Expected the field `serialNumber` to be a primitive type in the JSON string but got " + data['serialNumber']);
        }
        // ensure the json data is a string
        if (data['sizeBytes'] && !(typeof data['sizeBytes'] === 'string' || data['sizeBytes'] instanceof String)) {
            throw new Error("Expected the field `sizeBytes` to be a primitive type in the JSON string but got " + data['sizeBytes']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['volumeIds'])) {
            throw new Error("Expected the field `volumeIds` to be an array in the JSON data but got " + data['volumeIds']);
        }
        // ensure the json data is a string
        if (data['writeTimeThisSession'] && !(typeof data['writeTimeThisSession'] === 'string' || data['writeTimeThisSession'] instanceof String)) {
            throw new Error("Expected the field `writeTimeThisSession` to be a primitive type in the JSON string but got " + data['writeTimeThisSession']);
        }

        return true;
    }


}



/**
 * Output only. Number of bytes read since last boot.
 * @member {String} bytesReadThisSession
 */
GoogleChromeManagementV1DiskInfo.prototype['bytesReadThisSession'] = undefined;

/**
 * Output only. Number of bytes written since last boot.
 * @member {String} bytesWrittenThisSession
 */
GoogleChromeManagementV1DiskInfo.prototype['bytesWrittenThisSession'] = undefined;

/**
 * Output only. Time spent discarding since last boot. Discarding is writing to clear blocks which are no longer in use. Supported on kernels 4.18+.
 * @member {String} discardTimeThisSession
 */
GoogleChromeManagementV1DiskInfo.prototype['discardTimeThisSession'] = undefined;

/**
 * Output only. Disk health.
 * @member {String} health
 */
GoogleChromeManagementV1DiskInfo.prototype['health'] = undefined;

/**
 * Output only. Counts the time the disk and queue were busy, so unlike the fields above, parallel requests are not counted multiple times.
 * @member {String} ioTimeThisSession
 */
GoogleChromeManagementV1DiskInfo.prototype['ioTimeThisSession'] = undefined;

/**
 * Output only. Disk manufacturer.
 * @member {String} manufacturer
 */
GoogleChromeManagementV1DiskInfo.prototype['manufacturer'] = undefined;

/**
 * Output only. Disk model.
 * @member {String} model
 */
GoogleChromeManagementV1DiskInfo.prototype['model'] = undefined;

/**
 * Output only. Time spent reading from disk since last boot.
 * @member {String} readTimeThisSession
 */
GoogleChromeManagementV1DiskInfo.prototype['readTimeThisSession'] = undefined;

/**
 * Output only. Disk serial number.
 * @member {String} serialNumber
 */
GoogleChromeManagementV1DiskInfo.prototype['serialNumber'] = undefined;

/**
 * Output only. Disk size.
 * @member {String} sizeBytes
 */
GoogleChromeManagementV1DiskInfo.prototype['sizeBytes'] = undefined;

/**
 * Output only. Disk type: eMMC / NVMe / ATA / SCSI.
 * @member {String} type
 */
GoogleChromeManagementV1DiskInfo.prototype['type'] = undefined;

/**
 * Output only. Disk volumes.
 * @member {Array.<String>} volumeIds
 */
GoogleChromeManagementV1DiskInfo.prototype['volumeIds'] = undefined;

/**
 * Output only. Time spent writing to disk since last boot.
 * @member {String} writeTimeThisSession
 */
GoogleChromeManagementV1DiskInfo.prototype['writeTimeThisSession'] = undefined;






export default GoogleChromeManagementV1DiskInfo;

