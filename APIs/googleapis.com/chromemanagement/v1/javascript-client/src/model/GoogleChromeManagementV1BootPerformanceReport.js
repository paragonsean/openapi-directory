/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleChromeManagementV1BootPerformanceReport model module.
 * @module model/GoogleChromeManagementV1BootPerformanceReport
 * @version v1
 */
class GoogleChromeManagementV1BootPerformanceReport {
    /**
     * Constructs a new <code>GoogleChromeManagementV1BootPerformanceReport</code>.
     * Boot performance report of a device. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceBootMode](https://chromeenterprise.google/policies/#ReportDeviceBootMode) * Data Collection Frequency: On every boot up event * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_OS_REPORT
     * @alias module:model/GoogleChromeManagementV1BootPerformanceReport
     */
    constructor() { 
        
        GoogleChromeManagementV1BootPerformanceReport.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromeManagementV1BootPerformanceReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromeManagementV1BootPerformanceReport} obj Optional instance to populate.
     * @return {module:model/GoogleChromeManagementV1BootPerformanceReport} The populated <code>GoogleChromeManagementV1BootPerformanceReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromeManagementV1BootPerformanceReport();

            if (data.hasOwnProperty('bootUpDuration')) {
                obj['bootUpDuration'] = ApiClient.convertToType(data['bootUpDuration'], 'String');
            }
            if (data.hasOwnProperty('bootUpTime')) {
                obj['bootUpTime'] = ApiClient.convertToType(data['bootUpTime'], 'String');
            }
            if (data.hasOwnProperty('reportTime')) {
                obj['reportTime'] = ApiClient.convertToType(data['reportTime'], 'String');
            }
            if (data.hasOwnProperty('shutdownDuration')) {
                obj['shutdownDuration'] = ApiClient.convertToType(data['shutdownDuration'], 'String');
            }
            if (data.hasOwnProperty('shutdownReason')) {
                obj['shutdownReason'] = ApiClient.convertToType(data['shutdownReason'], 'String');
            }
            if (data.hasOwnProperty('shutdownTime')) {
                obj['shutdownTime'] = ApiClient.convertToType(data['shutdownTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromeManagementV1BootPerformanceReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromeManagementV1BootPerformanceReport</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bootUpDuration'] && !(typeof data['bootUpDuration'] === 'string' || data['bootUpDuration'] instanceof String)) {
            throw new Error("Expected the field `bootUpDuration` to be a primitive type in the JSON string but got " + data['bootUpDuration']);
        }
        // ensure the json data is a string
        if (data['bootUpTime'] && !(typeof data['bootUpTime'] === 'string' || data['bootUpTime'] instanceof String)) {
            throw new Error("Expected the field `bootUpTime` to be a primitive type in the JSON string but got " + data['bootUpTime']);
        }
        // ensure the json data is a string
        if (data['reportTime'] && !(typeof data['reportTime'] === 'string' || data['reportTime'] instanceof String)) {
            throw new Error("Expected the field `reportTime` to be a primitive type in the JSON string but got " + data['reportTime']);
        }
        // ensure the json data is a string
        if (data['shutdownDuration'] && !(typeof data['shutdownDuration'] === 'string' || data['shutdownDuration'] instanceof String)) {
            throw new Error("Expected the field `shutdownDuration` to be a primitive type in the JSON string but got " + data['shutdownDuration']);
        }
        // ensure the json data is a string
        if (data['shutdownReason'] && !(typeof data['shutdownReason'] === 'string' || data['shutdownReason'] instanceof String)) {
            throw new Error("Expected the field `shutdownReason` to be a primitive type in the JSON string but got " + data['shutdownReason']);
        }
        // ensure the json data is a string
        if (data['shutdownTime'] && !(typeof data['shutdownTime'] === 'string' || data['shutdownTime'] instanceof String)) {
            throw new Error("Expected the field `shutdownTime` to be a primitive type in the JSON string but got " + data['shutdownTime']);
        }

        return true;
    }


}



/**
 * Total time to boot up.
 * @member {String} bootUpDuration
 */
GoogleChromeManagementV1BootPerformanceReport.prototype['bootUpDuration'] = undefined;

/**
 * The timestamp when power came on.
 * @member {String} bootUpTime
 */
GoogleChromeManagementV1BootPerformanceReport.prototype['bootUpTime'] = undefined;

/**
 * Timestamp when the report was collected.
 * @member {String} reportTime
 */
GoogleChromeManagementV1BootPerformanceReport.prototype['reportTime'] = undefined;

/**
 * Total time since shutdown start to power off.
 * @member {String} shutdownDuration
 */
GoogleChromeManagementV1BootPerformanceReport.prototype['shutdownDuration'] = undefined;

/**
 * The shutdown reason.
 * @member {module:model/GoogleChromeManagementV1BootPerformanceReport.ShutdownReasonEnum} shutdownReason
 */
GoogleChromeManagementV1BootPerformanceReport.prototype['shutdownReason'] = undefined;

/**
 * The timestamp when shutdown.
 * @member {String} shutdownTime
 */
GoogleChromeManagementV1BootPerformanceReport.prototype['shutdownTime'] = undefined;





/**
 * Allowed values for the <code>shutdownReason</code> property.
 * @enum {String}
 * @readonly
 */
GoogleChromeManagementV1BootPerformanceReport['ShutdownReasonEnum'] = {

    /**
     * value: "SHUTDOWN_REASON_UNSPECIFIED"
     * @const
     */
    "SHUTDOWN_REASON_UNSPECIFIED": "SHUTDOWN_REASON_UNSPECIFIED",

    /**
     * value: "USER_REQUEST"
     * @const
     */
    "USER_REQUEST": "USER_REQUEST",

    /**
     * value: "SYSTEM_UPDATE"
     * @const
     */
    "SYSTEM_UPDATE": "SYSTEM_UPDATE",

    /**
     * value: "LOW_BATTERY"
     * @const
     */
    "LOW_BATTERY": "LOW_BATTERY",

    /**
     * value: "OTHER"
     * @const
     */
    "OTHER": "OTHER"
};



export default GoogleChromeManagementV1BootPerformanceReport;

