/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleChromeManagementV1TotalMemoryEncryptionInfo model module.
 * @module model/GoogleChromeManagementV1TotalMemoryEncryptionInfo
 * @version v1
 */
class GoogleChromeManagementV1TotalMemoryEncryptionInfo {
    /**
     * Constructs a new <code>GoogleChromeManagementV1TotalMemoryEncryptionInfo</code>.
     * Memory encryption information of a device. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceMemoryInfo](https://chromeenterprise.google/policies/#ReportDeviceMemoryInfo) * Data Collection Frequency: At device startup * Default Data Reporting Frequency: At device startup - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: N/A
     * @alias module:model/GoogleChromeManagementV1TotalMemoryEncryptionInfo
     */
    constructor() { 
        
        GoogleChromeManagementV1TotalMemoryEncryptionInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromeManagementV1TotalMemoryEncryptionInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromeManagementV1TotalMemoryEncryptionInfo} obj Optional instance to populate.
     * @return {module:model/GoogleChromeManagementV1TotalMemoryEncryptionInfo} The populated <code>GoogleChromeManagementV1TotalMemoryEncryptionInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromeManagementV1TotalMemoryEncryptionInfo();

            if (data.hasOwnProperty('encryptionAlgorithm')) {
                obj['encryptionAlgorithm'] = ApiClient.convertToType(data['encryptionAlgorithm'], 'String');
            }
            if (data.hasOwnProperty('encryptionState')) {
                obj['encryptionState'] = ApiClient.convertToType(data['encryptionState'], 'String');
            }
            if (data.hasOwnProperty('keyLength')) {
                obj['keyLength'] = ApiClient.convertToType(data['keyLength'], 'String');
            }
            if (data.hasOwnProperty('maxKeys')) {
                obj['maxKeys'] = ApiClient.convertToType(data['maxKeys'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromeManagementV1TotalMemoryEncryptionInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromeManagementV1TotalMemoryEncryptionInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['encryptionAlgorithm'] && !(typeof data['encryptionAlgorithm'] === 'string' || data['encryptionAlgorithm'] instanceof String)) {
            throw new Error("Expected the field `encryptionAlgorithm` to be a primitive type in the JSON string but got " + data['encryptionAlgorithm']);
        }
        // ensure the json data is a string
        if (data['encryptionState'] && !(typeof data['encryptionState'] === 'string' || data['encryptionState'] instanceof String)) {
            throw new Error("Expected the field `encryptionState` to be a primitive type in the JSON string but got " + data['encryptionState']);
        }
        // ensure the json data is a string
        if (data['keyLength'] && !(typeof data['keyLength'] === 'string' || data['keyLength'] instanceof String)) {
            throw new Error("Expected the field `keyLength` to be a primitive type in the JSON string but got " + data['keyLength']);
        }
        // ensure the json data is a string
        if (data['maxKeys'] && !(typeof data['maxKeys'] === 'string' || data['maxKeys'] instanceof String)) {
            throw new Error("Expected the field `maxKeys` to be a primitive type in the JSON string but got " + data['maxKeys']);
        }

        return true;
    }


}



/**
 * Memory encryption algorithm.
 * @member {module:model/GoogleChromeManagementV1TotalMemoryEncryptionInfo.EncryptionAlgorithmEnum} encryptionAlgorithm
 */
GoogleChromeManagementV1TotalMemoryEncryptionInfo.prototype['encryptionAlgorithm'] = undefined;

/**
 * The state of memory encryption on the device.
 * @member {module:model/GoogleChromeManagementV1TotalMemoryEncryptionInfo.EncryptionStateEnum} encryptionState
 */
GoogleChromeManagementV1TotalMemoryEncryptionInfo.prototype['encryptionState'] = undefined;

/**
 * The length of the encryption keys.
 * @member {String} keyLength
 */
GoogleChromeManagementV1TotalMemoryEncryptionInfo.prototype['keyLength'] = undefined;

/**
 * The maximum number of keys that can be used for encryption.
 * @member {String} maxKeys
 */
GoogleChromeManagementV1TotalMemoryEncryptionInfo.prototype['maxKeys'] = undefined;





/**
 * Allowed values for the <code>encryptionAlgorithm</code> property.
 * @enum {String}
 * @readonly
 */
GoogleChromeManagementV1TotalMemoryEncryptionInfo['EncryptionAlgorithmEnum'] = {

    /**
     * value: "MEMORY_ENCRYPTION_ALGORITHM_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "MEMORY_ENCRYPTION_ALGORITHM_UNSPECIFIED",

    /**
     * value: "MEMORY_ENCRYPTION_ALGORITHM_UNKNOWN"
     * @const
     */
    "UNKNOWN": "MEMORY_ENCRYPTION_ALGORITHM_UNKNOWN",

    /**
     * value: "MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_128"
     * @const
     */
    "AES_XTS_128": "MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_128",

    /**
     * value: "MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_256"
     * @const
     */
    "AES_XTS_256": "MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_256"
};


/**
 * Allowed values for the <code>encryptionState</code> property.
 * @enum {String}
 * @readonly
 */
GoogleChromeManagementV1TotalMemoryEncryptionInfo['EncryptionStateEnum'] = {

    /**
     * value: "MEMORY_ENCRYPTION_STATE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "MEMORY_ENCRYPTION_STATE_UNSPECIFIED",

    /**
     * value: "MEMORY_ENCRYPTION_STATE_UNKNOWN"
     * @const
     */
    "UNKNOWN": "MEMORY_ENCRYPTION_STATE_UNKNOWN",

    /**
     * value: "MEMORY_ENCRYPTION_STATE_DISABLED"
     * @const
     */
    "DISABLED": "MEMORY_ENCRYPTION_STATE_DISABLED",

    /**
     * value: "MEMORY_ENCRYPTION_STATE_TME"
     * @const
     */
    "TME": "MEMORY_ENCRYPTION_STATE_TME",

    /**
     * value: "MEMORY_ENCRYPTION_STATE_MKTME"
     * @const
     */
    "MKTME": "MEMORY_ENCRYPTION_STATE_MKTME"
};



export default GoogleChromeManagementV1TotalMemoryEncryptionInfo;

