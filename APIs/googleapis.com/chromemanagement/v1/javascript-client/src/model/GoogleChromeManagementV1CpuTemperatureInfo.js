/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleChromeManagementV1CpuTemperatureInfo model module.
 * @module model/GoogleChromeManagementV1CpuTemperatureInfo
 * @version v1
 */
class GoogleChromeManagementV1CpuTemperatureInfo {
    /**
     * Constructs a new <code>GoogleChromeManagementV1CpuTemperatureInfo</code>.
     * CPU temperature of a device. Sampled per CPU core in Celsius. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceCpuInfo](https://chromeenterprise.google/policies/#ReportDeviceCpuInfo) * Data Collection Frequency: Every 10 minutes * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A
     * @alias module:model/GoogleChromeManagementV1CpuTemperatureInfo
     */
    constructor() { 
        
        GoogleChromeManagementV1CpuTemperatureInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromeManagementV1CpuTemperatureInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromeManagementV1CpuTemperatureInfo} obj Optional instance to populate.
     * @return {module:model/GoogleChromeManagementV1CpuTemperatureInfo} The populated <code>GoogleChromeManagementV1CpuTemperatureInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromeManagementV1CpuTemperatureInfo();

            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('temperatureCelsius')) {
                obj['temperatureCelsius'] = ApiClient.convertToType(data['temperatureCelsius'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromeManagementV1CpuTemperatureInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromeManagementV1CpuTemperatureInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }

        return true;
    }


}



/**
 * Output only. CPU label. Example: Core 0
 * @member {String} label
 */
GoogleChromeManagementV1CpuTemperatureInfo.prototype['label'] = undefined;

/**
 * Output only. CPU temperature in Celsius.
 * @member {Number} temperatureCelsius
 */
GoogleChromeManagementV1CpuTemperatureInfo.prototype['temperatureCelsius'] = undefined;






export default GoogleChromeManagementV1CpuTemperatureInfo;

