/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleChromeManagementV1NetworkStatusReport model module.
 * @module model/GoogleChromeManagementV1NetworkStatusReport
 * @version v1
 */
class GoogleChromeManagementV1NetworkStatusReport {
    /**
     * Constructs a new <code>GoogleChromeManagementV1NetworkStatusReport</code>.
     * State of visible/configured networks. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportNetworkStatus](https://chromeenterprise.google/policies/#ReportNetworkStatus) * Data Collection Frequency: 60 minutes * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: Yes * Granular permission needed: TELEMETRY_API_NETWORK_REPORT
     * @alias module:model/GoogleChromeManagementV1NetworkStatusReport
     */
    constructor() { 
        
        GoogleChromeManagementV1NetworkStatusReport.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromeManagementV1NetworkStatusReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromeManagementV1NetworkStatusReport} obj Optional instance to populate.
     * @return {module:model/GoogleChromeManagementV1NetworkStatusReport} The populated <code>GoogleChromeManagementV1NetworkStatusReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromeManagementV1NetworkStatusReport();

            if (data.hasOwnProperty('connectionState')) {
                obj['connectionState'] = ApiClient.convertToType(data['connectionState'], 'String');
            }
            if (data.hasOwnProperty('connectionType')) {
                obj['connectionType'] = ApiClient.convertToType(data['connectionType'], 'String');
            }
            if (data.hasOwnProperty('encryptionOn')) {
                obj['encryptionOn'] = ApiClient.convertToType(data['encryptionOn'], 'Boolean');
            }
            if (data.hasOwnProperty('gatewayIpAddress')) {
                obj['gatewayIpAddress'] = ApiClient.convertToType(data['gatewayIpAddress'], 'String');
            }
            if (data.hasOwnProperty('guid')) {
                obj['guid'] = ApiClient.convertToType(data['guid'], 'String');
            }
            if (data.hasOwnProperty('lanIpAddress')) {
                obj['lanIpAddress'] = ApiClient.convertToType(data['lanIpAddress'], 'String');
            }
            if (data.hasOwnProperty('receivingBitRateMbps')) {
                obj['receivingBitRateMbps'] = ApiClient.convertToType(data['receivingBitRateMbps'], 'String');
            }
            if (data.hasOwnProperty('reportTime')) {
                obj['reportTime'] = ApiClient.convertToType(data['reportTime'], 'String');
            }
            if (data.hasOwnProperty('sampleFrequency')) {
                obj['sampleFrequency'] = ApiClient.convertToType(data['sampleFrequency'], 'String');
            }
            if (data.hasOwnProperty('signalStrengthDbm')) {
                obj['signalStrengthDbm'] = ApiClient.convertToType(data['signalStrengthDbm'], 'Number');
            }
            if (data.hasOwnProperty('transmissionBitRateMbps')) {
                obj['transmissionBitRateMbps'] = ApiClient.convertToType(data['transmissionBitRateMbps'], 'String');
            }
            if (data.hasOwnProperty('transmissionPowerDbm')) {
                obj['transmissionPowerDbm'] = ApiClient.convertToType(data['transmissionPowerDbm'], 'Number');
            }
            if (data.hasOwnProperty('wifiLinkQuality')) {
                obj['wifiLinkQuality'] = ApiClient.convertToType(data['wifiLinkQuality'], 'String');
            }
            if (data.hasOwnProperty('wifiPowerManagementEnabled')) {
                obj['wifiPowerManagementEnabled'] = ApiClient.convertToType(data['wifiPowerManagementEnabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromeManagementV1NetworkStatusReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromeManagementV1NetworkStatusReport</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['connectionState'] && !(typeof data['connectionState'] === 'string' || data['connectionState'] instanceof String)) {
            throw new Error("Expected the field `connectionState` to be a primitive type in the JSON string but got " + data['connectionState']);
        }
        // ensure the json data is a string
        if (data['connectionType'] && !(typeof data['connectionType'] === 'string' || data['connectionType'] instanceof String)) {
            throw new Error("Expected the field `connectionType` to be a primitive type in the JSON string but got " + data['connectionType']);
        }
        // ensure the json data is a string
        if (data['gatewayIpAddress'] && !(typeof data['gatewayIpAddress'] === 'string' || data['gatewayIpAddress'] instanceof String)) {
            throw new Error("Expected the field `gatewayIpAddress` to be a primitive type in the JSON string but got " + data['gatewayIpAddress']);
        }
        // ensure the json data is a string
        if (data['guid'] && !(typeof data['guid'] === 'string' || data['guid'] instanceof String)) {
            throw new Error("Expected the field `guid` to be a primitive type in the JSON string but got " + data['guid']);
        }
        // ensure the json data is a string
        if (data['lanIpAddress'] && !(typeof data['lanIpAddress'] === 'string' || data['lanIpAddress'] instanceof String)) {
            throw new Error("Expected the field `lanIpAddress` to be a primitive type in the JSON string but got " + data['lanIpAddress']);
        }
        // ensure the json data is a string
        if (data['receivingBitRateMbps'] && !(typeof data['receivingBitRateMbps'] === 'string' || data['receivingBitRateMbps'] instanceof String)) {
            throw new Error("Expected the field `receivingBitRateMbps` to be a primitive type in the JSON string but got " + data['receivingBitRateMbps']);
        }
        // ensure the json data is a string
        if (data['reportTime'] && !(typeof data['reportTime'] === 'string' || data['reportTime'] instanceof String)) {
            throw new Error("Expected the field `reportTime` to be a primitive type in the JSON string but got " + data['reportTime']);
        }
        // ensure the json data is a string
        if (data['sampleFrequency'] && !(typeof data['sampleFrequency'] === 'string' || data['sampleFrequency'] instanceof String)) {
            throw new Error("Expected the field `sampleFrequency` to be a primitive type in the JSON string but got " + data['sampleFrequency']);
        }
        // ensure the json data is a string
        if (data['transmissionBitRateMbps'] && !(typeof data['transmissionBitRateMbps'] === 'string' || data['transmissionBitRateMbps'] instanceof String)) {
            throw new Error("Expected the field `transmissionBitRateMbps` to be a primitive type in the JSON string but got " + data['transmissionBitRateMbps']);
        }
        // ensure the json data is a string
        if (data['wifiLinkQuality'] && !(typeof data['wifiLinkQuality'] === 'string' || data['wifiLinkQuality'] instanceof String)) {
            throw new Error("Expected the field `wifiLinkQuality` to be a primitive type in the JSON string but got " + data['wifiLinkQuality']);
        }

        return true;
    }


}



/**
 * Output only. Current connection state of the network.
 * @member {module:model/GoogleChromeManagementV1NetworkStatusReport.ConnectionStateEnum} connectionState
 */
GoogleChromeManagementV1NetworkStatusReport.prototype['connectionState'] = undefined;

/**
 * Output only. Network connection type.
 * @member {module:model/GoogleChromeManagementV1NetworkStatusReport.ConnectionTypeEnum} connectionType
 */
GoogleChromeManagementV1NetworkStatusReport.prototype['connectionType'] = undefined;

/**
 * Output only. Whether the wifi encryption key is turned off.
 * @member {Boolean} encryptionOn
 */
GoogleChromeManagementV1NetworkStatusReport.prototype['encryptionOn'] = undefined;

/**
 * Output only. Gateway IP address.
 * @member {String} gatewayIpAddress
 */
GoogleChromeManagementV1NetworkStatusReport.prototype['gatewayIpAddress'] = undefined;

/**
 * Output only. Network connection guid.
 * @member {String} guid
 */
GoogleChromeManagementV1NetworkStatusReport.prototype['guid'] = undefined;

/**
 * Output only. LAN IP address.
 * @member {String} lanIpAddress
 */
GoogleChromeManagementV1NetworkStatusReport.prototype['lanIpAddress'] = undefined;

/**
 * Output only. Receiving bit rate measured in Megabits per second.
 * @member {String} receivingBitRateMbps
 */
GoogleChromeManagementV1NetworkStatusReport.prototype['receivingBitRateMbps'] = undefined;

/**
 * Output only. Time at which the network state was reported.
 * @member {String} reportTime
 */
GoogleChromeManagementV1NetworkStatusReport.prototype['reportTime'] = undefined;

/**
 * Output only. Frequency the report is sampled.
 * @member {String} sampleFrequency
 */
GoogleChromeManagementV1NetworkStatusReport.prototype['sampleFrequency'] = undefined;

/**
 * Output only. Signal strength for wireless networks measured in decibels.
 * @member {Number} signalStrengthDbm
 */
GoogleChromeManagementV1NetworkStatusReport.prototype['signalStrengthDbm'] = undefined;

/**
 * Output only. Transmission bit rate measured in Megabits per second.
 * @member {String} transmissionBitRateMbps
 */
GoogleChromeManagementV1NetworkStatusReport.prototype['transmissionBitRateMbps'] = undefined;

/**
 * Output only. Transmission power measured in decibels.
 * @member {Number} transmissionPowerDbm
 */
GoogleChromeManagementV1NetworkStatusReport.prototype['transmissionPowerDbm'] = undefined;

/**
 * Output only. Wifi link quality. Value ranges from [0, 70]. 0 indicates no signal and 70 indicates a strong signal.
 * @member {String} wifiLinkQuality
 */
GoogleChromeManagementV1NetworkStatusReport.prototype['wifiLinkQuality'] = undefined;

/**
 * Output only. Wifi power management enabled
 * @member {Boolean} wifiPowerManagementEnabled
 */
GoogleChromeManagementV1NetworkStatusReport.prototype['wifiPowerManagementEnabled'] = undefined;





/**
 * Allowed values for the <code>connectionState</code> property.
 * @enum {String}
 * @readonly
 */
GoogleChromeManagementV1NetworkStatusReport['ConnectionStateEnum'] = {

    /**
     * value: "NETWORK_CONNECTION_STATE_UNSPECIFIED"
     * @const
     */
    "NETWORK_CONNECTION_STATE_UNSPECIFIED": "NETWORK_CONNECTION_STATE_UNSPECIFIED",

    /**
     * value: "ONLINE"
     * @const
     */
    "ONLINE": "ONLINE",

    /**
     * value: "CONNECTED"
     * @const
     */
    "CONNECTED": "CONNECTED",

    /**
     * value: "PORTAL"
     * @const
     */
    "PORTAL": "PORTAL",

    /**
     * value: "CONNECTING"
     * @const
     */
    "CONNECTING": "CONNECTING",

    /**
     * value: "NOT_CONNECTED"
     * @const
     */
    "NOT_CONNECTED": "NOT_CONNECTED"
};


/**
 * Allowed values for the <code>connectionType</code> property.
 * @enum {String}
 * @readonly
 */
GoogleChromeManagementV1NetworkStatusReport['ConnectionTypeEnum'] = {

    /**
     * value: "NETWORK_TYPE_UNSPECIFIED"
     * @const
     */
    "NETWORK_TYPE_UNSPECIFIED": "NETWORK_TYPE_UNSPECIFIED",

    /**
     * value: "CELLULAR"
     * @const
     */
    "CELLULAR": "CELLULAR",

    /**
     * value: "ETHERNET"
     * @const
     */
    "ETHERNET": "ETHERNET",

    /**
     * value: "TETHER"
     * @const
     */
    "TETHER": "TETHER",

    /**
     * value: "VPN"
     * @const
     */
    "VPN": "VPN",

    /**
     * value: "WIFI"
     * @const
     */
    "WIFI": "WIFI"
};



export default GoogleChromeManagementV1NetworkStatusReport;

