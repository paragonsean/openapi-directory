/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleChromeManagementV1NetworkDevice model module.
 * @module model/GoogleChromeManagementV1NetworkDevice
 * @version v1
 */
class GoogleChromeManagementV1NetworkDevice {
    /**
     * Constructs a new <code>GoogleChromeManagementV1NetworkDevice</code>.
     * Details about the network device. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportNetworkDeviceConfiguration](https://chromeenterprise.google/policies/#ReportNetworkDeviceConfiguration) * Data Collection Frequency: At device startup * Default Data Reporting Frequency: At device startup - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: N/A
     * @alias module:model/GoogleChromeManagementV1NetworkDevice
     */
    constructor() { 
        
        GoogleChromeManagementV1NetworkDevice.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromeManagementV1NetworkDevice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromeManagementV1NetworkDevice} obj Optional instance to populate.
     * @return {module:model/GoogleChromeManagementV1NetworkDevice} The populated <code>GoogleChromeManagementV1NetworkDevice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromeManagementV1NetworkDevice();

            if (data.hasOwnProperty('iccid')) {
                obj['iccid'] = ApiClient.convertToType(data['iccid'], 'String');
            }
            if (data.hasOwnProperty('imei')) {
                obj['imei'] = ApiClient.convertToType(data['imei'], 'String');
            }
            if (data.hasOwnProperty('macAddress')) {
                obj['macAddress'] = ApiClient.convertToType(data['macAddress'], 'String');
            }
            if (data.hasOwnProperty('mdn')) {
                obj['mdn'] = ApiClient.convertToType(data['mdn'], 'String');
            }
            if (data.hasOwnProperty('meid')) {
                obj['meid'] = ApiClient.convertToType(data['meid'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromeManagementV1NetworkDevice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromeManagementV1NetworkDevice</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['iccid'] && !(typeof data['iccid'] === 'string' || data['iccid'] instanceof String)) {
            throw new Error("Expected the field `iccid` to be a primitive type in the JSON string but got " + data['iccid']);
        }
        // ensure the json data is a string
        if (data['imei'] && !(typeof data['imei'] === 'string' || data['imei'] instanceof String)) {
            throw new Error("Expected the field `imei` to be a primitive type in the JSON string but got " + data['imei']);
        }
        // ensure the json data is a string
        if (data['macAddress'] && !(typeof data['macAddress'] === 'string' || data['macAddress'] instanceof String)) {
            throw new Error("Expected the field `macAddress` to be a primitive type in the JSON string but got " + data['macAddress']);
        }
        // ensure the json data is a string
        if (data['mdn'] && !(typeof data['mdn'] === 'string' || data['mdn'] instanceof String)) {
            throw new Error("Expected the field `mdn` to be a primitive type in the JSON string but got " + data['mdn']);
        }
        // ensure the json data is a string
        if (data['meid'] && !(typeof data['meid'] === 'string' || data['meid'] instanceof String)) {
            throw new Error("Expected the field `meid` to be a primitive type in the JSON string but got " + data['meid']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Output only. The integrated circuit card ID associated with the device's sim card.
 * @member {String} iccid
 */
GoogleChromeManagementV1NetworkDevice.prototype['iccid'] = undefined;

/**
 * Output only. IMEI (if applicable) of the corresponding network device.
 * @member {String} imei
 */
GoogleChromeManagementV1NetworkDevice.prototype['imei'] = undefined;

/**
 * Output only. MAC address (if applicable) of the corresponding network device.
 * @member {String} macAddress
 */
GoogleChromeManagementV1NetworkDevice.prototype['macAddress'] = undefined;

/**
 * Output only. The mobile directory number associated with the device's sim card.
 * @member {String} mdn
 */
GoogleChromeManagementV1NetworkDevice.prototype['mdn'] = undefined;

/**
 * Output only. MEID (if applicable) of the corresponding network device.
 * @member {String} meid
 */
GoogleChromeManagementV1NetworkDevice.prototype['meid'] = undefined;

/**
 * Output only. Network device type.
 * @member {module:model/GoogleChromeManagementV1NetworkDevice.TypeEnum} type
 */
GoogleChromeManagementV1NetworkDevice.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GoogleChromeManagementV1NetworkDevice['TypeEnum'] = {

    /**
     * value: "NETWORK_DEVICE_TYPE_UNSPECIFIED"
     * @const
     */
    "NETWORK_DEVICE_TYPE_UNSPECIFIED": "NETWORK_DEVICE_TYPE_UNSPECIFIED",

    /**
     * value: "CELLULAR_DEVICE"
     * @const
     */
    "CELLULAR_DEVICE": "CELLULAR_DEVICE",

    /**
     * value: "ETHERNET_DEVICE"
     * @const
     */
    "ETHERNET_DEVICE": "ETHERNET_DEVICE",

    /**
     * value: "WIFI_DEVICE"
     * @const
     */
    "WIFI_DEVICE": "WIFI_DEVICE"
};



export default GoogleChromeManagementV1NetworkDevice;

