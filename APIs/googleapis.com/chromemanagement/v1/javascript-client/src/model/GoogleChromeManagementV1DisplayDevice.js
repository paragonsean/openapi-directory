/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleChromeManagementV1DisplayDevice model module.
 * @module model/GoogleChromeManagementV1DisplayDevice
 * @version v1
 */
class GoogleChromeManagementV1DisplayDevice {
    /**
     * Constructs a new <code>GoogleChromeManagementV1DisplayDevice</code>.
     * Information of a display device.
     * @alias module:model/GoogleChromeManagementV1DisplayDevice
     */
    constructor() { 
        
        GoogleChromeManagementV1DisplayDevice.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromeManagementV1DisplayDevice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromeManagementV1DisplayDevice} obj Optional instance to populate.
     * @return {module:model/GoogleChromeManagementV1DisplayDevice} The populated <code>GoogleChromeManagementV1DisplayDevice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromeManagementV1DisplayDevice();

            if (data.hasOwnProperty('displayHeightMm')) {
                obj['displayHeightMm'] = ApiClient.convertToType(data['displayHeightMm'], 'Number');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('displayWidthMm')) {
                obj['displayWidthMm'] = ApiClient.convertToType(data['displayWidthMm'], 'Number');
            }
            if (data.hasOwnProperty('internal')) {
                obj['internal'] = ApiClient.convertToType(data['internal'], 'Boolean');
            }
            if (data.hasOwnProperty('manufactureYear')) {
                obj['manufactureYear'] = ApiClient.convertToType(data['manufactureYear'], 'Number');
            }
            if (data.hasOwnProperty('manufacturerId')) {
                obj['manufacturerId'] = ApiClient.convertToType(data['manufacturerId'], 'String');
            }
            if (data.hasOwnProperty('modelId')) {
                obj['modelId'] = ApiClient.convertToType(data['modelId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromeManagementV1DisplayDevice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromeManagementV1DisplayDevice</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['manufacturerId'] && !(typeof data['manufacturerId'] === 'string' || data['manufacturerId'] instanceof String)) {
            throw new Error("Expected the field `manufacturerId` to be a primitive type in the JSON string but got " + data['manufacturerId']);
        }

        return true;
    }


}



/**
 * Output only. Display height in millimeters.
 * @member {Number} displayHeightMm
 */
GoogleChromeManagementV1DisplayDevice.prototype['displayHeightMm'] = undefined;

/**
 * Output only. Display device name.
 * @member {String} displayName
 */
GoogleChromeManagementV1DisplayDevice.prototype['displayName'] = undefined;

/**
 * Output only. Display width in millimeters.
 * @member {Number} displayWidthMm
 */
GoogleChromeManagementV1DisplayDevice.prototype['displayWidthMm'] = undefined;

/**
 * Output only. Is display internal or not.
 * @member {Boolean} internal
 */
GoogleChromeManagementV1DisplayDevice.prototype['internal'] = undefined;

/**
 * Output only. Year of manufacture.
 * @member {Number} manufactureYear
 */
GoogleChromeManagementV1DisplayDevice.prototype['manufactureYear'] = undefined;

/**
 * Output only. Three letter manufacturer ID.
 * @member {String} manufacturerId
 */
GoogleChromeManagementV1DisplayDevice.prototype['manufacturerId'] = undefined;

/**
 * Output only. Manufacturer product code.
 * @member {Number} modelId
 */
GoogleChromeManagementV1DisplayDevice.prototype['modelId'] = undefined;






export default GoogleChromeManagementV1DisplayDevice;

