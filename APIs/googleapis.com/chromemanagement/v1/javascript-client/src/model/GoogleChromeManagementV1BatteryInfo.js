/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleTypeDate from './GoogleTypeDate';

/**
 * The GoogleChromeManagementV1BatteryInfo model module.
 * @module model/GoogleChromeManagementV1BatteryInfo
 * @version v1
 */
class GoogleChromeManagementV1BatteryInfo {
    /**
     * Constructs a new <code>GoogleChromeManagementV1BatteryInfo</code>.
     * Information about the battery. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDevicePowerStatus](https://chromeenterprise.google/policies/#ReportDevicePowerStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_BATTERY_INFO
     * @alias module:model/GoogleChromeManagementV1BatteryInfo
     */
    constructor() { 
        
        GoogleChromeManagementV1BatteryInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromeManagementV1BatteryInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromeManagementV1BatteryInfo} obj Optional instance to populate.
     * @return {module:model/GoogleChromeManagementV1BatteryInfo} The populated <code>GoogleChromeManagementV1BatteryInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromeManagementV1BatteryInfo();

            if (data.hasOwnProperty('designCapacity')) {
                obj['designCapacity'] = ApiClient.convertToType(data['designCapacity'], 'String');
            }
            if (data.hasOwnProperty('designMinVoltage')) {
                obj['designMinVoltage'] = ApiClient.convertToType(data['designMinVoltage'], 'Number');
            }
            if (data.hasOwnProperty('manufactureDate')) {
                obj['manufactureDate'] = GoogleTypeDate.constructFromObject(data['manufactureDate']);
            }
            if (data.hasOwnProperty('manufacturer')) {
                obj['manufacturer'] = ApiClient.convertToType(data['manufacturer'], 'String');
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
            }
            if (data.hasOwnProperty('technology')) {
                obj['technology'] = ApiClient.convertToType(data['technology'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromeManagementV1BatteryInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromeManagementV1BatteryInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['designCapacity'] && !(typeof data['designCapacity'] === 'string' || data['designCapacity'] instanceof String)) {
            throw new Error("Expected the field `designCapacity` to be a primitive type in the JSON string but got " + data['designCapacity']);
        }
        // validate the optional field `manufactureDate`
        if (data['manufactureDate']) { // data not null
          GoogleTypeDate.validateJSON(data['manufactureDate']);
        }
        // ensure the json data is a string
        if (data['manufacturer'] && !(typeof data['manufacturer'] === 'string' || data['manufacturer'] instanceof String)) {
            throw new Error("Expected the field `manufacturer` to be a primitive type in the JSON string but got " + data['manufacturer']);
        }
        // ensure the json data is a string
        if (data['serialNumber'] && !(typeof data['serialNumber'] === 'string' || data['serialNumber'] instanceof String)) {
            throw new Error("Expected the field `serialNumber` to be a primitive type in the JSON string but got " + data['serialNumber']);
        }
        // ensure the json data is a string
        if (data['technology'] && !(typeof data['technology'] === 'string' || data['technology'] instanceof String)) {
            throw new Error("Expected the field `technology` to be a primitive type in the JSON string but got " + data['technology']);
        }

        return true;
    }


}



/**
 * Output only. Design capacity (mAmpere-hours).
 * @member {String} designCapacity
 */
GoogleChromeManagementV1BatteryInfo.prototype['designCapacity'] = undefined;

/**
 * Output only. Designed minimum output voltage (mV)
 * @member {Number} designMinVoltage
 */
GoogleChromeManagementV1BatteryInfo.prototype['designMinVoltage'] = undefined;

/**
 * @member {module:model/GoogleTypeDate} manufactureDate
 */
GoogleChromeManagementV1BatteryInfo.prototype['manufactureDate'] = undefined;

/**
 * Output only. Battery manufacturer.
 * @member {String} manufacturer
 */
GoogleChromeManagementV1BatteryInfo.prototype['manufacturer'] = undefined;

/**
 * Output only. Battery serial number.
 * @member {String} serialNumber
 */
GoogleChromeManagementV1BatteryInfo.prototype['serialNumber'] = undefined;

/**
 * Output only. Technology of the battery. Example: Li-ion
 * @member {String} technology
 */
GoogleChromeManagementV1BatteryInfo.prototype['technology'] = undefined;






export default GoogleChromeManagementV1BatteryInfo;

