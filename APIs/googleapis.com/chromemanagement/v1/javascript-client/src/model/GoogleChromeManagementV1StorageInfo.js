/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleChromeManagementV1StorageInfoDiskVolume from './GoogleChromeManagementV1StorageInfoDiskVolume';

/**
 * The GoogleChromeManagementV1StorageInfo model module.
 * @module model/GoogleChromeManagementV1StorageInfo
 * @version v1
 */
class GoogleChromeManagementV1StorageInfo {
    /**
     * Constructs a new <code>GoogleChromeManagementV1StorageInfo</code>.
     * Status data for storage. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceStorageStatus](https://chromeenterprise.google/policies/#ReportDeviceStorageStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_STORAGE_INFO
     * @alias module:model/GoogleChromeManagementV1StorageInfo
     */
    constructor() { 
        
        GoogleChromeManagementV1StorageInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromeManagementV1StorageInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromeManagementV1StorageInfo} obj Optional instance to populate.
     * @return {module:model/GoogleChromeManagementV1StorageInfo} The populated <code>GoogleChromeManagementV1StorageInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromeManagementV1StorageInfo();

            if (data.hasOwnProperty('availableDiskBytes')) {
                obj['availableDiskBytes'] = ApiClient.convertToType(data['availableDiskBytes'], 'String');
            }
            if (data.hasOwnProperty('totalDiskBytes')) {
                obj['totalDiskBytes'] = ApiClient.convertToType(data['totalDiskBytes'], 'String');
            }
            if (data.hasOwnProperty('volume')) {
                obj['volume'] = ApiClient.convertToType(data['volume'], [GoogleChromeManagementV1StorageInfoDiskVolume]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromeManagementV1StorageInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromeManagementV1StorageInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['availableDiskBytes'] && !(typeof data['availableDiskBytes'] === 'string' || data['availableDiskBytes'] instanceof String)) {
            throw new Error("Expected the field `availableDiskBytes` to be a primitive type in the JSON string but got " + data['availableDiskBytes']);
        }
        // ensure the json data is a string
        if (data['totalDiskBytes'] && !(typeof data['totalDiskBytes'] === 'string' || data['totalDiskBytes'] instanceof String)) {
            throw new Error("Expected the field `totalDiskBytes` to be a primitive type in the JSON string but got " + data['totalDiskBytes']);
        }
        if (data['volume']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['volume'])) {
                throw new Error("Expected the field `volume` to be an array in the JSON data but got " + data['volume']);
            }
            // validate the optional field `volume` (array)
            for (const item of data['volume']) {
                GoogleChromeManagementV1StorageInfoDiskVolume.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The available space for user data storage in the device in bytes.
 * @member {String} availableDiskBytes
 */
GoogleChromeManagementV1StorageInfo.prototype['availableDiskBytes'] = undefined;

/**
 * The total space for user data storage in the device in bytes.
 * @member {String} totalDiskBytes
 */
GoogleChromeManagementV1StorageInfo.prototype['totalDiskBytes'] = undefined;

/**
 * Information for disk volumes
 * @member {Array.<module:model/GoogleChromeManagementV1StorageInfoDiskVolume>} volume
 */
GoogleChromeManagementV1StorageInfo.prototype['volume'] = undefined;






export default GoogleChromeManagementV1StorageInfo;

