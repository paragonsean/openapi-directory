/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleChromeManagementV1ChromeAppPermission from './GoogleChromeManagementV1ChromeAppPermission';
import GoogleChromeManagementV1ChromeAppSiteAccess from './GoogleChromeManagementV1ChromeAppSiteAccess';

/**
 * The GoogleChromeManagementV1ChromeAppInfo model module.
 * @module model/GoogleChromeManagementV1ChromeAppInfo
 * @version v1
 */
class GoogleChromeManagementV1ChromeAppInfo {
    /**
     * Constructs a new <code>GoogleChromeManagementV1ChromeAppInfo</code>.
     * Chrome Web Store app information.
     * @alias module:model/GoogleChromeManagementV1ChromeAppInfo
     */
    constructor() { 
        
        GoogleChromeManagementV1ChromeAppInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromeManagementV1ChromeAppInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromeManagementV1ChromeAppInfo} obj Optional instance to populate.
     * @return {module:model/GoogleChromeManagementV1ChromeAppInfo} The populated <code>GoogleChromeManagementV1ChromeAppInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromeManagementV1ChromeAppInfo();

            if (data.hasOwnProperty('googleOwned')) {
                obj['googleOwned'] = ApiClient.convertToType(data['googleOwned'], 'Boolean');
            }
            if (data.hasOwnProperty('isCwsHosted')) {
                obj['isCwsHosted'] = ApiClient.convertToType(data['isCwsHosted'], 'Boolean');
            }
            if (data.hasOwnProperty('isExtensionPolicySupported')) {
                obj['isExtensionPolicySupported'] = ApiClient.convertToType(data['isExtensionPolicySupported'], 'Boolean');
            }
            if (data.hasOwnProperty('isKioskOnly')) {
                obj['isKioskOnly'] = ApiClient.convertToType(data['isKioskOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('isTheme')) {
                obj['isTheme'] = ApiClient.convertToType(data['isTheme'], 'Boolean');
            }
            if (data.hasOwnProperty('kioskEnabled')) {
                obj['kioskEnabled'] = ApiClient.convertToType(data['kioskEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('minUserCount')) {
                obj['minUserCount'] = ApiClient.convertToType(data['minUserCount'], 'Number');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], [GoogleChromeManagementV1ChromeAppPermission]);
            }
            if (data.hasOwnProperty('siteAccess')) {
                obj['siteAccess'] = ApiClient.convertToType(data['siteAccess'], [GoogleChromeManagementV1ChromeAppSiteAccess]);
            }
            if (data.hasOwnProperty('supportEnabled')) {
                obj['supportEnabled'] = ApiClient.convertToType(data['supportEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromeManagementV1ChromeAppInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromeManagementV1ChromeAppInfo</code>.
     */
    static validateJSON(data) {
        if (data['permissions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['permissions'])) {
                throw new Error("Expected the field `permissions` to be an array in the JSON data but got " + data['permissions']);
            }
            // validate the optional field `permissions` (array)
            for (const item of data['permissions']) {
                GoogleChromeManagementV1ChromeAppPermission.validateJSON(item);
            };
        }
        if (data['siteAccess']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['siteAccess'])) {
                throw new Error("Expected the field `siteAccess` to be an array in the JSON data but got " + data['siteAccess']);
            }
            // validate the optional field `siteAccess` (array)
            for (const item of data['siteAccess']) {
                GoogleChromeManagementV1ChromeAppSiteAccess.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Output only. Whether the app or extension is built and maintained by Google. Version-specific field that will only be set when the requested app version is found.
 * @member {Boolean} googleOwned
 */
GoogleChromeManagementV1ChromeAppInfo.prototype['googleOwned'] = undefined;

/**
 * Output only. Whether the app or extension is in a published state in the Chrome Web Store.
 * @member {Boolean} isCwsHosted
 */
GoogleChromeManagementV1ChromeAppInfo.prototype['isCwsHosted'] = undefined;

/**
 * Output only. Whether an app supports policy for extensions.
 * @member {Boolean} isExtensionPolicySupported
 */
GoogleChromeManagementV1ChromeAppInfo.prototype['isExtensionPolicySupported'] = undefined;

/**
 * Output only. Whether the app is only for Kiosk mode on ChromeOS devices
 * @member {Boolean} isKioskOnly
 */
GoogleChromeManagementV1ChromeAppInfo.prototype['isKioskOnly'] = undefined;

/**
 * Output only. Whether the app or extension is a theme.
 * @member {Boolean} isTheme
 */
GoogleChromeManagementV1ChromeAppInfo.prototype['isTheme'] = undefined;

/**
 * Output only. Whether this app is enabled for Kiosk mode on ChromeOS devices
 * @member {Boolean} kioskEnabled
 */
GoogleChromeManagementV1ChromeAppInfo.prototype['kioskEnabled'] = undefined;

/**
 * Output only. The minimum number of users using this app.
 * @member {Number} minUserCount
 */
GoogleChromeManagementV1ChromeAppInfo.prototype['minUserCount'] = undefined;

/**
 * Output only. Every custom permission requested by the app. Version-specific field that will only be set when the requested app version is found.
 * @member {Array.<module:model/GoogleChromeManagementV1ChromeAppPermission>} permissions
 */
GoogleChromeManagementV1ChromeAppInfo.prototype['permissions'] = undefined;

/**
 * Output only. Every permission giving access to domains or broad host patterns. ( e.g. www.google.com). This includes the matches from content scripts as well as hosts in the permissions node of the manifest. Version-specific field that will only be set when the requested app version is found.
 * @member {Array.<module:model/GoogleChromeManagementV1ChromeAppSiteAccess>} siteAccess
 */
GoogleChromeManagementV1ChromeAppInfo.prototype['siteAccess'] = undefined;

/**
 * Output only. The app developer has enabled support for their app. Version-specific field that will only be set when the requested app version is found.
 * @member {Boolean} supportEnabled
 */
GoogleChromeManagementV1ChromeAppInfo.prototype['supportEnabled'] = undefined;

/**
 * Output only. Types of an item in the Chrome Web Store
 * @member {module:model/GoogleChromeManagementV1ChromeAppInfo.TypeEnum} type
 */
GoogleChromeManagementV1ChromeAppInfo.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GoogleChromeManagementV1ChromeAppInfo['TypeEnum'] = {

    /**
     * value: "ITEM_TYPE_UNSPECIFIED"
     * @const
     */
    "ITEM_TYPE_UNSPECIFIED": "ITEM_TYPE_UNSPECIFIED",

    /**
     * value: "EXTENSION"
     * @const
     */
    "EXTENSION": "EXTENSION",

    /**
     * value: "OTHERS"
     * @const
     */
    "OTHERS": "OTHERS"
};



export default GoogleChromeManagementV1ChromeAppInfo;

