/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleChromeManagementV1TotalMemoryEncryptionInfo from './GoogleChromeManagementV1TotalMemoryEncryptionInfo';

/**
 * The GoogleChromeManagementV1MemoryInfo model module.
 * @module model/GoogleChromeManagementV1MemoryInfo
 * @version v1
 */
class GoogleChromeManagementV1MemoryInfo {
    /**
     * Constructs a new <code>GoogleChromeManagementV1MemoryInfo</code>.
     * Memory information of a device. * This field has both telemetry and device information: - &#x60;totalRamBytes&#x60; - Device information - &#x60;availableRamBytes&#x60; - Telemetry information - &#x60;totalMemoryEncryption&#x60; - Device information * Data for this field is controlled via policy: [ReportDeviceMemoryInfo](https://chromeenterprise.google/policies/#ReportDeviceMemoryInfo) * Data Collection Frequency: - &#x60;totalRamBytes&#x60; - Only at upload - &#x60;availableRamBytes&#x60; - Every 10 minutes - &#x60;totalMemoryEncryption&#x60; - at device startup * Default Data Reporting Frequency: - &#x60;totalRamBytes&#x60; - 3 hours - &#x60;availableRamBytes&#x60; - 3 hours - &#x60;totalMemoryEncryption&#x60; - at device startup - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: only for &#x60;totalMemoryEncryption&#x60; * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_MEMORY_INFO
     * @alias module:model/GoogleChromeManagementV1MemoryInfo
     */
    constructor() { 
        
        GoogleChromeManagementV1MemoryInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromeManagementV1MemoryInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromeManagementV1MemoryInfo} obj Optional instance to populate.
     * @return {module:model/GoogleChromeManagementV1MemoryInfo} The populated <code>GoogleChromeManagementV1MemoryInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromeManagementV1MemoryInfo();

            if (data.hasOwnProperty('availableRamBytes')) {
                obj['availableRamBytes'] = ApiClient.convertToType(data['availableRamBytes'], 'String');
            }
            if (data.hasOwnProperty('totalMemoryEncryption')) {
                obj['totalMemoryEncryption'] = GoogleChromeManagementV1TotalMemoryEncryptionInfo.constructFromObject(data['totalMemoryEncryption']);
            }
            if (data.hasOwnProperty('totalRamBytes')) {
                obj['totalRamBytes'] = ApiClient.convertToType(data['totalRamBytes'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromeManagementV1MemoryInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromeManagementV1MemoryInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['availableRamBytes'] && !(typeof data['availableRamBytes'] === 'string' || data['availableRamBytes'] instanceof String)) {
            throw new Error("Expected the field `availableRamBytes` to be a primitive type in the JSON string but got " + data['availableRamBytes']);
        }
        // validate the optional field `totalMemoryEncryption`
        if (data['totalMemoryEncryption']) { // data not null
          GoogleChromeManagementV1TotalMemoryEncryptionInfo.validateJSON(data['totalMemoryEncryption']);
        }
        // ensure the json data is a string
        if (data['totalRamBytes'] && !(typeof data['totalRamBytes'] === 'string' || data['totalRamBytes'] instanceof String)) {
            throw new Error("Expected the field `totalRamBytes` to be a primitive type in the JSON string but got " + data['totalRamBytes']);
        }

        return true;
    }


}



/**
 * Output only. Amount of available RAM in bytes.
 * @member {String} availableRamBytes
 */
GoogleChromeManagementV1MemoryInfo.prototype['availableRamBytes'] = undefined;

/**
 * @member {module:model/GoogleChromeManagementV1TotalMemoryEncryptionInfo} totalMemoryEncryption
 */
GoogleChromeManagementV1MemoryInfo.prototype['totalMemoryEncryption'] = undefined;

/**
 * Output only. Total RAM in bytes.
 * @member {String} totalRamBytes
 */
GoogleChromeManagementV1MemoryInfo.prototype['totalRamBytes'] = undefined;






export default GoogleChromeManagementV1MemoryInfo;

