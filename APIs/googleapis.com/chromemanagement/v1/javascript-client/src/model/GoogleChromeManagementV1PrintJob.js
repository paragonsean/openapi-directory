/**
 * Chrome Management API
 * The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleChromeManagementV1PrintJob model module.
 * @module model/GoogleChromeManagementV1PrintJob
 * @version v1
 */
class GoogleChromeManagementV1PrintJob {
    /**
     * Constructs a new <code>GoogleChromeManagementV1PrintJob</code>.
     * Represents a request to print a document that has been submitted to a printer.
     * @alias module:model/GoogleChromeManagementV1PrintJob
     */
    constructor() { 
        
        GoogleChromeManagementV1PrintJob.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleChromeManagementV1PrintJob</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleChromeManagementV1PrintJob} obj Optional instance to populate.
     * @return {module:model/GoogleChromeManagementV1PrintJob} The populated <code>GoogleChromeManagementV1PrintJob</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleChromeManagementV1PrintJob();

            if (data.hasOwnProperty('colorMode')) {
                obj['colorMode'] = ApiClient.convertToType(data['colorMode'], 'String');
            }
            if (data.hasOwnProperty('completeTime')) {
                obj['completeTime'] = ApiClient.convertToType(data['completeTime'], 'String');
            }
            if (data.hasOwnProperty('copyCount')) {
                obj['copyCount'] = ApiClient.convertToType(data['copyCount'], 'Number');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('documentPageCount')) {
                obj['documentPageCount'] = ApiClient.convertToType(data['documentPageCount'], 'Number');
            }
            if (data.hasOwnProperty('duplexMode')) {
                obj['duplexMode'] = ApiClient.convertToType(data['duplexMode'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('printer')) {
                obj['printer'] = ApiClient.convertToType(data['printer'], 'String');
            }
            if (data.hasOwnProperty('printerId')) {
                obj['printerId'] = ApiClient.convertToType(data['printerId'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('userEmail')) {
                obj['userEmail'] = ApiClient.convertToType(data['userEmail'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleChromeManagementV1PrintJob</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleChromeManagementV1PrintJob</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['colorMode'] && !(typeof data['colorMode'] === 'string' || data['colorMode'] instanceof String)) {
            throw new Error("Expected the field `colorMode` to be a primitive type in the JSON string but got " + data['colorMode']);
        }
        // ensure the json data is a string
        if (data['completeTime'] && !(typeof data['completeTime'] === 'string' || data['completeTime'] instanceof String)) {
            throw new Error("Expected the field `completeTime` to be a primitive type in the JSON string but got " + data['completeTime']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['duplexMode'] && !(typeof data['duplexMode'] === 'string' || data['duplexMode'] instanceof String)) {
            throw new Error("Expected the field `duplexMode` to be a primitive type in the JSON string but got " + data['duplexMode']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['printer'] && !(typeof data['printer'] === 'string' || data['printer'] instanceof String)) {
            throw new Error("Expected the field `printer` to be a primitive type in the JSON string but got " + data['printer']);
        }
        // ensure the json data is a string
        if (data['printerId'] && !(typeof data['printerId'] === 'string' || data['printerId'] instanceof String)) {
            throw new Error("Expected the field `printerId` to be a primitive type in the JSON string but got " + data['printerId']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['userEmail'] && !(typeof data['userEmail'] === 'string' || data['userEmail'] instanceof String)) {
            throw new Error("Expected the field `userEmail` to be a primitive type in the JSON string but got " + data['userEmail']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * Color mode.
 * @member {module:model/GoogleChromeManagementV1PrintJob.ColorModeEnum} colorMode
 */
GoogleChromeManagementV1PrintJob.prototype['colorMode'] = undefined;

/**
 * Print job completion timestamp.
 * @member {String} completeTime
 */
GoogleChromeManagementV1PrintJob.prototype['completeTime'] = undefined;

/**
 * Number of copies.
 * @member {Number} copyCount
 */
GoogleChromeManagementV1PrintJob.prototype['copyCount'] = undefined;

/**
 * Print job creation timestamp.
 * @member {String} createTime
 */
GoogleChromeManagementV1PrintJob.prototype['createTime'] = undefined;

/**
 * Number of pages in the document.
 * @member {Number} documentPageCount
 */
GoogleChromeManagementV1PrintJob.prototype['documentPageCount'] = undefined;

/**
 * Duplex mode.
 * @member {module:model/GoogleChromeManagementV1PrintJob.DuplexModeEnum} duplexMode
 */
GoogleChromeManagementV1PrintJob.prototype['duplexMode'] = undefined;

/**
 * Unique ID of the print job.
 * @member {String} id
 */
GoogleChromeManagementV1PrintJob.prototype['id'] = undefined;

/**
 * Name of the printer used for printing.
 * @member {String} printer
 */
GoogleChromeManagementV1PrintJob.prototype['printer'] = undefined;

/**
 * API ID of the printer used for printing.
 * @member {String} printerId
 */
GoogleChromeManagementV1PrintJob.prototype['printerId'] = undefined;

/**
 * The final state of the job.
 * @member {module:model/GoogleChromeManagementV1PrintJob.StateEnum} state
 */
GoogleChromeManagementV1PrintJob.prototype['state'] = undefined;

/**
 * The title of the document.
 * @member {String} title
 */
GoogleChromeManagementV1PrintJob.prototype['title'] = undefined;

/**
 * The primary e-mail address of the user who submitted the print job.
 * @member {String} userEmail
 */
GoogleChromeManagementV1PrintJob.prototype['userEmail'] = undefined;

/**
 * The unique Directory API ID of the user who submitted the print job.
 * @member {String} userId
 */
GoogleChromeManagementV1PrintJob.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>colorMode</code> property.
 * @enum {String}
 * @readonly
 */
GoogleChromeManagementV1PrintJob['ColorModeEnum'] = {

    /**
     * value: "COLOR_MODE_UNSPECIFIED"
     * @const
     */
    "COLOR_MODE_UNSPECIFIED": "COLOR_MODE_UNSPECIFIED",

    /**
     * value: "BLACK_AND_WHITE"
     * @const
     */
    "BLACK_AND_WHITE": "BLACK_AND_WHITE",

    /**
     * value: "COLOR"
     * @const
     */
    "COLOR": "COLOR"
};


/**
 * Allowed values for the <code>duplexMode</code> property.
 * @enum {String}
 * @readonly
 */
GoogleChromeManagementV1PrintJob['DuplexModeEnum'] = {

    /**
     * value: "DUPLEX_MODE_UNSPECIFIED"
     * @const
     */
    "DUPLEX_MODE_UNSPECIFIED": "DUPLEX_MODE_UNSPECIFIED",

    /**
     * value: "ONE_SIDED"
     * @const
     */
    "ONE_SIDED": "ONE_SIDED",

    /**
     * value: "TWO_SIDED_LONG_EDGE"
     * @const
     */
    "TWO_SIDED_LONG_EDGE": "TWO_SIDED_LONG_EDGE",

    /**
     * value: "TWO_SIDED_SHORT_EDGE"
     * @const
     */
    "TWO_SIDED_SHORT_EDGE": "TWO_SIDED_SHORT_EDGE"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
GoogleChromeManagementV1PrintJob['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "PRINTED"
     * @const
     */
    "PRINTED": "PRINTED",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default GoogleChromeManagementV1PrintJob;

