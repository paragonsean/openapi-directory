# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_chrome_management_v1_https_latency_routine_data import GoogleChromeManagementV1HttpsLatencyRoutineData
from openapi_server import util


class GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, https_latency_routine_data: GoogleChromeManagementV1HttpsLatencyRoutineData=None, https_latency_state: str=None):
        """GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent - a model defined in OpenAPI

        :param https_latency_routine_data: The https_latency_routine_data of this GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.
        :param https_latency_state: The https_latency_state of this GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.
        """
        self.openapi_types = {
            'https_latency_routine_data': GoogleChromeManagementV1HttpsLatencyRoutineData,
            'https_latency_state': str
        }

        self.attribute_map = {
            'https_latency_routine_data': 'httpsLatencyRoutineData',
            'https_latency_state': 'httpsLatencyState'
        }

        self._https_latency_routine_data = https_latency_routine_data
        self._https_latency_state = https_latency_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent of this GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def https_latency_routine_data(self):
        """Gets the https_latency_routine_data of this GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.


        :return: The https_latency_routine_data of this GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.
        :rtype: GoogleChromeManagementV1HttpsLatencyRoutineData
        """
        return self._https_latency_routine_data

    @https_latency_routine_data.setter
    def https_latency_routine_data(self, https_latency_routine_data):
        """Sets the https_latency_routine_data of this GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.


        :param https_latency_routine_data: The https_latency_routine_data of this GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.
        :type https_latency_routine_data: GoogleChromeManagementV1HttpsLatencyRoutineData
        """

        self._https_latency_routine_data = https_latency_routine_data

    @property
    def https_latency_state(self):
        """Gets the https_latency_state of this GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.

        Current HTTPS latency state.

        :return: The https_latency_state of this GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.
        :rtype: str
        """
        return self._https_latency_state

    @https_latency_state.setter
    def https_latency_state(self, https_latency_state):
        """Sets the https_latency_state of this GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.

        Current HTTPS latency state.

        :param https_latency_state: The https_latency_state of this GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent.
        :type https_latency_state: str
        """
        allowed_values = ["HTTPS_LATENCY_STATE_UNSPECIFIED", "RECOVERY", "PROBLEM"]  # noqa: E501
        if https_latency_state not in allowed_values:
            raise ValueError(
                "Invalid value for `https_latency_state` ({0}), must be one of {1}"
                .format(https_latency_state, allowed_values)
            )

        self._https_latency_state = https_latency_state
