# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleChromeManagementV1ThunderboltInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, security_level: str=None):
        """GoogleChromeManagementV1ThunderboltInfo - a model defined in OpenAPI

        :param security_level: The security_level of this GoogleChromeManagementV1ThunderboltInfo.
        """
        self.openapi_types = {
            'security_level': str
        }

        self.attribute_map = {
            'security_level': 'securityLevel'
        }

        self._security_level = security_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromeManagementV1ThunderboltInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromeManagementV1ThunderboltInfo of this GoogleChromeManagementV1ThunderboltInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def security_level(self):
        """Gets the security_level of this GoogleChromeManagementV1ThunderboltInfo.

        Security level of the Thunderbolt bus.

        :return: The security_level of this GoogleChromeManagementV1ThunderboltInfo.
        :rtype: str
        """
        return self._security_level

    @security_level.setter
    def security_level(self, security_level):
        """Sets the security_level of this GoogleChromeManagementV1ThunderboltInfo.

        Security level of the Thunderbolt bus.

        :param security_level: The security_level of this GoogleChromeManagementV1ThunderboltInfo.
        :type security_level: str
        """
        allowed_values = ["THUNDERBOLT_SECURITY_LEVEL_UNSPECIFIED", "THUNDERBOLT_SECURITY_NONE_LEVEL", "THUNDERBOLT_SECURITY_USER_LEVEL", "THUNDERBOLT_SECURITY_SECURE_LEVEL", "THUNDERBOLT_SECURITY_DP_ONLY_LEVEL", "THUNDERBOLT_SECURITY_USB_ONLY_LEVEL", "THUNDERBOLT_SECURITY_NO_PCIE_LEVEL"]  # noqa: E501
        if security_level not in allowed_values:
            raise ValueError(
                "Invalid value for `security_level` ({0}), must be one of {1}"
                .format(security_level, allowed_values)
            )

        self._security_level = security_level
