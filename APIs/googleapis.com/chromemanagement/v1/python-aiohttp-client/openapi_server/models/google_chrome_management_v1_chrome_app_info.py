# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_chrome_management_v1_chrome_app_permission import GoogleChromeManagementV1ChromeAppPermission
from openapi_server.models.google_chrome_management_v1_chrome_app_site_access import GoogleChromeManagementV1ChromeAppSiteAccess
from openapi_server import util


class GoogleChromeManagementV1ChromeAppInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, google_owned: bool=None, is_cws_hosted: bool=None, is_extension_policy_supported: bool=None, is_kiosk_only: bool=None, is_theme: bool=None, kiosk_enabled: bool=None, min_user_count: int=None, permissions: List[GoogleChromeManagementV1ChromeAppPermission]=None, site_access: List[GoogleChromeManagementV1ChromeAppSiteAccess]=None, support_enabled: bool=None, type: str=None):
        """GoogleChromeManagementV1ChromeAppInfo - a model defined in OpenAPI

        :param google_owned: The google_owned of this GoogleChromeManagementV1ChromeAppInfo.
        :param is_cws_hosted: The is_cws_hosted of this GoogleChromeManagementV1ChromeAppInfo.
        :param is_extension_policy_supported: The is_extension_policy_supported of this GoogleChromeManagementV1ChromeAppInfo.
        :param is_kiosk_only: The is_kiosk_only of this GoogleChromeManagementV1ChromeAppInfo.
        :param is_theme: The is_theme of this GoogleChromeManagementV1ChromeAppInfo.
        :param kiosk_enabled: The kiosk_enabled of this GoogleChromeManagementV1ChromeAppInfo.
        :param min_user_count: The min_user_count of this GoogleChromeManagementV1ChromeAppInfo.
        :param permissions: The permissions of this GoogleChromeManagementV1ChromeAppInfo.
        :param site_access: The site_access of this GoogleChromeManagementV1ChromeAppInfo.
        :param support_enabled: The support_enabled of this GoogleChromeManagementV1ChromeAppInfo.
        :param type: The type of this GoogleChromeManagementV1ChromeAppInfo.
        """
        self.openapi_types = {
            'google_owned': bool,
            'is_cws_hosted': bool,
            'is_extension_policy_supported': bool,
            'is_kiosk_only': bool,
            'is_theme': bool,
            'kiosk_enabled': bool,
            'min_user_count': int,
            'permissions': List[GoogleChromeManagementV1ChromeAppPermission],
            'site_access': List[GoogleChromeManagementV1ChromeAppSiteAccess],
            'support_enabled': bool,
            'type': str
        }

        self.attribute_map = {
            'google_owned': 'googleOwned',
            'is_cws_hosted': 'isCwsHosted',
            'is_extension_policy_supported': 'isExtensionPolicySupported',
            'is_kiosk_only': 'isKioskOnly',
            'is_theme': 'isTheme',
            'kiosk_enabled': 'kioskEnabled',
            'min_user_count': 'minUserCount',
            'permissions': 'permissions',
            'site_access': 'siteAccess',
            'support_enabled': 'supportEnabled',
            'type': 'type'
        }

        self._google_owned = google_owned
        self._is_cws_hosted = is_cws_hosted
        self._is_extension_policy_supported = is_extension_policy_supported
        self._is_kiosk_only = is_kiosk_only
        self._is_theme = is_theme
        self._kiosk_enabled = kiosk_enabled
        self._min_user_count = min_user_count
        self._permissions = permissions
        self._site_access = site_access
        self._support_enabled = support_enabled
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromeManagementV1ChromeAppInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromeManagementV1ChromeAppInfo of this GoogleChromeManagementV1ChromeAppInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def google_owned(self):
        """Gets the google_owned of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. Whether the app or extension is built and maintained by Google. Version-specific field that will only be set when the requested app version is found.

        :return: The google_owned of this GoogleChromeManagementV1ChromeAppInfo.
        :rtype: bool
        """
        return self._google_owned

    @google_owned.setter
    def google_owned(self, google_owned):
        """Sets the google_owned of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. Whether the app or extension is built and maintained by Google. Version-specific field that will only be set when the requested app version is found.

        :param google_owned: The google_owned of this GoogleChromeManagementV1ChromeAppInfo.
        :type google_owned: bool
        """

        self._google_owned = google_owned

    @property
    def is_cws_hosted(self):
        """Gets the is_cws_hosted of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. Whether the app or extension is in a published state in the Chrome Web Store.

        :return: The is_cws_hosted of this GoogleChromeManagementV1ChromeAppInfo.
        :rtype: bool
        """
        return self._is_cws_hosted

    @is_cws_hosted.setter
    def is_cws_hosted(self, is_cws_hosted):
        """Sets the is_cws_hosted of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. Whether the app or extension is in a published state in the Chrome Web Store.

        :param is_cws_hosted: The is_cws_hosted of this GoogleChromeManagementV1ChromeAppInfo.
        :type is_cws_hosted: bool
        """

        self._is_cws_hosted = is_cws_hosted

    @property
    def is_extension_policy_supported(self):
        """Gets the is_extension_policy_supported of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. Whether an app supports policy for extensions.

        :return: The is_extension_policy_supported of this GoogleChromeManagementV1ChromeAppInfo.
        :rtype: bool
        """
        return self._is_extension_policy_supported

    @is_extension_policy_supported.setter
    def is_extension_policy_supported(self, is_extension_policy_supported):
        """Sets the is_extension_policy_supported of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. Whether an app supports policy for extensions.

        :param is_extension_policy_supported: The is_extension_policy_supported of this GoogleChromeManagementV1ChromeAppInfo.
        :type is_extension_policy_supported: bool
        """

        self._is_extension_policy_supported = is_extension_policy_supported

    @property
    def is_kiosk_only(self):
        """Gets the is_kiosk_only of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. Whether the app is only for Kiosk mode on ChromeOS devices

        :return: The is_kiosk_only of this GoogleChromeManagementV1ChromeAppInfo.
        :rtype: bool
        """
        return self._is_kiosk_only

    @is_kiosk_only.setter
    def is_kiosk_only(self, is_kiosk_only):
        """Sets the is_kiosk_only of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. Whether the app is only for Kiosk mode on ChromeOS devices

        :param is_kiosk_only: The is_kiosk_only of this GoogleChromeManagementV1ChromeAppInfo.
        :type is_kiosk_only: bool
        """

        self._is_kiosk_only = is_kiosk_only

    @property
    def is_theme(self):
        """Gets the is_theme of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. Whether the app or extension is a theme.

        :return: The is_theme of this GoogleChromeManagementV1ChromeAppInfo.
        :rtype: bool
        """
        return self._is_theme

    @is_theme.setter
    def is_theme(self, is_theme):
        """Sets the is_theme of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. Whether the app or extension is a theme.

        :param is_theme: The is_theme of this GoogleChromeManagementV1ChromeAppInfo.
        :type is_theme: bool
        """

        self._is_theme = is_theme

    @property
    def kiosk_enabled(self):
        """Gets the kiosk_enabled of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. Whether this app is enabled for Kiosk mode on ChromeOS devices

        :return: The kiosk_enabled of this GoogleChromeManagementV1ChromeAppInfo.
        :rtype: bool
        """
        return self._kiosk_enabled

    @kiosk_enabled.setter
    def kiosk_enabled(self, kiosk_enabled):
        """Sets the kiosk_enabled of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. Whether this app is enabled for Kiosk mode on ChromeOS devices

        :param kiosk_enabled: The kiosk_enabled of this GoogleChromeManagementV1ChromeAppInfo.
        :type kiosk_enabled: bool
        """

        self._kiosk_enabled = kiosk_enabled

    @property
    def min_user_count(self):
        """Gets the min_user_count of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. The minimum number of users using this app.

        :return: The min_user_count of this GoogleChromeManagementV1ChromeAppInfo.
        :rtype: int
        """
        return self._min_user_count

    @min_user_count.setter
    def min_user_count(self, min_user_count):
        """Sets the min_user_count of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. The minimum number of users using this app.

        :param min_user_count: The min_user_count of this GoogleChromeManagementV1ChromeAppInfo.
        :type min_user_count: int
        """

        self._min_user_count = min_user_count

    @property
    def permissions(self):
        """Gets the permissions of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. Every custom permission requested by the app. Version-specific field that will only be set when the requested app version is found.

        :return: The permissions of this GoogleChromeManagementV1ChromeAppInfo.
        :rtype: List[GoogleChromeManagementV1ChromeAppPermission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. Every custom permission requested by the app. Version-specific field that will only be set when the requested app version is found.

        :param permissions: The permissions of this GoogleChromeManagementV1ChromeAppInfo.
        :type permissions: List[GoogleChromeManagementV1ChromeAppPermission]
        """

        self._permissions = permissions

    @property
    def site_access(self):
        """Gets the site_access of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. Every permission giving access to domains or broad host patterns. ( e.g. www.google.com). This includes the matches from content scripts as well as hosts in the permissions node of the manifest. Version-specific field that will only be set when the requested app version is found.

        :return: The site_access of this GoogleChromeManagementV1ChromeAppInfo.
        :rtype: List[GoogleChromeManagementV1ChromeAppSiteAccess]
        """
        return self._site_access

    @site_access.setter
    def site_access(self, site_access):
        """Sets the site_access of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. Every permission giving access to domains or broad host patterns. ( e.g. www.google.com). This includes the matches from content scripts as well as hosts in the permissions node of the manifest. Version-specific field that will only be set when the requested app version is found.

        :param site_access: The site_access of this GoogleChromeManagementV1ChromeAppInfo.
        :type site_access: List[GoogleChromeManagementV1ChromeAppSiteAccess]
        """

        self._site_access = site_access

    @property
    def support_enabled(self):
        """Gets the support_enabled of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. The app developer has enabled support for their app. Version-specific field that will only be set when the requested app version is found.

        :return: The support_enabled of this GoogleChromeManagementV1ChromeAppInfo.
        :rtype: bool
        """
        return self._support_enabled

    @support_enabled.setter
    def support_enabled(self, support_enabled):
        """Sets the support_enabled of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. The app developer has enabled support for their app. Version-specific field that will only be set when the requested app version is found.

        :param support_enabled: The support_enabled of this GoogleChromeManagementV1ChromeAppInfo.
        :type support_enabled: bool
        """

        self._support_enabled = support_enabled

    @property
    def type(self):
        """Gets the type of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. Types of an item in the Chrome Web Store

        :return: The type of this GoogleChromeManagementV1ChromeAppInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleChromeManagementV1ChromeAppInfo.

        Output only. Types of an item in the Chrome Web Store

        :param type: The type of this GoogleChromeManagementV1ChromeAppInfo.
        :type type: str
        """
        allowed_values = ["ITEM_TYPE_UNSPECIFIED", "EXTENSION", "OTHERS"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
