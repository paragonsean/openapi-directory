# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_chrome_management_v1_battery_sample_report import GoogleChromeManagementV1BatterySampleReport
from openapi_server import util


class GoogleChromeManagementV1BatteryStatusReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, battery_health: str=None, cycle_count: int=None, full_charge_capacity: str=None, report_time: str=None, sample: List[GoogleChromeManagementV1BatterySampleReport]=None, serial_number: str=None):
        """GoogleChromeManagementV1BatteryStatusReport - a model defined in OpenAPI

        :param battery_health: The battery_health of this GoogleChromeManagementV1BatteryStatusReport.
        :param cycle_count: The cycle_count of this GoogleChromeManagementV1BatteryStatusReport.
        :param full_charge_capacity: The full_charge_capacity of this GoogleChromeManagementV1BatteryStatusReport.
        :param report_time: The report_time of this GoogleChromeManagementV1BatteryStatusReport.
        :param sample: The sample of this GoogleChromeManagementV1BatteryStatusReport.
        :param serial_number: The serial_number of this GoogleChromeManagementV1BatteryStatusReport.
        """
        self.openapi_types = {
            'battery_health': str,
            'cycle_count': int,
            'full_charge_capacity': str,
            'report_time': str,
            'sample': List[GoogleChromeManagementV1BatterySampleReport],
            'serial_number': str
        }

        self.attribute_map = {
            'battery_health': 'batteryHealth',
            'cycle_count': 'cycleCount',
            'full_charge_capacity': 'fullChargeCapacity',
            'report_time': 'reportTime',
            'sample': 'sample',
            'serial_number': 'serialNumber'
        }

        self._battery_health = battery_health
        self._cycle_count = cycle_count
        self._full_charge_capacity = full_charge_capacity
        self._report_time = report_time
        self._sample = sample
        self._serial_number = serial_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromeManagementV1BatteryStatusReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromeManagementV1BatteryStatusReport of this GoogleChromeManagementV1BatteryStatusReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def battery_health(self):
        """Gets the battery_health of this GoogleChromeManagementV1BatteryStatusReport.

        Output only. Battery health.

        :return: The battery_health of this GoogleChromeManagementV1BatteryStatusReport.
        :rtype: str
        """
        return self._battery_health

    @battery_health.setter
    def battery_health(self, battery_health):
        """Sets the battery_health of this GoogleChromeManagementV1BatteryStatusReport.

        Output only. Battery health.

        :param battery_health: The battery_health of this GoogleChromeManagementV1BatteryStatusReport.
        :type battery_health: str
        """
        allowed_values = ["BATTERY_HEALTH_UNSPECIFIED", "BATTERY_HEALTH_NORMAL", "BATTERY_REPLACE_SOON", "BATTERY_REPLACE_NOW"]  # noqa: E501
        if battery_health not in allowed_values:
            raise ValueError(
                "Invalid value for `battery_health` ({0}), must be one of {1}"
                .format(battery_health, allowed_values)
            )

        self._battery_health = battery_health

    @property
    def cycle_count(self):
        """Gets the cycle_count of this GoogleChromeManagementV1BatteryStatusReport.

        Output only. Cycle count.

        :return: The cycle_count of this GoogleChromeManagementV1BatteryStatusReport.
        :rtype: int
        """
        return self._cycle_count

    @cycle_count.setter
    def cycle_count(self, cycle_count):
        """Sets the cycle_count of this GoogleChromeManagementV1BatteryStatusReport.

        Output only. Cycle count.

        :param cycle_count: The cycle_count of this GoogleChromeManagementV1BatteryStatusReport.
        :type cycle_count: int
        """

        self._cycle_count = cycle_count

    @property
    def full_charge_capacity(self):
        """Gets the full_charge_capacity of this GoogleChromeManagementV1BatteryStatusReport.

        Output only. Full charge capacity (mAmpere-hours).

        :return: The full_charge_capacity of this GoogleChromeManagementV1BatteryStatusReport.
        :rtype: str
        """
        return self._full_charge_capacity

    @full_charge_capacity.setter
    def full_charge_capacity(self, full_charge_capacity):
        """Sets the full_charge_capacity of this GoogleChromeManagementV1BatteryStatusReport.

        Output only. Full charge capacity (mAmpere-hours).

        :param full_charge_capacity: The full_charge_capacity of this GoogleChromeManagementV1BatteryStatusReport.
        :type full_charge_capacity: str
        """

        self._full_charge_capacity = full_charge_capacity

    @property
    def report_time(self):
        """Gets the report_time of this GoogleChromeManagementV1BatteryStatusReport.

        Output only. Timestamp of when the sample was collected on device

        :return: The report_time of this GoogleChromeManagementV1BatteryStatusReport.
        :rtype: str
        """
        return self._report_time

    @report_time.setter
    def report_time(self, report_time):
        """Sets the report_time of this GoogleChromeManagementV1BatteryStatusReport.

        Output only. Timestamp of when the sample was collected on device

        :param report_time: The report_time of this GoogleChromeManagementV1BatteryStatusReport.
        :type report_time: str
        """

        self._report_time = report_time

    @property
    def sample(self):
        """Gets the sample of this GoogleChromeManagementV1BatteryStatusReport.

        Output only. Sampling data for the battery sorted in a decreasing order of report_time.

        :return: The sample of this GoogleChromeManagementV1BatteryStatusReport.
        :rtype: List[GoogleChromeManagementV1BatterySampleReport]
        """
        return self._sample

    @sample.setter
    def sample(self, sample):
        """Sets the sample of this GoogleChromeManagementV1BatteryStatusReport.

        Output only. Sampling data for the battery sorted in a decreasing order of report_time.

        :param sample: The sample of this GoogleChromeManagementV1BatteryStatusReport.
        :type sample: List[GoogleChromeManagementV1BatterySampleReport]
        """

        self._sample = sample

    @property
    def serial_number(self):
        """Gets the serial_number of this GoogleChromeManagementV1BatteryStatusReport.

        Output only. Battery serial number.

        :return: The serial_number of this GoogleChromeManagementV1BatteryStatusReport.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this GoogleChromeManagementV1BatteryStatusReport.

        Output only. Battery serial number.

        :param serial_number: The serial_number of this GoogleChromeManagementV1BatteryStatusReport.
        :type serial_number: str
        """

        self._serial_number = serial_number
