# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleChromeManagementV1BatterySampleReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, charge_rate: int=None, current: str=None, discharge_rate: int=None, remaining_capacity: str=None, report_time: str=None, status: str=None, temperature: int=None, voltage: str=None):
        """GoogleChromeManagementV1BatterySampleReport - a model defined in OpenAPI

        :param charge_rate: The charge_rate of this GoogleChromeManagementV1BatterySampleReport.
        :param current: The current of this GoogleChromeManagementV1BatterySampleReport.
        :param discharge_rate: The discharge_rate of this GoogleChromeManagementV1BatterySampleReport.
        :param remaining_capacity: The remaining_capacity of this GoogleChromeManagementV1BatterySampleReport.
        :param report_time: The report_time of this GoogleChromeManagementV1BatterySampleReport.
        :param status: The status of this GoogleChromeManagementV1BatterySampleReport.
        :param temperature: The temperature of this GoogleChromeManagementV1BatterySampleReport.
        :param voltage: The voltage of this GoogleChromeManagementV1BatterySampleReport.
        """
        self.openapi_types = {
            'charge_rate': int,
            'current': str,
            'discharge_rate': int,
            'remaining_capacity': str,
            'report_time': str,
            'status': str,
            'temperature': int,
            'voltage': str
        }

        self.attribute_map = {
            'charge_rate': 'chargeRate',
            'current': 'current',
            'discharge_rate': 'dischargeRate',
            'remaining_capacity': 'remainingCapacity',
            'report_time': 'reportTime',
            'status': 'status',
            'temperature': 'temperature',
            'voltage': 'voltage'
        }

        self._charge_rate = charge_rate
        self._current = current
        self._discharge_rate = discharge_rate
        self._remaining_capacity = remaining_capacity
        self._report_time = report_time
        self._status = status
        self._temperature = temperature
        self._voltage = voltage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromeManagementV1BatterySampleReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromeManagementV1BatterySampleReport of this GoogleChromeManagementV1BatterySampleReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def charge_rate(self):
        """Gets the charge_rate of this GoogleChromeManagementV1BatterySampleReport.

        Output only. Battery charge percentage.

        :return: The charge_rate of this GoogleChromeManagementV1BatterySampleReport.
        :rtype: int
        """
        return self._charge_rate

    @charge_rate.setter
    def charge_rate(self, charge_rate):
        """Sets the charge_rate of this GoogleChromeManagementV1BatterySampleReport.

        Output only. Battery charge percentage.

        :param charge_rate: The charge_rate of this GoogleChromeManagementV1BatterySampleReport.
        :type charge_rate: int
        """

        self._charge_rate = charge_rate

    @property
    def current(self):
        """Gets the current of this GoogleChromeManagementV1BatterySampleReport.

        Output only. Battery current (mA).

        :return: The current of this GoogleChromeManagementV1BatterySampleReport.
        :rtype: str
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this GoogleChromeManagementV1BatterySampleReport.

        Output only. Battery current (mA).

        :param current: The current of this GoogleChromeManagementV1BatterySampleReport.
        :type current: str
        """

        self._current = current

    @property
    def discharge_rate(self):
        """Gets the discharge_rate of this GoogleChromeManagementV1BatterySampleReport.

        Output only. The battery discharge rate measured in mW. Positive if the battery is being discharged, negative if it's being charged.

        :return: The discharge_rate of this GoogleChromeManagementV1BatterySampleReport.
        :rtype: int
        """
        return self._discharge_rate

    @discharge_rate.setter
    def discharge_rate(self, discharge_rate):
        """Sets the discharge_rate of this GoogleChromeManagementV1BatterySampleReport.

        Output only. The battery discharge rate measured in mW. Positive if the battery is being discharged, negative if it's being charged.

        :param discharge_rate: The discharge_rate of this GoogleChromeManagementV1BatterySampleReport.
        :type discharge_rate: int
        """

        self._discharge_rate = discharge_rate

    @property
    def remaining_capacity(self):
        """Gets the remaining_capacity of this GoogleChromeManagementV1BatterySampleReport.

        Output only. Battery remaining capacity (mAmpere-hours).

        :return: The remaining_capacity of this GoogleChromeManagementV1BatterySampleReport.
        :rtype: str
        """
        return self._remaining_capacity

    @remaining_capacity.setter
    def remaining_capacity(self, remaining_capacity):
        """Sets the remaining_capacity of this GoogleChromeManagementV1BatterySampleReport.

        Output only. Battery remaining capacity (mAmpere-hours).

        :param remaining_capacity: The remaining_capacity of this GoogleChromeManagementV1BatterySampleReport.
        :type remaining_capacity: str
        """

        self._remaining_capacity = remaining_capacity

    @property
    def report_time(self):
        """Gets the report_time of this GoogleChromeManagementV1BatterySampleReport.

        Output only. Timestamp of when the sample was collected on device

        :return: The report_time of this GoogleChromeManagementV1BatterySampleReport.
        :rtype: str
        """
        return self._report_time

    @report_time.setter
    def report_time(self, report_time):
        """Sets the report_time of this GoogleChromeManagementV1BatterySampleReport.

        Output only. Timestamp of when the sample was collected on device

        :param report_time: The report_time of this GoogleChromeManagementV1BatterySampleReport.
        :type report_time: str
        """

        self._report_time = report_time

    @property
    def status(self):
        """Gets the status of this GoogleChromeManagementV1BatterySampleReport.

        Output only. Battery status read from sysfs. Example: Discharging

        :return: The status of this GoogleChromeManagementV1BatterySampleReport.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GoogleChromeManagementV1BatterySampleReport.

        Output only. Battery status read from sysfs. Example: Discharging

        :param status: The status of this GoogleChromeManagementV1BatterySampleReport.
        :type status: str
        """

        self._status = status

    @property
    def temperature(self):
        """Gets the temperature of this GoogleChromeManagementV1BatterySampleReport.

        Output only. Temperature in Celsius degrees.

        :return: The temperature of this GoogleChromeManagementV1BatterySampleReport.
        :rtype: int
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this GoogleChromeManagementV1BatterySampleReport.

        Output only. Temperature in Celsius degrees.

        :param temperature: The temperature of this GoogleChromeManagementV1BatterySampleReport.
        :type temperature: int
        """

        self._temperature = temperature

    @property
    def voltage(self):
        """Gets the voltage of this GoogleChromeManagementV1BatterySampleReport.

        Output only. Battery voltage (millivolt).

        :return: The voltage of this GoogleChromeManagementV1BatterySampleReport.
        :rtype: str
        """
        return self._voltage

    @voltage.setter
    def voltage(self, voltage):
        """Sets the voltage of this GoogleChromeManagementV1BatterySampleReport.

        Output only. Battery voltage (millivolt).

        :param voltage: The voltage of this GoogleChromeManagementV1BatterySampleReport.
        :type voltage: str
        """

        self._voltage = voltage
