# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleChromeManagementV1TotalMemoryEncryptionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_algorithm: str=None, encryption_state: str=None, key_length: str=None, max_keys: str=None):
        """GoogleChromeManagementV1TotalMemoryEncryptionInfo - a model defined in OpenAPI

        :param encryption_algorithm: The encryption_algorithm of this GoogleChromeManagementV1TotalMemoryEncryptionInfo.
        :param encryption_state: The encryption_state of this GoogleChromeManagementV1TotalMemoryEncryptionInfo.
        :param key_length: The key_length of this GoogleChromeManagementV1TotalMemoryEncryptionInfo.
        :param max_keys: The max_keys of this GoogleChromeManagementV1TotalMemoryEncryptionInfo.
        """
        self.openapi_types = {
            'encryption_algorithm': str,
            'encryption_state': str,
            'key_length': str,
            'max_keys': str
        }

        self.attribute_map = {
            'encryption_algorithm': 'encryptionAlgorithm',
            'encryption_state': 'encryptionState',
            'key_length': 'keyLength',
            'max_keys': 'maxKeys'
        }

        self._encryption_algorithm = encryption_algorithm
        self._encryption_state = encryption_state
        self._key_length = key_length
        self._max_keys = max_keys

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromeManagementV1TotalMemoryEncryptionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromeManagementV1TotalMemoryEncryptionInfo of this GoogleChromeManagementV1TotalMemoryEncryptionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_algorithm(self):
        """Gets the encryption_algorithm of this GoogleChromeManagementV1TotalMemoryEncryptionInfo.

        Memory encryption algorithm.

        :return: The encryption_algorithm of this GoogleChromeManagementV1TotalMemoryEncryptionInfo.
        :rtype: str
        """
        return self._encryption_algorithm

    @encryption_algorithm.setter
    def encryption_algorithm(self, encryption_algorithm):
        """Sets the encryption_algorithm of this GoogleChromeManagementV1TotalMemoryEncryptionInfo.

        Memory encryption algorithm.

        :param encryption_algorithm: The encryption_algorithm of this GoogleChromeManagementV1TotalMemoryEncryptionInfo.
        :type encryption_algorithm: str
        """
        allowed_values = ["MEMORY_ENCRYPTION_ALGORITHM_UNSPECIFIED", "MEMORY_ENCRYPTION_ALGORITHM_UNKNOWN", "MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_128", "MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_256"]  # noqa: E501
        if encryption_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_algorithm` ({0}), must be one of {1}"
                .format(encryption_algorithm, allowed_values)
            )

        self._encryption_algorithm = encryption_algorithm

    @property
    def encryption_state(self):
        """Gets the encryption_state of this GoogleChromeManagementV1TotalMemoryEncryptionInfo.

        The state of memory encryption on the device.

        :return: The encryption_state of this GoogleChromeManagementV1TotalMemoryEncryptionInfo.
        :rtype: str
        """
        return self._encryption_state

    @encryption_state.setter
    def encryption_state(self, encryption_state):
        """Sets the encryption_state of this GoogleChromeManagementV1TotalMemoryEncryptionInfo.

        The state of memory encryption on the device.

        :param encryption_state: The encryption_state of this GoogleChromeManagementV1TotalMemoryEncryptionInfo.
        :type encryption_state: str
        """
        allowed_values = ["MEMORY_ENCRYPTION_STATE_UNSPECIFIED", "MEMORY_ENCRYPTION_STATE_UNKNOWN", "MEMORY_ENCRYPTION_STATE_DISABLED", "MEMORY_ENCRYPTION_STATE_TME", "MEMORY_ENCRYPTION_STATE_MKTME"]  # noqa: E501
        if encryption_state not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_state` ({0}), must be one of {1}"
                .format(encryption_state, allowed_values)
            )

        self._encryption_state = encryption_state

    @property
    def key_length(self):
        """Gets the key_length of this GoogleChromeManagementV1TotalMemoryEncryptionInfo.

        The length of the encryption keys.

        :return: The key_length of this GoogleChromeManagementV1TotalMemoryEncryptionInfo.
        :rtype: str
        """
        return self._key_length

    @key_length.setter
    def key_length(self, key_length):
        """Sets the key_length of this GoogleChromeManagementV1TotalMemoryEncryptionInfo.

        The length of the encryption keys.

        :param key_length: The key_length of this GoogleChromeManagementV1TotalMemoryEncryptionInfo.
        :type key_length: str
        """

        self._key_length = key_length

    @property
    def max_keys(self):
        """Gets the max_keys of this GoogleChromeManagementV1TotalMemoryEncryptionInfo.

        The maximum number of keys that can be used for encryption.

        :return: The max_keys of this GoogleChromeManagementV1TotalMemoryEncryptionInfo.
        :rtype: str
        """
        return self._max_keys

    @max_keys.setter
    def max_keys(self, max_keys):
        """Sets the max_keys of this GoogleChromeManagementV1TotalMemoryEncryptionInfo.

        The maximum number of keys that can be used for encryption.

        :param max_keys: The max_keys of this GoogleChromeManagementV1TotalMemoryEncryptionInfo.
        :type max_keys: str
        """

        self._max_keys = max_keys
