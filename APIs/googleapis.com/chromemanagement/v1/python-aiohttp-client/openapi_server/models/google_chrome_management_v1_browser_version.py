# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleChromeManagementV1BrowserVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: str=None, count: str=None, device_os_version: str=None, system: str=None, version: str=None):
        """GoogleChromeManagementV1BrowserVersion - a model defined in OpenAPI

        :param channel: The channel of this GoogleChromeManagementV1BrowserVersion.
        :param count: The count of this GoogleChromeManagementV1BrowserVersion.
        :param device_os_version: The device_os_version of this GoogleChromeManagementV1BrowserVersion.
        :param system: The system of this GoogleChromeManagementV1BrowserVersion.
        :param version: The version of this GoogleChromeManagementV1BrowserVersion.
        """
        self.openapi_types = {
            'channel': str,
            'count': str,
            'device_os_version': str,
            'system': str,
            'version': str
        }

        self.attribute_map = {
            'channel': 'channel',
            'count': 'count',
            'device_os_version': 'deviceOsVersion',
            'system': 'system',
            'version': 'version'
        }

        self._channel = channel
        self._count = count
        self._device_os_version = device_os_version
        self._system = system
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromeManagementV1BrowserVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromeManagementV1BrowserVersion of this GoogleChromeManagementV1BrowserVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this GoogleChromeManagementV1BrowserVersion.

        Output only. The release channel of the installed browser.

        :return: The channel of this GoogleChromeManagementV1BrowserVersion.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this GoogleChromeManagementV1BrowserVersion.

        Output only. The release channel of the installed browser.

        :param channel: The channel of this GoogleChromeManagementV1BrowserVersion.
        :type channel: str
        """
        allowed_values = ["RELEASE_CHANNEL_UNSPECIFIED", "CANARY", "DEV", "BETA", "STABLE"]  # noqa: E501
        if channel not in allowed_values:
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def count(self):
        """Gets the count of this GoogleChromeManagementV1BrowserVersion.

        Output only. Count grouped by device_system and major version

        :return: The count of this GoogleChromeManagementV1BrowserVersion.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this GoogleChromeManagementV1BrowserVersion.

        Output only. Count grouped by device_system and major version

        :param count: The count of this GoogleChromeManagementV1BrowserVersion.
        :type count: str
        """

        self._count = count

    @property
    def device_os_version(self):
        """Gets the device_os_version of this GoogleChromeManagementV1BrowserVersion.

        Output only. Version of the system-specified operating system.

        :return: The device_os_version of this GoogleChromeManagementV1BrowserVersion.
        :rtype: str
        """
        return self._device_os_version

    @device_os_version.setter
    def device_os_version(self, device_os_version):
        """Sets the device_os_version of this GoogleChromeManagementV1BrowserVersion.

        Output only. Version of the system-specified operating system.

        :param device_os_version: The device_os_version of this GoogleChromeManagementV1BrowserVersion.
        :type device_os_version: str
        """

        self._device_os_version = device_os_version

    @property
    def system(self):
        """Gets the system of this GoogleChromeManagementV1BrowserVersion.

        Output only. The device operating system.

        :return: The system of this GoogleChromeManagementV1BrowserVersion.
        :rtype: str
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this GoogleChromeManagementV1BrowserVersion.

        Output only. The device operating system.

        :param system: The system of this GoogleChromeManagementV1BrowserVersion.
        :type system: str
        """
        allowed_values = ["DEVICE_SYSTEM_UNSPECIFIED", "SYSTEM_OTHER", "SYSTEM_ANDROID", "SYSTEM_IOS", "SYSTEM_CROS", "SYSTEM_WINDOWS", "SYSTEM_MAC", "SYSTEM_LINUX"]  # noqa: E501
        if system not in allowed_values:
            raise ValueError(
                "Invalid value for `system` ({0}), must be one of {1}"
                .format(system, allowed_values)
            )

        self._system = system

    @property
    def version(self):
        """Gets the version of this GoogleChromeManagementV1BrowserVersion.

        Output only. The full version of the installed browser.

        :return: The version of this GoogleChromeManagementV1BrowserVersion.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GoogleChromeManagementV1BrowserVersion.

        Output only. The full version of the installed browser.

        :param version: The version of this GoogleChromeManagementV1BrowserVersion.
        :type version: str
        """

        self._version = version
