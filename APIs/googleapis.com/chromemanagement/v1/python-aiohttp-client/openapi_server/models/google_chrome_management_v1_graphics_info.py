# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_chrome_management_v1_display_device import GoogleChromeManagementV1DisplayDevice
from openapi_server.models.google_chrome_management_v1_graphics_adapter_info import GoogleChromeManagementV1GraphicsAdapterInfo
from openapi_server.models.google_chrome_management_v1_touch_screen_info import GoogleChromeManagementV1TouchScreenInfo
from openapi_server import util


class GoogleChromeManagementV1GraphicsInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adapter_info: GoogleChromeManagementV1GraphicsAdapterInfo=None, display_devices: List[GoogleChromeManagementV1DisplayDevice]=None, eprivacy_supported: bool=None, touch_screen_info: GoogleChromeManagementV1TouchScreenInfo=None):
        """GoogleChromeManagementV1GraphicsInfo - a model defined in OpenAPI

        :param adapter_info: The adapter_info of this GoogleChromeManagementV1GraphicsInfo.
        :param display_devices: The display_devices of this GoogleChromeManagementV1GraphicsInfo.
        :param eprivacy_supported: The eprivacy_supported of this GoogleChromeManagementV1GraphicsInfo.
        :param touch_screen_info: The touch_screen_info of this GoogleChromeManagementV1GraphicsInfo.
        """
        self.openapi_types = {
            'adapter_info': GoogleChromeManagementV1GraphicsAdapterInfo,
            'display_devices': List[GoogleChromeManagementV1DisplayDevice],
            'eprivacy_supported': bool,
            'touch_screen_info': GoogleChromeManagementV1TouchScreenInfo
        }

        self.attribute_map = {
            'adapter_info': 'adapterInfo',
            'display_devices': 'displayDevices',
            'eprivacy_supported': 'eprivacySupported',
            'touch_screen_info': 'touchScreenInfo'
        }

        self._adapter_info = adapter_info
        self._display_devices = display_devices
        self._eprivacy_supported = eprivacy_supported
        self._touch_screen_info = touch_screen_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromeManagementV1GraphicsInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromeManagementV1GraphicsInfo of this GoogleChromeManagementV1GraphicsInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adapter_info(self):
        """Gets the adapter_info of this GoogleChromeManagementV1GraphicsInfo.


        :return: The adapter_info of this GoogleChromeManagementV1GraphicsInfo.
        :rtype: GoogleChromeManagementV1GraphicsAdapterInfo
        """
        return self._adapter_info

    @adapter_info.setter
    def adapter_info(self, adapter_info):
        """Sets the adapter_info of this GoogleChromeManagementV1GraphicsInfo.


        :param adapter_info: The adapter_info of this GoogleChromeManagementV1GraphicsInfo.
        :type adapter_info: GoogleChromeManagementV1GraphicsAdapterInfo
        """

        self._adapter_info = adapter_info

    @property
    def display_devices(self):
        """Gets the display_devices of this GoogleChromeManagementV1GraphicsInfo.

        Output only. Information about the display(s) of the device.

        :return: The display_devices of this GoogleChromeManagementV1GraphicsInfo.
        :rtype: List[GoogleChromeManagementV1DisplayDevice]
        """
        return self._display_devices

    @display_devices.setter
    def display_devices(self, display_devices):
        """Sets the display_devices of this GoogleChromeManagementV1GraphicsInfo.

        Output only. Information about the display(s) of the device.

        :param display_devices: The display_devices of this GoogleChromeManagementV1GraphicsInfo.
        :type display_devices: List[GoogleChromeManagementV1DisplayDevice]
        """

        self._display_devices = display_devices

    @property
    def eprivacy_supported(self):
        """Gets the eprivacy_supported of this GoogleChromeManagementV1GraphicsInfo.

        Output only. Is ePrivacy screen supported or not.

        :return: The eprivacy_supported of this GoogleChromeManagementV1GraphicsInfo.
        :rtype: bool
        """
        return self._eprivacy_supported

    @eprivacy_supported.setter
    def eprivacy_supported(self, eprivacy_supported):
        """Sets the eprivacy_supported of this GoogleChromeManagementV1GraphicsInfo.

        Output only. Is ePrivacy screen supported or not.

        :param eprivacy_supported: The eprivacy_supported of this GoogleChromeManagementV1GraphicsInfo.
        :type eprivacy_supported: bool
        """

        self._eprivacy_supported = eprivacy_supported

    @property
    def touch_screen_info(self):
        """Gets the touch_screen_info of this GoogleChromeManagementV1GraphicsInfo.


        :return: The touch_screen_info of this GoogleChromeManagementV1GraphicsInfo.
        :rtype: GoogleChromeManagementV1TouchScreenInfo
        """
        return self._touch_screen_info

    @touch_screen_info.setter
    def touch_screen_info(self, touch_screen_info):
        """Sets the touch_screen_info of this GoogleChromeManagementV1GraphicsInfo.


        :param touch_screen_info: The touch_screen_info of this GoogleChromeManagementV1GraphicsInfo.
        :type touch_screen_info: GoogleChromeManagementV1TouchScreenInfo
        """

        self._touch_screen_info = touch_screen_info
