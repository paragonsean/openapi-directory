# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleChromeManagementV1HttpsLatencyRoutineData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, latency: str=None, problem: str=None):
        """GoogleChromeManagementV1HttpsLatencyRoutineData - a model defined in OpenAPI

        :param latency: The latency of this GoogleChromeManagementV1HttpsLatencyRoutineData.
        :param problem: The problem of this GoogleChromeManagementV1HttpsLatencyRoutineData.
        """
        self.openapi_types = {
            'latency': str,
            'problem': str
        }

        self.attribute_map = {
            'latency': 'latency',
            'problem': 'problem'
        }

        self._latency = latency
        self._problem = problem

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromeManagementV1HttpsLatencyRoutineData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromeManagementV1HttpsLatencyRoutineData of this GoogleChromeManagementV1HttpsLatencyRoutineData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def latency(self):
        """Gets the latency of this GoogleChromeManagementV1HttpsLatencyRoutineData.

        Output only. HTTPS latency if routine succeeded or failed because of HIGH_LATENCY or VERY_HIGH_LATENCY.

        :return: The latency of this GoogleChromeManagementV1HttpsLatencyRoutineData.
        :rtype: str
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this GoogleChromeManagementV1HttpsLatencyRoutineData.

        Output only. HTTPS latency if routine succeeded or failed because of HIGH_LATENCY or VERY_HIGH_LATENCY.

        :param latency: The latency of this GoogleChromeManagementV1HttpsLatencyRoutineData.
        :type latency: str
        """

        self._latency = latency

    @property
    def problem(self):
        """Gets the problem of this GoogleChromeManagementV1HttpsLatencyRoutineData.

        Output only. HTTPS latency routine problem if a problem occurred.

        :return: The problem of this GoogleChromeManagementV1HttpsLatencyRoutineData.
        :rtype: str
        """
        return self._problem

    @problem.setter
    def problem(self, problem):
        """Sets the problem of this GoogleChromeManagementV1HttpsLatencyRoutineData.

        Output only. HTTPS latency routine problem if a problem occurred.

        :param problem: The problem of this GoogleChromeManagementV1HttpsLatencyRoutineData.
        :type problem: str
        """
        allowed_values = ["HTTPS_LATENCY_PROBLEM_UNSPECIFIED", "FAILED_DNS_RESOLUTIONS", "FAILED_HTTPS_REQUESTS", "HIGH_LATENCY", "VERY_HIGH_LATENCY"]  # noqa: E501
        if problem not in allowed_values:
            raise ValueError(
                "Invalid value for `problem` ({0}), must be one of {1}"
                .format(problem, allowed_values)
            )

        self._problem = problem
