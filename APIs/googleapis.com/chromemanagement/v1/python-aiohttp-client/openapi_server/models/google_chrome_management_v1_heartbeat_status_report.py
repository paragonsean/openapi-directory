# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleChromeManagementV1HeartbeatStatusReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, report_time: str=None, state: str=None):
        """GoogleChromeManagementV1HeartbeatStatusReport - a model defined in OpenAPI

        :param report_time: The report_time of this GoogleChromeManagementV1HeartbeatStatusReport.
        :param state: The state of this GoogleChromeManagementV1HeartbeatStatusReport.
        """
        self.openapi_types = {
            'report_time': str,
            'state': str
        }

        self.attribute_map = {
            'report_time': 'reportTime',
            'state': 'state'
        }

        self._report_time = report_time
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromeManagementV1HeartbeatStatusReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromeManagementV1HeartbeatStatusReport of this GoogleChromeManagementV1HeartbeatStatusReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report_time(self):
        """Gets the report_time of this GoogleChromeManagementV1HeartbeatStatusReport.

        Timestamp of when status changed was detected

        :return: The report_time of this GoogleChromeManagementV1HeartbeatStatusReport.
        :rtype: str
        """
        return self._report_time

    @report_time.setter
    def report_time(self, report_time):
        """Sets the report_time of this GoogleChromeManagementV1HeartbeatStatusReport.

        Timestamp of when status changed was detected

        :param report_time: The report_time of this GoogleChromeManagementV1HeartbeatStatusReport.
        :type report_time: str
        """

        self._report_time = report_time

    @property
    def state(self):
        """Gets the state of this GoogleChromeManagementV1HeartbeatStatusReport.

        State the device changed to

        :return: The state of this GoogleChromeManagementV1HeartbeatStatusReport.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleChromeManagementV1HeartbeatStatusReport.

        State the device changed to

        :param state: The state of this GoogleChromeManagementV1HeartbeatStatusReport.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "UNKNOWN", "ONLINE", "OFFLINE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
