# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleChromeManagementV1TelemetryEventNotificationFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_types: List[str]=None):
        """GoogleChromeManagementV1TelemetryEventNotificationFilter - a model defined in OpenAPI

        :param event_types: The event_types of this GoogleChromeManagementV1TelemetryEventNotificationFilter.
        """
        self.openapi_types = {
            'event_types': List[str]
        }

        self.attribute_map = {
            'event_types': 'eventTypes'
        }

        self._event_types = event_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromeManagementV1TelemetryEventNotificationFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromeManagementV1TelemetryEventNotificationFilter of this GoogleChromeManagementV1TelemetryEventNotificationFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_types(self):
        """Gets the event_types of this GoogleChromeManagementV1TelemetryEventNotificationFilter.

        Only sends the notifications for events of these types. Must not be empty.

        :return: The event_types of this GoogleChromeManagementV1TelemetryEventNotificationFilter.
        :rtype: List[str]
        """
        return self._event_types

    @event_types.setter
    def event_types(self, event_types):
        """Sets the event_types of this GoogleChromeManagementV1TelemetryEventNotificationFilter.

        Only sends the notifications for events of these types. Must not be empty.

        :param event_types: The event_types of this GoogleChromeManagementV1TelemetryEventNotificationFilter.
        :type event_types: List[str]
        """
        allowed_values = ["EVENT_TYPE_UNSPECIFIED", "AUDIO_SEVERE_UNDERRUN", "NETWORK_STATE_CHANGE", "USB_ADDED", "USB_REMOVED", "NETWORK_HTTPS_LATENCY_CHANGE", "WIFI_SIGNAL_STRENGTH_LOW", "WIFI_SIGNAL_STRENGTH_RECOVERED", "VPN_CONNECTION_STATE_CHANGE"]  # noqa: E501
        if not set(event_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `event_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(event_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._event_types = event_types
