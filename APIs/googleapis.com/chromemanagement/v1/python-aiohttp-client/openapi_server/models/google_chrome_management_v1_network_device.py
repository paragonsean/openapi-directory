# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleChromeManagementV1NetworkDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, iccid: str=None, imei: str=None, mac_address: str=None, mdn: str=None, meid: str=None, type: str=None):
        """GoogleChromeManagementV1NetworkDevice - a model defined in OpenAPI

        :param iccid: The iccid of this GoogleChromeManagementV1NetworkDevice.
        :param imei: The imei of this GoogleChromeManagementV1NetworkDevice.
        :param mac_address: The mac_address of this GoogleChromeManagementV1NetworkDevice.
        :param mdn: The mdn of this GoogleChromeManagementV1NetworkDevice.
        :param meid: The meid of this GoogleChromeManagementV1NetworkDevice.
        :param type: The type of this GoogleChromeManagementV1NetworkDevice.
        """
        self.openapi_types = {
            'iccid': str,
            'imei': str,
            'mac_address': str,
            'mdn': str,
            'meid': str,
            'type': str
        }

        self.attribute_map = {
            'iccid': 'iccid',
            'imei': 'imei',
            'mac_address': 'macAddress',
            'mdn': 'mdn',
            'meid': 'meid',
            'type': 'type'
        }

        self._iccid = iccid
        self._imei = imei
        self._mac_address = mac_address
        self._mdn = mdn
        self._meid = meid
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromeManagementV1NetworkDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromeManagementV1NetworkDevice of this GoogleChromeManagementV1NetworkDevice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def iccid(self):
        """Gets the iccid of this GoogleChromeManagementV1NetworkDevice.

        Output only. The integrated circuit card ID associated with the device's sim card.

        :return: The iccid of this GoogleChromeManagementV1NetworkDevice.
        :rtype: str
        """
        return self._iccid

    @iccid.setter
    def iccid(self, iccid):
        """Sets the iccid of this GoogleChromeManagementV1NetworkDevice.

        Output only. The integrated circuit card ID associated with the device's sim card.

        :param iccid: The iccid of this GoogleChromeManagementV1NetworkDevice.
        :type iccid: str
        """

        self._iccid = iccid

    @property
    def imei(self):
        """Gets the imei of this GoogleChromeManagementV1NetworkDevice.

        Output only. IMEI (if applicable) of the corresponding network device.

        :return: The imei of this GoogleChromeManagementV1NetworkDevice.
        :rtype: str
        """
        return self._imei

    @imei.setter
    def imei(self, imei):
        """Sets the imei of this GoogleChromeManagementV1NetworkDevice.

        Output only. IMEI (if applicable) of the corresponding network device.

        :param imei: The imei of this GoogleChromeManagementV1NetworkDevice.
        :type imei: str
        """

        self._imei = imei

    @property
    def mac_address(self):
        """Gets the mac_address of this GoogleChromeManagementV1NetworkDevice.

        Output only. MAC address (if applicable) of the corresponding network device.

        :return: The mac_address of this GoogleChromeManagementV1NetworkDevice.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this GoogleChromeManagementV1NetworkDevice.

        Output only. MAC address (if applicable) of the corresponding network device.

        :param mac_address: The mac_address of this GoogleChromeManagementV1NetworkDevice.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def mdn(self):
        """Gets the mdn of this GoogleChromeManagementV1NetworkDevice.

        Output only. The mobile directory number associated with the device's sim card.

        :return: The mdn of this GoogleChromeManagementV1NetworkDevice.
        :rtype: str
        """
        return self._mdn

    @mdn.setter
    def mdn(self, mdn):
        """Sets the mdn of this GoogleChromeManagementV1NetworkDevice.

        Output only. The mobile directory number associated with the device's sim card.

        :param mdn: The mdn of this GoogleChromeManagementV1NetworkDevice.
        :type mdn: str
        """

        self._mdn = mdn

    @property
    def meid(self):
        """Gets the meid of this GoogleChromeManagementV1NetworkDevice.

        Output only. MEID (if applicable) of the corresponding network device.

        :return: The meid of this GoogleChromeManagementV1NetworkDevice.
        :rtype: str
        """
        return self._meid

    @meid.setter
    def meid(self, meid):
        """Sets the meid of this GoogleChromeManagementV1NetworkDevice.

        Output only. MEID (if applicable) of the corresponding network device.

        :param meid: The meid of this GoogleChromeManagementV1NetworkDevice.
        :type meid: str
        """

        self._meid = meid

    @property
    def type(self):
        """Gets the type of this GoogleChromeManagementV1NetworkDevice.

        Output only. Network device type.

        :return: The type of this GoogleChromeManagementV1NetworkDevice.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleChromeManagementV1NetworkDevice.

        Output only. Network device type.

        :param type: The type of this GoogleChromeManagementV1NetworkDevice.
        :type type: str
        """
        allowed_values = ["NETWORK_DEVICE_TYPE_UNSPECIFIED", "CELLULAR_DEVICE", "ETHERNET_DEVICE", "WIFI_DEVICE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
