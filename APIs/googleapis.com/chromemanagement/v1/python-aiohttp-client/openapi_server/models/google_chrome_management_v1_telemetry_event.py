# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_chrome_management_v1_telemetry_device_info import GoogleChromeManagementV1TelemetryDeviceInfo
from openapi_server.models.google_chrome_management_v1_telemetry_https_latency_change_event import GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent
from openapi_server.models.google_chrome_management_v1_telemetry_network_connection_state_change_event import GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent
from openapi_server.models.google_chrome_management_v1_telemetry_network_signal_strength_event import GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent
from openapi_server.models.google_chrome_management_v1_telemetry_usb_peripherals_event import GoogleChromeManagementV1TelemetryUsbPeripheralsEvent
from openapi_server.models.google_chrome_management_v1_telemetry_user_info import GoogleChromeManagementV1TelemetryUserInfo
from openapi_server import util


class GoogleChromeManagementV1TelemetryEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_severe_underrun_event: object=None, device: GoogleChromeManagementV1TelemetryDeviceInfo=None, event_type: str=None, https_latency_change_event: GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent=None, name: str=None, network_state_change_event: GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent=None, report_time: str=None, usb_peripherals_event: GoogleChromeManagementV1TelemetryUsbPeripheralsEvent=None, user: GoogleChromeManagementV1TelemetryUserInfo=None, vpn_connection_state_change_event: GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent=None, wifi_signal_strength_event: GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent=None):
        """GoogleChromeManagementV1TelemetryEvent - a model defined in OpenAPI

        :param audio_severe_underrun_event: The audio_severe_underrun_event of this GoogleChromeManagementV1TelemetryEvent.
        :param device: The device of this GoogleChromeManagementV1TelemetryEvent.
        :param event_type: The event_type of this GoogleChromeManagementV1TelemetryEvent.
        :param https_latency_change_event: The https_latency_change_event of this GoogleChromeManagementV1TelemetryEvent.
        :param name: The name of this GoogleChromeManagementV1TelemetryEvent.
        :param network_state_change_event: The network_state_change_event of this GoogleChromeManagementV1TelemetryEvent.
        :param report_time: The report_time of this GoogleChromeManagementV1TelemetryEvent.
        :param usb_peripherals_event: The usb_peripherals_event of this GoogleChromeManagementV1TelemetryEvent.
        :param user: The user of this GoogleChromeManagementV1TelemetryEvent.
        :param vpn_connection_state_change_event: The vpn_connection_state_change_event of this GoogleChromeManagementV1TelemetryEvent.
        :param wifi_signal_strength_event: The wifi_signal_strength_event of this GoogleChromeManagementV1TelemetryEvent.
        """
        self.openapi_types = {
            'audio_severe_underrun_event': object,
            'device': GoogleChromeManagementV1TelemetryDeviceInfo,
            'event_type': str,
            'https_latency_change_event': GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent,
            'name': str,
            'network_state_change_event': GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent,
            'report_time': str,
            'usb_peripherals_event': GoogleChromeManagementV1TelemetryUsbPeripheralsEvent,
            'user': GoogleChromeManagementV1TelemetryUserInfo,
            'vpn_connection_state_change_event': GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent,
            'wifi_signal_strength_event': GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent
        }

        self.attribute_map = {
            'audio_severe_underrun_event': 'audioSevereUnderrunEvent',
            'device': 'device',
            'event_type': 'eventType',
            'https_latency_change_event': 'httpsLatencyChangeEvent',
            'name': 'name',
            'network_state_change_event': 'networkStateChangeEvent',
            'report_time': 'reportTime',
            'usb_peripherals_event': 'usbPeripheralsEvent',
            'user': 'user',
            'vpn_connection_state_change_event': 'vpnConnectionStateChangeEvent',
            'wifi_signal_strength_event': 'wifiSignalStrengthEvent'
        }

        self._audio_severe_underrun_event = audio_severe_underrun_event
        self._device = device
        self._event_type = event_type
        self._https_latency_change_event = https_latency_change_event
        self._name = name
        self._network_state_change_event = network_state_change_event
        self._report_time = report_time
        self._usb_peripherals_event = usb_peripherals_event
        self._user = user
        self._vpn_connection_state_change_event = vpn_connection_state_change_event
        self._wifi_signal_strength_event = wifi_signal_strength_event

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromeManagementV1TelemetryEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromeManagementV1TelemetryEvent of this GoogleChromeManagementV1TelemetryEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_severe_underrun_event(self):
        """Gets the audio_severe_underrun_event of this GoogleChromeManagementV1TelemetryEvent.

        `TelemetryAudioSevereUnderrunEvent` is triggered when a audio devices run out of buffer data for more than 5 seconds. * Granular permission needed: TELEMETRY_API_AUDIO_REPORT

        :return: The audio_severe_underrun_event of this GoogleChromeManagementV1TelemetryEvent.
        :rtype: object
        """
        return self._audio_severe_underrun_event

    @audio_severe_underrun_event.setter
    def audio_severe_underrun_event(self, audio_severe_underrun_event):
        """Sets the audio_severe_underrun_event of this GoogleChromeManagementV1TelemetryEvent.

        `TelemetryAudioSevereUnderrunEvent` is triggered when a audio devices run out of buffer data for more than 5 seconds. * Granular permission needed: TELEMETRY_API_AUDIO_REPORT

        :param audio_severe_underrun_event: The audio_severe_underrun_event of this GoogleChromeManagementV1TelemetryEvent.
        :type audio_severe_underrun_event: object
        """

        self._audio_severe_underrun_event = audio_severe_underrun_event

    @property
    def device(self):
        """Gets the device of this GoogleChromeManagementV1TelemetryEvent.


        :return: The device of this GoogleChromeManagementV1TelemetryEvent.
        :rtype: GoogleChromeManagementV1TelemetryDeviceInfo
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this GoogleChromeManagementV1TelemetryEvent.


        :param device: The device of this GoogleChromeManagementV1TelemetryEvent.
        :type device: GoogleChromeManagementV1TelemetryDeviceInfo
        """

        self._device = device

    @property
    def event_type(self):
        """Gets the event_type of this GoogleChromeManagementV1TelemetryEvent.

        The event type of the current event.

        :return: The event_type of this GoogleChromeManagementV1TelemetryEvent.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this GoogleChromeManagementV1TelemetryEvent.

        The event type of the current event.

        :param event_type: The event_type of this GoogleChromeManagementV1TelemetryEvent.
        :type event_type: str
        """
        allowed_values = ["EVENT_TYPE_UNSPECIFIED", "AUDIO_SEVERE_UNDERRUN", "NETWORK_STATE_CHANGE", "USB_ADDED", "USB_REMOVED", "NETWORK_HTTPS_LATENCY_CHANGE", "WIFI_SIGNAL_STRENGTH_LOW", "WIFI_SIGNAL_STRENGTH_RECOVERED", "VPN_CONNECTION_STATE_CHANGE"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def https_latency_change_event(self):
        """Gets the https_latency_change_event of this GoogleChromeManagementV1TelemetryEvent.


        :return: The https_latency_change_event of this GoogleChromeManagementV1TelemetryEvent.
        :rtype: GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent
        """
        return self._https_latency_change_event

    @https_latency_change_event.setter
    def https_latency_change_event(self, https_latency_change_event):
        """Sets the https_latency_change_event of this GoogleChromeManagementV1TelemetryEvent.


        :param https_latency_change_event: The https_latency_change_event of this GoogleChromeManagementV1TelemetryEvent.
        :type https_latency_change_event: GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent
        """

        self._https_latency_change_event = https_latency_change_event

    @property
    def name(self):
        """Gets the name of this GoogleChromeManagementV1TelemetryEvent.

        Output only. Resource name of the event.

        :return: The name of this GoogleChromeManagementV1TelemetryEvent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleChromeManagementV1TelemetryEvent.

        Output only. Resource name of the event.

        :param name: The name of this GoogleChromeManagementV1TelemetryEvent.
        :type name: str
        """

        self._name = name

    @property
    def network_state_change_event(self):
        """Gets the network_state_change_event of this GoogleChromeManagementV1TelemetryEvent.


        :return: The network_state_change_event of this GoogleChromeManagementV1TelemetryEvent.
        :rtype: GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent
        """
        return self._network_state_change_event

    @network_state_change_event.setter
    def network_state_change_event(self, network_state_change_event):
        """Sets the network_state_change_event of this GoogleChromeManagementV1TelemetryEvent.


        :param network_state_change_event: The network_state_change_event of this GoogleChromeManagementV1TelemetryEvent.
        :type network_state_change_event: GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent
        """

        self._network_state_change_event = network_state_change_event

    @property
    def report_time(self):
        """Gets the report_time of this GoogleChromeManagementV1TelemetryEvent.

        Timestamp that represents when the event was reported.

        :return: The report_time of this GoogleChromeManagementV1TelemetryEvent.
        :rtype: str
        """
        return self._report_time

    @report_time.setter
    def report_time(self, report_time):
        """Sets the report_time of this GoogleChromeManagementV1TelemetryEvent.

        Timestamp that represents when the event was reported.

        :param report_time: The report_time of this GoogleChromeManagementV1TelemetryEvent.
        :type report_time: str
        """

        self._report_time = report_time

    @property
    def usb_peripherals_event(self):
        """Gets the usb_peripherals_event of this GoogleChromeManagementV1TelemetryEvent.


        :return: The usb_peripherals_event of this GoogleChromeManagementV1TelemetryEvent.
        :rtype: GoogleChromeManagementV1TelemetryUsbPeripheralsEvent
        """
        return self._usb_peripherals_event

    @usb_peripherals_event.setter
    def usb_peripherals_event(self, usb_peripherals_event):
        """Sets the usb_peripherals_event of this GoogleChromeManagementV1TelemetryEvent.


        :param usb_peripherals_event: The usb_peripherals_event of this GoogleChromeManagementV1TelemetryEvent.
        :type usb_peripherals_event: GoogleChromeManagementV1TelemetryUsbPeripheralsEvent
        """

        self._usb_peripherals_event = usb_peripherals_event

    @property
    def user(self):
        """Gets the user of this GoogleChromeManagementV1TelemetryEvent.


        :return: The user of this GoogleChromeManagementV1TelemetryEvent.
        :rtype: GoogleChromeManagementV1TelemetryUserInfo
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this GoogleChromeManagementV1TelemetryEvent.


        :param user: The user of this GoogleChromeManagementV1TelemetryEvent.
        :type user: GoogleChromeManagementV1TelemetryUserInfo
        """

        self._user = user

    @property
    def vpn_connection_state_change_event(self):
        """Gets the vpn_connection_state_change_event of this GoogleChromeManagementV1TelemetryEvent.


        :return: The vpn_connection_state_change_event of this GoogleChromeManagementV1TelemetryEvent.
        :rtype: GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent
        """
        return self._vpn_connection_state_change_event

    @vpn_connection_state_change_event.setter
    def vpn_connection_state_change_event(self, vpn_connection_state_change_event):
        """Sets the vpn_connection_state_change_event of this GoogleChromeManagementV1TelemetryEvent.


        :param vpn_connection_state_change_event: The vpn_connection_state_change_event of this GoogleChromeManagementV1TelemetryEvent.
        :type vpn_connection_state_change_event: GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent
        """

        self._vpn_connection_state_change_event = vpn_connection_state_change_event

    @property
    def wifi_signal_strength_event(self):
        """Gets the wifi_signal_strength_event of this GoogleChromeManagementV1TelemetryEvent.


        :return: The wifi_signal_strength_event of this GoogleChromeManagementV1TelemetryEvent.
        :rtype: GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent
        """
        return self._wifi_signal_strength_event

    @wifi_signal_strength_event.setter
    def wifi_signal_strength_event(self, wifi_signal_strength_event):
        """Sets the wifi_signal_strength_event of this GoogleChromeManagementV1TelemetryEvent.


        :param wifi_signal_strength_event: The wifi_signal_strength_event of this GoogleChromeManagementV1TelemetryEvent.
        :type wifi_signal_strength_event: GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent
        """

        self._wifi_signal_strength_event = wifi_signal_strength_event
