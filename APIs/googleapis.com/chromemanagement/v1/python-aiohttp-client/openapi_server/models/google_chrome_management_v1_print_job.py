# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleChromeManagementV1PrintJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color_mode: str=None, complete_time: str=None, copy_count: int=None, create_time: str=None, document_page_count: int=None, duplex_mode: str=None, id: str=None, printer: str=None, printer_id: str=None, state: str=None, title: str=None, user_email: str=None, user_id: str=None):
        """GoogleChromeManagementV1PrintJob - a model defined in OpenAPI

        :param color_mode: The color_mode of this GoogleChromeManagementV1PrintJob.
        :param complete_time: The complete_time of this GoogleChromeManagementV1PrintJob.
        :param copy_count: The copy_count of this GoogleChromeManagementV1PrintJob.
        :param create_time: The create_time of this GoogleChromeManagementV1PrintJob.
        :param document_page_count: The document_page_count of this GoogleChromeManagementV1PrintJob.
        :param duplex_mode: The duplex_mode of this GoogleChromeManagementV1PrintJob.
        :param id: The id of this GoogleChromeManagementV1PrintJob.
        :param printer: The printer of this GoogleChromeManagementV1PrintJob.
        :param printer_id: The printer_id of this GoogleChromeManagementV1PrintJob.
        :param state: The state of this GoogleChromeManagementV1PrintJob.
        :param title: The title of this GoogleChromeManagementV1PrintJob.
        :param user_email: The user_email of this GoogleChromeManagementV1PrintJob.
        :param user_id: The user_id of this GoogleChromeManagementV1PrintJob.
        """
        self.openapi_types = {
            'color_mode': str,
            'complete_time': str,
            'copy_count': int,
            'create_time': str,
            'document_page_count': int,
            'duplex_mode': str,
            'id': str,
            'printer': str,
            'printer_id': str,
            'state': str,
            'title': str,
            'user_email': str,
            'user_id': str
        }

        self.attribute_map = {
            'color_mode': 'colorMode',
            'complete_time': 'completeTime',
            'copy_count': 'copyCount',
            'create_time': 'createTime',
            'document_page_count': 'documentPageCount',
            'duplex_mode': 'duplexMode',
            'id': 'id',
            'printer': 'printer',
            'printer_id': 'printerId',
            'state': 'state',
            'title': 'title',
            'user_email': 'userEmail',
            'user_id': 'userId'
        }

        self._color_mode = color_mode
        self._complete_time = complete_time
        self._copy_count = copy_count
        self._create_time = create_time
        self._document_page_count = document_page_count
        self._duplex_mode = duplex_mode
        self._id = id
        self._printer = printer
        self._printer_id = printer_id
        self._state = state
        self._title = title
        self._user_email = user_email
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromeManagementV1PrintJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromeManagementV1PrintJob of this GoogleChromeManagementV1PrintJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color_mode(self):
        """Gets the color_mode of this GoogleChromeManagementV1PrintJob.

        Color mode.

        :return: The color_mode of this GoogleChromeManagementV1PrintJob.
        :rtype: str
        """
        return self._color_mode

    @color_mode.setter
    def color_mode(self, color_mode):
        """Sets the color_mode of this GoogleChromeManagementV1PrintJob.

        Color mode.

        :param color_mode: The color_mode of this GoogleChromeManagementV1PrintJob.
        :type color_mode: str
        """
        allowed_values = ["COLOR_MODE_UNSPECIFIED", "BLACK_AND_WHITE", "COLOR"]  # noqa: E501
        if color_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `color_mode` ({0}), must be one of {1}"
                .format(color_mode, allowed_values)
            )

        self._color_mode = color_mode

    @property
    def complete_time(self):
        """Gets the complete_time of this GoogleChromeManagementV1PrintJob.

        Print job completion timestamp.

        :return: The complete_time of this GoogleChromeManagementV1PrintJob.
        :rtype: str
        """
        return self._complete_time

    @complete_time.setter
    def complete_time(self, complete_time):
        """Sets the complete_time of this GoogleChromeManagementV1PrintJob.

        Print job completion timestamp.

        :param complete_time: The complete_time of this GoogleChromeManagementV1PrintJob.
        :type complete_time: str
        """

        self._complete_time = complete_time

    @property
    def copy_count(self):
        """Gets the copy_count of this GoogleChromeManagementV1PrintJob.

        Number of copies.

        :return: The copy_count of this GoogleChromeManagementV1PrintJob.
        :rtype: int
        """
        return self._copy_count

    @copy_count.setter
    def copy_count(self, copy_count):
        """Sets the copy_count of this GoogleChromeManagementV1PrintJob.

        Number of copies.

        :param copy_count: The copy_count of this GoogleChromeManagementV1PrintJob.
        :type copy_count: int
        """

        self._copy_count = copy_count

    @property
    def create_time(self):
        """Gets the create_time of this GoogleChromeManagementV1PrintJob.

        Print job creation timestamp.

        :return: The create_time of this GoogleChromeManagementV1PrintJob.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleChromeManagementV1PrintJob.

        Print job creation timestamp.

        :param create_time: The create_time of this GoogleChromeManagementV1PrintJob.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def document_page_count(self):
        """Gets the document_page_count of this GoogleChromeManagementV1PrintJob.

        Number of pages in the document.

        :return: The document_page_count of this GoogleChromeManagementV1PrintJob.
        :rtype: int
        """
        return self._document_page_count

    @document_page_count.setter
    def document_page_count(self, document_page_count):
        """Sets the document_page_count of this GoogleChromeManagementV1PrintJob.

        Number of pages in the document.

        :param document_page_count: The document_page_count of this GoogleChromeManagementV1PrintJob.
        :type document_page_count: int
        """

        self._document_page_count = document_page_count

    @property
    def duplex_mode(self):
        """Gets the duplex_mode of this GoogleChromeManagementV1PrintJob.

        Duplex mode.

        :return: The duplex_mode of this GoogleChromeManagementV1PrintJob.
        :rtype: str
        """
        return self._duplex_mode

    @duplex_mode.setter
    def duplex_mode(self, duplex_mode):
        """Sets the duplex_mode of this GoogleChromeManagementV1PrintJob.

        Duplex mode.

        :param duplex_mode: The duplex_mode of this GoogleChromeManagementV1PrintJob.
        :type duplex_mode: str
        """
        allowed_values = ["DUPLEX_MODE_UNSPECIFIED", "ONE_SIDED", "TWO_SIDED_LONG_EDGE", "TWO_SIDED_SHORT_EDGE"]  # noqa: E501
        if duplex_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `duplex_mode` ({0}), must be one of {1}"
                .format(duplex_mode, allowed_values)
            )

        self._duplex_mode = duplex_mode

    @property
    def id(self):
        """Gets the id of this GoogleChromeManagementV1PrintJob.

        Unique ID of the print job.

        :return: The id of this GoogleChromeManagementV1PrintJob.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GoogleChromeManagementV1PrintJob.

        Unique ID of the print job.

        :param id: The id of this GoogleChromeManagementV1PrintJob.
        :type id: str
        """

        self._id = id

    @property
    def printer(self):
        """Gets the printer of this GoogleChromeManagementV1PrintJob.

        Name of the printer used for printing.

        :return: The printer of this GoogleChromeManagementV1PrintJob.
        :rtype: str
        """
        return self._printer

    @printer.setter
    def printer(self, printer):
        """Sets the printer of this GoogleChromeManagementV1PrintJob.

        Name of the printer used for printing.

        :param printer: The printer of this GoogleChromeManagementV1PrintJob.
        :type printer: str
        """

        self._printer = printer

    @property
    def printer_id(self):
        """Gets the printer_id of this GoogleChromeManagementV1PrintJob.

        API ID of the printer used for printing.

        :return: The printer_id of this GoogleChromeManagementV1PrintJob.
        :rtype: str
        """
        return self._printer_id

    @printer_id.setter
    def printer_id(self, printer_id):
        """Sets the printer_id of this GoogleChromeManagementV1PrintJob.

        API ID of the printer used for printing.

        :param printer_id: The printer_id of this GoogleChromeManagementV1PrintJob.
        :type printer_id: str
        """

        self._printer_id = printer_id

    @property
    def state(self):
        """Gets the state of this GoogleChromeManagementV1PrintJob.

        The final state of the job.

        :return: The state of this GoogleChromeManagementV1PrintJob.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleChromeManagementV1PrintJob.

        The final state of the job.

        :param state: The state of this GoogleChromeManagementV1PrintJob.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PRINTED", "CANCELLED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def title(self):
        """Gets the title of this GoogleChromeManagementV1PrintJob.

        The title of the document.

        :return: The title of this GoogleChromeManagementV1PrintJob.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GoogleChromeManagementV1PrintJob.

        The title of the document.

        :param title: The title of this GoogleChromeManagementV1PrintJob.
        :type title: str
        """

        self._title = title

    @property
    def user_email(self):
        """Gets the user_email of this GoogleChromeManagementV1PrintJob.

        The primary e-mail address of the user who submitted the print job.

        :return: The user_email of this GoogleChromeManagementV1PrintJob.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this GoogleChromeManagementV1PrintJob.

        The primary e-mail address of the user who submitted the print job.

        :param user_email: The user_email of this GoogleChromeManagementV1PrintJob.
        :type user_email: str
        """

        self._user_email = user_email

    @property
    def user_id(self):
        """Gets the user_id of this GoogleChromeManagementV1PrintJob.

        The unique Directory API ID of the user who submitted the print job.

        :return: The user_id of this GoogleChromeManagementV1PrintJob.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GoogleChromeManagementV1PrintJob.

        The unique Directory API ID of the user who submitted the print job.

        :param user_id: The user_id of this GoogleChromeManagementV1PrintJob.
        :type user_id: str
        """

        self._user_id = user_id
