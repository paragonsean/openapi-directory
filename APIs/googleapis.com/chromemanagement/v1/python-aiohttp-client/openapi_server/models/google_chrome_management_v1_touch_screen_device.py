# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleChromeManagementV1TouchScreenDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, stylus_capable: bool=None, touch_point_count: int=None):
        """GoogleChromeManagementV1TouchScreenDevice - a model defined in OpenAPI

        :param display_name: The display_name of this GoogleChromeManagementV1TouchScreenDevice.
        :param stylus_capable: The stylus_capable of this GoogleChromeManagementV1TouchScreenDevice.
        :param touch_point_count: The touch_point_count of this GoogleChromeManagementV1TouchScreenDevice.
        """
        self.openapi_types = {
            'display_name': str,
            'stylus_capable': bool,
            'touch_point_count': int
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'stylus_capable': 'stylusCapable',
            'touch_point_count': 'touchPointCount'
        }

        self._display_name = display_name
        self._stylus_capable = stylus_capable
        self._touch_point_count = touch_point_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromeManagementV1TouchScreenDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromeManagementV1TouchScreenDevice of this GoogleChromeManagementV1TouchScreenDevice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this GoogleChromeManagementV1TouchScreenDevice.

        Output only. Touch screen device display name.

        :return: The display_name of this GoogleChromeManagementV1TouchScreenDevice.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleChromeManagementV1TouchScreenDevice.

        Output only. Touch screen device display name.

        :param display_name: The display_name of this GoogleChromeManagementV1TouchScreenDevice.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def stylus_capable(self):
        """Gets the stylus_capable of this GoogleChromeManagementV1TouchScreenDevice.

        Output only. Touch screen device is stylus capable or not.

        :return: The stylus_capable of this GoogleChromeManagementV1TouchScreenDevice.
        :rtype: bool
        """
        return self._stylus_capable

    @stylus_capable.setter
    def stylus_capable(self, stylus_capable):
        """Sets the stylus_capable of this GoogleChromeManagementV1TouchScreenDevice.

        Output only. Touch screen device is stylus capable or not.

        :param stylus_capable: The stylus_capable of this GoogleChromeManagementV1TouchScreenDevice.
        :type stylus_capable: bool
        """

        self._stylus_capable = stylus_capable

    @property
    def touch_point_count(self):
        """Gets the touch_point_count of this GoogleChromeManagementV1TouchScreenDevice.

        Output only. Number of touch points supported on the device.

        :return: The touch_point_count of this GoogleChromeManagementV1TouchScreenDevice.
        :rtype: int
        """
        return self._touch_point_count

    @touch_point_count.setter
    def touch_point_count(self, touch_point_count):
        """Sets the touch_point_count of this GoogleChromeManagementV1TouchScreenDevice.

        Output only. Number of touch points supported on the device.

        :param touch_point_count: The touch_point_count of this GoogleChromeManagementV1TouchScreenDevice.
        :type touch_point_count: int
        """

        self._touch_point_count = touch_point_count
