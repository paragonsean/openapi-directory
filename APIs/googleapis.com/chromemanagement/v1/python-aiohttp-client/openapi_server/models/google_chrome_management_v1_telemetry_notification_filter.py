# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_chrome_management_v1_telemetry_event_notification_filter import GoogleChromeManagementV1TelemetryEventNotificationFilter
from openapi_server import util


class GoogleChromeManagementV1TelemetryNotificationFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_id: str=None, device_org_unit_id: str=None, telemetry_event_notification_filter: GoogleChromeManagementV1TelemetryEventNotificationFilter=None, user_email: str=None, user_org_unit_id: str=None):
        """GoogleChromeManagementV1TelemetryNotificationFilter - a model defined in OpenAPI

        :param device_id: The device_id of this GoogleChromeManagementV1TelemetryNotificationFilter.
        :param device_org_unit_id: The device_org_unit_id of this GoogleChromeManagementV1TelemetryNotificationFilter.
        :param telemetry_event_notification_filter: The telemetry_event_notification_filter of this GoogleChromeManagementV1TelemetryNotificationFilter.
        :param user_email: The user_email of this GoogleChromeManagementV1TelemetryNotificationFilter.
        :param user_org_unit_id: The user_org_unit_id of this GoogleChromeManagementV1TelemetryNotificationFilter.
        """
        self.openapi_types = {
            'device_id': str,
            'device_org_unit_id': str,
            'telemetry_event_notification_filter': GoogleChromeManagementV1TelemetryEventNotificationFilter,
            'user_email': str,
            'user_org_unit_id': str
        }

        self.attribute_map = {
            'device_id': 'deviceId',
            'device_org_unit_id': 'deviceOrgUnitId',
            'telemetry_event_notification_filter': 'telemetryEventNotificationFilter',
            'user_email': 'userEmail',
            'user_org_unit_id': 'userOrgUnitId'
        }

        self._device_id = device_id
        self._device_org_unit_id = device_org_unit_id
        self._telemetry_event_notification_filter = telemetry_event_notification_filter
        self._user_email = user_email
        self._user_org_unit_id = user_org_unit_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromeManagementV1TelemetryNotificationFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromeManagementV1TelemetryNotificationFilter of this GoogleChromeManagementV1TelemetryNotificationFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_id(self):
        """Gets the device_id of this GoogleChromeManagementV1TelemetryNotificationFilter.

        If set, only sends notifications for telemetry data coming from this device.

        :return: The device_id of this GoogleChromeManagementV1TelemetryNotificationFilter.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this GoogleChromeManagementV1TelemetryNotificationFilter.

        If set, only sends notifications for telemetry data coming from this device.

        :param device_id: The device_id of this GoogleChromeManagementV1TelemetryNotificationFilter.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def device_org_unit_id(self):
        """Gets the device_org_unit_id of this GoogleChromeManagementV1TelemetryNotificationFilter.

        If set, only sends notifications for telemetry data coming from devices in this org unit.

        :return: The device_org_unit_id of this GoogleChromeManagementV1TelemetryNotificationFilter.
        :rtype: str
        """
        return self._device_org_unit_id

    @device_org_unit_id.setter
    def device_org_unit_id(self, device_org_unit_id):
        """Sets the device_org_unit_id of this GoogleChromeManagementV1TelemetryNotificationFilter.

        If set, only sends notifications for telemetry data coming from devices in this org unit.

        :param device_org_unit_id: The device_org_unit_id of this GoogleChromeManagementV1TelemetryNotificationFilter.
        :type device_org_unit_id: str
        """

        self._device_org_unit_id = device_org_unit_id

    @property
    def telemetry_event_notification_filter(self):
        """Gets the telemetry_event_notification_filter of this GoogleChromeManagementV1TelemetryNotificationFilter.


        :return: The telemetry_event_notification_filter of this GoogleChromeManagementV1TelemetryNotificationFilter.
        :rtype: GoogleChromeManagementV1TelemetryEventNotificationFilter
        """
        return self._telemetry_event_notification_filter

    @telemetry_event_notification_filter.setter
    def telemetry_event_notification_filter(self, telemetry_event_notification_filter):
        """Sets the telemetry_event_notification_filter of this GoogleChromeManagementV1TelemetryNotificationFilter.


        :param telemetry_event_notification_filter: The telemetry_event_notification_filter of this GoogleChromeManagementV1TelemetryNotificationFilter.
        :type telemetry_event_notification_filter: GoogleChromeManagementV1TelemetryEventNotificationFilter
        """

        self._telemetry_event_notification_filter = telemetry_event_notification_filter

    @property
    def user_email(self):
        """Gets the user_email of this GoogleChromeManagementV1TelemetryNotificationFilter.

        If set, only sends notifications for telemetry data coming from devices owned by this user.

        :return: The user_email of this GoogleChromeManagementV1TelemetryNotificationFilter.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this GoogleChromeManagementV1TelemetryNotificationFilter.

        If set, only sends notifications for telemetry data coming from devices owned by this user.

        :param user_email: The user_email of this GoogleChromeManagementV1TelemetryNotificationFilter.
        :type user_email: str
        """

        self._user_email = user_email

    @property
    def user_org_unit_id(self):
        """Gets the user_org_unit_id of this GoogleChromeManagementV1TelemetryNotificationFilter.

        If set, only sends notifications for telemetry data coming from devices owned by users in this org unit.

        :return: The user_org_unit_id of this GoogleChromeManagementV1TelemetryNotificationFilter.
        :rtype: str
        """
        return self._user_org_unit_id

    @user_org_unit_id.setter
    def user_org_unit_id(self, user_org_unit_id):
        """Sets the user_org_unit_id of this GoogleChromeManagementV1TelemetryNotificationFilter.

        If set, only sends notifications for telemetry data coming from devices owned by users in this org unit.

        :param user_org_unit_id: The user_org_unit_id of this GoogleChromeManagementV1TelemetryNotificationFilter.
        :type user_org_unit_id: str
        """

        self._user_org_unit_id = user_org_unit_id
