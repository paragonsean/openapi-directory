# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleChromeManagementV1CpuInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, architecture: str=None, keylocker_configured: bool=None, keylocker_supported: bool=None, max_clock_speed: int=None, model: str=None):
        """GoogleChromeManagementV1CpuInfo - a model defined in OpenAPI

        :param architecture: The architecture of this GoogleChromeManagementV1CpuInfo.
        :param keylocker_configured: The keylocker_configured of this GoogleChromeManagementV1CpuInfo.
        :param keylocker_supported: The keylocker_supported of this GoogleChromeManagementV1CpuInfo.
        :param max_clock_speed: The max_clock_speed of this GoogleChromeManagementV1CpuInfo.
        :param model: The model of this GoogleChromeManagementV1CpuInfo.
        """
        self.openapi_types = {
            'architecture': str,
            'keylocker_configured': bool,
            'keylocker_supported': bool,
            'max_clock_speed': int,
            'model': str
        }

        self.attribute_map = {
            'architecture': 'architecture',
            'keylocker_configured': 'keylockerConfigured',
            'keylocker_supported': 'keylockerSupported',
            'max_clock_speed': 'maxClockSpeed',
            'model': 'model'
        }

        self._architecture = architecture
        self._keylocker_configured = keylocker_configured
        self._keylocker_supported = keylocker_supported
        self._max_clock_speed = max_clock_speed
        self._model = model

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromeManagementV1CpuInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromeManagementV1CpuInfo of this GoogleChromeManagementV1CpuInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def architecture(self):
        """Gets the architecture of this GoogleChromeManagementV1CpuInfo.

        Output only. Architecture type for the CPU. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceCpuInfo](https://chromeenterprise.google/policies/#ReportDeviceCpuInfo) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A

        :return: The architecture of this GoogleChromeManagementV1CpuInfo.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this GoogleChromeManagementV1CpuInfo.

        Output only. Architecture type for the CPU. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceCpuInfo](https://chromeenterprise.google/policies/#ReportDeviceCpuInfo) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A

        :param architecture: The architecture of this GoogleChromeManagementV1CpuInfo.
        :type architecture: str
        """
        allowed_values = ["ARCHITECTURE_UNSPECIFIED", "X64"]  # noqa: E501
        if architecture not in allowed_values:
            raise ValueError(
                "Invalid value for `architecture` ({0}), must be one of {1}"
                .format(architecture, allowed_values)
            )

        self._architecture = architecture

    @property
    def keylocker_configured(self):
        """Gets the keylocker_configured of this GoogleChromeManagementV1CpuInfo.

        Output only. Whether keylocker is configured.`TRUE` = Enabled; `FALSE` = disabled. Only reported if keylockerSupported = `TRUE`.

        :return: The keylocker_configured of this GoogleChromeManagementV1CpuInfo.
        :rtype: bool
        """
        return self._keylocker_configured

    @keylocker_configured.setter
    def keylocker_configured(self, keylocker_configured):
        """Sets the keylocker_configured of this GoogleChromeManagementV1CpuInfo.

        Output only. Whether keylocker is configured.`TRUE` = Enabled; `FALSE` = disabled. Only reported if keylockerSupported = `TRUE`.

        :param keylocker_configured: The keylocker_configured of this GoogleChromeManagementV1CpuInfo.
        :type keylocker_configured: bool
        """

        self._keylocker_configured = keylocker_configured

    @property
    def keylocker_supported(self):
        """Gets the keylocker_supported of this GoogleChromeManagementV1CpuInfo.

        Output only. Whether keylocker is supported.

        :return: The keylocker_supported of this GoogleChromeManagementV1CpuInfo.
        :rtype: bool
        """
        return self._keylocker_supported

    @keylocker_supported.setter
    def keylocker_supported(self, keylocker_supported):
        """Sets the keylocker_supported of this GoogleChromeManagementV1CpuInfo.

        Output only. Whether keylocker is supported.

        :param keylocker_supported: The keylocker_supported of this GoogleChromeManagementV1CpuInfo.
        :type keylocker_supported: bool
        """

        self._keylocker_supported = keylocker_supported

    @property
    def max_clock_speed(self):
        """Gets the max_clock_speed of this GoogleChromeManagementV1CpuInfo.

        Output only. The max CPU clock speed in kHz.

        :return: The max_clock_speed of this GoogleChromeManagementV1CpuInfo.
        :rtype: int
        """
        return self._max_clock_speed

    @max_clock_speed.setter
    def max_clock_speed(self, max_clock_speed):
        """Sets the max_clock_speed of this GoogleChromeManagementV1CpuInfo.

        Output only. The max CPU clock speed in kHz.

        :param max_clock_speed: The max_clock_speed of this GoogleChromeManagementV1CpuInfo.
        :type max_clock_speed: int
        """

        self._max_clock_speed = max_clock_speed

    @property
    def model(self):
        """Gets the model of this GoogleChromeManagementV1CpuInfo.

        Output only. The CPU model name. Example: Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz

        :return: The model of this GoogleChromeManagementV1CpuInfo.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this GoogleChromeManagementV1CpuInfo.

        Output only. The CPU model name. Example: Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz

        :param model: The model of this GoogleChromeManagementV1CpuInfo.
        :type model: str
        """

        self._model = model
