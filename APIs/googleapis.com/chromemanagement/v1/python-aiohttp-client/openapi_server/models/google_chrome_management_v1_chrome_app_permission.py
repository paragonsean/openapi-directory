# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleChromeManagementV1ChromeAppPermission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_user_data: bool=None, documentation_uri: str=None, type: str=None):
        """GoogleChromeManagementV1ChromeAppPermission - a model defined in OpenAPI

        :param access_user_data: The access_user_data of this GoogleChromeManagementV1ChromeAppPermission.
        :param documentation_uri: The documentation_uri of this GoogleChromeManagementV1ChromeAppPermission.
        :param type: The type of this GoogleChromeManagementV1ChromeAppPermission.
        """
        self.openapi_types = {
            'access_user_data': bool,
            'documentation_uri': str,
            'type': str
        }

        self.attribute_map = {
            'access_user_data': 'accessUserData',
            'documentation_uri': 'documentationUri',
            'type': 'type'
        }

        self._access_user_data = access_user_data
        self._documentation_uri = documentation_uri
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleChromeManagementV1ChromeAppPermission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleChromeManagementV1ChromeAppPermission of this GoogleChromeManagementV1ChromeAppPermission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_user_data(self):
        """Gets the access_user_data of this GoogleChromeManagementV1ChromeAppPermission.

        Output only. If available, whether this permissions grants the app/extension access to user data.

        :return: The access_user_data of this GoogleChromeManagementV1ChromeAppPermission.
        :rtype: bool
        """
        return self._access_user_data

    @access_user_data.setter
    def access_user_data(self, access_user_data):
        """Sets the access_user_data of this GoogleChromeManagementV1ChromeAppPermission.

        Output only. If available, whether this permissions grants the app/extension access to user data.

        :param access_user_data: The access_user_data of this GoogleChromeManagementV1ChromeAppPermission.
        :type access_user_data: bool
        """

        self._access_user_data = access_user_data

    @property
    def documentation_uri(self):
        """Gets the documentation_uri of this GoogleChromeManagementV1ChromeAppPermission.

        Output only. If available, a URI to a page that has documentation for the current permission.

        :return: The documentation_uri of this GoogleChromeManagementV1ChromeAppPermission.
        :rtype: str
        """
        return self._documentation_uri

    @documentation_uri.setter
    def documentation_uri(self, documentation_uri):
        """Sets the documentation_uri of this GoogleChromeManagementV1ChromeAppPermission.

        Output only. If available, a URI to a page that has documentation for the current permission.

        :param documentation_uri: The documentation_uri of this GoogleChromeManagementV1ChromeAppPermission.
        :type documentation_uri: str
        """

        self._documentation_uri = documentation_uri

    @property
    def type(self):
        """Gets the type of this GoogleChromeManagementV1ChromeAppPermission.

        Output only. The type of the permission.

        :return: The type of this GoogleChromeManagementV1ChromeAppPermission.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleChromeManagementV1ChromeAppPermission.

        Output only. The type of the permission.

        :param type: The type of this GoogleChromeManagementV1ChromeAppPermission.
        :type type: str
        """

        self._type = type
