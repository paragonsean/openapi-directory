/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata model module.
 * @module model/GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata
 * @version v1beta3
 */
class GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata {
    /**
     * Constructs a new <code>GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata</code>.
     * Metadata for global schema behavior.
     * @alias module:model/GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata
     */
    constructor() { 
        
        GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata} The populated <code>GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata();

            if (data.hasOwnProperty('documentAllowMultipleLabels')) {
                obj['documentAllowMultipleLabels'] = ApiClient.convertToType(data['documentAllowMultipleLabels'], 'Boolean');
            }
            if (data.hasOwnProperty('documentSplitter')) {
                obj['documentSplitter'] = ApiClient.convertToType(data['documentSplitter'], 'Boolean');
            }
            if (data.hasOwnProperty('prefixedNamingOnProperties')) {
                obj['prefixedNamingOnProperties'] = ApiClient.convertToType(data['prefixedNamingOnProperties'], 'Boolean');
            }
            if (data.hasOwnProperty('skipNamingValidation')) {
                obj['skipNamingValidation'] = ApiClient.convertToType(data['skipNamingValidation'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * If true, on a given page, there can be multiple `document` annotations covering it.
 * @member {Boolean} documentAllowMultipleLabels
 */
GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.prototype['documentAllowMultipleLabels'] = undefined;

/**
 * If true, a `document` entity type can be applied to subdocument (splitting). Otherwise, it can only be applied to the entire document (classification).
 * @member {Boolean} documentSplitter
 */
GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.prototype['documentSplitter'] = undefined;

/**
 * If set, all the nested entities must be prefixed with the parents.
 * @member {Boolean} prefixedNamingOnProperties
 */
GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.prototype['prefixedNamingOnProperties'] = undefined;

/**
 * If set, we will skip the naming format validation in the schema. So the string values in `DocumentSchema.EntityType.name` and `DocumentSchema.EntityType.Property.name` will not be checked.
 * @member {Boolean} skipNamingValidation
 */
GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.prototype['skipNamingValidation'] = undefined;






export default GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata;

