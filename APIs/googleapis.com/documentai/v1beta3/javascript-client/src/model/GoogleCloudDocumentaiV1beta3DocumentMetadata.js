/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDocumentaiV1beta3DocumentId from './GoogleCloudDocumentaiV1beta3DocumentId';

/**
 * The GoogleCloudDocumentaiV1beta3DocumentMetadata model module.
 * @module model/GoogleCloudDocumentaiV1beta3DocumentMetadata
 * @version v1beta3
 */
class GoogleCloudDocumentaiV1beta3DocumentMetadata {
    /**
     * Constructs a new <code>GoogleCloudDocumentaiV1beta3DocumentMetadata</code>.
     * Metadata about a document.
     * @alias module:model/GoogleCloudDocumentaiV1beta3DocumentMetadata
     */
    constructor() { 
        
        GoogleCloudDocumentaiV1beta3DocumentMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDocumentaiV1beta3DocumentMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDocumentaiV1beta3DocumentMetadata} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDocumentaiV1beta3DocumentMetadata} The populated <code>GoogleCloudDocumentaiV1beta3DocumentMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDocumentaiV1beta3DocumentMetadata();

            if (data.hasOwnProperty('datasetType')) {
                obj['datasetType'] = ApiClient.convertToType(data['datasetType'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('documentId')) {
                obj['documentId'] = GoogleCloudDocumentaiV1beta3DocumentId.constructFromObject(data['documentId']);
            }
            if (data.hasOwnProperty('labelingState')) {
                obj['labelingState'] = ApiClient.convertToType(data['labelingState'], 'String');
            }
            if (data.hasOwnProperty('pageCount')) {
                obj['pageCount'] = ApiClient.convertToType(data['pageCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDocumentaiV1beta3DocumentMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDocumentaiV1beta3DocumentMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['datasetType'] && !(typeof data['datasetType'] === 'string' || data['datasetType'] instanceof String)) {
            throw new Error("Expected the field `datasetType` to be a primitive type in the JSON string but got " + data['datasetType']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `documentId`
        if (data['documentId']) { // data not null
          GoogleCloudDocumentaiV1beta3DocumentId.validateJSON(data['documentId']);
        }
        // ensure the json data is a string
        if (data['labelingState'] && !(typeof data['labelingState'] === 'string' || data['labelingState'] instanceof String)) {
            throw new Error("Expected the field `labelingState` to be a primitive type in the JSON string but got " + data['labelingState']);
        }

        return true;
    }


}



/**
 * Type of the dataset split to which the document belongs.
 * @member {module:model/GoogleCloudDocumentaiV1beta3DocumentMetadata.DatasetTypeEnum} datasetType
 */
GoogleCloudDocumentaiV1beta3DocumentMetadata.prototype['datasetType'] = undefined;

/**
 * The display name of the document.
 * @member {String} displayName
 */
GoogleCloudDocumentaiV1beta3DocumentMetadata.prototype['displayName'] = undefined;

/**
 * @member {module:model/GoogleCloudDocumentaiV1beta3DocumentId} documentId
 */
GoogleCloudDocumentaiV1beta3DocumentMetadata.prototype['documentId'] = undefined;

/**
 * Labeling state of the document.
 * @member {module:model/GoogleCloudDocumentaiV1beta3DocumentMetadata.LabelingStateEnum} labelingState
 */
GoogleCloudDocumentaiV1beta3DocumentMetadata.prototype['labelingState'] = undefined;

/**
 * Number of pages in the document.
 * @member {Number} pageCount
 */
GoogleCloudDocumentaiV1beta3DocumentMetadata.prototype['pageCount'] = undefined;





/**
 * Allowed values for the <code>datasetType</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDocumentaiV1beta3DocumentMetadata['DatasetTypeEnum'] = {

    /**
     * value: "DATASET_SPLIT_TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "DATASET_SPLIT_TYPE_UNSPECIFIED",

    /**
     * value: "DATASET_SPLIT_TRAIN"
     * @const
     */
    "TRAIN": "DATASET_SPLIT_TRAIN",

    /**
     * value: "DATASET_SPLIT_TEST"
     * @const
     */
    "TEST": "DATASET_SPLIT_TEST",

    /**
     * value: "DATASET_SPLIT_UNASSIGNED"
     * @const
     */
    "UNASSIGNED": "DATASET_SPLIT_UNASSIGNED"
};


/**
 * Allowed values for the <code>labelingState</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDocumentaiV1beta3DocumentMetadata['LabelingStateEnum'] = {

    /**
     * value: "DOCUMENT_LABELING_STATE_UNSPECIFIED"
     * @const
     */
    "LABELING_STATE_UNSPECIFIED": "DOCUMENT_LABELING_STATE_UNSPECIFIED",

    /**
     * value: "DOCUMENT_LABELED"
     * @const
     */
    "LABELED": "DOCUMENT_LABELED",

    /**
     * value: "DOCUMENT_UNLABELED"
     * @const
     */
    "UNLABELED": "DOCUMENT_UNLABELED",

    /**
     * value: "DOCUMENT_AUTO_LABELED"
     * @const
     */
    "AUTO_LABELED": "DOCUMENT_AUTO_LABELED"
};



export default GoogleCloudDocumentaiV1beta3DocumentMetadata;

