/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDocumentaiV1beta2DocumentEntity from './GoogleCloudDocumentaiV1beta2DocumentEntity';
import GoogleCloudDocumentaiV1beta2DocumentEntityRelation from './GoogleCloudDocumentaiV1beta2DocumentEntityRelation';
import GoogleCloudDocumentaiV1beta2DocumentLabel from './GoogleCloudDocumentaiV1beta2DocumentLabel';
import GoogleCloudDocumentaiV1beta2DocumentPage from './GoogleCloudDocumentaiV1beta2DocumentPage';
import GoogleCloudDocumentaiV1beta2DocumentRevision from './GoogleCloudDocumentaiV1beta2DocumentRevision';
import GoogleCloudDocumentaiV1beta2DocumentShardInfo from './GoogleCloudDocumentaiV1beta2DocumentShardInfo';
import GoogleCloudDocumentaiV1beta2DocumentStyle from './GoogleCloudDocumentaiV1beta2DocumentStyle';
import GoogleCloudDocumentaiV1beta2DocumentTextChange from './GoogleCloudDocumentaiV1beta2DocumentTextChange';
import GoogleRpcStatus from './GoogleRpcStatus';

/**
 * The GoogleCloudDocumentaiV1beta2Document model module.
 * @module model/GoogleCloudDocumentaiV1beta2Document
 * @version v1beta3
 */
class GoogleCloudDocumentaiV1beta2Document {
    /**
     * Constructs a new <code>GoogleCloudDocumentaiV1beta2Document</code>.
     * Document represents the canonical document resource in Document AI. It is an interchange format that provides insights into documents and allows for collaboration between users and Document AI to iterate and optimize for quality.
     * @alias module:model/GoogleCloudDocumentaiV1beta2Document
     */
    constructor() { 
        
        GoogleCloudDocumentaiV1beta2Document.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDocumentaiV1beta2Document</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDocumentaiV1beta2Document} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDocumentaiV1beta2Document} The populated <code>GoogleCloudDocumentaiV1beta2Document</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDocumentaiV1beta2Document();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'Blob');
            }
            if (data.hasOwnProperty('entities')) {
                obj['entities'] = ApiClient.convertToType(data['entities'], [GoogleCloudDocumentaiV1beta2DocumentEntity]);
            }
            if (data.hasOwnProperty('entityRelations')) {
                obj['entityRelations'] = ApiClient.convertToType(data['entityRelations'], [GoogleCloudDocumentaiV1beta2DocumentEntityRelation]);
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = GoogleRpcStatus.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [GoogleCloudDocumentaiV1beta2DocumentLabel]);
            }
            if (data.hasOwnProperty('mimeType')) {
                obj['mimeType'] = ApiClient.convertToType(data['mimeType'], 'String');
            }
            if (data.hasOwnProperty('pages')) {
                obj['pages'] = ApiClient.convertToType(data['pages'], [GoogleCloudDocumentaiV1beta2DocumentPage]);
            }
            if (data.hasOwnProperty('revisions')) {
                obj['revisions'] = ApiClient.convertToType(data['revisions'], [GoogleCloudDocumentaiV1beta2DocumentRevision]);
            }
            if (data.hasOwnProperty('shardInfo')) {
                obj['shardInfo'] = GoogleCloudDocumentaiV1beta2DocumentShardInfo.constructFromObject(data['shardInfo']);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('textChanges')) {
                obj['textChanges'] = ApiClient.convertToType(data['textChanges'], [GoogleCloudDocumentaiV1beta2DocumentTextChange]);
            }
            if (data.hasOwnProperty('textStyles')) {
                obj['textStyles'] = ApiClient.convertToType(data['textStyles'], [GoogleCloudDocumentaiV1beta2DocumentStyle]);
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDocumentaiV1beta2Document</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDocumentaiV1beta2Document</code>.
     */
    static validateJSON(data) {
        if (data['entities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entities'])) {
                throw new Error("Expected the field `entities` to be an array in the JSON data but got " + data['entities']);
            }
            // validate the optional field `entities` (array)
            for (const item of data['entities']) {
                GoogleCloudDocumentaiV1beta2DocumentEntity.validateJSON(item);
            };
        }
        if (data['entityRelations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entityRelations'])) {
                throw new Error("Expected the field `entityRelations` to be an array in the JSON data but got " + data['entityRelations']);
            }
            // validate the optional field `entityRelations` (array)
            for (const item of data['entityRelations']) {
                GoogleCloudDocumentaiV1beta2DocumentEntityRelation.validateJSON(item);
            };
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          GoogleRpcStatus.validateJSON(data['error']);
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                GoogleCloudDocumentaiV1beta2DocumentLabel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['mimeType'] && !(typeof data['mimeType'] === 'string' || data['mimeType'] instanceof String)) {
            throw new Error("Expected the field `mimeType` to be a primitive type in the JSON string but got " + data['mimeType']);
        }
        if (data['pages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pages'])) {
                throw new Error("Expected the field `pages` to be an array in the JSON data but got " + data['pages']);
            }
            // validate the optional field `pages` (array)
            for (const item of data['pages']) {
                GoogleCloudDocumentaiV1beta2DocumentPage.validateJSON(item);
            };
        }
        if (data['revisions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['revisions'])) {
                throw new Error("Expected the field `revisions` to be an array in the JSON data but got " + data['revisions']);
            }
            // validate the optional field `revisions` (array)
            for (const item of data['revisions']) {
                GoogleCloudDocumentaiV1beta2DocumentRevision.validateJSON(item);
            };
        }
        // validate the optional field `shardInfo`
        if (data['shardInfo']) { // data not null
          GoogleCloudDocumentaiV1beta2DocumentShardInfo.validateJSON(data['shardInfo']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        if (data['textChanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['textChanges'])) {
                throw new Error("Expected the field `textChanges` to be an array in the JSON data but got " + data['textChanges']);
            }
            // validate the optional field `textChanges` (array)
            for (const item of data['textChanges']) {
                GoogleCloudDocumentaiV1beta2DocumentTextChange.validateJSON(item);
            };
        }
        if (data['textStyles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['textStyles'])) {
                throw new Error("Expected the field `textStyles` to be an array in the JSON data but got " + data['textStyles']);
            }
            // validate the optional field `textStyles` (array)
            for (const item of data['textStyles']) {
                GoogleCloudDocumentaiV1beta2DocumentStyle.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * Optional. Inline document content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64.
 * @member {Blob} content
 */
GoogleCloudDocumentaiV1beta2Document.prototype['content'] = undefined;

/**
 * A list of entities detected on Document.text. For document shards, entities in this list may cross shard boundaries.
 * @member {Array.<module:model/GoogleCloudDocumentaiV1beta2DocumentEntity>} entities
 */
GoogleCloudDocumentaiV1beta2Document.prototype['entities'] = undefined;

/**
 * Placeholder. Relationship among Document.entities.
 * @member {Array.<module:model/GoogleCloudDocumentaiV1beta2DocumentEntityRelation>} entityRelations
 */
GoogleCloudDocumentaiV1beta2Document.prototype['entityRelations'] = undefined;

/**
 * @member {module:model/GoogleRpcStatus} error
 */
GoogleCloudDocumentaiV1beta2Document.prototype['error'] = undefined;

/**
 * Labels for this document.
 * @member {Array.<module:model/GoogleCloudDocumentaiV1beta2DocumentLabel>} labels
 */
GoogleCloudDocumentaiV1beta2Document.prototype['labels'] = undefined;

/**
 * An IANA published [media type (MIME type)](https://www.iana.org/assignments/media-types/media-types.xhtml).
 * @member {String} mimeType
 */
GoogleCloudDocumentaiV1beta2Document.prototype['mimeType'] = undefined;

/**
 * Visual page layout for the Document.
 * @member {Array.<module:model/GoogleCloudDocumentaiV1beta2DocumentPage>} pages
 */
GoogleCloudDocumentaiV1beta2Document.prototype['pages'] = undefined;

/**
 * Placeholder. Revision history of this document.
 * @member {Array.<module:model/GoogleCloudDocumentaiV1beta2DocumentRevision>} revisions
 */
GoogleCloudDocumentaiV1beta2Document.prototype['revisions'] = undefined;

/**
 * @member {module:model/GoogleCloudDocumentaiV1beta2DocumentShardInfo} shardInfo
 */
GoogleCloudDocumentaiV1beta2Document.prototype['shardInfo'] = undefined;

/**
 * Optional. UTF-8 encoded text in reading order from the document.
 * @member {String} text
 */
GoogleCloudDocumentaiV1beta2Document.prototype['text'] = undefined;

/**
 * Placeholder. A list of text corrections made to Document.text. This is usually used for annotating corrections to OCR mistakes. Text changes for a given revision may not overlap with each other.
 * @member {Array.<module:model/GoogleCloudDocumentaiV1beta2DocumentTextChange>} textChanges
 */
GoogleCloudDocumentaiV1beta2Document.prototype['textChanges'] = undefined;

/**
 * Styles for the Document.text.
 * @member {Array.<module:model/GoogleCloudDocumentaiV1beta2DocumentStyle>} textStyles
 */
GoogleCloudDocumentaiV1beta2Document.prototype['textStyles'] = undefined;

/**
 * Optional. Currently supports Google Cloud Storage URI of the form `gs://bucket_name/object_name`. Object versioning is not supported. For more information, refer to [Google Cloud Storage Request URIs](https://cloud.google.com/storage/docs/reference-uris).
 * @member {String} uri
 */
GoogleCloudDocumentaiV1beta2Document.prototype['uri'] = undefined;






export default GoogleCloudDocumentaiV1beta2Document;

