# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_documentai_v1beta3_bounding_poly import GoogleCloudDocumentaiV1beta3BoundingPoly
from openapi_server.models.google_cloud_documentai_v1beta3_document_text_anchor import GoogleCloudDocumentaiV1beta3DocumentTextAnchor
from openapi_server import util


class GoogleCloudDocumentaiV1beta3DocumentPageLayout(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bounding_poly: GoogleCloudDocumentaiV1beta3BoundingPoly=None, confidence: float=None, orientation: str=None, text_anchor: GoogleCloudDocumentaiV1beta3DocumentTextAnchor=None):
        """GoogleCloudDocumentaiV1beta3DocumentPageLayout - a model defined in OpenAPI

        :param bounding_poly: The bounding_poly of this GoogleCloudDocumentaiV1beta3DocumentPageLayout.
        :param confidence: The confidence of this GoogleCloudDocumentaiV1beta3DocumentPageLayout.
        :param orientation: The orientation of this GoogleCloudDocumentaiV1beta3DocumentPageLayout.
        :param text_anchor: The text_anchor of this GoogleCloudDocumentaiV1beta3DocumentPageLayout.
        """
        self.openapi_types = {
            'bounding_poly': GoogleCloudDocumentaiV1beta3BoundingPoly,
            'confidence': float,
            'orientation': str,
            'text_anchor': GoogleCloudDocumentaiV1beta3DocumentTextAnchor
        }

        self.attribute_map = {
            'bounding_poly': 'boundingPoly',
            'confidence': 'confidence',
            'orientation': 'orientation',
            'text_anchor': 'textAnchor'
        }

        self._bounding_poly = bounding_poly
        self._confidence = confidence
        self._orientation = orientation
        self._text_anchor = text_anchor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDocumentaiV1beta3DocumentPageLayout':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDocumentaiV1beta3DocumentPageLayout of this GoogleCloudDocumentaiV1beta3DocumentPageLayout.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bounding_poly(self):
        """Gets the bounding_poly of this GoogleCloudDocumentaiV1beta3DocumentPageLayout.


        :return: The bounding_poly of this GoogleCloudDocumentaiV1beta3DocumentPageLayout.
        :rtype: GoogleCloudDocumentaiV1beta3BoundingPoly
        """
        return self._bounding_poly

    @bounding_poly.setter
    def bounding_poly(self, bounding_poly):
        """Sets the bounding_poly of this GoogleCloudDocumentaiV1beta3DocumentPageLayout.


        :param bounding_poly: The bounding_poly of this GoogleCloudDocumentaiV1beta3DocumentPageLayout.
        :type bounding_poly: GoogleCloudDocumentaiV1beta3BoundingPoly
        """

        self._bounding_poly = bounding_poly

    @property
    def confidence(self):
        """Gets the confidence of this GoogleCloudDocumentaiV1beta3DocumentPageLayout.

        Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.

        :return: The confidence of this GoogleCloudDocumentaiV1beta3DocumentPageLayout.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this GoogleCloudDocumentaiV1beta3DocumentPageLayout.

        Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.

        :param confidence: The confidence of this GoogleCloudDocumentaiV1beta3DocumentPageLayout.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def orientation(self):
        """Gets the orientation of this GoogleCloudDocumentaiV1beta3DocumentPageLayout.

        Detected orientation for the Layout.

        :return: The orientation of this GoogleCloudDocumentaiV1beta3DocumentPageLayout.
        :rtype: str
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this GoogleCloudDocumentaiV1beta3DocumentPageLayout.

        Detected orientation for the Layout.

        :param orientation: The orientation of this GoogleCloudDocumentaiV1beta3DocumentPageLayout.
        :type orientation: str
        """
        allowed_values = ["ORIENTATION_UNSPECIFIED", "PAGE_UP", "PAGE_RIGHT", "PAGE_DOWN", "PAGE_LEFT"]  # noqa: E501
        if orientation not in allowed_values:
            raise ValueError(
                "Invalid value for `orientation` ({0}), must be one of {1}"
                .format(orientation, allowed_values)
            )

        self._orientation = orientation

    @property
    def text_anchor(self):
        """Gets the text_anchor of this GoogleCloudDocumentaiV1beta3DocumentPageLayout.


        :return: The text_anchor of this GoogleCloudDocumentaiV1beta3DocumentPageLayout.
        :rtype: GoogleCloudDocumentaiV1beta3DocumentTextAnchor
        """
        return self._text_anchor

    @text_anchor.setter
    def text_anchor(self, text_anchor):
        """Sets the text_anchor of this GoogleCloudDocumentaiV1beta3DocumentPageLayout.


        :param text_anchor: The text_anchor of this GoogleCloudDocumentaiV1beta3DocumentPageLayout.
        :type text_anchor: GoogleCloudDocumentaiV1beta3DocumentTextAnchor
        """

        self._text_anchor = text_anchor
