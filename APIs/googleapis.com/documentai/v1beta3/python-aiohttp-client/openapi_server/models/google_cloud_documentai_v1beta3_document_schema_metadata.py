# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_allow_multiple_labels: bool=None, document_splitter: bool=None, prefixed_naming_on_properties: bool=None, skip_naming_validation: bool=None):
        """GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata - a model defined in OpenAPI

        :param document_allow_multiple_labels: The document_allow_multiple_labels of this GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.
        :param document_splitter: The document_splitter of this GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.
        :param prefixed_naming_on_properties: The prefixed_naming_on_properties of this GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.
        :param skip_naming_validation: The skip_naming_validation of this GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.
        """
        self.openapi_types = {
            'document_allow_multiple_labels': bool,
            'document_splitter': bool,
            'prefixed_naming_on_properties': bool,
            'skip_naming_validation': bool
        }

        self.attribute_map = {
            'document_allow_multiple_labels': 'documentAllowMultipleLabels',
            'document_splitter': 'documentSplitter',
            'prefixed_naming_on_properties': 'prefixedNamingOnProperties',
            'skip_naming_validation': 'skipNamingValidation'
        }

        self._document_allow_multiple_labels = document_allow_multiple_labels
        self._document_splitter = document_splitter
        self._prefixed_naming_on_properties = prefixed_naming_on_properties
        self._skip_naming_validation = skip_naming_validation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata of this GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_allow_multiple_labels(self):
        """Gets the document_allow_multiple_labels of this GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.

        If true, on a given page, there can be multiple `document` annotations covering it.

        :return: The document_allow_multiple_labels of this GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.
        :rtype: bool
        """
        return self._document_allow_multiple_labels

    @document_allow_multiple_labels.setter
    def document_allow_multiple_labels(self, document_allow_multiple_labels):
        """Sets the document_allow_multiple_labels of this GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.

        If true, on a given page, there can be multiple `document` annotations covering it.

        :param document_allow_multiple_labels: The document_allow_multiple_labels of this GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.
        :type document_allow_multiple_labels: bool
        """

        self._document_allow_multiple_labels = document_allow_multiple_labels

    @property
    def document_splitter(self):
        """Gets the document_splitter of this GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.

        If true, a `document` entity type can be applied to subdocument (splitting). Otherwise, it can only be applied to the entire document (classification).

        :return: The document_splitter of this GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.
        :rtype: bool
        """
        return self._document_splitter

    @document_splitter.setter
    def document_splitter(self, document_splitter):
        """Sets the document_splitter of this GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.

        If true, a `document` entity type can be applied to subdocument (splitting). Otherwise, it can only be applied to the entire document (classification).

        :param document_splitter: The document_splitter of this GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.
        :type document_splitter: bool
        """

        self._document_splitter = document_splitter

    @property
    def prefixed_naming_on_properties(self):
        """Gets the prefixed_naming_on_properties of this GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.

        If set, all the nested entities must be prefixed with the parents.

        :return: The prefixed_naming_on_properties of this GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.
        :rtype: bool
        """
        return self._prefixed_naming_on_properties

    @prefixed_naming_on_properties.setter
    def prefixed_naming_on_properties(self, prefixed_naming_on_properties):
        """Sets the prefixed_naming_on_properties of this GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.

        If set, all the nested entities must be prefixed with the parents.

        :param prefixed_naming_on_properties: The prefixed_naming_on_properties of this GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.
        :type prefixed_naming_on_properties: bool
        """

        self._prefixed_naming_on_properties = prefixed_naming_on_properties

    @property
    def skip_naming_validation(self):
        """Gets the skip_naming_validation of this GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.

        If set, we will skip the naming format validation in the schema. So the string values in `DocumentSchema.EntityType.name` and `DocumentSchema.EntityType.Property.name` will not be checked.

        :return: The skip_naming_validation of this GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.
        :rtype: bool
        """
        return self._skip_naming_validation

    @skip_naming_validation.setter
    def skip_naming_validation(self, skip_naming_validation):
        """Sets the skip_naming_validation of this GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.

        If set, we will skip the naming format validation in the schema. So the string values in `DocumentSchema.EntityType.name` and `DocumentSchema.EntityType.Property.name` will not be checked.

        :param skip_naming_validation: The skip_naming_validation of this GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.
        :type skip_naming_validation: bool
        """

        self._skip_naming_validation = skip_naming_validation
