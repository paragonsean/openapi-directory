# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_documentai_v1beta3_batch_documents_input_config import GoogleCloudDocumentaiV1beta3BatchDocumentsInputConfig
from openapi_server.models.google_cloud_documentai_v1beta3_import_documents_request_batch_documents_import_config_auto_split_config import GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfigAutoSplitConfig
from openapi_server import util


class GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_split_config: GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfigAutoSplitConfig=None, batch_input_config: GoogleCloudDocumentaiV1beta3BatchDocumentsInputConfig=None, dataset_split: str=None):
        """GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig - a model defined in OpenAPI

        :param auto_split_config: The auto_split_config of this GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.
        :param batch_input_config: The batch_input_config of this GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.
        :param dataset_split: The dataset_split of this GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.
        """
        self.openapi_types = {
            'auto_split_config': GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfigAutoSplitConfig,
            'batch_input_config': GoogleCloudDocumentaiV1beta3BatchDocumentsInputConfig,
            'dataset_split': str
        }

        self.attribute_map = {
            'auto_split_config': 'autoSplitConfig',
            'batch_input_config': 'batchInputConfig',
            'dataset_split': 'datasetSplit'
        }

        self._auto_split_config = auto_split_config
        self._batch_input_config = batch_input_config
        self._dataset_split = dataset_split

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig of this GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_split_config(self):
        """Gets the auto_split_config of this GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.


        :return: The auto_split_config of this GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.
        :rtype: GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfigAutoSplitConfig
        """
        return self._auto_split_config

    @auto_split_config.setter
    def auto_split_config(self, auto_split_config):
        """Sets the auto_split_config of this GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.


        :param auto_split_config: The auto_split_config of this GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.
        :type auto_split_config: GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfigAutoSplitConfig
        """

        self._auto_split_config = auto_split_config

    @property
    def batch_input_config(self):
        """Gets the batch_input_config of this GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.


        :return: The batch_input_config of this GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.
        :rtype: GoogleCloudDocumentaiV1beta3BatchDocumentsInputConfig
        """
        return self._batch_input_config

    @batch_input_config.setter
    def batch_input_config(self, batch_input_config):
        """Sets the batch_input_config of this GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.


        :param batch_input_config: The batch_input_config of this GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.
        :type batch_input_config: GoogleCloudDocumentaiV1beta3BatchDocumentsInputConfig
        """

        self._batch_input_config = batch_input_config

    @property
    def dataset_split(self):
        """Gets the dataset_split of this GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.

        Target dataset split where the documents must be stored.

        :return: The dataset_split of this GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.
        :rtype: str
        """
        return self._dataset_split

    @dataset_split.setter
    def dataset_split(self, dataset_split):
        """Sets the dataset_split of this GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.

        Target dataset split where the documents must be stored.

        :param dataset_split: The dataset_split of this GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.
        :type dataset_split: str
        """
        allowed_values = ["DATASET_SPLIT_TYPE_UNSPECIFIED", "DATASET_SPLIT_TRAIN", "DATASET_SPLIT_TEST", "DATASET_SPLIT_UNASSIGNED"]  # noqa: E501
        if dataset_split not in allowed_values:
            raise ValueError(
                "Invalid value for `dataset_split` ({0}), must be one of {1}"
                .format(dataset_split, allowed_values)
            )

        self._dataset_split = dataset_split
