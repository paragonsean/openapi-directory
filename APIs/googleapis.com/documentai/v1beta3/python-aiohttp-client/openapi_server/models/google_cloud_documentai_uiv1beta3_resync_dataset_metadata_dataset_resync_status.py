# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_rpc_status import GoogleRpcStatus
from openapi_server import util


class GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataDatasetResyncStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_inconsistency_type: str=None, status: GoogleRpcStatus=None):
        """GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataDatasetResyncStatus - a model defined in OpenAPI

        :param dataset_inconsistency_type: The dataset_inconsistency_type of this GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataDatasetResyncStatus.
        :param status: The status of this GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataDatasetResyncStatus.
        """
        self.openapi_types = {
            'dataset_inconsistency_type': str,
            'status': GoogleRpcStatus
        }

        self.attribute_map = {
            'dataset_inconsistency_type': 'datasetInconsistencyType',
            'status': 'status'
        }

        self._dataset_inconsistency_type = dataset_inconsistency_type
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataDatasetResyncStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataDatasetResyncStatus of this GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataDatasetResyncStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_inconsistency_type(self):
        """Gets the dataset_inconsistency_type of this GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataDatasetResyncStatus.

        The type of the inconsistency of the dataset.

        :return: The dataset_inconsistency_type of this GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataDatasetResyncStatus.
        :rtype: str
        """
        return self._dataset_inconsistency_type

    @dataset_inconsistency_type.setter
    def dataset_inconsistency_type(self, dataset_inconsistency_type):
        """Sets the dataset_inconsistency_type of this GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataDatasetResyncStatus.

        The type of the inconsistency of the dataset.

        :param dataset_inconsistency_type: The dataset_inconsistency_type of this GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataDatasetResyncStatus.
        :type dataset_inconsistency_type: str
        """
        allowed_values = ["DATASET_INCONSISTENCY_TYPE_UNSPECIFIED", "DATASET_INCONSISTENCY_TYPE_NO_STORAGE_MARKER"]  # noqa: E501
        if dataset_inconsistency_type not in allowed_values:
            raise ValueError(
                "Invalid value for `dataset_inconsistency_type` ({0}), must be one of {1}"
                .format(dataset_inconsistency_type, allowed_values)
            )

        self._dataset_inconsistency_type = dataset_inconsistency_type

    @property
    def status(self):
        """Gets the status of this GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataDatasetResyncStatus.


        :return: The status of this GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataDatasetResyncStatus.
        :rtype: GoogleRpcStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataDatasetResyncStatus.


        :param status: The status of this GoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataDatasetResyncStatus.
        :type status: GoogleRpcStatus
        """

        self._status = status
