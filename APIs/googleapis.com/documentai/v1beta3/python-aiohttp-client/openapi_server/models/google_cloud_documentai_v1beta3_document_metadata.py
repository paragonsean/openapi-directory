# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_documentai_v1beta3_document_id import GoogleCloudDocumentaiV1beta3DocumentId
from openapi_server import util


class GoogleCloudDocumentaiV1beta3DocumentMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_type: str=None, display_name: str=None, document_id: GoogleCloudDocumentaiV1beta3DocumentId=None, labeling_state: str=None, page_count: int=None):
        """GoogleCloudDocumentaiV1beta3DocumentMetadata - a model defined in OpenAPI

        :param dataset_type: The dataset_type of this GoogleCloudDocumentaiV1beta3DocumentMetadata.
        :param display_name: The display_name of this GoogleCloudDocumentaiV1beta3DocumentMetadata.
        :param document_id: The document_id of this GoogleCloudDocumentaiV1beta3DocumentMetadata.
        :param labeling_state: The labeling_state of this GoogleCloudDocumentaiV1beta3DocumentMetadata.
        :param page_count: The page_count of this GoogleCloudDocumentaiV1beta3DocumentMetadata.
        """
        self.openapi_types = {
            'dataset_type': str,
            'display_name': str,
            'document_id': GoogleCloudDocumentaiV1beta3DocumentId,
            'labeling_state': str,
            'page_count': int
        }

        self.attribute_map = {
            'dataset_type': 'datasetType',
            'display_name': 'displayName',
            'document_id': 'documentId',
            'labeling_state': 'labelingState',
            'page_count': 'pageCount'
        }

        self._dataset_type = dataset_type
        self._display_name = display_name
        self._document_id = document_id
        self._labeling_state = labeling_state
        self._page_count = page_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDocumentaiV1beta3DocumentMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDocumentaiV1beta3DocumentMetadata of this GoogleCloudDocumentaiV1beta3DocumentMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_type(self):
        """Gets the dataset_type of this GoogleCloudDocumentaiV1beta3DocumentMetadata.

        Type of the dataset split to which the document belongs.

        :return: The dataset_type of this GoogleCloudDocumentaiV1beta3DocumentMetadata.
        :rtype: str
        """
        return self._dataset_type

    @dataset_type.setter
    def dataset_type(self, dataset_type):
        """Sets the dataset_type of this GoogleCloudDocumentaiV1beta3DocumentMetadata.

        Type of the dataset split to which the document belongs.

        :param dataset_type: The dataset_type of this GoogleCloudDocumentaiV1beta3DocumentMetadata.
        :type dataset_type: str
        """
        allowed_values = ["DATASET_SPLIT_TYPE_UNSPECIFIED", "DATASET_SPLIT_TRAIN", "DATASET_SPLIT_TEST", "DATASET_SPLIT_UNASSIGNED"]  # noqa: E501
        if dataset_type not in allowed_values:
            raise ValueError(
                "Invalid value for `dataset_type` ({0}), must be one of {1}"
                .format(dataset_type, allowed_values)
            )

        self._dataset_type = dataset_type

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudDocumentaiV1beta3DocumentMetadata.

        The display name of the document.

        :return: The display_name of this GoogleCloudDocumentaiV1beta3DocumentMetadata.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudDocumentaiV1beta3DocumentMetadata.

        The display name of the document.

        :param display_name: The display_name of this GoogleCloudDocumentaiV1beta3DocumentMetadata.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def document_id(self):
        """Gets the document_id of this GoogleCloudDocumentaiV1beta3DocumentMetadata.


        :return: The document_id of this GoogleCloudDocumentaiV1beta3DocumentMetadata.
        :rtype: GoogleCloudDocumentaiV1beta3DocumentId
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this GoogleCloudDocumentaiV1beta3DocumentMetadata.


        :param document_id: The document_id of this GoogleCloudDocumentaiV1beta3DocumentMetadata.
        :type document_id: GoogleCloudDocumentaiV1beta3DocumentId
        """

        self._document_id = document_id

    @property
    def labeling_state(self):
        """Gets the labeling_state of this GoogleCloudDocumentaiV1beta3DocumentMetadata.

        Labeling state of the document.

        :return: The labeling_state of this GoogleCloudDocumentaiV1beta3DocumentMetadata.
        :rtype: str
        """
        return self._labeling_state

    @labeling_state.setter
    def labeling_state(self, labeling_state):
        """Sets the labeling_state of this GoogleCloudDocumentaiV1beta3DocumentMetadata.

        Labeling state of the document.

        :param labeling_state: The labeling_state of this GoogleCloudDocumentaiV1beta3DocumentMetadata.
        :type labeling_state: str
        """
        allowed_values = ["DOCUMENT_LABELING_STATE_UNSPECIFIED", "DOCUMENT_LABELED", "DOCUMENT_UNLABELED", "DOCUMENT_AUTO_LABELED"]  # noqa: E501
        if labeling_state not in allowed_values:
            raise ValueError(
                "Invalid value for `labeling_state` ({0}), must be one of {1}"
                .format(labeling_state, allowed_values)
            )

        self._labeling_state = labeling_state

    @property
    def page_count(self):
        """Gets the page_count of this GoogleCloudDocumentaiV1beta3DocumentMetadata.

        Number of pages in the document.

        :return: The page_count of this GoogleCloudDocumentaiV1beta3DocumentMetadata.
        :rtype: int
        """
        return self._page_count

    @page_count.setter
    def page_count(self, page_count):
        """Sets the page_count of this GoogleCloudDocumentaiV1beta3DocumentMetadata.

        Number of pages in the document.

        :param page_count: The page_count of this GoogleCloudDocumentaiV1beta3DocumentMetadata.
        :type page_count: int
        """

        self._page_count = page_count
