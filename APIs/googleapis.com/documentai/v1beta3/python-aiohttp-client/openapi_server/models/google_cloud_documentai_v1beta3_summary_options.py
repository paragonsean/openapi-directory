# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDocumentaiV1beta3SummaryOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, format: str=None, length: str=None):
        """GoogleCloudDocumentaiV1beta3SummaryOptions - a model defined in OpenAPI

        :param format: The format of this GoogleCloudDocumentaiV1beta3SummaryOptions.
        :param length: The length of this GoogleCloudDocumentaiV1beta3SummaryOptions.
        """
        self.openapi_types = {
            'format': str,
            'length': str
        }

        self.attribute_map = {
            'format': 'format',
            'length': 'length'
        }

        self._format = format
        self._length = length

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDocumentaiV1beta3SummaryOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDocumentaiV1beta3SummaryOptions of this GoogleCloudDocumentaiV1beta3SummaryOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def format(self):
        """Gets the format of this GoogleCloudDocumentaiV1beta3SummaryOptions.

        The format the summary should be in.

        :return: The format of this GoogleCloudDocumentaiV1beta3SummaryOptions.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this GoogleCloudDocumentaiV1beta3SummaryOptions.

        The format the summary should be in.

        :param format: The format of this GoogleCloudDocumentaiV1beta3SummaryOptions.
        :type format: str
        """
        allowed_values = ["FORMAT_UNSPECIFIED", "PARAGRAPH", "BULLETS"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def length(self):
        """Gets the length of this GoogleCloudDocumentaiV1beta3SummaryOptions.

        How long the summary should be.

        :return: The length of this GoogleCloudDocumentaiV1beta3SummaryOptions.
        :rtype: str
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this GoogleCloudDocumentaiV1beta3SummaryOptions.

        How long the summary should be.

        :param length: The length of this GoogleCloudDocumentaiV1beta3SummaryOptions.
        :type length: str
        """
        allowed_values = ["LENGTH_UNSPECIFIED", "BRIEF", "MODERATE", "COMPREHENSIVE"]  # noqa: E501
        if length not in allowed_values:
            raise ValueError(
                "Invalid value for `length` ({0}), must be one of {1}"
                .format(length, allowed_values)
            )

        self._length = length
