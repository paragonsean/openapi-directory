/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::~OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest() {}

void OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::initializeModel() {

    m_document_output_config_isSet = false;
    m_document_output_config_isValid = false;

    m_input_configs_isSet = false;
    m_input_configs_isValid = false;

    m_input_documents_isSet = false;
    m_input_documents_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_output_config_isSet = false;
    m_output_config_isValid = false;

    m_process_options_isSet = false;
    m_process_options_isValid = false;

    m_skip_human_review_isSet = false;
    m_skip_human_review_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::fromJsonObject(QJsonObject json) {

    m_document_output_config_isValid = ::OpenAPI::fromJsonValue(m_document_output_config, json[QString("documentOutputConfig")]);
    m_document_output_config_isSet = !json[QString("documentOutputConfig")].isNull() && m_document_output_config_isValid;

    m_input_configs_isValid = ::OpenAPI::fromJsonValue(m_input_configs, json[QString("inputConfigs")]);
    m_input_configs_isSet = !json[QString("inputConfigs")].isNull() && m_input_configs_isValid;

    m_input_documents_isValid = ::OpenAPI::fromJsonValue(m_input_documents, json[QString("inputDocuments")]);
    m_input_documents_isSet = !json[QString("inputDocuments")].isNull() && m_input_documents_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_output_config_isValid = ::OpenAPI::fromJsonValue(m_output_config, json[QString("outputConfig")]);
    m_output_config_isSet = !json[QString("outputConfig")].isNull() && m_output_config_isValid;

    m_process_options_isValid = ::OpenAPI::fromJsonValue(m_process_options, json[QString("processOptions")]);
    m_process_options_isSet = !json[QString("processOptions")].isNull() && m_process_options_isValid;

    m_skip_human_review_isValid = ::OpenAPI::fromJsonValue(m_skip_human_review, json[QString("skipHumanReview")]);
    m_skip_human_review_isSet = !json[QString("skipHumanReview")].isNull() && m_skip_human_review_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_document_output_config.isSet()) {
        obj.insert(QString("documentOutputConfig"), ::OpenAPI::toJsonValue(m_document_output_config));
    }
    if (m_input_configs.size() > 0) {
        obj.insert(QString("inputConfigs"), ::OpenAPI::toJsonValue(m_input_configs));
    }
    if (m_input_documents.isSet()) {
        obj.insert(QString("inputDocuments"), ::OpenAPI::toJsonValue(m_input_documents));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_output_config.isSet()) {
        obj.insert(QString("outputConfig"), ::OpenAPI::toJsonValue(m_output_config));
    }
    if (m_process_options.isSet()) {
        obj.insert(QString("processOptions"), ::OpenAPI::toJsonValue(m_process_options));
    }
    if (m_skip_human_review_isSet) {
        obj.insert(QString("skipHumanReview"), ::OpenAPI::toJsonValue(m_skip_human_review));
    }
    return obj;
}

OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfig OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::getDocumentOutputConfig() const {
    return m_document_output_config;
}
void OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::setDocumentOutputConfig(const OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfig &document_output_config) {
    m_document_output_config = document_output_config;
    m_document_output_config_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::is_document_output_config_Set() const{
    return m_document_output_config_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::is_document_output_config_Valid() const{
    return m_document_output_config_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta3BatchProcessRequestBatchInputConfig> OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::getInputConfigs() const {
    return m_input_configs;
}
void OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::setInputConfigs(const QList<OAIGoogleCloudDocumentaiV1beta3BatchProcessRequestBatchInputConfig> &input_configs) {
    m_input_configs = input_configs;
    m_input_configs_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::is_input_configs_Set() const{
    return m_input_configs_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::is_input_configs_Valid() const{
    return m_input_configs_isValid;
}

OAIGoogleCloudDocumentaiV1beta3BatchDocumentsInputConfig OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::getInputDocuments() const {
    return m_input_documents;
}
void OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::setInputDocuments(const OAIGoogleCloudDocumentaiV1beta3BatchDocumentsInputConfig &input_documents) {
    m_input_documents = input_documents;
    m_input_documents_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::is_input_documents_Set() const{
    return m_input_documents_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::is_input_documents_Valid() const{
    return m_input_documents_isValid;
}

QMap<QString, QString> OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::getLabels() const {
    return m_labels;
}
void OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIGoogleCloudDocumentaiV1beta3BatchProcessRequestBatchOutputConfig OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::getOutputConfig() const {
    return m_output_config;
}
void OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::setOutputConfig(const OAIGoogleCloudDocumentaiV1beta3BatchProcessRequestBatchOutputConfig &output_config) {
    m_output_config = output_config;
    m_output_config_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::is_output_config_Set() const{
    return m_output_config_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::is_output_config_Valid() const{
    return m_output_config_isValid;
}

OAIGoogleCloudDocumentaiV1beta3ProcessOptions OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::getProcessOptions() const {
    return m_process_options;
}
void OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::setProcessOptions(const OAIGoogleCloudDocumentaiV1beta3ProcessOptions &process_options) {
    m_process_options = process_options;
    m_process_options_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::is_process_options_Set() const{
    return m_process_options_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::is_process_options_Valid() const{
    return m_process_options_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::isSkipHumanReview() const {
    return m_skip_human_review;
}
void OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::setSkipHumanReview(const bool &skip_human_review) {
    m_skip_human_review = skip_human_review;
    m_skip_human_review_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::is_skip_human_review_Set() const{
    return m_skip_human_review_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::is_skip_human_review_Valid() const{
    return m_skip_human_review_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_output_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_human_review_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchProcessRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
