/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig::OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig::OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig::~OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig() {}

void OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig::initializeModel() {

    m_pages_overlap_isSet = false;
    m_pages_overlap_isValid = false;

    m_pages_per_shard_isSet = false;
    m_pages_per_shard_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig::fromJsonObject(QJsonObject json) {

    m_pages_overlap_isValid = ::OpenAPI::fromJsonValue(m_pages_overlap, json[QString("pagesOverlap")]);
    m_pages_overlap_isSet = !json[QString("pagesOverlap")].isNull() && m_pages_overlap_isValid;

    m_pages_per_shard_isValid = ::OpenAPI::fromJsonValue(m_pages_per_shard, json[QString("pagesPerShard")]);
    m_pages_per_shard_isSet = !json[QString("pagesPerShard")].isNull() && m_pages_per_shard_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_pages_overlap_isSet) {
        obj.insert(QString("pagesOverlap"), ::OpenAPI::toJsonValue(m_pages_overlap));
    }
    if (m_pages_per_shard_isSet) {
        obj.insert(QString("pagesPerShard"), ::OpenAPI::toJsonValue(m_pages_per_shard));
    }
    return obj;
}

qint32 OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig::getPagesOverlap() const {
    return m_pages_overlap;
}
void OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig::setPagesOverlap(const qint32 &pages_overlap) {
    m_pages_overlap = pages_overlap;
    m_pages_overlap_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig::is_pages_overlap_Set() const{
    return m_pages_overlap_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig::is_pages_overlap_Valid() const{
    return m_pages_overlap_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig::getPagesPerShard() const {
    return m_pages_per_shard;
}
void OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig::setPagesPerShard(const qint32 &pages_per_shard) {
    m_pages_per_shard = pages_per_shard;
    m_pages_per_shard_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig::is_pages_per_shard_Set() const{
    return m_pages_per_shard_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig::is_pages_per_shard_Valid() const{
    return m_pages_per_shard_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pages_overlap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages_per_shard_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
