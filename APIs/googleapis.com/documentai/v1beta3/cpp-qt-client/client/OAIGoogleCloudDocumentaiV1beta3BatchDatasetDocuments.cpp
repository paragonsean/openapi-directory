/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments::OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments::OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments::~OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments() {}

void OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_individual_document_ids_isSet = false;
    m_individual_document_ids_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_individual_document_ids_isValid = ::OpenAPI::fromJsonValue(m_individual_document_ids, json[QString("individualDocumentIds")]);
    m_individual_document_ids_isSet = !json[QString("individualDocumentIds")].isNull() && m_individual_document_ids_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_individual_document_ids.isSet()) {
        obj.insert(QString("individualDocumentIds"), ::OpenAPI::toJsonValue(m_individual_document_ids));
    }
    return obj;
}

QString OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments::getFilter() const {
    return m_filter;
}
void OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments::is_filter_Valid() const{
    return m_filter_isValid;
}

OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocumentsIndividualDocumentIds OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments::getIndividualDocumentIds() const {
    return m_individual_document_ids;
}
void OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments::setIndividualDocumentIds(const OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocumentsIndividualDocumentIds &individual_document_ids) {
    m_individual_document_ids = individual_document_ids;
    m_individual_document_ids_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments::is_individual_document_ids_Set() const{
    return m_individual_document_ids_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments::is_individual_document_ids_Valid() const{
    return m_individual_document_ids_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_document_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta3BatchDatasetDocuments::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
