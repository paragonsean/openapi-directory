/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta3OcrConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta3OcrConfig::OAIGoogleCloudDocumentaiV1beta3OcrConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta3OcrConfig::OAIGoogleCloudDocumentaiV1beta3OcrConfig() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta3OcrConfig::~OAIGoogleCloudDocumentaiV1beta3OcrConfig() {}

void OAIGoogleCloudDocumentaiV1beta3OcrConfig::initializeModel() {

    m_advanced_ocr_options_isSet = false;
    m_advanced_ocr_options_isValid = false;

    m_compute_style_info_isSet = false;
    m_compute_style_info_isValid = false;

    m_disable_character_boxes_detection_isSet = false;
    m_disable_character_boxes_detection_isValid = false;

    m_enable_image_quality_scores_isSet = false;
    m_enable_image_quality_scores_isValid = false;

    m_enable_native_pdf_parsing_isSet = false;
    m_enable_native_pdf_parsing_isValid = false;

    m_enable_symbol_isSet = false;
    m_enable_symbol_isValid = false;

    m_hints_isSet = false;
    m_hints_isValid = false;

    m_premium_features_isSet = false;
    m_premium_features_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta3OcrConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta3OcrConfig::fromJsonObject(QJsonObject json) {

    m_advanced_ocr_options_isValid = ::OpenAPI::fromJsonValue(m_advanced_ocr_options, json[QString("advancedOcrOptions")]);
    m_advanced_ocr_options_isSet = !json[QString("advancedOcrOptions")].isNull() && m_advanced_ocr_options_isValid;

    m_compute_style_info_isValid = ::OpenAPI::fromJsonValue(m_compute_style_info, json[QString("computeStyleInfo")]);
    m_compute_style_info_isSet = !json[QString("computeStyleInfo")].isNull() && m_compute_style_info_isValid;

    m_disable_character_boxes_detection_isValid = ::OpenAPI::fromJsonValue(m_disable_character_boxes_detection, json[QString("disableCharacterBoxesDetection")]);
    m_disable_character_boxes_detection_isSet = !json[QString("disableCharacterBoxesDetection")].isNull() && m_disable_character_boxes_detection_isValid;

    m_enable_image_quality_scores_isValid = ::OpenAPI::fromJsonValue(m_enable_image_quality_scores, json[QString("enableImageQualityScores")]);
    m_enable_image_quality_scores_isSet = !json[QString("enableImageQualityScores")].isNull() && m_enable_image_quality_scores_isValid;

    m_enable_native_pdf_parsing_isValid = ::OpenAPI::fromJsonValue(m_enable_native_pdf_parsing, json[QString("enableNativePdfParsing")]);
    m_enable_native_pdf_parsing_isSet = !json[QString("enableNativePdfParsing")].isNull() && m_enable_native_pdf_parsing_isValid;

    m_enable_symbol_isValid = ::OpenAPI::fromJsonValue(m_enable_symbol, json[QString("enableSymbol")]);
    m_enable_symbol_isSet = !json[QString("enableSymbol")].isNull() && m_enable_symbol_isValid;

    m_hints_isValid = ::OpenAPI::fromJsonValue(m_hints, json[QString("hints")]);
    m_hints_isSet = !json[QString("hints")].isNull() && m_hints_isValid;

    m_premium_features_isValid = ::OpenAPI::fromJsonValue(m_premium_features, json[QString("premiumFeatures")]);
    m_premium_features_isSet = !json[QString("premiumFeatures")].isNull() && m_premium_features_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3OcrConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta3OcrConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_advanced_ocr_options.size() > 0) {
        obj.insert(QString("advancedOcrOptions"), ::OpenAPI::toJsonValue(m_advanced_ocr_options));
    }
    if (m_compute_style_info_isSet) {
        obj.insert(QString("computeStyleInfo"), ::OpenAPI::toJsonValue(m_compute_style_info));
    }
    if (m_disable_character_boxes_detection_isSet) {
        obj.insert(QString("disableCharacterBoxesDetection"), ::OpenAPI::toJsonValue(m_disable_character_boxes_detection));
    }
    if (m_enable_image_quality_scores_isSet) {
        obj.insert(QString("enableImageQualityScores"), ::OpenAPI::toJsonValue(m_enable_image_quality_scores));
    }
    if (m_enable_native_pdf_parsing_isSet) {
        obj.insert(QString("enableNativePdfParsing"), ::OpenAPI::toJsonValue(m_enable_native_pdf_parsing));
    }
    if (m_enable_symbol_isSet) {
        obj.insert(QString("enableSymbol"), ::OpenAPI::toJsonValue(m_enable_symbol));
    }
    if (m_hints.isSet()) {
        obj.insert(QString("hints"), ::OpenAPI::toJsonValue(m_hints));
    }
    if (m_premium_features.isSet()) {
        obj.insert(QString("premiumFeatures"), ::OpenAPI::toJsonValue(m_premium_features));
    }
    return obj;
}

QList<QString> OAIGoogleCloudDocumentaiV1beta3OcrConfig::getAdvancedOcrOptions() const {
    return m_advanced_ocr_options;
}
void OAIGoogleCloudDocumentaiV1beta3OcrConfig::setAdvancedOcrOptions(const QList<QString> &advanced_ocr_options) {
    m_advanced_ocr_options = advanced_ocr_options;
    m_advanced_ocr_options_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::is_advanced_ocr_options_Set() const{
    return m_advanced_ocr_options_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::is_advanced_ocr_options_Valid() const{
    return m_advanced_ocr_options_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::isComputeStyleInfo() const {
    return m_compute_style_info;
}
void OAIGoogleCloudDocumentaiV1beta3OcrConfig::setComputeStyleInfo(const bool &compute_style_info) {
    m_compute_style_info = compute_style_info;
    m_compute_style_info_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::is_compute_style_info_Set() const{
    return m_compute_style_info_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::is_compute_style_info_Valid() const{
    return m_compute_style_info_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::isDisableCharacterBoxesDetection() const {
    return m_disable_character_boxes_detection;
}
void OAIGoogleCloudDocumentaiV1beta3OcrConfig::setDisableCharacterBoxesDetection(const bool &disable_character_boxes_detection) {
    m_disable_character_boxes_detection = disable_character_boxes_detection;
    m_disable_character_boxes_detection_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::is_disable_character_boxes_detection_Set() const{
    return m_disable_character_boxes_detection_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::is_disable_character_boxes_detection_Valid() const{
    return m_disable_character_boxes_detection_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::isEnableImageQualityScores() const {
    return m_enable_image_quality_scores;
}
void OAIGoogleCloudDocumentaiV1beta3OcrConfig::setEnableImageQualityScores(const bool &enable_image_quality_scores) {
    m_enable_image_quality_scores = enable_image_quality_scores;
    m_enable_image_quality_scores_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::is_enable_image_quality_scores_Set() const{
    return m_enable_image_quality_scores_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::is_enable_image_quality_scores_Valid() const{
    return m_enable_image_quality_scores_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::isEnableNativePdfParsing() const {
    return m_enable_native_pdf_parsing;
}
void OAIGoogleCloudDocumentaiV1beta3OcrConfig::setEnableNativePdfParsing(const bool &enable_native_pdf_parsing) {
    m_enable_native_pdf_parsing = enable_native_pdf_parsing;
    m_enable_native_pdf_parsing_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::is_enable_native_pdf_parsing_Set() const{
    return m_enable_native_pdf_parsing_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::is_enable_native_pdf_parsing_Valid() const{
    return m_enable_native_pdf_parsing_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::isEnableSymbol() const {
    return m_enable_symbol;
}
void OAIGoogleCloudDocumentaiV1beta3OcrConfig::setEnableSymbol(const bool &enable_symbol) {
    m_enable_symbol = enable_symbol;
    m_enable_symbol_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::is_enable_symbol_Set() const{
    return m_enable_symbol_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::is_enable_symbol_Valid() const{
    return m_enable_symbol_isValid;
}

OAIGoogleCloudDocumentaiV1beta3OcrConfigHints OAIGoogleCloudDocumentaiV1beta3OcrConfig::getHints() const {
    return m_hints;
}
void OAIGoogleCloudDocumentaiV1beta3OcrConfig::setHints(const OAIGoogleCloudDocumentaiV1beta3OcrConfigHints &hints) {
    m_hints = hints;
    m_hints_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::is_hints_Set() const{
    return m_hints_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::is_hints_Valid() const{
    return m_hints_isValid;
}

OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures OAIGoogleCloudDocumentaiV1beta3OcrConfig::getPremiumFeatures() const {
    return m_premium_features;
}
void OAIGoogleCloudDocumentaiV1beta3OcrConfig::setPremiumFeatures(const OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures &premium_features) {
    m_premium_features = premium_features;
    m_premium_features_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::is_premium_features_Set() const{
    return m_premium_features_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::is_premium_features_Valid() const{
    return m_premium_features_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advanced_ocr_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_style_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_character_boxes_detection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_image_quality_scores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_native_pdf_parsing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_premium_features.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
