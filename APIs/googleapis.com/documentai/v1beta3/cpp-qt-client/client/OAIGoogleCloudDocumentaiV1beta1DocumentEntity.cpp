/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta1DocumentEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta1DocumentEntity::OAIGoogleCloudDocumentaiV1beta1DocumentEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta1DocumentEntity::OAIGoogleCloudDocumentaiV1beta1DocumentEntity() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta1DocumentEntity::~OAIGoogleCloudDocumentaiV1beta1DocumentEntity() {}

void OAIGoogleCloudDocumentaiV1beta1DocumentEntity::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mention_id_isSet = false;
    m_mention_id_isValid = false;

    m_mention_text_isSet = false;
    m_mention_text_isValid = false;

    m_normalized_value_isSet = false;
    m_normalized_value_isValid = false;

    m_page_anchor_isSet = false;
    m_page_anchor_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_provenance_isSet = false;
    m_provenance_isValid = false;

    m_redacted_isSet = false;
    m_redacted_isValid = false;

    m_text_anchor_isSet = false;
    m_text_anchor_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta1DocumentEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta1DocumentEntity::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mention_id_isValid = ::OpenAPI::fromJsonValue(m_mention_id, json[QString("mentionId")]);
    m_mention_id_isSet = !json[QString("mentionId")].isNull() && m_mention_id_isValid;

    m_mention_text_isValid = ::OpenAPI::fromJsonValue(m_mention_text, json[QString("mentionText")]);
    m_mention_text_isSet = !json[QString("mentionText")].isNull() && m_mention_text_isValid;

    m_normalized_value_isValid = ::OpenAPI::fromJsonValue(m_normalized_value, json[QString("normalizedValue")]);
    m_normalized_value_isSet = !json[QString("normalizedValue")].isNull() && m_normalized_value_isValid;

    m_page_anchor_isValid = ::OpenAPI::fromJsonValue(m_page_anchor, json[QString("pageAnchor")]);
    m_page_anchor_isSet = !json[QString("pageAnchor")].isNull() && m_page_anchor_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_provenance_isValid = ::OpenAPI::fromJsonValue(m_provenance, json[QString("provenance")]);
    m_provenance_isSet = !json[QString("provenance")].isNull() && m_provenance_isValid;

    m_redacted_isValid = ::OpenAPI::fromJsonValue(m_redacted, json[QString("redacted")]);
    m_redacted_isSet = !json[QString("redacted")].isNull() && m_redacted_isValid;

    m_text_anchor_isValid = ::OpenAPI::fromJsonValue(m_text_anchor, json[QString("textAnchor")]);
    m_text_anchor_isSet = !json[QString("textAnchor")].isNull() && m_text_anchor_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta1DocumentEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta1DocumentEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mention_id_isSet) {
        obj.insert(QString("mentionId"), ::OpenAPI::toJsonValue(m_mention_id));
    }
    if (m_mention_text_isSet) {
        obj.insert(QString("mentionText"), ::OpenAPI::toJsonValue(m_mention_text));
    }
    if (m_normalized_value.isSet()) {
        obj.insert(QString("normalizedValue"), ::OpenAPI::toJsonValue(m_normalized_value));
    }
    if (m_page_anchor.isSet()) {
        obj.insert(QString("pageAnchor"), ::OpenAPI::toJsonValue(m_page_anchor));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_provenance.isSet()) {
        obj.insert(QString("provenance"), ::OpenAPI::toJsonValue(m_provenance));
    }
    if (m_redacted_isSet) {
        obj.insert(QString("redacted"), ::OpenAPI::toJsonValue(m_redacted));
    }
    if (m_text_anchor.isSet()) {
        obj.insert(QString("textAnchor"), ::OpenAPI::toJsonValue(m_text_anchor));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

float OAIGoogleCloudDocumentaiV1beta1DocumentEntity::getConfidence() const {
    return m_confidence;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentEntity::setConfidence(const float &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta1DocumentEntity::getId() const {
    return m_id;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta1DocumentEntity::getMentionId() const {
    return m_mention_id;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentEntity::setMentionId(const QString &mention_id) {
    m_mention_id = mention_id;
    m_mention_id_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_mention_id_Set() const{
    return m_mention_id_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_mention_id_Valid() const{
    return m_mention_id_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta1DocumentEntity::getMentionText() const {
    return m_mention_text;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentEntity::setMentionText(const QString &mention_text) {
    m_mention_text = mention_text;
    m_mention_text_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_mention_text_Set() const{
    return m_mention_text_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_mention_text_Valid() const{
    return m_mention_text_isValid;
}

OAIGoogleCloudDocumentaiV1beta1DocumentEntityNormalizedValue OAIGoogleCloudDocumentaiV1beta1DocumentEntity::getNormalizedValue() const {
    return m_normalized_value;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentEntity::setNormalizedValue(const OAIGoogleCloudDocumentaiV1beta1DocumentEntityNormalizedValue &normalized_value) {
    m_normalized_value = normalized_value;
    m_normalized_value_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_normalized_value_Set() const{
    return m_normalized_value_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_normalized_value_Valid() const{
    return m_normalized_value_isValid;
}

OAIGoogleCloudDocumentaiV1beta1DocumentPageAnchor OAIGoogleCloudDocumentaiV1beta1DocumentEntity::getPageAnchor() const {
    return m_page_anchor;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentEntity::setPageAnchor(const OAIGoogleCloudDocumentaiV1beta1DocumentPageAnchor &page_anchor) {
    m_page_anchor = page_anchor;
    m_page_anchor_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_page_anchor_Set() const{
    return m_page_anchor_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_page_anchor_Valid() const{
    return m_page_anchor_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentEntity> OAIGoogleCloudDocumentaiV1beta1DocumentEntity::getProperties() const {
    return m_properties;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentEntity::setProperties(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentEntity> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_properties_Valid() const{
    return m_properties_isValid;
}

OAIGoogleCloudDocumentaiV1beta1DocumentProvenance OAIGoogleCloudDocumentaiV1beta1DocumentEntity::getProvenance() const {
    return m_provenance;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentEntity::setProvenance(const OAIGoogleCloudDocumentaiV1beta1DocumentProvenance &provenance) {
    m_provenance = provenance;
    m_provenance_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_provenance_Set() const{
    return m_provenance_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_provenance_Valid() const{
    return m_provenance_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::isRedacted() const {
    return m_redacted;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentEntity::setRedacted(const bool &redacted) {
    m_redacted = redacted;
    m_redacted_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_redacted_Set() const{
    return m_redacted_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_redacted_Valid() const{
    return m_redacted_isValid;
}

OAIGoogleCloudDocumentaiV1beta1DocumentTextAnchor OAIGoogleCloudDocumentaiV1beta1DocumentEntity::getTextAnchor() const {
    return m_text_anchor;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentEntity::setTextAnchor(const OAIGoogleCloudDocumentaiV1beta1DocumentTextAnchor &text_anchor) {
    m_text_anchor = text_anchor;
    m_text_anchor_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_text_anchor_Set() const{
    return m_text_anchor_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_text_anchor_Valid() const{
    return m_text_anchor_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta1DocumentEntity::getType() const {
    return m_type;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentEntity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mention_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mention_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_normalized_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_anchor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provenance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_anchor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
