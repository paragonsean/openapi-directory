/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::~OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig() {}

void OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::initializeModel() {

    m_auto_split_config_isSet = false;
    m_auto_split_config_isValid = false;

    m_batch_input_config_isSet = false;
    m_batch_input_config_isValid = false;

    m_dataset_split_isSet = false;
    m_dataset_split_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::fromJsonObject(QJsonObject json) {

    m_auto_split_config_isValid = ::OpenAPI::fromJsonValue(m_auto_split_config, json[QString("autoSplitConfig")]);
    m_auto_split_config_isSet = !json[QString("autoSplitConfig")].isNull() && m_auto_split_config_isValid;

    m_batch_input_config_isValid = ::OpenAPI::fromJsonValue(m_batch_input_config, json[QString("batchInputConfig")]);
    m_batch_input_config_isSet = !json[QString("batchInputConfig")].isNull() && m_batch_input_config_isValid;

    m_dataset_split_isValid = ::OpenAPI::fromJsonValue(m_dataset_split, json[QString("datasetSplit")]);
    m_dataset_split_isSet = !json[QString("datasetSplit")].isNull() && m_dataset_split_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_split_config.isSet()) {
        obj.insert(QString("autoSplitConfig"), ::OpenAPI::toJsonValue(m_auto_split_config));
    }
    if (m_batch_input_config.isSet()) {
        obj.insert(QString("batchInputConfig"), ::OpenAPI::toJsonValue(m_batch_input_config));
    }
    if (m_dataset_split_isSet) {
        obj.insert(QString("datasetSplit"), ::OpenAPI::toJsonValue(m_dataset_split));
    }
    return obj;
}

OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfigAutoSplitConfig OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::getAutoSplitConfig() const {
    return m_auto_split_config;
}
void OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::setAutoSplitConfig(const OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfigAutoSplitConfig &auto_split_config) {
    m_auto_split_config = auto_split_config;
    m_auto_split_config_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::is_auto_split_config_Set() const{
    return m_auto_split_config_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::is_auto_split_config_Valid() const{
    return m_auto_split_config_isValid;
}

OAIGoogleCloudDocumentaiV1beta3BatchDocumentsInputConfig OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::getBatchInputConfig() const {
    return m_batch_input_config;
}
void OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::setBatchInputConfig(const OAIGoogleCloudDocumentaiV1beta3BatchDocumentsInputConfig &batch_input_config) {
    m_batch_input_config = batch_input_config;
    m_batch_input_config_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::is_batch_input_config_Set() const{
    return m_batch_input_config_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::is_batch_input_config_Valid() const{
    return m_batch_input_config_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::getDatasetSplit() const {
    return m_dataset_split;
}
void OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::setDatasetSplit(const QString &dataset_split) {
    m_dataset_split = dataset_split;
    m_dataset_split_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::is_dataset_split_Set() const{
    return m_dataset_split_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::is_dataset_split_Valid() const{
    return m_dataset_split_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_split_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_input_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_split_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
