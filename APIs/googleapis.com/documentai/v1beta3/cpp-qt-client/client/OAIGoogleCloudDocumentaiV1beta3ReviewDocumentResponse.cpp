/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::~OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse() {}

void OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::initializeModel() {

    m_gcs_destination_isSet = false;
    m_gcs_destination_isValid = false;

    m_rejection_reason_isSet = false;
    m_rejection_reason_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::fromJsonObject(QJsonObject json) {

    m_gcs_destination_isValid = ::OpenAPI::fromJsonValue(m_gcs_destination, json[QString("gcsDestination")]);
    m_gcs_destination_isSet = !json[QString("gcsDestination")].isNull() && m_gcs_destination_isValid;

    m_rejection_reason_isValid = ::OpenAPI::fromJsonValue(m_rejection_reason, json[QString("rejectionReason")]);
    m_rejection_reason_isSet = !json[QString("rejectionReason")].isNull() && m_rejection_reason_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_gcs_destination_isSet) {
        obj.insert(QString("gcsDestination"), ::OpenAPI::toJsonValue(m_gcs_destination));
    }
    if (m_rejection_reason_isSet) {
        obj.insert(QString("rejectionReason"), ::OpenAPI::toJsonValue(m_rejection_reason));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::getGcsDestination() const {
    return m_gcs_destination;
}
void OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::setGcsDestination(const QString &gcs_destination) {
    m_gcs_destination = gcs_destination;
    m_gcs_destination_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::is_gcs_destination_Set() const{
    return m_gcs_destination_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::is_gcs_destination_Valid() const{
    return m_gcs_destination_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::getRejectionReason() const {
    return m_rejection_reason;
}
void OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::setRejectionReason(const QString &rejection_reason) {
    m_rejection_reason = rejection_reason;
    m_rejection_reason_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::is_rejection_reason_Set() const{
    return m_rejection_reason_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::is_rejection_reason_Valid() const{
    return m_rejection_reason_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::getState() const {
    return m_state;
}
void OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gcs_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rejection_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
