/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::~OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix() {}

void OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::initializeModel() {

    m_cols_isSet = false;
    m_cols_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::fromJsonObject(QJsonObject json) {

    m_cols_isValid = ::OpenAPI::fromJsonValue(m_cols, json[QString("cols")]);
    m_cols_isSet = !json[QString("cols")].isNull() && m_cols_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::asJsonObject() const {
    QJsonObject obj;
    if (m_cols_isSet) {
        obj.insert(QString("cols"), ::OpenAPI::toJsonValue(m_cols));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_rows_isSet) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::getCols() const {
    return m_cols;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::setCols(const qint32 &cols) {
    m_cols = cols;
    m_cols_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::is_cols_Set() const{
    return m_cols_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::is_cols_Valid() const{
    return m_cols_isValid;
}

QByteArray OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::getData() const {
    return m_data;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::setData(const QByteArray &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::is_data_Set() const{
    return m_data_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::is_data_Valid() const{
    return m_data_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::getRows() const {
    return m_rows;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::setRows(const qint32 &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::is_rows_Valid() const{
    return m_rows_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::getType() const {
    return m_type;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cols_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
