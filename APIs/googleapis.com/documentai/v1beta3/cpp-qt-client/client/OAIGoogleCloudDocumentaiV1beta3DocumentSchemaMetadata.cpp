/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::~OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata() {}

void OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::initializeModel() {

    m_document_allow_multiple_labels_isSet = false;
    m_document_allow_multiple_labels_isValid = false;

    m_document_splitter_isSet = false;
    m_document_splitter_isValid = false;

    m_prefixed_naming_on_properties_isSet = false;
    m_prefixed_naming_on_properties_isValid = false;

    m_skip_naming_validation_isSet = false;
    m_skip_naming_validation_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::fromJsonObject(QJsonObject json) {

    m_document_allow_multiple_labels_isValid = ::OpenAPI::fromJsonValue(m_document_allow_multiple_labels, json[QString("documentAllowMultipleLabels")]);
    m_document_allow_multiple_labels_isSet = !json[QString("documentAllowMultipleLabels")].isNull() && m_document_allow_multiple_labels_isValid;

    m_document_splitter_isValid = ::OpenAPI::fromJsonValue(m_document_splitter, json[QString("documentSplitter")]);
    m_document_splitter_isSet = !json[QString("documentSplitter")].isNull() && m_document_splitter_isValid;

    m_prefixed_naming_on_properties_isValid = ::OpenAPI::fromJsonValue(m_prefixed_naming_on_properties, json[QString("prefixedNamingOnProperties")]);
    m_prefixed_naming_on_properties_isSet = !json[QString("prefixedNamingOnProperties")].isNull() && m_prefixed_naming_on_properties_isValid;

    m_skip_naming_validation_isValid = ::OpenAPI::fromJsonValue(m_skip_naming_validation, json[QString("skipNamingValidation")]);
    m_skip_naming_validation_isSet = !json[QString("skipNamingValidation")].isNull() && m_skip_naming_validation_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_document_allow_multiple_labels_isSet) {
        obj.insert(QString("documentAllowMultipleLabels"), ::OpenAPI::toJsonValue(m_document_allow_multiple_labels));
    }
    if (m_document_splitter_isSet) {
        obj.insert(QString("documentSplitter"), ::OpenAPI::toJsonValue(m_document_splitter));
    }
    if (m_prefixed_naming_on_properties_isSet) {
        obj.insert(QString("prefixedNamingOnProperties"), ::OpenAPI::toJsonValue(m_prefixed_naming_on_properties));
    }
    if (m_skip_naming_validation_isSet) {
        obj.insert(QString("skipNamingValidation"), ::OpenAPI::toJsonValue(m_skip_naming_validation));
    }
    return obj;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::isDocumentAllowMultipleLabels() const {
    return m_document_allow_multiple_labels;
}
void OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::setDocumentAllowMultipleLabels(const bool &document_allow_multiple_labels) {
    m_document_allow_multiple_labels = document_allow_multiple_labels;
    m_document_allow_multiple_labels_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::is_document_allow_multiple_labels_Set() const{
    return m_document_allow_multiple_labels_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::is_document_allow_multiple_labels_Valid() const{
    return m_document_allow_multiple_labels_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::isDocumentSplitter() const {
    return m_document_splitter;
}
void OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::setDocumentSplitter(const bool &document_splitter) {
    m_document_splitter = document_splitter;
    m_document_splitter_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::is_document_splitter_Set() const{
    return m_document_splitter_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::is_document_splitter_Valid() const{
    return m_document_splitter_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::isPrefixedNamingOnProperties() const {
    return m_prefixed_naming_on_properties;
}
void OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::setPrefixedNamingOnProperties(const bool &prefixed_naming_on_properties) {
    m_prefixed_naming_on_properties = prefixed_naming_on_properties;
    m_prefixed_naming_on_properties_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::is_prefixed_naming_on_properties_Set() const{
    return m_prefixed_naming_on_properties_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::is_prefixed_naming_on_properties_Valid() const{
    return m_prefixed_naming_on_properties_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::isSkipNamingValidation() const {
    return m_skip_naming_validation;
}
void OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::setSkipNamingValidation(const bool &skip_naming_validation) {
    m_skip_naming_validation = skip_naming_validation;
    m_skip_naming_validation_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::is_skip_naming_validation_Set() const{
    return m_skip_naming_validation_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::is_skip_naming_validation_Valid() const{
    return m_skip_naming_validation_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_allow_multiple_labels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_splitter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefixed_naming_on_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_naming_validation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
