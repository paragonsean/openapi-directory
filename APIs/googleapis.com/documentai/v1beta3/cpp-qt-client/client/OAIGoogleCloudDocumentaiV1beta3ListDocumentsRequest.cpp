/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::~OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest() {}

void OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_return_total_size_isSet = false;
    m_return_total_size_isValid = false;

    m_skip_isSet = false;
    m_skip_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("pageToken")]);
    m_page_token_isSet = !json[QString("pageToken")].isNull() && m_page_token_isValid;

    m_return_total_size_isValid = ::OpenAPI::fromJsonValue(m_return_total_size, json[QString("returnTotalSize")]);
    m_return_total_size_isSet = !json[QString("returnTotalSize")].isNull() && m_return_total_size_isValid;

    m_skip_isValid = ::OpenAPI::fromJsonValue(m_skip, json[QString("skip")]);
    m_skip_isSet = !json[QString("skip")].isNull() && m_skip_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("pageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_return_total_size_isSet) {
        obj.insert(QString("returnTotalSize"), ::OpenAPI::toJsonValue(m_return_total_size));
    }
    if (m_skip_isSet) {
        obj.insert(QString("skip"), ::OpenAPI::toJsonValue(m_skip));
    }
    return obj;
}

QString OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::getFilter() const {
    return m_filter;
}
void OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::getPageSize() const {
    return m_page_size;
}
void OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::getPageToken() const {
    return m_page_token;
}
void OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::is_page_token_Valid() const{
    return m_page_token_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::isReturnTotalSize() const {
    return m_return_total_size;
}
void OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::setReturnTotalSize(const bool &return_total_size) {
    m_return_total_size = return_total_size;
    m_return_total_size_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::is_return_total_size_Set() const{
    return m_return_total_size_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::is_return_total_size_Valid() const{
    return m_return_total_size_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::getSkip() const {
    return m_skip;
}
void OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::setSkip(const qint32 &skip) {
    m_skip = skip;
    m_skip_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::is_skip_Set() const{
    return m_skip_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::is_skip_Valid() const{
    return m_skip_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_total_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta3ListDocumentsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
