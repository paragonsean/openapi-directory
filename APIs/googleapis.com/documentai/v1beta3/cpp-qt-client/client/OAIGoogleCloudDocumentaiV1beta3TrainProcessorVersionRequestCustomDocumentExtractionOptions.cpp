/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta3TrainProcessorVersionRequestCustomDocumentExtractionOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta3TrainProcessorVersionRequestCustomDocumentExtractionOptions::OAIGoogleCloudDocumentaiV1beta3TrainProcessorVersionRequestCustomDocumentExtractionOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta3TrainProcessorVersionRequestCustomDocumentExtractionOptions::OAIGoogleCloudDocumentaiV1beta3TrainProcessorVersionRequestCustomDocumentExtractionOptions() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta3TrainProcessorVersionRequestCustomDocumentExtractionOptions::~OAIGoogleCloudDocumentaiV1beta3TrainProcessorVersionRequestCustomDocumentExtractionOptions() {}

void OAIGoogleCloudDocumentaiV1beta3TrainProcessorVersionRequestCustomDocumentExtractionOptions::initializeModel() {

    m_training_method_isSet = false;
    m_training_method_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta3TrainProcessorVersionRequestCustomDocumentExtractionOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta3TrainProcessorVersionRequestCustomDocumentExtractionOptions::fromJsonObject(QJsonObject json) {

    m_training_method_isValid = ::OpenAPI::fromJsonValue(m_training_method, json[QString("trainingMethod")]);
    m_training_method_isSet = !json[QString("trainingMethod")].isNull() && m_training_method_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3TrainProcessorVersionRequestCustomDocumentExtractionOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta3TrainProcessorVersionRequestCustomDocumentExtractionOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_training_method_isSet) {
        obj.insert(QString("trainingMethod"), ::OpenAPI::toJsonValue(m_training_method));
    }
    return obj;
}

QString OAIGoogleCloudDocumentaiV1beta3TrainProcessorVersionRequestCustomDocumentExtractionOptions::getTrainingMethod() const {
    return m_training_method;
}
void OAIGoogleCloudDocumentaiV1beta3TrainProcessorVersionRequestCustomDocumentExtractionOptions::setTrainingMethod(const QString &training_method) {
    m_training_method = training_method;
    m_training_method_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3TrainProcessorVersionRequestCustomDocumentExtractionOptions::is_training_method_Set() const{
    return m_training_method_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3TrainProcessorVersionRequestCustomDocumentExtractionOptions::is_training_method_Valid() const{
    return m_training_method_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3TrainProcessorVersionRequestCustomDocumentExtractionOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_training_method_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta3TrainProcessorVersionRequestCustomDocumentExtractionOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
