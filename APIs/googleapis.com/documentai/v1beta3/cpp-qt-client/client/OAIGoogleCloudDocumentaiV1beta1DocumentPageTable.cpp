/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta1DocumentPageTable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::OAIGoogleCloudDocumentaiV1beta1DocumentPageTable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::OAIGoogleCloudDocumentaiV1beta1DocumentPageTable() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::~OAIGoogleCloudDocumentaiV1beta1DocumentPageTable() {}

void OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::initializeModel() {

    m_body_rows_isSet = false;
    m_body_rows_isValid = false;

    m_detected_languages_isSet = false;
    m_detected_languages_isValid = false;

    m_header_rows_isSet = false;
    m_header_rows_isValid = false;

    m_layout_isSet = false;
    m_layout_isValid = false;

    m_provenance_isSet = false;
    m_provenance_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::fromJsonObject(QJsonObject json) {

    m_body_rows_isValid = ::OpenAPI::fromJsonValue(m_body_rows, json[QString("bodyRows")]);
    m_body_rows_isSet = !json[QString("bodyRows")].isNull() && m_body_rows_isValid;

    m_detected_languages_isValid = ::OpenAPI::fromJsonValue(m_detected_languages, json[QString("detectedLanguages")]);
    m_detected_languages_isSet = !json[QString("detectedLanguages")].isNull() && m_detected_languages_isValid;

    m_header_rows_isValid = ::OpenAPI::fromJsonValue(m_header_rows, json[QString("headerRows")]);
    m_header_rows_isSet = !json[QString("headerRows")].isNull() && m_header_rows_isValid;

    m_layout_isValid = ::OpenAPI::fromJsonValue(m_layout, json[QString("layout")]);
    m_layout_isSet = !json[QString("layout")].isNull() && m_layout_isValid;

    m_provenance_isValid = ::OpenAPI::fromJsonValue(m_provenance, json[QString("provenance")]);
    m_provenance_isSet = !json[QString("provenance")].isNull() && m_provenance_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::asJsonObject() const {
    QJsonObject obj;
    if (m_body_rows.size() > 0) {
        obj.insert(QString("bodyRows"), ::OpenAPI::toJsonValue(m_body_rows));
    }
    if (m_detected_languages.size() > 0) {
        obj.insert(QString("detectedLanguages"), ::OpenAPI::toJsonValue(m_detected_languages));
    }
    if (m_header_rows.size() > 0) {
        obj.insert(QString("headerRows"), ::OpenAPI::toJsonValue(m_header_rows));
    }
    if (m_layout.isSet()) {
        obj.insert(QString("layout"), ::OpenAPI::toJsonValue(m_layout));
    }
    if (m_provenance.isSet()) {
        obj.insert(QString("provenance"), ::OpenAPI::toJsonValue(m_provenance));
    }
    return obj;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageTableTableRow> OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::getBodyRows() const {
    return m_body_rows;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::setBodyRows(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageTableTableRow> &body_rows) {
    m_body_rows = body_rows;
    m_body_rows_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::is_body_rows_Set() const{
    return m_body_rows_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::is_body_rows_Valid() const{
    return m_body_rows_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage> OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::getDetectedLanguages() const {
    return m_detected_languages;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::setDetectedLanguages(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage> &detected_languages) {
    m_detected_languages = detected_languages;
    m_detected_languages_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::is_detected_languages_Set() const{
    return m_detected_languages_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::is_detected_languages_Valid() const{
    return m_detected_languages_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageTableTableRow> OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::getHeaderRows() const {
    return m_header_rows;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::setHeaderRows(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageTableTableRow> &header_rows) {
    m_header_rows = header_rows;
    m_header_rows_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::is_header_rows_Set() const{
    return m_header_rows_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::is_header_rows_Valid() const{
    return m_header_rows_isValid;
}

OAIGoogleCloudDocumentaiV1beta1DocumentPageLayout OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::getLayout() const {
    return m_layout;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::setLayout(const OAIGoogleCloudDocumentaiV1beta1DocumentPageLayout &layout) {
    m_layout = layout;
    m_layout_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::is_layout_Set() const{
    return m_layout_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::is_layout_Valid() const{
    return m_layout_isValid;
}

OAIGoogleCloudDocumentaiV1beta1DocumentProvenance OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::getProvenance() const {
    return m_provenance;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::setProvenance(const OAIGoogleCloudDocumentaiV1beta1DocumentProvenance &provenance) {
    m_provenance = provenance;
    m_provenance_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::is_provenance_Set() const{
    return m_provenance_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::is_provenance_Valid() const{
    return m_provenance_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provenance.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPageTable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
