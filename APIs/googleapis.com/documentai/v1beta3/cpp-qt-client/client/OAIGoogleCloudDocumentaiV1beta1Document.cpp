/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta1Document.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta1Document::OAIGoogleCloudDocumentaiV1beta1Document(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta1Document::OAIGoogleCloudDocumentaiV1beta1Document() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta1Document::~OAIGoogleCloudDocumentaiV1beta1Document() {}

void OAIGoogleCloudDocumentaiV1beta1Document::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_entity_relations_isSet = false;
    m_entity_relations_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;

    m_revisions_isSet = false;
    m_revisions_isValid = false;

    m_shard_info_isSet = false;
    m_shard_info_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_text_changes_isSet = false;
    m_text_changes_isValid = false;

    m_text_styles_isSet = false;
    m_text_styles_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta1Document::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta1Document::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;

    m_entity_relations_isValid = ::OpenAPI::fromJsonValue(m_entity_relations, json[QString("entityRelations")]);
    m_entity_relations_isSet = !json[QString("entityRelations")].isNull() && m_entity_relations_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;

    m_revisions_isValid = ::OpenAPI::fromJsonValue(m_revisions, json[QString("revisions")]);
    m_revisions_isSet = !json[QString("revisions")].isNull() && m_revisions_isValid;

    m_shard_info_isValid = ::OpenAPI::fromJsonValue(m_shard_info, json[QString("shardInfo")]);
    m_shard_info_isSet = !json[QString("shardInfo")].isNull() && m_shard_info_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_text_changes_isValid = ::OpenAPI::fromJsonValue(m_text_changes, json[QString("textChanges")]);
    m_text_changes_isSet = !json[QString("textChanges")].isNull() && m_text_changes_isValid;

    m_text_styles_isValid = ::OpenAPI::fromJsonValue(m_text_styles, json[QString("textStyles")]);
    m_text_styles_isSet = !json[QString("textStyles")].isNull() && m_text_styles_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta1Document::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta1Document::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_entities.size() > 0) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_entity_relations.size() > 0) {
        obj.insert(QString("entityRelations"), ::OpenAPI::toJsonValue(m_entity_relations));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_pages.size() > 0) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    if (m_revisions.size() > 0) {
        obj.insert(QString("revisions"), ::OpenAPI::toJsonValue(m_revisions));
    }
    if (m_shard_info.isSet()) {
        obj.insert(QString("shardInfo"), ::OpenAPI::toJsonValue(m_shard_info));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_text_changes.size() > 0) {
        obj.insert(QString("textChanges"), ::OpenAPI::toJsonValue(m_text_changes));
    }
    if (m_text_styles.size() > 0) {
        obj.insert(QString("textStyles"), ::OpenAPI::toJsonValue(m_text_styles));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QByteArray OAIGoogleCloudDocumentaiV1beta1Document::getContent() const {
    return m_content;
}
void OAIGoogleCloudDocumentaiV1beta1Document::setContent(const QByteArray &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_content_Set() const{
    return m_content_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_content_Valid() const{
    return m_content_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentEntity> OAIGoogleCloudDocumentaiV1beta1Document::getEntities() const {
    return m_entities;
}
void OAIGoogleCloudDocumentaiV1beta1Document::setEntities(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentEntity> &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_entities_Valid() const{
    return m_entities_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentEntityRelation> OAIGoogleCloudDocumentaiV1beta1Document::getEntityRelations() const {
    return m_entity_relations;
}
void OAIGoogleCloudDocumentaiV1beta1Document::setEntityRelations(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentEntityRelation> &entity_relations) {
    m_entity_relations = entity_relations;
    m_entity_relations_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_entity_relations_Set() const{
    return m_entity_relations_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_entity_relations_Valid() const{
    return m_entity_relations_isValid;
}

OAIGoogleRpcStatus OAIGoogleCloudDocumentaiV1beta1Document::getError() const {
    return m_error;
}
void OAIGoogleCloudDocumentaiV1beta1Document::setError(const OAIGoogleRpcStatus &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_error_Set() const{
    return m_error_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta1Document::getMimeType() const {
    return m_mime_type;
}
void OAIGoogleCloudDocumentaiV1beta1Document::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentPage> OAIGoogleCloudDocumentaiV1beta1Document::getPages() const {
    return m_pages;
}
void OAIGoogleCloudDocumentaiV1beta1Document::setPages(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentPage> &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_pages_Valid() const{
    return m_pages_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentRevision> OAIGoogleCloudDocumentaiV1beta1Document::getRevisions() const {
    return m_revisions;
}
void OAIGoogleCloudDocumentaiV1beta1Document::setRevisions(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentRevision> &revisions) {
    m_revisions = revisions;
    m_revisions_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_revisions_Set() const{
    return m_revisions_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_revisions_Valid() const{
    return m_revisions_isValid;
}

OAIGoogleCloudDocumentaiV1beta1DocumentShardInfo OAIGoogleCloudDocumentaiV1beta1Document::getShardInfo() const {
    return m_shard_info;
}
void OAIGoogleCloudDocumentaiV1beta1Document::setShardInfo(const OAIGoogleCloudDocumentaiV1beta1DocumentShardInfo &shard_info) {
    m_shard_info = shard_info;
    m_shard_info_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_shard_info_Set() const{
    return m_shard_info_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_shard_info_Valid() const{
    return m_shard_info_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta1Document::getText() const {
    return m_text;
}
void OAIGoogleCloudDocumentaiV1beta1Document::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_text_Set() const{
    return m_text_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_text_Valid() const{
    return m_text_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentTextChange> OAIGoogleCloudDocumentaiV1beta1Document::getTextChanges() const {
    return m_text_changes;
}
void OAIGoogleCloudDocumentaiV1beta1Document::setTextChanges(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentTextChange> &text_changes) {
    m_text_changes = text_changes;
    m_text_changes_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_text_changes_Set() const{
    return m_text_changes_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_text_changes_Valid() const{
    return m_text_changes_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentStyle> OAIGoogleCloudDocumentaiV1beta1Document::getTextStyles() const {
    return m_text_styles;
}
void OAIGoogleCloudDocumentaiV1beta1Document::setTextStyles(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentStyle> &text_styles) {
    m_text_styles = text_styles;
    m_text_styles_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_text_styles_Set() const{
    return m_text_styles_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_text_styles_Valid() const{
    return m_text_styles_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta1Document::getUri() const {
    return m_uri;
}
void OAIGoogleCloudDocumentaiV1beta1Document::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_relations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_revisions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shard_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_changes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_styles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta1Document::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
