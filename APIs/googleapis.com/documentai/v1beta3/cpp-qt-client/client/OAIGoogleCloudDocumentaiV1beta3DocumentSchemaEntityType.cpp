/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::~OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType() {}

void OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::initializeModel() {

    m_base_types_isSet = false;
    m_base_types_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_entity_type_metadata_isSet = false;
    m_entity_type_metadata_isValid = false;

    m_enum_values_isSet = false;
    m_enum_values_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::fromJsonObject(QJsonObject json) {

    m_base_types_isValid = ::OpenAPI::fromJsonValue(m_base_types, json[QString("baseTypes")]);
    m_base_types_isSet = !json[QString("baseTypes")].isNull() && m_base_types_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_entity_type_metadata_isValid = ::OpenAPI::fromJsonValue(m_entity_type_metadata, json[QString("entityTypeMetadata")]);
    m_entity_type_metadata_isSet = !json[QString("entityTypeMetadata")].isNull() && m_entity_type_metadata_isValid;

    m_enum_values_isValid = ::OpenAPI::fromJsonValue(m_enum_values, json[QString("enumValues")]);
    m_enum_values_isSet = !json[QString("enumValues")].isNull() && m_enum_values_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::asJsonObject() const {
    QJsonObject obj;
    if (m_base_types.size() > 0) {
        obj.insert(QString("baseTypes"), ::OpenAPI::toJsonValue(m_base_types));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_entity_type_metadata.isSet()) {
        obj.insert(QString("entityTypeMetadata"), ::OpenAPI::toJsonValue(m_entity_type_metadata));
    }
    if (m_enum_values.isSet()) {
        obj.insert(QString("enumValues"), ::OpenAPI::toJsonValue(m_enum_values));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

QList<QString> OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::getBaseTypes() const {
    return m_base_types;
}
void OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::setBaseTypes(const QList<QString> &base_types) {
    m_base_types = base_types;
    m_base_types_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::is_base_types_Set() const{
    return m_base_types_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::is_base_types_Valid() const{
    return m_base_types_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIGoogleCloudDocumentaiV1beta3EntityTypeMetadata OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::getEntityTypeMetadata() const {
    return m_entity_type_metadata;
}
void OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::setEntityTypeMetadata(const OAIGoogleCloudDocumentaiV1beta3EntityTypeMetadata &entity_type_metadata) {
    m_entity_type_metadata = entity_type_metadata;
    m_entity_type_metadata_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::is_entity_type_metadata_Set() const{
    return m_entity_type_metadata_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::is_entity_type_metadata_Valid() const{
    return m_entity_type_metadata_isValid;
}

OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeEnumValues OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::getEnumValues() const {
    return m_enum_values;
}
void OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::setEnumValues(const OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeEnumValues &enum_values) {
    m_enum_values = enum_values;
    m_enum_values_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::is_enum_values_Set() const{
    return m_enum_values_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::is_enum_values_Valid() const{
    return m_enum_values_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::getName() const {
    return m_name;
}
void OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeProperty> OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::getProperties() const {
    return m_properties;
}
void OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::setProperties(const QList<OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeProperty> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enum_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentSchemaEntityType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
