/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta3ProcessOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta3ProcessOptions::OAIGoogleCloudDocumentaiV1beta3ProcessOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta3ProcessOptions::OAIGoogleCloudDocumentaiV1beta3ProcessOptions() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta3ProcessOptions::~OAIGoogleCloudDocumentaiV1beta3ProcessOptions() {}

void OAIGoogleCloudDocumentaiV1beta3ProcessOptions::initializeModel() {

    m_from_end_isSet = false;
    m_from_end_isValid = false;

    m_from_start_isSet = false;
    m_from_start_isValid = false;

    m_individual_page_selector_isSet = false;
    m_individual_page_selector_isValid = false;

    m_ocr_config_isSet = false;
    m_ocr_config_isValid = false;

    m_schema_override_isSet = false;
    m_schema_override_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta3ProcessOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta3ProcessOptions::fromJsonObject(QJsonObject json) {

    m_from_end_isValid = ::OpenAPI::fromJsonValue(m_from_end, json[QString("fromEnd")]);
    m_from_end_isSet = !json[QString("fromEnd")].isNull() && m_from_end_isValid;

    m_from_start_isValid = ::OpenAPI::fromJsonValue(m_from_start, json[QString("fromStart")]);
    m_from_start_isSet = !json[QString("fromStart")].isNull() && m_from_start_isValid;

    m_individual_page_selector_isValid = ::OpenAPI::fromJsonValue(m_individual_page_selector, json[QString("individualPageSelector")]);
    m_individual_page_selector_isSet = !json[QString("individualPageSelector")].isNull() && m_individual_page_selector_isValid;

    m_ocr_config_isValid = ::OpenAPI::fromJsonValue(m_ocr_config, json[QString("ocrConfig")]);
    m_ocr_config_isSet = !json[QString("ocrConfig")].isNull() && m_ocr_config_isValid;

    m_schema_override_isValid = ::OpenAPI::fromJsonValue(m_schema_override, json[QString("schemaOverride")]);
    m_schema_override_isSet = !json[QString("schemaOverride")].isNull() && m_schema_override_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ProcessOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta3ProcessOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_from_end_isSet) {
        obj.insert(QString("fromEnd"), ::OpenAPI::toJsonValue(m_from_end));
    }
    if (m_from_start_isSet) {
        obj.insert(QString("fromStart"), ::OpenAPI::toJsonValue(m_from_start));
    }
    if (m_individual_page_selector.isSet()) {
        obj.insert(QString("individualPageSelector"), ::OpenAPI::toJsonValue(m_individual_page_selector));
    }
    if (m_ocr_config.isSet()) {
        obj.insert(QString("ocrConfig"), ::OpenAPI::toJsonValue(m_ocr_config));
    }
    if (m_schema_override.isSet()) {
        obj.insert(QString("schemaOverride"), ::OpenAPI::toJsonValue(m_schema_override));
    }
    return obj;
}

qint32 OAIGoogleCloudDocumentaiV1beta3ProcessOptions::getFromEnd() const {
    return m_from_end;
}
void OAIGoogleCloudDocumentaiV1beta3ProcessOptions::setFromEnd(const qint32 &from_end) {
    m_from_end = from_end;
    m_from_end_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessOptions::is_from_end_Set() const{
    return m_from_end_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessOptions::is_from_end_Valid() const{
    return m_from_end_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1beta3ProcessOptions::getFromStart() const {
    return m_from_start;
}
void OAIGoogleCloudDocumentaiV1beta3ProcessOptions::setFromStart(const qint32 &from_start) {
    m_from_start = from_start;
    m_from_start_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessOptions::is_from_start_Set() const{
    return m_from_start_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessOptions::is_from_start_Valid() const{
    return m_from_start_isValid;
}

OAIGoogleCloudDocumentaiV1beta3ProcessOptionsIndividualPageSelector OAIGoogleCloudDocumentaiV1beta3ProcessOptions::getIndividualPageSelector() const {
    return m_individual_page_selector;
}
void OAIGoogleCloudDocumentaiV1beta3ProcessOptions::setIndividualPageSelector(const OAIGoogleCloudDocumentaiV1beta3ProcessOptionsIndividualPageSelector &individual_page_selector) {
    m_individual_page_selector = individual_page_selector;
    m_individual_page_selector_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessOptions::is_individual_page_selector_Set() const{
    return m_individual_page_selector_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessOptions::is_individual_page_selector_Valid() const{
    return m_individual_page_selector_isValid;
}

OAIGoogleCloudDocumentaiV1beta3OcrConfig OAIGoogleCloudDocumentaiV1beta3ProcessOptions::getOcrConfig() const {
    return m_ocr_config;
}
void OAIGoogleCloudDocumentaiV1beta3ProcessOptions::setOcrConfig(const OAIGoogleCloudDocumentaiV1beta3OcrConfig &ocr_config) {
    m_ocr_config = ocr_config;
    m_ocr_config_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessOptions::is_ocr_config_Set() const{
    return m_ocr_config_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessOptions::is_ocr_config_Valid() const{
    return m_ocr_config_isValid;
}

OAIGoogleCloudDocumentaiV1beta3DocumentSchema OAIGoogleCloudDocumentaiV1beta3ProcessOptions::getSchemaOverride() const {
    return m_schema_override;
}
void OAIGoogleCloudDocumentaiV1beta3ProcessOptions::setSchemaOverride(const OAIGoogleCloudDocumentaiV1beta3DocumentSchema &schema_override) {
    m_schema_override = schema_override;
    m_schema_override_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessOptions::is_schema_override_Set() const{
    return m_schema_override_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessOptions::is_schema_override_Valid() const{
    return m_schema_override_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_page_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ocr_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_override.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
