/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta3EvaluationCounters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::OAIGoogleCloudDocumentaiV1beta3EvaluationCounters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::OAIGoogleCloudDocumentaiV1beta3EvaluationCounters() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::~OAIGoogleCloudDocumentaiV1beta3EvaluationCounters() {}

void OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::initializeModel() {

    m_evaluated_documents_count_isSet = false;
    m_evaluated_documents_count_isValid = false;

    m_failed_documents_count_isSet = false;
    m_failed_documents_count_isValid = false;

    m_input_documents_count_isSet = false;
    m_input_documents_count_isValid = false;

    m_invalid_documents_count_isSet = false;
    m_invalid_documents_count_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::fromJsonObject(QJsonObject json) {

    m_evaluated_documents_count_isValid = ::OpenAPI::fromJsonValue(m_evaluated_documents_count, json[QString("evaluatedDocumentsCount")]);
    m_evaluated_documents_count_isSet = !json[QString("evaluatedDocumentsCount")].isNull() && m_evaluated_documents_count_isValid;

    m_failed_documents_count_isValid = ::OpenAPI::fromJsonValue(m_failed_documents_count, json[QString("failedDocumentsCount")]);
    m_failed_documents_count_isSet = !json[QString("failedDocumentsCount")].isNull() && m_failed_documents_count_isValid;

    m_input_documents_count_isValid = ::OpenAPI::fromJsonValue(m_input_documents_count, json[QString("inputDocumentsCount")]);
    m_input_documents_count_isSet = !json[QString("inputDocumentsCount")].isNull() && m_input_documents_count_isValid;

    m_invalid_documents_count_isValid = ::OpenAPI::fromJsonValue(m_invalid_documents_count, json[QString("invalidDocumentsCount")]);
    m_invalid_documents_count_isSet = !json[QString("invalidDocumentsCount")].isNull() && m_invalid_documents_count_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::asJsonObject() const {
    QJsonObject obj;
    if (m_evaluated_documents_count_isSet) {
        obj.insert(QString("evaluatedDocumentsCount"), ::OpenAPI::toJsonValue(m_evaluated_documents_count));
    }
    if (m_failed_documents_count_isSet) {
        obj.insert(QString("failedDocumentsCount"), ::OpenAPI::toJsonValue(m_failed_documents_count));
    }
    if (m_input_documents_count_isSet) {
        obj.insert(QString("inputDocumentsCount"), ::OpenAPI::toJsonValue(m_input_documents_count));
    }
    if (m_invalid_documents_count_isSet) {
        obj.insert(QString("invalidDocumentsCount"), ::OpenAPI::toJsonValue(m_invalid_documents_count));
    }
    return obj;
}

qint32 OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::getEvaluatedDocumentsCount() const {
    return m_evaluated_documents_count;
}
void OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::setEvaluatedDocumentsCount(const qint32 &evaluated_documents_count) {
    m_evaluated_documents_count = evaluated_documents_count;
    m_evaluated_documents_count_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::is_evaluated_documents_count_Set() const{
    return m_evaluated_documents_count_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::is_evaluated_documents_count_Valid() const{
    return m_evaluated_documents_count_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::getFailedDocumentsCount() const {
    return m_failed_documents_count;
}
void OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::setFailedDocumentsCount(const qint32 &failed_documents_count) {
    m_failed_documents_count = failed_documents_count;
    m_failed_documents_count_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::is_failed_documents_count_Set() const{
    return m_failed_documents_count_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::is_failed_documents_count_Valid() const{
    return m_failed_documents_count_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::getInputDocumentsCount() const {
    return m_input_documents_count;
}
void OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::setInputDocumentsCount(const qint32 &input_documents_count) {
    m_input_documents_count = input_documents_count;
    m_input_documents_count_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::is_input_documents_count_Set() const{
    return m_input_documents_count_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::is_input_documents_count_Valid() const{
    return m_input_documents_count_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::getInvalidDocumentsCount() const {
    return m_invalid_documents_count;
}
void OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::setInvalidDocumentsCount(const qint32 &invalid_documents_count) {
    m_invalid_documents_count = invalid_documents_count;
    m_invalid_documents_count_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::is_invalid_documents_count_Set() const{
    return m_invalid_documents_count_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::is_invalid_documents_count_Valid() const{
    return m_invalid_documents_count_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evaluated_documents_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_documents_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_documents_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_documents_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta3EvaluationCounters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
