/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::~OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse() {}

void OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::initializeModel() {

    m_document_metadata_isSet = false;
    m_document_metadata_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_total_size_isSet = false;
    m_total_size_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::fromJsonObject(QJsonObject json) {

    m_document_metadata_isValid = ::OpenAPI::fromJsonValue(m_document_metadata, json[QString("documentMetadata")]);
    m_document_metadata_isSet = !json[QString("documentMetadata")].isNull() && m_document_metadata_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_total_size_isValid = ::OpenAPI::fromJsonValue(m_total_size, json[QString("totalSize")]);
    m_total_size_isSet = !json[QString("totalSize")].isNull() && m_total_size_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_document_metadata.size() > 0) {
        obj.insert(QString("documentMetadata"), ::OpenAPI::toJsonValue(m_document_metadata));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_total_size_isSet) {
        obj.insert(QString("totalSize"), ::OpenAPI::toJsonValue(m_total_size));
    }
    return obj;
}

QList<OAIGoogleCloudDocumentaiV1beta3DocumentMetadata> OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::getDocumentMetadata() const {
    return m_document_metadata;
}
void OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::setDocumentMetadata(const QList<OAIGoogleCloudDocumentaiV1beta3DocumentMetadata> &document_metadata) {
    m_document_metadata = document_metadata;
    m_document_metadata_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::is_document_metadata_Set() const{
    return m_document_metadata_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::is_document_metadata_Valid() const{
    return m_document_metadata_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::getTotalSize() const {
    return m_total_size;
}
void OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::setTotalSize(const qint32 &total_size) {
    m_total_size = total_size;
    m_total_size_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::is_total_size_Set() const{
    return m_total_size_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::is_total_size_Valid() const{
    return m_total_size_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta3ListDocumentsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
