/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::~OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures() {}

void OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::initializeModel() {

    m_compute_style_info_isSet = false;
    m_compute_style_info_isValid = false;

    m_enable_math_ocr_isSet = false;
    m_enable_math_ocr_isValid = false;

    m_enable_selection_mark_detection_isSet = false;
    m_enable_selection_mark_detection_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::fromJsonObject(QJsonObject json) {

    m_compute_style_info_isValid = ::OpenAPI::fromJsonValue(m_compute_style_info, json[QString("computeStyleInfo")]);
    m_compute_style_info_isSet = !json[QString("computeStyleInfo")].isNull() && m_compute_style_info_isValid;

    m_enable_math_ocr_isValid = ::OpenAPI::fromJsonValue(m_enable_math_ocr, json[QString("enableMathOcr")]);
    m_enable_math_ocr_isSet = !json[QString("enableMathOcr")].isNull() && m_enable_math_ocr_isValid;

    m_enable_selection_mark_detection_isValid = ::OpenAPI::fromJsonValue(m_enable_selection_mark_detection, json[QString("enableSelectionMarkDetection")]);
    m_enable_selection_mark_detection_isSet = !json[QString("enableSelectionMarkDetection")].isNull() && m_enable_selection_mark_detection_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::asJsonObject() const {
    QJsonObject obj;
    if (m_compute_style_info_isSet) {
        obj.insert(QString("computeStyleInfo"), ::OpenAPI::toJsonValue(m_compute_style_info));
    }
    if (m_enable_math_ocr_isSet) {
        obj.insert(QString("enableMathOcr"), ::OpenAPI::toJsonValue(m_enable_math_ocr));
    }
    if (m_enable_selection_mark_detection_isSet) {
        obj.insert(QString("enableSelectionMarkDetection"), ::OpenAPI::toJsonValue(m_enable_selection_mark_detection));
    }
    return obj;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::isComputeStyleInfo() const {
    return m_compute_style_info;
}
void OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::setComputeStyleInfo(const bool &compute_style_info) {
    m_compute_style_info = compute_style_info;
    m_compute_style_info_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::is_compute_style_info_Set() const{
    return m_compute_style_info_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::is_compute_style_info_Valid() const{
    return m_compute_style_info_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::isEnableMathOcr() const {
    return m_enable_math_ocr;
}
void OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::setEnableMathOcr(const bool &enable_math_ocr) {
    m_enable_math_ocr = enable_math_ocr;
    m_enable_math_ocr_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::is_enable_math_ocr_Set() const{
    return m_enable_math_ocr_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::is_enable_math_ocr_Valid() const{
    return m_enable_math_ocr_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::isEnableSelectionMarkDetection() const {
    return m_enable_selection_mark_detection;
}
void OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::setEnableSelectionMarkDetection(const bool &enable_selection_mark_detection) {
    m_enable_selection_mark_detection = enable_selection_mark_detection;
    m_enable_selection_mark_detection_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::is_enable_selection_mark_detection_Set() const{
    return m_enable_selection_mark_detection_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::is_enable_selection_mark_detection_Valid() const{
    return m_enable_selection_mark_detection_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compute_style_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_math_ocr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_selection_mark_detection_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
