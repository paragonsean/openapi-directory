/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta3DocumentMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::OAIGoogleCloudDocumentaiV1beta3DocumentMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::OAIGoogleCloudDocumentaiV1beta3DocumentMetadata() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::~OAIGoogleCloudDocumentaiV1beta3DocumentMetadata() {}

void OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::initializeModel() {

    m_dataset_type_isSet = false;
    m_dataset_type_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_labeling_state_isSet = false;
    m_labeling_state_isValid = false;

    m_page_count_isSet = false;
    m_page_count_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::fromJsonObject(QJsonObject json) {

    m_dataset_type_isValid = ::OpenAPI::fromJsonValue(m_dataset_type, json[QString("datasetType")]);
    m_dataset_type_isSet = !json[QString("datasetType")].isNull() && m_dataset_type_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_document_id_isValid = ::OpenAPI::fromJsonValue(m_document_id, json[QString("documentId")]);
    m_document_id_isSet = !json[QString("documentId")].isNull() && m_document_id_isValid;

    m_labeling_state_isValid = ::OpenAPI::fromJsonValue(m_labeling_state, json[QString("labelingState")]);
    m_labeling_state_isSet = !json[QString("labelingState")].isNull() && m_labeling_state_isValid;

    m_page_count_isValid = ::OpenAPI::fromJsonValue(m_page_count, json[QString("pageCount")]);
    m_page_count_isSet = !json[QString("pageCount")].isNull() && m_page_count_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_type_isSet) {
        obj.insert(QString("datasetType"), ::OpenAPI::toJsonValue(m_dataset_type));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_document_id.isSet()) {
        obj.insert(QString("documentId"), ::OpenAPI::toJsonValue(m_document_id));
    }
    if (m_labeling_state_isSet) {
        obj.insert(QString("labelingState"), ::OpenAPI::toJsonValue(m_labeling_state));
    }
    if (m_page_count_isSet) {
        obj.insert(QString("pageCount"), ::OpenAPI::toJsonValue(m_page_count));
    }
    return obj;
}

QString OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::getDatasetType() const {
    return m_dataset_type;
}
void OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::setDatasetType(const QString &dataset_type) {
    m_dataset_type = dataset_type;
    m_dataset_type_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::is_dataset_type_Set() const{
    return m_dataset_type_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::is_dataset_type_Valid() const{
    return m_dataset_type_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIGoogleCloudDocumentaiV1beta3DocumentId OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::getDocumentId() const {
    return m_document_id;
}
void OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::setDocumentId(const OAIGoogleCloudDocumentaiV1beta3DocumentId &document_id) {
    m_document_id = document_id;
    m_document_id_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::is_document_id_Valid() const{
    return m_document_id_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::getLabelingState() const {
    return m_labeling_state;
}
void OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::setLabelingState(const QString &labeling_state) {
    m_labeling_state = labeling_state;
    m_labeling_state_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::is_labeling_state_Set() const{
    return m_labeling_state_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::is_labeling_state_Valid() const{
    return m_labeling_state_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::getPageCount() const {
    return m_page_count;
}
void OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::setPageCount(const qint32 &page_count) {
    m_page_count = page_count;
    m_page_count_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::is_page_count_Set() const{
    return m_page_count_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::is_page_count_Valid() const{
    return m_page_count_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labeling_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta3DocumentMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
