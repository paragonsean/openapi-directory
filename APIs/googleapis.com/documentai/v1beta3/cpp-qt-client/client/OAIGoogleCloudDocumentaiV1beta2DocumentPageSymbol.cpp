/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol::OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol::OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol::~OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol() {}

void OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol::initializeModel() {

    m_detected_languages_isSet = false;
    m_detected_languages_isValid = false;

    m_layout_isSet = false;
    m_layout_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol::fromJsonObject(QJsonObject json) {

    m_detected_languages_isValid = ::OpenAPI::fromJsonValue(m_detected_languages, json[QString("detectedLanguages")]);
    m_detected_languages_isSet = !json[QString("detectedLanguages")].isNull() && m_detected_languages_isValid;

    m_layout_isValid = ::OpenAPI::fromJsonValue(m_layout, json[QString("layout")]);
    m_layout_isSet = !json[QString("layout")].isNull() && m_layout_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol::asJsonObject() const {
    QJsonObject obj;
    if (m_detected_languages.size() > 0) {
        obj.insert(QString("detectedLanguages"), ::OpenAPI::toJsonValue(m_detected_languages));
    }
    if (m_layout.isSet()) {
        obj.insert(QString("layout"), ::OpenAPI::toJsonValue(m_layout));
    }
    return obj;
}

QList<OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage> OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol::getDetectedLanguages() const {
    return m_detected_languages;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol::setDetectedLanguages(const QList<OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage> &detected_languages) {
    m_detected_languages = detected_languages;
    m_detected_languages_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol::is_detected_languages_Set() const{
    return m_detected_languages_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol::is_detected_languages_Valid() const{
    return m_detected_languages_isValid;
}

OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol::getLayout() const {
    return m_layout;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol::setLayout(const OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout &layout) {
    m_layout = layout;
    m_layout_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol::is_layout_Set() const{
    return m_layout_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol::is_layout_Valid() const{
    return m_layout_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detected_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageSymbol::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
