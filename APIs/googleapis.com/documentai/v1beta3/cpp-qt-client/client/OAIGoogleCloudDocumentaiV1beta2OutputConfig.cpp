/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta2OutputConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta2OutputConfig::OAIGoogleCloudDocumentaiV1beta2OutputConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta2OutputConfig::OAIGoogleCloudDocumentaiV1beta2OutputConfig() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta2OutputConfig::~OAIGoogleCloudDocumentaiV1beta2OutputConfig() {}

void OAIGoogleCloudDocumentaiV1beta2OutputConfig::initializeModel() {

    m_gcs_destination_isSet = false;
    m_gcs_destination_isValid = false;

    m_pages_per_shard_isSet = false;
    m_pages_per_shard_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta2OutputConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta2OutputConfig::fromJsonObject(QJsonObject json) {

    m_gcs_destination_isValid = ::OpenAPI::fromJsonValue(m_gcs_destination, json[QString("gcsDestination")]);
    m_gcs_destination_isSet = !json[QString("gcsDestination")].isNull() && m_gcs_destination_isValid;

    m_pages_per_shard_isValid = ::OpenAPI::fromJsonValue(m_pages_per_shard, json[QString("pagesPerShard")]);
    m_pages_per_shard_isSet = !json[QString("pagesPerShard")].isNull() && m_pages_per_shard_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2OutputConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta2OutputConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_gcs_destination.isSet()) {
        obj.insert(QString("gcsDestination"), ::OpenAPI::toJsonValue(m_gcs_destination));
    }
    if (m_pages_per_shard_isSet) {
        obj.insert(QString("pagesPerShard"), ::OpenAPI::toJsonValue(m_pages_per_shard));
    }
    return obj;
}

OAIGoogleCloudDocumentaiV1beta2GcsDestination OAIGoogleCloudDocumentaiV1beta2OutputConfig::getGcsDestination() const {
    return m_gcs_destination;
}
void OAIGoogleCloudDocumentaiV1beta2OutputConfig::setGcsDestination(const OAIGoogleCloudDocumentaiV1beta2GcsDestination &gcs_destination) {
    m_gcs_destination = gcs_destination;
    m_gcs_destination_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2OutputConfig::is_gcs_destination_Set() const{
    return m_gcs_destination_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2OutputConfig::is_gcs_destination_Valid() const{
    return m_gcs_destination_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1beta2OutputConfig::getPagesPerShard() const {
    return m_pages_per_shard;
}
void OAIGoogleCloudDocumentaiV1beta2OutputConfig::setPagesPerShard(const qint32 &pages_per_shard) {
    m_pages_per_shard = pages_per_shard;
    m_pages_per_shard_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2OutputConfig::is_pages_per_shard_Set() const{
    return m_pages_per_shard_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2OutputConfig::is_pages_per_shard_Valid() const{
    return m_pages_per_shard_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta2OutputConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gcs_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages_per_shard_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta2OutputConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
