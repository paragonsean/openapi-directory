/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta3ProcessRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta3ProcessRequest::OAIGoogleCloudDocumentaiV1beta3ProcessRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta3ProcessRequest::OAIGoogleCloudDocumentaiV1beta3ProcessRequest() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta3ProcessRequest::~OAIGoogleCloudDocumentaiV1beta3ProcessRequest() {}

void OAIGoogleCloudDocumentaiV1beta3ProcessRequest::initializeModel() {

    m_document_isSet = false;
    m_document_isValid = false;

    m_field_mask_isSet = false;
    m_field_mask_isValid = false;

    m_gcs_document_isSet = false;
    m_gcs_document_isValid = false;

    m_inline_document_isSet = false;
    m_inline_document_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_process_options_isSet = false;
    m_process_options_isValid = false;

    m_raw_document_isSet = false;
    m_raw_document_isValid = false;

    m_skip_human_review_isSet = false;
    m_skip_human_review_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta3ProcessRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta3ProcessRequest::fromJsonObject(QJsonObject json) {

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_field_mask_isValid = ::OpenAPI::fromJsonValue(m_field_mask, json[QString("fieldMask")]);
    m_field_mask_isSet = !json[QString("fieldMask")].isNull() && m_field_mask_isValid;

    m_gcs_document_isValid = ::OpenAPI::fromJsonValue(m_gcs_document, json[QString("gcsDocument")]);
    m_gcs_document_isSet = !json[QString("gcsDocument")].isNull() && m_gcs_document_isValid;

    m_inline_document_isValid = ::OpenAPI::fromJsonValue(m_inline_document, json[QString("inlineDocument")]);
    m_inline_document_isSet = !json[QString("inlineDocument")].isNull() && m_inline_document_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_process_options_isValid = ::OpenAPI::fromJsonValue(m_process_options, json[QString("processOptions")]);
    m_process_options_isSet = !json[QString("processOptions")].isNull() && m_process_options_isValid;

    m_raw_document_isValid = ::OpenAPI::fromJsonValue(m_raw_document, json[QString("rawDocument")]);
    m_raw_document_isSet = !json[QString("rawDocument")].isNull() && m_raw_document_isValid;

    m_skip_human_review_isValid = ::OpenAPI::fromJsonValue(m_skip_human_review, json[QString("skipHumanReview")]);
    m_skip_human_review_isSet = !json[QString("skipHumanReview")].isNull() && m_skip_human_review_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ProcessRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta3ProcessRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_document.isSet()) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_field_mask_isSet) {
        obj.insert(QString("fieldMask"), ::OpenAPI::toJsonValue(m_field_mask));
    }
    if (m_gcs_document.isSet()) {
        obj.insert(QString("gcsDocument"), ::OpenAPI::toJsonValue(m_gcs_document));
    }
    if (m_inline_document.isSet()) {
        obj.insert(QString("inlineDocument"), ::OpenAPI::toJsonValue(m_inline_document));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_process_options.isSet()) {
        obj.insert(QString("processOptions"), ::OpenAPI::toJsonValue(m_process_options));
    }
    if (m_raw_document.isSet()) {
        obj.insert(QString("rawDocument"), ::OpenAPI::toJsonValue(m_raw_document));
    }
    if (m_skip_human_review_isSet) {
        obj.insert(QString("skipHumanReview"), ::OpenAPI::toJsonValue(m_skip_human_review));
    }
    return obj;
}

OAIGoogleCloudDocumentaiV1beta3Document OAIGoogleCloudDocumentaiV1beta3ProcessRequest::getDocument() const {
    return m_document;
}
void OAIGoogleCloudDocumentaiV1beta3ProcessRequest::setDocument(const OAIGoogleCloudDocumentaiV1beta3Document &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessRequest::is_document_Set() const{
    return m_document_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessRequest::is_document_Valid() const{
    return m_document_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ProcessRequest::getFieldMask() const {
    return m_field_mask;
}
void OAIGoogleCloudDocumentaiV1beta3ProcessRequest::setFieldMask(const QString &field_mask) {
    m_field_mask = field_mask;
    m_field_mask_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessRequest::is_field_mask_Set() const{
    return m_field_mask_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessRequest::is_field_mask_Valid() const{
    return m_field_mask_isValid;
}

OAIGoogleCloudDocumentaiV1beta3GcsDocument OAIGoogleCloudDocumentaiV1beta3ProcessRequest::getGcsDocument() const {
    return m_gcs_document;
}
void OAIGoogleCloudDocumentaiV1beta3ProcessRequest::setGcsDocument(const OAIGoogleCloudDocumentaiV1beta3GcsDocument &gcs_document) {
    m_gcs_document = gcs_document;
    m_gcs_document_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessRequest::is_gcs_document_Set() const{
    return m_gcs_document_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessRequest::is_gcs_document_Valid() const{
    return m_gcs_document_isValid;
}

OAIGoogleCloudDocumentaiV1beta3Document OAIGoogleCloudDocumentaiV1beta3ProcessRequest::getInlineDocument() const {
    return m_inline_document;
}
void OAIGoogleCloudDocumentaiV1beta3ProcessRequest::setInlineDocument(const OAIGoogleCloudDocumentaiV1beta3Document &inline_document) {
    m_inline_document = inline_document;
    m_inline_document_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessRequest::is_inline_document_Set() const{
    return m_inline_document_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessRequest::is_inline_document_Valid() const{
    return m_inline_document_isValid;
}

QMap<QString, QString> OAIGoogleCloudDocumentaiV1beta3ProcessRequest::getLabels() const {
    return m_labels;
}
void OAIGoogleCloudDocumentaiV1beta3ProcessRequest::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessRequest::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessRequest::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIGoogleCloudDocumentaiV1beta3ProcessOptions OAIGoogleCloudDocumentaiV1beta3ProcessRequest::getProcessOptions() const {
    return m_process_options;
}
void OAIGoogleCloudDocumentaiV1beta3ProcessRequest::setProcessOptions(const OAIGoogleCloudDocumentaiV1beta3ProcessOptions &process_options) {
    m_process_options = process_options;
    m_process_options_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessRequest::is_process_options_Set() const{
    return m_process_options_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessRequest::is_process_options_Valid() const{
    return m_process_options_isValid;
}

OAIGoogleCloudDocumentaiV1beta3RawDocument OAIGoogleCloudDocumentaiV1beta3ProcessRequest::getRawDocument() const {
    return m_raw_document;
}
void OAIGoogleCloudDocumentaiV1beta3ProcessRequest::setRawDocument(const OAIGoogleCloudDocumentaiV1beta3RawDocument &raw_document) {
    m_raw_document = raw_document;
    m_raw_document_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessRequest::is_raw_document_Set() const{
    return m_raw_document_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessRequest::is_raw_document_Valid() const{
    return m_raw_document_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessRequest::isSkipHumanReview() const {
    return m_skip_human_review;
}
void OAIGoogleCloudDocumentaiV1beta3ProcessRequest::setSkipHumanReview(const bool &skip_human_review) {
    m_skip_human_review = skip_human_review;
    m_skip_human_review_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessRequest::is_skip_human_review_Set() const{
    return m_skip_human_review_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessRequest::is_skip_human_review_Valid() const{
    return m_skip_human_review_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_human_review_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
