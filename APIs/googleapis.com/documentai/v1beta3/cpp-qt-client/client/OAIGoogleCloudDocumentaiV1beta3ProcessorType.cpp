/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta3ProcessorType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta3ProcessorType::OAIGoogleCloudDocumentaiV1beta3ProcessorType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta3ProcessorType::OAIGoogleCloudDocumentaiV1beta3ProcessorType() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta3ProcessorType::~OAIGoogleCloudDocumentaiV1beta3ProcessorType() {}

void OAIGoogleCloudDocumentaiV1beta3ProcessorType::initializeModel() {

    m_allow_creation_isSet = false;
    m_allow_creation_isValid = false;

    m_available_locations_isSet = false;
    m_available_locations_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_launch_stage_isSet = false;
    m_launch_stage_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sample_document_uris_isSet = false;
    m_sample_document_uris_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta3ProcessorType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta3ProcessorType::fromJsonObject(QJsonObject json) {

    m_allow_creation_isValid = ::OpenAPI::fromJsonValue(m_allow_creation, json[QString("allowCreation")]);
    m_allow_creation_isSet = !json[QString("allowCreation")].isNull() && m_allow_creation_isValid;

    m_available_locations_isValid = ::OpenAPI::fromJsonValue(m_available_locations, json[QString("availableLocations")]);
    m_available_locations_isSet = !json[QString("availableLocations")].isNull() && m_available_locations_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_launch_stage_isValid = ::OpenAPI::fromJsonValue(m_launch_stage, json[QString("launchStage")]);
    m_launch_stage_isSet = !json[QString("launchStage")].isNull() && m_launch_stage_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sample_document_uris_isValid = ::OpenAPI::fromJsonValue(m_sample_document_uris, json[QString("sampleDocumentUris")]);
    m_sample_document_uris_isSet = !json[QString("sampleDocumentUris")].isNull() && m_sample_document_uris_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ProcessorType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta3ProcessorType::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_creation_isSet) {
        obj.insert(QString("allowCreation"), ::OpenAPI::toJsonValue(m_allow_creation));
    }
    if (m_available_locations.size() > 0) {
        obj.insert(QString("availableLocations"), ::OpenAPI::toJsonValue(m_available_locations));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_launch_stage_isSet) {
        obj.insert(QString("launchStage"), ::OpenAPI::toJsonValue(m_launch_stage));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sample_document_uris.size() > 0) {
        obj.insert(QString("sampleDocumentUris"), ::OpenAPI::toJsonValue(m_sample_document_uris));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessorType::isAllowCreation() const {
    return m_allow_creation;
}
void OAIGoogleCloudDocumentaiV1beta3ProcessorType::setAllowCreation(const bool &allow_creation) {
    m_allow_creation = allow_creation;
    m_allow_creation_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessorType::is_allow_creation_Set() const{
    return m_allow_creation_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessorType::is_allow_creation_Valid() const{
    return m_allow_creation_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta3ProcessorTypeLocationInfo> OAIGoogleCloudDocumentaiV1beta3ProcessorType::getAvailableLocations() const {
    return m_available_locations;
}
void OAIGoogleCloudDocumentaiV1beta3ProcessorType::setAvailableLocations(const QList<OAIGoogleCloudDocumentaiV1beta3ProcessorTypeLocationInfo> &available_locations) {
    m_available_locations = available_locations;
    m_available_locations_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessorType::is_available_locations_Set() const{
    return m_available_locations_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessorType::is_available_locations_Valid() const{
    return m_available_locations_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ProcessorType::getCategory() const {
    return m_category;
}
void OAIGoogleCloudDocumentaiV1beta3ProcessorType::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessorType::is_category_Set() const{
    return m_category_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessorType::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ProcessorType::getLaunchStage() const {
    return m_launch_stage;
}
void OAIGoogleCloudDocumentaiV1beta3ProcessorType::setLaunchStage(const QString &launch_stage) {
    m_launch_stage = launch_stage;
    m_launch_stage_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessorType::is_launch_stage_Set() const{
    return m_launch_stage_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessorType::is_launch_stage_Valid() const{
    return m_launch_stage_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ProcessorType::getName() const {
    return m_name;
}
void OAIGoogleCloudDocumentaiV1beta3ProcessorType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessorType::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessorType::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIGoogleCloudDocumentaiV1beta3ProcessorType::getSampleDocumentUris() const {
    return m_sample_document_uris;
}
void OAIGoogleCloudDocumentaiV1beta3ProcessorType::setSampleDocumentUris(const QList<QString> &sample_document_uris) {
    m_sample_document_uris = sample_document_uris;
    m_sample_document_uris_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessorType::is_sample_document_uris_Set() const{
    return m_sample_document_uris_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessorType::is_sample_document_uris_Valid() const{
    return m_sample_document_uris_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ProcessorType::getType() const {
    return m_type;
}
void OAIGoogleCloudDocumentaiV1beta3ProcessorType::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessorType::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessorType::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessorType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_creation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_document_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta3ProcessorType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
