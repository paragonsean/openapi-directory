/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::~OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse() {}

void OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::initializeModel() {

    m_sample_test_status_isSet = false;
    m_sample_test_status_isValid = false;

    m_sample_training_status_isSet = false;
    m_sample_training_status_isValid = false;

    m_selected_documents_isSet = false;
    m_selected_documents_isValid = false;
}

void OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::fromJsonObject(QJsonObject json) {

    m_sample_test_status_isValid = ::OpenAPI::fromJsonValue(m_sample_test_status, json[QString("sampleTestStatus")]);
    m_sample_test_status_isSet = !json[QString("sampleTestStatus")].isNull() && m_sample_test_status_isValid;

    m_sample_training_status_isValid = ::OpenAPI::fromJsonValue(m_sample_training_status, json[QString("sampleTrainingStatus")]);
    m_sample_training_status_isSet = !json[QString("sampleTrainingStatus")].isNull() && m_sample_training_status_isValid;

    m_selected_documents_isValid = ::OpenAPI::fromJsonValue(m_selected_documents, json[QString("selectedDocuments")]);
    m_selected_documents_isSet = !json[QString("selectedDocuments")].isNull() && m_selected_documents_isValid;
}

QString OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_sample_test_status.isSet()) {
        obj.insert(QString("sampleTestStatus"), ::OpenAPI::toJsonValue(m_sample_test_status));
    }
    if (m_sample_training_status.isSet()) {
        obj.insert(QString("sampleTrainingStatus"), ::OpenAPI::toJsonValue(m_sample_training_status));
    }
    if (m_selected_documents.size() > 0) {
        obj.insert(QString("selectedDocuments"), ::OpenAPI::toJsonValue(m_selected_documents));
    }
    return obj;
}

OAIGoogleRpcStatus OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::getSampleTestStatus() const {
    return m_sample_test_status;
}
void OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::setSampleTestStatus(const OAIGoogleRpcStatus &sample_test_status) {
    m_sample_test_status = sample_test_status;
    m_sample_test_status_isSet = true;
}

bool OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::is_sample_test_status_Set() const{
    return m_sample_test_status_isSet;
}

bool OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::is_sample_test_status_Valid() const{
    return m_sample_test_status_isValid;
}

OAIGoogleRpcStatus OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::getSampleTrainingStatus() const {
    return m_sample_training_status;
}
void OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::setSampleTrainingStatus(const OAIGoogleRpcStatus &sample_training_status) {
    m_sample_training_status = sample_training_status;
    m_sample_training_status_isSet = true;
}

bool OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::is_sample_training_status_Set() const{
    return m_sample_training_status_isSet;
}

bool OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::is_sample_training_status_Valid() const{
    return m_sample_training_status_isValid;
}

QList<OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponseSelectedDocument> OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::getSelectedDocuments() const {
    return m_selected_documents;
}
void OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::setSelectedDocuments(const QList<OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponseSelectedDocument> &selected_documents) {
    m_selected_documents = selected_documents;
    m_selected_documents_isSet = true;
}

bool OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::is_selected_documents_Set() const{
    return m_selected_documents_isSet;
}

bool OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::is_selected_documents_Valid() const{
    return m_selected_documents_isValid;
}

bool OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sample_test_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_training_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiUiv1beta3SampleDocumentsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
