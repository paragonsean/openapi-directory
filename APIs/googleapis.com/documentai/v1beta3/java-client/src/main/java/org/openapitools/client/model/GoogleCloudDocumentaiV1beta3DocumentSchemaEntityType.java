/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeEnumValues;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeProperty;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3EntityTypeMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EntityType is the wrapper of a label of the corresponding model with detailed attributes and limitations for entity-based processors. Multiple types can also compose a dependency tree to represent nested types.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:53.606360-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType {
  public static final String SERIALIZED_NAME_BASE_TYPES = "baseTypes";
  @SerializedName(SERIALIZED_NAME_BASE_TYPES)
  private List<String> baseTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENTITY_TYPE_METADATA = "entityTypeMetadata";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE_METADATA)
  private GoogleCloudDocumentaiV1beta3EntityTypeMetadata entityTypeMetadata;

  public static final String SERIALIZED_NAME_ENUM_VALUES = "enumValues";
  @SerializedName(SERIALIZED_NAME_ENUM_VALUES)
  private GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeEnumValues enumValues;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeProperty> properties = new ArrayList<>();

  public GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType() {
  }

  public GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType baseTypes(List<String> baseTypes) {
    this.baseTypes = baseTypes;
    return this;
  }

  public GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType addBaseTypesItem(String baseTypesItem) {
    if (this.baseTypes == null) {
      this.baseTypes = new ArrayList<>();
    }
    this.baseTypes.add(baseTypesItem);
    return this;
  }

  /**
   * The entity type that this type is derived from. For now, one and only one should be set.
   * @return baseTypes
   */
  @javax.annotation.Nullable
  public List<String> getBaseTypes() {
    return baseTypes;
  }

  public void setBaseTypes(List<String> baseTypes) {
    this.baseTypes = baseTypes;
  }


  public GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * User defined name for the type.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType entityTypeMetadata(GoogleCloudDocumentaiV1beta3EntityTypeMetadata entityTypeMetadata) {
    this.entityTypeMetadata = entityTypeMetadata;
    return this;
  }

  /**
   * Get entityTypeMetadata
   * @return entityTypeMetadata
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta3EntityTypeMetadata getEntityTypeMetadata() {
    return entityTypeMetadata;
  }

  public void setEntityTypeMetadata(GoogleCloudDocumentaiV1beta3EntityTypeMetadata entityTypeMetadata) {
    this.entityTypeMetadata = entityTypeMetadata;
  }


  public GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType enumValues(GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeEnumValues enumValues) {
    this.enumValues = enumValues;
    return this;
  }

  /**
   * Get enumValues
   * @return enumValues
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeEnumValues getEnumValues() {
    return enumValues;
  }

  public void setEnumValues(GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeEnumValues enumValues) {
    this.enumValues = enumValues;
  }


  public GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the type. It must be unique within the schema file and cannot be a \&quot;Common Type\&quot;. The following naming conventions are used: - Use &#x60;snake_casing&#x60;. - Name matching is case-sensitive. - Maximum 64 characters. - Must start with a letter. - Allowed characters: ASCII letters &#x60;[a-z0-9_-]&#x60;. (For backward compatibility internal infrastructure and tooling can handle any ascii character.) - The &#x60;/&#x60; is sometimes used to denote a property of a type. For example &#x60;line_item/amount&#x60;. This convention is deprecated, but will still be honored for backward compatibility.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType properties(List<GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeProperty> properties) {
    this.properties = properties;
    return this;
  }

  public GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType addPropertiesItem(GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

  /**
   * Description the nested structure, or composition of an entity.
   * @return properties
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeProperty> getProperties() {
    return properties;
  }

  public void setProperties(List<GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeProperty> properties) {
    this.properties = properties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType googleCloudDocumentaiV1beta3DocumentSchemaEntityType = (GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType) o;
    return Objects.equals(this.baseTypes, googleCloudDocumentaiV1beta3DocumentSchemaEntityType.baseTypes) &&
        Objects.equals(this.displayName, googleCloudDocumentaiV1beta3DocumentSchemaEntityType.displayName) &&
        Objects.equals(this.entityTypeMetadata, googleCloudDocumentaiV1beta3DocumentSchemaEntityType.entityTypeMetadata) &&
        Objects.equals(this.enumValues, googleCloudDocumentaiV1beta3DocumentSchemaEntityType.enumValues) &&
        Objects.equals(this.name, googleCloudDocumentaiV1beta3DocumentSchemaEntityType.name) &&
        Objects.equals(this.properties, googleCloudDocumentaiV1beta3DocumentSchemaEntityType.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseTypes, displayName, entityTypeMetadata, enumValues, name, properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType {\n");
    sb.append("    baseTypes: ").append(toIndentedString(baseTypes)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    entityTypeMetadata: ").append(toIndentedString(entityTypeMetadata)).append("\n");
    sb.append("    enumValues: ").append(toIndentedString(enumValues)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseTypes");
    openapiFields.add("displayName");
    openapiFields.add("entityTypeMetadata");
    openapiFields.add("enumValues");
    openapiFields.add("name");
    openapiFields.add("properties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType is not found in the empty JSON string", GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("baseTypes") != null && !jsonObj.get("baseTypes").isJsonNull() && !jsonObj.get("baseTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseTypes` to be an array in the JSON string but got `%s`", jsonObj.get("baseTypes").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `entityTypeMetadata`
      if (jsonObj.get("entityTypeMetadata") != null && !jsonObj.get("entityTypeMetadata").isJsonNull()) {
        GoogleCloudDocumentaiV1beta3EntityTypeMetadata.validateJsonElement(jsonObj.get("entityTypeMetadata"));
      }
      // validate the optional field `enumValues`
      if (jsonObj.get("enumValues") != null && !jsonObj.get("enumValues").isJsonNull()) {
        GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeEnumValues.validateJsonElement(jsonObj.get("enumValues"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
        if (jsonArrayproperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
          }

          // validate the optional field `properties` (array)
          for (int i = 0; i < jsonArrayproperties.size(); i++) {
            GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeProperty.validateJsonElement(jsonArrayproperties.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType
   */
  public static GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType.class);
  }

  /**
   * Convert an instance of GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

