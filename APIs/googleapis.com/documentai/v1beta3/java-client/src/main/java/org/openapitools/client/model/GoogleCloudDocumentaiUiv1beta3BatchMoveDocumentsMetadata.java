/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadataIndividualBatchMoveStatus;
import org.openapitools.client.model.GoogleCloudDocumentaiUiv1beta3CommonOperationMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:53.606360-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata {
  public static final String SERIALIZED_NAME_COMMON_METADATA = "commonMetadata";
  @SerializedName(SERIALIZED_NAME_COMMON_METADATA)
  private GoogleCloudDocumentaiUiv1beta3CommonOperationMetadata commonMetadata;

  /**
   * The destination dataset split type.
   */
  @JsonAdapter(DestDatasetTypeEnum.Adapter.class)
  public enum DestDatasetTypeEnum {
    TYPE_UNSPECIFIED("DATASET_SPLIT_TYPE_UNSPECIFIED"),
    
    TRAIN("DATASET_SPLIT_TRAIN"),
    
    TEST("DATASET_SPLIT_TEST"),
    
    UNASSIGNED("DATASET_SPLIT_UNASSIGNED");

    private String value;

    DestDatasetTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DestDatasetTypeEnum fromValue(String value) {
      for (DestDatasetTypeEnum b : DestDatasetTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DestDatasetTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DestDatasetTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DestDatasetTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DestDatasetTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DestDatasetTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEST_DATASET_TYPE = "destDatasetType";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_DEST_DATASET_TYPE)
  private DestDatasetTypeEnum destDatasetType;

  /**
   * The destination dataset split type.
   */
  @JsonAdapter(DestSplitTypeEnum.Adapter.class)
  public enum DestSplitTypeEnum {
    TYPE_UNSPECIFIED("DATASET_SPLIT_TYPE_UNSPECIFIED"),
    
    TRAIN("DATASET_SPLIT_TRAIN"),
    
    TEST("DATASET_SPLIT_TEST"),
    
    UNASSIGNED("DATASET_SPLIT_UNASSIGNED");

    private String value;

    DestSplitTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DestSplitTypeEnum fromValue(String value) {
      for (DestSplitTypeEnum b : DestSplitTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DestSplitTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DestSplitTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DestSplitTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DestSplitTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DestSplitTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEST_SPLIT_TYPE = "destSplitType";
  @SerializedName(SERIALIZED_NAME_DEST_SPLIT_TYPE)
  private DestSplitTypeEnum destSplitType;

  public static final String SERIALIZED_NAME_INDIVIDUAL_BATCH_MOVE_STATUSES = "individualBatchMoveStatuses";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_BATCH_MOVE_STATUSES)
  private List<GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadataIndividualBatchMoveStatus> individualBatchMoveStatuses = new ArrayList<>();

  public GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata() {
  }

  public GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata commonMetadata(GoogleCloudDocumentaiUiv1beta3CommonOperationMetadata commonMetadata) {
    this.commonMetadata = commonMetadata;
    return this;
  }

  /**
   * Get commonMetadata
   * @return commonMetadata
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiUiv1beta3CommonOperationMetadata getCommonMetadata() {
    return commonMetadata;
  }

  public void setCommonMetadata(GoogleCloudDocumentaiUiv1beta3CommonOperationMetadata commonMetadata) {
    this.commonMetadata = commonMetadata;
  }


  @Deprecated
  public GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata destDatasetType(DestDatasetTypeEnum destDatasetType) {
    this.destDatasetType = destDatasetType;
    return this;
  }

  /**
   * The destination dataset split type.
   * @return destDatasetType
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public DestDatasetTypeEnum getDestDatasetType() {
    return destDatasetType;
  }

  @Deprecated
  public void setDestDatasetType(DestDatasetTypeEnum destDatasetType) {
    this.destDatasetType = destDatasetType;
  }


  public GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata destSplitType(DestSplitTypeEnum destSplitType) {
    this.destSplitType = destSplitType;
    return this;
  }

  /**
   * The destination dataset split type.
   * @return destSplitType
   */
  @javax.annotation.Nullable
  public DestSplitTypeEnum getDestSplitType() {
    return destSplitType;
  }

  public void setDestSplitType(DestSplitTypeEnum destSplitType) {
    this.destSplitType = destSplitType;
  }


  public GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata individualBatchMoveStatuses(List<GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadataIndividualBatchMoveStatus> individualBatchMoveStatuses) {
    this.individualBatchMoveStatuses = individualBatchMoveStatuses;
    return this;
  }

  public GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata addIndividualBatchMoveStatusesItem(GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadataIndividualBatchMoveStatus individualBatchMoveStatusesItem) {
    if (this.individualBatchMoveStatuses == null) {
      this.individualBatchMoveStatuses = new ArrayList<>();
    }
    this.individualBatchMoveStatuses.add(individualBatchMoveStatusesItem);
    return this;
  }

  /**
   * The list of response details of each document.
   * @return individualBatchMoveStatuses
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadataIndividualBatchMoveStatus> getIndividualBatchMoveStatuses() {
    return individualBatchMoveStatuses;
  }

  public void setIndividualBatchMoveStatuses(List<GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadataIndividualBatchMoveStatus> individualBatchMoveStatuses) {
    this.individualBatchMoveStatuses = individualBatchMoveStatuses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata googleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata = (GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata) o;
    return Objects.equals(this.commonMetadata, googleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata.commonMetadata) &&
        Objects.equals(this.destDatasetType, googleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata.destDatasetType) &&
        Objects.equals(this.destSplitType, googleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata.destSplitType) &&
        Objects.equals(this.individualBatchMoveStatuses, googleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata.individualBatchMoveStatuses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commonMetadata, destDatasetType, destSplitType, individualBatchMoveStatuses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata {\n");
    sb.append("    commonMetadata: ").append(toIndentedString(commonMetadata)).append("\n");
    sb.append("    destDatasetType: ").append(toIndentedString(destDatasetType)).append("\n");
    sb.append("    destSplitType: ").append(toIndentedString(destSplitType)).append("\n");
    sb.append("    individualBatchMoveStatuses: ").append(toIndentedString(individualBatchMoveStatuses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commonMetadata");
    openapiFields.add("destDatasetType");
    openapiFields.add("destSplitType");
    openapiFields.add("individualBatchMoveStatuses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata is not found in the empty JSON string", GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `commonMetadata`
      if (jsonObj.get("commonMetadata") != null && !jsonObj.get("commonMetadata").isJsonNull()) {
        GoogleCloudDocumentaiUiv1beta3CommonOperationMetadata.validateJsonElement(jsonObj.get("commonMetadata"));
      }
      if ((jsonObj.get("destDatasetType") != null && !jsonObj.get("destDatasetType").isJsonNull()) && !jsonObj.get("destDatasetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destDatasetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destDatasetType").toString()));
      }
      // validate the optional field `destDatasetType`
      if (jsonObj.get("destDatasetType") != null && !jsonObj.get("destDatasetType").isJsonNull()) {
        DestDatasetTypeEnum.validateJsonElement(jsonObj.get("destDatasetType"));
      }
      if ((jsonObj.get("destSplitType") != null && !jsonObj.get("destSplitType").isJsonNull()) && !jsonObj.get("destSplitType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destSplitType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destSplitType").toString()));
      }
      // validate the optional field `destSplitType`
      if (jsonObj.get("destSplitType") != null && !jsonObj.get("destSplitType").isJsonNull()) {
        DestSplitTypeEnum.validateJsonElement(jsonObj.get("destSplitType"));
      }
      if (jsonObj.get("individualBatchMoveStatuses") != null && !jsonObj.get("individualBatchMoveStatuses").isJsonNull()) {
        JsonArray jsonArrayindividualBatchMoveStatuses = jsonObj.getAsJsonArray("individualBatchMoveStatuses");
        if (jsonArrayindividualBatchMoveStatuses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("individualBatchMoveStatuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `individualBatchMoveStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("individualBatchMoveStatuses").toString()));
          }

          // validate the optional field `individualBatchMoveStatuses` (array)
          for (int i = 0; i < jsonArrayindividualBatchMoveStatuses.size(); i++) {
            GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadataIndividualBatchMoveStatus.validateJsonElement(jsonArrayindividualBatchMoveStatuses.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata
   */
  public static GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata.class);
  }

  /**
   * Convert an instance of GoogleCloudDocumentaiUiv1beta3BatchMoveDocumentsMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

