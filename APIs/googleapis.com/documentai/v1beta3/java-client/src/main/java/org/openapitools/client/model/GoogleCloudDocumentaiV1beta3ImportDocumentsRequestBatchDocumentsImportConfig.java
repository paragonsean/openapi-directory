/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3BatchDocumentsInputConfig;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfigAutoSplitConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Config for importing documents. Each batch can have its own dataset split type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:53.606360-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig {
  public static final String SERIALIZED_NAME_AUTO_SPLIT_CONFIG = "autoSplitConfig";
  @SerializedName(SERIALIZED_NAME_AUTO_SPLIT_CONFIG)
  private GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfigAutoSplitConfig autoSplitConfig;

  public static final String SERIALIZED_NAME_BATCH_INPUT_CONFIG = "batchInputConfig";
  @SerializedName(SERIALIZED_NAME_BATCH_INPUT_CONFIG)
  private GoogleCloudDocumentaiV1beta3BatchDocumentsInputConfig batchInputConfig;

  /**
   * Target dataset split where the documents must be stored.
   */
  @JsonAdapter(DatasetSplitEnum.Adapter.class)
  public enum DatasetSplitEnum {
    TYPE_UNSPECIFIED("DATASET_SPLIT_TYPE_UNSPECIFIED"),
    
    TRAIN("DATASET_SPLIT_TRAIN"),
    
    TEST("DATASET_SPLIT_TEST"),
    
    UNASSIGNED("DATASET_SPLIT_UNASSIGNED");

    private String value;

    DatasetSplitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DatasetSplitEnum fromValue(String value) {
      for (DatasetSplitEnum b : DatasetSplitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DatasetSplitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DatasetSplitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DatasetSplitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DatasetSplitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DatasetSplitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATASET_SPLIT = "datasetSplit";
  @SerializedName(SERIALIZED_NAME_DATASET_SPLIT)
  private DatasetSplitEnum datasetSplit;

  public GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig() {
  }

  public GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig autoSplitConfig(GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfigAutoSplitConfig autoSplitConfig) {
    this.autoSplitConfig = autoSplitConfig;
    return this;
  }

  /**
   * Get autoSplitConfig
   * @return autoSplitConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfigAutoSplitConfig getAutoSplitConfig() {
    return autoSplitConfig;
  }

  public void setAutoSplitConfig(GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfigAutoSplitConfig autoSplitConfig) {
    this.autoSplitConfig = autoSplitConfig;
  }


  public GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig batchInputConfig(GoogleCloudDocumentaiV1beta3BatchDocumentsInputConfig batchInputConfig) {
    this.batchInputConfig = batchInputConfig;
    return this;
  }

  /**
   * Get batchInputConfig
   * @return batchInputConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta3BatchDocumentsInputConfig getBatchInputConfig() {
    return batchInputConfig;
  }

  public void setBatchInputConfig(GoogleCloudDocumentaiV1beta3BatchDocumentsInputConfig batchInputConfig) {
    this.batchInputConfig = batchInputConfig;
  }


  public GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig datasetSplit(DatasetSplitEnum datasetSplit) {
    this.datasetSplit = datasetSplit;
    return this;
  }

  /**
   * Target dataset split where the documents must be stored.
   * @return datasetSplit
   */
  @javax.annotation.Nullable
  public DatasetSplitEnum getDatasetSplit() {
    return datasetSplit;
  }

  public void setDatasetSplit(DatasetSplitEnum datasetSplit) {
    this.datasetSplit = datasetSplit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig googleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig = (GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig) o;
    return Objects.equals(this.autoSplitConfig, googleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.autoSplitConfig) &&
        Objects.equals(this.batchInputConfig, googleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.batchInputConfig) &&
        Objects.equals(this.datasetSplit, googleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.datasetSplit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoSplitConfig, batchInputConfig, datasetSplit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig {\n");
    sb.append("    autoSplitConfig: ").append(toIndentedString(autoSplitConfig)).append("\n");
    sb.append("    batchInputConfig: ").append(toIndentedString(batchInputConfig)).append("\n");
    sb.append("    datasetSplit: ").append(toIndentedString(datasetSplit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoSplitConfig");
    openapiFields.add("batchInputConfig");
    openapiFields.add("datasetSplit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig is not found in the empty JSON string", GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `autoSplitConfig`
      if (jsonObj.get("autoSplitConfig") != null && !jsonObj.get("autoSplitConfig").isJsonNull()) {
        GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfigAutoSplitConfig.validateJsonElement(jsonObj.get("autoSplitConfig"));
      }
      // validate the optional field `batchInputConfig`
      if (jsonObj.get("batchInputConfig") != null && !jsonObj.get("batchInputConfig").isJsonNull()) {
        GoogleCloudDocumentaiV1beta3BatchDocumentsInputConfig.validateJsonElement(jsonObj.get("batchInputConfig"));
      }
      if ((jsonObj.get("datasetSplit") != null && !jsonObj.get("datasetSplit").isJsonNull()) && !jsonObj.get("datasetSplit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasetSplit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasetSplit").toString()));
      }
      // validate the optional field `datasetSplit`
      if (jsonObj.get("datasetSplit") != null && !jsonObj.get("datasetSplit").isJsonNull()) {
        DatasetSplitEnum.validateJsonElement(jsonObj.get("datasetSplit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig
   */
  public static GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudDocumentaiV1beta3ImportDocumentsRequestBatchDocumentsImportConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

