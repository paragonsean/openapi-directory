/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3Document;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3GcsDocument;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3ProcessOptions;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3RawDocument;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for the ProcessDocument method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:53.606360-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDocumentaiV1beta3ProcessRequest {
  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private GoogleCloudDocumentaiV1beta3Document document;

  public static final String SERIALIZED_NAME_FIELD_MASK = "fieldMask";
  @SerializedName(SERIALIZED_NAME_FIELD_MASK)
  private String fieldMask;

  public static final String SERIALIZED_NAME_GCS_DOCUMENT = "gcsDocument";
  @SerializedName(SERIALIZED_NAME_GCS_DOCUMENT)
  private GoogleCloudDocumentaiV1beta3GcsDocument gcsDocument;

  public static final String SERIALIZED_NAME_INLINE_DOCUMENT = "inlineDocument";
  @SerializedName(SERIALIZED_NAME_INLINE_DOCUMENT)
  private GoogleCloudDocumentaiV1beta3Document inlineDocument;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_PROCESS_OPTIONS = "processOptions";
  @SerializedName(SERIALIZED_NAME_PROCESS_OPTIONS)
  private GoogleCloudDocumentaiV1beta3ProcessOptions processOptions;

  public static final String SERIALIZED_NAME_RAW_DOCUMENT = "rawDocument";
  @SerializedName(SERIALIZED_NAME_RAW_DOCUMENT)
  private GoogleCloudDocumentaiV1beta3RawDocument rawDocument;

  public static final String SERIALIZED_NAME_SKIP_HUMAN_REVIEW = "skipHumanReview";
  @SerializedName(SERIALIZED_NAME_SKIP_HUMAN_REVIEW)
  private Boolean skipHumanReview;

  public GoogleCloudDocumentaiV1beta3ProcessRequest() {
  }

  public GoogleCloudDocumentaiV1beta3ProcessRequest document(GoogleCloudDocumentaiV1beta3Document document) {
    this.document = document;
    return this;
  }

  /**
   * Get document
   * @return document
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta3Document getDocument() {
    return document;
  }

  public void setDocument(GoogleCloudDocumentaiV1beta3Document document) {
    this.document = document;
  }


  public GoogleCloudDocumentaiV1beta3ProcessRequest fieldMask(String fieldMask) {
    this.fieldMask = fieldMask;
    return this;
  }

  /**
   * Specifies which fields to include in the ProcessResponse.document output. Only supports top-level document and pages field, so it must be in the form of &#x60;{document_field_name}&#x60; or &#x60;pages.{page_field_name}&#x60;.
   * @return fieldMask
   */
  @javax.annotation.Nullable
  public String getFieldMask() {
    return fieldMask;
  }

  public void setFieldMask(String fieldMask) {
    this.fieldMask = fieldMask;
  }


  public GoogleCloudDocumentaiV1beta3ProcessRequest gcsDocument(GoogleCloudDocumentaiV1beta3GcsDocument gcsDocument) {
    this.gcsDocument = gcsDocument;
    return this;
  }

  /**
   * Get gcsDocument
   * @return gcsDocument
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta3GcsDocument getGcsDocument() {
    return gcsDocument;
  }

  public void setGcsDocument(GoogleCloudDocumentaiV1beta3GcsDocument gcsDocument) {
    this.gcsDocument = gcsDocument;
  }


  public GoogleCloudDocumentaiV1beta3ProcessRequest inlineDocument(GoogleCloudDocumentaiV1beta3Document inlineDocument) {
    this.inlineDocument = inlineDocument;
    return this;
  }

  /**
   * Get inlineDocument
   * @return inlineDocument
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta3Document getInlineDocument() {
    return inlineDocument;
  }

  public void setInlineDocument(GoogleCloudDocumentaiV1beta3Document inlineDocument) {
    this.inlineDocument = inlineDocument;
  }


  public GoogleCloudDocumentaiV1beta3ProcessRequest labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public GoogleCloudDocumentaiV1beta3ProcessRequest putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. The labels with user-defined metadata for the request. Label keys and values can be no longer than 63 characters (Unicode codepoints) and can only contain lowercase letters, numeric characters, underscores, and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public GoogleCloudDocumentaiV1beta3ProcessRequest processOptions(GoogleCloudDocumentaiV1beta3ProcessOptions processOptions) {
    this.processOptions = processOptions;
    return this;
  }

  /**
   * Get processOptions
   * @return processOptions
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta3ProcessOptions getProcessOptions() {
    return processOptions;
  }

  public void setProcessOptions(GoogleCloudDocumentaiV1beta3ProcessOptions processOptions) {
    this.processOptions = processOptions;
  }


  public GoogleCloudDocumentaiV1beta3ProcessRequest rawDocument(GoogleCloudDocumentaiV1beta3RawDocument rawDocument) {
    this.rawDocument = rawDocument;
    return this;
  }

  /**
   * Get rawDocument
   * @return rawDocument
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta3RawDocument getRawDocument() {
    return rawDocument;
  }

  public void setRawDocument(GoogleCloudDocumentaiV1beta3RawDocument rawDocument) {
    this.rawDocument = rawDocument;
  }


  public GoogleCloudDocumentaiV1beta3ProcessRequest skipHumanReview(Boolean skipHumanReview) {
    this.skipHumanReview = skipHumanReview;
    return this;
  }

  /**
   * Whether human review should be skipped for this request. Default to &#x60;false&#x60;.
   * @return skipHumanReview
   */
  @javax.annotation.Nullable
  public Boolean getSkipHumanReview() {
    return skipHumanReview;
  }

  public void setSkipHumanReview(Boolean skipHumanReview) {
    this.skipHumanReview = skipHumanReview;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDocumentaiV1beta3ProcessRequest googleCloudDocumentaiV1beta3ProcessRequest = (GoogleCloudDocumentaiV1beta3ProcessRequest) o;
    return Objects.equals(this.document, googleCloudDocumentaiV1beta3ProcessRequest.document) &&
        Objects.equals(this.fieldMask, googleCloudDocumentaiV1beta3ProcessRequest.fieldMask) &&
        Objects.equals(this.gcsDocument, googleCloudDocumentaiV1beta3ProcessRequest.gcsDocument) &&
        Objects.equals(this.inlineDocument, googleCloudDocumentaiV1beta3ProcessRequest.inlineDocument) &&
        Objects.equals(this.labels, googleCloudDocumentaiV1beta3ProcessRequest.labels) &&
        Objects.equals(this.processOptions, googleCloudDocumentaiV1beta3ProcessRequest.processOptions) &&
        Objects.equals(this.rawDocument, googleCloudDocumentaiV1beta3ProcessRequest.rawDocument) &&
        Objects.equals(this.skipHumanReview, googleCloudDocumentaiV1beta3ProcessRequest.skipHumanReview);
  }

  @Override
  public int hashCode() {
    return Objects.hash(document, fieldMask, gcsDocument, inlineDocument, labels, processOptions, rawDocument, skipHumanReview);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDocumentaiV1beta3ProcessRequest {\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    fieldMask: ").append(toIndentedString(fieldMask)).append("\n");
    sb.append("    gcsDocument: ").append(toIndentedString(gcsDocument)).append("\n");
    sb.append("    inlineDocument: ").append(toIndentedString(inlineDocument)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    processOptions: ").append(toIndentedString(processOptions)).append("\n");
    sb.append("    rawDocument: ").append(toIndentedString(rawDocument)).append("\n");
    sb.append("    skipHumanReview: ").append(toIndentedString(skipHumanReview)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("document");
    openapiFields.add("fieldMask");
    openapiFields.add("gcsDocument");
    openapiFields.add("inlineDocument");
    openapiFields.add("labels");
    openapiFields.add("processOptions");
    openapiFields.add("rawDocument");
    openapiFields.add("skipHumanReview");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDocumentaiV1beta3ProcessRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDocumentaiV1beta3ProcessRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDocumentaiV1beta3ProcessRequest is not found in the empty JSON string", GoogleCloudDocumentaiV1beta3ProcessRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDocumentaiV1beta3ProcessRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDocumentaiV1beta3ProcessRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `document`
      if (jsonObj.get("document") != null && !jsonObj.get("document").isJsonNull()) {
        GoogleCloudDocumentaiV1beta3Document.validateJsonElement(jsonObj.get("document"));
      }
      if ((jsonObj.get("fieldMask") != null && !jsonObj.get("fieldMask").isJsonNull()) && !jsonObj.get("fieldMask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldMask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldMask").toString()));
      }
      // validate the optional field `gcsDocument`
      if (jsonObj.get("gcsDocument") != null && !jsonObj.get("gcsDocument").isJsonNull()) {
        GoogleCloudDocumentaiV1beta3GcsDocument.validateJsonElement(jsonObj.get("gcsDocument"));
      }
      // validate the optional field `inlineDocument`
      if (jsonObj.get("inlineDocument") != null && !jsonObj.get("inlineDocument").isJsonNull()) {
        GoogleCloudDocumentaiV1beta3Document.validateJsonElement(jsonObj.get("inlineDocument"));
      }
      // validate the optional field `processOptions`
      if (jsonObj.get("processOptions") != null && !jsonObj.get("processOptions").isJsonNull()) {
        GoogleCloudDocumentaiV1beta3ProcessOptions.validateJsonElement(jsonObj.get("processOptions"));
      }
      // validate the optional field `rawDocument`
      if (jsonObj.get("rawDocument") != null && !jsonObj.get("rawDocument").isJsonNull()) {
        GoogleCloudDocumentaiV1beta3RawDocument.validateJsonElement(jsonObj.get("rawDocument"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDocumentaiV1beta3ProcessRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDocumentaiV1beta3ProcessRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDocumentaiV1beta3ProcessRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDocumentaiV1beta3ProcessRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDocumentaiV1beta3ProcessRequest>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDocumentaiV1beta3ProcessRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDocumentaiV1beta3ProcessRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDocumentaiV1beta3ProcessRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDocumentaiV1beta3ProcessRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDocumentaiV1beta3ProcessRequest
   */
  public static GoogleCloudDocumentaiV1beta3ProcessRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDocumentaiV1beta3ProcessRequest.class);
  }

  /**
   * Convert an instance of GoogleCloudDocumentaiV1beta3ProcessRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

