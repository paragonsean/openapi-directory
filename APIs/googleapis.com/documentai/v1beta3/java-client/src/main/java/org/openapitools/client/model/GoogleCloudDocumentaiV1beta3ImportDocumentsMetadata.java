/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3CommonOperationMetadata;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3ImportDocumentsMetadataIndividualImportStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata of the import document operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:53.606360-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata {
  public static final String SERIALIZED_NAME_COMMON_METADATA = "commonMetadata";
  @SerializedName(SERIALIZED_NAME_COMMON_METADATA)
  private GoogleCloudDocumentaiV1beta3CommonOperationMetadata commonMetadata;

  public static final String SERIALIZED_NAME_IMPORT_CONFIG_VALIDATION_RESULTS = "importConfigValidationResults";
  @SerializedName(SERIALIZED_NAME_IMPORT_CONFIG_VALIDATION_RESULTS)
  private List<GoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult> importConfigValidationResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_INDIVIDUAL_IMPORT_STATUSES = "individualImportStatuses";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_IMPORT_STATUSES)
  private List<GoogleCloudDocumentaiV1beta3ImportDocumentsMetadataIndividualImportStatus> individualImportStatuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_DOCUMENT_COUNT = "totalDocumentCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_DOCUMENT_COUNT)
  private Integer totalDocumentCount;

  public GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata() {
  }

  public GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata commonMetadata(GoogleCloudDocumentaiV1beta3CommonOperationMetadata commonMetadata) {
    this.commonMetadata = commonMetadata;
    return this;
  }

  /**
   * Get commonMetadata
   * @return commonMetadata
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta3CommonOperationMetadata getCommonMetadata() {
    return commonMetadata;
  }

  public void setCommonMetadata(GoogleCloudDocumentaiV1beta3CommonOperationMetadata commonMetadata) {
    this.commonMetadata = commonMetadata;
  }


  public GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata importConfigValidationResults(List<GoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult> importConfigValidationResults) {
    this.importConfigValidationResults = importConfigValidationResults;
    return this;
  }

  public GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata addImportConfigValidationResultsItem(GoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult importConfigValidationResultsItem) {
    if (this.importConfigValidationResults == null) {
      this.importConfigValidationResults = new ArrayList<>();
    }
    this.importConfigValidationResults.add(importConfigValidationResultsItem);
    return this;
  }

  /**
   * Validation statuses of the batch documents import config.
   * @return importConfigValidationResults
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult> getImportConfigValidationResults() {
    return importConfigValidationResults;
  }

  public void setImportConfigValidationResults(List<GoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult> importConfigValidationResults) {
    this.importConfigValidationResults = importConfigValidationResults;
  }


  public GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata individualImportStatuses(List<GoogleCloudDocumentaiV1beta3ImportDocumentsMetadataIndividualImportStatus> individualImportStatuses) {
    this.individualImportStatuses = individualImportStatuses;
    return this;
  }

  public GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata addIndividualImportStatusesItem(GoogleCloudDocumentaiV1beta3ImportDocumentsMetadataIndividualImportStatus individualImportStatusesItem) {
    if (this.individualImportStatuses == null) {
      this.individualImportStatuses = new ArrayList<>();
    }
    this.individualImportStatuses.add(individualImportStatusesItem);
    return this;
  }

  /**
   * The list of response details of each document.
   * @return individualImportStatuses
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta3ImportDocumentsMetadataIndividualImportStatus> getIndividualImportStatuses() {
    return individualImportStatuses;
  }

  public void setIndividualImportStatuses(List<GoogleCloudDocumentaiV1beta3ImportDocumentsMetadataIndividualImportStatus> individualImportStatuses) {
    this.individualImportStatuses = individualImportStatuses;
  }


  public GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata totalDocumentCount(Integer totalDocumentCount) {
    this.totalDocumentCount = totalDocumentCount;
    return this;
  }

  /**
   * Total number of the documents that are qualified for importing.
   * @return totalDocumentCount
   */
  @javax.annotation.Nullable
  public Integer getTotalDocumentCount() {
    return totalDocumentCount;
  }

  public void setTotalDocumentCount(Integer totalDocumentCount) {
    this.totalDocumentCount = totalDocumentCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata googleCloudDocumentaiV1beta3ImportDocumentsMetadata = (GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata) o;
    return Objects.equals(this.commonMetadata, googleCloudDocumentaiV1beta3ImportDocumentsMetadata.commonMetadata) &&
        Objects.equals(this.importConfigValidationResults, googleCloudDocumentaiV1beta3ImportDocumentsMetadata.importConfigValidationResults) &&
        Objects.equals(this.individualImportStatuses, googleCloudDocumentaiV1beta3ImportDocumentsMetadata.individualImportStatuses) &&
        Objects.equals(this.totalDocumentCount, googleCloudDocumentaiV1beta3ImportDocumentsMetadata.totalDocumentCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commonMetadata, importConfigValidationResults, individualImportStatuses, totalDocumentCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata {\n");
    sb.append("    commonMetadata: ").append(toIndentedString(commonMetadata)).append("\n");
    sb.append("    importConfigValidationResults: ").append(toIndentedString(importConfigValidationResults)).append("\n");
    sb.append("    individualImportStatuses: ").append(toIndentedString(individualImportStatuses)).append("\n");
    sb.append("    totalDocumentCount: ").append(toIndentedString(totalDocumentCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commonMetadata");
    openapiFields.add("importConfigValidationResults");
    openapiFields.add("individualImportStatuses");
    openapiFields.add("totalDocumentCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata is not found in the empty JSON string", GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `commonMetadata`
      if (jsonObj.get("commonMetadata") != null && !jsonObj.get("commonMetadata").isJsonNull()) {
        GoogleCloudDocumentaiV1beta3CommonOperationMetadata.validateJsonElement(jsonObj.get("commonMetadata"));
      }
      if (jsonObj.get("importConfigValidationResults") != null && !jsonObj.get("importConfigValidationResults").isJsonNull()) {
        JsonArray jsonArrayimportConfigValidationResults = jsonObj.getAsJsonArray("importConfigValidationResults");
        if (jsonArrayimportConfigValidationResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("importConfigValidationResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `importConfigValidationResults` to be an array in the JSON string but got `%s`", jsonObj.get("importConfigValidationResults").toString()));
          }

          // validate the optional field `importConfigValidationResults` (array)
          for (int i = 0; i < jsonArrayimportConfigValidationResults.size(); i++) {
            GoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult.validateJsonElement(jsonArrayimportConfigValidationResults.get(i));
          };
        }
      }
      if (jsonObj.get("individualImportStatuses") != null && !jsonObj.get("individualImportStatuses").isJsonNull()) {
        JsonArray jsonArrayindividualImportStatuses = jsonObj.getAsJsonArray("individualImportStatuses");
        if (jsonArrayindividualImportStatuses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("individualImportStatuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `individualImportStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("individualImportStatuses").toString()));
          }

          // validate the optional field `individualImportStatuses` (array)
          for (int i = 0; i < jsonArrayindividualImportStatuses.size(); i++) {
            GoogleCloudDocumentaiV1beta3ImportDocumentsMetadataIndividualImportStatus.validateJsonElement(jsonArrayindividualImportStatuses.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata
   */
  public static GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata.class);
  }

  /**
   * Convert an instance of GoogleCloudDocumentaiV1beta3ImportDocumentsMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

