/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Encodes the detailed information of a barcode.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:53.606360-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDocumentaiV1beta2Barcode {
  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_RAW_VALUE = "rawValue";
  @SerializedName(SERIALIZED_NAME_RAW_VALUE)
  private String rawValue;

  public static final String SERIALIZED_NAME_VALUE_FORMAT = "valueFormat";
  @SerializedName(SERIALIZED_NAME_VALUE_FORMAT)
  private String valueFormat;

  public GoogleCloudDocumentaiV1beta2Barcode() {
  }

  public GoogleCloudDocumentaiV1beta2Barcode format(String format) {
    this.format = format;
    return this;
  }

  /**
   * Format of a barcode. The supported formats are: - &#x60;CODE_128&#x60;: Code 128 type. - &#x60;CODE_39&#x60;: Code 39 type. - &#x60;CODE_93&#x60;: Code 93 type. - &#x60;CODABAR&#x60;: Codabar type. - &#x60;DATA_MATRIX&#x60;: 2D Data Matrix type. - &#x60;ITF&#x60;: ITF type. - &#x60;EAN_13&#x60;: EAN-13 type. - &#x60;EAN_8&#x60;: EAN-8 type. - &#x60;QR_CODE&#x60;: 2D QR code type. - &#x60;UPC_A&#x60;: UPC-A type. - &#x60;UPC_E&#x60;: UPC-E type. - &#x60;PDF417&#x60;: PDF417 type. - &#x60;AZTEC&#x60;: 2D Aztec code type. - &#x60;DATABAR&#x60;: GS1 DataBar code type.
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }


  public GoogleCloudDocumentaiV1beta2Barcode rawValue(String rawValue) {
    this.rawValue = rawValue;
    return this;
  }

  /**
   * Raw value encoded in the barcode. For example: &#x60;&#39;MEBKM:TITLE:Google;URL:https://www.google.com;;&#39;&#x60;.
   * @return rawValue
   */
  @javax.annotation.Nullable
  public String getRawValue() {
    return rawValue;
  }

  public void setRawValue(String rawValue) {
    this.rawValue = rawValue;
  }


  public GoogleCloudDocumentaiV1beta2Barcode valueFormat(String valueFormat) {
    this.valueFormat = valueFormat;
    return this;
  }

  /**
   * Value format describes the format of the value that a barcode encodes. The supported formats are: - &#x60;CONTACT_INFO&#x60;: Contact information. - &#x60;EMAIL&#x60;: Email address. - &#x60;ISBN&#x60;: ISBN identifier. - &#x60;PHONE&#x60;: Phone number. - &#x60;PRODUCT&#x60;: Product. - &#x60;SMS&#x60;: SMS message. - &#x60;TEXT&#x60;: Text string. - &#x60;URL&#x60;: URL address. - &#x60;WIFI&#x60;: Wifi information. - &#x60;GEO&#x60;: Geo-localization. - &#x60;CALENDAR_EVENT&#x60;: Calendar event. - &#x60;DRIVER_LICENSE&#x60;: Driver&#39;s license.
   * @return valueFormat
   */
  @javax.annotation.Nullable
  public String getValueFormat() {
    return valueFormat;
  }

  public void setValueFormat(String valueFormat) {
    this.valueFormat = valueFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDocumentaiV1beta2Barcode googleCloudDocumentaiV1beta2Barcode = (GoogleCloudDocumentaiV1beta2Barcode) o;
    return Objects.equals(this.format, googleCloudDocumentaiV1beta2Barcode.format) &&
        Objects.equals(this.rawValue, googleCloudDocumentaiV1beta2Barcode.rawValue) &&
        Objects.equals(this.valueFormat, googleCloudDocumentaiV1beta2Barcode.valueFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(format, rawValue, valueFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDocumentaiV1beta2Barcode {\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    rawValue: ").append(toIndentedString(rawValue)).append("\n");
    sb.append("    valueFormat: ").append(toIndentedString(valueFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("format");
    openapiFields.add("rawValue");
    openapiFields.add("valueFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDocumentaiV1beta2Barcode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDocumentaiV1beta2Barcode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDocumentaiV1beta2Barcode is not found in the empty JSON string", GoogleCloudDocumentaiV1beta2Barcode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDocumentaiV1beta2Barcode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDocumentaiV1beta2Barcode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if ((jsonObj.get("rawValue") != null && !jsonObj.get("rawValue").isJsonNull()) && !jsonObj.get("rawValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawValue").toString()));
      }
      if ((jsonObj.get("valueFormat") != null && !jsonObj.get("valueFormat").isJsonNull()) && !jsonObj.get("valueFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueFormat").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDocumentaiV1beta2Barcode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDocumentaiV1beta2Barcode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDocumentaiV1beta2Barcode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDocumentaiV1beta2Barcode.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDocumentaiV1beta2Barcode>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDocumentaiV1beta2Barcode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDocumentaiV1beta2Barcode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDocumentaiV1beta2Barcode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDocumentaiV1beta2Barcode
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDocumentaiV1beta2Barcode
   */
  public static GoogleCloudDocumentaiV1beta2Barcode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDocumentaiV1beta2Barcode.class);
  }

  /**
   * Convert an instance of GoogleCloudDocumentaiV1beta2Barcode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

