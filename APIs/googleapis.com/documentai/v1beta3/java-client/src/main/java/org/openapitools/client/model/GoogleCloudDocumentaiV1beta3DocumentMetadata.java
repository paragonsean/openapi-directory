/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3DocumentId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata about a document.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:53.606360-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDocumentaiV1beta3DocumentMetadata {
  /**
   * Type of the dataset split to which the document belongs.
   */
  @JsonAdapter(DatasetTypeEnum.Adapter.class)
  public enum DatasetTypeEnum {
    TYPE_UNSPECIFIED("DATASET_SPLIT_TYPE_UNSPECIFIED"),
    
    TRAIN("DATASET_SPLIT_TRAIN"),
    
    TEST("DATASET_SPLIT_TEST"),
    
    UNASSIGNED("DATASET_SPLIT_UNASSIGNED");

    private String value;

    DatasetTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DatasetTypeEnum fromValue(String value) {
      for (DatasetTypeEnum b : DatasetTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DatasetTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DatasetTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DatasetTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DatasetTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DatasetTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATASET_TYPE = "datasetType";
  @SerializedName(SERIALIZED_NAME_DATASET_TYPE)
  private DatasetTypeEnum datasetType;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DOCUMENT_ID = "documentId";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  private GoogleCloudDocumentaiV1beta3DocumentId documentId;

  /**
   * Labeling state of the document.
   */
  @JsonAdapter(LabelingStateEnum.Adapter.class)
  public enum LabelingStateEnum {
    LABELING_STATE_UNSPECIFIED("DOCUMENT_LABELING_STATE_UNSPECIFIED"),
    
    LABELED("DOCUMENT_LABELED"),
    
    UNLABELED("DOCUMENT_UNLABELED"),
    
    AUTO_LABELED("DOCUMENT_AUTO_LABELED");

    private String value;

    LabelingStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LabelingStateEnum fromValue(String value) {
      for (LabelingStateEnum b : LabelingStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LabelingStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LabelingStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LabelingStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LabelingStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LabelingStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LABELING_STATE = "labelingState";
  @SerializedName(SERIALIZED_NAME_LABELING_STATE)
  private LabelingStateEnum labelingState;

  public static final String SERIALIZED_NAME_PAGE_COUNT = "pageCount";
  @SerializedName(SERIALIZED_NAME_PAGE_COUNT)
  private Integer pageCount;

  public GoogleCloudDocumentaiV1beta3DocumentMetadata() {
  }

  public GoogleCloudDocumentaiV1beta3DocumentMetadata datasetType(DatasetTypeEnum datasetType) {
    this.datasetType = datasetType;
    return this;
  }

  /**
   * Type of the dataset split to which the document belongs.
   * @return datasetType
   */
  @javax.annotation.Nullable
  public DatasetTypeEnum getDatasetType() {
    return datasetType;
  }

  public void setDatasetType(DatasetTypeEnum datasetType) {
    this.datasetType = datasetType;
  }


  public GoogleCloudDocumentaiV1beta3DocumentMetadata displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the document.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudDocumentaiV1beta3DocumentMetadata documentId(GoogleCloudDocumentaiV1beta3DocumentId documentId) {
    this.documentId = documentId;
    return this;
  }

  /**
   * Get documentId
   * @return documentId
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta3DocumentId getDocumentId() {
    return documentId;
  }

  public void setDocumentId(GoogleCloudDocumentaiV1beta3DocumentId documentId) {
    this.documentId = documentId;
  }


  public GoogleCloudDocumentaiV1beta3DocumentMetadata labelingState(LabelingStateEnum labelingState) {
    this.labelingState = labelingState;
    return this;
  }

  /**
   * Labeling state of the document.
   * @return labelingState
   */
  @javax.annotation.Nullable
  public LabelingStateEnum getLabelingState() {
    return labelingState;
  }

  public void setLabelingState(LabelingStateEnum labelingState) {
    this.labelingState = labelingState;
  }


  public GoogleCloudDocumentaiV1beta3DocumentMetadata pageCount(Integer pageCount) {
    this.pageCount = pageCount;
    return this;
  }

  /**
   * Number of pages in the document.
   * @return pageCount
   */
  @javax.annotation.Nullable
  public Integer getPageCount() {
    return pageCount;
  }

  public void setPageCount(Integer pageCount) {
    this.pageCount = pageCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDocumentaiV1beta3DocumentMetadata googleCloudDocumentaiV1beta3DocumentMetadata = (GoogleCloudDocumentaiV1beta3DocumentMetadata) o;
    return Objects.equals(this.datasetType, googleCloudDocumentaiV1beta3DocumentMetadata.datasetType) &&
        Objects.equals(this.displayName, googleCloudDocumentaiV1beta3DocumentMetadata.displayName) &&
        Objects.equals(this.documentId, googleCloudDocumentaiV1beta3DocumentMetadata.documentId) &&
        Objects.equals(this.labelingState, googleCloudDocumentaiV1beta3DocumentMetadata.labelingState) &&
        Objects.equals(this.pageCount, googleCloudDocumentaiV1beta3DocumentMetadata.pageCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasetType, displayName, documentId, labelingState, pageCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDocumentaiV1beta3DocumentMetadata {\n");
    sb.append("    datasetType: ").append(toIndentedString(datasetType)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    labelingState: ").append(toIndentedString(labelingState)).append("\n");
    sb.append("    pageCount: ").append(toIndentedString(pageCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("datasetType");
    openapiFields.add("displayName");
    openapiFields.add("documentId");
    openapiFields.add("labelingState");
    openapiFields.add("pageCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDocumentaiV1beta3DocumentMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDocumentaiV1beta3DocumentMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDocumentaiV1beta3DocumentMetadata is not found in the empty JSON string", GoogleCloudDocumentaiV1beta3DocumentMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDocumentaiV1beta3DocumentMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDocumentaiV1beta3DocumentMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("datasetType") != null && !jsonObj.get("datasetType").isJsonNull()) && !jsonObj.get("datasetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasetType").toString()));
      }
      // validate the optional field `datasetType`
      if (jsonObj.get("datasetType") != null && !jsonObj.get("datasetType").isJsonNull()) {
        DatasetTypeEnum.validateJsonElement(jsonObj.get("datasetType"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `documentId`
      if (jsonObj.get("documentId") != null && !jsonObj.get("documentId").isJsonNull()) {
        GoogleCloudDocumentaiV1beta3DocumentId.validateJsonElement(jsonObj.get("documentId"));
      }
      if ((jsonObj.get("labelingState") != null && !jsonObj.get("labelingState").isJsonNull()) && !jsonObj.get("labelingState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelingState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelingState").toString()));
      }
      // validate the optional field `labelingState`
      if (jsonObj.get("labelingState") != null && !jsonObj.get("labelingState").isJsonNull()) {
        LabelingStateEnum.validateJsonElement(jsonObj.get("labelingState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDocumentaiV1beta3DocumentMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDocumentaiV1beta3DocumentMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDocumentaiV1beta3DocumentMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDocumentaiV1beta3DocumentMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDocumentaiV1beta3DocumentMetadata>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDocumentaiV1beta3DocumentMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDocumentaiV1beta3DocumentMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDocumentaiV1beta3DocumentMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDocumentaiV1beta3DocumentMetadata
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDocumentaiV1beta3DocumentMetadata
   */
  public static GoogleCloudDocumentaiV1beta3DocumentMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDocumentaiV1beta3DocumentMetadata.class);
  }

  /**
   * Convert an instance of GoogleCloudDocumentaiV1beta3DocumentMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

