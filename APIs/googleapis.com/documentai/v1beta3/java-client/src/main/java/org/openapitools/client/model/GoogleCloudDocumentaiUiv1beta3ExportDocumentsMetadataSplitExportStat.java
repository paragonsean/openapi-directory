/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The statistic representing a dataset split type for this export.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:53.606360-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat {
  /**
   * The dataset split type.
   */
  @JsonAdapter(SplitTypeEnum.Adapter.class)
  public enum SplitTypeEnum {
    TYPE_UNSPECIFIED("DATASET_SPLIT_TYPE_UNSPECIFIED"),
    
    TRAIN("DATASET_SPLIT_TRAIN"),
    
    TEST("DATASET_SPLIT_TEST"),
    
    UNASSIGNED("DATASET_SPLIT_UNASSIGNED");

    private String value;

    SplitTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SplitTypeEnum fromValue(String value) {
      for (SplitTypeEnum b : SplitTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SplitTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SplitTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SplitTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SplitTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SplitTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SPLIT_TYPE = "splitType";
  @SerializedName(SERIALIZED_NAME_SPLIT_TYPE)
  private SplitTypeEnum splitType;

  public static final String SERIALIZED_NAME_TOTAL_DOCUMENT_COUNT = "totalDocumentCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_DOCUMENT_COUNT)
  private Integer totalDocumentCount;

  public GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat() {
  }

  public GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat splitType(SplitTypeEnum splitType) {
    this.splitType = splitType;
    return this;
  }

  /**
   * The dataset split type.
   * @return splitType
   */
  @javax.annotation.Nullable
  public SplitTypeEnum getSplitType() {
    return splitType;
  }

  public void setSplitType(SplitTypeEnum splitType) {
    this.splitType = splitType;
  }


  public GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat totalDocumentCount(Integer totalDocumentCount) {
    this.totalDocumentCount = totalDocumentCount;
    return this;
  }

  /**
   * Total number of documents with the given dataset split type to be exported.
   * @return totalDocumentCount
   */
  @javax.annotation.Nullable
  public Integer getTotalDocumentCount() {
    return totalDocumentCount;
  }

  public void setTotalDocumentCount(Integer totalDocumentCount) {
    this.totalDocumentCount = totalDocumentCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat googleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat = (GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat) o;
    return Objects.equals(this.splitType, googleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat.splitType) &&
        Objects.equals(this.totalDocumentCount, googleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat.totalDocumentCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(splitType, totalDocumentCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat {\n");
    sb.append("    splitType: ").append(toIndentedString(splitType)).append("\n");
    sb.append("    totalDocumentCount: ").append(toIndentedString(totalDocumentCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("splitType");
    openapiFields.add("totalDocumentCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat is not found in the empty JSON string", GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("splitType") != null && !jsonObj.get("splitType").isJsonNull()) && !jsonObj.get("splitType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `splitType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("splitType").toString()));
      }
      // validate the optional field `splitType`
      if (jsonObj.get("splitType") != null && !jsonObj.get("splitType").isJsonNull()) {
        SplitTypeEnum.validateJsonElement(jsonObj.get("splitType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat
   */
  public static GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat.class);
  }

  /**
   * Convert an instance of GoogleCloudDocumentaiUiv1beta3ExportDocumentsMetadataSplitExportStat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

