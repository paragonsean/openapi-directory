/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata for global schema behavior.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:53.606360-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata {
  public static final String SERIALIZED_NAME_DOCUMENT_ALLOW_MULTIPLE_LABELS = "documentAllowMultipleLabels";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ALLOW_MULTIPLE_LABELS)
  private Boolean documentAllowMultipleLabels;

  public static final String SERIALIZED_NAME_DOCUMENT_SPLITTER = "documentSplitter";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_SPLITTER)
  private Boolean documentSplitter;

  public static final String SERIALIZED_NAME_PREFIXED_NAMING_ON_PROPERTIES = "prefixedNamingOnProperties";
  @SerializedName(SERIALIZED_NAME_PREFIXED_NAMING_ON_PROPERTIES)
  private Boolean prefixedNamingOnProperties;

  public static final String SERIALIZED_NAME_SKIP_NAMING_VALIDATION = "skipNamingValidation";
  @SerializedName(SERIALIZED_NAME_SKIP_NAMING_VALIDATION)
  private Boolean skipNamingValidation;

  public GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata() {
  }

  public GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata documentAllowMultipleLabels(Boolean documentAllowMultipleLabels) {
    this.documentAllowMultipleLabels = documentAllowMultipleLabels;
    return this;
  }

  /**
   * If true, on a given page, there can be multiple &#x60;document&#x60; annotations covering it.
   * @return documentAllowMultipleLabels
   */
  @javax.annotation.Nullable
  public Boolean getDocumentAllowMultipleLabels() {
    return documentAllowMultipleLabels;
  }

  public void setDocumentAllowMultipleLabels(Boolean documentAllowMultipleLabels) {
    this.documentAllowMultipleLabels = documentAllowMultipleLabels;
  }


  public GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata documentSplitter(Boolean documentSplitter) {
    this.documentSplitter = documentSplitter;
    return this;
  }

  /**
   * If true, a &#x60;document&#x60; entity type can be applied to subdocument (splitting). Otherwise, it can only be applied to the entire document (classification).
   * @return documentSplitter
   */
  @javax.annotation.Nullable
  public Boolean getDocumentSplitter() {
    return documentSplitter;
  }

  public void setDocumentSplitter(Boolean documentSplitter) {
    this.documentSplitter = documentSplitter;
  }


  public GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata prefixedNamingOnProperties(Boolean prefixedNamingOnProperties) {
    this.prefixedNamingOnProperties = prefixedNamingOnProperties;
    return this;
  }

  /**
   * If set, all the nested entities must be prefixed with the parents.
   * @return prefixedNamingOnProperties
   */
  @javax.annotation.Nullable
  public Boolean getPrefixedNamingOnProperties() {
    return prefixedNamingOnProperties;
  }

  public void setPrefixedNamingOnProperties(Boolean prefixedNamingOnProperties) {
    this.prefixedNamingOnProperties = prefixedNamingOnProperties;
  }


  public GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata skipNamingValidation(Boolean skipNamingValidation) {
    this.skipNamingValidation = skipNamingValidation;
    return this;
  }

  /**
   * If set, we will skip the naming format validation in the schema. So the string values in &#x60;DocumentSchema.EntityType.name&#x60; and &#x60;DocumentSchema.EntityType.Property.name&#x60; will not be checked.
   * @return skipNamingValidation
   */
  @javax.annotation.Nullable
  public Boolean getSkipNamingValidation() {
    return skipNamingValidation;
  }

  public void setSkipNamingValidation(Boolean skipNamingValidation) {
    this.skipNamingValidation = skipNamingValidation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata googleCloudDocumentaiV1beta3DocumentSchemaMetadata = (GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata) o;
    return Objects.equals(this.documentAllowMultipleLabels, googleCloudDocumentaiV1beta3DocumentSchemaMetadata.documentAllowMultipleLabels) &&
        Objects.equals(this.documentSplitter, googleCloudDocumentaiV1beta3DocumentSchemaMetadata.documentSplitter) &&
        Objects.equals(this.prefixedNamingOnProperties, googleCloudDocumentaiV1beta3DocumentSchemaMetadata.prefixedNamingOnProperties) &&
        Objects.equals(this.skipNamingValidation, googleCloudDocumentaiV1beta3DocumentSchemaMetadata.skipNamingValidation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentAllowMultipleLabels, documentSplitter, prefixedNamingOnProperties, skipNamingValidation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata {\n");
    sb.append("    documentAllowMultipleLabels: ").append(toIndentedString(documentAllowMultipleLabels)).append("\n");
    sb.append("    documentSplitter: ").append(toIndentedString(documentSplitter)).append("\n");
    sb.append("    prefixedNamingOnProperties: ").append(toIndentedString(prefixedNamingOnProperties)).append("\n");
    sb.append("    skipNamingValidation: ").append(toIndentedString(skipNamingValidation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentAllowMultipleLabels");
    openapiFields.add("documentSplitter");
    openapiFields.add("prefixedNamingOnProperties");
    openapiFields.add("skipNamingValidation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata is not found in the empty JSON string", GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata
   */
  public static GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata.class);
  }

  /**
   * Convert an instance of GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

