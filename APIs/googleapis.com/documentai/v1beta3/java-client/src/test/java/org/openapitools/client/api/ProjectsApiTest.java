/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3BatchDeleteDocumentsRequest;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3BatchProcessRequest;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3DatasetSchema;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3EvaluateProcessorVersionRequest;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3FetchProcessorTypesResponse;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3GetDocumentResponse;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3ImportDocumentsRequest;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3ImportProcessorVersionRequest;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3ListDocumentsRequest;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3ListDocumentsResponse;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3ListEvaluationsResponse;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3ListProcessorTypesResponse;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3ListProcessorVersionsResponse;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3ListProcessorsResponse;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3ProcessRequest;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3ProcessResponse;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3Processor;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3ProcessorType;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3ReviewDocumentRequest;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3SetDefaultProcessorVersionRequest;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3TrainProcessorVersionRequest;
import org.openapitools.client.model.GoogleCloudLocationListLocationsResponse;
import org.openapitools.client.model.GoogleLongrunningOperation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Fetches processor types. Note that we don&#39;t use ListProcessorTypes here, because it isn&#39;t paginated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsFetchProcessorTypesTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDocumentaiV1beta3FetchProcessorTypesResponse response = api.documentaiProjectsLocationsFetchProcessorTypes(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudLocationListLocationsResponse response = api.documentaiProjectsLocationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsOperationsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.documentaiProjectsLocationsOperationsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a processor type detail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorTypesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean visibleFieldsOnly = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudDocumentaiV1beta3ProcessorType response = api.documentaiProjectsLocationsProcessorTypesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, visibleFieldsOnly, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists the processor types that exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorTypesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudDocumentaiV1beta3ListProcessorTypesResponse response = api.documentaiProjectsLocationsProcessorTypesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a processor from the ProcessorType provided. The processor will be at &#x60;ENABLED&#x60; state by default after its creation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDocumentaiV1beta3Processor googleCloudDocumentaiV1beta3Processor = null;
        GoogleCloudDocumentaiV1beta3Processor response = api.documentaiProjectsLocationsProcessorsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDocumentaiV1beta3Processor);
        // TODO: test validations
    }

    /**
     * Deletes a set of documents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorsDatasetBatchDeleteDocumentsTest() throws ApiException {
        String dataset = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDocumentaiV1beta3BatchDeleteDocumentsRequest googleCloudDocumentaiV1beta3BatchDeleteDocumentsRequest = null;
        GoogleLongrunningOperation response = api.documentaiProjectsLocationsProcessorsDatasetBatchDeleteDocuments(dataset, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDocumentaiV1beta3BatchDeleteDocumentsRequest);
        // TODO: test validations
    }

    /**
     * Returns relevant fields present in the requested document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorsDatasetGetDocumentTest() throws ApiException {
        String dataset = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String documentIdGcsManagedDocIdCwDocId = null;
        String documentIdGcsManagedDocIdGcsUri = null;
        String documentIdRevisionRefLatestProcessorVersion = null;
        String documentIdRevisionRefRevisionCase = null;
        String documentIdRevisionRefRevisionId = null;
        String documentIdUnmanagedDocIdDocId = null;
        Integer pageRangeEnd = null;
        Integer pageRangeStart = null;
        String readMask = null;
        GoogleCloudDocumentaiV1beta3GetDocumentResponse response = api.documentaiProjectsLocationsProcessorsDatasetGetDocument(dataset, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, documentIdGcsManagedDocIdCwDocId, documentIdGcsManagedDocIdGcsUri, documentIdRevisionRefLatestProcessorVersion, documentIdRevisionRefRevisionCase, documentIdRevisionRefRevisionId, documentIdUnmanagedDocIdDocId, pageRangeEnd, pageRangeStart, readMask);
        // TODO: test validations
    }

    /**
     * Import documents into a dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorsDatasetImportDocumentsTest() throws ApiException {
        String dataset = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDocumentaiV1beta3ImportDocumentsRequest googleCloudDocumentaiV1beta3ImportDocumentsRequest = null;
        GoogleLongrunningOperation response = api.documentaiProjectsLocationsProcessorsDatasetImportDocuments(dataset, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDocumentaiV1beta3ImportDocumentsRequest);
        // TODO: test validations
    }

    /**
     * Returns a list of documents present in the dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorsDatasetListDocumentsTest() throws ApiException {
        String dataset = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDocumentaiV1beta3ListDocumentsRequest googleCloudDocumentaiV1beta3ListDocumentsRequest = null;
        GoogleCloudDocumentaiV1beta3ListDocumentsResponse response = api.documentaiProjectsLocationsProcessorsDatasetListDocuments(dataset, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDocumentaiV1beta3ListDocumentsRequest);
        // TODO: test validations
    }

    /**
     * Updates a &#x60;DatasetSchema&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorsDatasetUpdateDatasetSchemaTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        GoogleCloudDocumentaiV1beta3DatasetSchema googleCloudDocumentaiV1beta3DatasetSchema = null;
        GoogleCloudDocumentaiV1beta3DatasetSchema response = api.documentaiProjectsLocationsProcessorsDatasetUpdateDatasetSchema(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, googleCloudDocumentaiV1beta3DatasetSchema);
        // TODO: test validations
    }

    /**
     * Disables a processor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorsDisableTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleLongrunningOperation response = api.documentaiProjectsLocationsProcessorsDisable(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Enables a processor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorsEnableTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleLongrunningOperation response = api.documentaiProjectsLocationsProcessorsEnable(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Send a document for Human Review. The input document should be processed by the specified processor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentTest() throws ApiException {
        String humanReviewConfig = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDocumentaiV1beta3ReviewDocumentRequest googleCloudDocumentaiV1beta3ReviewDocumentRequest = null;
        GoogleLongrunningOperation response = api.documentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocument(humanReviewConfig, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDocumentaiV1beta3ReviewDocumentRequest);
        // TODO: test validations
    }

    /**
     * Lists all processors which belong to this project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudDocumentaiV1beta3ListProcessorsResponse response = api.documentaiProjectsLocationsProcessorsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * LRO endpoint to batch process many documents. The output is written to Cloud Storage as JSON in the [Document] format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDocumentaiV1beta3BatchProcessRequest googleCloudDocumentaiV1beta3BatchProcessRequest = null;
        GoogleLongrunningOperation response = api.documentaiProjectsLocationsProcessorsProcessorVersionsBatchProcess(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDocumentaiV1beta3BatchProcessRequest);
        // TODO: test validations
    }

    /**
     * Deletes the processor version, all artifacts under the processor version will be deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorsProcessorVersionsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleLongrunningOperation response = api.documentaiProjectsLocationsProcessorsProcessorVersionsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Deploys the processor version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorsProcessorVersionsDeployTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleLongrunningOperation response = api.documentaiProjectsLocationsProcessorsProcessorVersionsDeploy(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Evaluates a ProcessorVersion against annotated documents, producing an Evaluation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionTest() throws ApiException {
        String processorVersion = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDocumentaiV1beta3EvaluateProcessorVersionRequest googleCloudDocumentaiV1beta3EvaluateProcessorVersionRequest = null;
        GoogleLongrunningOperation response = api.documentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersion(processorVersion, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDocumentaiV1beta3EvaluateProcessorVersionRequest);
        // TODO: test validations
    }

    /**
     * Retrieves a set of evaluations for a given processor version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudDocumentaiV1beta3ListEvaluationsResponse response = api.documentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Imports a processor version from source processor version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorsProcessorVersionsImportProcessorVersionTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDocumentaiV1beta3ImportProcessorVersionRequest googleCloudDocumentaiV1beta3ImportProcessorVersionRequest = null;
        GoogleLongrunningOperation response = api.documentaiProjectsLocationsProcessorsProcessorVersionsImportProcessorVersion(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDocumentaiV1beta3ImportProcessorVersionRequest);
        // TODO: test validations
    }

    /**
     * Lists all versions of a processor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorsProcessorVersionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudDocumentaiV1beta3ListProcessorVersionsResponse response = api.documentaiProjectsLocationsProcessorsProcessorVersionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Processes a single document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorsProcessorVersionsProcessTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDocumentaiV1beta3ProcessRequest googleCloudDocumentaiV1beta3ProcessRequest = null;
        GoogleCloudDocumentaiV1beta3ProcessResponse response = api.documentaiProjectsLocationsProcessorsProcessorVersionsProcess(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDocumentaiV1beta3ProcessRequest);
        // TODO: test validations
    }

    /**
     * Trains a new processor version. Operation metadata is returned as TrainProcessorVersionMetadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorsProcessorVersionsTrainTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDocumentaiV1beta3TrainProcessorVersionRequest googleCloudDocumentaiV1beta3TrainProcessorVersionRequest = null;
        GoogleLongrunningOperation response = api.documentaiProjectsLocationsProcessorsProcessorVersionsTrain(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDocumentaiV1beta3TrainProcessorVersionRequest);
        // TODO: test validations
    }

    /**
     * Undeploys the processor version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorsProcessorVersionsUndeployTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GoogleLongrunningOperation response = api.documentaiProjectsLocationsProcessorsProcessorVersionsUndeploy(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Set the default (active) version of a Processor that will be used in ProcessDocument and BatchProcessDocuments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentaiProjectsLocationsProcessorsSetDefaultProcessorVersionTest() throws ApiException {
        String processor = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudDocumentaiV1beta3SetDefaultProcessorVersionRequest googleCloudDocumentaiV1beta3SetDefaultProcessorVersionRequest = null;
        GoogleLongrunningOperation response = api.documentaiProjectsLocationsProcessorsSetDefaultProcessorVersion(processor, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudDocumentaiV1beta3SetDefaultProcessorVersionRequest);
        // TODO: test validations
    }

}
