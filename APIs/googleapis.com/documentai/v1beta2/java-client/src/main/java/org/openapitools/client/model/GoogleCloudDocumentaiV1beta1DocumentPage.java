/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentPageBlock;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentPageDetectedBarcode;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentPageDimension;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentPageFormField;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentPageImage;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentPageImageQualityScores;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentPageLayout;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentPageLine;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentPageMatrix;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentPageParagraph;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentPageSymbol;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentPageTable;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentPageToken;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentPageVisualElement;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentProvenance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A page in a Document.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:51.583823-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDocumentaiV1beta1DocumentPage {
  public static final String SERIALIZED_NAME_BLOCKS = "blocks";
  @SerializedName(SERIALIZED_NAME_BLOCKS)
  private List<GoogleCloudDocumentaiV1beta1DocumentPageBlock> blocks = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETECTED_BARCODES = "detectedBarcodes";
  @SerializedName(SERIALIZED_NAME_DETECTED_BARCODES)
  private List<GoogleCloudDocumentaiV1beta1DocumentPageDetectedBarcode> detectedBarcodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETECTED_LANGUAGES = "detectedLanguages";
  @SerializedName(SERIALIZED_NAME_DETECTED_LANGUAGES)
  private List<GoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage> detectedLanguages = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIMENSION = "dimension";
  @SerializedName(SERIALIZED_NAME_DIMENSION)
  private GoogleCloudDocumentaiV1beta1DocumentPageDimension dimension;

  public static final String SERIALIZED_NAME_FORM_FIELDS = "formFields";
  @SerializedName(SERIALIZED_NAME_FORM_FIELDS)
  private List<GoogleCloudDocumentaiV1beta1DocumentPageFormField> formFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private GoogleCloudDocumentaiV1beta1DocumentPageImage image;

  public static final String SERIALIZED_NAME_IMAGE_QUALITY_SCORES = "imageQualityScores";
  @SerializedName(SERIALIZED_NAME_IMAGE_QUALITY_SCORES)
  private GoogleCloudDocumentaiV1beta1DocumentPageImageQualityScores imageQualityScores;

  public static final String SERIALIZED_NAME_LAYOUT = "layout";
  @SerializedName(SERIALIZED_NAME_LAYOUT)
  private GoogleCloudDocumentaiV1beta1DocumentPageLayout layout;

  public static final String SERIALIZED_NAME_LINES = "lines";
  @SerializedName(SERIALIZED_NAME_LINES)
  private List<GoogleCloudDocumentaiV1beta1DocumentPageLine> lines = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAGE_NUMBER = "pageNumber";
  @SerializedName(SERIALIZED_NAME_PAGE_NUMBER)
  private Integer pageNumber;

  public static final String SERIALIZED_NAME_PARAGRAPHS = "paragraphs";
  @SerializedName(SERIALIZED_NAME_PARAGRAPHS)
  private List<GoogleCloudDocumentaiV1beta1DocumentPageParagraph> paragraphs = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVENANCE = "provenance";
  @SerializedName(SERIALIZED_NAME_PROVENANCE)
  private GoogleCloudDocumentaiV1beta1DocumentProvenance provenance;

  public static final String SERIALIZED_NAME_SYMBOLS = "symbols";
  @SerializedName(SERIALIZED_NAME_SYMBOLS)
  private List<GoogleCloudDocumentaiV1beta1DocumentPageSymbol> symbols = new ArrayList<>();

  public static final String SERIALIZED_NAME_TABLES = "tables";
  @SerializedName(SERIALIZED_NAME_TABLES)
  private List<GoogleCloudDocumentaiV1beta1DocumentPageTable> tables = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOKENS = "tokens";
  @SerializedName(SERIALIZED_NAME_TOKENS)
  private List<GoogleCloudDocumentaiV1beta1DocumentPageToken> tokens = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSFORMS = "transforms";
  @SerializedName(SERIALIZED_NAME_TRANSFORMS)
  private List<GoogleCloudDocumentaiV1beta1DocumentPageMatrix> transforms = new ArrayList<>();

  public static final String SERIALIZED_NAME_VISUAL_ELEMENTS = "visualElements";
  @SerializedName(SERIALIZED_NAME_VISUAL_ELEMENTS)
  private List<GoogleCloudDocumentaiV1beta1DocumentPageVisualElement> visualElements = new ArrayList<>();

  public GoogleCloudDocumentaiV1beta1DocumentPage() {
  }

  public GoogleCloudDocumentaiV1beta1DocumentPage blocks(List<GoogleCloudDocumentaiV1beta1DocumentPageBlock> blocks) {
    this.blocks = blocks;
    return this;
  }

  public GoogleCloudDocumentaiV1beta1DocumentPage addBlocksItem(GoogleCloudDocumentaiV1beta1DocumentPageBlock blocksItem) {
    if (this.blocks == null) {
      this.blocks = new ArrayList<>();
    }
    this.blocks.add(blocksItem);
    return this;
  }

  /**
   * A list of visually detected text blocks on the page. A block has a set of lines (collected into paragraphs) that have a common line-spacing and orientation.
   * @return blocks
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta1DocumentPageBlock> getBlocks() {
    return blocks;
  }

  public void setBlocks(List<GoogleCloudDocumentaiV1beta1DocumentPageBlock> blocks) {
    this.blocks = blocks;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPage detectedBarcodes(List<GoogleCloudDocumentaiV1beta1DocumentPageDetectedBarcode> detectedBarcodes) {
    this.detectedBarcodes = detectedBarcodes;
    return this;
  }

  public GoogleCloudDocumentaiV1beta1DocumentPage addDetectedBarcodesItem(GoogleCloudDocumentaiV1beta1DocumentPageDetectedBarcode detectedBarcodesItem) {
    if (this.detectedBarcodes == null) {
      this.detectedBarcodes = new ArrayList<>();
    }
    this.detectedBarcodes.add(detectedBarcodesItem);
    return this;
  }

  /**
   * A list of detected barcodes.
   * @return detectedBarcodes
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta1DocumentPageDetectedBarcode> getDetectedBarcodes() {
    return detectedBarcodes;
  }

  public void setDetectedBarcodes(List<GoogleCloudDocumentaiV1beta1DocumentPageDetectedBarcode> detectedBarcodes) {
    this.detectedBarcodes = detectedBarcodes;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPage detectedLanguages(List<GoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage> detectedLanguages) {
    this.detectedLanguages = detectedLanguages;
    return this;
  }

  public GoogleCloudDocumentaiV1beta1DocumentPage addDetectedLanguagesItem(GoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage detectedLanguagesItem) {
    if (this.detectedLanguages == null) {
      this.detectedLanguages = new ArrayList<>();
    }
    this.detectedLanguages.add(detectedLanguagesItem);
    return this;
  }

  /**
   * A list of detected languages together with confidence.
   * @return detectedLanguages
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage> getDetectedLanguages() {
    return detectedLanguages;
  }

  public void setDetectedLanguages(List<GoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage> detectedLanguages) {
    this.detectedLanguages = detectedLanguages;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPage dimension(GoogleCloudDocumentaiV1beta1DocumentPageDimension dimension) {
    this.dimension = dimension;
    return this;
  }

  /**
   * Get dimension
   * @return dimension
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta1DocumentPageDimension getDimension() {
    return dimension;
  }

  public void setDimension(GoogleCloudDocumentaiV1beta1DocumentPageDimension dimension) {
    this.dimension = dimension;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPage formFields(List<GoogleCloudDocumentaiV1beta1DocumentPageFormField> formFields) {
    this.formFields = formFields;
    return this;
  }

  public GoogleCloudDocumentaiV1beta1DocumentPage addFormFieldsItem(GoogleCloudDocumentaiV1beta1DocumentPageFormField formFieldsItem) {
    if (this.formFields == null) {
      this.formFields = new ArrayList<>();
    }
    this.formFields.add(formFieldsItem);
    return this;
  }

  /**
   * A list of visually detected form fields on the page.
   * @return formFields
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta1DocumentPageFormField> getFormFields() {
    return formFields;
  }

  public void setFormFields(List<GoogleCloudDocumentaiV1beta1DocumentPageFormField> formFields) {
    this.formFields = formFields;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPage image(GoogleCloudDocumentaiV1beta1DocumentPageImage image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta1DocumentPageImage getImage() {
    return image;
  }

  public void setImage(GoogleCloudDocumentaiV1beta1DocumentPageImage image) {
    this.image = image;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPage imageQualityScores(GoogleCloudDocumentaiV1beta1DocumentPageImageQualityScores imageQualityScores) {
    this.imageQualityScores = imageQualityScores;
    return this;
  }

  /**
   * Get imageQualityScores
   * @return imageQualityScores
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta1DocumentPageImageQualityScores getImageQualityScores() {
    return imageQualityScores;
  }

  public void setImageQualityScores(GoogleCloudDocumentaiV1beta1DocumentPageImageQualityScores imageQualityScores) {
    this.imageQualityScores = imageQualityScores;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPage layout(GoogleCloudDocumentaiV1beta1DocumentPageLayout layout) {
    this.layout = layout;
    return this;
  }

  /**
   * Get layout
   * @return layout
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta1DocumentPageLayout getLayout() {
    return layout;
  }

  public void setLayout(GoogleCloudDocumentaiV1beta1DocumentPageLayout layout) {
    this.layout = layout;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPage lines(List<GoogleCloudDocumentaiV1beta1DocumentPageLine> lines) {
    this.lines = lines;
    return this;
  }

  public GoogleCloudDocumentaiV1beta1DocumentPage addLinesItem(GoogleCloudDocumentaiV1beta1DocumentPageLine linesItem) {
    if (this.lines == null) {
      this.lines = new ArrayList<>();
    }
    this.lines.add(linesItem);
    return this;
  }

  /**
   * A list of visually detected text lines on the page. A collection of tokens that a human would perceive as a line.
   * @return lines
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta1DocumentPageLine> getLines() {
    return lines;
  }

  public void setLines(List<GoogleCloudDocumentaiV1beta1DocumentPageLine> lines) {
    this.lines = lines;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPage pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

  /**
   * 1-based index for current Page in a parent Document. Useful when a page is taken out of a Document for individual processing.
   * @return pageNumber
   */
  @javax.annotation.Nullable
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPage paragraphs(List<GoogleCloudDocumentaiV1beta1DocumentPageParagraph> paragraphs) {
    this.paragraphs = paragraphs;
    return this;
  }

  public GoogleCloudDocumentaiV1beta1DocumentPage addParagraphsItem(GoogleCloudDocumentaiV1beta1DocumentPageParagraph paragraphsItem) {
    if (this.paragraphs == null) {
      this.paragraphs = new ArrayList<>();
    }
    this.paragraphs.add(paragraphsItem);
    return this;
  }

  /**
   * A list of visually detected text paragraphs on the page. A collection of lines that a human would perceive as a paragraph.
   * @return paragraphs
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta1DocumentPageParagraph> getParagraphs() {
    return paragraphs;
  }

  public void setParagraphs(List<GoogleCloudDocumentaiV1beta1DocumentPageParagraph> paragraphs) {
    this.paragraphs = paragraphs;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPage provenance(GoogleCloudDocumentaiV1beta1DocumentProvenance provenance) {
    this.provenance = provenance;
    return this;
  }

  /**
   * Get provenance
   * @return provenance
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta1DocumentProvenance getProvenance() {
    return provenance;
  }

  public void setProvenance(GoogleCloudDocumentaiV1beta1DocumentProvenance provenance) {
    this.provenance = provenance;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPage symbols(List<GoogleCloudDocumentaiV1beta1DocumentPageSymbol> symbols) {
    this.symbols = symbols;
    return this;
  }

  public GoogleCloudDocumentaiV1beta1DocumentPage addSymbolsItem(GoogleCloudDocumentaiV1beta1DocumentPageSymbol symbolsItem) {
    if (this.symbols == null) {
      this.symbols = new ArrayList<>();
    }
    this.symbols.add(symbolsItem);
    return this;
  }

  /**
   * A list of visually detected symbols on the page.
   * @return symbols
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta1DocumentPageSymbol> getSymbols() {
    return symbols;
  }

  public void setSymbols(List<GoogleCloudDocumentaiV1beta1DocumentPageSymbol> symbols) {
    this.symbols = symbols;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPage tables(List<GoogleCloudDocumentaiV1beta1DocumentPageTable> tables) {
    this.tables = tables;
    return this;
  }

  public GoogleCloudDocumentaiV1beta1DocumentPage addTablesItem(GoogleCloudDocumentaiV1beta1DocumentPageTable tablesItem) {
    if (this.tables == null) {
      this.tables = new ArrayList<>();
    }
    this.tables.add(tablesItem);
    return this;
  }

  /**
   * A list of visually detected tables on the page.
   * @return tables
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta1DocumentPageTable> getTables() {
    return tables;
  }

  public void setTables(List<GoogleCloudDocumentaiV1beta1DocumentPageTable> tables) {
    this.tables = tables;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPage tokens(List<GoogleCloudDocumentaiV1beta1DocumentPageToken> tokens) {
    this.tokens = tokens;
    return this;
  }

  public GoogleCloudDocumentaiV1beta1DocumentPage addTokensItem(GoogleCloudDocumentaiV1beta1DocumentPageToken tokensItem) {
    if (this.tokens == null) {
      this.tokens = new ArrayList<>();
    }
    this.tokens.add(tokensItem);
    return this;
  }

  /**
   * A list of visually detected tokens on the page.
   * @return tokens
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta1DocumentPageToken> getTokens() {
    return tokens;
  }

  public void setTokens(List<GoogleCloudDocumentaiV1beta1DocumentPageToken> tokens) {
    this.tokens = tokens;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPage transforms(List<GoogleCloudDocumentaiV1beta1DocumentPageMatrix> transforms) {
    this.transforms = transforms;
    return this;
  }

  public GoogleCloudDocumentaiV1beta1DocumentPage addTransformsItem(GoogleCloudDocumentaiV1beta1DocumentPageMatrix transformsItem) {
    if (this.transforms == null) {
      this.transforms = new ArrayList<>();
    }
    this.transforms.add(transformsItem);
    return this;
  }

  /**
   * Transformation matrices that were applied to the original document image to produce Page.image.
   * @return transforms
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta1DocumentPageMatrix> getTransforms() {
    return transforms;
  }

  public void setTransforms(List<GoogleCloudDocumentaiV1beta1DocumentPageMatrix> transforms) {
    this.transforms = transforms;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPage visualElements(List<GoogleCloudDocumentaiV1beta1DocumentPageVisualElement> visualElements) {
    this.visualElements = visualElements;
    return this;
  }

  public GoogleCloudDocumentaiV1beta1DocumentPage addVisualElementsItem(GoogleCloudDocumentaiV1beta1DocumentPageVisualElement visualElementsItem) {
    if (this.visualElements == null) {
      this.visualElements = new ArrayList<>();
    }
    this.visualElements.add(visualElementsItem);
    return this;
  }

  /**
   * A list of detected non-text visual elements e.g. checkbox, signature etc. on the page.
   * @return visualElements
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta1DocumentPageVisualElement> getVisualElements() {
    return visualElements;
  }

  public void setVisualElements(List<GoogleCloudDocumentaiV1beta1DocumentPageVisualElement> visualElements) {
    this.visualElements = visualElements;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDocumentaiV1beta1DocumentPage googleCloudDocumentaiV1beta1DocumentPage = (GoogleCloudDocumentaiV1beta1DocumentPage) o;
    return Objects.equals(this.blocks, googleCloudDocumentaiV1beta1DocumentPage.blocks) &&
        Objects.equals(this.detectedBarcodes, googleCloudDocumentaiV1beta1DocumentPage.detectedBarcodes) &&
        Objects.equals(this.detectedLanguages, googleCloudDocumentaiV1beta1DocumentPage.detectedLanguages) &&
        Objects.equals(this.dimension, googleCloudDocumentaiV1beta1DocumentPage.dimension) &&
        Objects.equals(this.formFields, googleCloudDocumentaiV1beta1DocumentPage.formFields) &&
        Objects.equals(this.image, googleCloudDocumentaiV1beta1DocumentPage.image) &&
        Objects.equals(this.imageQualityScores, googleCloudDocumentaiV1beta1DocumentPage.imageQualityScores) &&
        Objects.equals(this.layout, googleCloudDocumentaiV1beta1DocumentPage.layout) &&
        Objects.equals(this.lines, googleCloudDocumentaiV1beta1DocumentPage.lines) &&
        Objects.equals(this.pageNumber, googleCloudDocumentaiV1beta1DocumentPage.pageNumber) &&
        Objects.equals(this.paragraphs, googleCloudDocumentaiV1beta1DocumentPage.paragraphs) &&
        Objects.equals(this.provenance, googleCloudDocumentaiV1beta1DocumentPage.provenance) &&
        Objects.equals(this.symbols, googleCloudDocumentaiV1beta1DocumentPage.symbols) &&
        Objects.equals(this.tables, googleCloudDocumentaiV1beta1DocumentPage.tables) &&
        Objects.equals(this.tokens, googleCloudDocumentaiV1beta1DocumentPage.tokens) &&
        Objects.equals(this.transforms, googleCloudDocumentaiV1beta1DocumentPage.transforms) &&
        Objects.equals(this.visualElements, googleCloudDocumentaiV1beta1DocumentPage.visualElements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blocks, detectedBarcodes, detectedLanguages, dimension, formFields, image, imageQualityScores, layout, lines, pageNumber, paragraphs, provenance, symbols, tables, tokens, transforms, visualElements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDocumentaiV1beta1DocumentPage {\n");
    sb.append("    blocks: ").append(toIndentedString(blocks)).append("\n");
    sb.append("    detectedBarcodes: ").append(toIndentedString(detectedBarcodes)).append("\n");
    sb.append("    detectedLanguages: ").append(toIndentedString(detectedLanguages)).append("\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    formFields: ").append(toIndentedString(formFields)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imageQualityScores: ").append(toIndentedString(imageQualityScores)).append("\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("    lines: ").append(toIndentedString(lines)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    paragraphs: ").append(toIndentedString(paragraphs)).append("\n");
    sb.append("    provenance: ").append(toIndentedString(provenance)).append("\n");
    sb.append("    symbols: ").append(toIndentedString(symbols)).append("\n");
    sb.append("    tables: ").append(toIndentedString(tables)).append("\n");
    sb.append("    tokens: ").append(toIndentedString(tokens)).append("\n");
    sb.append("    transforms: ").append(toIndentedString(transforms)).append("\n");
    sb.append("    visualElements: ").append(toIndentedString(visualElements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blocks");
    openapiFields.add("detectedBarcodes");
    openapiFields.add("detectedLanguages");
    openapiFields.add("dimension");
    openapiFields.add("formFields");
    openapiFields.add("image");
    openapiFields.add("imageQualityScores");
    openapiFields.add("layout");
    openapiFields.add("lines");
    openapiFields.add("pageNumber");
    openapiFields.add("paragraphs");
    openapiFields.add("provenance");
    openapiFields.add("symbols");
    openapiFields.add("tables");
    openapiFields.add("tokens");
    openapiFields.add("transforms");
    openapiFields.add("visualElements");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDocumentaiV1beta1DocumentPage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDocumentaiV1beta1DocumentPage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDocumentaiV1beta1DocumentPage is not found in the empty JSON string", GoogleCloudDocumentaiV1beta1DocumentPage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDocumentaiV1beta1DocumentPage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDocumentaiV1beta1DocumentPage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("blocks") != null && !jsonObj.get("blocks").isJsonNull()) {
        JsonArray jsonArrayblocks = jsonObj.getAsJsonArray("blocks");
        if (jsonArrayblocks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("blocks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `blocks` to be an array in the JSON string but got `%s`", jsonObj.get("blocks").toString()));
          }

          // validate the optional field `blocks` (array)
          for (int i = 0; i < jsonArrayblocks.size(); i++) {
            GoogleCloudDocumentaiV1beta1DocumentPageBlock.validateJsonElement(jsonArrayblocks.get(i));
          };
        }
      }
      if (jsonObj.get("detectedBarcodes") != null && !jsonObj.get("detectedBarcodes").isJsonNull()) {
        JsonArray jsonArraydetectedBarcodes = jsonObj.getAsJsonArray("detectedBarcodes");
        if (jsonArraydetectedBarcodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("detectedBarcodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `detectedBarcodes` to be an array in the JSON string but got `%s`", jsonObj.get("detectedBarcodes").toString()));
          }

          // validate the optional field `detectedBarcodes` (array)
          for (int i = 0; i < jsonArraydetectedBarcodes.size(); i++) {
            GoogleCloudDocumentaiV1beta1DocumentPageDetectedBarcode.validateJsonElement(jsonArraydetectedBarcodes.get(i));
          };
        }
      }
      if (jsonObj.get("detectedLanguages") != null && !jsonObj.get("detectedLanguages").isJsonNull()) {
        JsonArray jsonArraydetectedLanguages = jsonObj.getAsJsonArray("detectedLanguages");
        if (jsonArraydetectedLanguages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("detectedLanguages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `detectedLanguages` to be an array in the JSON string but got `%s`", jsonObj.get("detectedLanguages").toString()));
          }

          // validate the optional field `detectedLanguages` (array)
          for (int i = 0; i < jsonArraydetectedLanguages.size(); i++) {
            GoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage.validateJsonElement(jsonArraydetectedLanguages.get(i));
          };
        }
      }
      // validate the optional field `dimension`
      if (jsonObj.get("dimension") != null && !jsonObj.get("dimension").isJsonNull()) {
        GoogleCloudDocumentaiV1beta1DocumentPageDimension.validateJsonElement(jsonObj.get("dimension"));
      }
      if (jsonObj.get("formFields") != null && !jsonObj.get("formFields").isJsonNull()) {
        JsonArray jsonArrayformFields = jsonObj.getAsJsonArray("formFields");
        if (jsonArrayformFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("formFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `formFields` to be an array in the JSON string but got `%s`", jsonObj.get("formFields").toString()));
          }

          // validate the optional field `formFields` (array)
          for (int i = 0; i < jsonArrayformFields.size(); i++) {
            GoogleCloudDocumentaiV1beta1DocumentPageFormField.validateJsonElement(jsonArrayformFields.get(i));
          };
        }
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        GoogleCloudDocumentaiV1beta1DocumentPageImage.validateJsonElement(jsonObj.get("image"));
      }
      // validate the optional field `imageQualityScores`
      if (jsonObj.get("imageQualityScores") != null && !jsonObj.get("imageQualityScores").isJsonNull()) {
        GoogleCloudDocumentaiV1beta1DocumentPageImageQualityScores.validateJsonElement(jsonObj.get("imageQualityScores"));
      }
      // validate the optional field `layout`
      if (jsonObj.get("layout") != null && !jsonObj.get("layout").isJsonNull()) {
        GoogleCloudDocumentaiV1beta1DocumentPageLayout.validateJsonElement(jsonObj.get("layout"));
      }
      if (jsonObj.get("lines") != null && !jsonObj.get("lines").isJsonNull()) {
        JsonArray jsonArraylines = jsonObj.getAsJsonArray("lines");
        if (jsonArraylines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lines` to be an array in the JSON string but got `%s`", jsonObj.get("lines").toString()));
          }

          // validate the optional field `lines` (array)
          for (int i = 0; i < jsonArraylines.size(); i++) {
            GoogleCloudDocumentaiV1beta1DocumentPageLine.validateJsonElement(jsonArraylines.get(i));
          };
        }
      }
      if (jsonObj.get("paragraphs") != null && !jsonObj.get("paragraphs").isJsonNull()) {
        JsonArray jsonArrayparagraphs = jsonObj.getAsJsonArray("paragraphs");
        if (jsonArrayparagraphs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("paragraphs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `paragraphs` to be an array in the JSON string but got `%s`", jsonObj.get("paragraphs").toString()));
          }

          // validate the optional field `paragraphs` (array)
          for (int i = 0; i < jsonArrayparagraphs.size(); i++) {
            GoogleCloudDocumentaiV1beta1DocumentPageParagraph.validateJsonElement(jsonArrayparagraphs.get(i));
          };
        }
      }
      // validate the optional field `provenance`
      if (jsonObj.get("provenance") != null && !jsonObj.get("provenance").isJsonNull()) {
        GoogleCloudDocumentaiV1beta1DocumentProvenance.validateJsonElement(jsonObj.get("provenance"));
      }
      if (jsonObj.get("symbols") != null && !jsonObj.get("symbols").isJsonNull()) {
        JsonArray jsonArraysymbols = jsonObj.getAsJsonArray("symbols");
        if (jsonArraysymbols != null) {
          // ensure the json data is an array
          if (!jsonObj.get("symbols").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `symbols` to be an array in the JSON string but got `%s`", jsonObj.get("symbols").toString()));
          }

          // validate the optional field `symbols` (array)
          for (int i = 0; i < jsonArraysymbols.size(); i++) {
            GoogleCloudDocumentaiV1beta1DocumentPageSymbol.validateJsonElement(jsonArraysymbols.get(i));
          };
        }
      }
      if (jsonObj.get("tables") != null && !jsonObj.get("tables").isJsonNull()) {
        JsonArray jsonArraytables = jsonObj.getAsJsonArray("tables");
        if (jsonArraytables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tables` to be an array in the JSON string but got `%s`", jsonObj.get("tables").toString()));
          }

          // validate the optional field `tables` (array)
          for (int i = 0; i < jsonArraytables.size(); i++) {
            GoogleCloudDocumentaiV1beta1DocumentPageTable.validateJsonElement(jsonArraytables.get(i));
          };
        }
      }
      if (jsonObj.get("tokens") != null && !jsonObj.get("tokens").isJsonNull()) {
        JsonArray jsonArraytokens = jsonObj.getAsJsonArray("tokens");
        if (jsonArraytokens != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tokens").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tokens` to be an array in the JSON string but got `%s`", jsonObj.get("tokens").toString()));
          }

          // validate the optional field `tokens` (array)
          for (int i = 0; i < jsonArraytokens.size(); i++) {
            GoogleCloudDocumentaiV1beta1DocumentPageToken.validateJsonElement(jsonArraytokens.get(i));
          };
        }
      }
      if (jsonObj.get("transforms") != null && !jsonObj.get("transforms").isJsonNull()) {
        JsonArray jsonArraytransforms = jsonObj.getAsJsonArray("transforms");
        if (jsonArraytransforms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transforms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transforms` to be an array in the JSON string but got `%s`", jsonObj.get("transforms").toString()));
          }

          // validate the optional field `transforms` (array)
          for (int i = 0; i < jsonArraytransforms.size(); i++) {
            GoogleCloudDocumentaiV1beta1DocumentPageMatrix.validateJsonElement(jsonArraytransforms.get(i));
          };
        }
      }
      if (jsonObj.get("visualElements") != null && !jsonObj.get("visualElements").isJsonNull()) {
        JsonArray jsonArrayvisualElements = jsonObj.getAsJsonArray("visualElements");
        if (jsonArrayvisualElements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("visualElements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `visualElements` to be an array in the JSON string but got `%s`", jsonObj.get("visualElements").toString()));
          }

          // validate the optional field `visualElements` (array)
          for (int i = 0; i < jsonArrayvisualElements.size(); i++) {
            GoogleCloudDocumentaiV1beta1DocumentPageVisualElement.validateJsonElement(jsonArrayvisualElements.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDocumentaiV1beta1DocumentPage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDocumentaiV1beta1DocumentPage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDocumentaiV1beta1DocumentPage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDocumentaiV1beta1DocumentPage.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDocumentaiV1beta1DocumentPage>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDocumentaiV1beta1DocumentPage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDocumentaiV1beta1DocumentPage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDocumentaiV1beta1DocumentPage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDocumentaiV1beta1DocumentPage
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDocumentaiV1beta1DocumentPage
   */
  public static GoogleCloudDocumentaiV1beta1DocumentPage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDocumentaiV1beta1DocumentPage.class);
  }

  /**
   * Convert an instance of GoogleCloudDocumentaiV1beta1DocumentPage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

