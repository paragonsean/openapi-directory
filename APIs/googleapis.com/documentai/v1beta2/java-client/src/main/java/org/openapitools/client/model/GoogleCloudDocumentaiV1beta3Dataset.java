/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3DatasetDocumentWarehouseConfig;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A singleton resource under a Processor which configures a collection of documents.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:51.583823-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDocumentaiV1beta3Dataset {
  public static final String SERIALIZED_NAME_DOCUMENT_WAREHOUSE_CONFIG = "documentWarehouseConfig";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_WAREHOUSE_CONFIG)
  private GoogleCloudDocumentaiV1beta3DatasetDocumentWarehouseConfig documentWarehouseConfig;

  public static final String SERIALIZED_NAME_GCS_MANAGED_CONFIG = "gcsManagedConfig";
  @SerializedName(SERIALIZED_NAME_GCS_MANAGED_CONFIG)
  private GoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig gcsManagedConfig;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SPANNER_INDEXING_CONFIG = "spannerIndexingConfig";
  @SerializedName(SERIALIZED_NAME_SPANNER_INDEXING_CONFIG)
  private Object spannerIndexingConfig;

  /**
   * Required. State of the dataset. Ignored when updating dataset.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    UNINITIALIZED("UNINITIALIZED"),
    
    INITIALIZING("INITIALIZING"),
    
    INITIALIZED("INITIALIZED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UNMANAGED_DATASET_CONFIG = "unmanagedDatasetConfig";
  @SerializedName(SERIALIZED_NAME_UNMANAGED_DATASET_CONFIG)
  private Object unmanagedDatasetConfig;

  public GoogleCloudDocumentaiV1beta3Dataset() {
  }

  public GoogleCloudDocumentaiV1beta3Dataset documentWarehouseConfig(GoogleCloudDocumentaiV1beta3DatasetDocumentWarehouseConfig documentWarehouseConfig) {
    this.documentWarehouseConfig = documentWarehouseConfig;
    return this;
  }

  /**
   * Get documentWarehouseConfig
   * @return documentWarehouseConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta3DatasetDocumentWarehouseConfig getDocumentWarehouseConfig() {
    return documentWarehouseConfig;
  }

  public void setDocumentWarehouseConfig(GoogleCloudDocumentaiV1beta3DatasetDocumentWarehouseConfig documentWarehouseConfig) {
    this.documentWarehouseConfig = documentWarehouseConfig;
  }


  public GoogleCloudDocumentaiV1beta3Dataset gcsManagedConfig(GoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig gcsManagedConfig) {
    this.gcsManagedConfig = gcsManagedConfig;
    return this;
  }

  /**
   * Get gcsManagedConfig
   * @return gcsManagedConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig getGcsManagedConfig() {
    return gcsManagedConfig;
  }

  public void setGcsManagedConfig(GoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig gcsManagedConfig) {
    this.gcsManagedConfig = gcsManagedConfig;
  }


  public GoogleCloudDocumentaiV1beta3Dataset name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Dataset resource name. Format: &#x60;projects/{project}/locations/{location}/processors/{processor}/dataset&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudDocumentaiV1beta3Dataset spannerIndexingConfig(Object spannerIndexingConfig) {
    this.spannerIndexingConfig = spannerIndexingConfig;
    return this;
  }

  /**
   * Configuration specific to spanner-based indexing.
   * @return spannerIndexingConfig
   */
  @javax.annotation.Nullable
  public Object getSpannerIndexingConfig() {
    return spannerIndexingConfig;
  }

  public void setSpannerIndexingConfig(Object spannerIndexingConfig) {
    this.spannerIndexingConfig = spannerIndexingConfig;
  }


  public GoogleCloudDocumentaiV1beta3Dataset state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Required. State of the dataset. Ignored when updating dataset.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public GoogleCloudDocumentaiV1beta3Dataset unmanagedDatasetConfig(Object unmanagedDatasetConfig) {
    this.unmanagedDatasetConfig = unmanagedDatasetConfig;
    return this;
  }

  /**
   * Configuration specific to an unmanaged dataset.
   * @return unmanagedDatasetConfig
   */
  @javax.annotation.Nullable
  public Object getUnmanagedDatasetConfig() {
    return unmanagedDatasetConfig;
  }

  public void setUnmanagedDatasetConfig(Object unmanagedDatasetConfig) {
    this.unmanagedDatasetConfig = unmanagedDatasetConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDocumentaiV1beta3Dataset googleCloudDocumentaiV1beta3Dataset = (GoogleCloudDocumentaiV1beta3Dataset) o;
    return Objects.equals(this.documentWarehouseConfig, googleCloudDocumentaiV1beta3Dataset.documentWarehouseConfig) &&
        Objects.equals(this.gcsManagedConfig, googleCloudDocumentaiV1beta3Dataset.gcsManagedConfig) &&
        Objects.equals(this.name, googleCloudDocumentaiV1beta3Dataset.name) &&
        Objects.equals(this.spannerIndexingConfig, googleCloudDocumentaiV1beta3Dataset.spannerIndexingConfig) &&
        Objects.equals(this.state, googleCloudDocumentaiV1beta3Dataset.state) &&
        Objects.equals(this.unmanagedDatasetConfig, googleCloudDocumentaiV1beta3Dataset.unmanagedDatasetConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentWarehouseConfig, gcsManagedConfig, name, spannerIndexingConfig, state, unmanagedDatasetConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDocumentaiV1beta3Dataset {\n");
    sb.append("    documentWarehouseConfig: ").append(toIndentedString(documentWarehouseConfig)).append("\n");
    sb.append("    gcsManagedConfig: ").append(toIndentedString(gcsManagedConfig)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    spannerIndexingConfig: ").append(toIndentedString(spannerIndexingConfig)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    unmanagedDatasetConfig: ").append(toIndentedString(unmanagedDatasetConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentWarehouseConfig");
    openapiFields.add("gcsManagedConfig");
    openapiFields.add("name");
    openapiFields.add("spannerIndexingConfig");
    openapiFields.add("state");
    openapiFields.add("unmanagedDatasetConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDocumentaiV1beta3Dataset
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDocumentaiV1beta3Dataset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDocumentaiV1beta3Dataset is not found in the empty JSON string", GoogleCloudDocumentaiV1beta3Dataset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDocumentaiV1beta3Dataset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDocumentaiV1beta3Dataset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `documentWarehouseConfig`
      if (jsonObj.get("documentWarehouseConfig") != null && !jsonObj.get("documentWarehouseConfig").isJsonNull()) {
        GoogleCloudDocumentaiV1beta3DatasetDocumentWarehouseConfig.validateJsonElement(jsonObj.get("documentWarehouseConfig"));
      }
      // validate the optional field `gcsManagedConfig`
      if (jsonObj.get("gcsManagedConfig") != null && !jsonObj.get("gcsManagedConfig").isJsonNull()) {
        GoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig.validateJsonElement(jsonObj.get("gcsManagedConfig"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDocumentaiV1beta3Dataset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDocumentaiV1beta3Dataset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDocumentaiV1beta3Dataset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDocumentaiV1beta3Dataset.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDocumentaiV1beta3Dataset>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDocumentaiV1beta3Dataset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDocumentaiV1beta3Dataset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDocumentaiV1beta3Dataset given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDocumentaiV1beta3Dataset
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDocumentaiV1beta3Dataset
   */
  public static GoogleCloudDocumentaiV1beta3Dataset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDocumentaiV1beta3Dataset.class);
  }

  /**
   * Convert an instance of GoogleCloudDocumentaiV1beta3Dataset to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

