/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentStyleFontSize;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentTextAnchor;
import org.openapitools.client.model.GoogleTypeColor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Annotation for common text style attributes. This adheres to CSS conventions as much as possible.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:51.583823-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDocumentaiV1beta1DocumentStyle {
  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "backgroundColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private GoogleTypeColor backgroundColor;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private GoogleTypeColor color;

  public static final String SERIALIZED_NAME_FONT_FAMILY = "fontFamily";
  @SerializedName(SERIALIZED_NAME_FONT_FAMILY)
  private String fontFamily;

  public static final String SERIALIZED_NAME_FONT_SIZE = "fontSize";
  @SerializedName(SERIALIZED_NAME_FONT_SIZE)
  private GoogleCloudDocumentaiV1beta1DocumentStyleFontSize fontSize;

  public static final String SERIALIZED_NAME_FONT_WEIGHT = "fontWeight";
  @SerializedName(SERIALIZED_NAME_FONT_WEIGHT)
  private String fontWeight;

  public static final String SERIALIZED_NAME_TEXT_ANCHOR = "textAnchor";
  @SerializedName(SERIALIZED_NAME_TEXT_ANCHOR)
  private GoogleCloudDocumentaiV1beta1DocumentTextAnchor textAnchor;

  public static final String SERIALIZED_NAME_TEXT_DECORATION = "textDecoration";
  @SerializedName(SERIALIZED_NAME_TEXT_DECORATION)
  private String textDecoration;

  public static final String SERIALIZED_NAME_TEXT_STYLE = "textStyle";
  @SerializedName(SERIALIZED_NAME_TEXT_STYLE)
  private String textStyle;

  public GoogleCloudDocumentaiV1beta1DocumentStyle() {
  }

  public GoogleCloudDocumentaiV1beta1DocumentStyle backgroundColor(GoogleTypeColor backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * Get backgroundColor
   * @return backgroundColor
   */
  @javax.annotation.Nullable
  public GoogleTypeColor getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(GoogleTypeColor backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public GoogleCloudDocumentaiV1beta1DocumentStyle color(GoogleTypeColor color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public GoogleTypeColor getColor() {
    return color;
  }

  public void setColor(GoogleTypeColor color) {
    this.color = color;
  }


  public GoogleCloudDocumentaiV1beta1DocumentStyle fontFamily(String fontFamily) {
    this.fontFamily = fontFamily;
    return this;
  }

  /**
   * Font family such as &#x60;Arial&#x60;, &#x60;Times New Roman&#x60;. https://www.w3schools.com/cssref/pr_font_font-family.asp
   * @return fontFamily
   */
  @javax.annotation.Nullable
  public String getFontFamily() {
    return fontFamily;
  }

  public void setFontFamily(String fontFamily) {
    this.fontFamily = fontFamily;
  }


  public GoogleCloudDocumentaiV1beta1DocumentStyle fontSize(GoogleCloudDocumentaiV1beta1DocumentStyleFontSize fontSize) {
    this.fontSize = fontSize;
    return this;
  }

  /**
   * Get fontSize
   * @return fontSize
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta1DocumentStyleFontSize getFontSize() {
    return fontSize;
  }

  public void setFontSize(GoogleCloudDocumentaiV1beta1DocumentStyleFontSize fontSize) {
    this.fontSize = fontSize;
  }


  public GoogleCloudDocumentaiV1beta1DocumentStyle fontWeight(String fontWeight) {
    this.fontWeight = fontWeight;
    return this;
  }

  /**
   * [Font weight](https://www.w3schools.com/cssref/pr_font_weight.asp). Possible values are &#x60;normal&#x60;, &#x60;bold&#x60;, &#x60;bolder&#x60;, and &#x60;lighter&#x60;.
   * @return fontWeight
   */
  @javax.annotation.Nullable
  public String getFontWeight() {
    return fontWeight;
  }

  public void setFontWeight(String fontWeight) {
    this.fontWeight = fontWeight;
  }


  public GoogleCloudDocumentaiV1beta1DocumentStyle textAnchor(GoogleCloudDocumentaiV1beta1DocumentTextAnchor textAnchor) {
    this.textAnchor = textAnchor;
    return this;
  }

  /**
   * Get textAnchor
   * @return textAnchor
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta1DocumentTextAnchor getTextAnchor() {
    return textAnchor;
  }

  public void setTextAnchor(GoogleCloudDocumentaiV1beta1DocumentTextAnchor textAnchor) {
    this.textAnchor = textAnchor;
  }


  public GoogleCloudDocumentaiV1beta1DocumentStyle textDecoration(String textDecoration) {
    this.textDecoration = textDecoration;
    return this;
  }

  /**
   * [Text decoration](https://www.w3schools.com/cssref/pr_text_text-decoration.asp). Follows CSS standard. 
   * @return textDecoration
   */
  @javax.annotation.Nullable
  public String getTextDecoration() {
    return textDecoration;
  }

  public void setTextDecoration(String textDecoration) {
    this.textDecoration = textDecoration;
  }


  public GoogleCloudDocumentaiV1beta1DocumentStyle textStyle(String textStyle) {
    this.textStyle = textStyle;
    return this;
  }

  /**
   * [Text style](https://www.w3schools.com/cssref/pr_font_font-style.asp). Possible values are &#x60;normal&#x60;, &#x60;italic&#x60;, and &#x60;oblique&#x60;.
   * @return textStyle
   */
  @javax.annotation.Nullable
  public String getTextStyle() {
    return textStyle;
  }

  public void setTextStyle(String textStyle) {
    this.textStyle = textStyle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDocumentaiV1beta1DocumentStyle googleCloudDocumentaiV1beta1DocumentStyle = (GoogleCloudDocumentaiV1beta1DocumentStyle) o;
    return Objects.equals(this.backgroundColor, googleCloudDocumentaiV1beta1DocumentStyle.backgroundColor) &&
        Objects.equals(this.color, googleCloudDocumentaiV1beta1DocumentStyle.color) &&
        Objects.equals(this.fontFamily, googleCloudDocumentaiV1beta1DocumentStyle.fontFamily) &&
        Objects.equals(this.fontSize, googleCloudDocumentaiV1beta1DocumentStyle.fontSize) &&
        Objects.equals(this.fontWeight, googleCloudDocumentaiV1beta1DocumentStyle.fontWeight) &&
        Objects.equals(this.textAnchor, googleCloudDocumentaiV1beta1DocumentStyle.textAnchor) &&
        Objects.equals(this.textDecoration, googleCloudDocumentaiV1beta1DocumentStyle.textDecoration) &&
        Objects.equals(this.textStyle, googleCloudDocumentaiV1beta1DocumentStyle.textStyle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColor, color, fontFamily, fontSize, fontWeight, textAnchor, textDecoration, textStyle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDocumentaiV1beta1DocumentStyle {\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    fontFamily: ").append(toIndentedString(fontFamily)).append("\n");
    sb.append("    fontSize: ").append(toIndentedString(fontSize)).append("\n");
    sb.append("    fontWeight: ").append(toIndentedString(fontWeight)).append("\n");
    sb.append("    textAnchor: ").append(toIndentedString(textAnchor)).append("\n");
    sb.append("    textDecoration: ").append(toIndentedString(textDecoration)).append("\n");
    sb.append("    textStyle: ").append(toIndentedString(textStyle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backgroundColor");
    openapiFields.add("color");
    openapiFields.add("fontFamily");
    openapiFields.add("fontSize");
    openapiFields.add("fontWeight");
    openapiFields.add("textAnchor");
    openapiFields.add("textDecoration");
    openapiFields.add("textStyle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDocumentaiV1beta1DocumentStyle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDocumentaiV1beta1DocumentStyle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDocumentaiV1beta1DocumentStyle is not found in the empty JSON string", GoogleCloudDocumentaiV1beta1DocumentStyle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDocumentaiV1beta1DocumentStyle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDocumentaiV1beta1DocumentStyle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backgroundColor`
      if (jsonObj.get("backgroundColor") != null && !jsonObj.get("backgroundColor").isJsonNull()) {
        GoogleTypeColor.validateJsonElement(jsonObj.get("backgroundColor"));
      }
      // validate the optional field `color`
      if (jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) {
        GoogleTypeColor.validateJsonElement(jsonObj.get("color"));
      }
      if ((jsonObj.get("fontFamily") != null && !jsonObj.get("fontFamily").isJsonNull()) && !jsonObj.get("fontFamily").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fontFamily` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fontFamily").toString()));
      }
      // validate the optional field `fontSize`
      if (jsonObj.get("fontSize") != null && !jsonObj.get("fontSize").isJsonNull()) {
        GoogleCloudDocumentaiV1beta1DocumentStyleFontSize.validateJsonElement(jsonObj.get("fontSize"));
      }
      if ((jsonObj.get("fontWeight") != null && !jsonObj.get("fontWeight").isJsonNull()) && !jsonObj.get("fontWeight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fontWeight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fontWeight").toString()));
      }
      // validate the optional field `textAnchor`
      if (jsonObj.get("textAnchor") != null && !jsonObj.get("textAnchor").isJsonNull()) {
        GoogleCloudDocumentaiV1beta1DocumentTextAnchor.validateJsonElement(jsonObj.get("textAnchor"));
      }
      if ((jsonObj.get("textDecoration") != null && !jsonObj.get("textDecoration").isJsonNull()) && !jsonObj.get("textDecoration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textDecoration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textDecoration").toString()));
      }
      if ((jsonObj.get("textStyle") != null && !jsonObj.get("textStyle").isJsonNull()) && !jsonObj.get("textStyle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textStyle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textStyle").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDocumentaiV1beta1DocumentStyle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDocumentaiV1beta1DocumentStyle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDocumentaiV1beta1DocumentStyle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDocumentaiV1beta1DocumentStyle.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDocumentaiV1beta1DocumentStyle>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDocumentaiV1beta1DocumentStyle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDocumentaiV1beta1DocumentStyle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDocumentaiV1beta1DocumentStyle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDocumentaiV1beta1DocumentStyle
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDocumentaiV1beta1DocumentStyle
   */
  public static GoogleCloudDocumentaiV1beta1DocumentStyle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDocumentaiV1beta1DocumentStyle.class);
  }

  /**
   * Convert an instance of GoogleCloudDocumentaiV1beta1DocumentStyle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

