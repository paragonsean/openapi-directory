/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentEntity;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentEntityRelation;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentPage;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentRevision;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentShardInfo;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentStyle;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentTextChange;
import org.openapitools.client.model.GoogleRpcStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Document represents the canonical document resource in Document AI. It is an interchange format that provides insights into documents and allows for collaboration between users and Document AI to iterate and optimize for quality.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:51.583823-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDocumentaiV1beta1Document {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private byte[] content;

  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  private List<GoogleCloudDocumentaiV1beta1DocumentEntity> entities = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTITY_RELATIONS = "entityRelations";
  @SerializedName(SERIALIZED_NAME_ENTITY_RELATIONS)
  private List<GoogleCloudDocumentaiV1beta1DocumentEntityRelation> entityRelations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private GoogleRpcStatus error;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private List<GoogleCloudDocumentaiV1beta1DocumentPage> pages = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVISIONS = "revisions";
  @SerializedName(SERIALIZED_NAME_REVISIONS)
  private List<GoogleCloudDocumentaiV1beta1DocumentRevision> revisions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHARD_INFO = "shardInfo";
  @SerializedName(SERIALIZED_NAME_SHARD_INFO)
  private GoogleCloudDocumentaiV1beta1DocumentShardInfo shardInfo;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TEXT_CHANGES = "textChanges";
  @SerializedName(SERIALIZED_NAME_TEXT_CHANGES)
  private List<GoogleCloudDocumentaiV1beta1DocumentTextChange> textChanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEXT_STYLES = "textStyles";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TEXT_STYLES)
  private List<GoogleCloudDocumentaiV1beta1DocumentStyle> textStyles = new ArrayList<>();

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public GoogleCloudDocumentaiV1beta1Document() {
  }

  public GoogleCloudDocumentaiV1beta1Document content(byte[] content) {
    this.content = content;
    return this;
  }

  /**
   * Optional. Inline document content, represented as a stream of bytes. Note: As with all &#x60;bytes&#x60; fields, protobuffers use a pure binary representation, whereas JSON representations use base64.
   * @return content
   */
  @javax.annotation.Nullable
  public byte[] getContent() {
    return content;
  }

  public void setContent(byte[] content) {
    this.content = content;
  }


  public GoogleCloudDocumentaiV1beta1Document entities(List<GoogleCloudDocumentaiV1beta1DocumentEntity> entities) {
    this.entities = entities;
    return this;
  }

  public GoogleCloudDocumentaiV1beta1Document addEntitiesItem(GoogleCloudDocumentaiV1beta1DocumentEntity entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

  /**
   * A list of entities detected on Document.text. For document shards, entities in this list may cross shard boundaries.
   * @return entities
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta1DocumentEntity> getEntities() {
    return entities;
  }

  public void setEntities(List<GoogleCloudDocumentaiV1beta1DocumentEntity> entities) {
    this.entities = entities;
  }


  public GoogleCloudDocumentaiV1beta1Document entityRelations(List<GoogleCloudDocumentaiV1beta1DocumentEntityRelation> entityRelations) {
    this.entityRelations = entityRelations;
    return this;
  }

  public GoogleCloudDocumentaiV1beta1Document addEntityRelationsItem(GoogleCloudDocumentaiV1beta1DocumentEntityRelation entityRelationsItem) {
    if (this.entityRelations == null) {
      this.entityRelations = new ArrayList<>();
    }
    this.entityRelations.add(entityRelationsItem);
    return this;
  }

  /**
   * Placeholder. Relationship among Document.entities.
   * @return entityRelations
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta1DocumentEntityRelation> getEntityRelations() {
    return entityRelations;
  }

  public void setEntityRelations(List<GoogleCloudDocumentaiV1beta1DocumentEntityRelation> entityRelations) {
    this.entityRelations = entityRelations;
  }


  public GoogleCloudDocumentaiV1beta1Document error(GoogleRpcStatus error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public GoogleRpcStatus getError() {
    return error;
  }

  public void setError(GoogleRpcStatus error) {
    this.error = error;
  }


  public GoogleCloudDocumentaiV1beta1Document mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * An IANA published [media type (MIME type)](https://www.iana.org/assignments/media-types/media-types.xhtml).
   * @return mimeType
   */
  @javax.annotation.Nullable
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public GoogleCloudDocumentaiV1beta1Document pages(List<GoogleCloudDocumentaiV1beta1DocumentPage> pages) {
    this.pages = pages;
    return this;
  }

  public GoogleCloudDocumentaiV1beta1Document addPagesItem(GoogleCloudDocumentaiV1beta1DocumentPage pagesItem) {
    if (this.pages == null) {
      this.pages = new ArrayList<>();
    }
    this.pages.add(pagesItem);
    return this;
  }

  /**
   * Visual page layout for the Document.
   * @return pages
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta1DocumentPage> getPages() {
    return pages;
  }

  public void setPages(List<GoogleCloudDocumentaiV1beta1DocumentPage> pages) {
    this.pages = pages;
  }


  public GoogleCloudDocumentaiV1beta1Document revisions(List<GoogleCloudDocumentaiV1beta1DocumentRevision> revisions) {
    this.revisions = revisions;
    return this;
  }

  public GoogleCloudDocumentaiV1beta1Document addRevisionsItem(GoogleCloudDocumentaiV1beta1DocumentRevision revisionsItem) {
    if (this.revisions == null) {
      this.revisions = new ArrayList<>();
    }
    this.revisions.add(revisionsItem);
    return this;
  }

  /**
   * Placeholder. Revision history of this document.
   * @return revisions
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta1DocumentRevision> getRevisions() {
    return revisions;
  }

  public void setRevisions(List<GoogleCloudDocumentaiV1beta1DocumentRevision> revisions) {
    this.revisions = revisions;
  }


  public GoogleCloudDocumentaiV1beta1Document shardInfo(GoogleCloudDocumentaiV1beta1DocumentShardInfo shardInfo) {
    this.shardInfo = shardInfo;
    return this;
  }

  /**
   * Get shardInfo
   * @return shardInfo
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta1DocumentShardInfo getShardInfo() {
    return shardInfo;
  }

  public void setShardInfo(GoogleCloudDocumentaiV1beta1DocumentShardInfo shardInfo) {
    this.shardInfo = shardInfo;
  }


  public GoogleCloudDocumentaiV1beta1Document text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Optional. UTF-8 encoded text in reading order from the document.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public GoogleCloudDocumentaiV1beta1Document textChanges(List<GoogleCloudDocumentaiV1beta1DocumentTextChange> textChanges) {
    this.textChanges = textChanges;
    return this;
  }

  public GoogleCloudDocumentaiV1beta1Document addTextChangesItem(GoogleCloudDocumentaiV1beta1DocumentTextChange textChangesItem) {
    if (this.textChanges == null) {
      this.textChanges = new ArrayList<>();
    }
    this.textChanges.add(textChangesItem);
    return this;
  }

  /**
   * Placeholder. A list of text corrections made to Document.text. This is usually used for annotating corrections to OCR mistakes. Text changes for a given revision may not overlap with each other.
   * @return textChanges
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta1DocumentTextChange> getTextChanges() {
    return textChanges;
  }

  public void setTextChanges(List<GoogleCloudDocumentaiV1beta1DocumentTextChange> textChanges) {
    this.textChanges = textChanges;
  }


  @Deprecated
  public GoogleCloudDocumentaiV1beta1Document textStyles(List<GoogleCloudDocumentaiV1beta1DocumentStyle> textStyles) {
    this.textStyles = textStyles;
    return this;
  }

  public GoogleCloudDocumentaiV1beta1Document addTextStylesItem(GoogleCloudDocumentaiV1beta1DocumentStyle textStylesItem) {
    if (this.textStyles == null) {
      this.textStyles = new ArrayList<>();
    }
    this.textStyles.add(textStylesItem);
    return this;
  }

  /**
   * Styles for the Document.text.
   * @return textStyles
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta1DocumentStyle> getTextStyles() {
    return textStyles;
  }

  @Deprecated
  public void setTextStyles(List<GoogleCloudDocumentaiV1beta1DocumentStyle> textStyles) {
    this.textStyles = textStyles;
  }


  public GoogleCloudDocumentaiV1beta1Document uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Optional. Currently supports Google Cloud Storage URI of the form &#x60;gs://bucket_name/object_name&#x60;. Object versioning is not supported. For more information, refer to [Google Cloud Storage Request URIs](https://cloud.google.com/storage/docs/reference-uris).
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDocumentaiV1beta1Document googleCloudDocumentaiV1beta1Document = (GoogleCloudDocumentaiV1beta1Document) o;
    return Arrays.equals(this.content, googleCloudDocumentaiV1beta1Document.content) &&
        Objects.equals(this.entities, googleCloudDocumentaiV1beta1Document.entities) &&
        Objects.equals(this.entityRelations, googleCloudDocumentaiV1beta1Document.entityRelations) &&
        Objects.equals(this.error, googleCloudDocumentaiV1beta1Document.error) &&
        Objects.equals(this.mimeType, googleCloudDocumentaiV1beta1Document.mimeType) &&
        Objects.equals(this.pages, googleCloudDocumentaiV1beta1Document.pages) &&
        Objects.equals(this.revisions, googleCloudDocumentaiV1beta1Document.revisions) &&
        Objects.equals(this.shardInfo, googleCloudDocumentaiV1beta1Document.shardInfo) &&
        Objects.equals(this.text, googleCloudDocumentaiV1beta1Document.text) &&
        Objects.equals(this.textChanges, googleCloudDocumentaiV1beta1Document.textChanges) &&
        Objects.equals(this.textStyles, googleCloudDocumentaiV1beta1Document.textStyles) &&
        Objects.equals(this.uri, googleCloudDocumentaiV1beta1Document.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(content), entities, entityRelations, error, mimeType, pages, revisions, shardInfo, text, textChanges, textStyles, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDocumentaiV1beta1Document {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    entityRelations: ").append(toIndentedString(entityRelations)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    revisions: ").append(toIndentedString(revisions)).append("\n");
    sb.append("    shardInfo: ").append(toIndentedString(shardInfo)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    textChanges: ").append(toIndentedString(textChanges)).append("\n");
    sb.append("    textStyles: ").append(toIndentedString(textStyles)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("entities");
    openapiFields.add("entityRelations");
    openapiFields.add("error");
    openapiFields.add("mimeType");
    openapiFields.add("pages");
    openapiFields.add("revisions");
    openapiFields.add("shardInfo");
    openapiFields.add("text");
    openapiFields.add("textChanges");
    openapiFields.add("textStyles");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDocumentaiV1beta1Document
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDocumentaiV1beta1Document.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDocumentaiV1beta1Document is not found in the empty JSON string", GoogleCloudDocumentaiV1beta1Document.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDocumentaiV1beta1Document.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDocumentaiV1beta1Document` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("entities") != null && !jsonObj.get("entities").isJsonNull()) {
        JsonArray jsonArrayentities = jsonObj.getAsJsonArray("entities");
        if (jsonArrayentities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entities` to be an array in the JSON string but got `%s`", jsonObj.get("entities").toString()));
          }

          // validate the optional field `entities` (array)
          for (int i = 0; i < jsonArrayentities.size(); i++) {
            GoogleCloudDocumentaiV1beta1DocumentEntity.validateJsonElement(jsonArrayentities.get(i));
          };
        }
      }
      if (jsonObj.get("entityRelations") != null && !jsonObj.get("entityRelations").isJsonNull()) {
        JsonArray jsonArrayentityRelations = jsonObj.getAsJsonArray("entityRelations");
        if (jsonArrayentityRelations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entityRelations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entityRelations` to be an array in the JSON string but got `%s`", jsonObj.get("entityRelations").toString()));
          }

          // validate the optional field `entityRelations` (array)
          for (int i = 0; i < jsonArrayentityRelations.size(); i++) {
            GoogleCloudDocumentaiV1beta1DocumentEntityRelation.validateJsonElement(jsonArrayentityRelations.get(i));
          };
        }
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        GoogleRpcStatus.validateJsonElement(jsonObj.get("error"));
      }
      if ((jsonObj.get("mimeType") != null && !jsonObj.get("mimeType").isJsonNull()) && !jsonObj.get("mimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeType").toString()));
      }
      if (jsonObj.get("pages") != null && !jsonObj.get("pages").isJsonNull()) {
        JsonArray jsonArraypages = jsonObj.getAsJsonArray("pages");
        if (jsonArraypages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pages` to be an array in the JSON string but got `%s`", jsonObj.get("pages").toString()));
          }

          // validate the optional field `pages` (array)
          for (int i = 0; i < jsonArraypages.size(); i++) {
            GoogleCloudDocumentaiV1beta1DocumentPage.validateJsonElement(jsonArraypages.get(i));
          };
        }
      }
      if (jsonObj.get("revisions") != null && !jsonObj.get("revisions").isJsonNull()) {
        JsonArray jsonArrayrevisions = jsonObj.getAsJsonArray("revisions");
        if (jsonArrayrevisions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("revisions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `revisions` to be an array in the JSON string but got `%s`", jsonObj.get("revisions").toString()));
          }

          // validate the optional field `revisions` (array)
          for (int i = 0; i < jsonArrayrevisions.size(); i++) {
            GoogleCloudDocumentaiV1beta1DocumentRevision.validateJsonElement(jsonArrayrevisions.get(i));
          };
        }
      }
      // validate the optional field `shardInfo`
      if (jsonObj.get("shardInfo") != null && !jsonObj.get("shardInfo").isJsonNull()) {
        GoogleCloudDocumentaiV1beta1DocumentShardInfo.validateJsonElement(jsonObj.get("shardInfo"));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if (jsonObj.get("textChanges") != null && !jsonObj.get("textChanges").isJsonNull()) {
        JsonArray jsonArraytextChanges = jsonObj.getAsJsonArray("textChanges");
        if (jsonArraytextChanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("textChanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `textChanges` to be an array in the JSON string but got `%s`", jsonObj.get("textChanges").toString()));
          }

          // validate the optional field `textChanges` (array)
          for (int i = 0; i < jsonArraytextChanges.size(); i++) {
            GoogleCloudDocumentaiV1beta1DocumentTextChange.validateJsonElement(jsonArraytextChanges.get(i));
          };
        }
      }
      if (jsonObj.get("textStyles") != null && !jsonObj.get("textStyles").isJsonNull()) {
        JsonArray jsonArraytextStyles = jsonObj.getAsJsonArray("textStyles");
        if (jsonArraytextStyles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("textStyles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `textStyles` to be an array in the JSON string but got `%s`", jsonObj.get("textStyles").toString()));
          }

          // validate the optional field `textStyles` (array)
          for (int i = 0; i < jsonArraytextStyles.size(); i++) {
            GoogleCloudDocumentaiV1beta1DocumentStyle.validateJsonElement(jsonArraytextStyles.get(i));
          };
        }
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDocumentaiV1beta1Document.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDocumentaiV1beta1Document' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDocumentaiV1beta1Document> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDocumentaiV1beta1Document.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDocumentaiV1beta1Document>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDocumentaiV1beta1Document value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDocumentaiV1beta1Document read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDocumentaiV1beta1Document given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDocumentaiV1beta1Document
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDocumentaiV1beta1Document
   */
  public static GoogleCloudDocumentaiV1beta1Document fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDocumentaiV1beta1Document.class);
  }

  /**
   * Convert an instance of GoogleCloudDocumentaiV1beta1Document to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

