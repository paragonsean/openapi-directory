/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleTypePostalAddress model module.
 * @module model/GoogleTypePostalAddress
 * @version v1beta2
 */
class GoogleTypePostalAddress {
    /**
     * Constructs a new <code>GoogleTypePostalAddress</code>.
     * Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
     * @alias module:model/GoogleTypePostalAddress
     */
    constructor() { 
        
        GoogleTypePostalAddress.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleTypePostalAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleTypePostalAddress} obj Optional instance to populate.
     * @return {module:model/GoogleTypePostalAddress} The populated <code>GoogleTypePostalAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleTypePostalAddress();

            if (data.hasOwnProperty('addressLines')) {
                obj['addressLines'] = ApiClient.convertToType(data['addressLines'], ['String']);
            }
            if (data.hasOwnProperty('administrativeArea')) {
                obj['administrativeArea'] = ApiClient.convertToType(data['administrativeArea'], 'String');
            }
            if (data.hasOwnProperty('languageCode')) {
                obj['languageCode'] = ApiClient.convertToType(data['languageCode'], 'String');
            }
            if (data.hasOwnProperty('locality')) {
                obj['locality'] = ApiClient.convertToType(data['locality'], 'String');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = ApiClient.convertToType(data['organization'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('recipients')) {
                obj['recipients'] = ApiClient.convertToType(data['recipients'], ['String']);
            }
            if (data.hasOwnProperty('regionCode')) {
                obj['regionCode'] = ApiClient.convertToType(data['regionCode'], 'String');
            }
            if (data.hasOwnProperty('revision')) {
                obj['revision'] = ApiClient.convertToType(data['revision'], 'Number');
            }
            if (data.hasOwnProperty('sortingCode')) {
                obj['sortingCode'] = ApiClient.convertToType(data['sortingCode'], 'String');
            }
            if (data.hasOwnProperty('sublocality')) {
                obj['sublocality'] = ApiClient.convertToType(data['sublocality'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleTypePostalAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleTypePostalAddress</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['addressLines'])) {
            throw new Error("Expected the field `addressLines` to be an array in the JSON data but got " + data['addressLines']);
        }
        // ensure the json data is a string
        if (data['administrativeArea'] && !(typeof data['administrativeArea'] === 'string' || data['administrativeArea'] instanceof String)) {
            throw new Error("Expected the field `administrativeArea` to be a primitive type in the JSON string but got " + data['administrativeArea']);
        }
        // ensure the json data is a string
        if (data['languageCode'] && !(typeof data['languageCode'] === 'string' || data['languageCode'] instanceof String)) {
            throw new Error("Expected the field `languageCode` to be a primitive type in the JSON string but got " + data['languageCode']);
        }
        // ensure the json data is a string
        if (data['locality'] && !(typeof data['locality'] === 'string' || data['locality'] instanceof String)) {
            throw new Error("Expected the field `locality` to be a primitive type in the JSON string but got " + data['locality']);
        }
        // ensure the json data is a string
        if (data['organization'] && !(typeof data['organization'] === 'string' || data['organization'] instanceof String)) {
            throw new Error("Expected the field `organization` to be a primitive type in the JSON string but got " + data['organization']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['recipients'])) {
            throw new Error("Expected the field `recipients` to be an array in the JSON data but got " + data['recipients']);
        }
        // ensure the json data is a string
        if (data['regionCode'] && !(typeof data['regionCode'] === 'string' || data['regionCode'] instanceof String)) {
            throw new Error("Expected the field `regionCode` to be a primitive type in the JSON string but got " + data['regionCode']);
        }
        // ensure the json data is a string
        if (data['sortingCode'] && !(typeof data['sortingCode'] === 'string' || data['sortingCode'] instanceof String)) {
            throw new Error("Expected the field `sortingCode` to be a primitive type in the JSON string but got " + data['sortingCode']);
        }
        // ensure the json data is a string
        if (data['sublocality'] && !(typeof data['sublocality'] === 'string' || data['sublocality'] instanceof String)) {
            throw new Error("Expected the field `sublocality` to be a primitive type in the JSON string but got " + data['sublocality']);
        }

        return true;
    }


}



/**
 * Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
 * @member {Array.<String>} addressLines
 */
GoogleTypePostalAddress.prototype['addressLines'] = undefined;

/**
 * Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
 * @member {String} administrativeArea
 */
GoogleTypePostalAddress.prototype['administrativeArea'] = undefined;

/**
 * Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\".
 * @member {String} languageCode
 */
GoogleTypePostalAddress.prototype['languageCode'] = undefined;

/**
 * Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
 * @member {String} locality
 */
GoogleTypePostalAddress.prototype['locality'] = undefined;

/**
 * Optional. The name of the organization at the address.
 * @member {String} organization
 */
GoogleTypePostalAddress.prototype['organization'] = undefined;

/**
 * Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
 * @member {String} postalCode
 */
GoogleTypePostalAddress.prototype['postalCode'] = undefined;

/**
 * Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information.
 * @member {Array.<String>} recipients
 */
GoogleTypePostalAddress.prototype['recipients'] = undefined;

/**
 * Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See https://cldr.unicode.org/ and https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland.
 * @member {String} regionCode
 */
GoogleTypePostalAddress.prototype['regionCode'] = undefined;

/**
 * The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.
 * @member {Number} revision
 */
GoogleTypePostalAddress.prototype['revision'] = undefined;

/**
 * Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d'Ivoire).
 * @member {String} sortingCode
 */
GoogleTypePostalAddress.prototype['sortingCode'] = undefined;

/**
 * Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
 * @member {String} sublocality
 */
GoogleTypePostalAddress.prototype['sublocality'] = undefined;






export default GoogleTypePostalAddress;

