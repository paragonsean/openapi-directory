/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleTypeTimeZone from './GoogleTypeTimeZone';

/**
 * The GoogleTypeDateTime model module.
 * @module model/GoogleTypeDateTime
 * @version v1beta2
 */
class GoogleTypeDateTime {
    /**
     * Constructs a new <code>GoogleTypeDateTime</code>.
     * Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the &#x60;time_offset&#x60; oneof is set. Consider using &#x60;Timestamp&#x60; message for physical time instead. If your use case also would like to store the user&#39;s timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application&#39;s limitations.
     * @alias module:model/GoogleTypeDateTime
     */
    constructor() { 
        
        GoogleTypeDateTime.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleTypeDateTime</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleTypeDateTime} obj Optional instance to populate.
     * @return {module:model/GoogleTypeDateTime} The populated <code>GoogleTypeDateTime</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleTypeDateTime();

            if (data.hasOwnProperty('day')) {
                obj['day'] = ApiClient.convertToType(data['day'], 'Number');
            }
            if (data.hasOwnProperty('hours')) {
                obj['hours'] = ApiClient.convertToType(data['hours'], 'Number');
            }
            if (data.hasOwnProperty('minutes')) {
                obj['minutes'] = ApiClient.convertToType(data['minutes'], 'Number');
            }
            if (data.hasOwnProperty('month')) {
                obj['month'] = ApiClient.convertToType(data['month'], 'Number');
            }
            if (data.hasOwnProperty('nanos')) {
                obj['nanos'] = ApiClient.convertToType(data['nanos'], 'Number');
            }
            if (data.hasOwnProperty('seconds')) {
                obj['seconds'] = ApiClient.convertToType(data['seconds'], 'Number');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = GoogleTypeTimeZone.constructFromObject(data['timeZone']);
            }
            if (data.hasOwnProperty('utcOffset')) {
                obj['utcOffset'] = ApiClient.convertToType(data['utcOffset'], 'String');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleTypeDateTime</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleTypeDateTime</code>.
     */
    static validateJSON(data) {
        // validate the optional field `timeZone`
        if (data['timeZone']) { // data not null
          GoogleTypeTimeZone.validateJSON(data['timeZone']);
        }
        // ensure the json data is a string
        if (data['utcOffset'] && !(typeof data['utcOffset'] === 'string' || data['utcOffset'] instanceof String)) {
            throw new Error("Expected the field `utcOffset` to be a primitive type in the JSON string but got " + data['utcOffset']);
        }

        return true;
    }


}



/**
 * Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day.
 * @member {Number} day
 */
GoogleTypeDateTime.prototype['day'] = undefined;

/**
 * Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.
 * @member {Number} hours
 */
GoogleTypeDateTime.prototype['hours'] = undefined;

/**
 * Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0.
 * @member {Number} minutes
 */
GoogleTypeDateTime.prototype['minutes'] = undefined;

/**
 * Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month.
 * @member {Number} month
 */
GoogleTypeDateTime.prototype['month'] = undefined;

/**
 * Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0.
 * @member {Number} nanos
 */
GoogleTypeDateTime.prototype['nanos'] = undefined;

/**
 * Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds.
 * @member {Number} seconds
 */
GoogleTypeDateTime.prototype['seconds'] = undefined;

/**
 * @member {module:model/GoogleTypeTimeZone} timeZone
 */
GoogleTypeDateTime.prototype['timeZone'] = undefined;

/**
 * UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.
 * @member {String} utcOffset
 */
GoogleTypeDateTime.prototype['utcOffset'] = undefined;

/**
 * Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year.
 * @member {Number} year
 */
GoogleTypeDateTime.prototype['year'] = undefined;






export default GoogleTypeDateTime;

