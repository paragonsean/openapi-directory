# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDocumentaiV1beta3ReviewDocumentResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gcs_destination: str=None, rejection_reason: str=None, state: str=None):
        """GoogleCloudDocumentaiV1beta3ReviewDocumentResponse - a model defined in OpenAPI

        :param gcs_destination: The gcs_destination of this GoogleCloudDocumentaiV1beta3ReviewDocumentResponse.
        :param rejection_reason: The rejection_reason of this GoogleCloudDocumentaiV1beta3ReviewDocumentResponse.
        :param state: The state of this GoogleCloudDocumentaiV1beta3ReviewDocumentResponse.
        """
        self.openapi_types = {
            'gcs_destination': str,
            'rejection_reason': str,
            'state': str
        }

        self.attribute_map = {
            'gcs_destination': 'gcsDestination',
            'rejection_reason': 'rejectionReason',
            'state': 'state'
        }

        self._gcs_destination = gcs_destination
        self._rejection_reason = rejection_reason
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDocumentaiV1beta3ReviewDocumentResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDocumentaiV1beta3ReviewDocumentResponse of this GoogleCloudDocumentaiV1beta3ReviewDocumentResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gcs_destination(self):
        """Gets the gcs_destination of this GoogleCloudDocumentaiV1beta3ReviewDocumentResponse.

        The Cloud Storage uri for the human reviewed document if the review is succeeded.

        :return: The gcs_destination of this GoogleCloudDocumentaiV1beta3ReviewDocumentResponse.
        :rtype: str
        """
        return self._gcs_destination

    @gcs_destination.setter
    def gcs_destination(self, gcs_destination):
        """Sets the gcs_destination of this GoogleCloudDocumentaiV1beta3ReviewDocumentResponse.

        The Cloud Storage uri for the human reviewed document if the review is succeeded.

        :param gcs_destination: The gcs_destination of this GoogleCloudDocumentaiV1beta3ReviewDocumentResponse.
        :type gcs_destination: str
        """

        self._gcs_destination = gcs_destination

    @property
    def rejection_reason(self):
        """Gets the rejection_reason of this GoogleCloudDocumentaiV1beta3ReviewDocumentResponse.

        The reason why the review is rejected by reviewer.

        :return: The rejection_reason of this GoogleCloudDocumentaiV1beta3ReviewDocumentResponse.
        :rtype: str
        """
        return self._rejection_reason

    @rejection_reason.setter
    def rejection_reason(self, rejection_reason):
        """Sets the rejection_reason of this GoogleCloudDocumentaiV1beta3ReviewDocumentResponse.

        The reason why the review is rejected by reviewer.

        :param rejection_reason: The rejection_reason of this GoogleCloudDocumentaiV1beta3ReviewDocumentResponse.
        :type rejection_reason: str
        """

        self._rejection_reason = rejection_reason

    @property
    def state(self):
        """Gets the state of this GoogleCloudDocumentaiV1beta3ReviewDocumentResponse.

        The state of the review operation.

        :return: The state of this GoogleCloudDocumentaiV1beta3ReviewDocumentResponse.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudDocumentaiV1beta3ReviewDocumentResponse.

        The state of the review operation.

        :param state: The state of this GoogleCloudDocumentaiV1beta3ReviewDocumentResponse.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "REJECTED", "SUCCEEDED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
