/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig::OAIGoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig::OAIGoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig::~OAIGoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig() {}

void OAIGoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig::initializeModel() {

    m_gcs_prefix_isSet = false;
    m_gcs_prefix_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig::fromJsonObject(QJsonObject json) {

    m_gcs_prefix_isValid = ::OpenAPI::fromJsonValue(m_gcs_prefix, json[QString("gcsPrefix")]);
    m_gcs_prefix_isSet = !json[QString("gcsPrefix")].isNull() && m_gcs_prefix_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_gcs_prefix.isSet()) {
        obj.insert(QString("gcsPrefix"), ::OpenAPI::toJsonValue(m_gcs_prefix));
    }
    return obj;
}

OAIGoogleCloudDocumentaiV1beta3GcsPrefix OAIGoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig::getGcsPrefix() const {
    return m_gcs_prefix;
}
void OAIGoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig::setGcsPrefix(const OAIGoogleCloudDocumentaiV1beta3GcsPrefix &gcs_prefix) {
    m_gcs_prefix = gcs_prefix;
    m_gcs_prefix_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig::is_gcs_prefix_Set() const{
    return m_gcs_prefix_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig::is_gcs_prefix_Valid() const{
    return m_gcs_prefix_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gcs_prefix.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
