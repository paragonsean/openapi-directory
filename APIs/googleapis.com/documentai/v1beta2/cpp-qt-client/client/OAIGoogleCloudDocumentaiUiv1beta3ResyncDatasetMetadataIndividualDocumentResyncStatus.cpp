/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::~OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus() {}

void OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::initializeModel() {

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_document_inconsistency_type_isSet = false;
    m_document_inconsistency_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::fromJsonObject(QJsonObject json) {

    m_document_id_isValid = ::OpenAPI::fromJsonValue(m_document_id, json[QString("documentId")]);
    m_document_id_isSet = !json[QString("documentId")].isNull() && m_document_id_isValid;

    m_document_inconsistency_type_isValid = ::OpenAPI::fromJsonValue(m_document_inconsistency_type, json[QString("documentInconsistencyType")]);
    m_document_inconsistency_type_isSet = !json[QString("documentInconsistencyType")].isNull() && m_document_inconsistency_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_document_id.isSet()) {
        obj.insert(QString("documentId"), ::OpenAPI::toJsonValue(m_document_id));
    }
    if (m_document_inconsistency_type_isSet) {
        obj.insert(QString("documentInconsistencyType"), ::OpenAPI::toJsonValue(m_document_inconsistency_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIGoogleCloudDocumentaiUiv1beta3DocumentId OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::getDocumentId() const {
    return m_document_id;
}
void OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::setDocumentId(const OAIGoogleCloudDocumentaiUiv1beta3DocumentId &document_id) {
    m_document_id = document_id;
    m_document_id_isSet = true;
}

bool OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::is_document_id_Valid() const{
    return m_document_id_isValid;
}

QString OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::getDocumentInconsistencyType() const {
    return m_document_inconsistency_type;
}
void OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::setDocumentInconsistencyType(const QString &document_inconsistency_type) {
    m_document_inconsistency_type = document_inconsistency_type;
    m_document_inconsistency_type_isSet = true;
}

bool OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::is_document_inconsistency_type_Set() const{
    return m_document_inconsistency_type_isSet;
}

bool OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::is_document_inconsistency_type_Valid() const{
    return m_document_inconsistency_type_isValid;
}

OAIGoogleRpcStatus OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::getStatus() const {
    return m_status;
}
void OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::setStatus(const OAIGoogleRpcStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_inconsistency_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiUiv1beta3ResyncDatasetMetadataIndividualDocumentResyncStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
