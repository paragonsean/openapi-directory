/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta2DocumentProvenance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::OAIGoogleCloudDocumentaiV1beta2DocumentProvenance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::OAIGoogleCloudDocumentaiV1beta2DocumentProvenance() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::~OAIGoogleCloudDocumentaiV1beta2DocumentProvenance() {}

void OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_parents_isSet = false;
    m_parents_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_parents_isValid = ::OpenAPI::fromJsonValue(m_parents, json[QString("parents")]);
    m_parents_isSet = !json[QString("parents")].isNull() && m_parents_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_parents.size() > 0) {
        obj.insert(QString("parents"), ::OpenAPI::toJsonValue(m_parents));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::getId() const {
    return m_id;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta2DocumentProvenanceParent> OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::getParents() const {
    return m_parents;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::setParents(const QList<OAIGoogleCloudDocumentaiV1beta2DocumentProvenanceParent> &parents) {
    m_parents = parents;
    m_parents_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::is_parents_Set() const{
    return m_parents_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::is_parents_Valid() const{
    return m_parents_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::getRevision() const {
    return m_revision;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::setRevision(const qint32 &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::is_revision_Valid() const{
    return m_revision_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::getType() const {
    return m_type;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentProvenance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
