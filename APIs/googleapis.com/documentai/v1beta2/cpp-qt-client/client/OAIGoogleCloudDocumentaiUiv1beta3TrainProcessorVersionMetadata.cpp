/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::~OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata() {}

void OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::initializeModel() {

    m_common_metadata_isSet = false;
    m_common_metadata_isValid = false;

    m_test_dataset_validation_isSet = false;
    m_test_dataset_validation_isValid = false;

    m_training_dataset_validation_isSet = false;
    m_training_dataset_validation_isValid = false;
}

void OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::fromJsonObject(QJsonObject json) {

    m_common_metadata_isValid = ::OpenAPI::fromJsonValue(m_common_metadata, json[QString("commonMetadata")]);
    m_common_metadata_isSet = !json[QString("commonMetadata")].isNull() && m_common_metadata_isValid;

    m_test_dataset_validation_isValid = ::OpenAPI::fromJsonValue(m_test_dataset_validation, json[QString("testDatasetValidation")]);
    m_test_dataset_validation_isSet = !json[QString("testDatasetValidation")].isNull() && m_test_dataset_validation_isValid;

    m_training_dataset_validation_isValid = ::OpenAPI::fromJsonValue(m_training_dataset_validation, json[QString("trainingDatasetValidation")]);
    m_training_dataset_validation_isSet = !json[QString("trainingDatasetValidation")].isNull() && m_training_dataset_validation_isValid;
}

QString OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_common_metadata.isSet()) {
        obj.insert(QString("commonMetadata"), ::OpenAPI::toJsonValue(m_common_metadata));
    }
    if (m_test_dataset_validation.isSet()) {
        obj.insert(QString("testDatasetValidation"), ::OpenAPI::toJsonValue(m_test_dataset_validation));
    }
    if (m_training_dataset_validation.isSet()) {
        obj.insert(QString("trainingDatasetValidation"), ::OpenAPI::toJsonValue(m_training_dataset_validation));
    }
    return obj;
}

OAIGoogleCloudDocumentaiUiv1beta3CommonOperationMetadata OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::getCommonMetadata() const {
    return m_common_metadata;
}
void OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::setCommonMetadata(const OAIGoogleCloudDocumentaiUiv1beta3CommonOperationMetadata &common_metadata) {
    m_common_metadata = common_metadata;
    m_common_metadata_isSet = true;
}

bool OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::is_common_metadata_Set() const{
    return m_common_metadata_isSet;
}

bool OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::is_common_metadata_Valid() const{
    return m_common_metadata_isValid;
}

OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadataDatasetValidation OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::getTestDatasetValidation() const {
    return m_test_dataset_validation;
}
void OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::setTestDatasetValidation(const OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadataDatasetValidation &test_dataset_validation) {
    m_test_dataset_validation = test_dataset_validation;
    m_test_dataset_validation_isSet = true;
}

bool OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::is_test_dataset_validation_Set() const{
    return m_test_dataset_validation_isSet;
}

bool OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::is_test_dataset_validation_Valid() const{
    return m_test_dataset_validation_isValid;
}

OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadataDatasetValidation OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::getTrainingDatasetValidation() const {
    return m_training_dataset_validation;
}
void OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::setTrainingDatasetValidation(const OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadataDatasetValidation &training_dataset_validation) {
    m_training_dataset_validation = training_dataset_validation;
    m_training_dataset_validation_isSet = true;
}

bool OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::is_training_dataset_validation_Set() const{
    return m_training_dataset_validation_isSet;
}

bool OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::is_training_dataset_validation_Valid() const{
    return m_training_dataset_validation_isValid;
}

bool OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_common_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_dataset_validation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_dataset_validation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiUiv1beta3TrainProcessorVersionMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
