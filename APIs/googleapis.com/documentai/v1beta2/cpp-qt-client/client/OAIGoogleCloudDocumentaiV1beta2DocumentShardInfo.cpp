/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::~OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo() {}

void OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::initializeModel() {

    m_shard_count_isSet = false;
    m_shard_count_isValid = false;

    m_shard_index_isSet = false;
    m_shard_index_isValid = false;

    m_text_offset_isSet = false;
    m_text_offset_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::fromJsonObject(QJsonObject json) {

    m_shard_count_isValid = ::OpenAPI::fromJsonValue(m_shard_count, json[QString("shardCount")]);
    m_shard_count_isSet = !json[QString("shardCount")].isNull() && m_shard_count_isValid;

    m_shard_index_isValid = ::OpenAPI::fromJsonValue(m_shard_index, json[QString("shardIndex")]);
    m_shard_index_isSet = !json[QString("shardIndex")].isNull() && m_shard_index_isValid;

    m_text_offset_isValid = ::OpenAPI::fromJsonValue(m_text_offset, json[QString("textOffset")]);
    m_text_offset_isSet = !json[QString("textOffset")].isNull() && m_text_offset_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_shard_count_isSet) {
        obj.insert(QString("shardCount"), ::OpenAPI::toJsonValue(m_shard_count));
    }
    if (m_shard_index_isSet) {
        obj.insert(QString("shardIndex"), ::OpenAPI::toJsonValue(m_shard_index));
    }
    if (m_text_offset_isSet) {
        obj.insert(QString("textOffset"), ::OpenAPI::toJsonValue(m_text_offset));
    }
    return obj;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::getShardCount() const {
    return m_shard_count;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::setShardCount(const QString &shard_count) {
    m_shard_count = shard_count;
    m_shard_count_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::is_shard_count_Set() const{
    return m_shard_count_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::is_shard_count_Valid() const{
    return m_shard_count_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::getShardIndex() const {
    return m_shard_index;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::setShardIndex(const QString &shard_index) {
    m_shard_index = shard_index;
    m_shard_index_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::is_shard_index_Set() const{
    return m_shard_index_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::is_shard_index_Valid() const{
    return m_shard_index_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::getTextOffset() const {
    return m_text_offset;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::setTextOffset(const QString &text_offset) {
    m_text_offset = text_offset;
    m_text_offset_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::is_text_offset_Set() const{
    return m_text_offset_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::is_text_offset_Valid() const{
    return m_text_offset_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_shard_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shard_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentShardInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
