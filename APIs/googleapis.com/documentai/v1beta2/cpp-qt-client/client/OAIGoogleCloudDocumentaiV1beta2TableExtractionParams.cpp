/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta2TableExtractionParams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::OAIGoogleCloudDocumentaiV1beta2TableExtractionParams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::OAIGoogleCloudDocumentaiV1beta2TableExtractionParams() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::~OAIGoogleCloudDocumentaiV1beta2TableExtractionParams() {}

void OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_header_hints_isSet = false;
    m_header_hints_isValid = false;

    m_model_version_isSet = false;
    m_model_version_isValid = false;

    m_table_bound_hints_isSet = false;
    m_table_bound_hints_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_header_hints_isValid = ::OpenAPI::fromJsonValue(m_header_hints, json[QString("headerHints")]);
    m_header_hints_isSet = !json[QString("headerHints")].isNull() && m_header_hints_isValid;

    m_model_version_isValid = ::OpenAPI::fromJsonValue(m_model_version, json[QString("modelVersion")]);
    m_model_version_isSet = !json[QString("modelVersion")].isNull() && m_model_version_isValid;

    m_table_bound_hints_isValid = ::OpenAPI::fromJsonValue(m_table_bound_hints, json[QString("tableBoundHints")]);
    m_table_bound_hints_isSet = !json[QString("tableBoundHints")].isNull() && m_table_bound_hints_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_header_hints.size() > 0) {
        obj.insert(QString("headerHints"), ::OpenAPI::toJsonValue(m_header_hints));
    }
    if (m_model_version_isSet) {
        obj.insert(QString("modelVersion"), ::OpenAPI::toJsonValue(m_model_version));
    }
    if (m_table_bound_hints.size() > 0) {
        obj.insert(QString("tableBoundHints"), ::OpenAPI::toJsonValue(m_table_bound_hints));
    }
    return obj;
}

bool OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::isEnabled() const {
    return m_enabled;
}
void OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<QString> OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::getHeaderHints() const {
    return m_header_hints;
}
void OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::setHeaderHints(const QList<QString> &header_hints) {
    m_header_hints = header_hints;
    m_header_hints_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::is_header_hints_Set() const{
    return m_header_hints_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::is_header_hints_Valid() const{
    return m_header_hints_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::getModelVersion() const {
    return m_model_version;
}
void OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::setModelVersion(const QString &model_version) {
    m_model_version = model_version;
    m_model_version_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::is_model_version_Set() const{
    return m_model_version_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::is_model_version_Valid() const{
    return m_model_version_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta2TableBoundHint> OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::getTableBoundHints() const {
    return m_table_bound_hints;
}
void OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::setTableBoundHints(const QList<OAIGoogleCloudDocumentaiV1beta2TableBoundHint> &table_bound_hints) {
    m_table_bound_hints = table_bound_hints;
    m_table_bound_hints_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::is_table_bound_hints_Set() const{
    return m_table_bound_hints_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::is_table_bound_hints_Valid() const{
    return m_table_bound_hints_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_hints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_bound_hints.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta2TableExtractionParams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
