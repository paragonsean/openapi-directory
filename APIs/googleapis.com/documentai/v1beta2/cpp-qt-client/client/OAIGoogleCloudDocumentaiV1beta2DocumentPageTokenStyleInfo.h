/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo.h
 *
 * Font and other text style attributes.
 */

#ifndef OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo_H
#define OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo_H

#include <QJsonObject>

#include "OAIGoogleTypeColor.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleTypeColor;

class OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo : public OAIObject {
public:
    OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo();
    OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo(QString json);
    ~OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGoogleTypeColor getBackgroundColor() const;
    void setBackgroundColor(const OAIGoogleTypeColor &background_color);
    bool is_background_color_Set() const;
    bool is_background_color_Valid() const;

    bool isBold() const;
    void setBold(const bool &bold);
    bool is_bold_Set() const;
    bool is_bold_Valid() const;

    qint32 getFontSize() const;
    void setFontSize(const qint32 &font_size);
    bool is_font_size_Set() const;
    bool is_font_size_Valid() const;

    QString getFontType() const;
    void setFontType(const QString &font_type);
    bool is_font_type_Set() const;
    bool is_font_type_Valid() const;

    qint32 getFontWeight() const;
    void setFontWeight(const qint32 &font_weight);
    bool is_font_weight_Set() const;
    bool is_font_weight_Valid() const;

    bool isHandwritten() const;
    void setHandwritten(const bool &handwritten);
    bool is_handwritten_Set() const;
    bool is_handwritten_Valid() const;

    bool isItalic() const;
    void setItalic(const bool &italic);
    bool is_italic_Set() const;
    bool is_italic_Valid() const;

    double getLetterSpacing() const;
    void setLetterSpacing(const double &letter_spacing);
    bool is_letter_spacing_Set() const;
    bool is_letter_spacing_Valid() const;

    double getPixelFontSize() const;
    void setPixelFontSize(const double &pixel_font_size);
    bool is_pixel_font_size_Set() const;
    bool is_pixel_font_size_Valid() const;

    bool isSmallcaps() const;
    void setSmallcaps(const bool &smallcaps);
    bool is_smallcaps_Set() const;
    bool is_smallcaps_Valid() const;

    bool isStrikeout() const;
    void setStrikeout(const bool &strikeout);
    bool is_strikeout_Set() const;
    bool is_strikeout_Valid() const;

    bool isSubscript() const;
    void setSubscript(const bool &subscript);
    bool is_subscript_Set() const;
    bool is_subscript_Valid() const;

    bool isSuperscript() const;
    void setSuperscript(const bool &superscript);
    bool is_superscript_Set() const;
    bool is_superscript_Valid() const;

    OAIGoogleTypeColor getTextColor() const;
    void setTextColor(const OAIGoogleTypeColor &text_color);
    bool is_text_color_Set() const;
    bool is_text_color_Valid() const;

    bool isUnderlined() const;
    void setUnderlined(const bool &underlined);
    bool is_underlined_Set() const;
    bool is_underlined_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGoogleTypeColor m_background_color;
    bool m_background_color_isSet;
    bool m_background_color_isValid;

    bool m_bold;
    bool m_bold_isSet;
    bool m_bold_isValid;

    qint32 m_font_size;
    bool m_font_size_isSet;
    bool m_font_size_isValid;

    QString m_font_type;
    bool m_font_type_isSet;
    bool m_font_type_isValid;

    qint32 m_font_weight;
    bool m_font_weight_isSet;
    bool m_font_weight_isValid;

    bool m_handwritten;
    bool m_handwritten_isSet;
    bool m_handwritten_isValid;

    bool m_italic;
    bool m_italic_isSet;
    bool m_italic_isValid;

    double m_letter_spacing;
    bool m_letter_spacing_isSet;
    bool m_letter_spacing_isValid;

    double m_pixel_font_size;
    bool m_pixel_font_size_isSet;
    bool m_pixel_font_size_isValid;

    bool m_smallcaps;
    bool m_smallcaps_isSet;
    bool m_smallcaps_isValid;

    bool m_strikeout;
    bool m_strikeout_isSet;
    bool m_strikeout_isValid;

    bool m_subscript;
    bool m_subscript_isSet;
    bool m_subscript_isValid;

    bool m_superscript;
    bool m_superscript_isSet;
    bool m_superscript_isValid;

    OAIGoogleTypeColor m_text_color;
    bool m_text_color_isSet;
    bool m_text_color_isValid;

    bool m_underlined;
    bool m_underlined_isSet;
    bool m_underlined_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo)

#endif // OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo_H
