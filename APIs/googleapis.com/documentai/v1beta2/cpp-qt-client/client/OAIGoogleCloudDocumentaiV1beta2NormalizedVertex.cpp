/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta2NormalizedVertex.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta2NormalizedVertex::OAIGoogleCloudDocumentaiV1beta2NormalizedVertex(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta2NormalizedVertex::OAIGoogleCloudDocumentaiV1beta2NormalizedVertex() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta2NormalizedVertex::~OAIGoogleCloudDocumentaiV1beta2NormalizedVertex() {}

void OAIGoogleCloudDocumentaiV1beta2NormalizedVertex::initializeModel() {

    m_x_isSet = false;
    m_x_isValid = false;

    m_y_isSet = false;
    m_y_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta2NormalizedVertex::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta2NormalizedVertex::fromJsonObject(QJsonObject json) {

    m_x_isValid = ::OpenAPI::fromJsonValue(m_x, json[QString("x")]);
    m_x_isSet = !json[QString("x")].isNull() && m_x_isValid;

    m_y_isValid = ::OpenAPI::fromJsonValue(m_y, json[QString("y")]);
    m_y_isSet = !json[QString("y")].isNull() && m_y_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2NormalizedVertex::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta2NormalizedVertex::asJsonObject() const {
    QJsonObject obj;
    if (m_x_isSet) {
        obj.insert(QString("x"), ::OpenAPI::toJsonValue(m_x));
    }
    if (m_y_isSet) {
        obj.insert(QString("y"), ::OpenAPI::toJsonValue(m_y));
    }
    return obj;
}

float OAIGoogleCloudDocumentaiV1beta2NormalizedVertex::getX() const {
    return m_x;
}
void OAIGoogleCloudDocumentaiV1beta2NormalizedVertex::setX(const float &x) {
    m_x = x;
    m_x_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2NormalizedVertex::is_x_Set() const{
    return m_x_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2NormalizedVertex::is_x_Valid() const{
    return m_x_isValid;
}

float OAIGoogleCloudDocumentaiV1beta2NormalizedVertex::getY() const {
    return m_y;
}
void OAIGoogleCloudDocumentaiV1beta2NormalizedVertex::setY(const float &y) {
    m_y = y;
    m_y_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2NormalizedVertex::is_y_Set() const{
    return m_y_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2NormalizedVertex::is_y_Valid() const{
    return m_y_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta2NormalizedVertex::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta2NormalizedVertex::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
