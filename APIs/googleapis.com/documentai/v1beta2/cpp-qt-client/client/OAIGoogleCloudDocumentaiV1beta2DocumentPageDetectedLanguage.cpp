/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage::OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage::OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage::~OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage() {}

void OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    return obj;
}

float OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage::getConfidence() const {
    return m_confidence;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage::setConfidence(const float &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage::getLanguageCode() const {
    return m_language_code;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage::is_language_code_Valid() const{
    return m_language_code_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageDetectedLanguage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
