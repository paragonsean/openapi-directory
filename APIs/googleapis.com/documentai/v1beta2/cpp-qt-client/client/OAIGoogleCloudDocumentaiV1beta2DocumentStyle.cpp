/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta2DocumentStyle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta2DocumentStyle::OAIGoogleCloudDocumentaiV1beta2DocumentStyle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta2DocumentStyle::OAIGoogleCloudDocumentaiV1beta2DocumentStyle() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta2DocumentStyle::~OAIGoogleCloudDocumentaiV1beta2DocumentStyle() {}

void OAIGoogleCloudDocumentaiV1beta2DocumentStyle::initializeModel() {

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_font_family_isSet = false;
    m_font_family_isValid = false;

    m_font_size_isSet = false;
    m_font_size_isValid = false;

    m_font_weight_isSet = false;
    m_font_weight_isValid = false;

    m_text_anchor_isSet = false;
    m_text_anchor_isValid = false;

    m_text_decoration_isSet = false;
    m_text_decoration_isValid = false;

    m_text_style_isSet = false;
    m_text_style_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta2DocumentStyle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta2DocumentStyle::fromJsonObject(QJsonObject json) {

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("backgroundColor")]);
    m_background_color_isSet = !json[QString("backgroundColor")].isNull() && m_background_color_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_font_family_isValid = ::OpenAPI::fromJsonValue(m_font_family, json[QString("fontFamily")]);
    m_font_family_isSet = !json[QString("fontFamily")].isNull() && m_font_family_isValid;

    m_font_size_isValid = ::OpenAPI::fromJsonValue(m_font_size, json[QString("fontSize")]);
    m_font_size_isSet = !json[QString("fontSize")].isNull() && m_font_size_isValid;

    m_font_weight_isValid = ::OpenAPI::fromJsonValue(m_font_weight, json[QString("fontWeight")]);
    m_font_weight_isSet = !json[QString("fontWeight")].isNull() && m_font_weight_isValid;

    m_text_anchor_isValid = ::OpenAPI::fromJsonValue(m_text_anchor, json[QString("textAnchor")]);
    m_text_anchor_isSet = !json[QString("textAnchor")].isNull() && m_text_anchor_isValid;

    m_text_decoration_isValid = ::OpenAPI::fromJsonValue(m_text_decoration, json[QString("textDecoration")]);
    m_text_decoration_isSet = !json[QString("textDecoration")].isNull() && m_text_decoration_isValid;

    m_text_style_isValid = ::OpenAPI::fromJsonValue(m_text_style, json[QString("textStyle")]);
    m_text_style_isSet = !json[QString("textStyle")].isNull() && m_text_style_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentStyle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta2DocumentStyle::asJsonObject() const {
    QJsonObject obj;
    if (m_background_color.isSet()) {
        obj.insert(QString("backgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_color.isSet()) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_font_family_isSet) {
        obj.insert(QString("fontFamily"), ::OpenAPI::toJsonValue(m_font_family));
    }
    if (m_font_size.isSet()) {
        obj.insert(QString("fontSize"), ::OpenAPI::toJsonValue(m_font_size));
    }
    if (m_font_weight_isSet) {
        obj.insert(QString("fontWeight"), ::OpenAPI::toJsonValue(m_font_weight));
    }
    if (m_text_anchor.isSet()) {
        obj.insert(QString("textAnchor"), ::OpenAPI::toJsonValue(m_text_anchor));
    }
    if (m_text_decoration_isSet) {
        obj.insert(QString("textDecoration"), ::OpenAPI::toJsonValue(m_text_decoration));
    }
    if (m_text_style_isSet) {
        obj.insert(QString("textStyle"), ::OpenAPI::toJsonValue(m_text_style));
    }
    return obj;
}

OAIGoogleTypeColor OAIGoogleCloudDocumentaiV1beta2DocumentStyle::getBackgroundColor() const {
    return m_background_color;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentStyle::setBackgroundColor(const OAIGoogleTypeColor &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyle::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyle::is_background_color_Valid() const{
    return m_background_color_isValid;
}

OAIGoogleTypeColor OAIGoogleCloudDocumentaiV1beta2DocumentStyle::getColor() const {
    return m_color;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentStyle::setColor(const OAIGoogleTypeColor &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyle::is_color_Set() const{
    return m_color_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyle::is_color_Valid() const{
    return m_color_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentStyle::getFontFamily() const {
    return m_font_family;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentStyle::setFontFamily(const QString &font_family) {
    m_font_family = font_family;
    m_font_family_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyle::is_font_family_Set() const{
    return m_font_family_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyle::is_font_family_Valid() const{
    return m_font_family_isValid;
}

OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize OAIGoogleCloudDocumentaiV1beta2DocumentStyle::getFontSize() const {
    return m_font_size;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentStyle::setFontSize(const OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize &font_size) {
    m_font_size = font_size;
    m_font_size_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyle::is_font_size_Set() const{
    return m_font_size_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyle::is_font_size_Valid() const{
    return m_font_size_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentStyle::getFontWeight() const {
    return m_font_weight;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentStyle::setFontWeight(const QString &font_weight) {
    m_font_weight = font_weight;
    m_font_weight_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyle::is_font_weight_Set() const{
    return m_font_weight_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyle::is_font_weight_Valid() const{
    return m_font_weight_isValid;
}

OAIGoogleCloudDocumentaiV1beta2DocumentTextAnchor OAIGoogleCloudDocumentaiV1beta2DocumentStyle::getTextAnchor() const {
    return m_text_anchor;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentStyle::setTextAnchor(const OAIGoogleCloudDocumentaiV1beta2DocumentTextAnchor &text_anchor) {
    m_text_anchor = text_anchor;
    m_text_anchor_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyle::is_text_anchor_Set() const{
    return m_text_anchor_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyle::is_text_anchor_Valid() const{
    return m_text_anchor_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentStyle::getTextDecoration() const {
    return m_text_decoration;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentStyle::setTextDecoration(const QString &text_decoration) {
    m_text_decoration = text_decoration;
    m_text_decoration_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyle::is_text_decoration_Set() const{
    return m_text_decoration_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyle::is_text_decoration_Valid() const{
    return m_text_decoration_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentStyle::getTextStyle() const {
    return m_text_style;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentStyle::setTextStyle(const QString &text_style) {
    m_text_style = text_style;
    m_text_style_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyle::is_text_style_Set() const{
    return m_text_style_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyle::is_text_style_Valid() const{
    return m_text_style_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_anchor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_decoration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_style_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
