/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult::OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult::OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult::~OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult() {}

void OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult::initializeModel() {

    m_input_gcs_source_isSet = false;
    m_input_gcs_source_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult::fromJsonObject(QJsonObject json) {

    m_input_gcs_source_isValid = ::OpenAPI::fromJsonValue(m_input_gcs_source, json[QString("inputGcsSource")]);
    m_input_gcs_source_isSet = !json[QString("inputGcsSource")].isNull() && m_input_gcs_source_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_input_gcs_source_isSet) {
        obj.insert(QString("inputGcsSource"), ::OpenAPI::toJsonValue(m_input_gcs_source));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult::getInputGcsSource() const {
    return m_input_gcs_source;
}
void OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult::setInputGcsSource(const QString &input_gcs_source) {
    m_input_gcs_source = input_gcs_source;
    m_input_gcs_source_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult::is_input_gcs_source_Set() const{
    return m_input_gcs_source_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult::is_input_gcs_source_Valid() const{
    return m_input_gcs_source_isValid;
}

OAIGoogleRpcStatus OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult::getStatus() const {
    return m_status;
}
void OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult::setStatus(const OAIGoogleRpcStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_gcs_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta3ImportDocumentsMetadataImportConfigValidationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
