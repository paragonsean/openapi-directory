# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_documentai_v1beta3_dataset_document_warehouse_config import GoogleCloudDocumentaiV1beta3DatasetDocumentWarehouseConfig
from openapi_server.models.google_cloud_documentai_v1beta3_dataset_gcs_managed_config import GoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig
from openapi_server import util


class GoogleCloudDocumentaiV1beta3Dataset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_warehouse_config: GoogleCloudDocumentaiV1beta3DatasetDocumentWarehouseConfig=None, gcs_managed_config: GoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig=None, name: str=None, spanner_indexing_config: object=None, state: str=None, unmanaged_dataset_config: object=None):
        """GoogleCloudDocumentaiV1beta3Dataset - a model defined in OpenAPI

        :param document_warehouse_config: The document_warehouse_config of this GoogleCloudDocumentaiV1beta3Dataset.
        :param gcs_managed_config: The gcs_managed_config of this GoogleCloudDocumentaiV1beta3Dataset.
        :param name: The name of this GoogleCloudDocumentaiV1beta3Dataset.
        :param spanner_indexing_config: The spanner_indexing_config of this GoogleCloudDocumentaiV1beta3Dataset.
        :param state: The state of this GoogleCloudDocumentaiV1beta3Dataset.
        :param unmanaged_dataset_config: The unmanaged_dataset_config of this GoogleCloudDocumentaiV1beta3Dataset.
        """
        self.openapi_types = {
            'document_warehouse_config': GoogleCloudDocumentaiV1beta3DatasetDocumentWarehouseConfig,
            'gcs_managed_config': GoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig,
            'name': str,
            'spanner_indexing_config': object,
            'state': str,
            'unmanaged_dataset_config': object
        }

        self.attribute_map = {
            'document_warehouse_config': 'documentWarehouseConfig',
            'gcs_managed_config': 'gcsManagedConfig',
            'name': 'name',
            'spanner_indexing_config': 'spannerIndexingConfig',
            'state': 'state',
            'unmanaged_dataset_config': 'unmanagedDatasetConfig'
        }

        self._document_warehouse_config = document_warehouse_config
        self._gcs_managed_config = gcs_managed_config
        self._name = name
        self._spanner_indexing_config = spanner_indexing_config
        self._state = state
        self._unmanaged_dataset_config = unmanaged_dataset_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDocumentaiV1beta3Dataset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDocumentaiV1beta3Dataset of this GoogleCloudDocumentaiV1beta3Dataset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_warehouse_config(self):
        """Gets the document_warehouse_config of this GoogleCloudDocumentaiV1beta3Dataset.


        :return: The document_warehouse_config of this GoogleCloudDocumentaiV1beta3Dataset.
        :rtype: GoogleCloudDocumentaiV1beta3DatasetDocumentWarehouseConfig
        """
        return self._document_warehouse_config

    @document_warehouse_config.setter
    def document_warehouse_config(self, document_warehouse_config):
        """Sets the document_warehouse_config of this GoogleCloudDocumentaiV1beta3Dataset.


        :param document_warehouse_config: The document_warehouse_config of this GoogleCloudDocumentaiV1beta3Dataset.
        :type document_warehouse_config: GoogleCloudDocumentaiV1beta3DatasetDocumentWarehouseConfig
        """

        self._document_warehouse_config = document_warehouse_config

    @property
    def gcs_managed_config(self):
        """Gets the gcs_managed_config of this GoogleCloudDocumentaiV1beta3Dataset.


        :return: The gcs_managed_config of this GoogleCloudDocumentaiV1beta3Dataset.
        :rtype: GoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig
        """
        return self._gcs_managed_config

    @gcs_managed_config.setter
    def gcs_managed_config(self, gcs_managed_config):
        """Sets the gcs_managed_config of this GoogleCloudDocumentaiV1beta3Dataset.


        :param gcs_managed_config: The gcs_managed_config of this GoogleCloudDocumentaiV1beta3Dataset.
        :type gcs_managed_config: GoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig
        """

        self._gcs_managed_config = gcs_managed_config

    @property
    def name(self):
        """Gets the name of this GoogleCloudDocumentaiV1beta3Dataset.

        Dataset resource name. Format: `projects/{project}/locations/{location}/processors/{processor}/dataset`

        :return: The name of this GoogleCloudDocumentaiV1beta3Dataset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDocumentaiV1beta3Dataset.

        Dataset resource name. Format: `projects/{project}/locations/{location}/processors/{processor}/dataset`

        :param name: The name of this GoogleCloudDocumentaiV1beta3Dataset.
        :type name: str
        """

        self._name = name

    @property
    def spanner_indexing_config(self):
        """Gets the spanner_indexing_config of this GoogleCloudDocumentaiV1beta3Dataset.

        Configuration specific to spanner-based indexing.

        :return: The spanner_indexing_config of this GoogleCloudDocumentaiV1beta3Dataset.
        :rtype: object
        """
        return self._spanner_indexing_config

    @spanner_indexing_config.setter
    def spanner_indexing_config(self, spanner_indexing_config):
        """Sets the spanner_indexing_config of this GoogleCloudDocumentaiV1beta3Dataset.

        Configuration specific to spanner-based indexing.

        :param spanner_indexing_config: The spanner_indexing_config of this GoogleCloudDocumentaiV1beta3Dataset.
        :type spanner_indexing_config: object
        """

        self._spanner_indexing_config = spanner_indexing_config

    @property
    def state(self):
        """Gets the state of this GoogleCloudDocumentaiV1beta3Dataset.

        Required. State of the dataset. Ignored when updating dataset.

        :return: The state of this GoogleCloudDocumentaiV1beta3Dataset.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudDocumentaiV1beta3Dataset.

        Required. State of the dataset. Ignored when updating dataset.

        :param state: The state of this GoogleCloudDocumentaiV1beta3Dataset.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "UNINITIALIZED", "INITIALIZING", "INITIALIZED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def unmanaged_dataset_config(self):
        """Gets the unmanaged_dataset_config of this GoogleCloudDocumentaiV1beta3Dataset.

        Configuration specific to an unmanaged dataset.

        :return: The unmanaged_dataset_config of this GoogleCloudDocumentaiV1beta3Dataset.
        :rtype: object
        """
        return self._unmanaged_dataset_config

    @unmanaged_dataset_config.setter
    def unmanaged_dataset_config(self, unmanaged_dataset_config):
        """Sets the unmanaged_dataset_config of this GoogleCloudDocumentaiV1beta3Dataset.

        Configuration specific to an unmanaged dataset.

        :param unmanaged_dataset_config: The unmanaged_dataset_config of this GoogleCloudDocumentaiV1beta3Dataset.
        :type unmanaged_dataset_config: object
        """

        self._unmanaged_dataset_config = unmanaged_dataset_config
