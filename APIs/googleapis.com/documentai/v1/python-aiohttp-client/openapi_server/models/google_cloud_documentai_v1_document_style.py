# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_documentai_v1_document_style_font_size import GoogleCloudDocumentaiV1DocumentStyleFontSize
from openapi_server.models.google_cloud_documentai_v1_document_text_anchor import GoogleCloudDocumentaiV1DocumentTextAnchor
from openapi_server.models.google_type_color import GoogleTypeColor
from openapi_server import util


class GoogleCloudDocumentaiV1DocumentStyle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background_color: GoogleTypeColor=None, color: GoogleTypeColor=None, font_family: str=None, font_size: GoogleCloudDocumentaiV1DocumentStyleFontSize=None, font_weight: str=None, text_anchor: GoogleCloudDocumentaiV1DocumentTextAnchor=None, text_decoration: str=None, text_style: str=None):
        """GoogleCloudDocumentaiV1DocumentStyle - a model defined in OpenAPI

        :param background_color: The background_color of this GoogleCloudDocumentaiV1DocumentStyle.
        :param color: The color of this GoogleCloudDocumentaiV1DocumentStyle.
        :param font_family: The font_family of this GoogleCloudDocumentaiV1DocumentStyle.
        :param font_size: The font_size of this GoogleCloudDocumentaiV1DocumentStyle.
        :param font_weight: The font_weight of this GoogleCloudDocumentaiV1DocumentStyle.
        :param text_anchor: The text_anchor of this GoogleCloudDocumentaiV1DocumentStyle.
        :param text_decoration: The text_decoration of this GoogleCloudDocumentaiV1DocumentStyle.
        :param text_style: The text_style of this GoogleCloudDocumentaiV1DocumentStyle.
        """
        self.openapi_types = {
            'background_color': GoogleTypeColor,
            'color': GoogleTypeColor,
            'font_family': str,
            'font_size': GoogleCloudDocumentaiV1DocumentStyleFontSize,
            'font_weight': str,
            'text_anchor': GoogleCloudDocumentaiV1DocumentTextAnchor,
            'text_decoration': str,
            'text_style': str
        }

        self.attribute_map = {
            'background_color': 'backgroundColor',
            'color': 'color',
            'font_family': 'fontFamily',
            'font_size': 'fontSize',
            'font_weight': 'fontWeight',
            'text_anchor': 'textAnchor',
            'text_decoration': 'textDecoration',
            'text_style': 'textStyle'
        }

        self._background_color = background_color
        self._color = color
        self._font_family = font_family
        self._font_size = font_size
        self._font_weight = font_weight
        self._text_anchor = text_anchor
        self._text_decoration = text_decoration
        self._text_style = text_style

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDocumentaiV1DocumentStyle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDocumentaiV1DocumentStyle of this GoogleCloudDocumentaiV1DocumentStyle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background_color(self):
        """Gets the background_color of this GoogleCloudDocumentaiV1DocumentStyle.


        :return: The background_color of this GoogleCloudDocumentaiV1DocumentStyle.
        :rtype: GoogleTypeColor
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this GoogleCloudDocumentaiV1DocumentStyle.


        :param background_color: The background_color of this GoogleCloudDocumentaiV1DocumentStyle.
        :type background_color: GoogleTypeColor
        """

        self._background_color = background_color

    @property
    def color(self):
        """Gets the color of this GoogleCloudDocumentaiV1DocumentStyle.


        :return: The color of this GoogleCloudDocumentaiV1DocumentStyle.
        :rtype: GoogleTypeColor
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this GoogleCloudDocumentaiV1DocumentStyle.


        :param color: The color of this GoogleCloudDocumentaiV1DocumentStyle.
        :type color: GoogleTypeColor
        """

        self._color = color

    @property
    def font_family(self):
        """Gets the font_family of this GoogleCloudDocumentaiV1DocumentStyle.

        Font family such as `Arial`, `Times New Roman`. https://www.w3schools.com/cssref/pr_font_font-family.asp

        :return: The font_family of this GoogleCloudDocumentaiV1DocumentStyle.
        :rtype: str
        """
        return self._font_family

    @font_family.setter
    def font_family(self, font_family):
        """Sets the font_family of this GoogleCloudDocumentaiV1DocumentStyle.

        Font family such as `Arial`, `Times New Roman`. https://www.w3schools.com/cssref/pr_font_font-family.asp

        :param font_family: The font_family of this GoogleCloudDocumentaiV1DocumentStyle.
        :type font_family: str
        """

        self._font_family = font_family

    @property
    def font_size(self):
        """Gets the font_size of this GoogleCloudDocumentaiV1DocumentStyle.


        :return: The font_size of this GoogleCloudDocumentaiV1DocumentStyle.
        :rtype: GoogleCloudDocumentaiV1DocumentStyleFontSize
        """
        return self._font_size

    @font_size.setter
    def font_size(self, font_size):
        """Sets the font_size of this GoogleCloudDocumentaiV1DocumentStyle.


        :param font_size: The font_size of this GoogleCloudDocumentaiV1DocumentStyle.
        :type font_size: GoogleCloudDocumentaiV1DocumentStyleFontSize
        """

        self._font_size = font_size

    @property
    def font_weight(self):
        """Gets the font_weight of this GoogleCloudDocumentaiV1DocumentStyle.

        [Font weight](https://www.w3schools.com/cssref/pr_font_weight.asp). Possible values are `normal`, `bold`, `bolder`, and `lighter`.

        :return: The font_weight of this GoogleCloudDocumentaiV1DocumentStyle.
        :rtype: str
        """
        return self._font_weight

    @font_weight.setter
    def font_weight(self, font_weight):
        """Sets the font_weight of this GoogleCloudDocumentaiV1DocumentStyle.

        [Font weight](https://www.w3schools.com/cssref/pr_font_weight.asp). Possible values are `normal`, `bold`, `bolder`, and `lighter`.

        :param font_weight: The font_weight of this GoogleCloudDocumentaiV1DocumentStyle.
        :type font_weight: str
        """

        self._font_weight = font_weight

    @property
    def text_anchor(self):
        """Gets the text_anchor of this GoogleCloudDocumentaiV1DocumentStyle.


        :return: The text_anchor of this GoogleCloudDocumentaiV1DocumentStyle.
        :rtype: GoogleCloudDocumentaiV1DocumentTextAnchor
        """
        return self._text_anchor

    @text_anchor.setter
    def text_anchor(self, text_anchor):
        """Sets the text_anchor of this GoogleCloudDocumentaiV1DocumentStyle.


        :param text_anchor: The text_anchor of this GoogleCloudDocumentaiV1DocumentStyle.
        :type text_anchor: GoogleCloudDocumentaiV1DocumentTextAnchor
        """

        self._text_anchor = text_anchor

    @property
    def text_decoration(self):
        """Gets the text_decoration of this GoogleCloudDocumentaiV1DocumentStyle.

        [Text decoration](https://www.w3schools.com/cssref/pr_text_text-decoration.asp). Follows CSS standard. 

        :return: The text_decoration of this GoogleCloudDocumentaiV1DocumentStyle.
        :rtype: str
        """
        return self._text_decoration

    @text_decoration.setter
    def text_decoration(self, text_decoration):
        """Sets the text_decoration of this GoogleCloudDocumentaiV1DocumentStyle.

        [Text decoration](https://www.w3schools.com/cssref/pr_text_text-decoration.asp). Follows CSS standard. 

        :param text_decoration: The text_decoration of this GoogleCloudDocumentaiV1DocumentStyle.
        :type text_decoration: str
        """

        self._text_decoration = text_decoration

    @property
    def text_style(self):
        """Gets the text_style of this GoogleCloudDocumentaiV1DocumentStyle.

        [Text style](https://www.w3schools.com/cssref/pr_font_font-style.asp). Possible values are `normal`, `italic`, and `oblique`.

        :return: The text_style of this GoogleCloudDocumentaiV1DocumentStyle.
        :rtype: str
        """
        return self._text_style

    @text_style.setter
    def text_style(self, text_style):
        """Sets the text_style of this GoogleCloudDocumentaiV1DocumentStyle.

        [Text style](https://www.w3schools.com/cssref/pr_font_font-style.asp). Possible values are `normal`, `italic`, and `oblique`.

        :param text_style: The text_style of this GoogleCloudDocumentaiV1DocumentStyle.
        :type text_style: str
        """

        self._text_style = text_style
