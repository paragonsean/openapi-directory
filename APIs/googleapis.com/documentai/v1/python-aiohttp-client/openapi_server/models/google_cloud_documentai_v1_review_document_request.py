# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_documentai_v1_document import GoogleCloudDocumentaiV1Document
from openapi_server.models.google_cloud_documentai_v1_document_schema import GoogleCloudDocumentaiV1DocumentSchema
from openapi_server import util


class GoogleCloudDocumentaiV1ReviewDocumentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_schema: GoogleCloudDocumentaiV1DocumentSchema=None, enable_schema_validation: bool=None, inline_document: GoogleCloudDocumentaiV1Document=None, priority: str=None):
        """GoogleCloudDocumentaiV1ReviewDocumentRequest - a model defined in OpenAPI

        :param document_schema: The document_schema of this GoogleCloudDocumentaiV1ReviewDocumentRequest.
        :param enable_schema_validation: The enable_schema_validation of this GoogleCloudDocumentaiV1ReviewDocumentRequest.
        :param inline_document: The inline_document of this GoogleCloudDocumentaiV1ReviewDocumentRequest.
        :param priority: The priority of this GoogleCloudDocumentaiV1ReviewDocumentRequest.
        """
        self.openapi_types = {
            'document_schema': GoogleCloudDocumentaiV1DocumentSchema,
            'enable_schema_validation': bool,
            'inline_document': GoogleCloudDocumentaiV1Document,
            'priority': str
        }

        self.attribute_map = {
            'document_schema': 'documentSchema',
            'enable_schema_validation': 'enableSchemaValidation',
            'inline_document': 'inlineDocument',
            'priority': 'priority'
        }

        self._document_schema = document_schema
        self._enable_schema_validation = enable_schema_validation
        self._inline_document = inline_document
        self._priority = priority

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDocumentaiV1ReviewDocumentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDocumentaiV1ReviewDocumentRequest of this GoogleCloudDocumentaiV1ReviewDocumentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_schema(self):
        """Gets the document_schema of this GoogleCloudDocumentaiV1ReviewDocumentRequest.


        :return: The document_schema of this GoogleCloudDocumentaiV1ReviewDocumentRequest.
        :rtype: GoogleCloudDocumentaiV1DocumentSchema
        """
        return self._document_schema

    @document_schema.setter
    def document_schema(self, document_schema):
        """Sets the document_schema of this GoogleCloudDocumentaiV1ReviewDocumentRequest.


        :param document_schema: The document_schema of this GoogleCloudDocumentaiV1ReviewDocumentRequest.
        :type document_schema: GoogleCloudDocumentaiV1DocumentSchema
        """

        self._document_schema = document_schema

    @property
    def enable_schema_validation(self):
        """Gets the enable_schema_validation of this GoogleCloudDocumentaiV1ReviewDocumentRequest.

        Whether the validation should be performed on the ad-hoc review request.

        :return: The enable_schema_validation of this GoogleCloudDocumentaiV1ReviewDocumentRequest.
        :rtype: bool
        """
        return self._enable_schema_validation

    @enable_schema_validation.setter
    def enable_schema_validation(self, enable_schema_validation):
        """Sets the enable_schema_validation of this GoogleCloudDocumentaiV1ReviewDocumentRequest.

        Whether the validation should be performed on the ad-hoc review request.

        :param enable_schema_validation: The enable_schema_validation of this GoogleCloudDocumentaiV1ReviewDocumentRequest.
        :type enable_schema_validation: bool
        """

        self._enable_schema_validation = enable_schema_validation

    @property
    def inline_document(self):
        """Gets the inline_document of this GoogleCloudDocumentaiV1ReviewDocumentRequest.


        :return: The inline_document of this GoogleCloudDocumentaiV1ReviewDocumentRequest.
        :rtype: GoogleCloudDocumentaiV1Document
        """
        return self._inline_document

    @inline_document.setter
    def inline_document(self, inline_document):
        """Sets the inline_document of this GoogleCloudDocumentaiV1ReviewDocumentRequest.


        :param inline_document: The inline_document of this GoogleCloudDocumentaiV1ReviewDocumentRequest.
        :type inline_document: GoogleCloudDocumentaiV1Document
        """

        self._inline_document = inline_document

    @property
    def priority(self):
        """Gets the priority of this GoogleCloudDocumentaiV1ReviewDocumentRequest.

        The priority of the human review task.

        :return: The priority of this GoogleCloudDocumentaiV1ReviewDocumentRequest.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this GoogleCloudDocumentaiV1ReviewDocumentRequest.

        The priority of the human review task.

        :param priority: The priority of this GoogleCloudDocumentaiV1ReviewDocumentRequest.
        :type priority: str
        """
        allowed_values = ["DEFAULT", "URGENT"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority
