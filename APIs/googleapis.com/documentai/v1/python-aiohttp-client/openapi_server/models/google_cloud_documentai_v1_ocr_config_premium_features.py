# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDocumentaiV1OcrConfigPremiumFeatures(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compute_style_info: bool=None, enable_math_ocr: bool=None, enable_selection_mark_detection: bool=None):
        """GoogleCloudDocumentaiV1OcrConfigPremiumFeatures - a model defined in OpenAPI

        :param compute_style_info: The compute_style_info of this GoogleCloudDocumentaiV1OcrConfigPremiumFeatures.
        :param enable_math_ocr: The enable_math_ocr of this GoogleCloudDocumentaiV1OcrConfigPremiumFeatures.
        :param enable_selection_mark_detection: The enable_selection_mark_detection of this GoogleCloudDocumentaiV1OcrConfigPremiumFeatures.
        """
        self.openapi_types = {
            'compute_style_info': bool,
            'enable_math_ocr': bool,
            'enable_selection_mark_detection': bool
        }

        self.attribute_map = {
            'compute_style_info': 'computeStyleInfo',
            'enable_math_ocr': 'enableMathOcr',
            'enable_selection_mark_detection': 'enableSelectionMarkDetection'
        }

        self._compute_style_info = compute_style_info
        self._enable_math_ocr = enable_math_ocr
        self._enable_selection_mark_detection = enable_selection_mark_detection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDocumentaiV1OcrConfigPremiumFeatures':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDocumentaiV1OcrConfigPremiumFeatures of this GoogleCloudDocumentaiV1OcrConfigPremiumFeatures.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compute_style_info(self):
        """Gets the compute_style_info of this GoogleCloudDocumentaiV1OcrConfigPremiumFeatures.

        Turn on font identification model and return font style information.

        :return: The compute_style_info of this GoogleCloudDocumentaiV1OcrConfigPremiumFeatures.
        :rtype: bool
        """
        return self._compute_style_info

    @compute_style_info.setter
    def compute_style_info(self, compute_style_info):
        """Sets the compute_style_info of this GoogleCloudDocumentaiV1OcrConfigPremiumFeatures.

        Turn on font identification model and return font style information.

        :param compute_style_info: The compute_style_info of this GoogleCloudDocumentaiV1OcrConfigPremiumFeatures.
        :type compute_style_info: bool
        """

        self._compute_style_info = compute_style_info

    @property
    def enable_math_ocr(self):
        """Gets the enable_math_ocr of this GoogleCloudDocumentaiV1OcrConfigPremiumFeatures.

        Turn on the model that can extract LaTeX math formulas.

        :return: The enable_math_ocr of this GoogleCloudDocumentaiV1OcrConfigPremiumFeatures.
        :rtype: bool
        """
        return self._enable_math_ocr

    @enable_math_ocr.setter
    def enable_math_ocr(self, enable_math_ocr):
        """Sets the enable_math_ocr of this GoogleCloudDocumentaiV1OcrConfigPremiumFeatures.

        Turn on the model that can extract LaTeX math formulas.

        :param enable_math_ocr: The enable_math_ocr of this GoogleCloudDocumentaiV1OcrConfigPremiumFeatures.
        :type enable_math_ocr: bool
        """

        self._enable_math_ocr = enable_math_ocr

    @property
    def enable_selection_mark_detection(self):
        """Gets the enable_selection_mark_detection of this GoogleCloudDocumentaiV1OcrConfigPremiumFeatures.

        Turn on selection mark detector in OCR engine. Only available in OCR 2.0 (and later) processors.

        :return: The enable_selection_mark_detection of this GoogleCloudDocumentaiV1OcrConfigPremiumFeatures.
        :rtype: bool
        """
        return self._enable_selection_mark_detection

    @enable_selection_mark_detection.setter
    def enable_selection_mark_detection(self, enable_selection_mark_detection):
        """Sets the enable_selection_mark_detection of this GoogleCloudDocumentaiV1OcrConfigPremiumFeatures.

        Turn on selection mark detector in OCR engine. Only available in OCR 2.0 (and later) processors.

        :param enable_selection_mark_detection: The enable_selection_mark_detection of this GoogleCloudDocumentaiV1OcrConfigPremiumFeatures.
        :type enable_selection_mark_detection: bool
        """

        self._enable_selection_mark_detection = enable_selection_mark_detection
