# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_documentai_v1_document_provenance_parent import GoogleCloudDocumentaiV1DocumentProvenanceParent
from openapi_server import util


class GoogleCloudDocumentaiV1DocumentProvenance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, parents: List[GoogleCloudDocumentaiV1DocumentProvenanceParent]=None, revision: int=None, type: str=None):
        """GoogleCloudDocumentaiV1DocumentProvenance - a model defined in OpenAPI

        :param id: The id of this GoogleCloudDocumentaiV1DocumentProvenance.
        :param parents: The parents of this GoogleCloudDocumentaiV1DocumentProvenance.
        :param revision: The revision of this GoogleCloudDocumentaiV1DocumentProvenance.
        :param type: The type of this GoogleCloudDocumentaiV1DocumentProvenance.
        """
        self.openapi_types = {
            'id': int,
            'parents': List[GoogleCloudDocumentaiV1DocumentProvenanceParent],
            'revision': int,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'parents': 'parents',
            'revision': 'revision',
            'type': 'type'
        }

        self._id = id
        self._parents = parents
        self._revision = revision
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDocumentaiV1DocumentProvenance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDocumentaiV1DocumentProvenance of this GoogleCloudDocumentaiV1DocumentProvenance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this GoogleCloudDocumentaiV1DocumentProvenance.

        The Id of this operation. Needs to be unique within the scope of the revision.

        :return: The id of this GoogleCloudDocumentaiV1DocumentProvenance.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GoogleCloudDocumentaiV1DocumentProvenance.

        The Id of this operation. Needs to be unique within the scope of the revision.

        :param id: The id of this GoogleCloudDocumentaiV1DocumentProvenance.
        :type id: int
        """

        self._id = id

    @property
    def parents(self):
        """Gets the parents of this GoogleCloudDocumentaiV1DocumentProvenance.

        References to the original elements that are replaced.

        :return: The parents of this GoogleCloudDocumentaiV1DocumentProvenance.
        :rtype: List[GoogleCloudDocumentaiV1DocumentProvenanceParent]
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this GoogleCloudDocumentaiV1DocumentProvenance.

        References to the original elements that are replaced.

        :param parents: The parents of this GoogleCloudDocumentaiV1DocumentProvenance.
        :type parents: List[GoogleCloudDocumentaiV1DocumentProvenanceParent]
        """

        self._parents = parents

    @property
    def revision(self):
        """Gets the revision of this GoogleCloudDocumentaiV1DocumentProvenance.

        The index of the revision that produced this element.

        :return: The revision of this GoogleCloudDocumentaiV1DocumentProvenance.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this GoogleCloudDocumentaiV1DocumentProvenance.

        The index of the revision that produced this element.

        :param revision: The revision of this GoogleCloudDocumentaiV1DocumentProvenance.
        :type revision: int
        """

        self._revision = revision

    @property
    def type(self):
        """Gets the type of this GoogleCloudDocumentaiV1DocumentProvenance.

        The type of provenance operation.

        :return: The type of this GoogleCloudDocumentaiV1DocumentProvenance.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudDocumentaiV1DocumentProvenance.

        The type of provenance operation.

        :param type: The type of this GoogleCloudDocumentaiV1DocumentProvenance.
        :type type: str
        """
        allowed_values = ["OPERATION_TYPE_UNSPECIFIED", "ADD", "REMOVE", "UPDATE", "REPLACE", "EVAL_REQUESTED", "EVAL_APPROVED", "EVAL_SKIPPED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
