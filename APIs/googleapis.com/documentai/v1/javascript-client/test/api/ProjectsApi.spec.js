/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudDocumentAiApi);
  }
}(this, function(expect, CloudDocumentAiApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudDocumentAiApi.ProjectsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectsApi', function() {
    describe('documentaiProjectsLocationsFetchProcessorTypes', function() {
      it('should call documentaiProjectsLocationsFetchProcessorTypes successfully', function(done) {
        //uncomment below and update the code to test documentaiProjectsLocationsFetchProcessorTypes
        //instance.documentaiProjectsLocationsFetchProcessorTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentaiProjectsLocationsList', function() {
      it('should call documentaiProjectsLocationsList successfully', function(done) {
        //uncomment below and update the code to test documentaiProjectsLocationsList
        //instance.documentaiProjectsLocationsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentaiProjectsLocationsOperationsCancel', function() {
      it('should call documentaiProjectsLocationsOperationsCancel successfully', function(done) {
        //uncomment below and update the code to test documentaiProjectsLocationsOperationsCancel
        //instance.documentaiProjectsLocationsOperationsCancel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentaiProjectsLocationsProcessorTypesList', function() {
      it('should call documentaiProjectsLocationsProcessorTypesList successfully', function(done) {
        //uncomment below and update the code to test documentaiProjectsLocationsProcessorTypesList
        //instance.documentaiProjectsLocationsProcessorTypesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentaiProjectsLocationsProcessorsCreate', function() {
      it('should call documentaiProjectsLocationsProcessorsCreate successfully', function(done) {
        //uncomment below and update the code to test documentaiProjectsLocationsProcessorsCreate
        //instance.documentaiProjectsLocationsProcessorsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentaiProjectsLocationsProcessorsDisable', function() {
      it('should call documentaiProjectsLocationsProcessorsDisable successfully', function(done) {
        //uncomment below and update the code to test documentaiProjectsLocationsProcessorsDisable
        //instance.documentaiProjectsLocationsProcessorsDisable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentaiProjectsLocationsProcessorsEnable', function() {
      it('should call documentaiProjectsLocationsProcessorsEnable successfully', function(done) {
        //uncomment below and update the code to test documentaiProjectsLocationsProcessorsEnable
        //instance.documentaiProjectsLocationsProcessorsEnable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocument', function() {
      it('should call documentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocument successfully', function(done) {
        //uncomment below and update the code to test documentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocument
        //instance.documentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentaiProjectsLocationsProcessorsList', function() {
      it('should call documentaiProjectsLocationsProcessorsList successfully', function(done) {
        //uncomment below and update the code to test documentaiProjectsLocationsProcessorsList
        //instance.documentaiProjectsLocationsProcessorsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentaiProjectsLocationsProcessorsProcessorVersionsBatchProcess', function() {
      it('should call documentaiProjectsLocationsProcessorsProcessorVersionsBatchProcess successfully', function(done) {
        //uncomment below and update the code to test documentaiProjectsLocationsProcessorsProcessorVersionsBatchProcess
        //instance.documentaiProjectsLocationsProcessorsProcessorVersionsBatchProcess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentaiProjectsLocationsProcessorsProcessorVersionsDelete', function() {
      it('should call documentaiProjectsLocationsProcessorsProcessorVersionsDelete successfully', function(done) {
        //uncomment below and update the code to test documentaiProjectsLocationsProcessorsProcessorVersionsDelete
        //instance.documentaiProjectsLocationsProcessorsProcessorVersionsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentaiProjectsLocationsProcessorsProcessorVersionsDeploy', function() {
      it('should call documentaiProjectsLocationsProcessorsProcessorVersionsDeploy successfully', function(done) {
        //uncomment below and update the code to test documentaiProjectsLocationsProcessorsProcessorVersionsDeploy
        //instance.documentaiProjectsLocationsProcessorsProcessorVersionsDeploy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersion', function() {
      it('should call documentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersion successfully', function(done) {
        //uncomment below and update the code to test documentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersion
        //instance.documentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsList', function() {
      it('should call documentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsList successfully', function(done) {
        //uncomment below and update the code to test documentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsList
        //instance.documentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentaiProjectsLocationsProcessorsProcessorVersionsList', function() {
      it('should call documentaiProjectsLocationsProcessorsProcessorVersionsList successfully', function(done) {
        //uncomment below and update the code to test documentaiProjectsLocationsProcessorsProcessorVersionsList
        //instance.documentaiProjectsLocationsProcessorsProcessorVersionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentaiProjectsLocationsProcessorsProcessorVersionsProcess', function() {
      it('should call documentaiProjectsLocationsProcessorsProcessorVersionsProcess successfully', function(done) {
        //uncomment below and update the code to test documentaiProjectsLocationsProcessorsProcessorVersionsProcess
        //instance.documentaiProjectsLocationsProcessorsProcessorVersionsProcess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentaiProjectsLocationsProcessorsProcessorVersionsTrain', function() {
      it('should call documentaiProjectsLocationsProcessorsProcessorVersionsTrain successfully', function(done) {
        //uncomment below and update the code to test documentaiProjectsLocationsProcessorsProcessorVersionsTrain
        //instance.documentaiProjectsLocationsProcessorsProcessorVersionsTrain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentaiProjectsLocationsProcessorsProcessorVersionsUndeploy', function() {
      it('should call documentaiProjectsLocationsProcessorsProcessorVersionsUndeploy successfully', function(done) {
        //uncomment below and update the code to test documentaiProjectsLocationsProcessorsProcessorVersionsUndeploy
        //instance.documentaiProjectsLocationsProcessorsProcessorVersionsUndeploy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentaiProjectsLocationsProcessorsSetDefaultProcessorVersion', function() {
      it('should call documentaiProjectsLocationsProcessorsSetDefaultProcessorVersion successfully', function(done) {
        //uncomment below and update the code to test documentaiProjectsLocationsProcessorsSetDefaultProcessorVersion
        //instance.documentaiProjectsLocationsProcessorsSetDefaultProcessorVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('documentaiProjectsOperationsGet', function() {
      it('should call documentaiProjectsOperationsGet successfully', function(done) {
        //uncomment below and update the code to test documentaiProjectsOperationsGet
        //instance.documentaiProjectsOperationsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
