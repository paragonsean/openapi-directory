/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDocumentaiV1DocumentPageBlock from './GoogleCloudDocumentaiV1DocumentPageBlock';
import GoogleCloudDocumentaiV1DocumentPageDetectedBarcode from './GoogleCloudDocumentaiV1DocumentPageDetectedBarcode';
import GoogleCloudDocumentaiV1DocumentPageDetectedLanguage from './GoogleCloudDocumentaiV1DocumentPageDetectedLanguage';
import GoogleCloudDocumentaiV1DocumentPageDimension from './GoogleCloudDocumentaiV1DocumentPageDimension';
import GoogleCloudDocumentaiV1DocumentPageFormField from './GoogleCloudDocumentaiV1DocumentPageFormField';
import GoogleCloudDocumentaiV1DocumentPageImage from './GoogleCloudDocumentaiV1DocumentPageImage';
import GoogleCloudDocumentaiV1DocumentPageImageQualityScores from './GoogleCloudDocumentaiV1DocumentPageImageQualityScores';
import GoogleCloudDocumentaiV1DocumentPageLayout from './GoogleCloudDocumentaiV1DocumentPageLayout';
import GoogleCloudDocumentaiV1DocumentPageLine from './GoogleCloudDocumentaiV1DocumentPageLine';
import GoogleCloudDocumentaiV1DocumentPageMatrix from './GoogleCloudDocumentaiV1DocumentPageMatrix';
import GoogleCloudDocumentaiV1DocumentPageParagraph from './GoogleCloudDocumentaiV1DocumentPageParagraph';
import GoogleCloudDocumentaiV1DocumentPageSymbol from './GoogleCloudDocumentaiV1DocumentPageSymbol';
import GoogleCloudDocumentaiV1DocumentPageTable from './GoogleCloudDocumentaiV1DocumentPageTable';
import GoogleCloudDocumentaiV1DocumentPageToken from './GoogleCloudDocumentaiV1DocumentPageToken';
import GoogleCloudDocumentaiV1DocumentPageVisualElement from './GoogleCloudDocumentaiV1DocumentPageVisualElement';
import GoogleCloudDocumentaiV1DocumentProvenance from './GoogleCloudDocumentaiV1DocumentProvenance';

/**
 * The GoogleCloudDocumentaiV1DocumentPage model module.
 * @module model/GoogleCloudDocumentaiV1DocumentPage
 * @version v1
 */
class GoogleCloudDocumentaiV1DocumentPage {
    /**
     * Constructs a new <code>GoogleCloudDocumentaiV1DocumentPage</code>.
     * A page in a Document.
     * @alias module:model/GoogleCloudDocumentaiV1DocumentPage
     */
    constructor() { 
        
        GoogleCloudDocumentaiV1DocumentPage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDocumentaiV1DocumentPage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDocumentaiV1DocumentPage} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDocumentaiV1DocumentPage} The populated <code>GoogleCloudDocumentaiV1DocumentPage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDocumentaiV1DocumentPage();

            if (data.hasOwnProperty('blocks')) {
                obj['blocks'] = ApiClient.convertToType(data['blocks'], [GoogleCloudDocumentaiV1DocumentPageBlock]);
            }
            if (data.hasOwnProperty('detectedBarcodes')) {
                obj['detectedBarcodes'] = ApiClient.convertToType(data['detectedBarcodes'], [GoogleCloudDocumentaiV1DocumentPageDetectedBarcode]);
            }
            if (data.hasOwnProperty('detectedLanguages')) {
                obj['detectedLanguages'] = ApiClient.convertToType(data['detectedLanguages'], [GoogleCloudDocumentaiV1DocumentPageDetectedLanguage]);
            }
            if (data.hasOwnProperty('dimension')) {
                obj['dimension'] = GoogleCloudDocumentaiV1DocumentPageDimension.constructFromObject(data['dimension']);
            }
            if (data.hasOwnProperty('formFields')) {
                obj['formFields'] = ApiClient.convertToType(data['formFields'], [GoogleCloudDocumentaiV1DocumentPageFormField]);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = GoogleCloudDocumentaiV1DocumentPageImage.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('imageQualityScores')) {
                obj['imageQualityScores'] = GoogleCloudDocumentaiV1DocumentPageImageQualityScores.constructFromObject(data['imageQualityScores']);
            }
            if (data.hasOwnProperty('layout')) {
                obj['layout'] = GoogleCloudDocumentaiV1DocumentPageLayout.constructFromObject(data['layout']);
            }
            if (data.hasOwnProperty('lines')) {
                obj['lines'] = ApiClient.convertToType(data['lines'], [GoogleCloudDocumentaiV1DocumentPageLine]);
            }
            if (data.hasOwnProperty('pageNumber')) {
                obj['pageNumber'] = ApiClient.convertToType(data['pageNumber'], 'Number');
            }
            if (data.hasOwnProperty('paragraphs')) {
                obj['paragraphs'] = ApiClient.convertToType(data['paragraphs'], [GoogleCloudDocumentaiV1DocumentPageParagraph]);
            }
            if (data.hasOwnProperty('provenance')) {
                obj['provenance'] = GoogleCloudDocumentaiV1DocumentProvenance.constructFromObject(data['provenance']);
            }
            if (data.hasOwnProperty('symbols')) {
                obj['symbols'] = ApiClient.convertToType(data['symbols'], [GoogleCloudDocumentaiV1DocumentPageSymbol]);
            }
            if (data.hasOwnProperty('tables')) {
                obj['tables'] = ApiClient.convertToType(data['tables'], [GoogleCloudDocumentaiV1DocumentPageTable]);
            }
            if (data.hasOwnProperty('tokens')) {
                obj['tokens'] = ApiClient.convertToType(data['tokens'], [GoogleCloudDocumentaiV1DocumentPageToken]);
            }
            if (data.hasOwnProperty('transforms')) {
                obj['transforms'] = ApiClient.convertToType(data['transforms'], [GoogleCloudDocumentaiV1DocumentPageMatrix]);
            }
            if (data.hasOwnProperty('visualElements')) {
                obj['visualElements'] = ApiClient.convertToType(data['visualElements'], [GoogleCloudDocumentaiV1DocumentPageVisualElement]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDocumentaiV1DocumentPage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDocumentaiV1DocumentPage</code>.
     */
    static validateJSON(data) {
        if (data['blocks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['blocks'])) {
                throw new Error("Expected the field `blocks` to be an array in the JSON data but got " + data['blocks']);
            }
            // validate the optional field `blocks` (array)
            for (const item of data['blocks']) {
                GoogleCloudDocumentaiV1DocumentPageBlock.validateJSON(item);
            };
        }
        if (data['detectedBarcodes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['detectedBarcodes'])) {
                throw new Error("Expected the field `detectedBarcodes` to be an array in the JSON data but got " + data['detectedBarcodes']);
            }
            // validate the optional field `detectedBarcodes` (array)
            for (const item of data['detectedBarcodes']) {
                GoogleCloudDocumentaiV1DocumentPageDetectedBarcode.validateJSON(item);
            };
        }
        if (data['detectedLanguages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['detectedLanguages'])) {
                throw new Error("Expected the field `detectedLanguages` to be an array in the JSON data but got " + data['detectedLanguages']);
            }
            // validate the optional field `detectedLanguages` (array)
            for (const item of data['detectedLanguages']) {
                GoogleCloudDocumentaiV1DocumentPageDetectedLanguage.validateJSON(item);
            };
        }
        // validate the optional field `dimension`
        if (data['dimension']) { // data not null
          GoogleCloudDocumentaiV1DocumentPageDimension.validateJSON(data['dimension']);
        }
        if (data['formFields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['formFields'])) {
                throw new Error("Expected the field `formFields` to be an array in the JSON data but got " + data['formFields']);
            }
            // validate the optional field `formFields` (array)
            for (const item of data['formFields']) {
                GoogleCloudDocumentaiV1DocumentPageFormField.validateJSON(item);
            };
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          GoogleCloudDocumentaiV1DocumentPageImage.validateJSON(data['image']);
        }
        // validate the optional field `imageQualityScores`
        if (data['imageQualityScores']) { // data not null
          GoogleCloudDocumentaiV1DocumentPageImageQualityScores.validateJSON(data['imageQualityScores']);
        }
        // validate the optional field `layout`
        if (data['layout']) { // data not null
          GoogleCloudDocumentaiV1DocumentPageLayout.validateJSON(data['layout']);
        }
        if (data['lines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lines'])) {
                throw new Error("Expected the field `lines` to be an array in the JSON data but got " + data['lines']);
            }
            // validate the optional field `lines` (array)
            for (const item of data['lines']) {
                GoogleCloudDocumentaiV1DocumentPageLine.validateJSON(item);
            };
        }
        if (data['paragraphs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['paragraphs'])) {
                throw new Error("Expected the field `paragraphs` to be an array in the JSON data but got " + data['paragraphs']);
            }
            // validate the optional field `paragraphs` (array)
            for (const item of data['paragraphs']) {
                GoogleCloudDocumentaiV1DocumentPageParagraph.validateJSON(item);
            };
        }
        // validate the optional field `provenance`
        if (data['provenance']) { // data not null
          GoogleCloudDocumentaiV1DocumentProvenance.validateJSON(data['provenance']);
        }
        if (data['symbols']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['symbols'])) {
                throw new Error("Expected the field `symbols` to be an array in the JSON data but got " + data['symbols']);
            }
            // validate the optional field `symbols` (array)
            for (const item of data['symbols']) {
                GoogleCloudDocumentaiV1DocumentPageSymbol.validateJSON(item);
            };
        }
        if (data['tables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tables'])) {
                throw new Error("Expected the field `tables` to be an array in the JSON data but got " + data['tables']);
            }
            // validate the optional field `tables` (array)
            for (const item of data['tables']) {
                GoogleCloudDocumentaiV1DocumentPageTable.validateJSON(item);
            };
        }
        if (data['tokens']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tokens'])) {
                throw new Error("Expected the field `tokens` to be an array in the JSON data but got " + data['tokens']);
            }
            // validate the optional field `tokens` (array)
            for (const item of data['tokens']) {
                GoogleCloudDocumentaiV1DocumentPageToken.validateJSON(item);
            };
        }
        if (data['transforms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transforms'])) {
                throw new Error("Expected the field `transforms` to be an array in the JSON data but got " + data['transforms']);
            }
            // validate the optional field `transforms` (array)
            for (const item of data['transforms']) {
                GoogleCloudDocumentaiV1DocumentPageMatrix.validateJSON(item);
            };
        }
        if (data['visualElements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['visualElements'])) {
                throw new Error("Expected the field `visualElements` to be an array in the JSON data but got " + data['visualElements']);
            }
            // validate the optional field `visualElements` (array)
            for (const item of data['visualElements']) {
                GoogleCloudDocumentaiV1DocumentPageVisualElement.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A list of visually detected text blocks on the page. A block has a set of lines (collected into paragraphs) that have a common line-spacing and orientation.
 * @member {Array.<module:model/GoogleCloudDocumentaiV1DocumentPageBlock>} blocks
 */
GoogleCloudDocumentaiV1DocumentPage.prototype['blocks'] = undefined;

/**
 * A list of detected barcodes.
 * @member {Array.<module:model/GoogleCloudDocumentaiV1DocumentPageDetectedBarcode>} detectedBarcodes
 */
GoogleCloudDocumentaiV1DocumentPage.prototype['detectedBarcodes'] = undefined;

/**
 * A list of detected languages together with confidence.
 * @member {Array.<module:model/GoogleCloudDocumentaiV1DocumentPageDetectedLanguage>} detectedLanguages
 */
GoogleCloudDocumentaiV1DocumentPage.prototype['detectedLanguages'] = undefined;

/**
 * @member {module:model/GoogleCloudDocumentaiV1DocumentPageDimension} dimension
 */
GoogleCloudDocumentaiV1DocumentPage.prototype['dimension'] = undefined;

/**
 * A list of visually detected form fields on the page.
 * @member {Array.<module:model/GoogleCloudDocumentaiV1DocumentPageFormField>} formFields
 */
GoogleCloudDocumentaiV1DocumentPage.prototype['formFields'] = undefined;

/**
 * @member {module:model/GoogleCloudDocumentaiV1DocumentPageImage} image
 */
GoogleCloudDocumentaiV1DocumentPage.prototype['image'] = undefined;

/**
 * @member {module:model/GoogleCloudDocumentaiV1DocumentPageImageQualityScores} imageQualityScores
 */
GoogleCloudDocumentaiV1DocumentPage.prototype['imageQualityScores'] = undefined;

/**
 * @member {module:model/GoogleCloudDocumentaiV1DocumentPageLayout} layout
 */
GoogleCloudDocumentaiV1DocumentPage.prototype['layout'] = undefined;

/**
 * A list of visually detected text lines on the page. A collection of tokens that a human would perceive as a line.
 * @member {Array.<module:model/GoogleCloudDocumentaiV1DocumentPageLine>} lines
 */
GoogleCloudDocumentaiV1DocumentPage.prototype['lines'] = undefined;

/**
 * 1-based index for current Page in a parent Document. Useful when a page is taken out of a Document for individual processing.
 * @member {Number} pageNumber
 */
GoogleCloudDocumentaiV1DocumentPage.prototype['pageNumber'] = undefined;

/**
 * A list of visually detected text paragraphs on the page. A collection of lines that a human would perceive as a paragraph.
 * @member {Array.<module:model/GoogleCloudDocumentaiV1DocumentPageParagraph>} paragraphs
 */
GoogleCloudDocumentaiV1DocumentPage.prototype['paragraphs'] = undefined;

/**
 * @member {module:model/GoogleCloudDocumentaiV1DocumentProvenance} provenance
 */
GoogleCloudDocumentaiV1DocumentPage.prototype['provenance'] = undefined;

/**
 * A list of visually detected symbols on the page.
 * @member {Array.<module:model/GoogleCloudDocumentaiV1DocumentPageSymbol>} symbols
 */
GoogleCloudDocumentaiV1DocumentPage.prototype['symbols'] = undefined;

/**
 * A list of visually detected tables on the page.
 * @member {Array.<module:model/GoogleCloudDocumentaiV1DocumentPageTable>} tables
 */
GoogleCloudDocumentaiV1DocumentPage.prototype['tables'] = undefined;

/**
 * A list of visually detected tokens on the page.
 * @member {Array.<module:model/GoogleCloudDocumentaiV1DocumentPageToken>} tokens
 */
GoogleCloudDocumentaiV1DocumentPage.prototype['tokens'] = undefined;

/**
 * Transformation matrices that were applied to the original document image to produce Page.image.
 * @member {Array.<module:model/GoogleCloudDocumentaiV1DocumentPageMatrix>} transforms
 */
GoogleCloudDocumentaiV1DocumentPage.prototype['transforms'] = undefined;

/**
 * A list of detected non-text visual elements e.g. checkbox, signature etc. on the page.
 * @member {Array.<module:model/GoogleCloudDocumentaiV1DocumentPageVisualElement>} visualElements
 */
GoogleCloudDocumentaiV1DocumentPage.prototype['visualElements'] = undefined;






export default GoogleCloudDocumentaiV1DocumentPage;

