/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleTypeColor from './GoogleTypeColor';

/**
 * The GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo model module.
 * @module model/GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo
 * @version v1
 */
class GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo {
    /**
     * Constructs a new <code>GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo</code>.
     * Font and other text style attributes.
     * @alias module:model/GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo
     */
    constructor() { 
        
        GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo} The populated <code>GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo();

            if (data.hasOwnProperty('backgroundColor')) {
                obj['backgroundColor'] = GoogleTypeColor.constructFromObject(data['backgroundColor']);
            }
            if (data.hasOwnProperty('bold')) {
                obj['bold'] = ApiClient.convertToType(data['bold'], 'Boolean');
            }
            if (data.hasOwnProperty('fontSize')) {
                obj['fontSize'] = ApiClient.convertToType(data['fontSize'], 'Number');
            }
            if (data.hasOwnProperty('fontType')) {
                obj['fontType'] = ApiClient.convertToType(data['fontType'], 'String');
            }
            if (data.hasOwnProperty('fontWeight')) {
                obj['fontWeight'] = ApiClient.convertToType(data['fontWeight'], 'Number');
            }
            if (data.hasOwnProperty('handwritten')) {
                obj['handwritten'] = ApiClient.convertToType(data['handwritten'], 'Boolean');
            }
            if (data.hasOwnProperty('italic')) {
                obj['italic'] = ApiClient.convertToType(data['italic'], 'Boolean');
            }
            if (data.hasOwnProperty('letterSpacing')) {
                obj['letterSpacing'] = ApiClient.convertToType(data['letterSpacing'], 'Number');
            }
            if (data.hasOwnProperty('pixelFontSize')) {
                obj['pixelFontSize'] = ApiClient.convertToType(data['pixelFontSize'], 'Number');
            }
            if (data.hasOwnProperty('smallcaps')) {
                obj['smallcaps'] = ApiClient.convertToType(data['smallcaps'], 'Boolean');
            }
            if (data.hasOwnProperty('strikeout')) {
                obj['strikeout'] = ApiClient.convertToType(data['strikeout'], 'Boolean');
            }
            if (data.hasOwnProperty('subscript')) {
                obj['subscript'] = ApiClient.convertToType(data['subscript'], 'Boolean');
            }
            if (data.hasOwnProperty('superscript')) {
                obj['superscript'] = ApiClient.convertToType(data['superscript'], 'Boolean');
            }
            if (data.hasOwnProperty('textColor')) {
                obj['textColor'] = GoogleTypeColor.constructFromObject(data['textColor']);
            }
            if (data.hasOwnProperty('underlined')) {
                obj['underlined'] = ApiClient.convertToType(data['underlined'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `backgroundColor`
        if (data['backgroundColor']) { // data not null
          GoogleTypeColor.validateJSON(data['backgroundColor']);
        }
        // ensure the json data is a string
        if (data['fontType'] && !(typeof data['fontType'] === 'string' || data['fontType'] instanceof String)) {
            throw new Error("Expected the field `fontType` to be a primitive type in the JSON string but got " + data['fontType']);
        }
        // validate the optional field `textColor`
        if (data['textColor']) { // data not null
          GoogleTypeColor.validateJSON(data['textColor']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleTypeColor} backgroundColor
 */
GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo.prototype['backgroundColor'] = undefined;

/**
 * Whether the text is bold (equivalent to font_weight is at least `700`).
 * @member {Boolean} bold
 */
GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo.prototype['bold'] = undefined;

/**
 * Font size in points (`1` point is `¹⁄₇₂` inches).
 * @member {Number} fontSize
 */
GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo.prototype['fontSize'] = undefined;

/**
 * Name or style of the font.
 * @member {String} fontType
 */
GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo.prototype['fontType'] = undefined;

/**
 * TrueType weight on a scale `100` (thin) to `1000` (ultra-heavy). Normal is `400`, bold is `700`.
 * @member {Number} fontWeight
 */
GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo.prototype['fontWeight'] = undefined;

/**
 * Whether the text is handwritten.
 * @member {Boolean} handwritten
 */
GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo.prototype['handwritten'] = undefined;

/**
 * Whether the text is italic.
 * @member {Boolean} italic
 */
GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo.prototype['italic'] = undefined;

/**
 * Letter spacing in points.
 * @member {Number} letterSpacing
 */
GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo.prototype['letterSpacing'] = undefined;

/**
 * Font size in pixels, equal to _unrounded font_size_ * _resolution_ ÷ `72.0`.
 * @member {Number} pixelFontSize
 */
GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo.prototype['pixelFontSize'] = undefined;

/**
 * Whether the text is in small caps.
 * @member {Boolean} smallcaps
 */
GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo.prototype['smallcaps'] = undefined;

/**
 * Whether the text is strikethrough.
 * @member {Boolean} strikeout
 */
GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo.prototype['strikeout'] = undefined;

/**
 * Whether the text is a subscript.
 * @member {Boolean} subscript
 */
GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo.prototype['subscript'] = undefined;

/**
 * Whether the text is a superscript.
 * @member {Boolean} superscript
 */
GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo.prototype['superscript'] = undefined;

/**
 * @member {module:model/GoogleTypeColor} textColor
 */
GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo.prototype['textColor'] = undefined;

/**
 * Whether the text is underlined.
 * @member {Boolean} underlined
 */
GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo.prototype['underlined'] = undefined;






export default GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo;

