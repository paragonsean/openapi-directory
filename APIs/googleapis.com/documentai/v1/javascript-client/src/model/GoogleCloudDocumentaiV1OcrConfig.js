/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDocumentaiV1OcrConfigHints from './GoogleCloudDocumentaiV1OcrConfigHints';
import GoogleCloudDocumentaiV1OcrConfigPremiumFeatures from './GoogleCloudDocumentaiV1OcrConfigPremiumFeatures';

/**
 * The GoogleCloudDocumentaiV1OcrConfig model module.
 * @module model/GoogleCloudDocumentaiV1OcrConfig
 * @version v1
 */
class GoogleCloudDocumentaiV1OcrConfig {
    /**
     * Constructs a new <code>GoogleCloudDocumentaiV1OcrConfig</code>.
     * Config for Document OCR.
     * @alias module:model/GoogleCloudDocumentaiV1OcrConfig
     */
    constructor() { 
        
        GoogleCloudDocumentaiV1OcrConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDocumentaiV1OcrConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDocumentaiV1OcrConfig} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDocumentaiV1OcrConfig} The populated <code>GoogleCloudDocumentaiV1OcrConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDocumentaiV1OcrConfig();

            if (data.hasOwnProperty('advancedOcrOptions')) {
                obj['advancedOcrOptions'] = ApiClient.convertToType(data['advancedOcrOptions'], ['String']);
            }
            if (data.hasOwnProperty('computeStyleInfo')) {
                obj['computeStyleInfo'] = ApiClient.convertToType(data['computeStyleInfo'], 'Boolean');
            }
            if (data.hasOwnProperty('disableCharacterBoxesDetection')) {
                obj['disableCharacterBoxesDetection'] = ApiClient.convertToType(data['disableCharacterBoxesDetection'], 'Boolean');
            }
            if (data.hasOwnProperty('enableImageQualityScores')) {
                obj['enableImageQualityScores'] = ApiClient.convertToType(data['enableImageQualityScores'], 'Boolean');
            }
            if (data.hasOwnProperty('enableNativePdfParsing')) {
                obj['enableNativePdfParsing'] = ApiClient.convertToType(data['enableNativePdfParsing'], 'Boolean');
            }
            if (data.hasOwnProperty('enableSymbol')) {
                obj['enableSymbol'] = ApiClient.convertToType(data['enableSymbol'], 'Boolean');
            }
            if (data.hasOwnProperty('hints')) {
                obj['hints'] = GoogleCloudDocumentaiV1OcrConfigHints.constructFromObject(data['hints']);
            }
            if (data.hasOwnProperty('premiumFeatures')) {
                obj['premiumFeatures'] = GoogleCloudDocumentaiV1OcrConfigPremiumFeatures.constructFromObject(data['premiumFeatures']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDocumentaiV1OcrConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDocumentaiV1OcrConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['advancedOcrOptions'])) {
            throw new Error("Expected the field `advancedOcrOptions` to be an array in the JSON data but got " + data['advancedOcrOptions']);
        }
        // validate the optional field `hints`
        if (data['hints']) { // data not null
          GoogleCloudDocumentaiV1OcrConfigHints.validateJSON(data['hints']);
        }
        // validate the optional field `premiumFeatures`
        if (data['premiumFeatures']) { // data not null
          GoogleCloudDocumentaiV1OcrConfigPremiumFeatures.validateJSON(data['premiumFeatures']);
        }

        return true;
    }


}



/**
 * A list of advanced OCR options to further fine-tune OCR behavior. Current valid values are: - `legacy_layout`: a heuristics layout detection algorithm, which serves as an alternative to the current ML-based layout detection algorithm. Customers can choose the best suitable layout algorithm based on their situation.
 * @member {Array.<String>} advancedOcrOptions
 */
GoogleCloudDocumentaiV1OcrConfig.prototype['advancedOcrOptions'] = undefined;

/**
 * Turn on font identification model and return font style information. Deprecated, use PremiumFeatures.compute_style_info instead.
 * @member {Boolean} computeStyleInfo
 */
GoogleCloudDocumentaiV1OcrConfig.prototype['computeStyleInfo'] = undefined;

/**
 * Turn off character box detector in OCR engine. Character box detection is enabled by default in OCR 2.0 (and later) processors.
 * @member {Boolean} disableCharacterBoxesDetection
 */
GoogleCloudDocumentaiV1OcrConfig.prototype['disableCharacterBoxesDetection'] = undefined;

/**
 * Enables intelligent document quality scores after OCR. Can help with diagnosing why OCR responses are of poor quality for a given input. Adds additional latency comparable to regular OCR to the process call.
 * @member {Boolean} enableImageQualityScores
 */
GoogleCloudDocumentaiV1OcrConfig.prototype['enableImageQualityScores'] = undefined;

/**
 * Enables special handling for PDFs with existing text information. Results in better text extraction quality in such PDF inputs.
 * @member {Boolean} enableNativePdfParsing
 */
GoogleCloudDocumentaiV1OcrConfig.prototype['enableNativePdfParsing'] = undefined;

/**
 * Includes symbol level OCR information if set to true.
 * @member {Boolean} enableSymbol
 */
GoogleCloudDocumentaiV1OcrConfig.prototype['enableSymbol'] = undefined;

/**
 * @member {module:model/GoogleCloudDocumentaiV1OcrConfigHints} hints
 */
GoogleCloudDocumentaiV1OcrConfig.prototype['hints'] = undefined;

/**
 * @member {module:model/GoogleCloudDocumentaiV1OcrConfigPremiumFeatures} premiumFeatures
 */
GoogleCloudDocumentaiV1OcrConfig.prototype['premiumFeatures'] = undefined;






export default GoogleCloudDocumentaiV1OcrConfig;

