/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDocumentaiV1DocumentSchemaEntityType from './GoogleCloudDocumentaiV1DocumentSchemaEntityType';
import GoogleCloudDocumentaiV1DocumentSchemaMetadata from './GoogleCloudDocumentaiV1DocumentSchemaMetadata';

/**
 * The GoogleCloudDocumentaiV1DocumentSchema model module.
 * @module model/GoogleCloudDocumentaiV1DocumentSchema
 * @version v1
 */
class GoogleCloudDocumentaiV1DocumentSchema {
    /**
     * Constructs a new <code>GoogleCloudDocumentaiV1DocumentSchema</code>.
     * The schema defines the output of the processed document by a processor.
     * @alias module:model/GoogleCloudDocumentaiV1DocumentSchema
     */
    constructor() { 
        
        GoogleCloudDocumentaiV1DocumentSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDocumentaiV1DocumentSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDocumentaiV1DocumentSchema} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDocumentaiV1DocumentSchema} The populated <code>GoogleCloudDocumentaiV1DocumentSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDocumentaiV1DocumentSchema();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('entityTypes')) {
                obj['entityTypes'] = ApiClient.convertToType(data['entityTypes'], [GoogleCloudDocumentaiV1DocumentSchemaEntityType]);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = GoogleCloudDocumentaiV1DocumentSchemaMetadata.constructFromObject(data['metadata']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDocumentaiV1DocumentSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDocumentaiV1DocumentSchema</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['entityTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entityTypes'])) {
                throw new Error("Expected the field `entityTypes` to be an array in the JSON data but got " + data['entityTypes']);
            }
            // validate the optional field `entityTypes` (array)
            for (const item of data['entityTypes']) {
                GoogleCloudDocumentaiV1DocumentSchemaEntityType.validateJSON(item);
            };
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          GoogleCloudDocumentaiV1DocumentSchemaMetadata.validateJSON(data['metadata']);
        }

        return true;
    }


}



/**
 * Description of the schema.
 * @member {String} description
 */
GoogleCloudDocumentaiV1DocumentSchema.prototype['description'] = undefined;

/**
 * Display name to show to users.
 * @member {String} displayName
 */
GoogleCloudDocumentaiV1DocumentSchema.prototype['displayName'] = undefined;

/**
 * Entity types of the schema.
 * @member {Array.<module:model/GoogleCloudDocumentaiV1DocumentSchemaEntityType>} entityTypes
 */
GoogleCloudDocumentaiV1DocumentSchema.prototype['entityTypes'] = undefined;

/**
 * @member {module:model/GoogleCloudDocumentaiV1DocumentSchemaMetadata} metadata
 */
GoogleCloudDocumentaiV1DocumentSchema.prototype['metadata'] = undefined;






export default GoogleCloudDocumentaiV1DocumentSchema;

