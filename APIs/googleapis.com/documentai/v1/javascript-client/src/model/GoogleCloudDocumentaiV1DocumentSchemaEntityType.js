/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDocumentaiV1DocumentSchemaEntityTypeEnumValues from './GoogleCloudDocumentaiV1DocumentSchemaEntityTypeEnumValues';
import GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty from './GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty';

/**
 * The GoogleCloudDocumentaiV1DocumentSchemaEntityType model module.
 * @module model/GoogleCloudDocumentaiV1DocumentSchemaEntityType
 * @version v1
 */
class GoogleCloudDocumentaiV1DocumentSchemaEntityType {
    /**
     * Constructs a new <code>GoogleCloudDocumentaiV1DocumentSchemaEntityType</code>.
     * EntityType is the wrapper of a label of the corresponding model with detailed attributes and limitations for entity-based processors. Multiple types can also compose a dependency tree to represent nested types.
     * @alias module:model/GoogleCloudDocumentaiV1DocumentSchemaEntityType
     */
    constructor() { 
        
        GoogleCloudDocumentaiV1DocumentSchemaEntityType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDocumentaiV1DocumentSchemaEntityType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDocumentaiV1DocumentSchemaEntityType} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDocumentaiV1DocumentSchemaEntityType} The populated <code>GoogleCloudDocumentaiV1DocumentSchemaEntityType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDocumentaiV1DocumentSchemaEntityType();

            if (data.hasOwnProperty('baseTypes')) {
                obj['baseTypes'] = ApiClient.convertToType(data['baseTypes'], ['String']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('enumValues')) {
                obj['enumValues'] = GoogleCloudDocumentaiV1DocumentSchemaEntityTypeEnumValues.constructFromObject(data['enumValues']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], [GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDocumentaiV1DocumentSchemaEntityType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDocumentaiV1DocumentSchemaEntityType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['baseTypes'])) {
            throw new Error("Expected the field `baseTypes` to be an array in the JSON data but got " + data['baseTypes']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `enumValues`
        if (data['enumValues']) { // data not null
          GoogleCloudDocumentaiV1DocumentSchemaEntityTypeEnumValues.validateJSON(data['enumValues']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['properties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['properties'])) {
                throw new Error("Expected the field `properties` to be an array in the JSON data but got " + data['properties']);
            }
            // validate the optional field `properties` (array)
            for (const item of data['properties']) {
                GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The entity type that this type is derived from. For now, one and only one should be set.
 * @member {Array.<String>} baseTypes
 */
GoogleCloudDocumentaiV1DocumentSchemaEntityType.prototype['baseTypes'] = undefined;

/**
 * User defined name for the type.
 * @member {String} displayName
 */
GoogleCloudDocumentaiV1DocumentSchemaEntityType.prototype['displayName'] = undefined;

/**
 * @member {module:model/GoogleCloudDocumentaiV1DocumentSchemaEntityTypeEnumValues} enumValues
 */
GoogleCloudDocumentaiV1DocumentSchemaEntityType.prototype['enumValues'] = undefined;

/**
 * Name of the type. It must be unique within the schema file and cannot be a \"Common Type\". The following naming conventions are used: - Use `snake_casing`. - Name matching is case-sensitive. - Maximum 64 characters. - Must start with a letter. - Allowed characters: ASCII letters `[a-z0-9_-]`. (For backward compatibility internal infrastructure and tooling can handle any ascii character.) - The `/` is sometimes used to denote a property of a type. For example `line_item/amount`. This convention is deprecated, but will still be honored for backward compatibility.
 * @member {String} name
 */
GoogleCloudDocumentaiV1DocumentSchemaEntityType.prototype['name'] = undefined;

/**
 * Description the nested structure, or composition of an entity.
 * @member {Array.<module:model/GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty>} properties
 */
GoogleCloudDocumentaiV1DocumentSchemaEntityType.prototype['properties'] = undefined;






export default GoogleCloudDocumentaiV1DocumentSchemaEntityType;

