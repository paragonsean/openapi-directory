/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDocumentaiV1beta1DocumentEntityNormalizedValue from './GoogleCloudDocumentaiV1beta1DocumentEntityNormalizedValue';
import GoogleCloudDocumentaiV1beta1DocumentPageAnchor from './GoogleCloudDocumentaiV1beta1DocumentPageAnchor';
import GoogleCloudDocumentaiV1beta1DocumentProvenance from './GoogleCloudDocumentaiV1beta1DocumentProvenance';
import GoogleCloudDocumentaiV1beta1DocumentTextAnchor from './GoogleCloudDocumentaiV1beta1DocumentTextAnchor';

/**
 * The GoogleCloudDocumentaiV1beta1DocumentEntity model module.
 * @module model/GoogleCloudDocumentaiV1beta1DocumentEntity
 * @version v1
 */
class GoogleCloudDocumentaiV1beta1DocumentEntity {
    /**
     * Constructs a new <code>GoogleCloudDocumentaiV1beta1DocumentEntity</code>.
     * An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.
     * @alias module:model/GoogleCloudDocumentaiV1beta1DocumentEntity
     */
    constructor() { 
        
        GoogleCloudDocumentaiV1beta1DocumentEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDocumentaiV1beta1DocumentEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDocumentaiV1beta1DocumentEntity} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDocumentaiV1beta1DocumentEntity} The populated <code>GoogleCloudDocumentaiV1beta1DocumentEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDocumentaiV1beta1DocumentEntity();

            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('mentionId')) {
                obj['mentionId'] = ApiClient.convertToType(data['mentionId'], 'String');
            }
            if (data.hasOwnProperty('mentionText')) {
                obj['mentionText'] = ApiClient.convertToType(data['mentionText'], 'String');
            }
            if (data.hasOwnProperty('normalizedValue')) {
                obj['normalizedValue'] = GoogleCloudDocumentaiV1beta1DocumentEntityNormalizedValue.constructFromObject(data['normalizedValue']);
            }
            if (data.hasOwnProperty('pageAnchor')) {
                obj['pageAnchor'] = GoogleCloudDocumentaiV1beta1DocumentPageAnchor.constructFromObject(data['pageAnchor']);
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], [GoogleCloudDocumentaiV1beta1DocumentEntity]);
            }
            if (data.hasOwnProperty('provenance')) {
                obj['provenance'] = GoogleCloudDocumentaiV1beta1DocumentProvenance.constructFromObject(data['provenance']);
            }
            if (data.hasOwnProperty('redacted')) {
                obj['redacted'] = ApiClient.convertToType(data['redacted'], 'Boolean');
            }
            if (data.hasOwnProperty('textAnchor')) {
                obj['textAnchor'] = GoogleCloudDocumentaiV1beta1DocumentTextAnchor.constructFromObject(data['textAnchor']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDocumentaiV1beta1DocumentEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDocumentaiV1beta1DocumentEntity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['mentionId'] && !(typeof data['mentionId'] === 'string' || data['mentionId'] instanceof String)) {
            throw new Error("Expected the field `mentionId` to be a primitive type in the JSON string but got " + data['mentionId']);
        }
        // ensure the json data is a string
        if (data['mentionText'] && !(typeof data['mentionText'] === 'string' || data['mentionText'] instanceof String)) {
            throw new Error("Expected the field `mentionText` to be a primitive type in the JSON string but got " + data['mentionText']);
        }
        // validate the optional field `normalizedValue`
        if (data['normalizedValue']) { // data not null
          GoogleCloudDocumentaiV1beta1DocumentEntityNormalizedValue.validateJSON(data['normalizedValue']);
        }
        // validate the optional field `pageAnchor`
        if (data['pageAnchor']) { // data not null
          GoogleCloudDocumentaiV1beta1DocumentPageAnchor.validateJSON(data['pageAnchor']);
        }
        if (data['properties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['properties'])) {
                throw new Error("Expected the field `properties` to be an array in the JSON data but got " + data['properties']);
            }
            // validate the optional field `properties` (array)
            for (const item of data['properties']) {
                GoogleCloudDocumentaiV1beta1DocumentEntity.validateJSON(item);
            };
        }
        // validate the optional field `provenance`
        if (data['provenance']) { // data not null
          GoogleCloudDocumentaiV1beta1DocumentProvenance.validateJSON(data['provenance']);
        }
        // validate the optional field `textAnchor`
        if (data['textAnchor']) { // data not null
          GoogleCloudDocumentaiV1beta1DocumentTextAnchor.validateJSON(data['textAnchor']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Optional. Confidence of detected Schema entity. Range `[0, 1]`.
 * @member {Number} confidence
 */
GoogleCloudDocumentaiV1beta1DocumentEntity.prototype['confidence'] = undefined;

/**
 * Optional. Canonical id. This will be a unique value in the entity list for this document.
 * @member {String} id
 */
GoogleCloudDocumentaiV1beta1DocumentEntity.prototype['id'] = undefined;

/**
 * Optional. Deprecated. Use `id` field instead.
 * @member {String} mentionId
 */
GoogleCloudDocumentaiV1beta1DocumentEntity.prototype['mentionId'] = undefined;

/**
 * Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.
 * @member {String} mentionText
 */
GoogleCloudDocumentaiV1beta1DocumentEntity.prototype['mentionText'] = undefined;

/**
 * @member {module:model/GoogleCloudDocumentaiV1beta1DocumentEntityNormalizedValue} normalizedValue
 */
GoogleCloudDocumentaiV1beta1DocumentEntity.prototype['normalizedValue'] = undefined;

/**
 * @member {module:model/GoogleCloudDocumentaiV1beta1DocumentPageAnchor} pageAnchor
 */
GoogleCloudDocumentaiV1beta1DocumentEntity.prototype['pageAnchor'] = undefined;

/**
 * Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.
 * @member {Array.<module:model/GoogleCloudDocumentaiV1beta1DocumentEntity>} properties
 */
GoogleCloudDocumentaiV1beta1DocumentEntity.prototype['properties'] = undefined;

/**
 * @member {module:model/GoogleCloudDocumentaiV1beta1DocumentProvenance} provenance
 */
GoogleCloudDocumentaiV1beta1DocumentEntity.prototype['provenance'] = undefined;

/**
 * Optional. Whether the entity will be redacted for de-identification purposes.
 * @member {Boolean} redacted
 */
GoogleCloudDocumentaiV1beta1DocumentEntity.prototype['redacted'] = undefined;

/**
 * @member {module:model/GoogleCloudDocumentaiV1beta1DocumentTextAnchor} textAnchor
 */
GoogleCloudDocumentaiV1beta1DocumentEntity.prototype['textAnchor'] = undefined;

/**
 * Required. Entity type from a schema e.g. `Address`.
 * @member {String} type
 */
GoogleCloudDocumentaiV1beta1DocumentEntity.prototype['type'] = undefined;






export default GoogleCloudDocumentaiV1beta1DocumentEntity;

