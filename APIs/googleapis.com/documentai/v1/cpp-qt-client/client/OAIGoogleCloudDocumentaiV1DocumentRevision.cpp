/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1DocumentRevision.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1DocumentRevision::OAIGoogleCloudDocumentaiV1DocumentRevision(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1DocumentRevision::OAIGoogleCloudDocumentaiV1DocumentRevision() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1DocumentRevision::~OAIGoogleCloudDocumentaiV1DocumentRevision() {}

void OAIGoogleCloudDocumentaiV1DocumentRevision::initializeModel() {

    m_agent_isSet = false;
    m_agent_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_human_review_isSet = false;
    m_human_review_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_parent_ids_isSet = false;
    m_parent_ids_isValid = false;

    m_processor_isSet = false;
    m_processor_isValid = false;
}

void OAIGoogleCloudDocumentaiV1DocumentRevision::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1DocumentRevision::fromJsonObject(QJsonObject json) {

    m_agent_isValid = ::OpenAPI::fromJsonValue(m_agent, json[QString("agent")]);
    m_agent_isSet = !json[QString("agent")].isNull() && m_agent_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_human_review_isValid = ::OpenAPI::fromJsonValue(m_human_review, json[QString("humanReview")]);
    m_human_review_isSet = !json[QString("humanReview")].isNull() && m_human_review_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_parent_ids_isValid = ::OpenAPI::fromJsonValue(m_parent_ids, json[QString("parentIds")]);
    m_parent_ids_isSet = !json[QString("parentIds")].isNull() && m_parent_ids_isValid;

    m_processor_isValid = ::OpenAPI::fromJsonValue(m_processor, json[QString("processor")]);
    m_processor_isSet = !json[QString("processor")].isNull() && m_processor_isValid;
}

QString OAIGoogleCloudDocumentaiV1DocumentRevision::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1DocumentRevision::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_isSet) {
        obj.insert(QString("agent"), ::OpenAPI::toJsonValue(m_agent));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_human_review.isSet()) {
        obj.insert(QString("humanReview"), ::OpenAPI::toJsonValue(m_human_review));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_parent.size() > 0) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_parent_ids.size() > 0) {
        obj.insert(QString("parentIds"), ::OpenAPI::toJsonValue(m_parent_ids));
    }
    if (m_processor_isSet) {
        obj.insert(QString("processor"), ::OpenAPI::toJsonValue(m_processor));
    }
    return obj;
}

QString OAIGoogleCloudDocumentaiV1DocumentRevision::getAgent() const {
    return m_agent;
}
void OAIGoogleCloudDocumentaiV1DocumentRevision::setAgent(const QString &agent) {
    m_agent = agent;
    m_agent_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1DocumentRevision::is_agent_Set() const{
    return m_agent_isSet;
}

bool OAIGoogleCloudDocumentaiV1DocumentRevision::is_agent_Valid() const{
    return m_agent_isValid;
}

QString OAIGoogleCloudDocumentaiV1DocumentRevision::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudDocumentaiV1DocumentRevision::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1DocumentRevision::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudDocumentaiV1DocumentRevision::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIGoogleCloudDocumentaiV1DocumentRevisionHumanReview OAIGoogleCloudDocumentaiV1DocumentRevision::getHumanReview() const {
    return m_human_review;
}
void OAIGoogleCloudDocumentaiV1DocumentRevision::setHumanReview(const OAIGoogleCloudDocumentaiV1DocumentRevisionHumanReview &human_review) {
    m_human_review = human_review;
    m_human_review_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1DocumentRevision::is_human_review_Set() const{
    return m_human_review_isSet;
}

bool OAIGoogleCloudDocumentaiV1DocumentRevision::is_human_review_Valid() const{
    return m_human_review_isValid;
}

QString OAIGoogleCloudDocumentaiV1DocumentRevision::getId() const {
    return m_id;
}
void OAIGoogleCloudDocumentaiV1DocumentRevision::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1DocumentRevision::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGoogleCloudDocumentaiV1DocumentRevision::is_id_Valid() const{
    return m_id_isValid;
}

QList<qint32> OAIGoogleCloudDocumentaiV1DocumentRevision::getParent() const {
    return m_parent;
}
void OAIGoogleCloudDocumentaiV1DocumentRevision::setParent(const QList<qint32> &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1DocumentRevision::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIGoogleCloudDocumentaiV1DocumentRevision::is_parent_Valid() const{
    return m_parent_isValid;
}

QList<QString> OAIGoogleCloudDocumentaiV1DocumentRevision::getParentIds() const {
    return m_parent_ids;
}
void OAIGoogleCloudDocumentaiV1DocumentRevision::setParentIds(const QList<QString> &parent_ids) {
    m_parent_ids = parent_ids;
    m_parent_ids_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1DocumentRevision::is_parent_ids_Set() const{
    return m_parent_ids_isSet;
}

bool OAIGoogleCloudDocumentaiV1DocumentRevision::is_parent_ids_Valid() const{
    return m_parent_ids_isValid;
}

QString OAIGoogleCloudDocumentaiV1DocumentRevision::getProcessor() const {
    return m_processor;
}
void OAIGoogleCloudDocumentaiV1DocumentRevision::setProcessor(const QString &processor) {
    m_processor = processor;
    m_processor_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1DocumentRevision::is_processor_Set() const{
    return m_processor_isSet;
}

bool OAIGoogleCloudDocumentaiV1DocumentRevision::is_processor_Valid() const{
    return m_processor_isValid;
}

bool OAIGoogleCloudDocumentaiV1DocumentRevision::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_human_review.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_processor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1DocumentRevision::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
