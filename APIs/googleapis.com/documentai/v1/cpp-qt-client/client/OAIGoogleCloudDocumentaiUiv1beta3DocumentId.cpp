/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiUiv1beta3DocumentId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiUiv1beta3DocumentId::OAIGoogleCloudDocumentaiUiv1beta3DocumentId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiUiv1beta3DocumentId::OAIGoogleCloudDocumentaiUiv1beta3DocumentId() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiUiv1beta3DocumentId::~OAIGoogleCloudDocumentaiUiv1beta3DocumentId() {}

void OAIGoogleCloudDocumentaiUiv1beta3DocumentId::initializeModel() {

    m_gcs_managed_doc_id_isSet = false;
    m_gcs_managed_doc_id_isValid = false;

    m_revision_ref_isSet = false;
    m_revision_ref_isValid = false;

    m_unmanaged_doc_id_isSet = false;
    m_unmanaged_doc_id_isValid = false;
}

void OAIGoogleCloudDocumentaiUiv1beta3DocumentId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiUiv1beta3DocumentId::fromJsonObject(QJsonObject json) {

    m_gcs_managed_doc_id_isValid = ::OpenAPI::fromJsonValue(m_gcs_managed_doc_id, json[QString("gcsManagedDocId")]);
    m_gcs_managed_doc_id_isSet = !json[QString("gcsManagedDocId")].isNull() && m_gcs_managed_doc_id_isValid;

    m_revision_ref_isValid = ::OpenAPI::fromJsonValue(m_revision_ref, json[QString("revisionRef")]);
    m_revision_ref_isSet = !json[QString("revisionRef")].isNull() && m_revision_ref_isValid;

    m_unmanaged_doc_id_isValid = ::OpenAPI::fromJsonValue(m_unmanaged_doc_id, json[QString("unmanagedDocId")]);
    m_unmanaged_doc_id_isSet = !json[QString("unmanagedDocId")].isNull() && m_unmanaged_doc_id_isValid;
}

QString OAIGoogleCloudDocumentaiUiv1beta3DocumentId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiUiv1beta3DocumentId::asJsonObject() const {
    QJsonObject obj;
    if (m_gcs_managed_doc_id.isSet()) {
        obj.insert(QString("gcsManagedDocId"), ::OpenAPI::toJsonValue(m_gcs_managed_doc_id));
    }
    if (m_revision_ref.isSet()) {
        obj.insert(QString("revisionRef"), ::OpenAPI::toJsonValue(m_revision_ref));
    }
    if (m_unmanaged_doc_id.isSet()) {
        obj.insert(QString("unmanagedDocId"), ::OpenAPI::toJsonValue(m_unmanaged_doc_id));
    }
    return obj;
}

OAIGoogleCloudDocumentaiUiv1beta3DocumentIdGCSManagedDocumentId OAIGoogleCloudDocumentaiUiv1beta3DocumentId::getGcsManagedDocId() const {
    return m_gcs_managed_doc_id;
}
void OAIGoogleCloudDocumentaiUiv1beta3DocumentId::setGcsManagedDocId(const OAIGoogleCloudDocumentaiUiv1beta3DocumentIdGCSManagedDocumentId &gcs_managed_doc_id) {
    m_gcs_managed_doc_id = gcs_managed_doc_id;
    m_gcs_managed_doc_id_isSet = true;
}

bool OAIGoogleCloudDocumentaiUiv1beta3DocumentId::is_gcs_managed_doc_id_Set() const{
    return m_gcs_managed_doc_id_isSet;
}

bool OAIGoogleCloudDocumentaiUiv1beta3DocumentId::is_gcs_managed_doc_id_Valid() const{
    return m_gcs_managed_doc_id_isValid;
}

OAIGoogleCloudDocumentaiUiv1beta3RevisionRef OAIGoogleCloudDocumentaiUiv1beta3DocumentId::getRevisionRef() const {
    return m_revision_ref;
}
void OAIGoogleCloudDocumentaiUiv1beta3DocumentId::setRevisionRef(const OAIGoogleCloudDocumentaiUiv1beta3RevisionRef &revision_ref) {
    m_revision_ref = revision_ref;
    m_revision_ref_isSet = true;
}

bool OAIGoogleCloudDocumentaiUiv1beta3DocumentId::is_revision_ref_Set() const{
    return m_revision_ref_isSet;
}

bool OAIGoogleCloudDocumentaiUiv1beta3DocumentId::is_revision_ref_Valid() const{
    return m_revision_ref_isValid;
}

OAIGoogleCloudDocumentaiUiv1beta3DocumentIdUnmanagedDocumentId OAIGoogleCloudDocumentaiUiv1beta3DocumentId::getUnmanagedDocId() const {
    return m_unmanaged_doc_id;
}
void OAIGoogleCloudDocumentaiUiv1beta3DocumentId::setUnmanagedDocId(const OAIGoogleCloudDocumentaiUiv1beta3DocumentIdUnmanagedDocumentId &unmanaged_doc_id) {
    m_unmanaged_doc_id = unmanaged_doc_id;
    m_unmanaged_doc_id_isSet = true;
}

bool OAIGoogleCloudDocumentaiUiv1beta3DocumentId::is_unmanaged_doc_id_Set() const{
    return m_unmanaged_doc_id_isSet;
}

bool OAIGoogleCloudDocumentaiUiv1beta3DocumentId::is_unmanaged_doc_id_Valid() const{
    return m_unmanaged_doc_id_isValid;
}

bool OAIGoogleCloudDocumentaiUiv1beta3DocumentId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gcs_managed_doc_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unmanaged_doc_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiUiv1beta3DocumentId::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
