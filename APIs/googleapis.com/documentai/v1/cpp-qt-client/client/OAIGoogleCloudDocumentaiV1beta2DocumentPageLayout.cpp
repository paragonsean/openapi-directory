/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::~OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout() {}

void OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::initializeModel() {

    m_bounding_poly_isSet = false;
    m_bounding_poly_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_orientation_isSet = false;
    m_orientation_isValid = false;

    m_text_anchor_isSet = false;
    m_text_anchor_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::fromJsonObject(QJsonObject json) {

    m_bounding_poly_isValid = ::OpenAPI::fromJsonValue(m_bounding_poly, json[QString("boundingPoly")]);
    m_bounding_poly_isSet = !json[QString("boundingPoly")].isNull() && m_bounding_poly_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_orientation_isValid = ::OpenAPI::fromJsonValue(m_orientation, json[QString("orientation")]);
    m_orientation_isSet = !json[QString("orientation")].isNull() && m_orientation_isValid;

    m_text_anchor_isValid = ::OpenAPI::fromJsonValue(m_text_anchor, json[QString("textAnchor")]);
    m_text_anchor_isSet = !json[QString("textAnchor")].isNull() && m_text_anchor_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::asJsonObject() const {
    QJsonObject obj;
    if (m_bounding_poly.isSet()) {
        obj.insert(QString("boundingPoly"), ::OpenAPI::toJsonValue(m_bounding_poly));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_orientation_isSet) {
        obj.insert(QString("orientation"), ::OpenAPI::toJsonValue(m_orientation));
    }
    if (m_text_anchor.isSet()) {
        obj.insert(QString("textAnchor"), ::OpenAPI::toJsonValue(m_text_anchor));
    }
    return obj;
}

OAIGoogleCloudDocumentaiV1beta2BoundingPoly OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::getBoundingPoly() const {
    return m_bounding_poly;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::setBoundingPoly(const OAIGoogleCloudDocumentaiV1beta2BoundingPoly &bounding_poly) {
    m_bounding_poly = bounding_poly;
    m_bounding_poly_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::is_bounding_poly_Set() const{
    return m_bounding_poly_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::is_bounding_poly_Valid() const{
    return m_bounding_poly_isValid;
}

float OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::getConfidence() const {
    return m_confidence;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::setConfidence(const float &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::getOrientation() const {
    return m_orientation;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::setOrientation(const QString &orientation) {
    m_orientation = orientation;
    m_orientation_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::is_orientation_Set() const{
    return m_orientation_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::is_orientation_Valid() const{
    return m_orientation_isValid;
}

OAIGoogleCloudDocumentaiV1beta2DocumentTextAnchor OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::getTextAnchor() const {
    return m_text_anchor;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::setTextAnchor(const OAIGoogleCloudDocumentaiV1beta2DocumentTextAnchor &text_anchor) {
    m_text_anchor = text_anchor;
    m_text_anchor_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::is_text_anchor_Set() const{
    return m_text_anchor_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::is_text_anchor_Valid() const{
    return m_text_anchor_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounding_poly.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orientation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_anchor.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageLayout::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
