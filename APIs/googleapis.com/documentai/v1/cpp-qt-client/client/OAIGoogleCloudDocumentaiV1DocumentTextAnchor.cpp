/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1DocumentTextAnchor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1DocumentTextAnchor::OAIGoogleCloudDocumentaiV1DocumentTextAnchor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1DocumentTextAnchor::OAIGoogleCloudDocumentaiV1DocumentTextAnchor() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1DocumentTextAnchor::~OAIGoogleCloudDocumentaiV1DocumentTextAnchor() {}

void OAIGoogleCloudDocumentaiV1DocumentTextAnchor::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_text_segments_isSet = false;
    m_text_segments_isValid = false;
}

void OAIGoogleCloudDocumentaiV1DocumentTextAnchor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1DocumentTextAnchor::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_text_segments_isValid = ::OpenAPI::fromJsonValue(m_text_segments, json[QString("textSegments")]);
    m_text_segments_isSet = !json[QString("textSegments")].isNull() && m_text_segments_isValid;
}

QString OAIGoogleCloudDocumentaiV1DocumentTextAnchor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1DocumentTextAnchor::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_text_segments.size() > 0) {
        obj.insert(QString("textSegments"), ::OpenAPI::toJsonValue(m_text_segments));
    }
    return obj;
}

QString OAIGoogleCloudDocumentaiV1DocumentTextAnchor::getContent() const {
    return m_content;
}
void OAIGoogleCloudDocumentaiV1DocumentTextAnchor::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1DocumentTextAnchor::is_content_Set() const{
    return m_content_isSet;
}

bool OAIGoogleCloudDocumentaiV1DocumentTextAnchor::is_content_Valid() const{
    return m_content_isValid;
}

QList<OAIGoogleCloudDocumentaiV1DocumentTextAnchorTextSegment> OAIGoogleCloudDocumentaiV1DocumentTextAnchor::getTextSegments() const {
    return m_text_segments;
}
void OAIGoogleCloudDocumentaiV1DocumentTextAnchor::setTextSegments(const QList<OAIGoogleCloudDocumentaiV1DocumentTextAnchorTextSegment> &text_segments) {
    m_text_segments = text_segments;
    m_text_segments_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1DocumentTextAnchor::is_text_segments_Set() const{
    return m_text_segments_isSet;
}

bool OAIGoogleCloudDocumentaiV1DocumentTextAnchor::is_text_segments_Valid() const{
    return m_text_segments_isValid;
}

bool OAIGoogleCloudDocumentaiV1DocumentTextAnchor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_segments.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1DocumentTextAnchor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
