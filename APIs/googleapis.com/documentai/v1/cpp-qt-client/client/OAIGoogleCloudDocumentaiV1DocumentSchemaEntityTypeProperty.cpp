/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::~OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty() {}

void OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_occurrence_type_isSet = false;
    m_occurrence_type_isValid = false;

    m_value_type_isSet = false;
    m_value_type_isValid = false;
}

void OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_occurrence_type_isValid = ::OpenAPI::fromJsonValue(m_occurrence_type, json[QString("occurrenceType")]);
    m_occurrence_type_isSet = !json[QString("occurrenceType")].isNull() && m_occurrence_type_isValid;

    m_value_type_isValid = ::OpenAPI::fromJsonValue(m_value_type, json[QString("valueType")]);
    m_value_type_isSet = !json[QString("valueType")].isNull() && m_value_type_isValid;
}

QString OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_occurrence_type_isSet) {
        obj.insert(QString("occurrenceType"), ::OpenAPI::toJsonValue(m_occurrence_type));
    }
    if (m_value_type_isSet) {
        obj.insert(QString("valueType"), ::OpenAPI::toJsonValue(m_value_type));
    }
    return obj;
}

QString OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::getName() const {
    return m_name;
}
void OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::getOccurrenceType() const {
    return m_occurrence_type;
}
void OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::setOccurrenceType(const QString &occurrence_type) {
    m_occurrence_type = occurrence_type;
    m_occurrence_type_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::is_occurrence_type_Set() const{
    return m_occurrence_type_isSet;
}

bool OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::is_occurrence_type_Valid() const{
    return m_occurrence_type_isValid;
}

QString OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::getValueType() const {
    return m_value_type;
}
void OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::setValueType(const QString &value_type) {
    m_value_type = value_type;
    m_value_type_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::is_value_type_Set() const{
    return m_value_type_isSet;
}

bool OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::is_value_type_Valid() const{
    return m_value_type_isValid;
}

bool OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occurrence_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
