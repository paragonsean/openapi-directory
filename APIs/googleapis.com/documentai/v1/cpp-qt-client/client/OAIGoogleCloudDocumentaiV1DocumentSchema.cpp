/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1DocumentSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1DocumentSchema::OAIGoogleCloudDocumentaiV1DocumentSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1DocumentSchema::OAIGoogleCloudDocumentaiV1DocumentSchema() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1DocumentSchema::~OAIGoogleCloudDocumentaiV1DocumentSchema() {}

void OAIGoogleCloudDocumentaiV1DocumentSchema::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_entity_types_isSet = false;
    m_entity_types_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;
}

void OAIGoogleCloudDocumentaiV1DocumentSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1DocumentSchema::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_entity_types_isValid = ::OpenAPI::fromJsonValue(m_entity_types, json[QString("entityTypes")]);
    m_entity_types_isSet = !json[QString("entityTypes")].isNull() && m_entity_types_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;
}

QString OAIGoogleCloudDocumentaiV1DocumentSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1DocumentSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_entity_types.size() > 0) {
        obj.insert(QString("entityTypes"), ::OpenAPI::toJsonValue(m_entity_types));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    return obj;
}

QString OAIGoogleCloudDocumentaiV1DocumentSchema::getDescription() const {
    return m_description;
}
void OAIGoogleCloudDocumentaiV1DocumentSchema::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1DocumentSchema::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleCloudDocumentaiV1DocumentSchema::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGoogleCloudDocumentaiV1DocumentSchema::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudDocumentaiV1DocumentSchema::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1DocumentSchema::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudDocumentaiV1DocumentSchema::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<OAIGoogleCloudDocumentaiV1DocumentSchemaEntityType> OAIGoogleCloudDocumentaiV1DocumentSchema::getEntityTypes() const {
    return m_entity_types;
}
void OAIGoogleCloudDocumentaiV1DocumentSchema::setEntityTypes(const QList<OAIGoogleCloudDocumentaiV1DocumentSchemaEntityType> &entity_types) {
    m_entity_types = entity_types;
    m_entity_types_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1DocumentSchema::is_entity_types_Set() const{
    return m_entity_types_isSet;
}

bool OAIGoogleCloudDocumentaiV1DocumentSchema::is_entity_types_Valid() const{
    return m_entity_types_isValid;
}

OAIGoogleCloudDocumentaiV1DocumentSchemaMetadata OAIGoogleCloudDocumentaiV1DocumentSchema::getMetadata() const {
    return m_metadata;
}
void OAIGoogleCloudDocumentaiV1DocumentSchema::setMetadata(const OAIGoogleCloudDocumentaiV1DocumentSchemaMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1DocumentSchema::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGoogleCloudDocumentaiV1DocumentSchema::is_metadata_Valid() const{
    return m_metadata_isValid;
}

bool OAIGoogleCloudDocumentaiV1DocumentSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1DocumentSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
