/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::~OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata() {}

void OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::initializeModel() {

    m_common_metadata_isSet = false;
    m_common_metadata_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_question_id_isSet = false;
    m_question_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_message_isSet = false;
    m_state_message_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::fromJsonObject(QJsonObject json) {

    m_common_metadata_isValid = ::OpenAPI::fromJsonValue(m_common_metadata, json[QString("commonMetadata")]);
    m_common_metadata_isSet = !json[QString("commonMetadata")].isNull() && m_common_metadata_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_question_id_isValid = ::OpenAPI::fromJsonValue(m_question_id, json[QString("questionId")]);
    m_question_id_isSet = !json[QString("questionId")].isNull() && m_question_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_message_isValid = ::OpenAPI::fromJsonValue(m_state_message, json[QString("stateMessage")]);
    m_state_message_isSet = !json[QString("stateMessage")].isNull() && m_state_message_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_common_metadata.isSet()) {
        obj.insert(QString("commonMetadata"), ::OpenAPI::toJsonValue(m_common_metadata));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_question_id_isSet) {
        obj.insert(QString("questionId"), ::OpenAPI::toJsonValue(m_question_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_message_isSet) {
        obj.insert(QString("stateMessage"), ::OpenAPI::toJsonValue(m_state_message));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIGoogleCloudDocumentaiV1beta3CommonOperationMetadata OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::getCommonMetadata() const {
    return m_common_metadata;
}
void OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::setCommonMetadata(const OAIGoogleCloudDocumentaiV1beta3CommonOperationMetadata &common_metadata) {
    m_common_metadata = common_metadata;
    m_common_metadata_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::is_common_metadata_Set() const{
    return m_common_metadata_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::is_common_metadata_Valid() const{
    return m_common_metadata_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::getQuestionId() const {
    return m_question_id;
}
void OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::setQuestionId(const QString &question_id) {
    m_question_id = question_id;
    m_question_id_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::is_question_id_Set() const{
    return m_question_id_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::is_question_id_Valid() const{
    return m_question_id_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::getState() const {
    return m_state;
}
void OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::getStateMessage() const {
    return m_state_message;
}
void OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::setStateMessage(const QString &state_message) {
    m_state_message = state_message;
    m_state_message_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::is_state_message_Set() const{
    return m_state_message_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::is_state_message_Valid() const{
    return m_state_message_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_common_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta3ReviewDocumentOperationMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
