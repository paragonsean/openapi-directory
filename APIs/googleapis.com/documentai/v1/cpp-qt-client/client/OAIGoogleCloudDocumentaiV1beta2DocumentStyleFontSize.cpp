/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize::OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize::OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize::~OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize() {}

void OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize::initializeModel() {

    m_size_isSet = false;
    m_size_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize::fromJsonObject(QJsonObject json) {

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize::asJsonObject() const {
    QJsonObject obj;
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

float OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize::getSize() const {
    return m_size;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize::setSize(const float &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize::is_size_Set() const{
    return m_size_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize::getUnit() const {
    return m_unit;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentStyleFontSize::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
