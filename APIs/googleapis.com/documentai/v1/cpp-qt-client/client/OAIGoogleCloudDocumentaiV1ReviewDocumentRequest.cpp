/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1ReviewDocumentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::OAIGoogleCloudDocumentaiV1ReviewDocumentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::OAIGoogleCloudDocumentaiV1ReviewDocumentRequest() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::~OAIGoogleCloudDocumentaiV1ReviewDocumentRequest() {}

void OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::initializeModel() {

    m_document_schema_isSet = false;
    m_document_schema_isValid = false;

    m_enable_schema_validation_isSet = false;
    m_enable_schema_validation_isValid = false;

    m_inline_document_isSet = false;
    m_inline_document_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;
}

void OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::fromJsonObject(QJsonObject json) {

    m_document_schema_isValid = ::OpenAPI::fromJsonValue(m_document_schema, json[QString("documentSchema")]);
    m_document_schema_isSet = !json[QString("documentSchema")].isNull() && m_document_schema_isValid;

    m_enable_schema_validation_isValid = ::OpenAPI::fromJsonValue(m_enable_schema_validation, json[QString("enableSchemaValidation")]);
    m_enable_schema_validation_isSet = !json[QString("enableSchemaValidation")].isNull() && m_enable_schema_validation_isValid;

    m_inline_document_isValid = ::OpenAPI::fromJsonValue(m_inline_document, json[QString("inlineDocument")]);
    m_inline_document_isSet = !json[QString("inlineDocument")].isNull() && m_inline_document_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;
}

QString OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_document_schema.isSet()) {
        obj.insert(QString("documentSchema"), ::OpenAPI::toJsonValue(m_document_schema));
    }
    if (m_enable_schema_validation_isSet) {
        obj.insert(QString("enableSchemaValidation"), ::OpenAPI::toJsonValue(m_enable_schema_validation));
    }
    if (m_inline_document.isSet()) {
        obj.insert(QString("inlineDocument"), ::OpenAPI::toJsonValue(m_inline_document));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    return obj;
}

OAIGoogleCloudDocumentaiV1DocumentSchema OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::getDocumentSchema() const {
    return m_document_schema;
}
void OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::setDocumentSchema(const OAIGoogleCloudDocumentaiV1DocumentSchema &document_schema) {
    m_document_schema = document_schema;
    m_document_schema_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::is_document_schema_Set() const{
    return m_document_schema_isSet;
}

bool OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::is_document_schema_Valid() const{
    return m_document_schema_isValid;
}

bool OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::isEnableSchemaValidation() const {
    return m_enable_schema_validation;
}
void OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::setEnableSchemaValidation(const bool &enable_schema_validation) {
    m_enable_schema_validation = enable_schema_validation;
    m_enable_schema_validation_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::is_enable_schema_validation_Set() const{
    return m_enable_schema_validation_isSet;
}

bool OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::is_enable_schema_validation_Valid() const{
    return m_enable_schema_validation_isValid;
}

OAIGoogleCloudDocumentaiV1Document OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::getInlineDocument() const {
    return m_inline_document;
}
void OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::setInlineDocument(const OAIGoogleCloudDocumentaiV1Document &inline_document) {
    m_inline_document = inline_document;
    m_inline_document_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::is_inline_document_Set() const{
    return m_inline_document_isSet;
}

bool OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::is_inline_document_Valid() const{
    return m_inline_document_isValid;
}

QString OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::getPriority() const {
    return m_priority;
}
void OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::is_priority_Valid() const{
    return m_priority_isValid;
}

bool OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_schema_validation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1ReviewDocumentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
