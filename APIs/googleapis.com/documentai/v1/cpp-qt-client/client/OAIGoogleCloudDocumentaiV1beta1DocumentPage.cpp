/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta1DocumentPage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta1DocumentPage::OAIGoogleCloudDocumentaiV1beta1DocumentPage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta1DocumentPage::OAIGoogleCloudDocumentaiV1beta1DocumentPage() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta1DocumentPage::~OAIGoogleCloudDocumentaiV1beta1DocumentPage() {}

void OAIGoogleCloudDocumentaiV1beta1DocumentPage::initializeModel() {

    m_blocks_isSet = false;
    m_blocks_isValid = false;

    m_detected_barcodes_isSet = false;
    m_detected_barcodes_isValid = false;

    m_detected_languages_isSet = false;
    m_detected_languages_isValid = false;

    m_dimension_isSet = false;
    m_dimension_isValid = false;

    m_form_fields_isSet = false;
    m_form_fields_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_image_quality_scores_isSet = false;
    m_image_quality_scores_isValid = false;

    m_layout_isSet = false;
    m_layout_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_paragraphs_isSet = false;
    m_paragraphs_isValid = false;

    m_provenance_isSet = false;
    m_provenance_isValid = false;

    m_symbols_isSet = false;
    m_symbols_isValid = false;

    m_tables_isSet = false;
    m_tables_isValid = false;

    m_tokens_isSet = false;
    m_tokens_isValid = false;

    m_transforms_isSet = false;
    m_transforms_isValid = false;

    m_visual_elements_isSet = false;
    m_visual_elements_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta1DocumentPage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta1DocumentPage::fromJsonObject(QJsonObject json) {

    m_blocks_isValid = ::OpenAPI::fromJsonValue(m_blocks, json[QString("blocks")]);
    m_blocks_isSet = !json[QString("blocks")].isNull() && m_blocks_isValid;

    m_detected_barcodes_isValid = ::OpenAPI::fromJsonValue(m_detected_barcodes, json[QString("detectedBarcodes")]);
    m_detected_barcodes_isSet = !json[QString("detectedBarcodes")].isNull() && m_detected_barcodes_isValid;

    m_detected_languages_isValid = ::OpenAPI::fromJsonValue(m_detected_languages, json[QString("detectedLanguages")]);
    m_detected_languages_isSet = !json[QString("detectedLanguages")].isNull() && m_detected_languages_isValid;

    m_dimension_isValid = ::OpenAPI::fromJsonValue(m_dimension, json[QString("dimension")]);
    m_dimension_isSet = !json[QString("dimension")].isNull() && m_dimension_isValid;

    m_form_fields_isValid = ::OpenAPI::fromJsonValue(m_form_fields, json[QString("formFields")]);
    m_form_fields_isSet = !json[QString("formFields")].isNull() && m_form_fields_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_image_quality_scores_isValid = ::OpenAPI::fromJsonValue(m_image_quality_scores, json[QString("imageQualityScores")]);
    m_image_quality_scores_isSet = !json[QString("imageQualityScores")].isNull() && m_image_quality_scores_isValid;

    m_layout_isValid = ::OpenAPI::fromJsonValue(m_layout, json[QString("layout")]);
    m_layout_isSet = !json[QString("layout")].isNull() && m_layout_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_paragraphs_isValid = ::OpenAPI::fromJsonValue(m_paragraphs, json[QString("paragraphs")]);
    m_paragraphs_isSet = !json[QString("paragraphs")].isNull() && m_paragraphs_isValid;

    m_provenance_isValid = ::OpenAPI::fromJsonValue(m_provenance, json[QString("provenance")]);
    m_provenance_isSet = !json[QString("provenance")].isNull() && m_provenance_isValid;

    m_symbols_isValid = ::OpenAPI::fromJsonValue(m_symbols, json[QString("symbols")]);
    m_symbols_isSet = !json[QString("symbols")].isNull() && m_symbols_isValid;

    m_tables_isValid = ::OpenAPI::fromJsonValue(m_tables, json[QString("tables")]);
    m_tables_isSet = !json[QString("tables")].isNull() && m_tables_isValid;

    m_tokens_isValid = ::OpenAPI::fromJsonValue(m_tokens, json[QString("tokens")]);
    m_tokens_isSet = !json[QString("tokens")].isNull() && m_tokens_isValid;

    m_transforms_isValid = ::OpenAPI::fromJsonValue(m_transforms, json[QString("transforms")]);
    m_transforms_isSet = !json[QString("transforms")].isNull() && m_transforms_isValid;

    m_visual_elements_isValid = ::OpenAPI::fromJsonValue(m_visual_elements, json[QString("visualElements")]);
    m_visual_elements_isSet = !json[QString("visualElements")].isNull() && m_visual_elements_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta1DocumentPage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta1DocumentPage::asJsonObject() const {
    QJsonObject obj;
    if (m_blocks.size() > 0) {
        obj.insert(QString("blocks"), ::OpenAPI::toJsonValue(m_blocks));
    }
    if (m_detected_barcodes.size() > 0) {
        obj.insert(QString("detectedBarcodes"), ::OpenAPI::toJsonValue(m_detected_barcodes));
    }
    if (m_detected_languages.size() > 0) {
        obj.insert(QString("detectedLanguages"), ::OpenAPI::toJsonValue(m_detected_languages));
    }
    if (m_dimension.isSet()) {
        obj.insert(QString("dimension"), ::OpenAPI::toJsonValue(m_dimension));
    }
    if (m_form_fields.size() > 0) {
        obj.insert(QString("formFields"), ::OpenAPI::toJsonValue(m_form_fields));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_image_quality_scores.isSet()) {
        obj.insert(QString("imageQualityScores"), ::OpenAPI::toJsonValue(m_image_quality_scores));
    }
    if (m_layout.isSet()) {
        obj.insert(QString("layout"), ::OpenAPI::toJsonValue(m_layout));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_paragraphs.size() > 0) {
        obj.insert(QString("paragraphs"), ::OpenAPI::toJsonValue(m_paragraphs));
    }
    if (m_provenance.isSet()) {
        obj.insert(QString("provenance"), ::OpenAPI::toJsonValue(m_provenance));
    }
    if (m_symbols.size() > 0) {
        obj.insert(QString("symbols"), ::OpenAPI::toJsonValue(m_symbols));
    }
    if (m_tables.size() > 0) {
        obj.insert(QString("tables"), ::OpenAPI::toJsonValue(m_tables));
    }
    if (m_tokens.size() > 0) {
        obj.insert(QString("tokens"), ::OpenAPI::toJsonValue(m_tokens));
    }
    if (m_transforms.size() > 0) {
        obj.insert(QString("transforms"), ::OpenAPI::toJsonValue(m_transforms));
    }
    if (m_visual_elements.size() > 0) {
        obj.insert(QString("visualElements"), ::OpenAPI::toJsonValue(m_visual_elements));
    }
    return obj;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageBlock> OAIGoogleCloudDocumentaiV1beta1DocumentPage::getBlocks() const {
    return m_blocks;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPage::setBlocks(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageBlock> &blocks) {
    m_blocks = blocks;
    m_blocks_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_blocks_Set() const{
    return m_blocks_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_blocks_Valid() const{
    return m_blocks_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageDetectedBarcode> OAIGoogleCloudDocumentaiV1beta1DocumentPage::getDetectedBarcodes() const {
    return m_detected_barcodes;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPage::setDetectedBarcodes(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageDetectedBarcode> &detected_barcodes) {
    m_detected_barcodes = detected_barcodes;
    m_detected_barcodes_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_detected_barcodes_Set() const{
    return m_detected_barcodes_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_detected_barcodes_Valid() const{
    return m_detected_barcodes_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage> OAIGoogleCloudDocumentaiV1beta1DocumentPage::getDetectedLanguages() const {
    return m_detected_languages;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPage::setDetectedLanguages(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageDetectedLanguage> &detected_languages) {
    m_detected_languages = detected_languages;
    m_detected_languages_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_detected_languages_Set() const{
    return m_detected_languages_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_detected_languages_Valid() const{
    return m_detected_languages_isValid;
}

OAIGoogleCloudDocumentaiV1beta1DocumentPageDimension OAIGoogleCloudDocumentaiV1beta1DocumentPage::getDimension() const {
    return m_dimension;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPage::setDimension(const OAIGoogleCloudDocumentaiV1beta1DocumentPageDimension &dimension) {
    m_dimension = dimension;
    m_dimension_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_dimension_Set() const{
    return m_dimension_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_dimension_Valid() const{
    return m_dimension_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageFormField> OAIGoogleCloudDocumentaiV1beta1DocumentPage::getFormFields() const {
    return m_form_fields;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPage::setFormFields(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageFormField> &form_fields) {
    m_form_fields = form_fields;
    m_form_fields_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_form_fields_Set() const{
    return m_form_fields_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_form_fields_Valid() const{
    return m_form_fields_isValid;
}

OAIGoogleCloudDocumentaiV1beta1DocumentPageImage OAIGoogleCloudDocumentaiV1beta1DocumentPage::getImage() const {
    return m_image;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPage::setImage(const OAIGoogleCloudDocumentaiV1beta1DocumentPageImage &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_image_Set() const{
    return m_image_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_image_Valid() const{
    return m_image_isValid;
}

OAIGoogleCloudDocumentaiV1beta1DocumentPageImageQualityScores OAIGoogleCloudDocumentaiV1beta1DocumentPage::getImageQualityScores() const {
    return m_image_quality_scores;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPage::setImageQualityScores(const OAIGoogleCloudDocumentaiV1beta1DocumentPageImageQualityScores &image_quality_scores) {
    m_image_quality_scores = image_quality_scores;
    m_image_quality_scores_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_image_quality_scores_Set() const{
    return m_image_quality_scores_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_image_quality_scores_Valid() const{
    return m_image_quality_scores_isValid;
}

OAIGoogleCloudDocumentaiV1beta1DocumentPageLayout OAIGoogleCloudDocumentaiV1beta1DocumentPage::getLayout() const {
    return m_layout;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPage::setLayout(const OAIGoogleCloudDocumentaiV1beta1DocumentPageLayout &layout) {
    m_layout = layout;
    m_layout_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_layout_Set() const{
    return m_layout_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_layout_Valid() const{
    return m_layout_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageLine> OAIGoogleCloudDocumentaiV1beta1DocumentPage::getLines() const {
    return m_lines;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPage::setLines(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageLine> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_lines_Valid() const{
    return m_lines_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1beta1DocumentPage::getPageNumber() const {
    return m_page_number;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPage::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_page_number_Valid() const{
    return m_page_number_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageParagraph> OAIGoogleCloudDocumentaiV1beta1DocumentPage::getParagraphs() const {
    return m_paragraphs;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPage::setParagraphs(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageParagraph> &paragraphs) {
    m_paragraphs = paragraphs;
    m_paragraphs_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_paragraphs_Set() const{
    return m_paragraphs_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_paragraphs_Valid() const{
    return m_paragraphs_isValid;
}

OAIGoogleCloudDocumentaiV1beta1DocumentProvenance OAIGoogleCloudDocumentaiV1beta1DocumentPage::getProvenance() const {
    return m_provenance;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPage::setProvenance(const OAIGoogleCloudDocumentaiV1beta1DocumentProvenance &provenance) {
    m_provenance = provenance;
    m_provenance_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_provenance_Set() const{
    return m_provenance_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_provenance_Valid() const{
    return m_provenance_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageSymbol> OAIGoogleCloudDocumentaiV1beta1DocumentPage::getSymbols() const {
    return m_symbols;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPage::setSymbols(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageSymbol> &symbols) {
    m_symbols = symbols;
    m_symbols_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_symbols_Set() const{
    return m_symbols_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_symbols_Valid() const{
    return m_symbols_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageTable> OAIGoogleCloudDocumentaiV1beta1DocumentPage::getTables() const {
    return m_tables;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPage::setTables(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageTable> &tables) {
    m_tables = tables;
    m_tables_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_tables_Set() const{
    return m_tables_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_tables_Valid() const{
    return m_tables_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageToken> OAIGoogleCloudDocumentaiV1beta1DocumentPage::getTokens() const {
    return m_tokens;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPage::setTokens(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageToken> &tokens) {
    m_tokens = tokens;
    m_tokens_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_tokens_Set() const{
    return m_tokens_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_tokens_Valid() const{
    return m_tokens_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix> OAIGoogleCloudDocumentaiV1beta1DocumentPage::getTransforms() const {
    return m_transforms;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPage::setTransforms(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageMatrix> &transforms) {
    m_transforms = transforms;
    m_transforms_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_transforms_Set() const{
    return m_transforms_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_transforms_Valid() const{
    return m_transforms_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageVisualElement> OAIGoogleCloudDocumentaiV1beta1DocumentPage::getVisualElements() const {
    return m_visual_elements;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentPage::setVisualElements(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentPageVisualElement> &visual_elements) {
    m_visual_elements = visual_elements;
    m_visual_elements_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_visual_elements_Set() const{
    return m_visual_elements_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::is_visual_elements_Valid() const{
    return m_visual_elements_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blocks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_barcodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_quality_scores.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paragraphs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provenance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbols.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokens.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transforms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_visual_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentPage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
