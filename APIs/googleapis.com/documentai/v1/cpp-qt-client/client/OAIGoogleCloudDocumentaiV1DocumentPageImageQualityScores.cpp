/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores::OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores::OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores::~OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores() {}

void OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores::initializeModel() {

    m_detected_defects_isSet = false;
    m_detected_defects_isValid = false;

    m_quality_score_isSet = false;
    m_quality_score_isValid = false;
}

void OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores::fromJsonObject(QJsonObject json) {

    m_detected_defects_isValid = ::OpenAPI::fromJsonValue(m_detected_defects, json[QString("detectedDefects")]);
    m_detected_defects_isSet = !json[QString("detectedDefects")].isNull() && m_detected_defects_isValid;

    m_quality_score_isValid = ::OpenAPI::fromJsonValue(m_quality_score, json[QString("qualityScore")]);
    m_quality_score_isSet = !json[QString("qualityScore")].isNull() && m_quality_score_isValid;
}

QString OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores::asJsonObject() const {
    QJsonObject obj;
    if (m_detected_defects.size() > 0) {
        obj.insert(QString("detectedDefects"), ::OpenAPI::toJsonValue(m_detected_defects));
    }
    if (m_quality_score_isSet) {
        obj.insert(QString("qualityScore"), ::OpenAPI::toJsonValue(m_quality_score));
    }
    return obj;
}

QList<OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScoresDetectedDefect> OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores::getDetectedDefects() const {
    return m_detected_defects;
}
void OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores::setDetectedDefects(const QList<OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScoresDetectedDefect> &detected_defects) {
    m_detected_defects = detected_defects;
    m_detected_defects_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores::is_detected_defects_Set() const{
    return m_detected_defects_isSet;
}

bool OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores::is_detected_defects_Valid() const{
    return m_detected_defects_isValid;
}

float OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores::getQualityScore() const {
    return m_quality_score;
}
void OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores::setQualityScore(const float &quality_score) {
    m_quality_score = quality_score;
    m_quality_score_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores::is_quality_score_Set() const{
    return m_quality_score_isSet;
}

bool OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores::is_quality_score_Valid() const{
    return m_quality_score_isValid;
}

bool OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detected_defects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1DocumentPageImageQualityScores::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
