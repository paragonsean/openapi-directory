/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::~OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest() {}

void OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::initializeModel() {

    m_base_processor_version_isSet = false;
    m_base_processor_version_isValid = false;

    m_custom_document_extraction_options_isSet = false;
    m_custom_document_extraction_options_isValid = false;

    m_document_schema_isSet = false;
    m_document_schema_isValid = false;

    m_input_data_isSet = false;
    m_input_data_isValid = false;

    m_processor_version_isSet = false;
    m_processor_version_isValid = false;
}

void OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::fromJsonObject(QJsonObject json) {

    m_base_processor_version_isValid = ::OpenAPI::fromJsonValue(m_base_processor_version, json[QString("baseProcessorVersion")]);
    m_base_processor_version_isSet = !json[QString("baseProcessorVersion")].isNull() && m_base_processor_version_isValid;

    m_custom_document_extraction_options_isValid = ::OpenAPI::fromJsonValue(m_custom_document_extraction_options, json[QString("customDocumentExtractionOptions")]);
    m_custom_document_extraction_options_isSet = !json[QString("customDocumentExtractionOptions")].isNull() && m_custom_document_extraction_options_isValid;

    m_document_schema_isValid = ::OpenAPI::fromJsonValue(m_document_schema, json[QString("documentSchema")]);
    m_document_schema_isSet = !json[QString("documentSchema")].isNull() && m_document_schema_isValid;

    m_input_data_isValid = ::OpenAPI::fromJsonValue(m_input_data, json[QString("inputData")]);
    m_input_data_isSet = !json[QString("inputData")].isNull() && m_input_data_isValid;

    m_processor_version_isValid = ::OpenAPI::fromJsonValue(m_processor_version, json[QString("processorVersion")]);
    m_processor_version_isSet = !json[QString("processorVersion")].isNull() && m_processor_version_isValid;
}

QString OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_base_processor_version_isSet) {
        obj.insert(QString("baseProcessorVersion"), ::OpenAPI::toJsonValue(m_base_processor_version));
    }
    if (m_custom_document_extraction_options.isSet()) {
        obj.insert(QString("customDocumentExtractionOptions"), ::OpenAPI::toJsonValue(m_custom_document_extraction_options));
    }
    if (m_document_schema.isSet()) {
        obj.insert(QString("documentSchema"), ::OpenAPI::toJsonValue(m_document_schema));
    }
    if (m_input_data.isSet()) {
        obj.insert(QString("inputData"), ::OpenAPI::toJsonValue(m_input_data));
    }
    if (m_processor_version.isSet()) {
        obj.insert(QString("processorVersion"), ::OpenAPI::toJsonValue(m_processor_version));
    }
    return obj;
}

QString OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::getBaseProcessorVersion() const {
    return m_base_processor_version;
}
void OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::setBaseProcessorVersion(const QString &base_processor_version) {
    m_base_processor_version = base_processor_version;
    m_base_processor_version_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::is_base_processor_version_Set() const{
    return m_base_processor_version_isSet;
}

bool OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::is_base_processor_version_Valid() const{
    return m_base_processor_version_isValid;
}

OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequestCustomDocumentExtractionOptions OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::getCustomDocumentExtractionOptions() const {
    return m_custom_document_extraction_options;
}
void OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::setCustomDocumentExtractionOptions(const OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequestCustomDocumentExtractionOptions &custom_document_extraction_options) {
    m_custom_document_extraction_options = custom_document_extraction_options;
    m_custom_document_extraction_options_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::is_custom_document_extraction_options_Set() const{
    return m_custom_document_extraction_options_isSet;
}

bool OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::is_custom_document_extraction_options_Valid() const{
    return m_custom_document_extraction_options_isValid;
}

OAIGoogleCloudDocumentaiV1DocumentSchema OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::getDocumentSchema() const {
    return m_document_schema;
}
void OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::setDocumentSchema(const OAIGoogleCloudDocumentaiV1DocumentSchema &document_schema) {
    m_document_schema = document_schema;
    m_document_schema_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::is_document_schema_Set() const{
    return m_document_schema_isSet;
}

bool OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::is_document_schema_Valid() const{
    return m_document_schema_isValid;
}

OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequestInputData OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::getInputData() const {
    return m_input_data;
}
void OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::setInputData(const OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequestInputData &input_data) {
    m_input_data = input_data;
    m_input_data_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::is_input_data_Set() const{
    return m_input_data_isSet;
}

bool OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::is_input_data_Valid() const{
    return m_input_data_isValid;
}

OAIGoogleCloudDocumentaiV1ProcessorVersion OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::getProcessorVersion() const {
    return m_processor_version;
}
void OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::setProcessorVersion(const OAIGoogleCloudDocumentaiV1ProcessorVersion &processor_version) {
    m_processor_version = processor_version;
    m_processor_version_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::is_processor_version_Set() const{
    return m_processor_version_isSet;
}

bool OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::is_processor_version_Valid() const{
    return m_processor_version_isValid;
}

bool OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_processor_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_document_extraction_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processor_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1TrainProcessorVersionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
