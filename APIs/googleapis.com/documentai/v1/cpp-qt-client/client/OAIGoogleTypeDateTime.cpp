/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleTypeDateTime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleTypeDateTime::OAIGoogleTypeDateTime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleTypeDateTime::OAIGoogleTypeDateTime() {
    this->initializeModel();
}

OAIGoogleTypeDateTime::~OAIGoogleTypeDateTime() {}

void OAIGoogleTypeDateTime::initializeModel() {

    m_day_isSet = false;
    m_day_isValid = false;

    m_hours_isSet = false;
    m_hours_isValid = false;

    m_minutes_isSet = false;
    m_minutes_isValid = false;

    m_month_isSet = false;
    m_month_isValid = false;

    m_nanos_isSet = false;
    m_nanos_isValid = false;

    m_seconds_isSet = false;
    m_seconds_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_utc_offset_isSet = false;
    m_utc_offset_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIGoogleTypeDateTime::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleTypeDateTime::fromJsonObject(QJsonObject json) {

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("day")]);
    m_day_isSet = !json[QString("day")].isNull() && m_day_isValid;

    m_hours_isValid = ::OpenAPI::fromJsonValue(m_hours, json[QString("hours")]);
    m_hours_isSet = !json[QString("hours")].isNull() && m_hours_isValid;

    m_minutes_isValid = ::OpenAPI::fromJsonValue(m_minutes, json[QString("minutes")]);
    m_minutes_isSet = !json[QString("minutes")].isNull() && m_minutes_isValid;

    m_month_isValid = ::OpenAPI::fromJsonValue(m_month, json[QString("month")]);
    m_month_isSet = !json[QString("month")].isNull() && m_month_isValid;

    m_nanos_isValid = ::OpenAPI::fromJsonValue(m_nanos, json[QString("nanos")]);
    m_nanos_isSet = !json[QString("nanos")].isNull() && m_nanos_isValid;

    m_seconds_isValid = ::OpenAPI::fromJsonValue(m_seconds, json[QString("seconds")]);
    m_seconds_isSet = !json[QString("seconds")].isNull() && m_seconds_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_utc_offset_isValid = ::OpenAPI::fromJsonValue(m_utc_offset, json[QString("utcOffset")]);
    m_utc_offset_isSet = !json[QString("utcOffset")].isNull() && m_utc_offset_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIGoogleTypeDateTime::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleTypeDateTime::asJsonObject() const {
    QJsonObject obj;
    if (m_day_isSet) {
        obj.insert(QString("day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_hours_isSet) {
        obj.insert(QString("hours"), ::OpenAPI::toJsonValue(m_hours));
    }
    if (m_minutes_isSet) {
        obj.insert(QString("minutes"), ::OpenAPI::toJsonValue(m_minutes));
    }
    if (m_month_isSet) {
        obj.insert(QString("month"), ::OpenAPI::toJsonValue(m_month));
    }
    if (m_nanos_isSet) {
        obj.insert(QString("nanos"), ::OpenAPI::toJsonValue(m_nanos));
    }
    if (m_seconds_isSet) {
        obj.insert(QString("seconds"), ::OpenAPI::toJsonValue(m_seconds));
    }
    if (m_time_zone.isSet()) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_utc_offset_isSet) {
        obj.insert(QString("utcOffset"), ::OpenAPI::toJsonValue(m_utc_offset));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

qint32 OAIGoogleTypeDateTime::getDay() const {
    return m_day;
}
void OAIGoogleTypeDateTime::setDay(const qint32 &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIGoogleTypeDateTime::is_day_Set() const{
    return m_day_isSet;
}

bool OAIGoogleTypeDateTime::is_day_Valid() const{
    return m_day_isValid;
}

qint32 OAIGoogleTypeDateTime::getHours() const {
    return m_hours;
}
void OAIGoogleTypeDateTime::setHours(const qint32 &hours) {
    m_hours = hours;
    m_hours_isSet = true;
}

bool OAIGoogleTypeDateTime::is_hours_Set() const{
    return m_hours_isSet;
}

bool OAIGoogleTypeDateTime::is_hours_Valid() const{
    return m_hours_isValid;
}

qint32 OAIGoogleTypeDateTime::getMinutes() const {
    return m_minutes;
}
void OAIGoogleTypeDateTime::setMinutes(const qint32 &minutes) {
    m_minutes = minutes;
    m_minutes_isSet = true;
}

bool OAIGoogleTypeDateTime::is_minutes_Set() const{
    return m_minutes_isSet;
}

bool OAIGoogleTypeDateTime::is_minutes_Valid() const{
    return m_minutes_isValid;
}

qint32 OAIGoogleTypeDateTime::getMonth() const {
    return m_month;
}
void OAIGoogleTypeDateTime::setMonth(const qint32 &month) {
    m_month = month;
    m_month_isSet = true;
}

bool OAIGoogleTypeDateTime::is_month_Set() const{
    return m_month_isSet;
}

bool OAIGoogleTypeDateTime::is_month_Valid() const{
    return m_month_isValid;
}

qint32 OAIGoogleTypeDateTime::getNanos() const {
    return m_nanos;
}
void OAIGoogleTypeDateTime::setNanos(const qint32 &nanos) {
    m_nanos = nanos;
    m_nanos_isSet = true;
}

bool OAIGoogleTypeDateTime::is_nanos_Set() const{
    return m_nanos_isSet;
}

bool OAIGoogleTypeDateTime::is_nanos_Valid() const{
    return m_nanos_isValid;
}

qint32 OAIGoogleTypeDateTime::getSeconds() const {
    return m_seconds;
}
void OAIGoogleTypeDateTime::setSeconds(const qint32 &seconds) {
    m_seconds = seconds;
    m_seconds_isSet = true;
}

bool OAIGoogleTypeDateTime::is_seconds_Set() const{
    return m_seconds_isSet;
}

bool OAIGoogleTypeDateTime::is_seconds_Valid() const{
    return m_seconds_isValid;
}

OAIGoogleTypeTimeZone OAIGoogleTypeDateTime::getTimeZone() const {
    return m_time_zone;
}
void OAIGoogleTypeDateTime::setTimeZone(const OAIGoogleTypeTimeZone &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIGoogleTypeDateTime::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIGoogleTypeDateTime::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QString OAIGoogleTypeDateTime::getUtcOffset() const {
    return m_utc_offset;
}
void OAIGoogleTypeDateTime::setUtcOffset(const QString &utc_offset) {
    m_utc_offset = utc_offset;
    m_utc_offset_isSet = true;
}

bool OAIGoogleTypeDateTime::is_utc_offset_Set() const{
    return m_utc_offset_isSet;
}

bool OAIGoogleTypeDateTime::is_utc_offset_Valid() const{
    return m_utc_offset_isValid;
}

qint32 OAIGoogleTypeDateTime::getYear() const {
    return m_year;
}
void OAIGoogleTypeDateTime::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIGoogleTypeDateTime::is_year_Set() const{
    return m_year_isSet;
}

bool OAIGoogleTypeDateTime::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIGoogleTypeDateTime::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nanos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_utc_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleTypeDateTime::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
