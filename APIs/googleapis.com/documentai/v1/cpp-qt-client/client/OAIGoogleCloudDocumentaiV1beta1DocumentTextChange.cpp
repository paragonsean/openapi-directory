/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta1DocumentTextChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::OAIGoogleCloudDocumentaiV1beta1DocumentTextChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::OAIGoogleCloudDocumentaiV1beta1DocumentTextChange() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::~OAIGoogleCloudDocumentaiV1beta1DocumentTextChange() {}

void OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::initializeModel() {

    m_changed_text_isSet = false;
    m_changed_text_isValid = false;

    m_provenance_isSet = false;
    m_provenance_isValid = false;

    m_text_anchor_isSet = false;
    m_text_anchor_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::fromJsonObject(QJsonObject json) {

    m_changed_text_isValid = ::OpenAPI::fromJsonValue(m_changed_text, json[QString("changedText")]);
    m_changed_text_isSet = !json[QString("changedText")].isNull() && m_changed_text_isValid;

    m_provenance_isValid = ::OpenAPI::fromJsonValue(m_provenance, json[QString("provenance")]);
    m_provenance_isSet = !json[QString("provenance")].isNull() && m_provenance_isValid;

    m_text_anchor_isValid = ::OpenAPI::fromJsonValue(m_text_anchor, json[QString("textAnchor")]);
    m_text_anchor_isSet = !json[QString("textAnchor")].isNull() && m_text_anchor_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::asJsonObject() const {
    QJsonObject obj;
    if (m_changed_text_isSet) {
        obj.insert(QString("changedText"), ::OpenAPI::toJsonValue(m_changed_text));
    }
    if (m_provenance.size() > 0) {
        obj.insert(QString("provenance"), ::OpenAPI::toJsonValue(m_provenance));
    }
    if (m_text_anchor.isSet()) {
        obj.insert(QString("textAnchor"), ::OpenAPI::toJsonValue(m_text_anchor));
    }
    return obj;
}

QString OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::getChangedText() const {
    return m_changed_text;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::setChangedText(const QString &changed_text) {
    m_changed_text = changed_text;
    m_changed_text_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::is_changed_text_Set() const{
    return m_changed_text_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::is_changed_text_Valid() const{
    return m_changed_text_isValid;
}

QList<OAIGoogleCloudDocumentaiV1beta1DocumentProvenance> OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::getProvenance() const {
    return m_provenance;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::setProvenance(const QList<OAIGoogleCloudDocumentaiV1beta1DocumentProvenance> &provenance) {
    m_provenance = provenance;
    m_provenance_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::is_provenance_Set() const{
    return m_provenance_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::is_provenance_Valid() const{
    return m_provenance_isValid;
}

OAIGoogleCloudDocumentaiV1beta1DocumentTextAnchor OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::getTextAnchor() const {
    return m_text_anchor;
}
void OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::setTextAnchor(const OAIGoogleCloudDocumentaiV1beta1DocumentTextAnchor &text_anchor) {
    m_text_anchor = text_anchor;
    m_text_anchor_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::is_text_anchor_Set() const{
    return m_text_anchor_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::is_text_anchor_Valid() const{
    return m_text_anchor_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_changed_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provenance.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_anchor.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta1DocumentTextChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
