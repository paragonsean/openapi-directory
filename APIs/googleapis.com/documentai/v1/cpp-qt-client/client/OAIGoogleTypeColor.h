/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleTypeColor.h
 *
 * Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of &#x60;java.awt.Color&#x60; in Java; it can also be trivially provided to UIColor&#39;s &#x60;+colorWithRed:green:blue:alpha&#x60; method in iOS; and, with just a little work, it can be easily formatted into a CSS &#x60;rgba()&#x60; string in JavaScript. This reference page doesn&#39;t have information about the absolute color space that should be used to interpret the RGB valueâ€”for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most &#x60;1e-5&#x60;. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha &#x3D; protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red &#x3D; (float) color.getRed(); float green &#x3D; (float) color.getGreen(); float blue &#x3D; (float) color.getBlue(); float denominator &#x3D; 255.0; Color.Builder resultBuilder &#x3D; Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha &#x3D; color.getAlpha(); if (alpha !&#x3D; 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red &#x3D; [protocolor red]; float green &#x3D; [protocolor green]; float blue &#x3D; [protocolor blue]; FloatValue* alpha_wrapper &#x3D; [protocolor alpha]; float alpha &#x3D; 1.0; if (alpha_wrapper !&#x3D; nil) { alpha &#x3D; [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&amp;red green:&amp;green blue:&amp;blue alpha:&amp;alpha]) { return nil; } Color* result &#x3D; [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha &lt;&#x3D; 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor &#x3D; function(rgb_color) { var redFrac &#x3D; rgb_color.red || 0.0; var greenFrac &#x3D; rgb_color.green || 0.0; var blueFrac &#x3D; rgb_color.blue || 0.0; var red &#x3D; Math.floor(redFrac * 255); var green &#x3D; Math.floor(greenFrac * 255); var blue &#x3D; Math.floor(blueFrac * 255); if (!(&#39;alpha&#39; in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac &#x3D; rgb_color.alpha.value || 0.0; var rgbParams &#x3D; [red, green, blue].join(&#39;,&#39;); return [&#39;rgba(&#39;, rgbParams, &#39;,&#39;, alphaFrac, &#39;)&#39;].join(&#39;&#39;); }; var rgbToCssColor &#x3D; function(red, green, blue) { var rgbNumber &#x3D; new Number((red &lt;&lt; 16) | (green &lt;&lt; 8) | blue); var hexString &#x3D; rgbNumber.toString(16); var missingZeros &#x3D; 6 - hexString.length; var resultBuilder &#x3D; [&#39;#&#39;]; for (var i &#x3D; 0; i &lt; missingZeros; i++) { resultBuilder.push(&#39;0&#39;); } resultBuilder.push(hexString); return resultBuilder.join(&#39;&#39;); }; // ...
 */

#ifndef OAIGoogleTypeColor_H
#define OAIGoogleTypeColor_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleTypeColor : public OAIObject {
public:
    OAIGoogleTypeColor();
    OAIGoogleTypeColor(QString json);
    ~OAIGoogleTypeColor() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    float getAlpha() const;
    void setAlpha(const float &alpha);
    bool is_alpha_Set() const;
    bool is_alpha_Valid() const;

    float getBlue() const;
    void setBlue(const float &blue);
    bool is_blue_Set() const;
    bool is_blue_Valid() const;

    float getGreen() const;
    void setGreen(const float &green);
    bool is_green_Set() const;
    bool is_green_Valid() const;

    float getRed() const;
    void setRed(const float &red);
    bool is_red_Set() const;
    bool is_red_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    float m_alpha;
    bool m_alpha_isSet;
    bool m_alpha_isValid;

    float m_blue;
    bool m_blue_isSet;
    bool m_blue_isValid;

    float m_green;
    bool m_green_isSet;
    bool m_green_isValid;

    float m_red;
    bool m_red_isSet;
    bool m_red_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleTypeColor)

#endif // OAIGoogleTypeColor_H
