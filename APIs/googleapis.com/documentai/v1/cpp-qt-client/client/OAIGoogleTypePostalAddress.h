/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleTypePostalAddress.h
 *
 * Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
 */

#ifndef OAIGoogleTypePostalAddress_H
#define OAIGoogleTypePostalAddress_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleTypePostalAddress : public OAIObject {
public:
    OAIGoogleTypePostalAddress();
    OAIGoogleTypePostalAddress(QString json);
    ~OAIGoogleTypePostalAddress() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAddressLines() const;
    void setAddressLines(const QList<QString> &address_lines);
    bool is_address_lines_Set() const;
    bool is_address_lines_Valid() const;

    QString getAdministrativeArea() const;
    void setAdministrativeArea(const QString &administrative_area);
    bool is_administrative_area_Set() const;
    bool is_administrative_area_Valid() const;

    QString getLanguageCode() const;
    void setLanguageCode(const QString &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    QString getLocality() const;
    void setLocality(const QString &locality);
    bool is_locality_Set() const;
    bool is_locality_Valid() const;

    QString getOrganization() const;
    void setOrganization(const QString &organization);
    bool is_organization_Set() const;
    bool is_organization_Valid() const;

    QString getPostalCode() const;
    void setPostalCode(const QString &postal_code);
    bool is_postal_code_Set() const;
    bool is_postal_code_Valid() const;

    QList<QString> getRecipients() const;
    void setRecipients(const QList<QString> &recipients);
    bool is_recipients_Set() const;
    bool is_recipients_Valid() const;

    QString getRegionCode() const;
    void setRegionCode(const QString &region_code);
    bool is_region_code_Set() const;
    bool is_region_code_Valid() const;

    qint32 getRevision() const;
    void setRevision(const qint32 &revision);
    bool is_revision_Set() const;
    bool is_revision_Valid() const;

    QString getSortingCode() const;
    void setSortingCode(const QString &sorting_code);
    bool is_sorting_code_Set() const;
    bool is_sorting_code_Valid() const;

    QString getSublocality() const;
    void setSublocality(const QString &sublocality);
    bool is_sublocality_Set() const;
    bool is_sublocality_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_address_lines;
    bool m_address_lines_isSet;
    bool m_address_lines_isValid;

    QString m_administrative_area;
    bool m_administrative_area_isSet;
    bool m_administrative_area_isValid;

    QString m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    QString m_locality;
    bool m_locality_isSet;
    bool m_locality_isValid;

    QString m_organization;
    bool m_organization_isSet;
    bool m_organization_isValid;

    QString m_postal_code;
    bool m_postal_code_isSet;
    bool m_postal_code_isValid;

    QList<QString> m_recipients;
    bool m_recipients_isSet;
    bool m_recipients_isValid;

    QString m_region_code;
    bool m_region_code_isSet;
    bool m_region_code_isValid;

    qint32 m_revision;
    bool m_revision_isSet;
    bool m_revision_isValid;

    QString m_sorting_code;
    bool m_sorting_code_isSet;
    bool m_sorting_code_isValid;

    QString m_sublocality;
    bool m_sublocality_isSet;
    bool m_sublocality_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleTypePostalAddress)

#endif // OAIGoogleTypePostalAddress_H
