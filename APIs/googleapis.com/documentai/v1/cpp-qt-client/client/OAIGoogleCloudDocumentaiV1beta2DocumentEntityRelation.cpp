/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::~OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation() {}

void OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::initializeModel() {

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_relation_isSet = false;
    m_relation_isValid = false;

    m_subject_id_isSet = false;
    m_subject_id_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::fromJsonObject(QJsonObject json) {

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_relation_isValid = ::OpenAPI::fromJsonValue(m_relation, json[QString("relation")]);
    m_relation_isSet = !json[QString("relation")].isNull() && m_relation_isValid;

    m_subject_id_isValid = ::OpenAPI::fromJsonValue(m_subject_id, json[QString("subjectId")]);
    m_subject_id_isSet = !json[QString("subjectId")].isNull() && m_subject_id_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::asJsonObject() const {
    QJsonObject obj;
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_relation_isSet) {
        obj.insert(QString("relation"), ::OpenAPI::toJsonValue(m_relation));
    }
    if (m_subject_id_isSet) {
        obj.insert(QString("subjectId"), ::OpenAPI::toJsonValue(m_subject_id));
    }
    return obj;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::getObjectId() const {
    return m_object_id;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::getRelation() const {
    return m_relation;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::setRelation(const QString &relation) {
    m_relation = relation;
    m_relation_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::is_relation_Set() const{
    return m_relation_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::is_relation_Valid() const{
    return m_relation_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::getSubjectId() const {
    return m_subject_id;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::setSubjectId(const QString &subject_id) {
    m_subject_id = subject_id;
    m_subject_id_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::is_subject_id_Set() const{
    return m_subject_id_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::is_subject_id_Valid() const{
    return m_subject_id_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentEntityRelation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
