/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta3Dataset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta3Dataset::OAIGoogleCloudDocumentaiV1beta3Dataset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta3Dataset::OAIGoogleCloudDocumentaiV1beta3Dataset() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta3Dataset::~OAIGoogleCloudDocumentaiV1beta3Dataset() {}

void OAIGoogleCloudDocumentaiV1beta3Dataset::initializeModel() {

    m_document_warehouse_config_isSet = false;
    m_document_warehouse_config_isValid = false;

    m_gcs_managed_config_isSet = false;
    m_gcs_managed_config_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_spanner_indexing_config_isSet = false;
    m_spanner_indexing_config_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_unmanaged_dataset_config_isSet = false;
    m_unmanaged_dataset_config_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta3Dataset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta3Dataset::fromJsonObject(QJsonObject json) {

    m_document_warehouse_config_isValid = ::OpenAPI::fromJsonValue(m_document_warehouse_config, json[QString("documentWarehouseConfig")]);
    m_document_warehouse_config_isSet = !json[QString("documentWarehouseConfig")].isNull() && m_document_warehouse_config_isValid;

    m_gcs_managed_config_isValid = ::OpenAPI::fromJsonValue(m_gcs_managed_config, json[QString("gcsManagedConfig")]);
    m_gcs_managed_config_isSet = !json[QString("gcsManagedConfig")].isNull() && m_gcs_managed_config_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_spanner_indexing_config_isValid = ::OpenAPI::fromJsonValue(m_spanner_indexing_config, json[QString("spannerIndexingConfig")]);
    m_spanner_indexing_config_isSet = !json[QString("spannerIndexingConfig")].isNull() && m_spanner_indexing_config_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_unmanaged_dataset_config_isValid = ::OpenAPI::fromJsonValue(m_unmanaged_dataset_config, json[QString("unmanagedDatasetConfig")]);
    m_unmanaged_dataset_config_isSet = !json[QString("unmanagedDatasetConfig")].isNull() && m_unmanaged_dataset_config_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3Dataset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta3Dataset::asJsonObject() const {
    QJsonObject obj;
    if (m_document_warehouse_config.isSet()) {
        obj.insert(QString("documentWarehouseConfig"), ::OpenAPI::toJsonValue(m_document_warehouse_config));
    }
    if (m_gcs_managed_config.isSet()) {
        obj.insert(QString("gcsManagedConfig"), ::OpenAPI::toJsonValue(m_gcs_managed_config));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_spanner_indexing_config_isSet) {
        obj.insert(QString("spannerIndexingConfig"), ::OpenAPI::toJsonValue(m_spanner_indexing_config));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_unmanaged_dataset_config_isSet) {
        obj.insert(QString("unmanagedDatasetConfig"), ::OpenAPI::toJsonValue(m_unmanaged_dataset_config));
    }
    return obj;
}

OAIGoogleCloudDocumentaiV1beta3DatasetDocumentWarehouseConfig OAIGoogleCloudDocumentaiV1beta3Dataset::getDocumentWarehouseConfig() const {
    return m_document_warehouse_config;
}
void OAIGoogleCloudDocumentaiV1beta3Dataset::setDocumentWarehouseConfig(const OAIGoogleCloudDocumentaiV1beta3DatasetDocumentWarehouseConfig &document_warehouse_config) {
    m_document_warehouse_config = document_warehouse_config;
    m_document_warehouse_config_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3Dataset::is_document_warehouse_config_Set() const{
    return m_document_warehouse_config_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3Dataset::is_document_warehouse_config_Valid() const{
    return m_document_warehouse_config_isValid;
}

OAIGoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig OAIGoogleCloudDocumentaiV1beta3Dataset::getGcsManagedConfig() const {
    return m_gcs_managed_config;
}
void OAIGoogleCloudDocumentaiV1beta3Dataset::setGcsManagedConfig(const OAIGoogleCloudDocumentaiV1beta3DatasetGCSManagedConfig &gcs_managed_config) {
    m_gcs_managed_config = gcs_managed_config;
    m_gcs_managed_config_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3Dataset::is_gcs_managed_config_Set() const{
    return m_gcs_managed_config_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3Dataset::is_gcs_managed_config_Valid() const{
    return m_gcs_managed_config_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3Dataset::getName() const {
    return m_name;
}
void OAIGoogleCloudDocumentaiV1beta3Dataset::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3Dataset::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3Dataset::is_name_Valid() const{
    return m_name_isValid;
}

OAIObject OAIGoogleCloudDocumentaiV1beta3Dataset::getSpannerIndexingConfig() const {
    return m_spanner_indexing_config;
}
void OAIGoogleCloudDocumentaiV1beta3Dataset::setSpannerIndexingConfig(const OAIObject &spanner_indexing_config) {
    m_spanner_indexing_config = spanner_indexing_config;
    m_spanner_indexing_config_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3Dataset::is_spanner_indexing_config_Set() const{
    return m_spanner_indexing_config_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3Dataset::is_spanner_indexing_config_Valid() const{
    return m_spanner_indexing_config_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta3Dataset::getState() const {
    return m_state;
}
void OAIGoogleCloudDocumentaiV1beta3Dataset::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3Dataset::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3Dataset::is_state_Valid() const{
    return m_state_isValid;
}

OAIObject OAIGoogleCloudDocumentaiV1beta3Dataset::getUnmanagedDatasetConfig() const {
    return m_unmanaged_dataset_config;
}
void OAIGoogleCloudDocumentaiV1beta3Dataset::setUnmanagedDatasetConfig(const OAIObject &unmanaged_dataset_config) {
    m_unmanaged_dataset_config = unmanaged_dataset_config;
    m_unmanaged_dataset_config_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta3Dataset::is_unmanaged_dataset_config_Set() const{
    return m_unmanaged_dataset_config_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta3Dataset::is_unmanaged_dataset_config_Valid() const{
    return m_unmanaged_dataset_config_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta3Dataset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_warehouse_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_managed_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spanner_indexing_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unmanaged_dataset_config_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta3Dataset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
