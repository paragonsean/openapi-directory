/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1EvaluationMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1EvaluationMetrics::OAIGoogleCloudDocumentaiV1EvaluationMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1EvaluationMetrics::OAIGoogleCloudDocumentaiV1EvaluationMetrics() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1EvaluationMetrics::~OAIGoogleCloudDocumentaiV1EvaluationMetrics() {}

void OAIGoogleCloudDocumentaiV1EvaluationMetrics::initializeModel() {

    m_f1_score_isSet = false;
    m_f1_score_isValid = false;

    m_false_negatives_count_isSet = false;
    m_false_negatives_count_isValid = false;

    m_false_positives_count_isSet = false;
    m_false_positives_count_isValid = false;

    m_ground_truth_document_count_isSet = false;
    m_ground_truth_document_count_isValid = false;

    m_ground_truth_occurrences_count_isSet = false;
    m_ground_truth_occurrences_count_isValid = false;

    m_precision_isSet = false;
    m_precision_isValid = false;

    m_predicted_document_count_isSet = false;
    m_predicted_document_count_isValid = false;

    m_predicted_occurrences_count_isSet = false;
    m_predicted_occurrences_count_isValid = false;

    m_recall_isSet = false;
    m_recall_isValid = false;

    m_total_documents_count_isSet = false;
    m_total_documents_count_isValid = false;

    m_true_positives_count_isSet = false;
    m_true_positives_count_isValid = false;
}

void OAIGoogleCloudDocumentaiV1EvaluationMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1EvaluationMetrics::fromJsonObject(QJsonObject json) {

    m_f1_score_isValid = ::OpenAPI::fromJsonValue(m_f1_score, json[QString("f1Score")]);
    m_f1_score_isSet = !json[QString("f1Score")].isNull() && m_f1_score_isValid;

    m_false_negatives_count_isValid = ::OpenAPI::fromJsonValue(m_false_negatives_count, json[QString("falseNegativesCount")]);
    m_false_negatives_count_isSet = !json[QString("falseNegativesCount")].isNull() && m_false_negatives_count_isValid;

    m_false_positives_count_isValid = ::OpenAPI::fromJsonValue(m_false_positives_count, json[QString("falsePositivesCount")]);
    m_false_positives_count_isSet = !json[QString("falsePositivesCount")].isNull() && m_false_positives_count_isValid;

    m_ground_truth_document_count_isValid = ::OpenAPI::fromJsonValue(m_ground_truth_document_count, json[QString("groundTruthDocumentCount")]);
    m_ground_truth_document_count_isSet = !json[QString("groundTruthDocumentCount")].isNull() && m_ground_truth_document_count_isValid;

    m_ground_truth_occurrences_count_isValid = ::OpenAPI::fromJsonValue(m_ground_truth_occurrences_count, json[QString("groundTruthOccurrencesCount")]);
    m_ground_truth_occurrences_count_isSet = !json[QString("groundTruthOccurrencesCount")].isNull() && m_ground_truth_occurrences_count_isValid;

    m_precision_isValid = ::OpenAPI::fromJsonValue(m_precision, json[QString("precision")]);
    m_precision_isSet = !json[QString("precision")].isNull() && m_precision_isValid;

    m_predicted_document_count_isValid = ::OpenAPI::fromJsonValue(m_predicted_document_count, json[QString("predictedDocumentCount")]);
    m_predicted_document_count_isSet = !json[QString("predictedDocumentCount")].isNull() && m_predicted_document_count_isValid;

    m_predicted_occurrences_count_isValid = ::OpenAPI::fromJsonValue(m_predicted_occurrences_count, json[QString("predictedOccurrencesCount")]);
    m_predicted_occurrences_count_isSet = !json[QString("predictedOccurrencesCount")].isNull() && m_predicted_occurrences_count_isValid;

    m_recall_isValid = ::OpenAPI::fromJsonValue(m_recall, json[QString("recall")]);
    m_recall_isSet = !json[QString("recall")].isNull() && m_recall_isValid;

    m_total_documents_count_isValid = ::OpenAPI::fromJsonValue(m_total_documents_count, json[QString("totalDocumentsCount")]);
    m_total_documents_count_isSet = !json[QString("totalDocumentsCount")].isNull() && m_total_documents_count_isValid;

    m_true_positives_count_isValid = ::OpenAPI::fromJsonValue(m_true_positives_count, json[QString("truePositivesCount")]);
    m_true_positives_count_isSet = !json[QString("truePositivesCount")].isNull() && m_true_positives_count_isValid;
}

QString OAIGoogleCloudDocumentaiV1EvaluationMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1EvaluationMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_f1_score_isSet) {
        obj.insert(QString("f1Score"), ::OpenAPI::toJsonValue(m_f1_score));
    }
    if (m_false_negatives_count_isSet) {
        obj.insert(QString("falseNegativesCount"), ::OpenAPI::toJsonValue(m_false_negatives_count));
    }
    if (m_false_positives_count_isSet) {
        obj.insert(QString("falsePositivesCount"), ::OpenAPI::toJsonValue(m_false_positives_count));
    }
    if (m_ground_truth_document_count_isSet) {
        obj.insert(QString("groundTruthDocumentCount"), ::OpenAPI::toJsonValue(m_ground_truth_document_count));
    }
    if (m_ground_truth_occurrences_count_isSet) {
        obj.insert(QString("groundTruthOccurrencesCount"), ::OpenAPI::toJsonValue(m_ground_truth_occurrences_count));
    }
    if (m_precision_isSet) {
        obj.insert(QString("precision"), ::OpenAPI::toJsonValue(m_precision));
    }
    if (m_predicted_document_count_isSet) {
        obj.insert(QString("predictedDocumentCount"), ::OpenAPI::toJsonValue(m_predicted_document_count));
    }
    if (m_predicted_occurrences_count_isSet) {
        obj.insert(QString("predictedOccurrencesCount"), ::OpenAPI::toJsonValue(m_predicted_occurrences_count));
    }
    if (m_recall_isSet) {
        obj.insert(QString("recall"), ::OpenAPI::toJsonValue(m_recall));
    }
    if (m_total_documents_count_isSet) {
        obj.insert(QString("totalDocumentsCount"), ::OpenAPI::toJsonValue(m_total_documents_count));
    }
    if (m_true_positives_count_isSet) {
        obj.insert(QString("truePositivesCount"), ::OpenAPI::toJsonValue(m_true_positives_count));
    }
    return obj;
}

float OAIGoogleCloudDocumentaiV1EvaluationMetrics::getF1Score() const {
    return m_f1_score;
}
void OAIGoogleCloudDocumentaiV1EvaluationMetrics::setF1Score(const float &f1_score) {
    m_f1_score = f1_score;
    m_f1_score_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_f1_score_Set() const{
    return m_f1_score_isSet;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_f1_score_Valid() const{
    return m_f1_score_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1EvaluationMetrics::getFalseNegativesCount() const {
    return m_false_negatives_count;
}
void OAIGoogleCloudDocumentaiV1EvaluationMetrics::setFalseNegativesCount(const qint32 &false_negatives_count) {
    m_false_negatives_count = false_negatives_count;
    m_false_negatives_count_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_false_negatives_count_Set() const{
    return m_false_negatives_count_isSet;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_false_negatives_count_Valid() const{
    return m_false_negatives_count_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1EvaluationMetrics::getFalsePositivesCount() const {
    return m_false_positives_count;
}
void OAIGoogleCloudDocumentaiV1EvaluationMetrics::setFalsePositivesCount(const qint32 &false_positives_count) {
    m_false_positives_count = false_positives_count;
    m_false_positives_count_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_false_positives_count_Set() const{
    return m_false_positives_count_isSet;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_false_positives_count_Valid() const{
    return m_false_positives_count_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1EvaluationMetrics::getGroundTruthDocumentCount() const {
    return m_ground_truth_document_count;
}
void OAIGoogleCloudDocumentaiV1EvaluationMetrics::setGroundTruthDocumentCount(const qint32 &ground_truth_document_count) {
    m_ground_truth_document_count = ground_truth_document_count;
    m_ground_truth_document_count_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_ground_truth_document_count_Set() const{
    return m_ground_truth_document_count_isSet;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_ground_truth_document_count_Valid() const{
    return m_ground_truth_document_count_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1EvaluationMetrics::getGroundTruthOccurrencesCount() const {
    return m_ground_truth_occurrences_count;
}
void OAIGoogleCloudDocumentaiV1EvaluationMetrics::setGroundTruthOccurrencesCount(const qint32 &ground_truth_occurrences_count) {
    m_ground_truth_occurrences_count = ground_truth_occurrences_count;
    m_ground_truth_occurrences_count_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_ground_truth_occurrences_count_Set() const{
    return m_ground_truth_occurrences_count_isSet;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_ground_truth_occurrences_count_Valid() const{
    return m_ground_truth_occurrences_count_isValid;
}

float OAIGoogleCloudDocumentaiV1EvaluationMetrics::getPrecision() const {
    return m_precision;
}
void OAIGoogleCloudDocumentaiV1EvaluationMetrics::setPrecision(const float &precision) {
    m_precision = precision;
    m_precision_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_precision_Set() const{
    return m_precision_isSet;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_precision_Valid() const{
    return m_precision_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1EvaluationMetrics::getPredictedDocumentCount() const {
    return m_predicted_document_count;
}
void OAIGoogleCloudDocumentaiV1EvaluationMetrics::setPredictedDocumentCount(const qint32 &predicted_document_count) {
    m_predicted_document_count = predicted_document_count;
    m_predicted_document_count_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_predicted_document_count_Set() const{
    return m_predicted_document_count_isSet;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_predicted_document_count_Valid() const{
    return m_predicted_document_count_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1EvaluationMetrics::getPredictedOccurrencesCount() const {
    return m_predicted_occurrences_count;
}
void OAIGoogleCloudDocumentaiV1EvaluationMetrics::setPredictedOccurrencesCount(const qint32 &predicted_occurrences_count) {
    m_predicted_occurrences_count = predicted_occurrences_count;
    m_predicted_occurrences_count_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_predicted_occurrences_count_Set() const{
    return m_predicted_occurrences_count_isSet;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_predicted_occurrences_count_Valid() const{
    return m_predicted_occurrences_count_isValid;
}

float OAIGoogleCloudDocumentaiV1EvaluationMetrics::getRecall() const {
    return m_recall;
}
void OAIGoogleCloudDocumentaiV1EvaluationMetrics::setRecall(const float &recall) {
    m_recall = recall;
    m_recall_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_recall_Set() const{
    return m_recall_isSet;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_recall_Valid() const{
    return m_recall_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1EvaluationMetrics::getTotalDocumentsCount() const {
    return m_total_documents_count;
}
void OAIGoogleCloudDocumentaiV1EvaluationMetrics::setTotalDocumentsCount(const qint32 &total_documents_count) {
    m_total_documents_count = total_documents_count;
    m_total_documents_count_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_total_documents_count_Set() const{
    return m_total_documents_count_isSet;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_total_documents_count_Valid() const{
    return m_total_documents_count_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1EvaluationMetrics::getTruePositivesCount() const {
    return m_true_positives_count;
}
void OAIGoogleCloudDocumentaiV1EvaluationMetrics::setTruePositivesCount(const qint32 &true_positives_count) {
    m_true_positives_count = true_positives_count;
    m_true_positives_count_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_true_positives_count_Set() const{
    return m_true_positives_count_isSet;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::is_true_positives_count_Valid() const{
    return m_true_positives_count_isValid;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_f1_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_false_negatives_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_false_positives_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ground_truth_document_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ground_truth_occurrences_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predicted_document_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predicted_occurrences_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_documents_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_true_positives_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1EvaluationMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
