/**
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo() {
    this->initializeModel();
}

OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::~OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo() {}

void OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::initializeModel() {

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_bold_isSet = false;
    m_bold_isValid = false;

    m_font_size_isSet = false;
    m_font_size_isValid = false;

    m_font_type_isSet = false;
    m_font_type_isValid = false;

    m_font_weight_isSet = false;
    m_font_weight_isValid = false;

    m_handwritten_isSet = false;
    m_handwritten_isValid = false;

    m_italic_isSet = false;
    m_italic_isValid = false;

    m_letter_spacing_isSet = false;
    m_letter_spacing_isValid = false;

    m_pixel_font_size_isSet = false;
    m_pixel_font_size_isValid = false;

    m_smallcaps_isSet = false;
    m_smallcaps_isValid = false;

    m_strikeout_isSet = false;
    m_strikeout_isValid = false;

    m_subscript_isSet = false;
    m_subscript_isValid = false;

    m_superscript_isSet = false;
    m_superscript_isValid = false;

    m_text_color_isSet = false;
    m_text_color_isValid = false;

    m_underlined_isSet = false;
    m_underlined_isValid = false;
}

void OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::fromJsonObject(QJsonObject json) {

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("backgroundColor")]);
    m_background_color_isSet = !json[QString("backgroundColor")].isNull() && m_background_color_isValid;

    m_bold_isValid = ::OpenAPI::fromJsonValue(m_bold, json[QString("bold")]);
    m_bold_isSet = !json[QString("bold")].isNull() && m_bold_isValid;

    m_font_size_isValid = ::OpenAPI::fromJsonValue(m_font_size, json[QString("fontSize")]);
    m_font_size_isSet = !json[QString("fontSize")].isNull() && m_font_size_isValid;

    m_font_type_isValid = ::OpenAPI::fromJsonValue(m_font_type, json[QString("fontType")]);
    m_font_type_isSet = !json[QString("fontType")].isNull() && m_font_type_isValid;

    m_font_weight_isValid = ::OpenAPI::fromJsonValue(m_font_weight, json[QString("fontWeight")]);
    m_font_weight_isSet = !json[QString("fontWeight")].isNull() && m_font_weight_isValid;

    m_handwritten_isValid = ::OpenAPI::fromJsonValue(m_handwritten, json[QString("handwritten")]);
    m_handwritten_isSet = !json[QString("handwritten")].isNull() && m_handwritten_isValid;

    m_italic_isValid = ::OpenAPI::fromJsonValue(m_italic, json[QString("italic")]);
    m_italic_isSet = !json[QString("italic")].isNull() && m_italic_isValid;

    m_letter_spacing_isValid = ::OpenAPI::fromJsonValue(m_letter_spacing, json[QString("letterSpacing")]);
    m_letter_spacing_isSet = !json[QString("letterSpacing")].isNull() && m_letter_spacing_isValid;

    m_pixel_font_size_isValid = ::OpenAPI::fromJsonValue(m_pixel_font_size, json[QString("pixelFontSize")]);
    m_pixel_font_size_isSet = !json[QString("pixelFontSize")].isNull() && m_pixel_font_size_isValid;

    m_smallcaps_isValid = ::OpenAPI::fromJsonValue(m_smallcaps, json[QString("smallcaps")]);
    m_smallcaps_isSet = !json[QString("smallcaps")].isNull() && m_smallcaps_isValid;

    m_strikeout_isValid = ::OpenAPI::fromJsonValue(m_strikeout, json[QString("strikeout")]);
    m_strikeout_isSet = !json[QString("strikeout")].isNull() && m_strikeout_isValid;

    m_subscript_isValid = ::OpenAPI::fromJsonValue(m_subscript, json[QString("subscript")]);
    m_subscript_isSet = !json[QString("subscript")].isNull() && m_subscript_isValid;

    m_superscript_isValid = ::OpenAPI::fromJsonValue(m_superscript, json[QString("superscript")]);
    m_superscript_isSet = !json[QString("superscript")].isNull() && m_superscript_isValid;

    m_text_color_isValid = ::OpenAPI::fromJsonValue(m_text_color, json[QString("textColor")]);
    m_text_color_isSet = !json[QString("textColor")].isNull() && m_text_color_isValid;

    m_underlined_isValid = ::OpenAPI::fromJsonValue(m_underlined, json[QString("underlined")]);
    m_underlined_isSet = !json[QString("underlined")].isNull() && m_underlined_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_background_color.isSet()) {
        obj.insert(QString("backgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_bold_isSet) {
        obj.insert(QString("bold"), ::OpenAPI::toJsonValue(m_bold));
    }
    if (m_font_size_isSet) {
        obj.insert(QString("fontSize"), ::OpenAPI::toJsonValue(m_font_size));
    }
    if (m_font_type_isSet) {
        obj.insert(QString("fontType"), ::OpenAPI::toJsonValue(m_font_type));
    }
    if (m_font_weight_isSet) {
        obj.insert(QString("fontWeight"), ::OpenAPI::toJsonValue(m_font_weight));
    }
    if (m_handwritten_isSet) {
        obj.insert(QString("handwritten"), ::OpenAPI::toJsonValue(m_handwritten));
    }
    if (m_italic_isSet) {
        obj.insert(QString("italic"), ::OpenAPI::toJsonValue(m_italic));
    }
    if (m_letter_spacing_isSet) {
        obj.insert(QString("letterSpacing"), ::OpenAPI::toJsonValue(m_letter_spacing));
    }
    if (m_pixel_font_size_isSet) {
        obj.insert(QString("pixelFontSize"), ::OpenAPI::toJsonValue(m_pixel_font_size));
    }
    if (m_smallcaps_isSet) {
        obj.insert(QString("smallcaps"), ::OpenAPI::toJsonValue(m_smallcaps));
    }
    if (m_strikeout_isSet) {
        obj.insert(QString("strikeout"), ::OpenAPI::toJsonValue(m_strikeout));
    }
    if (m_subscript_isSet) {
        obj.insert(QString("subscript"), ::OpenAPI::toJsonValue(m_subscript));
    }
    if (m_superscript_isSet) {
        obj.insert(QString("superscript"), ::OpenAPI::toJsonValue(m_superscript));
    }
    if (m_text_color.isSet()) {
        obj.insert(QString("textColor"), ::OpenAPI::toJsonValue(m_text_color));
    }
    if (m_underlined_isSet) {
        obj.insert(QString("underlined"), ::OpenAPI::toJsonValue(m_underlined));
    }
    return obj;
}

OAIGoogleTypeColor OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::getBackgroundColor() const {
    return m_background_color;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::setBackgroundColor(const OAIGoogleTypeColor &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_background_color_Valid() const{
    return m_background_color_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::isBold() const {
    return m_bold;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::setBold(const bool &bold) {
    m_bold = bold;
    m_bold_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_bold_Set() const{
    return m_bold_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_bold_Valid() const{
    return m_bold_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::getFontSize() const {
    return m_font_size;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::setFontSize(const qint32 &font_size) {
    m_font_size = font_size;
    m_font_size_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_font_size_Set() const{
    return m_font_size_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_font_size_Valid() const{
    return m_font_size_isValid;
}

QString OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::getFontType() const {
    return m_font_type;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::setFontType(const QString &font_type) {
    m_font_type = font_type;
    m_font_type_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_font_type_Set() const{
    return m_font_type_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_font_type_Valid() const{
    return m_font_type_isValid;
}

qint32 OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::getFontWeight() const {
    return m_font_weight;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::setFontWeight(const qint32 &font_weight) {
    m_font_weight = font_weight;
    m_font_weight_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_font_weight_Set() const{
    return m_font_weight_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_font_weight_Valid() const{
    return m_font_weight_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::isHandwritten() const {
    return m_handwritten;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::setHandwritten(const bool &handwritten) {
    m_handwritten = handwritten;
    m_handwritten_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_handwritten_Set() const{
    return m_handwritten_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_handwritten_Valid() const{
    return m_handwritten_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::isItalic() const {
    return m_italic;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::setItalic(const bool &italic) {
    m_italic = italic;
    m_italic_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_italic_Set() const{
    return m_italic_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_italic_Valid() const{
    return m_italic_isValid;
}

double OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::getLetterSpacing() const {
    return m_letter_spacing;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::setLetterSpacing(const double &letter_spacing) {
    m_letter_spacing = letter_spacing;
    m_letter_spacing_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_letter_spacing_Set() const{
    return m_letter_spacing_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_letter_spacing_Valid() const{
    return m_letter_spacing_isValid;
}

double OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::getPixelFontSize() const {
    return m_pixel_font_size;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::setPixelFontSize(const double &pixel_font_size) {
    m_pixel_font_size = pixel_font_size;
    m_pixel_font_size_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_pixel_font_size_Set() const{
    return m_pixel_font_size_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_pixel_font_size_Valid() const{
    return m_pixel_font_size_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::isSmallcaps() const {
    return m_smallcaps;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::setSmallcaps(const bool &smallcaps) {
    m_smallcaps = smallcaps;
    m_smallcaps_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_smallcaps_Set() const{
    return m_smallcaps_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_smallcaps_Valid() const{
    return m_smallcaps_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::isStrikeout() const {
    return m_strikeout;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::setStrikeout(const bool &strikeout) {
    m_strikeout = strikeout;
    m_strikeout_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_strikeout_Set() const{
    return m_strikeout_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_strikeout_Valid() const{
    return m_strikeout_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::isSubscript() const {
    return m_subscript;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::setSubscript(const bool &subscript) {
    m_subscript = subscript;
    m_subscript_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_subscript_Set() const{
    return m_subscript_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_subscript_Valid() const{
    return m_subscript_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::isSuperscript() const {
    return m_superscript;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::setSuperscript(const bool &superscript) {
    m_superscript = superscript;
    m_superscript_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_superscript_Set() const{
    return m_superscript_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_superscript_Valid() const{
    return m_superscript_isValid;
}

OAIGoogleTypeColor OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::getTextColor() const {
    return m_text_color;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::setTextColor(const OAIGoogleTypeColor &text_color) {
    m_text_color = text_color;
    m_text_color_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_text_color_Set() const{
    return m_text_color_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_text_color_Valid() const{
    return m_text_color_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::isUnderlined() const {
    return m_underlined;
}
void OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::setUnderlined(const bool &underlined) {
    m_underlined = underlined;
    m_underlined_isSet = true;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_underlined_Set() const{
    return m_underlined_isSet;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::is_underlined_Valid() const{
    return m_underlined_isValid;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handwritten_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_italic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_letter_spacing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pixel_font_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smallcaps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strikeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscript_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_superscript_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_underlined_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDocumentaiV1beta2DocumentPageTokenStyleInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
