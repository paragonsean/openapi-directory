/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentProvenance;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentTextAnchor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This message is used for text changes aka. OCR corrections.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:46.913641-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDocumentaiV1beta1DocumentTextChange {
  public static final String SERIALIZED_NAME_CHANGED_TEXT = "changedText";
  @SerializedName(SERIALIZED_NAME_CHANGED_TEXT)
  private String changedText;

  public static final String SERIALIZED_NAME_PROVENANCE = "provenance";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PROVENANCE)
  private List<GoogleCloudDocumentaiV1beta1DocumentProvenance> provenance = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEXT_ANCHOR = "textAnchor";
  @SerializedName(SERIALIZED_NAME_TEXT_ANCHOR)
  private GoogleCloudDocumentaiV1beta1DocumentTextAnchor textAnchor;

  public GoogleCloudDocumentaiV1beta1DocumentTextChange() {
  }

  public GoogleCloudDocumentaiV1beta1DocumentTextChange changedText(String changedText) {
    this.changedText = changedText;
    return this;
  }

  /**
   * The text that replaces the text identified in the &#x60;text_anchor&#x60;.
   * @return changedText
   */
  @javax.annotation.Nullable
  public String getChangedText() {
    return changedText;
  }

  public void setChangedText(String changedText) {
    this.changedText = changedText;
  }


  @Deprecated
  public GoogleCloudDocumentaiV1beta1DocumentTextChange provenance(List<GoogleCloudDocumentaiV1beta1DocumentProvenance> provenance) {
    this.provenance = provenance;
    return this;
  }

  public GoogleCloudDocumentaiV1beta1DocumentTextChange addProvenanceItem(GoogleCloudDocumentaiV1beta1DocumentProvenance provenanceItem) {
    if (this.provenance == null) {
      this.provenance = new ArrayList<>();
    }
    this.provenance.add(provenanceItem);
    return this;
  }

  /**
   * The history of this annotation.
   * @return provenance
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta1DocumentProvenance> getProvenance() {
    return provenance;
  }

  @Deprecated
  public void setProvenance(List<GoogleCloudDocumentaiV1beta1DocumentProvenance> provenance) {
    this.provenance = provenance;
  }


  public GoogleCloudDocumentaiV1beta1DocumentTextChange textAnchor(GoogleCloudDocumentaiV1beta1DocumentTextAnchor textAnchor) {
    this.textAnchor = textAnchor;
    return this;
  }

  /**
   * Get textAnchor
   * @return textAnchor
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1beta1DocumentTextAnchor getTextAnchor() {
    return textAnchor;
  }

  public void setTextAnchor(GoogleCloudDocumentaiV1beta1DocumentTextAnchor textAnchor) {
    this.textAnchor = textAnchor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDocumentaiV1beta1DocumentTextChange googleCloudDocumentaiV1beta1DocumentTextChange = (GoogleCloudDocumentaiV1beta1DocumentTextChange) o;
    return Objects.equals(this.changedText, googleCloudDocumentaiV1beta1DocumentTextChange.changedText) &&
        Objects.equals(this.provenance, googleCloudDocumentaiV1beta1DocumentTextChange.provenance) &&
        Objects.equals(this.textAnchor, googleCloudDocumentaiV1beta1DocumentTextChange.textAnchor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changedText, provenance, textAnchor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDocumentaiV1beta1DocumentTextChange {\n");
    sb.append("    changedText: ").append(toIndentedString(changedText)).append("\n");
    sb.append("    provenance: ").append(toIndentedString(provenance)).append("\n");
    sb.append("    textAnchor: ").append(toIndentedString(textAnchor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changedText");
    openapiFields.add("provenance");
    openapiFields.add("textAnchor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDocumentaiV1beta1DocumentTextChange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDocumentaiV1beta1DocumentTextChange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDocumentaiV1beta1DocumentTextChange is not found in the empty JSON string", GoogleCloudDocumentaiV1beta1DocumentTextChange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDocumentaiV1beta1DocumentTextChange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDocumentaiV1beta1DocumentTextChange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("changedText") != null && !jsonObj.get("changedText").isJsonNull()) && !jsonObj.get("changedText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changedText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changedText").toString()));
      }
      if (jsonObj.get("provenance") != null && !jsonObj.get("provenance").isJsonNull()) {
        JsonArray jsonArrayprovenance = jsonObj.getAsJsonArray("provenance");
        if (jsonArrayprovenance != null) {
          // ensure the json data is an array
          if (!jsonObj.get("provenance").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `provenance` to be an array in the JSON string but got `%s`", jsonObj.get("provenance").toString()));
          }

          // validate the optional field `provenance` (array)
          for (int i = 0; i < jsonArrayprovenance.size(); i++) {
            GoogleCloudDocumentaiV1beta1DocumentProvenance.validateJsonElement(jsonArrayprovenance.get(i));
          };
        }
      }
      // validate the optional field `textAnchor`
      if (jsonObj.get("textAnchor") != null && !jsonObj.get("textAnchor").isJsonNull()) {
        GoogleCloudDocumentaiV1beta1DocumentTextAnchor.validateJsonElement(jsonObj.get("textAnchor"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDocumentaiV1beta1DocumentTextChange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDocumentaiV1beta1DocumentTextChange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDocumentaiV1beta1DocumentTextChange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDocumentaiV1beta1DocumentTextChange.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDocumentaiV1beta1DocumentTextChange>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDocumentaiV1beta1DocumentTextChange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDocumentaiV1beta1DocumentTextChange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDocumentaiV1beta1DocumentTextChange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDocumentaiV1beta1DocumentTextChange
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDocumentaiV1beta1DocumentTextChange
   */
  public static GoogleCloudDocumentaiV1beta1DocumentTextChange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDocumentaiV1beta1DocumentTextChange.class);
  }

  /**
   * Convert an instance of GoogleCloudDocumentaiV1beta1DocumentTextChange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

