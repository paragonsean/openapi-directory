/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDocumentaiV1BoundingPoly;
import org.openapitools.client.model.GoogleCloudDocumentaiV1DocumentTextAnchor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Visual element describing a layout unit on a page.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:46.913641-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDocumentaiV1DocumentPageLayout {
  public static final String SERIALIZED_NAME_BOUNDING_POLY = "boundingPoly";
  @SerializedName(SERIALIZED_NAME_BOUNDING_POLY)
  private GoogleCloudDocumentaiV1BoundingPoly boundingPoly;

  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private Float confidence;

  /**
   * Detected orientation for the Layout.
   */
  @JsonAdapter(OrientationEnum.Adapter.class)
  public enum OrientationEnum {
    ORIENTATION_UNSPECIFIED("ORIENTATION_UNSPECIFIED"),
    
    PAGE_UP("PAGE_UP"),
    
    PAGE_RIGHT("PAGE_RIGHT"),
    
    PAGE_DOWN("PAGE_DOWN"),
    
    PAGE_LEFT("PAGE_LEFT");

    private String value;

    OrientationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrientationEnum fromValue(String value) {
      for (OrientationEnum b : OrientationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrientationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrientationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrientationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrientationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrientationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORIENTATION = "orientation";
  @SerializedName(SERIALIZED_NAME_ORIENTATION)
  private OrientationEnum orientation;

  public static final String SERIALIZED_NAME_TEXT_ANCHOR = "textAnchor";
  @SerializedName(SERIALIZED_NAME_TEXT_ANCHOR)
  private GoogleCloudDocumentaiV1DocumentTextAnchor textAnchor;

  public GoogleCloudDocumentaiV1DocumentPageLayout() {
  }

  public GoogleCloudDocumentaiV1DocumentPageLayout boundingPoly(GoogleCloudDocumentaiV1BoundingPoly boundingPoly) {
    this.boundingPoly = boundingPoly;
    return this;
  }

  /**
   * Get boundingPoly
   * @return boundingPoly
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1BoundingPoly getBoundingPoly() {
    return boundingPoly;
  }

  public void setBoundingPoly(GoogleCloudDocumentaiV1BoundingPoly boundingPoly) {
    this.boundingPoly = boundingPoly;
  }


  public GoogleCloudDocumentaiV1DocumentPageLayout confidence(Float confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range &#x60;[0, 1]&#x60;.
   * @return confidence
   */
  @javax.annotation.Nullable
  public Float getConfidence() {
    return confidence;
  }

  public void setConfidence(Float confidence) {
    this.confidence = confidence;
  }


  public GoogleCloudDocumentaiV1DocumentPageLayout orientation(OrientationEnum orientation) {
    this.orientation = orientation;
    return this;
  }

  /**
   * Detected orientation for the Layout.
   * @return orientation
   */
  @javax.annotation.Nullable
  public OrientationEnum getOrientation() {
    return orientation;
  }

  public void setOrientation(OrientationEnum orientation) {
    this.orientation = orientation;
  }


  public GoogleCloudDocumentaiV1DocumentPageLayout textAnchor(GoogleCloudDocumentaiV1DocumentTextAnchor textAnchor) {
    this.textAnchor = textAnchor;
    return this;
  }

  /**
   * Get textAnchor
   * @return textAnchor
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1DocumentTextAnchor getTextAnchor() {
    return textAnchor;
  }

  public void setTextAnchor(GoogleCloudDocumentaiV1DocumentTextAnchor textAnchor) {
    this.textAnchor = textAnchor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDocumentaiV1DocumentPageLayout googleCloudDocumentaiV1DocumentPageLayout = (GoogleCloudDocumentaiV1DocumentPageLayout) o;
    return Objects.equals(this.boundingPoly, googleCloudDocumentaiV1DocumentPageLayout.boundingPoly) &&
        Objects.equals(this.confidence, googleCloudDocumentaiV1DocumentPageLayout.confidence) &&
        Objects.equals(this.orientation, googleCloudDocumentaiV1DocumentPageLayout.orientation) &&
        Objects.equals(this.textAnchor, googleCloudDocumentaiV1DocumentPageLayout.textAnchor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boundingPoly, confidence, orientation, textAnchor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDocumentaiV1DocumentPageLayout {\n");
    sb.append("    boundingPoly: ").append(toIndentedString(boundingPoly)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("    textAnchor: ").append(toIndentedString(textAnchor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boundingPoly");
    openapiFields.add("confidence");
    openapiFields.add("orientation");
    openapiFields.add("textAnchor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDocumentaiV1DocumentPageLayout
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDocumentaiV1DocumentPageLayout.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDocumentaiV1DocumentPageLayout is not found in the empty JSON string", GoogleCloudDocumentaiV1DocumentPageLayout.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDocumentaiV1DocumentPageLayout.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDocumentaiV1DocumentPageLayout` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `boundingPoly`
      if (jsonObj.get("boundingPoly") != null && !jsonObj.get("boundingPoly").isJsonNull()) {
        GoogleCloudDocumentaiV1BoundingPoly.validateJsonElement(jsonObj.get("boundingPoly"));
      }
      if ((jsonObj.get("orientation") != null && !jsonObj.get("orientation").isJsonNull()) && !jsonObj.get("orientation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orientation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orientation").toString()));
      }
      // validate the optional field `orientation`
      if (jsonObj.get("orientation") != null && !jsonObj.get("orientation").isJsonNull()) {
        OrientationEnum.validateJsonElement(jsonObj.get("orientation"));
      }
      // validate the optional field `textAnchor`
      if (jsonObj.get("textAnchor") != null && !jsonObj.get("textAnchor").isJsonNull()) {
        GoogleCloudDocumentaiV1DocumentTextAnchor.validateJsonElement(jsonObj.get("textAnchor"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDocumentaiV1DocumentPageLayout.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDocumentaiV1DocumentPageLayout' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDocumentaiV1DocumentPageLayout> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDocumentaiV1DocumentPageLayout.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDocumentaiV1DocumentPageLayout>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDocumentaiV1DocumentPageLayout value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDocumentaiV1DocumentPageLayout read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDocumentaiV1DocumentPageLayout given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDocumentaiV1DocumentPageLayout
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDocumentaiV1DocumentPageLayout
   */
  public static GoogleCloudDocumentaiV1DocumentPageLayout fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDocumentaiV1DocumentPageLayout.class);
  }

  /**
   * Convert an instance of GoogleCloudDocumentaiV1DocumentPageLayout to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

