/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudDocumentaiV1BatchDocumentsInputConfig;
import org.openapitools.client.model.GoogleCloudDocumentaiV1DocumentOutputConfig;
import org.openapitools.client.model.GoogleCloudDocumentaiV1ProcessOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for BatchProcessDocuments.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:46.913641-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDocumentaiV1BatchProcessRequest {
  public static final String SERIALIZED_NAME_DOCUMENT_OUTPUT_CONFIG = "documentOutputConfig";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_OUTPUT_CONFIG)
  private GoogleCloudDocumentaiV1DocumentOutputConfig documentOutputConfig;

  public static final String SERIALIZED_NAME_INPUT_DOCUMENTS = "inputDocuments";
  @SerializedName(SERIALIZED_NAME_INPUT_DOCUMENTS)
  private GoogleCloudDocumentaiV1BatchDocumentsInputConfig inputDocuments;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_PROCESS_OPTIONS = "processOptions";
  @SerializedName(SERIALIZED_NAME_PROCESS_OPTIONS)
  private GoogleCloudDocumentaiV1ProcessOptions processOptions;

  public static final String SERIALIZED_NAME_SKIP_HUMAN_REVIEW = "skipHumanReview";
  @SerializedName(SERIALIZED_NAME_SKIP_HUMAN_REVIEW)
  private Boolean skipHumanReview;

  public GoogleCloudDocumentaiV1BatchProcessRequest() {
  }

  public GoogleCloudDocumentaiV1BatchProcessRequest documentOutputConfig(GoogleCloudDocumentaiV1DocumentOutputConfig documentOutputConfig) {
    this.documentOutputConfig = documentOutputConfig;
    return this;
  }

  /**
   * Get documentOutputConfig
   * @return documentOutputConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1DocumentOutputConfig getDocumentOutputConfig() {
    return documentOutputConfig;
  }

  public void setDocumentOutputConfig(GoogleCloudDocumentaiV1DocumentOutputConfig documentOutputConfig) {
    this.documentOutputConfig = documentOutputConfig;
  }


  public GoogleCloudDocumentaiV1BatchProcessRequest inputDocuments(GoogleCloudDocumentaiV1BatchDocumentsInputConfig inputDocuments) {
    this.inputDocuments = inputDocuments;
    return this;
  }

  /**
   * Get inputDocuments
   * @return inputDocuments
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1BatchDocumentsInputConfig getInputDocuments() {
    return inputDocuments;
  }

  public void setInputDocuments(GoogleCloudDocumentaiV1BatchDocumentsInputConfig inputDocuments) {
    this.inputDocuments = inputDocuments;
  }


  public GoogleCloudDocumentaiV1BatchProcessRequest labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public GoogleCloudDocumentaiV1BatchProcessRequest putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. The labels with user-defined metadata for the request. Label keys and values can be no longer than 63 characters (Unicode codepoints) and can only contain lowercase letters, numeric characters, underscores, and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public GoogleCloudDocumentaiV1BatchProcessRequest processOptions(GoogleCloudDocumentaiV1ProcessOptions processOptions) {
    this.processOptions = processOptions;
    return this;
  }

  /**
   * Get processOptions
   * @return processOptions
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1ProcessOptions getProcessOptions() {
    return processOptions;
  }

  public void setProcessOptions(GoogleCloudDocumentaiV1ProcessOptions processOptions) {
    this.processOptions = processOptions;
  }


  public GoogleCloudDocumentaiV1BatchProcessRequest skipHumanReview(Boolean skipHumanReview) {
    this.skipHumanReview = skipHumanReview;
    return this;
  }

  /**
   * Whether human review should be skipped for this request. Default to &#x60;false&#x60;.
   * @return skipHumanReview
   */
  @javax.annotation.Nullable
  public Boolean getSkipHumanReview() {
    return skipHumanReview;
  }

  public void setSkipHumanReview(Boolean skipHumanReview) {
    this.skipHumanReview = skipHumanReview;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDocumentaiV1BatchProcessRequest googleCloudDocumentaiV1BatchProcessRequest = (GoogleCloudDocumentaiV1BatchProcessRequest) o;
    return Objects.equals(this.documentOutputConfig, googleCloudDocumentaiV1BatchProcessRequest.documentOutputConfig) &&
        Objects.equals(this.inputDocuments, googleCloudDocumentaiV1BatchProcessRequest.inputDocuments) &&
        Objects.equals(this.labels, googleCloudDocumentaiV1BatchProcessRequest.labels) &&
        Objects.equals(this.processOptions, googleCloudDocumentaiV1BatchProcessRequest.processOptions) &&
        Objects.equals(this.skipHumanReview, googleCloudDocumentaiV1BatchProcessRequest.skipHumanReview);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentOutputConfig, inputDocuments, labels, processOptions, skipHumanReview);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDocumentaiV1BatchProcessRequest {\n");
    sb.append("    documentOutputConfig: ").append(toIndentedString(documentOutputConfig)).append("\n");
    sb.append("    inputDocuments: ").append(toIndentedString(inputDocuments)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    processOptions: ").append(toIndentedString(processOptions)).append("\n");
    sb.append("    skipHumanReview: ").append(toIndentedString(skipHumanReview)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentOutputConfig");
    openapiFields.add("inputDocuments");
    openapiFields.add("labels");
    openapiFields.add("processOptions");
    openapiFields.add("skipHumanReview");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDocumentaiV1BatchProcessRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDocumentaiV1BatchProcessRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDocumentaiV1BatchProcessRequest is not found in the empty JSON string", GoogleCloudDocumentaiV1BatchProcessRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDocumentaiV1BatchProcessRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDocumentaiV1BatchProcessRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `documentOutputConfig`
      if (jsonObj.get("documentOutputConfig") != null && !jsonObj.get("documentOutputConfig").isJsonNull()) {
        GoogleCloudDocumentaiV1DocumentOutputConfig.validateJsonElement(jsonObj.get("documentOutputConfig"));
      }
      // validate the optional field `inputDocuments`
      if (jsonObj.get("inputDocuments") != null && !jsonObj.get("inputDocuments").isJsonNull()) {
        GoogleCloudDocumentaiV1BatchDocumentsInputConfig.validateJsonElement(jsonObj.get("inputDocuments"));
      }
      // validate the optional field `processOptions`
      if (jsonObj.get("processOptions") != null && !jsonObj.get("processOptions").isJsonNull()) {
        GoogleCloudDocumentaiV1ProcessOptions.validateJsonElement(jsonObj.get("processOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDocumentaiV1BatchProcessRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDocumentaiV1BatchProcessRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDocumentaiV1BatchProcessRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDocumentaiV1BatchProcessRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDocumentaiV1BatchProcessRequest>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDocumentaiV1BatchProcessRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDocumentaiV1BatchProcessRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDocumentaiV1BatchProcessRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDocumentaiV1BatchProcessRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDocumentaiV1BatchProcessRequest
   */
  public static GoogleCloudDocumentaiV1BatchProcessRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDocumentaiV1BatchProcessRequest.class);
  }

  /**
   * Convert an instance of GoogleCloudDocumentaiV1BatchProcessRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

