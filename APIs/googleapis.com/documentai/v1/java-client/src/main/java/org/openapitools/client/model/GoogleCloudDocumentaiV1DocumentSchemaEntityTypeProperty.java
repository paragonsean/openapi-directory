/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines properties that can be part of the entity type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:46.913641-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Occurrence type limits the number of instances an entity type appears in the document.
   */
  @JsonAdapter(OccurrenceTypeEnum.Adapter.class)
  public enum OccurrenceTypeEnum {
    OCCURRENCE_TYPE_UNSPECIFIED("OCCURRENCE_TYPE_UNSPECIFIED"),
    
    OPTIONAL_ONCE("OPTIONAL_ONCE"),
    
    OPTIONAL_MULTIPLE("OPTIONAL_MULTIPLE"),
    
    REQUIRED_ONCE("REQUIRED_ONCE"),
    
    REQUIRED_MULTIPLE("REQUIRED_MULTIPLE");

    private String value;

    OccurrenceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OccurrenceTypeEnum fromValue(String value) {
      for (OccurrenceTypeEnum b : OccurrenceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OccurrenceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OccurrenceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OccurrenceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OccurrenceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OccurrenceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OCCURRENCE_TYPE = "occurrenceType";
  @SerializedName(SERIALIZED_NAME_OCCURRENCE_TYPE)
  private OccurrenceTypeEnum occurrenceType;

  public static final String SERIALIZED_NAME_VALUE_TYPE = "valueType";
  @SerializedName(SERIALIZED_NAME_VALUE_TYPE)
  private String valueType;

  public GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty() {
  }

  public GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * User defined name for the property.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the property. Follows the same guidelines as the EntityType name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty occurrenceType(OccurrenceTypeEnum occurrenceType) {
    this.occurrenceType = occurrenceType;
    return this;
  }

  /**
   * Occurrence type limits the number of instances an entity type appears in the document.
   * @return occurrenceType
   */
  @javax.annotation.Nullable
  public OccurrenceTypeEnum getOccurrenceType() {
    return occurrenceType;
  }

  public void setOccurrenceType(OccurrenceTypeEnum occurrenceType) {
    this.occurrenceType = occurrenceType;
  }


  public GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty valueType(String valueType) {
    this.valueType = valueType;
    return this;
  }

  /**
   * A reference to the value type of the property. This type is subject to the same conventions as the &#x60;Entity.base_types&#x60; field.
   * @return valueType
   */
  @javax.annotation.Nullable
  public String getValueType() {
    return valueType;
  }

  public void setValueType(String valueType) {
    this.valueType = valueType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty googleCloudDocumentaiV1DocumentSchemaEntityTypeProperty = (GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty) o;
    return Objects.equals(this.displayName, googleCloudDocumentaiV1DocumentSchemaEntityTypeProperty.displayName) &&
        Objects.equals(this.name, googleCloudDocumentaiV1DocumentSchemaEntityTypeProperty.name) &&
        Objects.equals(this.occurrenceType, googleCloudDocumentaiV1DocumentSchemaEntityTypeProperty.occurrenceType) &&
        Objects.equals(this.valueType, googleCloudDocumentaiV1DocumentSchemaEntityTypeProperty.valueType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, name, occurrenceType, valueType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    occurrenceType: ").append(toIndentedString(occurrenceType)).append("\n");
    sb.append("    valueType: ").append(toIndentedString(valueType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("name");
    openapiFields.add("occurrenceType");
    openapiFields.add("valueType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty is not found in the empty JSON string", GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("occurrenceType") != null && !jsonObj.get("occurrenceType").isJsonNull()) && !jsonObj.get("occurrenceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `occurrenceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("occurrenceType").toString()));
      }
      // validate the optional field `occurrenceType`
      if (jsonObj.get("occurrenceType") != null && !jsonObj.get("occurrenceType").isJsonNull()) {
        OccurrenceTypeEnum.validateJsonElement(jsonObj.get("occurrenceType"));
      }
      if ((jsonObj.get("valueType") != null && !jsonObj.get("valueType").isJsonNull()) && !jsonObj.get("valueType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty
   */
  public static GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty.class);
  }

  /**
   * Convert an instance of GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

