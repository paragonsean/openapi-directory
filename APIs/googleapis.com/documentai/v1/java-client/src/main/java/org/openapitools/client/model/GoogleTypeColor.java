/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of &#x60;java.awt.Color&#x60; in Java; it can also be trivially provided to UIColor&#39;s &#x60;+colorWithRed:green:blue:alpha&#x60; method in iOS; and, with just a little work, it can be easily formatted into a CSS &#x60;rgba()&#x60; string in JavaScript. This reference page doesn&#39;t have information about the absolute color space that should be used to interpret the RGB valueâ€”for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most &#x60;1e-5&#x60;. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha &#x3D; protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red &#x3D; (float) color.getRed(); float green &#x3D; (float) color.getGreen(); float blue &#x3D; (float) color.getBlue(); float denominator &#x3D; 255.0; Color.Builder resultBuilder &#x3D; Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha &#x3D; color.getAlpha(); if (alpha !&#x3D; 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red &#x3D; [protocolor red]; float green &#x3D; [protocolor green]; float blue &#x3D; [protocolor blue]; FloatValue* alpha_wrapper &#x3D; [protocolor alpha]; float alpha &#x3D; 1.0; if (alpha_wrapper !&#x3D; nil) { alpha &#x3D; [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&amp;red green:&amp;green blue:&amp;blue alpha:&amp;alpha]) { return nil; } Color* result &#x3D; [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha &lt;&#x3D; 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor &#x3D; function(rgb_color) { var redFrac &#x3D; rgb_color.red || 0.0; var greenFrac &#x3D; rgb_color.green || 0.0; var blueFrac &#x3D; rgb_color.blue || 0.0; var red &#x3D; Math.floor(redFrac * 255); var green &#x3D; Math.floor(greenFrac * 255); var blue &#x3D; Math.floor(blueFrac * 255); if (!(&#39;alpha&#39; in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac &#x3D; rgb_color.alpha.value || 0.0; var rgbParams &#x3D; [red, green, blue].join(&#39;,&#39;); return [&#39;rgba(&#39;, rgbParams, &#39;,&#39;, alphaFrac, &#39;)&#39;].join(&#39;&#39;); }; var rgbToCssColor &#x3D; function(red, green, blue) { var rgbNumber &#x3D; new Number((red &lt;&lt; 16) | (green &lt;&lt; 8) | blue); var hexString &#x3D; rgbNumber.toString(16); var missingZeros &#x3D; 6 - hexString.length; var resultBuilder &#x3D; [&#39;#&#39;]; for (var i &#x3D; 0; i &lt; missingZeros; i++) { resultBuilder.push(&#39;0&#39;); } resultBuilder.push(hexString); return resultBuilder.join(&#39;&#39;); }; // ...
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:46.913641-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleTypeColor {
  public static final String SERIALIZED_NAME_ALPHA = "alpha";
  @SerializedName(SERIALIZED_NAME_ALPHA)
  private Float alpha;

  public static final String SERIALIZED_NAME_BLUE = "blue";
  @SerializedName(SERIALIZED_NAME_BLUE)
  private Float blue;

  public static final String SERIALIZED_NAME_GREEN = "green";
  @SerializedName(SERIALIZED_NAME_GREEN)
  private Float green;

  public static final String SERIALIZED_NAME_RED = "red";
  @SerializedName(SERIALIZED_NAME_RED)
  private Float red;

  public GoogleTypeColor() {
  }

  public GoogleTypeColor alpha(Float alpha) {
    this.alpha = alpha;
    return this;
  }

  /**
   * The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: &#x60;pixel color &#x3D; alpha * (this color) + (1.0 - alpha) * (background color)&#x60; This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).
   * @return alpha
   */
  @javax.annotation.Nullable
  public Float getAlpha() {
    return alpha;
  }

  public void setAlpha(Float alpha) {
    this.alpha = alpha;
  }


  public GoogleTypeColor blue(Float blue) {
    this.blue = blue;
    return this;
  }

  /**
   * The amount of blue in the color as a value in the interval [0, 1].
   * @return blue
   */
  @javax.annotation.Nullable
  public Float getBlue() {
    return blue;
  }

  public void setBlue(Float blue) {
    this.blue = blue;
  }


  public GoogleTypeColor green(Float green) {
    this.green = green;
    return this;
  }

  /**
   * The amount of green in the color as a value in the interval [0, 1].
   * @return green
   */
  @javax.annotation.Nullable
  public Float getGreen() {
    return green;
  }

  public void setGreen(Float green) {
    this.green = green;
  }


  public GoogleTypeColor red(Float red) {
    this.red = red;
    return this;
  }

  /**
   * The amount of red in the color as a value in the interval [0, 1].
   * @return red
   */
  @javax.annotation.Nullable
  public Float getRed() {
    return red;
  }

  public void setRed(Float red) {
    this.red = red;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleTypeColor googleTypeColor = (GoogleTypeColor) o;
    return Objects.equals(this.alpha, googleTypeColor.alpha) &&
        Objects.equals(this.blue, googleTypeColor.blue) &&
        Objects.equals(this.green, googleTypeColor.green) &&
        Objects.equals(this.red, googleTypeColor.red);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alpha, blue, green, red);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleTypeColor {\n");
    sb.append("    alpha: ").append(toIndentedString(alpha)).append("\n");
    sb.append("    blue: ").append(toIndentedString(blue)).append("\n");
    sb.append("    green: ").append(toIndentedString(green)).append("\n");
    sb.append("    red: ").append(toIndentedString(red)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alpha");
    openapiFields.add("blue");
    openapiFields.add("green");
    openapiFields.add("red");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleTypeColor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleTypeColor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleTypeColor is not found in the empty JSON string", GoogleTypeColor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleTypeColor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleTypeColor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleTypeColor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleTypeColor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleTypeColor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleTypeColor.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleTypeColor>() {
           @Override
           public void write(JsonWriter out, GoogleTypeColor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleTypeColor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleTypeColor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleTypeColor
   * @throws IOException if the JSON string is invalid with respect to GoogleTypeColor
   */
  public static GoogleTypeColor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleTypeColor.class);
  }

  /**
   * Convert an instance of GoogleTypeColor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

