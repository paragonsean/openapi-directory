/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDocumentaiV1beta1DocumentProvenanceParent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Structure to identify provenance relationships between annotations in different revisions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:46.913641-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDocumentaiV1beta1DocumentProvenance {
  public static final String SERIALIZED_NAME_ID = "id";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_PARENTS = "parents";
  @SerializedName(SERIALIZED_NAME_PARENTS)
  private List<GoogleCloudDocumentaiV1beta1DocumentProvenanceParent> parents = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVISION = "revision";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_REVISION)
  private Integer revision;

  /**
   * The type of provenance operation.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    OPERATION_TYPE_UNSPECIFIED("OPERATION_TYPE_UNSPECIFIED"),
    
    ADD("ADD"),
    
    REMOVE("REMOVE"),
    
    UPDATE("UPDATE"),
    
    REPLACE("REPLACE"),
    
    EVAL_REQUESTED("EVAL_REQUESTED"),
    
    EVAL_APPROVED("EVAL_APPROVED"),
    
    EVAL_SKIPPED("EVAL_SKIPPED");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public GoogleCloudDocumentaiV1beta1DocumentProvenance() {
  }

  @Deprecated
  public GoogleCloudDocumentaiV1beta1DocumentProvenance id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * The Id of this operation. Needs to be unique within the scope of the revision.
   * @return id
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  @Deprecated
  public void setId(Integer id) {
    this.id = id;
  }


  public GoogleCloudDocumentaiV1beta1DocumentProvenance parents(List<GoogleCloudDocumentaiV1beta1DocumentProvenanceParent> parents) {
    this.parents = parents;
    return this;
  }

  public GoogleCloudDocumentaiV1beta1DocumentProvenance addParentsItem(GoogleCloudDocumentaiV1beta1DocumentProvenanceParent parentsItem) {
    if (this.parents == null) {
      this.parents = new ArrayList<>();
    }
    this.parents.add(parentsItem);
    return this;
  }

  /**
   * References to the original elements that are replaced.
   * @return parents
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDocumentaiV1beta1DocumentProvenanceParent> getParents() {
    return parents;
  }

  public void setParents(List<GoogleCloudDocumentaiV1beta1DocumentProvenanceParent> parents) {
    this.parents = parents;
  }


  @Deprecated
  public GoogleCloudDocumentaiV1beta1DocumentProvenance revision(Integer revision) {
    this.revision = revision;
    return this;
  }

  /**
   * The index of the revision that produced this element.
   * @return revision
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getRevision() {
    return revision;
  }

  @Deprecated
  public void setRevision(Integer revision) {
    this.revision = revision;
  }


  public GoogleCloudDocumentaiV1beta1DocumentProvenance type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of provenance operation.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDocumentaiV1beta1DocumentProvenance googleCloudDocumentaiV1beta1DocumentProvenance = (GoogleCloudDocumentaiV1beta1DocumentProvenance) o;
    return Objects.equals(this.id, googleCloudDocumentaiV1beta1DocumentProvenance.id) &&
        Objects.equals(this.parents, googleCloudDocumentaiV1beta1DocumentProvenance.parents) &&
        Objects.equals(this.revision, googleCloudDocumentaiV1beta1DocumentProvenance.revision) &&
        Objects.equals(this.type, googleCloudDocumentaiV1beta1DocumentProvenance.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, parents, revision, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDocumentaiV1beta1DocumentProvenance {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    parents: ").append(toIndentedString(parents)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("parents");
    openapiFields.add("revision");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDocumentaiV1beta1DocumentProvenance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDocumentaiV1beta1DocumentProvenance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDocumentaiV1beta1DocumentProvenance is not found in the empty JSON string", GoogleCloudDocumentaiV1beta1DocumentProvenance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDocumentaiV1beta1DocumentProvenance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDocumentaiV1beta1DocumentProvenance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("parents") != null && !jsonObj.get("parents").isJsonNull()) {
        JsonArray jsonArrayparents = jsonObj.getAsJsonArray("parents");
        if (jsonArrayparents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parents` to be an array in the JSON string but got `%s`", jsonObj.get("parents").toString()));
          }

          // validate the optional field `parents` (array)
          for (int i = 0; i < jsonArrayparents.size(); i++) {
            GoogleCloudDocumentaiV1beta1DocumentProvenanceParent.validateJsonElement(jsonArrayparents.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDocumentaiV1beta1DocumentProvenance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDocumentaiV1beta1DocumentProvenance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDocumentaiV1beta1DocumentProvenance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDocumentaiV1beta1DocumentProvenance.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDocumentaiV1beta1DocumentProvenance>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDocumentaiV1beta1DocumentProvenance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDocumentaiV1beta1DocumentProvenance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDocumentaiV1beta1DocumentProvenance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDocumentaiV1beta1DocumentProvenance
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDocumentaiV1beta1DocumentProvenance
   */
  public static GoogleCloudDocumentaiV1beta1DocumentProvenance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDocumentaiV1beta1DocumentProvenance.class);
  }

  /**
   * Convert an instance of GoogleCloudDocumentaiV1beta1DocumentProvenance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

