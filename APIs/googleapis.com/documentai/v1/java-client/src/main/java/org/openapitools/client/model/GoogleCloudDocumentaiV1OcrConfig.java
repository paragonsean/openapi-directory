/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDocumentaiV1OcrConfigHints;
import org.openapitools.client.model.GoogleCloudDocumentaiV1OcrConfigPremiumFeatures;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Config for Document OCR.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:46.913641-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDocumentaiV1OcrConfig {
  public static final String SERIALIZED_NAME_ADVANCED_OCR_OPTIONS = "advancedOcrOptions";
  @SerializedName(SERIALIZED_NAME_ADVANCED_OCR_OPTIONS)
  private List<String> advancedOcrOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPUTE_STYLE_INFO = "computeStyleInfo";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_COMPUTE_STYLE_INFO)
  private Boolean computeStyleInfo;

  public static final String SERIALIZED_NAME_DISABLE_CHARACTER_BOXES_DETECTION = "disableCharacterBoxesDetection";
  @SerializedName(SERIALIZED_NAME_DISABLE_CHARACTER_BOXES_DETECTION)
  private Boolean disableCharacterBoxesDetection;

  public static final String SERIALIZED_NAME_ENABLE_IMAGE_QUALITY_SCORES = "enableImageQualityScores";
  @SerializedName(SERIALIZED_NAME_ENABLE_IMAGE_QUALITY_SCORES)
  private Boolean enableImageQualityScores;

  public static final String SERIALIZED_NAME_ENABLE_NATIVE_PDF_PARSING = "enableNativePdfParsing";
  @SerializedName(SERIALIZED_NAME_ENABLE_NATIVE_PDF_PARSING)
  private Boolean enableNativePdfParsing;

  public static final String SERIALIZED_NAME_ENABLE_SYMBOL = "enableSymbol";
  @SerializedName(SERIALIZED_NAME_ENABLE_SYMBOL)
  private Boolean enableSymbol;

  public static final String SERIALIZED_NAME_HINTS = "hints";
  @SerializedName(SERIALIZED_NAME_HINTS)
  private GoogleCloudDocumentaiV1OcrConfigHints hints;

  public static final String SERIALIZED_NAME_PREMIUM_FEATURES = "premiumFeatures";
  @SerializedName(SERIALIZED_NAME_PREMIUM_FEATURES)
  private GoogleCloudDocumentaiV1OcrConfigPremiumFeatures premiumFeatures;

  public GoogleCloudDocumentaiV1OcrConfig() {
  }

  public GoogleCloudDocumentaiV1OcrConfig advancedOcrOptions(List<String> advancedOcrOptions) {
    this.advancedOcrOptions = advancedOcrOptions;
    return this;
  }

  public GoogleCloudDocumentaiV1OcrConfig addAdvancedOcrOptionsItem(String advancedOcrOptionsItem) {
    if (this.advancedOcrOptions == null) {
      this.advancedOcrOptions = new ArrayList<>();
    }
    this.advancedOcrOptions.add(advancedOcrOptionsItem);
    return this;
  }

  /**
   * A list of advanced OCR options to further fine-tune OCR behavior. Current valid values are: - &#x60;legacy_layout&#x60;: a heuristics layout detection algorithm, which serves as an alternative to the current ML-based layout detection algorithm. Customers can choose the best suitable layout algorithm based on their situation.
   * @return advancedOcrOptions
   */
  @javax.annotation.Nullable
  public List<String> getAdvancedOcrOptions() {
    return advancedOcrOptions;
  }

  public void setAdvancedOcrOptions(List<String> advancedOcrOptions) {
    this.advancedOcrOptions = advancedOcrOptions;
  }


  @Deprecated
  public GoogleCloudDocumentaiV1OcrConfig computeStyleInfo(Boolean computeStyleInfo) {
    this.computeStyleInfo = computeStyleInfo;
    return this;
  }

  /**
   * Turn on font identification model and return font style information. Deprecated, use PremiumFeatures.compute_style_info instead.
   * @return computeStyleInfo
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getComputeStyleInfo() {
    return computeStyleInfo;
  }

  @Deprecated
  public void setComputeStyleInfo(Boolean computeStyleInfo) {
    this.computeStyleInfo = computeStyleInfo;
  }


  public GoogleCloudDocumentaiV1OcrConfig disableCharacterBoxesDetection(Boolean disableCharacterBoxesDetection) {
    this.disableCharacterBoxesDetection = disableCharacterBoxesDetection;
    return this;
  }

  /**
   * Turn off character box detector in OCR engine. Character box detection is enabled by default in OCR 2.0 (and later) processors.
   * @return disableCharacterBoxesDetection
   */
  @javax.annotation.Nullable
  public Boolean getDisableCharacterBoxesDetection() {
    return disableCharacterBoxesDetection;
  }

  public void setDisableCharacterBoxesDetection(Boolean disableCharacterBoxesDetection) {
    this.disableCharacterBoxesDetection = disableCharacterBoxesDetection;
  }


  public GoogleCloudDocumentaiV1OcrConfig enableImageQualityScores(Boolean enableImageQualityScores) {
    this.enableImageQualityScores = enableImageQualityScores;
    return this;
  }

  /**
   * Enables intelligent document quality scores after OCR. Can help with diagnosing why OCR responses are of poor quality for a given input. Adds additional latency comparable to regular OCR to the process call.
   * @return enableImageQualityScores
   */
  @javax.annotation.Nullable
  public Boolean getEnableImageQualityScores() {
    return enableImageQualityScores;
  }

  public void setEnableImageQualityScores(Boolean enableImageQualityScores) {
    this.enableImageQualityScores = enableImageQualityScores;
  }


  public GoogleCloudDocumentaiV1OcrConfig enableNativePdfParsing(Boolean enableNativePdfParsing) {
    this.enableNativePdfParsing = enableNativePdfParsing;
    return this;
  }

  /**
   * Enables special handling for PDFs with existing text information. Results in better text extraction quality in such PDF inputs.
   * @return enableNativePdfParsing
   */
  @javax.annotation.Nullable
  public Boolean getEnableNativePdfParsing() {
    return enableNativePdfParsing;
  }

  public void setEnableNativePdfParsing(Boolean enableNativePdfParsing) {
    this.enableNativePdfParsing = enableNativePdfParsing;
  }


  public GoogleCloudDocumentaiV1OcrConfig enableSymbol(Boolean enableSymbol) {
    this.enableSymbol = enableSymbol;
    return this;
  }

  /**
   * Includes symbol level OCR information if set to true.
   * @return enableSymbol
   */
  @javax.annotation.Nullable
  public Boolean getEnableSymbol() {
    return enableSymbol;
  }

  public void setEnableSymbol(Boolean enableSymbol) {
    this.enableSymbol = enableSymbol;
  }


  public GoogleCloudDocumentaiV1OcrConfig hints(GoogleCloudDocumentaiV1OcrConfigHints hints) {
    this.hints = hints;
    return this;
  }

  /**
   * Get hints
   * @return hints
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1OcrConfigHints getHints() {
    return hints;
  }

  public void setHints(GoogleCloudDocumentaiV1OcrConfigHints hints) {
    this.hints = hints;
  }


  public GoogleCloudDocumentaiV1OcrConfig premiumFeatures(GoogleCloudDocumentaiV1OcrConfigPremiumFeatures premiumFeatures) {
    this.premiumFeatures = premiumFeatures;
    return this;
  }

  /**
   * Get premiumFeatures
   * @return premiumFeatures
   */
  @javax.annotation.Nullable
  public GoogleCloudDocumentaiV1OcrConfigPremiumFeatures getPremiumFeatures() {
    return premiumFeatures;
  }

  public void setPremiumFeatures(GoogleCloudDocumentaiV1OcrConfigPremiumFeatures premiumFeatures) {
    this.premiumFeatures = premiumFeatures;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDocumentaiV1OcrConfig googleCloudDocumentaiV1OcrConfig = (GoogleCloudDocumentaiV1OcrConfig) o;
    return Objects.equals(this.advancedOcrOptions, googleCloudDocumentaiV1OcrConfig.advancedOcrOptions) &&
        Objects.equals(this.computeStyleInfo, googleCloudDocumentaiV1OcrConfig.computeStyleInfo) &&
        Objects.equals(this.disableCharacterBoxesDetection, googleCloudDocumentaiV1OcrConfig.disableCharacterBoxesDetection) &&
        Objects.equals(this.enableImageQualityScores, googleCloudDocumentaiV1OcrConfig.enableImageQualityScores) &&
        Objects.equals(this.enableNativePdfParsing, googleCloudDocumentaiV1OcrConfig.enableNativePdfParsing) &&
        Objects.equals(this.enableSymbol, googleCloudDocumentaiV1OcrConfig.enableSymbol) &&
        Objects.equals(this.hints, googleCloudDocumentaiV1OcrConfig.hints) &&
        Objects.equals(this.premiumFeatures, googleCloudDocumentaiV1OcrConfig.premiumFeatures);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advancedOcrOptions, computeStyleInfo, disableCharacterBoxesDetection, enableImageQualityScores, enableNativePdfParsing, enableSymbol, hints, premiumFeatures);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDocumentaiV1OcrConfig {\n");
    sb.append("    advancedOcrOptions: ").append(toIndentedString(advancedOcrOptions)).append("\n");
    sb.append("    computeStyleInfo: ").append(toIndentedString(computeStyleInfo)).append("\n");
    sb.append("    disableCharacterBoxesDetection: ").append(toIndentedString(disableCharacterBoxesDetection)).append("\n");
    sb.append("    enableImageQualityScores: ").append(toIndentedString(enableImageQualityScores)).append("\n");
    sb.append("    enableNativePdfParsing: ").append(toIndentedString(enableNativePdfParsing)).append("\n");
    sb.append("    enableSymbol: ").append(toIndentedString(enableSymbol)).append("\n");
    sb.append("    hints: ").append(toIndentedString(hints)).append("\n");
    sb.append("    premiumFeatures: ").append(toIndentedString(premiumFeatures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advancedOcrOptions");
    openapiFields.add("computeStyleInfo");
    openapiFields.add("disableCharacterBoxesDetection");
    openapiFields.add("enableImageQualityScores");
    openapiFields.add("enableNativePdfParsing");
    openapiFields.add("enableSymbol");
    openapiFields.add("hints");
    openapiFields.add("premiumFeatures");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDocumentaiV1OcrConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDocumentaiV1OcrConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDocumentaiV1OcrConfig is not found in the empty JSON string", GoogleCloudDocumentaiV1OcrConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDocumentaiV1OcrConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDocumentaiV1OcrConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("advancedOcrOptions") != null && !jsonObj.get("advancedOcrOptions").isJsonNull() && !jsonObj.get("advancedOcrOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `advancedOcrOptions` to be an array in the JSON string but got `%s`", jsonObj.get("advancedOcrOptions").toString()));
      }
      // validate the optional field `hints`
      if (jsonObj.get("hints") != null && !jsonObj.get("hints").isJsonNull()) {
        GoogleCloudDocumentaiV1OcrConfigHints.validateJsonElement(jsonObj.get("hints"));
      }
      // validate the optional field `premiumFeatures`
      if (jsonObj.get("premiumFeatures") != null && !jsonObj.get("premiumFeatures").isJsonNull()) {
        GoogleCloudDocumentaiV1OcrConfigPremiumFeatures.validateJsonElement(jsonObj.get("premiumFeatures"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDocumentaiV1OcrConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDocumentaiV1OcrConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDocumentaiV1OcrConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDocumentaiV1OcrConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDocumentaiV1OcrConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDocumentaiV1OcrConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDocumentaiV1OcrConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDocumentaiV1OcrConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDocumentaiV1OcrConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDocumentaiV1OcrConfig
   */
  public static GoogleCloudDocumentaiV1OcrConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDocumentaiV1OcrConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudDocumentaiV1OcrConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

