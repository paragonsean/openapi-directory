/*
 * Cloud Document AI API
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleTypeColor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Font and other text style attributes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:46.913641-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo {
  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "backgroundColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private GoogleTypeColor backgroundColor;

  public static final String SERIALIZED_NAME_BOLD = "bold";
  @SerializedName(SERIALIZED_NAME_BOLD)
  private Boolean bold;

  public static final String SERIALIZED_NAME_FONT_SIZE = "fontSize";
  @SerializedName(SERIALIZED_NAME_FONT_SIZE)
  private Integer fontSize;

  public static final String SERIALIZED_NAME_FONT_TYPE = "fontType";
  @SerializedName(SERIALIZED_NAME_FONT_TYPE)
  private String fontType;

  public static final String SERIALIZED_NAME_FONT_WEIGHT = "fontWeight";
  @SerializedName(SERIALIZED_NAME_FONT_WEIGHT)
  private Integer fontWeight;

  public static final String SERIALIZED_NAME_HANDWRITTEN = "handwritten";
  @SerializedName(SERIALIZED_NAME_HANDWRITTEN)
  private Boolean handwritten;

  public static final String SERIALIZED_NAME_ITALIC = "italic";
  @SerializedName(SERIALIZED_NAME_ITALIC)
  private Boolean italic;

  public static final String SERIALIZED_NAME_LETTER_SPACING = "letterSpacing";
  @SerializedName(SERIALIZED_NAME_LETTER_SPACING)
  private Double letterSpacing;

  public static final String SERIALIZED_NAME_PIXEL_FONT_SIZE = "pixelFontSize";
  @SerializedName(SERIALIZED_NAME_PIXEL_FONT_SIZE)
  private Double pixelFontSize;

  public static final String SERIALIZED_NAME_SMALLCAPS = "smallcaps";
  @SerializedName(SERIALIZED_NAME_SMALLCAPS)
  private Boolean smallcaps;

  public static final String SERIALIZED_NAME_STRIKEOUT = "strikeout";
  @SerializedName(SERIALIZED_NAME_STRIKEOUT)
  private Boolean strikeout;

  public static final String SERIALIZED_NAME_SUBSCRIPT = "subscript";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPT)
  private Boolean subscript;

  public static final String SERIALIZED_NAME_SUPERSCRIPT = "superscript";
  @SerializedName(SERIALIZED_NAME_SUPERSCRIPT)
  private Boolean superscript;

  public static final String SERIALIZED_NAME_TEXT_COLOR = "textColor";
  @SerializedName(SERIALIZED_NAME_TEXT_COLOR)
  private GoogleTypeColor textColor;

  public static final String SERIALIZED_NAME_UNDERLINED = "underlined";
  @SerializedName(SERIALIZED_NAME_UNDERLINED)
  private Boolean underlined;

  public GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo() {
  }

  public GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo backgroundColor(GoogleTypeColor backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * Get backgroundColor
   * @return backgroundColor
   */
  @javax.annotation.Nullable
  public GoogleTypeColor getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(GoogleTypeColor backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo bold(Boolean bold) {
    this.bold = bold;
    return this;
  }

  /**
   * Whether the text is bold (equivalent to font_weight is at least &#x60;700&#x60;).
   * @return bold
   */
  @javax.annotation.Nullable
  public Boolean getBold() {
    return bold;
  }

  public void setBold(Boolean bold) {
    this.bold = bold;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo fontSize(Integer fontSize) {
    this.fontSize = fontSize;
    return this;
  }

  /**
   * Font size in points (&#x60;1&#x60; point is &#x60;¹⁄₇₂&#x60; inches).
   * @return fontSize
   */
  @javax.annotation.Nullable
  public Integer getFontSize() {
    return fontSize;
  }

  public void setFontSize(Integer fontSize) {
    this.fontSize = fontSize;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo fontType(String fontType) {
    this.fontType = fontType;
    return this;
  }

  /**
   * Name or style of the font.
   * @return fontType
   */
  @javax.annotation.Nullable
  public String getFontType() {
    return fontType;
  }

  public void setFontType(String fontType) {
    this.fontType = fontType;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo fontWeight(Integer fontWeight) {
    this.fontWeight = fontWeight;
    return this;
  }

  /**
   * TrueType weight on a scale &#x60;100&#x60; (thin) to &#x60;1000&#x60; (ultra-heavy). Normal is &#x60;400&#x60;, bold is &#x60;700&#x60;.
   * @return fontWeight
   */
  @javax.annotation.Nullable
  public Integer getFontWeight() {
    return fontWeight;
  }

  public void setFontWeight(Integer fontWeight) {
    this.fontWeight = fontWeight;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo handwritten(Boolean handwritten) {
    this.handwritten = handwritten;
    return this;
  }

  /**
   * Whether the text is handwritten.
   * @return handwritten
   */
  @javax.annotation.Nullable
  public Boolean getHandwritten() {
    return handwritten;
  }

  public void setHandwritten(Boolean handwritten) {
    this.handwritten = handwritten;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo italic(Boolean italic) {
    this.italic = italic;
    return this;
  }

  /**
   * Whether the text is italic.
   * @return italic
   */
  @javax.annotation.Nullable
  public Boolean getItalic() {
    return italic;
  }

  public void setItalic(Boolean italic) {
    this.italic = italic;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo letterSpacing(Double letterSpacing) {
    this.letterSpacing = letterSpacing;
    return this;
  }

  /**
   * Letter spacing in points.
   * @return letterSpacing
   */
  @javax.annotation.Nullable
  public Double getLetterSpacing() {
    return letterSpacing;
  }

  public void setLetterSpacing(Double letterSpacing) {
    this.letterSpacing = letterSpacing;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo pixelFontSize(Double pixelFontSize) {
    this.pixelFontSize = pixelFontSize;
    return this;
  }

  /**
   * Font size in pixels, equal to _unrounded font_size_ * _resolution_ ÷ &#x60;72.0&#x60;.
   * @return pixelFontSize
   */
  @javax.annotation.Nullable
  public Double getPixelFontSize() {
    return pixelFontSize;
  }

  public void setPixelFontSize(Double pixelFontSize) {
    this.pixelFontSize = pixelFontSize;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo smallcaps(Boolean smallcaps) {
    this.smallcaps = smallcaps;
    return this;
  }

  /**
   * Whether the text is in small caps.
   * @return smallcaps
   */
  @javax.annotation.Nullable
  public Boolean getSmallcaps() {
    return smallcaps;
  }

  public void setSmallcaps(Boolean smallcaps) {
    this.smallcaps = smallcaps;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo strikeout(Boolean strikeout) {
    this.strikeout = strikeout;
    return this;
  }

  /**
   * Whether the text is strikethrough.
   * @return strikeout
   */
  @javax.annotation.Nullable
  public Boolean getStrikeout() {
    return strikeout;
  }

  public void setStrikeout(Boolean strikeout) {
    this.strikeout = strikeout;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo subscript(Boolean subscript) {
    this.subscript = subscript;
    return this;
  }

  /**
   * Whether the text is a subscript.
   * @return subscript
   */
  @javax.annotation.Nullable
  public Boolean getSubscript() {
    return subscript;
  }

  public void setSubscript(Boolean subscript) {
    this.subscript = subscript;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo superscript(Boolean superscript) {
    this.superscript = superscript;
    return this;
  }

  /**
   * Whether the text is a superscript.
   * @return superscript
   */
  @javax.annotation.Nullable
  public Boolean getSuperscript() {
    return superscript;
  }

  public void setSuperscript(Boolean superscript) {
    this.superscript = superscript;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo textColor(GoogleTypeColor textColor) {
    this.textColor = textColor;
    return this;
  }

  /**
   * Get textColor
   * @return textColor
   */
  @javax.annotation.Nullable
  public GoogleTypeColor getTextColor() {
    return textColor;
  }

  public void setTextColor(GoogleTypeColor textColor) {
    this.textColor = textColor;
  }


  public GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo underlined(Boolean underlined) {
    this.underlined = underlined;
    return this;
  }

  /**
   * Whether the text is underlined.
   * @return underlined
   */
  @javax.annotation.Nullable
  public Boolean getUnderlined() {
    return underlined;
  }

  public void setUnderlined(Boolean underlined) {
    this.underlined = underlined;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo googleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo = (GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo) o;
    return Objects.equals(this.backgroundColor, googleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.backgroundColor) &&
        Objects.equals(this.bold, googleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.bold) &&
        Objects.equals(this.fontSize, googleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.fontSize) &&
        Objects.equals(this.fontType, googleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.fontType) &&
        Objects.equals(this.fontWeight, googleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.fontWeight) &&
        Objects.equals(this.handwritten, googleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.handwritten) &&
        Objects.equals(this.italic, googleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.italic) &&
        Objects.equals(this.letterSpacing, googleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.letterSpacing) &&
        Objects.equals(this.pixelFontSize, googleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.pixelFontSize) &&
        Objects.equals(this.smallcaps, googleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.smallcaps) &&
        Objects.equals(this.strikeout, googleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.strikeout) &&
        Objects.equals(this.subscript, googleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.subscript) &&
        Objects.equals(this.superscript, googleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.superscript) &&
        Objects.equals(this.textColor, googleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.textColor) &&
        Objects.equals(this.underlined, googleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.underlined);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColor, bold, fontSize, fontType, fontWeight, handwritten, italic, letterSpacing, pixelFontSize, smallcaps, strikeout, subscript, superscript, textColor, underlined);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo {\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    bold: ").append(toIndentedString(bold)).append("\n");
    sb.append("    fontSize: ").append(toIndentedString(fontSize)).append("\n");
    sb.append("    fontType: ").append(toIndentedString(fontType)).append("\n");
    sb.append("    fontWeight: ").append(toIndentedString(fontWeight)).append("\n");
    sb.append("    handwritten: ").append(toIndentedString(handwritten)).append("\n");
    sb.append("    italic: ").append(toIndentedString(italic)).append("\n");
    sb.append("    letterSpacing: ").append(toIndentedString(letterSpacing)).append("\n");
    sb.append("    pixelFontSize: ").append(toIndentedString(pixelFontSize)).append("\n");
    sb.append("    smallcaps: ").append(toIndentedString(smallcaps)).append("\n");
    sb.append("    strikeout: ").append(toIndentedString(strikeout)).append("\n");
    sb.append("    subscript: ").append(toIndentedString(subscript)).append("\n");
    sb.append("    superscript: ").append(toIndentedString(superscript)).append("\n");
    sb.append("    textColor: ").append(toIndentedString(textColor)).append("\n");
    sb.append("    underlined: ").append(toIndentedString(underlined)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backgroundColor");
    openapiFields.add("bold");
    openapiFields.add("fontSize");
    openapiFields.add("fontType");
    openapiFields.add("fontWeight");
    openapiFields.add("handwritten");
    openapiFields.add("italic");
    openapiFields.add("letterSpacing");
    openapiFields.add("pixelFontSize");
    openapiFields.add("smallcaps");
    openapiFields.add("strikeout");
    openapiFields.add("subscript");
    openapiFields.add("superscript");
    openapiFields.add("textColor");
    openapiFields.add("underlined");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo is not found in the empty JSON string", GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backgroundColor`
      if (jsonObj.get("backgroundColor") != null && !jsonObj.get("backgroundColor").isJsonNull()) {
        GoogleTypeColor.validateJsonElement(jsonObj.get("backgroundColor"));
      }
      if ((jsonObj.get("fontType") != null && !jsonObj.get("fontType").isJsonNull()) && !jsonObj.get("fontType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fontType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fontType").toString()));
      }
      // validate the optional field `textColor`
      if (jsonObj.get("textColor") != null && !jsonObj.get("textColor").isJsonNull()) {
        GoogleTypeColor.validateJsonElement(jsonObj.get("textColor"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo
   */
  public static GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo.class);
  }

  /**
   * Convert an instance of GoogleCloudDocumentaiV1beta1DocumentPageTokenStyleInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

