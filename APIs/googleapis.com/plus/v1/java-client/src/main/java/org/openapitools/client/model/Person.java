/*
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PersonAgeRange;
import org.openapitools.client.model.PersonCover;
import org.openapitools.client.model.PersonEmailsInner;
import org.openapitools.client.model.PersonImage;
import org.openapitools.client.model.PersonName;
import org.openapitools.client.model.PersonOrganizationsInner;
import org.openapitools.client.model.PersonPlacesLivedInner;
import org.openapitools.client.model.PersonUrlsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Person
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:56.191141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Person {
  public static final String SERIALIZED_NAME_ABOUT_ME = "aboutMe";
  @SerializedName(SERIALIZED_NAME_ABOUT_ME)
  private String aboutMe;

  public static final String SERIALIZED_NAME_AGE_RANGE = "ageRange";
  @SerializedName(SERIALIZED_NAME_AGE_RANGE)
  private PersonAgeRange ageRange;

  public static final String SERIALIZED_NAME_BIRTHDAY = "birthday";
  @SerializedName(SERIALIZED_NAME_BIRTHDAY)
  private String birthday;

  public static final String SERIALIZED_NAME_BRAGGING_RIGHTS = "braggingRights";
  @SerializedName(SERIALIZED_NAME_BRAGGING_RIGHTS)
  private String braggingRights;

  public static final String SERIALIZED_NAME_CIRCLED_BY_COUNT = "circledByCount";
  @SerializedName(SERIALIZED_NAME_CIRCLED_BY_COUNT)
  private Integer circledByCount;

  public static final String SERIALIZED_NAME_COVER = "cover";
  @SerializedName(SERIALIZED_NAME_COVER)
  private PersonCover cover;

  public static final String SERIALIZED_NAME_CURRENT_LOCATION = "currentLocation";
  @SerializedName(SERIALIZED_NAME_CURRENT_LOCATION)
  private String currentLocation;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private List<PersonEmailsInner> emails = new ArrayList<>();

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private PersonImage image;

  public static final String SERIALIZED_NAME_IS_PLUS_USER = "isPlusUser";
  @SerializedName(SERIALIZED_NAME_IS_PLUS_USER)
  private Boolean isPlusUser;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "plus#person";

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private PersonName name;

  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;

  public static final String SERIALIZED_NAME_OBJECT_TYPE = "objectType";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE)
  private String objectType;

  public static final String SERIALIZED_NAME_OCCUPATION = "occupation";
  @SerializedName(SERIALIZED_NAME_OCCUPATION)
  private String occupation;

  public static final String SERIALIZED_NAME_ORGANIZATIONS = "organizations";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONS)
  private List<PersonOrganizationsInner> organizations = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLACES_LIVED = "placesLived";
  @SerializedName(SERIALIZED_NAME_PLACES_LIVED)
  private List<PersonPlacesLivedInner> placesLived = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLUS_ONE_COUNT = "plusOneCount";
  @SerializedName(SERIALIZED_NAME_PLUS_ONE_COUNT)
  private Integer plusOneCount;

  public static final String SERIALIZED_NAME_RELATIONSHIP_STATUS = "relationshipStatus";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_STATUS)
  private String relationshipStatus;

  public static final String SERIALIZED_NAME_SKILLS = "skills";
  @SerializedName(SERIALIZED_NAME_SKILLS)
  private String skills;

  public static final String SERIALIZED_NAME_TAGLINE = "tagline";
  @SerializedName(SERIALIZED_NAME_TAGLINE)
  private String tagline;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_URLS = "urls";
  @SerializedName(SERIALIZED_NAME_URLS)
  private List<PersonUrlsInner> urls = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERIFIED = "verified";
  @SerializedName(SERIALIZED_NAME_VERIFIED)
  private Boolean verified;

  public Person() {
  }

  public Person aboutMe(String aboutMe) {
    this.aboutMe = aboutMe;
    return this;
  }

  /**
   * A short biography for this person.
   * @return aboutMe
   */
  @javax.annotation.Nullable
  public String getAboutMe() {
    return aboutMe;
  }

  public void setAboutMe(String aboutMe) {
    this.aboutMe = aboutMe;
  }


  public Person ageRange(PersonAgeRange ageRange) {
    this.ageRange = ageRange;
    return this;
  }

  /**
   * Get ageRange
   * @return ageRange
   */
  @javax.annotation.Nullable
  public PersonAgeRange getAgeRange() {
    return ageRange;
  }

  public void setAgeRange(PersonAgeRange ageRange) {
    this.ageRange = ageRange;
  }


  public Person birthday(String birthday) {
    this.birthday = birthday;
    return this;
  }

  /**
   * The person&#39;s date of birth, represented as YYYY-MM-DD.
   * @return birthday
   */
  @javax.annotation.Nullable
  public String getBirthday() {
    return birthday;
  }

  public void setBirthday(String birthday) {
    this.birthday = birthday;
  }


  public Person braggingRights(String braggingRights) {
    this.braggingRights = braggingRights;
    return this;
  }

  /**
   * The \&quot;bragging rights\&quot; line of this person.
   * @return braggingRights
   */
  @javax.annotation.Nullable
  public String getBraggingRights() {
    return braggingRights;
  }

  public void setBraggingRights(String braggingRights) {
    this.braggingRights = braggingRights;
  }


  public Person circledByCount(Integer circledByCount) {
    this.circledByCount = circledByCount;
    return this;
  }

  /**
   * For followers who are visible, the number of people who have added this person or page to a circle.
   * @return circledByCount
   */
  @javax.annotation.Nullable
  public Integer getCircledByCount() {
    return circledByCount;
  }

  public void setCircledByCount(Integer circledByCount) {
    this.circledByCount = circledByCount;
  }


  public Person cover(PersonCover cover) {
    this.cover = cover;
    return this;
  }

  /**
   * Get cover
   * @return cover
   */
  @javax.annotation.Nullable
  public PersonCover getCover() {
    return cover;
  }

  public void setCover(PersonCover cover) {
    this.cover = cover;
  }


  public Person currentLocation(String currentLocation) {
    this.currentLocation = currentLocation;
    return this;
  }

  /**
   * (this field is not currently used)
   * @return currentLocation
   */
  @javax.annotation.Nullable
  public String getCurrentLocation() {
    return currentLocation;
  }

  public void setCurrentLocation(String currentLocation) {
    this.currentLocation = currentLocation;
  }


  public Person displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name of this person, which is suitable for display.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Person domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * The hosted domain name for the user&#39;s Google Apps account. For instance, example.com. The plus.profile.emails.read or email scope is needed to get this domain name.
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public Person emails(List<PersonEmailsInner> emails) {
    this.emails = emails;
    return this;
  }

  public Person addEmailsItem(PersonEmailsInner emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

  /**
   * A list of email addresses that this person has, including their Google account email address, and the public verified email addresses on their Google+ profile. The plus.profile.emails.read scope is needed to retrieve these email addresses, or the email scope can be used to retrieve just the Google account email address.
   * @return emails
   */
  @javax.annotation.Nullable
  public List<PersonEmailsInner> getEmails() {
    return emails;
  }

  public void setEmails(List<PersonEmailsInner> emails) {
    this.emails = emails;
  }


  public Person etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * ETag of this response for caching purposes.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public Person gender(String gender) {
    this.gender = gender;
    return this;
  }

  /**
   * The person&#39;s gender. Possible values include, but are not limited to, the following values:   - \&quot;male\&quot; - Male gender.  - \&quot;female\&quot; - Female gender.  - \&quot;other\&quot; - Other.
   * @return gender
   */
  @javax.annotation.Nullable
  public String getGender() {
    return gender;
  }

  public void setGender(String gender) {
    this.gender = gender;
  }


  public Person id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of this person.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Person image(PersonImage image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public PersonImage getImage() {
    return image;
  }

  public void setImage(PersonImage image) {
    this.image = image;
  }


  public Person isPlusUser(Boolean isPlusUser) {
    this.isPlusUser = isPlusUser;
    return this;
  }

  /**
   * Whether this user has signed up for Google+.
   * @return isPlusUser
   */
  @javax.annotation.Nullable
  public Boolean getIsPlusUser() {
    return isPlusUser;
  }

  public void setIsPlusUser(Boolean isPlusUser) {
    this.isPlusUser = isPlusUser;
  }


  public Person kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies this resource as a person. Value: \&quot;plus#person\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Person language(String language) {
    this.language = language;
    return this;
  }

  /**
   * The user&#39;s preferred language for rendering.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public Person name(PersonName name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public PersonName getName() {
    return name;
  }

  public void setName(PersonName name) {
    this.name = name;
  }


  public Person nickname(String nickname) {
    this.nickname = nickname;
    return this;
  }

  /**
   * The nickname of this person.
   * @return nickname
   */
  @javax.annotation.Nullable
  public String getNickname() {
    return nickname;
  }

  public void setNickname(String nickname) {
    this.nickname = nickname;
  }


  public Person objectType(String objectType) {
    this.objectType = objectType;
    return this;
  }

  /**
   * Type of person within Google+. Possible values include, but are not limited to, the following values:   - \&quot;person\&quot; - represents an actual person.  - \&quot;page\&quot; - represents a page.
   * @return objectType
   */
  @javax.annotation.Nullable
  public String getObjectType() {
    return objectType;
  }

  public void setObjectType(String objectType) {
    this.objectType = objectType;
  }


  public Person occupation(String occupation) {
    this.occupation = occupation;
    return this;
  }

  /**
   * The occupation of this person.
   * @return occupation
   */
  @javax.annotation.Nullable
  public String getOccupation() {
    return occupation;
  }

  public void setOccupation(String occupation) {
    this.occupation = occupation;
  }


  public Person organizations(List<PersonOrganizationsInner> organizations) {
    this.organizations = organizations;
    return this;
  }

  public Person addOrganizationsItem(PersonOrganizationsInner organizationsItem) {
    if (this.organizations == null) {
      this.organizations = new ArrayList<>();
    }
    this.organizations.add(organizationsItem);
    return this;
  }

  /**
   * A list of current or past organizations with which this person is associated.
   * @return organizations
   */
  @javax.annotation.Nullable
  public List<PersonOrganizationsInner> getOrganizations() {
    return organizations;
  }

  public void setOrganizations(List<PersonOrganizationsInner> organizations) {
    this.organizations = organizations;
  }


  public Person placesLived(List<PersonPlacesLivedInner> placesLived) {
    this.placesLived = placesLived;
    return this;
  }

  public Person addPlacesLivedItem(PersonPlacesLivedInner placesLivedItem) {
    if (this.placesLived == null) {
      this.placesLived = new ArrayList<>();
    }
    this.placesLived.add(placesLivedItem);
    return this;
  }

  /**
   * A list of places where this person has lived.
   * @return placesLived
   */
  @javax.annotation.Nullable
  public List<PersonPlacesLivedInner> getPlacesLived() {
    return placesLived;
  }

  public void setPlacesLived(List<PersonPlacesLivedInner> placesLived) {
    this.placesLived = placesLived;
  }


  public Person plusOneCount(Integer plusOneCount) {
    this.plusOneCount = plusOneCount;
    return this;
  }

  /**
   * If a Google+ Page, the number of people who have +1&#39;d this page.
   * @return plusOneCount
   */
  @javax.annotation.Nullable
  public Integer getPlusOneCount() {
    return plusOneCount;
  }

  public void setPlusOneCount(Integer plusOneCount) {
    this.plusOneCount = plusOneCount;
  }


  public Person relationshipStatus(String relationshipStatus) {
    this.relationshipStatus = relationshipStatus;
    return this;
  }

  /**
   * The person&#39;s relationship status. Possible values include, but are not limited to, the following values:   - \&quot;single\&quot; - Person is single.  - \&quot;in_a_relationship\&quot; - Person is in a relationship.  - \&quot;engaged\&quot; - Person is engaged.  - \&quot;married\&quot; - Person is married.  - \&quot;its_complicated\&quot; - The relationship is complicated.  - \&quot;open_relationship\&quot; - Person is in an open relationship.  - \&quot;widowed\&quot; - Person is widowed.  - \&quot;in_domestic_partnership\&quot; - Person is in a domestic partnership.  - \&quot;in_civil_union\&quot; - Person is in a civil union.
   * @return relationshipStatus
   */
  @javax.annotation.Nullable
  public String getRelationshipStatus() {
    return relationshipStatus;
  }

  public void setRelationshipStatus(String relationshipStatus) {
    this.relationshipStatus = relationshipStatus;
  }


  public Person skills(String skills) {
    this.skills = skills;
    return this;
  }

  /**
   * The person&#39;s skills.
   * @return skills
   */
  @javax.annotation.Nullable
  public String getSkills() {
    return skills;
  }

  public void setSkills(String skills) {
    this.skills = skills;
  }


  public Person tagline(String tagline) {
    this.tagline = tagline;
    return this;
  }

  /**
   * The brief description (tagline) of this person.
   * @return tagline
   */
  @javax.annotation.Nullable
  public String getTagline() {
    return tagline;
  }

  public void setTagline(String tagline) {
    this.tagline = tagline;
  }


  public Person url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL of this person&#39;s profile.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Person urls(List<PersonUrlsInner> urls) {
    this.urls = urls;
    return this;
  }

  public Person addUrlsItem(PersonUrlsInner urlsItem) {
    if (this.urls == null) {
      this.urls = new ArrayList<>();
    }
    this.urls.add(urlsItem);
    return this;
  }

  /**
   * A list of URLs for this person.
   * @return urls
   */
  @javax.annotation.Nullable
  public List<PersonUrlsInner> getUrls() {
    return urls;
  }

  public void setUrls(List<PersonUrlsInner> urls) {
    this.urls = urls;
  }


  public Person verified(Boolean verified) {
    this.verified = verified;
    return this;
  }

  /**
   * Whether the person or Google+ Page has been verified.
   * @return verified
   */
  @javax.annotation.Nullable
  public Boolean getVerified() {
    return verified;
  }

  public void setVerified(Boolean verified) {
    this.verified = verified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Person person = (Person) o;
    return Objects.equals(this.aboutMe, person.aboutMe) &&
        Objects.equals(this.ageRange, person.ageRange) &&
        Objects.equals(this.birthday, person.birthday) &&
        Objects.equals(this.braggingRights, person.braggingRights) &&
        Objects.equals(this.circledByCount, person.circledByCount) &&
        Objects.equals(this.cover, person.cover) &&
        Objects.equals(this.currentLocation, person.currentLocation) &&
        Objects.equals(this.displayName, person.displayName) &&
        Objects.equals(this.domain, person.domain) &&
        Objects.equals(this.emails, person.emails) &&
        Objects.equals(this.etag, person.etag) &&
        Objects.equals(this.gender, person.gender) &&
        Objects.equals(this.id, person.id) &&
        Objects.equals(this.image, person.image) &&
        Objects.equals(this.isPlusUser, person.isPlusUser) &&
        Objects.equals(this.kind, person.kind) &&
        Objects.equals(this.language, person.language) &&
        Objects.equals(this.name, person.name) &&
        Objects.equals(this.nickname, person.nickname) &&
        Objects.equals(this.objectType, person.objectType) &&
        Objects.equals(this.occupation, person.occupation) &&
        Objects.equals(this.organizations, person.organizations) &&
        Objects.equals(this.placesLived, person.placesLived) &&
        Objects.equals(this.plusOneCount, person.plusOneCount) &&
        Objects.equals(this.relationshipStatus, person.relationshipStatus) &&
        Objects.equals(this.skills, person.skills) &&
        Objects.equals(this.tagline, person.tagline) &&
        Objects.equals(this.url, person.url) &&
        Objects.equals(this.urls, person.urls) &&
        Objects.equals(this.verified, person.verified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aboutMe, ageRange, birthday, braggingRights, circledByCount, cover, currentLocation, displayName, domain, emails, etag, gender, id, image, isPlusUser, kind, language, name, nickname, objectType, occupation, organizations, placesLived, plusOneCount, relationshipStatus, skills, tagline, url, urls, verified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Person {\n");
    sb.append("    aboutMe: ").append(toIndentedString(aboutMe)).append("\n");
    sb.append("    ageRange: ").append(toIndentedString(ageRange)).append("\n");
    sb.append("    birthday: ").append(toIndentedString(birthday)).append("\n");
    sb.append("    braggingRights: ").append(toIndentedString(braggingRights)).append("\n");
    sb.append("    circledByCount: ").append(toIndentedString(circledByCount)).append("\n");
    sb.append("    cover: ").append(toIndentedString(cover)).append("\n");
    sb.append("    currentLocation: ").append(toIndentedString(currentLocation)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    isPlusUser: ").append(toIndentedString(isPlusUser)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("    occupation: ").append(toIndentedString(occupation)).append("\n");
    sb.append("    organizations: ").append(toIndentedString(organizations)).append("\n");
    sb.append("    placesLived: ").append(toIndentedString(placesLived)).append("\n");
    sb.append("    plusOneCount: ").append(toIndentedString(plusOneCount)).append("\n");
    sb.append("    relationshipStatus: ").append(toIndentedString(relationshipStatus)).append("\n");
    sb.append("    skills: ").append(toIndentedString(skills)).append("\n");
    sb.append("    tagline: ").append(toIndentedString(tagline)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    urls: ").append(toIndentedString(urls)).append("\n");
    sb.append("    verified: ").append(toIndentedString(verified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aboutMe");
    openapiFields.add("ageRange");
    openapiFields.add("birthday");
    openapiFields.add("braggingRights");
    openapiFields.add("circledByCount");
    openapiFields.add("cover");
    openapiFields.add("currentLocation");
    openapiFields.add("displayName");
    openapiFields.add("domain");
    openapiFields.add("emails");
    openapiFields.add("etag");
    openapiFields.add("gender");
    openapiFields.add("id");
    openapiFields.add("image");
    openapiFields.add("isPlusUser");
    openapiFields.add("kind");
    openapiFields.add("language");
    openapiFields.add("name");
    openapiFields.add("nickname");
    openapiFields.add("objectType");
    openapiFields.add("occupation");
    openapiFields.add("organizations");
    openapiFields.add("placesLived");
    openapiFields.add("plusOneCount");
    openapiFields.add("relationshipStatus");
    openapiFields.add("skills");
    openapiFields.add("tagline");
    openapiFields.add("url");
    openapiFields.add("urls");
    openapiFields.add("verified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Person
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Person.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Person is not found in the empty JSON string", Person.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Person.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Person` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aboutMe") != null && !jsonObj.get("aboutMe").isJsonNull()) && !jsonObj.get("aboutMe").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aboutMe` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aboutMe").toString()));
      }
      // validate the optional field `ageRange`
      if (jsonObj.get("ageRange") != null && !jsonObj.get("ageRange").isJsonNull()) {
        PersonAgeRange.validateJsonElement(jsonObj.get("ageRange"));
      }
      if ((jsonObj.get("birthday") != null && !jsonObj.get("birthday").isJsonNull()) && !jsonObj.get("birthday").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthday` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthday").toString()));
      }
      if ((jsonObj.get("braggingRights") != null && !jsonObj.get("braggingRights").isJsonNull()) && !jsonObj.get("braggingRights").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `braggingRights` to be a primitive type in the JSON string but got `%s`", jsonObj.get("braggingRights").toString()));
      }
      // validate the optional field `cover`
      if (jsonObj.get("cover") != null && !jsonObj.get("cover").isJsonNull()) {
        PersonCover.validateJsonElement(jsonObj.get("cover"));
      }
      if ((jsonObj.get("currentLocation") != null && !jsonObj.get("currentLocation").isJsonNull()) && !jsonObj.get("currentLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentLocation").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (jsonObj.get("emails") != null && !jsonObj.get("emails").isJsonNull()) {
        JsonArray jsonArrayemails = jsonObj.getAsJsonArray("emails");
        if (jsonArrayemails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("emails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
          }

          // validate the optional field `emails` (array)
          for (int i = 0; i < jsonArrayemails.size(); i++) {
            PersonEmailsInner.validateJsonElement(jsonArrayemails.get(i));
          };
        }
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        PersonImage.validateJsonElement(jsonObj.get("image"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        PersonName.validateJsonElement(jsonObj.get("name"));
      }
      if ((jsonObj.get("nickname") != null && !jsonObj.get("nickname").isJsonNull()) && !jsonObj.get("nickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickname").toString()));
      }
      if ((jsonObj.get("objectType") != null && !jsonObj.get("objectType").isJsonNull()) && !jsonObj.get("objectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectType").toString()));
      }
      if ((jsonObj.get("occupation") != null && !jsonObj.get("occupation").isJsonNull()) && !jsonObj.get("occupation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `occupation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("occupation").toString()));
      }
      if (jsonObj.get("organizations") != null && !jsonObj.get("organizations").isJsonNull()) {
        JsonArray jsonArrayorganizations = jsonObj.getAsJsonArray("organizations");
        if (jsonArrayorganizations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("organizations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `organizations` to be an array in the JSON string but got `%s`", jsonObj.get("organizations").toString()));
          }

          // validate the optional field `organizations` (array)
          for (int i = 0; i < jsonArrayorganizations.size(); i++) {
            PersonOrganizationsInner.validateJsonElement(jsonArrayorganizations.get(i));
          };
        }
      }
      if (jsonObj.get("placesLived") != null && !jsonObj.get("placesLived").isJsonNull()) {
        JsonArray jsonArrayplacesLived = jsonObj.getAsJsonArray("placesLived");
        if (jsonArrayplacesLived != null) {
          // ensure the json data is an array
          if (!jsonObj.get("placesLived").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `placesLived` to be an array in the JSON string but got `%s`", jsonObj.get("placesLived").toString()));
          }

          // validate the optional field `placesLived` (array)
          for (int i = 0; i < jsonArrayplacesLived.size(); i++) {
            PersonPlacesLivedInner.validateJsonElement(jsonArrayplacesLived.get(i));
          };
        }
      }
      if ((jsonObj.get("relationshipStatus") != null && !jsonObj.get("relationshipStatus").isJsonNull()) && !jsonObj.get("relationshipStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationshipStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationshipStatus").toString()));
      }
      if ((jsonObj.get("skills") != null && !jsonObj.get("skills").isJsonNull()) && !jsonObj.get("skills").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skills` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skills").toString()));
      }
      if ((jsonObj.get("tagline") != null && !jsonObj.get("tagline").isJsonNull()) && !jsonObj.get("tagline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagline").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (jsonObj.get("urls") != null && !jsonObj.get("urls").isJsonNull()) {
        JsonArray jsonArrayurls = jsonObj.getAsJsonArray("urls");
        if (jsonArrayurls != null) {
          // ensure the json data is an array
          if (!jsonObj.get("urls").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `urls` to be an array in the JSON string but got `%s`", jsonObj.get("urls").toString()));
          }

          // validate the optional field `urls` (array)
          for (int i = 0; i < jsonArrayurls.size(); i++) {
            PersonUrlsInner.validateJsonElement(jsonArrayurls.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Person.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Person' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Person> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Person.class));

       return (TypeAdapter<T>) new TypeAdapter<Person>() {
           @Override
           public void write(JsonWriter out, Person value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Person read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Person given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Person
   * @throws IOException if the JSON string is invalid with respect to Person
   */
  public static Person fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Person.class);
  }

  /**
   * Convert an instance of Person to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

