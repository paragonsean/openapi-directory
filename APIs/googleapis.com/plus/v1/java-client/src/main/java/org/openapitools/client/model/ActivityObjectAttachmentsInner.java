/*
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ActivityObjectAttachmentsInnerEmbed;
import org.openapitools.client.model.ActivityObjectAttachmentsInnerFullImage;
import org.openapitools.client.model.ActivityObjectAttachmentsInnerImage;
import org.openapitools.client.model.ActivityObjectAttachmentsInnerThumbnailsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ActivityObjectAttachmentsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:56.191141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActivityObjectAttachmentsInner {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EMBED = "embed";
  @SerializedName(SERIALIZED_NAME_EMBED)
  private ActivityObjectAttachmentsInnerEmbed embed;

  public static final String SERIALIZED_NAME_FULL_IMAGE = "fullImage";
  @SerializedName(SERIALIZED_NAME_FULL_IMAGE)
  private ActivityObjectAttachmentsInnerFullImage fullImage;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private ActivityObjectAttachmentsInnerImage image;

  public static final String SERIALIZED_NAME_OBJECT_TYPE = "objectType";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE)
  private String objectType;

  public static final String SERIALIZED_NAME_THUMBNAILS = "thumbnails";
  @SerializedName(SERIALIZED_NAME_THUMBNAILS)
  private List<ActivityObjectAttachmentsInnerThumbnailsInner> thumbnails = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public ActivityObjectAttachmentsInner() {
  }

  public ActivityObjectAttachmentsInner content(String content) {
    this.content = content;
    return this;
  }

  /**
   * If the attachment is an article, this property contains a snippet of text from the article. It can also include descriptions for other types.
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public ActivityObjectAttachmentsInner displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The title of the attachment, such as a photo caption or an article title.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ActivityObjectAttachmentsInner embed(ActivityObjectAttachmentsInnerEmbed embed) {
    this.embed = embed;
    return this;
  }

  /**
   * Get embed
   * @return embed
   */
  @javax.annotation.Nullable
  public ActivityObjectAttachmentsInnerEmbed getEmbed() {
    return embed;
  }

  public void setEmbed(ActivityObjectAttachmentsInnerEmbed embed) {
    this.embed = embed;
  }


  public ActivityObjectAttachmentsInner fullImage(ActivityObjectAttachmentsInnerFullImage fullImage) {
    this.fullImage = fullImage;
    return this;
  }

  /**
   * Get fullImage
   * @return fullImage
   */
  @javax.annotation.Nullable
  public ActivityObjectAttachmentsInnerFullImage getFullImage() {
    return fullImage;
  }

  public void setFullImage(ActivityObjectAttachmentsInnerFullImage fullImage) {
    this.fullImage = fullImage;
  }


  public ActivityObjectAttachmentsInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the attachment.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ActivityObjectAttachmentsInner image(ActivityObjectAttachmentsInnerImage image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public ActivityObjectAttachmentsInnerImage getImage() {
    return image;
  }

  public void setImage(ActivityObjectAttachmentsInnerImage image) {
    this.image = image;
  }


  public ActivityObjectAttachmentsInner objectType(String objectType) {
    this.objectType = objectType;
    return this;
  }

  /**
   * The type of media object. Possible values include, but are not limited to, the following values:   - \&quot;photo\&quot; - A photo.  - \&quot;album\&quot; - A photo album.  - \&quot;video\&quot; - A video.  - \&quot;article\&quot; - An article, specified by a link.
   * @return objectType
   */
  @javax.annotation.Nullable
  public String getObjectType() {
    return objectType;
  }

  public void setObjectType(String objectType) {
    this.objectType = objectType;
  }


  public ActivityObjectAttachmentsInner thumbnails(List<ActivityObjectAttachmentsInnerThumbnailsInner> thumbnails) {
    this.thumbnails = thumbnails;
    return this;
  }

  public ActivityObjectAttachmentsInner addThumbnailsItem(ActivityObjectAttachmentsInnerThumbnailsInner thumbnailsItem) {
    if (this.thumbnails == null) {
      this.thumbnails = new ArrayList<>();
    }
    this.thumbnails.add(thumbnailsItem);
    return this;
  }

  /**
   * If the attachment is an album, this property is a list of potential additional thumbnails from the album.
   * @return thumbnails
   */
  @javax.annotation.Nullable
  public List<ActivityObjectAttachmentsInnerThumbnailsInner> getThumbnails() {
    return thumbnails;
  }

  public void setThumbnails(List<ActivityObjectAttachmentsInnerThumbnailsInner> thumbnails) {
    this.thumbnails = thumbnails;
  }


  public ActivityObjectAttachmentsInner url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The link to the attachment, which should be of type text/html.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivityObjectAttachmentsInner activityObjectAttachmentsInner = (ActivityObjectAttachmentsInner) o;
    return Objects.equals(this.content, activityObjectAttachmentsInner.content) &&
        Objects.equals(this.displayName, activityObjectAttachmentsInner.displayName) &&
        Objects.equals(this.embed, activityObjectAttachmentsInner.embed) &&
        Objects.equals(this.fullImage, activityObjectAttachmentsInner.fullImage) &&
        Objects.equals(this.id, activityObjectAttachmentsInner.id) &&
        Objects.equals(this.image, activityObjectAttachmentsInner.image) &&
        Objects.equals(this.objectType, activityObjectAttachmentsInner.objectType) &&
        Objects.equals(this.thumbnails, activityObjectAttachmentsInner.thumbnails) &&
        Objects.equals(this.url, activityObjectAttachmentsInner.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, displayName, embed, fullImage, id, image, objectType, thumbnails, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivityObjectAttachmentsInner {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    embed: ").append(toIndentedString(embed)).append("\n");
    sb.append("    fullImage: ").append(toIndentedString(fullImage)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("    thumbnails: ").append(toIndentedString(thumbnails)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("displayName");
    openapiFields.add("embed");
    openapiFields.add("fullImage");
    openapiFields.add("id");
    openapiFields.add("image");
    openapiFields.add("objectType");
    openapiFields.add("thumbnails");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActivityObjectAttachmentsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActivityObjectAttachmentsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivityObjectAttachmentsInner is not found in the empty JSON string", ActivityObjectAttachmentsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActivityObjectAttachmentsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivityObjectAttachmentsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `embed`
      if (jsonObj.get("embed") != null && !jsonObj.get("embed").isJsonNull()) {
        ActivityObjectAttachmentsInnerEmbed.validateJsonElement(jsonObj.get("embed"));
      }
      // validate the optional field `fullImage`
      if (jsonObj.get("fullImage") != null && !jsonObj.get("fullImage").isJsonNull()) {
        ActivityObjectAttachmentsInnerFullImage.validateJsonElement(jsonObj.get("fullImage"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        ActivityObjectAttachmentsInnerImage.validateJsonElement(jsonObj.get("image"));
      }
      if ((jsonObj.get("objectType") != null && !jsonObj.get("objectType").isJsonNull()) && !jsonObj.get("objectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectType").toString()));
      }
      if (jsonObj.get("thumbnails") != null && !jsonObj.get("thumbnails").isJsonNull()) {
        JsonArray jsonArraythumbnails = jsonObj.getAsJsonArray("thumbnails");
        if (jsonArraythumbnails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("thumbnails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `thumbnails` to be an array in the JSON string but got `%s`", jsonObj.get("thumbnails").toString()));
          }

          // validate the optional field `thumbnails` (array)
          for (int i = 0; i < jsonArraythumbnails.size(); i++) {
            ActivityObjectAttachmentsInnerThumbnailsInner.validateJsonElement(jsonArraythumbnails.get(i));
          };
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivityObjectAttachmentsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivityObjectAttachmentsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivityObjectAttachmentsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivityObjectAttachmentsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivityObjectAttachmentsInner>() {
           @Override
           public void write(JsonWriter out, ActivityObjectAttachmentsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivityObjectAttachmentsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActivityObjectAttachmentsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActivityObjectAttachmentsInner
   * @throws IOException if the JSON string is invalid with respect to ActivityObjectAttachmentsInner
   */
  public static ActivityObjectAttachmentsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivityObjectAttachmentsInner.class);
  }

  /**
   * Convert an instance of ActivityObjectAttachmentsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

