/*
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CommentActor;
import org.openapitools.client.model.CommentInReplyToInner;
import org.openapitools.client.model.CommentObject;
import org.openapitools.client.model.CommentPlusoners;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Comment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:56.191141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Comment {
  public static final String SERIALIZED_NAME_ACTOR = "actor";
  @SerializedName(SERIALIZED_NAME_ACTOR)
  private CommentActor actor;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IN_REPLY_TO = "inReplyTo";
  @SerializedName(SERIALIZED_NAME_IN_REPLY_TO)
  private List<CommentInReplyToInner> inReplyTo = new ArrayList<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "plus#comment";

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private CommentObject _object;

  public static final String SERIALIZED_NAME_PLUSONERS = "plusoners";
  @SerializedName(SERIALIZED_NAME_PLUSONERS)
  private CommentPlusoners plusoners;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private OffsetDateTime published;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_VERB = "verb";
  @SerializedName(SERIALIZED_NAME_VERB)
  private String verb = "post";

  public Comment() {
  }

  public Comment actor(CommentActor actor) {
    this.actor = actor;
    return this;
  }

  /**
   * Get actor
   * @return actor
   */
  @javax.annotation.Nullable
  public CommentActor getActor() {
    return actor;
  }

  public void setActor(CommentActor actor) {
    this.actor = actor;
  }


  public Comment etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * ETag of this response for caching purposes.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public Comment id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of this comment.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Comment inReplyTo(List<CommentInReplyToInner> inReplyTo) {
    this.inReplyTo = inReplyTo;
    return this;
  }

  public Comment addInReplyToItem(CommentInReplyToInner inReplyToItem) {
    if (this.inReplyTo == null) {
      this.inReplyTo = new ArrayList<>();
    }
    this.inReplyTo.add(inReplyToItem);
    return this;
  }

  /**
   * The activity this comment replied to.
   * @return inReplyTo
   */
  @javax.annotation.Nullable
  public List<CommentInReplyToInner> getInReplyTo() {
    return inReplyTo;
  }

  public void setInReplyTo(List<CommentInReplyToInner> inReplyTo) {
    this.inReplyTo = inReplyTo;
  }


  public Comment kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies this resource as a comment. Value: \&quot;plus#comment\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Comment _object(CommentObject _object) {
    this._object = _object;
    return this;
  }

  /**
   * Get _object
   * @return _object
   */
  @javax.annotation.Nullable
  public CommentObject getObject() {
    return _object;
  }

  public void setObject(CommentObject _object) {
    this._object = _object;
  }


  public Comment plusoners(CommentPlusoners plusoners) {
    this.plusoners = plusoners;
    return this;
  }

  /**
   * Get plusoners
   * @return plusoners
   */
  @javax.annotation.Nullable
  public CommentPlusoners getPlusoners() {
    return plusoners;
  }

  public void setPlusoners(CommentPlusoners plusoners) {
    this.plusoners = plusoners;
  }


  public Comment published(OffsetDateTime published) {
    this.published = published;
    return this;
  }

  /**
   * The time at which this comment was initially published. Formatted as an RFC 3339 timestamp.
   * @return published
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPublished() {
    return published;
  }

  public void setPublished(OffsetDateTime published) {
    this.published = published;
  }


  public Comment selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * Link to this comment resource.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }


  public Comment updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

  /**
   * The time at which this comment was last updated. Formatted as an RFC 3339 timestamp.
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }


  public Comment verb(String verb) {
    this.verb = verb;
    return this;
  }

  /**
   * This comment&#39;s verb, indicating what action was performed. Possible values are:   - \&quot;post\&quot; - Publish content to the stream.
   * @return verb
   */
  @javax.annotation.Nullable
  public String getVerb() {
    return verb;
  }

  public void setVerb(String verb) {
    this.verb = verb;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Comment comment = (Comment) o;
    return Objects.equals(this.actor, comment.actor) &&
        Objects.equals(this.etag, comment.etag) &&
        Objects.equals(this.id, comment.id) &&
        Objects.equals(this.inReplyTo, comment.inReplyTo) &&
        Objects.equals(this.kind, comment.kind) &&
        Objects.equals(this._object, comment._object) &&
        Objects.equals(this.plusoners, comment.plusoners) &&
        Objects.equals(this.published, comment.published) &&
        Objects.equals(this.selfLink, comment.selfLink) &&
        Objects.equals(this.updated, comment.updated) &&
        Objects.equals(this.verb, comment.verb);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actor, etag, id, inReplyTo, kind, _object, plusoners, published, selfLink, updated, verb);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Comment {\n");
    sb.append("    actor: ").append(toIndentedString(actor)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inReplyTo: ").append(toIndentedString(inReplyTo)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    plusoners: ").append(toIndentedString(plusoners)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    verb: ").append(toIndentedString(verb)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actor");
    openapiFields.add("etag");
    openapiFields.add("id");
    openapiFields.add("inReplyTo");
    openapiFields.add("kind");
    openapiFields.add("object");
    openapiFields.add("plusoners");
    openapiFields.add("published");
    openapiFields.add("selfLink");
    openapiFields.add("updated");
    openapiFields.add("verb");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Comment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Comment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Comment is not found in the empty JSON string", Comment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Comment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Comment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `actor`
      if (jsonObj.get("actor") != null && !jsonObj.get("actor").isJsonNull()) {
        CommentActor.validateJsonElement(jsonObj.get("actor"));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("inReplyTo") != null && !jsonObj.get("inReplyTo").isJsonNull()) {
        JsonArray jsonArrayinReplyTo = jsonObj.getAsJsonArray("inReplyTo");
        if (jsonArrayinReplyTo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inReplyTo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inReplyTo` to be an array in the JSON string but got `%s`", jsonObj.get("inReplyTo").toString()));
          }

          // validate the optional field `inReplyTo` (array)
          for (int i = 0; i < jsonArrayinReplyTo.size(); i++) {
            CommentInReplyToInner.validateJsonElement(jsonArrayinReplyTo.get(i));
          };
        }
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `object`
      if (jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) {
        CommentObject.validateJsonElement(jsonObj.get("object"));
      }
      // validate the optional field `plusoners`
      if (jsonObj.get("plusoners") != null && !jsonObj.get("plusoners").isJsonNull()) {
        CommentPlusoners.validateJsonElement(jsonObj.get("plusoners"));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if ((jsonObj.get("verb") != null && !jsonObj.get("verb").isJsonNull()) && !jsonObj.get("verb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verb").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Comment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Comment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Comment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Comment.class));

       return (TypeAdapter<T>) new TypeAdapter<Comment>() {
           @Override
           public void write(JsonWriter out, Comment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Comment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Comment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Comment
   * @throws IOException if the JSON string is invalid with respect to Comment
   */
  public static Comment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Comment.class);
  }

  /**
   * Convert an instance of Comment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

