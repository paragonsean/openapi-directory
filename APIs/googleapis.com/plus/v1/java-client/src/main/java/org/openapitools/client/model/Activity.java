/*
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Acl;
import org.openapitools.client.model.ActivityActor;
import org.openapitools.client.model.ActivityObject;
import org.openapitools.client.model.ActivityProvider;
import org.openapitools.client.model.Place;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Activity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:56.191141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Activity {
  public static final String SERIALIZED_NAME_ACCESS = "access";
  @SerializedName(SERIALIZED_NAME_ACCESS)
  private Acl access;

  public static final String SERIALIZED_NAME_ACTOR = "actor";
  @SerializedName(SERIALIZED_NAME_ACTOR)
  private ActivityActor actor;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_ANNOTATION = "annotation";
  @SerializedName(SERIALIZED_NAME_ANNOTATION)
  private String annotation;

  public static final String SERIALIZED_NAME_CROSSPOST_SOURCE = "crosspostSource";
  @SerializedName(SERIALIZED_NAME_CROSSPOST_SOURCE)
  private String crosspostSource;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_GEOCODE = "geocode";
  @SerializedName(SERIALIZED_NAME_GEOCODE)
  private String geocode;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "plus#activity";

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Place location;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private ActivityObject _object;

  public static final String SERIALIZED_NAME_PLACE_ID = "placeId";
  @SerializedName(SERIALIZED_NAME_PLACE_ID)
  private String placeId;

  public static final String SERIALIZED_NAME_PLACE_NAME = "placeName";
  @SerializedName(SERIALIZED_NAME_PLACE_NAME)
  private String placeName;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private ActivityProvider provider;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private OffsetDateTime published;

  public static final String SERIALIZED_NAME_RADIUS = "radius";
  @SerializedName(SERIALIZED_NAME_RADIUS)
  private String radius;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VERB = "verb";
  @SerializedName(SERIALIZED_NAME_VERB)
  private String verb;

  public Activity() {
  }

  public Activity access(Acl access) {
    this.access = access;
    return this;
  }

  /**
   * Get access
   * @return access
   */
  @javax.annotation.Nullable
  public Acl getAccess() {
    return access;
  }

  public void setAccess(Acl access) {
    this.access = access;
  }


  public Activity actor(ActivityActor actor) {
    this.actor = actor;
    return this;
  }

  /**
   * Get actor
   * @return actor
   */
  @javax.annotation.Nullable
  public ActivityActor getActor() {
    return actor;
  }

  public void setActor(ActivityActor actor) {
    this.actor = actor;
  }


  public Activity address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Street address where this activity occurred.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public Activity annotation(String annotation) {
    this.annotation = annotation;
    return this;
  }

  /**
   * Additional content added by the person who shared this activity, applicable only when resharing an activity.
   * @return annotation
   */
  @javax.annotation.Nullable
  public String getAnnotation() {
    return annotation;
  }

  public void setAnnotation(String annotation) {
    this.annotation = annotation;
  }


  public Activity crosspostSource(String crosspostSource) {
    this.crosspostSource = crosspostSource;
    return this;
  }

  /**
   * If this activity is a crosspost from another system, this property specifies the ID of the original activity.
   * @return crosspostSource
   */
  @javax.annotation.Nullable
  public String getCrosspostSource() {
    return crosspostSource;
  }

  public void setCrosspostSource(String crosspostSource) {
    this.crosspostSource = crosspostSource;
  }


  public Activity etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * ETag of this response for caching purposes.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public Activity geocode(String geocode) {
    this.geocode = geocode;
    return this;
  }

  /**
   * Latitude and longitude where this activity occurred. Format is latitude followed by longitude, space separated.
   * @return geocode
   */
  @javax.annotation.Nullable
  public String getGeocode() {
    return geocode;
  }

  public void setGeocode(String geocode) {
    this.geocode = geocode;
  }


  public Activity id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of this activity.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Activity kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies this resource as an activity. Value: \&quot;plus#activity\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Activity location(Place location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public Place getLocation() {
    return location;
  }

  public void setLocation(Place location) {
    this.location = location;
  }


  public Activity _object(ActivityObject _object) {
    this._object = _object;
    return this;
  }

  /**
   * Get _object
   * @return _object
   */
  @javax.annotation.Nullable
  public ActivityObject getObject() {
    return _object;
  }

  public void setObject(ActivityObject _object) {
    this._object = _object;
  }


  public Activity placeId(String placeId) {
    this.placeId = placeId;
    return this;
  }

  /**
   * ID of the place where this activity occurred.
   * @return placeId
   */
  @javax.annotation.Nullable
  public String getPlaceId() {
    return placeId;
  }

  public void setPlaceId(String placeId) {
    this.placeId = placeId;
  }


  public Activity placeName(String placeName) {
    this.placeName = placeName;
    return this;
  }

  /**
   * Name of the place where this activity occurred.
   * @return placeName
   */
  @javax.annotation.Nullable
  public String getPlaceName() {
    return placeName;
  }

  public void setPlaceName(String placeName) {
    this.placeName = placeName;
  }


  public Activity provider(ActivityProvider provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Get provider
   * @return provider
   */
  @javax.annotation.Nullable
  public ActivityProvider getProvider() {
    return provider;
  }

  public void setProvider(ActivityProvider provider) {
    this.provider = provider;
  }


  public Activity published(OffsetDateTime published) {
    this.published = published;
    return this;
  }

  /**
   * The time at which this activity was initially published. Formatted as an RFC 3339 timestamp.
   * @return published
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPublished() {
    return published;
  }

  public void setPublished(OffsetDateTime published) {
    this.published = published;
  }


  public Activity radius(String radius) {
    this.radius = radius;
    return this;
  }

  /**
   * Radius, in meters, of the region where this activity occurred, centered at the latitude and longitude identified in geocode.
   * @return radius
   */
  @javax.annotation.Nullable
  public String getRadius() {
    return radius;
  }

  public void setRadius(String radius) {
    this.radius = radius;
  }


  public Activity title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of this activity.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Activity updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

  /**
   * The time at which this activity was last updated. Formatted as an RFC 3339 timestamp.
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }


  public Activity url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The link to this activity.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Activity verb(String verb) {
    this.verb = verb;
    return this;
  }

  /**
   * This activity&#39;s verb, which indicates the action that was performed. Possible values include, but are not limited to, the following values:   - \&quot;post\&quot; - Publish content to the stream.  - \&quot;share\&quot; - Reshare an activity.
   * @return verb
   */
  @javax.annotation.Nullable
  public String getVerb() {
    return verb;
  }

  public void setVerb(String verb) {
    this.verb = verb;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Activity activity = (Activity) o;
    return Objects.equals(this.access, activity.access) &&
        Objects.equals(this.actor, activity.actor) &&
        Objects.equals(this.address, activity.address) &&
        Objects.equals(this.annotation, activity.annotation) &&
        Objects.equals(this.crosspostSource, activity.crosspostSource) &&
        Objects.equals(this.etag, activity.etag) &&
        Objects.equals(this.geocode, activity.geocode) &&
        Objects.equals(this.id, activity.id) &&
        Objects.equals(this.kind, activity.kind) &&
        Objects.equals(this.location, activity.location) &&
        Objects.equals(this._object, activity._object) &&
        Objects.equals(this.placeId, activity.placeId) &&
        Objects.equals(this.placeName, activity.placeName) &&
        Objects.equals(this.provider, activity.provider) &&
        Objects.equals(this.published, activity.published) &&
        Objects.equals(this.radius, activity.radius) &&
        Objects.equals(this.title, activity.title) &&
        Objects.equals(this.updated, activity.updated) &&
        Objects.equals(this.url, activity.url) &&
        Objects.equals(this.verb, activity.verb);
  }

  @Override
  public int hashCode() {
    return Objects.hash(access, actor, address, annotation, crosspostSource, etag, geocode, id, kind, location, _object, placeId, placeName, provider, published, radius, title, updated, url, verb);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Activity {\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    actor: ").append(toIndentedString(actor)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    annotation: ").append(toIndentedString(annotation)).append("\n");
    sb.append("    crosspostSource: ").append(toIndentedString(crosspostSource)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    geocode: ").append(toIndentedString(geocode)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    placeId: ").append(toIndentedString(placeId)).append("\n");
    sb.append("    placeName: ").append(toIndentedString(placeName)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    radius: ").append(toIndentedString(radius)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    verb: ").append(toIndentedString(verb)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access");
    openapiFields.add("actor");
    openapiFields.add("address");
    openapiFields.add("annotation");
    openapiFields.add("crosspostSource");
    openapiFields.add("etag");
    openapiFields.add("geocode");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("location");
    openapiFields.add("object");
    openapiFields.add("placeId");
    openapiFields.add("placeName");
    openapiFields.add("provider");
    openapiFields.add("published");
    openapiFields.add("radius");
    openapiFields.add("title");
    openapiFields.add("updated");
    openapiFields.add("url");
    openapiFields.add("verb");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Activity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Activity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Activity is not found in the empty JSON string", Activity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Activity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Activity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `access`
      if (jsonObj.get("access") != null && !jsonObj.get("access").isJsonNull()) {
        Acl.validateJsonElement(jsonObj.get("access"));
      }
      // validate the optional field `actor`
      if (jsonObj.get("actor") != null && !jsonObj.get("actor").isJsonNull()) {
        ActivityActor.validateJsonElement(jsonObj.get("actor"));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("annotation") != null && !jsonObj.get("annotation").isJsonNull()) && !jsonObj.get("annotation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annotation").toString()));
      }
      if ((jsonObj.get("crosspostSource") != null && !jsonObj.get("crosspostSource").isJsonNull()) && !jsonObj.get("crosspostSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crosspostSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crosspostSource").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("geocode") != null && !jsonObj.get("geocode").isJsonNull()) && !jsonObj.get("geocode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `geocode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("geocode").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        Place.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `object`
      if (jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) {
        ActivityObject.validateJsonElement(jsonObj.get("object"));
      }
      if ((jsonObj.get("placeId") != null && !jsonObj.get("placeId").isJsonNull()) && !jsonObj.get("placeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeId").toString()));
      }
      if ((jsonObj.get("placeName") != null && !jsonObj.get("placeName").isJsonNull()) && !jsonObj.get("placeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeName").toString()));
      }
      // validate the optional field `provider`
      if (jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) {
        ActivityProvider.validateJsonElement(jsonObj.get("provider"));
      }
      if ((jsonObj.get("radius") != null && !jsonObj.get("radius").isJsonNull()) && !jsonObj.get("radius").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `radius` to be a primitive type in the JSON string but got `%s`", jsonObj.get("radius").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("verb") != null && !jsonObj.get("verb").isJsonNull()) && !jsonObj.get("verb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verb").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Activity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Activity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Activity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Activity.class));

       return (TypeAdapter<T>) new TypeAdapter<Activity>() {
           @Override
           public void write(JsonWriter out, Activity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Activity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Activity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Activity
   * @throws IOException if the JSON string is invalid with respect to Activity
   */
  public static Activity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Activity.class);
  }

  /**
   * Convert an instance of Activity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

