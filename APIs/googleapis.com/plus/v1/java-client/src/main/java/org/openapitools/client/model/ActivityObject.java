/*
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ActivityObjectActor;
import org.openapitools.client.model.ActivityObjectAttachmentsInner;
import org.openapitools.client.model.ActivityObjectPlusoners;
import org.openapitools.client.model.ActivityObjectReplies;
import org.openapitools.client.model.ActivityObjectResharers;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The object of this activity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:50:56.191141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActivityObject {
  public static final String SERIALIZED_NAME_ACTOR = "actor";
  @SerializedName(SERIALIZED_NAME_ACTOR)
  private ActivityObjectActor actor;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<ActivityObjectAttachmentsInner> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_OBJECT_TYPE = "objectType";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE)
  private String objectType;

  public static final String SERIALIZED_NAME_ORIGINAL_CONTENT = "originalContent";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_CONTENT)
  private String originalContent;

  public static final String SERIALIZED_NAME_PLUSONERS = "plusoners";
  @SerializedName(SERIALIZED_NAME_PLUSONERS)
  private ActivityObjectPlusoners plusoners;

  public static final String SERIALIZED_NAME_REPLIES = "replies";
  @SerializedName(SERIALIZED_NAME_REPLIES)
  private ActivityObjectReplies replies;

  public static final String SERIALIZED_NAME_RESHARERS = "resharers";
  @SerializedName(SERIALIZED_NAME_RESHARERS)
  private ActivityObjectResharers resharers;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public ActivityObject() {
  }

  public ActivityObject actor(ActivityObjectActor actor) {
    this.actor = actor;
    return this;
  }

  /**
   * Get actor
   * @return actor
   */
  @javax.annotation.Nullable
  public ActivityObjectActor getActor() {
    return actor;
  }

  public void setActor(ActivityObjectActor actor) {
    this.actor = actor;
  }


  public ActivityObject attachments(List<ActivityObjectAttachmentsInner> attachments) {
    this.attachments = attachments;
    return this;
  }

  public ActivityObject addAttachmentsItem(ActivityObjectAttachmentsInner attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * The media objects attached to this activity.
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<ActivityObjectAttachmentsInner> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<ActivityObjectAttachmentsInner> attachments) {
    this.attachments = attachments;
  }


  public ActivityObject content(String content) {
    this.content = content;
    return this;
  }

  /**
   * The HTML-formatted content, which is suitable for display.
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public ActivityObject id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the object. When resharing an activity, this is the ID of the activity that is being reshared.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ActivityObject objectType(String objectType) {
    this.objectType = objectType;
    return this;
  }

  /**
   * The type of the object. Possible values include, but are not limited to, the following values:   - \&quot;note\&quot; - Textual content.  - \&quot;activity\&quot; - A Google+ activity.
   * @return objectType
   */
  @javax.annotation.Nullable
  public String getObjectType() {
    return objectType;
  }

  public void setObjectType(String objectType) {
    this.objectType = objectType;
  }


  public ActivityObject originalContent(String originalContent) {
    this.originalContent = originalContent;
    return this;
  }

  /**
   * The content (text) as provided by the author, which is stored without any HTML formatting. When creating or updating an activity, this value must be supplied as plain text in the request.
   * @return originalContent
   */
  @javax.annotation.Nullable
  public String getOriginalContent() {
    return originalContent;
  }

  public void setOriginalContent(String originalContent) {
    this.originalContent = originalContent;
  }


  public ActivityObject plusoners(ActivityObjectPlusoners plusoners) {
    this.plusoners = plusoners;
    return this;
  }

  /**
   * Get plusoners
   * @return plusoners
   */
  @javax.annotation.Nullable
  public ActivityObjectPlusoners getPlusoners() {
    return plusoners;
  }

  public void setPlusoners(ActivityObjectPlusoners plusoners) {
    this.plusoners = plusoners;
  }


  public ActivityObject replies(ActivityObjectReplies replies) {
    this.replies = replies;
    return this;
  }

  /**
   * Get replies
   * @return replies
   */
  @javax.annotation.Nullable
  public ActivityObjectReplies getReplies() {
    return replies;
  }

  public void setReplies(ActivityObjectReplies replies) {
    this.replies = replies;
  }


  public ActivityObject resharers(ActivityObjectResharers resharers) {
    this.resharers = resharers;
    return this;
  }

  /**
   * Get resharers
   * @return resharers
   */
  @javax.annotation.Nullable
  public ActivityObjectResharers getResharers() {
    return resharers;
  }

  public void setResharers(ActivityObjectResharers resharers) {
    this.resharers = resharers;
  }


  public ActivityObject url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL that points to the linked resource.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivityObject activityObject = (ActivityObject) o;
    return Objects.equals(this.actor, activityObject.actor) &&
        Objects.equals(this.attachments, activityObject.attachments) &&
        Objects.equals(this.content, activityObject.content) &&
        Objects.equals(this.id, activityObject.id) &&
        Objects.equals(this.objectType, activityObject.objectType) &&
        Objects.equals(this.originalContent, activityObject.originalContent) &&
        Objects.equals(this.plusoners, activityObject.plusoners) &&
        Objects.equals(this.replies, activityObject.replies) &&
        Objects.equals(this.resharers, activityObject.resharers) &&
        Objects.equals(this.url, activityObject.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actor, attachments, content, id, objectType, originalContent, plusoners, replies, resharers, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivityObject {\n");
    sb.append("    actor: ").append(toIndentedString(actor)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("    originalContent: ").append(toIndentedString(originalContent)).append("\n");
    sb.append("    plusoners: ").append(toIndentedString(plusoners)).append("\n");
    sb.append("    replies: ").append(toIndentedString(replies)).append("\n");
    sb.append("    resharers: ").append(toIndentedString(resharers)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actor");
    openapiFields.add("attachments");
    openapiFields.add("content");
    openapiFields.add("id");
    openapiFields.add("objectType");
    openapiFields.add("originalContent");
    openapiFields.add("plusoners");
    openapiFields.add("replies");
    openapiFields.add("resharers");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActivityObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActivityObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivityObject is not found in the empty JSON string", ActivityObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActivityObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivityObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `actor`
      if (jsonObj.get("actor") != null && !jsonObj.get("actor").isJsonNull()) {
        ActivityObjectActor.validateJsonElement(jsonObj.get("actor"));
      }
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            ActivityObjectAttachmentsInner.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("objectType") != null && !jsonObj.get("objectType").isJsonNull()) && !jsonObj.get("objectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectType").toString()));
      }
      if ((jsonObj.get("originalContent") != null && !jsonObj.get("originalContent").isJsonNull()) && !jsonObj.get("originalContent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalContent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalContent").toString()));
      }
      // validate the optional field `plusoners`
      if (jsonObj.get("plusoners") != null && !jsonObj.get("plusoners").isJsonNull()) {
        ActivityObjectPlusoners.validateJsonElement(jsonObj.get("plusoners"));
      }
      // validate the optional field `replies`
      if (jsonObj.get("replies") != null && !jsonObj.get("replies").isJsonNull()) {
        ActivityObjectReplies.validateJsonElement(jsonObj.get("replies"));
      }
      // validate the optional field `resharers`
      if (jsonObj.get("resharers") != null && !jsonObj.get("resharers").isJsonNull()) {
        ActivityObjectResharers.validateJsonElement(jsonObj.get("resharers"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivityObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivityObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivityObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivityObject.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivityObject>() {
           @Override
           public void write(JsonWriter out, ActivityObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivityObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActivityObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActivityObject
   * @throws IOException if the JSON string is invalid with respect to ActivityObject
   */
  public static ActivityObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivityObject.class);
  }

  /**
   * Convert an instance of ActivityObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

