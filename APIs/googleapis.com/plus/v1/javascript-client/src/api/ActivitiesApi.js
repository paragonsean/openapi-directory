/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Activity from '../model/Activity';
import ActivityFeed from '../model/ActivityFeed';

/**
* Activities service.
* @module api/ActivitiesApi
* @version v1
*/
export default class ActivitiesApi {

    /**
    * Constructs a new ActivitiesApi. 
    * @alias module:api/ActivitiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the plusActivitiesGet operation.
     * @callback module:api/ActivitiesApi~plusActivitiesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Activity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shut down. See https://developers.google.com/+/api-shutdown for more details.
     * @param {String} activityId The ID of the activity to get.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/ActivitiesApi~plusActivitiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Activity}
     */
    plusActivitiesGet(activityId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'activityId' is set
      if (activityId === undefined || activityId === null) {
        throw new Error("Missing the required parameter 'activityId' when calling plusActivitiesGet");
      }

      let pathParams = {
        'activityId': activityId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Activity;
      return this.apiClient.callApi(
        '/activities/{activityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the plusActivitiesList operation.
     * @callback module:api/ActivitiesApi~plusActivitiesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityFeed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shut down. See https://developers.google.com/+/api-shutdown for more details.
     * @param {String} userId The ID of the user to get activities for. The special value \"me\" can be used to indicate the authenticated user.
     * @param {module:model/String} collection The collection of activities to list.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Number} [maxResults] The maximum number of activities to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.
     * @param {String} [pageToken] The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of \"nextPageToken\" from the previous response.
     * @param {module:api/ActivitiesApi~plusActivitiesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityFeed}
     */
    plusActivitiesList(userId, collection, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling plusActivitiesList");
      }
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling plusActivitiesList");
      }

      let pathParams = {
        'userId': userId,
        'collection': collection
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActivityFeed;
      return this.apiClient.callApi(
        '/people/{userId}/activities/{collection}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the plusActivitiesSearch operation.
     * @callback module:api/ActivitiesApi~plusActivitiesSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityFeed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shut down. See https://developers.google.com/+/api-shutdown for more details.
     * @param {String} query Full-text search query string.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {String} [language] Specify the preferred language to search with. See search language codes for available values.
     * @param {Number} [maxResults] The maximum number of activities to include in the response, which is used for paging. For any response, the actual number returned might be less than the specified maxResults.
     * @param {module:model/String} [orderBy] Specifies how to order search results.
     * @param {String} [pageToken] The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of \"nextPageToken\" from the previous response. This token can be of any length.
     * @param {module:api/ActivitiesApi~plusActivitiesSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityFeed}
     */
    plusActivitiesSearch(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling plusActivitiesSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'query': query,
        'language': opts['language'],
        'maxResults': opts['maxResults'],
        'orderBy': opts['orderBy'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActivityFeed;
      return this.apiClient.callApi(
        '/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
