/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActivityObjectAttachmentsInnerEmbed from './ActivityObjectAttachmentsInnerEmbed';
import ActivityObjectAttachmentsInnerFullImage from './ActivityObjectAttachmentsInnerFullImage';
import ActivityObjectAttachmentsInnerImage from './ActivityObjectAttachmentsInnerImage';
import ActivityObjectAttachmentsInnerThumbnailsInner from './ActivityObjectAttachmentsInnerThumbnailsInner';

/**
 * The ActivityObjectAttachmentsInner model module.
 * @module model/ActivityObjectAttachmentsInner
 * @version v1
 */
class ActivityObjectAttachmentsInner {
    /**
     * Constructs a new <code>ActivityObjectAttachmentsInner</code>.
     * @alias module:model/ActivityObjectAttachmentsInner
     */
    constructor() { 
        
        ActivityObjectAttachmentsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ActivityObjectAttachmentsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActivityObjectAttachmentsInner} obj Optional instance to populate.
     * @return {module:model/ActivityObjectAttachmentsInner} The populated <code>ActivityObjectAttachmentsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActivityObjectAttachmentsInner();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('embed')) {
                obj['embed'] = ActivityObjectAttachmentsInnerEmbed.constructFromObject(data['embed']);
            }
            if (data.hasOwnProperty('fullImage')) {
                obj['fullImage'] = ActivityObjectAttachmentsInnerFullImage.constructFromObject(data['fullImage']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ActivityObjectAttachmentsInnerImage.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('objectType')) {
                obj['objectType'] = ApiClient.convertToType(data['objectType'], 'String');
            }
            if (data.hasOwnProperty('thumbnails')) {
                obj['thumbnails'] = ApiClient.convertToType(data['thumbnails'], [ActivityObjectAttachmentsInnerThumbnailsInner]);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActivityObjectAttachmentsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActivityObjectAttachmentsInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `embed`
        if (data['embed']) { // data not null
          ActivityObjectAttachmentsInnerEmbed.validateJSON(data['embed']);
        }
        // validate the optional field `fullImage`
        if (data['fullImage']) { // data not null
          ActivityObjectAttachmentsInnerFullImage.validateJSON(data['fullImage']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          ActivityObjectAttachmentsInnerImage.validateJSON(data['image']);
        }
        // ensure the json data is a string
        if (data['objectType'] && !(typeof data['objectType'] === 'string' || data['objectType'] instanceof String)) {
            throw new Error("Expected the field `objectType` to be a primitive type in the JSON string but got " + data['objectType']);
        }
        if (data['thumbnails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['thumbnails'])) {
                throw new Error("Expected the field `thumbnails` to be an array in the JSON data but got " + data['thumbnails']);
            }
            // validate the optional field `thumbnails` (array)
            for (const item of data['thumbnails']) {
                ActivityObjectAttachmentsInnerThumbnailsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * If the attachment is an article, this property contains a snippet of text from the article. It can also include descriptions for other types.
 * @member {String} content
 */
ActivityObjectAttachmentsInner.prototype['content'] = undefined;

/**
 * The title of the attachment, such as a photo caption or an article title.
 * @member {String} displayName
 */
ActivityObjectAttachmentsInner.prototype['displayName'] = undefined;

/**
 * @member {module:model/ActivityObjectAttachmentsInnerEmbed} embed
 */
ActivityObjectAttachmentsInner.prototype['embed'] = undefined;

/**
 * @member {module:model/ActivityObjectAttachmentsInnerFullImage} fullImage
 */
ActivityObjectAttachmentsInner.prototype['fullImage'] = undefined;

/**
 * The ID of the attachment.
 * @member {String} id
 */
ActivityObjectAttachmentsInner.prototype['id'] = undefined;

/**
 * @member {module:model/ActivityObjectAttachmentsInnerImage} image
 */
ActivityObjectAttachmentsInner.prototype['image'] = undefined;

/**
 * The type of media object. Possible values include, but are not limited to, the following values:   - \"photo\" - A photo.  - \"album\" - A photo album.  - \"video\" - A video.  - \"article\" - An article, specified by a link.
 * @member {String} objectType
 */
ActivityObjectAttachmentsInner.prototype['objectType'] = undefined;

/**
 * If the attachment is an album, this property is a list of potential additional thumbnails from the album.
 * @member {Array.<module:model/ActivityObjectAttachmentsInnerThumbnailsInner>} thumbnails
 */
ActivityObjectAttachmentsInner.prototype['thumbnails'] = undefined;

/**
 * The link to the attachment, which should be of type text/html.
 * @member {String} url
 */
ActivityObjectAttachmentsInner.prototype['url'] = undefined;






export default ActivityObjectAttachmentsInner;

