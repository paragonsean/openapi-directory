/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PersonCoverCoverInfo from './PersonCoverCoverInfo';
import PersonCoverCoverPhoto from './PersonCoverCoverPhoto';

/**
 * The PersonCover model module.
 * @module model/PersonCover
 * @version v1
 */
class PersonCover {
    /**
     * Constructs a new <code>PersonCover</code>.
     * The cover photo content.
     * @alias module:model/PersonCover
     */
    constructor() { 
        
        PersonCover.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PersonCover</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PersonCover} obj Optional instance to populate.
     * @return {module:model/PersonCover} The populated <code>PersonCover</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PersonCover();

            if (data.hasOwnProperty('coverInfo')) {
                obj['coverInfo'] = PersonCoverCoverInfo.constructFromObject(data['coverInfo']);
            }
            if (data.hasOwnProperty('coverPhoto')) {
                obj['coverPhoto'] = PersonCoverCoverPhoto.constructFromObject(data['coverPhoto']);
            }
            if (data.hasOwnProperty('layout')) {
                obj['layout'] = ApiClient.convertToType(data['layout'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PersonCover</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PersonCover</code>.
     */
    static validateJSON(data) {
        // validate the optional field `coverInfo`
        if (data['coverInfo']) { // data not null
          PersonCoverCoverInfo.validateJSON(data['coverInfo']);
        }
        // validate the optional field `coverPhoto`
        if (data['coverPhoto']) { // data not null
          PersonCoverCoverPhoto.validateJSON(data['coverPhoto']);
        }
        // ensure the json data is a string
        if (data['layout'] && !(typeof data['layout'] === 'string' || data['layout'] instanceof String)) {
            throw new Error("Expected the field `layout` to be a primitive type in the JSON string but got " + data['layout']);
        }

        return true;
    }


}



/**
 * @member {module:model/PersonCoverCoverInfo} coverInfo
 */
PersonCover.prototype['coverInfo'] = undefined;

/**
 * @member {module:model/PersonCoverCoverPhoto} coverPhoto
 */
PersonCover.prototype['coverPhoto'] = undefined;

/**
 * The layout of the cover art. Possible values include, but are not limited to, the following values:   - \"banner\" - One large image banner.
 * @member {String} layout
 */
PersonCover.prototype['layout'] = undefined;






export default PersonCover;

