/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PersonOrganizationsInner model module.
 * @module model/PersonOrganizationsInner
 * @version v1
 */
class PersonOrganizationsInner {
    /**
     * Constructs a new <code>PersonOrganizationsInner</code>.
     * @alias module:model/PersonOrganizationsInner
     */
    constructor() { 
        
        PersonOrganizationsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PersonOrganizationsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PersonOrganizationsInner} obj Optional instance to populate.
     * @return {module:model/PersonOrganizationsInner} The populated <code>PersonOrganizationsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PersonOrganizationsInner();

            if (data.hasOwnProperty('department')) {
                obj['department'] = ApiClient.convertToType(data['department'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('primary')) {
                obj['primary'] = ApiClient.convertToType(data['primary'], 'Boolean');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PersonOrganizationsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PersonOrganizationsInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['department'] && !(typeof data['department'] === 'string' || data['department'] instanceof String)) {
            throw new Error("Expected the field `department` to be a primitive type in the JSON string but got " + data['department']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['endDate'] && !(typeof data['endDate'] === 'string' || data['endDate'] instanceof String)) {
            throw new Error("Expected the field `endDate` to be a primitive type in the JSON string but got " + data['endDate']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['startDate'] && !(typeof data['startDate'] === 'string' || data['startDate'] instanceof String)) {
            throw new Error("Expected the field `startDate` to be a primitive type in the JSON string but got " + data['startDate']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The department within the organization. Deprecated.
 * @member {String} department
 */
PersonOrganizationsInner.prototype['department'] = undefined;

/**
 * A short description of the person's role in this organization. Deprecated.
 * @member {String} description
 */
PersonOrganizationsInner.prototype['description'] = undefined;

/**
 * The date that the person left this organization.
 * @member {String} endDate
 */
PersonOrganizationsInner.prototype['endDate'] = undefined;

/**
 * The location of this organization. Deprecated.
 * @member {String} location
 */
PersonOrganizationsInner.prototype['location'] = undefined;

/**
 * The name of the organization.
 * @member {String} name
 */
PersonOrganizationsInner.prototype['name'] = undefined;

/**
 * If \"true\", indicates this organization is the person's primary one, which is typically interpreted as the current one.
 * @member {Boolean} primary
 */
PersonOrganizationsInner.prototype['primary'] = undefined;

/**
 * The date that the person joined this organization.
 * @member {String} startDate
 */
PersonOrganizationsInner.prototype['startDate'] = undefined;

/**
 * The person's job title or role within the organization.
 * @member {String} title
 */
PersonOrganizationsInner.prototype['title'] = undefined;

/**
 * The type of organization. Possible values include, but are not limited to, the following values:   - \"work\" - Work.  - \"school\" - School.
 * @member {String} type
 */
PersonOrganizationsInner.prototype['type'] = undefined;






export default PersonOrganizationsInner;

