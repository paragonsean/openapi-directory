/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActivityObjectActor from './ActivityObjectActor';
import ActivityObjectAttachmentsInner from './ActivityObjectAttachmentsInner';
import ActivityObjectPlusoners from './ActivityObjectPlusoners';
import ActivityObjectReplies from './ActivityObjectReplies';
import ActivityObjectResharers from './ActivityObjectResharers';

/**
 * The ActivityObject model module.
 * @module model/ActivityObject
 * @version v1
 */
class ActivityObject {
    /**
     * Constructs a new <code>ActivityObject</code>.
     * The object of this activity.
     * @alias module:model/ActivityObject
     */
    constructor() { 
        
        ActivityObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ActivityObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActivityObject} obj Optional instance to populate.
     * @return {module:model/ActivityObject} The populated <code>ActivityObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActivityObject();

            if (data.hasOwnProperty('actor')) {
                obj['actor'] = ActivityObjectActor.constructFromObject(data['actor']);
            }
            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], [ActivityObjectAttachmentsInner]);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('objectType')) {
                obj['objectType'] = ApiClient.convertToType(data['objectType'], 'String');
            }
            if (data.hasOwnProperty('originalContent')) {
                obj['originalContent'] = ApiClient.convertToType(data['originalContent'], 'String');
            }
            if (data.hasOwnProperty('plusoners')) {
                obj['plusoners'] = ActivityObjectPlusoners.constructFromObject(data['plusoners']);
            }
            if (data.hasOwnProperty('replies')) {
                obj['replies'] = ActivityObjectReplies.constructFromObject(data['replies']);
            }
            if (data.hasOwnProperty('resharers')) {
                obj['resharers'] = ActivityObjectResharers.constructFromObject(data['resharers']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActivityObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActivityObject</code>.
     */
    static validateJSON(data) {
        // validate the optional field `actor`
        if (data['actor']) { // data not null
          ActivityObjectActor.validateJSON(data['actor']);
        }
        if (data['attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attachments'])) {
                throw new Error("Expected the field `attachments` to be an array in the JSON data but got " + data['attachments']);
            }
            // validate the optional field `attachments` (array)
            for (const item of data['attachments']) {
                ActivityObjectAttachmentsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['objectType'] && !(typeof data['objectType'] === 'string' || data['objectType'] instanceof String)) {
            throw new Error("Expected the field `objectType` to be a primitive type in the JSON string but got " + data['objectType']);
        }
        // ensure the json data is a string
        if (data['originalContent'] && !(typeof data['originalContent'] === 'string' || data['originalContent'] instanceof String)) {
            throw new Error("Expected the field `originalContent` to be a primitive type in the JSON string but got " + data['originalContent']);
        }
        // validate the optional field `plusoners`
        if (data['plusoners']) { // data not null
          ActivityObjectPlusoners.validateJSON(data['plusoners']);
        }
        // validate the optional field `replies`
        if (data['replies']) { // data not null
          ActivityObjectReplies.validateJSON(data['replies']);
        }
        // validate the optional field `resharers`
        if (data['resharers']) { // data not null
          ActivityObjectResharers.validateJSON(data['resharers']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {module:model/ActivityObjectActor} actor
 */
ActivityObject.prototype['actor'] = undefined;

/**
 * The media objects attached to this activity.
 * @member {Array.<module:model/ActivityObjectAttachmentsInner>} attachments
 */
ActivityObject.prototype['attachments'] = undefined;

/**
 * The HTML-formatted content, which is suitable for display.
 * @member {String} content
 */
ActivityObject.prototype['content'] = undefined;

/**
 * The ID of the object. When resharing an activity, this is the ID of the activity that is being reshared.
 * @member {String} id
 */
ActivityObject.prototype['id'] = undefined;

/**
 * The type of the object. Possible values include, but are not limited to, the following values:   - \"note\" - Textual content.  - \"activity\" - A Google+ activity.
 * @member {String} objectType
 */
ActivityObject.prototype['objectType'] = undefined;

/**
 * The content (text) as provided by the author, which is stored without any HTML formatting. When creating or updating an activity, this value must be supplied as plain text in the request.
 * @member {String} originalContent
 */
ActivityObject.prototype['originalContent'] = undefined;

/**
 * @member {module:model/ActivityObjectPlusoners} plusoners
 */
ActivityObject.prototype['plusoners'] = undefined;

/**
 * @member {module:model/ActivityObjectReplies} replies
 */
ActivityObject.prototype['replies'] = undefined;

/**
 * @member {module:model/ActivityObjectResharers} resharers
 */
ActivityObject.prototype['resharers'] = undefined;

/**
 * The URL that points to the linked resource.
 * @member {String} url
 */
ActivityObject.prototype['url'] = undefined;






export default ActivityObject;

