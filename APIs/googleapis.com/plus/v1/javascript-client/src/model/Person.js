/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PersonAgeRange from './PersonAgeRange';
import PersonCover from './PersonCover';
import PersonEmailsInner from './PersonEmailsInner';
import PersonImage from './PersonImage';
import PersonName from './PersonName';
import PersonOrganizationsInner from './PersonOrganizationsInner';
import PersonPlacesLivedInner from './PersonPlacesLivedInner';
import PersonUrlsInner from './PersonUrlsInner';

/**
 * The Person model module.
 * @module model/Person
 * @version v1
 */
class Person {
    /**
     * Constructs a new <code>Person</code>.
     * @alias module:model/Person
     */
    constructor() { 
        
        Person.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'plus#person';
    }

    /**
     * Constructs a <code>Person</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Person} obj Optional instance to populate.
     * @return {module:model/Person} The populated <code>Person</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Person();

            if (data.hasOwnProperty('aboutMe')) {
                obj['aboutMe'] = ApiClient.convertToType(data['aboutMe'], 'String');
            }
            if (data.hasOwnProperty('ageRange')) {
                obj['ageRange'] = PersonAgeRange.constructFromObject(data['ageRange']);
            }
            if (data.hasOwnProperty('birthday')) {
                obj['birthday'] = ApiClient.convertToType(data['birthday'], 'String');
            }
            if (data.hasOwnProperty('braggingRights')) {
                obj['braggingRights'] = ApiClient.convertToType(data['braggingRights'], 'String');
            }
            if (data.hasOwnProperty('circledByCount')) {
                obj['circledByCount'] = ApiClient.convertToType(data['circledByCount'], 'Number');
            }
            if (data.hasOwnProperty('cover')) {
                obj['cover'] = PersonCover.constructFromObject(data['cover']);
            }
            if (data.hasOwnProperty('currentLocation')) {
                obj['currentLocation'] = ApiClient.convertToType(data['currentLocation'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('emails')) {
                obj['emails'] = ApiClient.convertToType(data['emails'], [PersonEmailsInner]);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = PersonImage.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('isPlusUser')) {
                obj['isPlusUser'] = ApiClient.convertToType(data['isPlusUser'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = PersonName.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('nickname')) {
                obj['nickname'] = ApiClient.convertToType(data['nickname'], 'String');
            }
            if (data.hasOwnProperty('objectType')) {
                obj['objectType'] = ApiClient.convertToType(data['objectType'], 'String');
            }
            if (data.hasOwnProperty('occupation')) {
                obj['occupation'] = ApiClient.convertToType(data['occupation'], 'String');
            }
            if (data.hasOwnProperty('organizations')) {
                obj['organizations'] = ApiClient.convertToType(data['organizations'], [PersonOrganizationsInner]);
            }
            if (data.hasOwnProperty('placesLived')) {
                obj['placesLived'] = ApiClient.convertToType(data['placesLived'], [PersonPlacesLivedInner]);
            }
            if (data.hasOwnProperty('plusOneCount')) {
                obj['plusOneCount'] = ApiClient.convertToType(data['plusOneCount'], 'Number');
            }
            if (data.hasOwnProperty('relationshipStatus')) {
                obj['relationshipStatus'] = ApiClient.convertToType(data['relationshipStatus'], 'String');
            }
            if (data.hasOwnProperty('skills')) {
                obj['skills'] = ApiClient.convertToType(data['skills'], 'String');
            }
            if (data.hasOwnProperty('tagline')) {
                obj['tagline'] = ApiClient.convertToType(data['tagline'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('urls')) {
                obj['urls'] = ApiClient.convertToType(data['urls'], [PersonUrlsInner]);
            }
            if (data.hasOwnProperty('verified')) {
                obj['verified'] = ApiClient.convertToType(data['verified'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Person</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Person</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aboutMe'] && !(typeof data['aboutMe'] === 'string' || data['aboutMe'] instanceof String)) {
            throw new Error("Expected the field `aboutMe` to be a primitive type in the JSON string but got " + data['aboutMe']);
        }
        // validate the optional field `ageRange`
        if (data['ageRange']) { // data not null
          PersonAgeRange.validateJSON(data['ageRange']);
        }
        // ensure the json data is a string
        if (data['birthday'] && !(typeof data['birthday'] === 'string' || data['birthday'] instanceof String)) {
            throw new Error("Expected the field `birthday` to be a primitive type in the JSON string but got " + data['birthday']);
        }
        // ensure the json data is a string
        if (data['braggingRights'] && !(typeof data['braggingRights'] === 'string' || data['braggingRights'] instanceof String)) {
            throw new Error("Expected the field `braggingRights` to be a primitive type in the JSON string but got " + data['braggingRights']);
        }
        // validate the optional field `cover`
        if (data['cover']) { // data not null
          PersonCover.validateJSON(data['cover']);
        }
        // ensure the json data is a string
        if (data['currentLocation'] && !(typeof data['currentLocation'] === 'string' || data['currentLocation'] instanceof String)) {
            throw new Error("Expected the field `currentLocation` to be a primitive type in the JSON string but got " + data['currentLocation']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        if (data['emails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['emails'])) {
                throw new Error("Expected the field `emails` to be an array in the JSON data but got " + data['emails']);
            }
            // validate the optional field `emails` (array)
            for (const item of data['emails']) {
                PersonEmailsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          PersonImage.validateJSON(data['image']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          PersonName.validateJSON(data['name']);
        }
        // ensure the json data is a string
        if (data['nickname'] && !(typeof data['nickname'] === 'string' || data['nickname'] instanceof String)) {
            throw new Error("Expected the field `nickname` to be a primitive type in the JSON string but got " + data['nickname']);
        }
        // ensure the json data is a string
        if (data['objectType'] && !(typeof data['objectType'] === 'string' || data['objectType'] instanceof String)) {
            throw new Error("Expected the field `objectType` to be a primitive type in the JSON string but got " + data['objectType']);
        }
        // ensure the json data is a string
        if (data['occupation'] && !(typeof data['occupation'] === 'string' || data['occupation'] instanceof String)) {
            throw new Error("Expected the field `occupation` to be a primitive type in the JSON string but got " + data['occupation']);
        }
        if (data['organizations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['organizations'])) {
                throw new Error("Expected the field `organizations` to be an array in the JSON data but got " + data['organizations']);
            }
            // validate the optional field `organizations` (array)
            for (const item of data['organizations']) {
                PersonOrganizationsInner.validateJSON(item);
            };
        }
        if (data['placesLived']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['placesLived'])) {
                throw new Error("Expected the field `placesLived` to be an array in the JSON data but got " + data['placesLived']);
            }
            // validate the optional field `placesLived` (array)
            for (const item of data['placesLived']) {
                PersonPlacesLivedInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['relationshipStatus'] && !(typeof data['relationshipStatus'] === 'string' || data['relationshipStatus'] instanceof String)) {
            throw new Error("Expected the field `relationshipStatus` to be a primitive type in the JSON string but got " + data['relationshipStatus']);
        }
        // ensure the json data is a string
        if (data['skills'] && !(typeof data['skills'] === 'string' || data['skills'] instanceof String)) {
            throw new Error("Expected the field `skills` to be a primitive type in the JSON string but got " + data['skills']);
        }
        // ensure the json data is a string
        if (data['tagline'] && !(typeof data['tagline'] === 'string' || data['tagline'] instanceof String)) {
            throw new Error("Expected the field `tagline` to be a primitive type in the JSON string but got " + data['tagline']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        if (data['urls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['urls'])) {
                throw new Error("Expected the field `urls` to be an array in the JSON data but got " + data['urls']);
            }
            // validate the optional field `urls` (array)
            for (const item of data['urls']) {
                PersonUrlsInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A short biography for this person.
 * @member {String} aboutMe
 */
Person.prototype['aboutMe'] = undefined;

/**
 * @member {module:model/PersonAgeRange} ageRange
 */
Person.prototype['ageRange'] = undefined;

/**
 * The person's date of birth, represented as YYYY-MM-DD.
 * @member {String} birthday
 */
Person.prototype['birthday'] = undefined;

/**
 * The \"bragging rights\" line of this person.
 * @member {String} braggingRights
 */
Person.prototype['braggingRights'] = undefined;

/**
 * For followers who are visible, the number of people who have added this person or page to a circle.
 * @member {Number} circledByCount
 */
Person.prototype['circledByCount'] = undefined;

/**
 * @member {module:model/PersonCover} cover
 */
Person.prototype['cover'] = undefined;

/**
 * (this field is not currently used)
 * @member {String} currentLocation
 */
Person.prototype['currentLocation'] = undefined;

/**
 * The name of this person, which is suitable for display.
 * @member {String} displayName
 */
Person.prototype['displayName'] = undefined;

/**
 * The hosted domain name for the user's Google Apps account. For instance, example.com. The plus.profile.emails.read or email scope is needed to get this domain name.
 * @member {String} domain
 */
Person.prototype['domain'] = undefined;

/**
 * A list of email addresses that this person has, including their Google account email address, and the public verified email addresses on their Google+ profile. The plus.profile.emails.read scope is needed to retrieve these email addresses, or the email scope can be used to retrieve just the Google account email address.
 * @member {Array.<module:model/PersonEmailsInner>} emails
 */
Person.prototype['emails'] = undefined;

/**
 * ETag of this response for caching purposes.
 * @member {String} etag
 */
Person.prototype['etag'] = undefined;

/**
 * The person's gender. Possible values include, but are not limited to, the following values:   - \"male\" - Male gender.  - \"female\" - Female gender.  - \"other\" - Other.
 * @member {String} gender
 */
Person.prototype['gender'] = undefined;

/**
 * The ID of this person.
 * @member {String} id
 */
Person.prototype['id'] = undefined;

/**
 * @member {module:model/PersonImage} image
 */
Person.prototype['image'] = undefined;

/**
 * Whether this user has signed up for Google+.
 * @member {Boolean} isPlusUser
 */
Person.prototype['isPlusUser'] = undefined;

/**
 * Identifies this resource as a person. Value: \"plus#person\".
 * @member {String} kind
 * @default 'plus#person'
 */
Person.prototype['kind'] = 'plus#person';

/**
 * The user's preferred language for rendering.
 * @member {String} language
 */
Person.prototype['language'] = undefined;

/**
 * @member {module:model/PersonName} name
 */
Person.prototype['name'] = undefined;

/**
 * The nickname of this person.
 * @member {String} nickname
 */
Person.prototype['nickname'] = undefined;

/**
 * Type of person within Google+. Possible values include, but are not limited to, the following values:   - \"person\" - represents an actual person.  - \"page\" - represents a page.
 * @member {String} objectType
 */
Person.prototype['objectType'] = undefined;

/**
 * The occupation of this person.
 * @member {String} occupation
 */
Person.prototype['occupation'] = undefined;

/**
 * A list of current or past organizations with which this person is associated.
 * @member {Array.<module:model/PersonOrganizationsInner>} organizations
 */
Person.prototype['organizations'] = undefined;

/**
 * A list of places where this person has lived.
 * @member {Array.<module:model/PersonPlacesLivedInner>} placesLived
 */
Person.prototype['placesLived'] = undefined;

/**
 * If a Google+ Page, the number of people who have +1'd this page.
 * @member {Number} plusOneCount
 */
Person.prototype['plusOneCount'] = undefined;

/**
 * The person's relationship status. Possible values include, but are not limited to, the following values:   - \"single\" - Person is single.  - \"in_a_relationship\" - Person is in a relationship.  - \"engaged\" - Person is engaged.  - \"married\" - Person is married.  - \"its_complicated\" - The relationship is complicated.  - \"open_relationship\" - Person is in an open relationship.  - \"widowed\" - Person is widowed.  - \"in_domestic_partnership\" - Person is in a domestic partnership.  - \"in_civil_union\" - Person is in a civil union.
 * @member {String} relationshipStatus
 */
Person.prototype['relationshipStatus'] = undefined;

/**
 * The person's skills.
 * @member {String} skills
 */
Person.prototype['skills'] = undefined;

/**
 * The brief description (tagline) of this person.
 * @member {String} tagline
 */
Person.prototype['tagline'] = undefined;

/**
 * The URL of this person's profile.
 * @member {String} url
 */
Person.prototype['url'] = undefined;

/**
 * A list of URLs for this person.
 * @member {Array.<module:model/PersonUrlsInner>} urls
 */
Person.prototype['urls'] = undefined;

/**
 * Whether the person or Google+ Page has been verified.
 * @member {Boolean} verified
 */
Person.prototype['verified'] = undefined;






export default Person;

