/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Acl from './Acl';
import ActivityActor from './ActivityActor';
import ActivityObject from './ActivityObject';
import ActivityProvider from './ActivityProvider';
import Place from './Place';

/**
 * The Activity model module.
 * @module model/Activity
 * @version v1
 */
class Activity {
    /**
     * Constructs a new <code>Activity</code>.
     * @alias module:model/Activity
     */
    constructor() { 
        
        Activity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'plus#activity';
    }

    /**
     * Constructs a <code>Activity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Activity} obj Optional instance to populate.
     * @return {module:model/Activity} The populated <code>Activity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Activity();

            if (data.hasOwnProperty('access')) {
                obj['access'] = Acl.constructFromObject(data['access']);
            }
            if (data.hasOwnProperty('actor')) {
                obj['actor'] = ActivityActor.constructFromObject(data['actor']);
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('annotation')) {
                obj['annotation'] = ApiClient.convertToType(data['annotation'], 'String');
            }
            if (data.hasOwnProperty('crosspostSource')) {
                obj['crosspostSource'] = ApiClient.convertToType(data['crosspostSource'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('geocode')) {
                obj['geocode'] = ApiClient.convertToType(data['geocode'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Place.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ActivityObject.constructFromObject(data['object']);
            }
            if (data.hasOwnProperty('placeId')) {
                obj['placeId'] = ApiClient.convertToType(data['placeId'], 'String');
            }
            if (data.hasOwnProperty('placeName')) {
                obj['placeName'] = ApiClient.convertToType(data['placeName'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ActivityProvider.constructFromObject(data['provider']);
            }
            if (data.hasOwnProperty('published')) {
                obj['published'] = ApiClient.convertToType(data['published'], 'Date');
            }
            if (data.hasOwnProperty('radius')) {
                obj['radius'] = ApiClient.convertToType(data['radius'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('verb')) {
                obj['verb'] = ApiClient.convertToType(data['verb'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Activity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Activity</code>.
     */
    static validateJSON(data) {
        // validate the optional field `access`
        if (data['access']) { // data not null
          Acl.validateJSON(data['access']);
        }
        // validate the optional field `actor`
        if (data['actor']) { // data not null
          ActivityActor.validateJSON(data['actor']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['annotation'] && !(typeof data['annotation'] === 'string' || data['annotation'] instanceof String)) {
            throw new Error("Expected the field `annotation` to be a primitive type in the JSON string but got " + data['annotation']);
        }
        // ensure the json data is a string
        if (data['crosspostSource'] && !(typeof data['crosspostSource'] === 'string' || data['crosspostSource'] instanceof String)) {
            throw new Error("Expected the field `crosspostSource` to be a primitive type in the JSON string but got " + data['crosspostSource']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['geocode'] && !(typeof data['geocode'] === 'string' || data['geocode'] instanceof String)) {
            throw new Error("Expected the field `geocode` to be a primitive type in the JSON string but got " + data['geocode']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Place.validateJSON(data['location']);
        }
        // validate the optional field `object`
        if (data['object']) { // data not null
          ActivityObject.validateJSON(data['object']);
        }
        // ensure the json data is a string
        if (data['placeId'] && !(typeof data['placeId'] === 'string' || data['placeId'] instanceof String)) {
            throw new Error("Expected the field `placeId` to be a primitive type in the JSON string but got " + data['placeId']);
        }
        // ensure the json data is a string
        if (data['placeName'] && !(typeof data['placeName'] === 'string' || data['placeName'] instanceof String)) {
            throw new Error("Expected the field `placeName` to be a primitive type in the JSON string but got " + data['placeName']);
        }
        // validate the optional field `provider`
        if (data['provider']) { // data not null
          ActivityProvider.validateJSON(data['provider']);
        }
        // ensure the json data is a string
        if (data['radius'] && !(typeof data['radius'] === 'string' || data['radius'] instanceof String)) {
            throw new Error("Expected the field `radius` to be a primitive type in the JSON string but got " + data['radius']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['verb'] && !(typeof data['verb'] === 'string' || data['verb'] instanceof String)) {
            throw new Error("Expected the field `verb` to be a primitive type in the JSON string but got " + data['verb']);
        }

        return true;
    }


}



/**
 * @member {module:model/Acl} access
 */
Activity.prototype['access'] = undefined;

/**
 * @member {module:model/ActivityActor} actor
 */
Activity.prototype['actor'] = undefined;

/**
 * Street address where this activity occurred.
 * @member {String} address
 */
Activity.prototype['address'] = undefined;

/**
 * Additional content added by the person who shared this activity, applicable only when resharing an activity.
 * @member {String} annotation
 */
Activity.prototype['annotation'] = undefined;

/**
 * If this activity is a crosspost from another system, this property specifies the ID of the original activity.
 * @member {String} crosspostSource
 */
Activity.prototype['crosspostSource'] = undefined;

/**
 * ETag of this response for caching purposes.
 * @member {String} etag
 */
Activity.prototype['etag'] = undefined;

/**
 * Latitude and longitude where this activity occurred. Format is latitude followed by longitude, space separated.
 * @member {String} geocode
 */
Activity.prototype['geocode'] = undefined;

/**
 * The ID of this activity.
 * @member {String} id
 */
Activity.prototype['id'] = undefined;

/**
 * Identifies this resource as an activity. Value: \"plus#activity\".
 * @member {String} kind
 * @default 'plus#activity'
 */
Activity.prototype['kind'] = 'plus#activity';

/**
 * @member {module:model/Place} location
 */
Activity.prototype['location'] = undefined;

/**
 * @member {module:model/ActivityObject} object
 */
Activity.prototype['object'] = undefined;

/**
 * ID of the place where this activity occurred.
 * @member {String} placeId
 */
Activity.prototype['placeId'] = undefined;

/**
 * Name of the place where this activity occurred.
 * @member {String} placeName
 */
Activity.prototype['placeName'] = undefined;

/**
 * @member {module:model/ActivityProvider} provider
 */
Activity.prototype['provider'] = undefined;

/**
 * The time at which this activity was initially published. Formatted as an RFC 3339 timestamp.
 * @member {Date} published
 */
Activity.prototype['published'] = undefined;

/**
 * Radius, in meters, of the region where this activity occurred, centered at the latitude and longitude identified in geocode.
 * @member {String} radius
 */
Activity.prototype['radius'] = undefined;

/**
 * Title of this activity.
 * @member {String} title
 */
Activity.prototype['title'] = undefined;

/**
 * The time at which this activity was last updated. Formatted as an RFC 3339 timestamp.
 * @member {Date} updated
 */
Activity.prototype['updated'] = undefined;

/**
 * The link to this activity.
 * @member {String} url
 */
Activity.prototype['url'] = undefined;

/**
 * This activity's verb, which indicates the action that was performed. Possible values include, but are not limited to, the following values:   - \"post\" - Publish content to the stream.  - \"share\" - Reshare an activity.
 * @member {String} verb
 */
Activity.prototype['verb'] = undefined;






export default Activity;

