/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PersonName model module.
 * @module model/PersonName
 * @version v1
 */
class PersonName {
    /**
     * Constructs a new <code>PersonName</code>.
     * An object representation of the individual components of a person&#39;s name.
     * @alias module:model/PersonName
     */
    constructor() { 
        
        PersonName.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PersonName</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PersonName} obj Optional instance to populate.
     * @return {module:model/PersonName} The populated <code>PersonName</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PersonName();

            if (data.hasOwnProperty('familyName')) {
                obj['familyName'] = ApiClient.convertToType(data['familyName'], 'String');
            }
            if (data.hasOwnProperty('formatted')) {
                obj['formatted'] = ApiClient.convertToType(data['formatted'], 'String');
            }
            if (data.hasOwnProperty('givenName')) {
                obj['givenName'] = ApiClient.convertToType(data['givenName'], 'String');
            }
            if (data.hasOwnProperty('honorificPrefix')) {
                obj['honorificPrefix'] = ApiClient.convertToType(data['honorificPrefix'], 'String');
            }
            if (data.hasOwnProperty('honorificSuffix')) {
                obj['honorificSuffix'] = ApiClient.convertToType(data['honorificSuffix'], 'String');
            }
            if (data.hasOwnProperty('middleName')) {
                obj['middleName'] = ApiClient.convertToType(data['middleName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PersonName</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PersonName</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['familyName'] && !(typeof data['familyName'] === 'string' || data['familyName'] instanceof String)) {
            throw new Error("Expected the field `familyName` to be a primitive type in the JSON string but got " + data['familyName']);
        }
        // ensure the json data is a string
        if (data['formatted'] && !(typeof data['formatted'] === 'string' || data['formatted'] instanceof String)) {
            throw new Error("Expected the field `formatted` to be a primitive type in the JSON string but got " + data['formatted']);
        }
        // ensure the json data is a string
        if (data['givenName'] && !(typeof data['givenName'] === 'string' || data['givenName'] instanceof String)) {
            throw new Error("Expected the field `givenName` to be a primitive type in the JSON string but got " + data['givenName']);
        }
        // ensure the json data is a string
        if (data['honorificPrefix'] && !(typeof data['honorificPrefix'] === 'string' || data['honorificPrefix'] instanceof String)) {
            throw new Error("Expected the field `honorificPrefix` to be a primitive type in the JSON string but got " + data['honorificPrefix']);
        }
        // ensure the json data is a string
        if (data['honorificSuffix'] && !(typeof data['honorificSuffix'] === 'string' || data['honorificSuffix'] instanceof String)) {
            throw new Error("Expected the field `honorificSuffix` to be a primitive type in the JSON string but got " + data['honorificSuffix']);
        }
        // ensure the json data is a string
        if (data['middleName'] && !(typeof data['middleName'] === 'string' || data['middleName'] instanceof String)) {
            throw new Error("Expected the field `middleName` to be a primitive type in the JSON string but got " + data['middleName']);
        }

        return true;
    }


}



/**
 * The family name (last name) of this person.
 * @member {String} familyName
 */
PersonName.prototype['familyName'] = undefined;

/**
 * The full name of this person, including middle names, suffixes, etc.
 * @member {String} formatted
 */
PersonName.prototype['formatted'] = undefined;

/**
 * The given name (first name) of this person.
 * @member {String} givenName
 */
PersonName.prototype['givenName'] = undefined;

/**
 * The honorific prefixes (such as \"Dr.\" or \"Mrs.\") for this person.
 * @member {String} honorificPrefix
 */
PersonName.prototype['honorificPrefix'] = undefined;

/**
 * The honorific suffixes (such as \"Jr.\") for this person.
 * @member {String} honorificSuffix
 */
PersonName.prototype['honorificSuffix'] = undefined;

/**
 * The middle name of this person.
 * @member {String} middleName
 */
PersonName.prototype['middleName'] = undefined;






export default PersonName;

