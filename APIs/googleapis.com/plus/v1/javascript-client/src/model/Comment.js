/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommentActor from './CommentActor';
import CommentInReplyToInner from './CommentInReplyToInner';
import CommentObject from './CommentObject';
import CommentPlusoners from './CommentPlusoners';

/**
 * The Comment model module.
 * @module model/Comment
 * @version v1
 */
class Comment {
    /**
     * Constructs a new <code>Comment</code>.
     * @alias module:model/Comment
     */
    constructor() { 
        
        Comment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'plus#comment';
        obj['verb'] = 'post';
    }

    /**
     * Constructs a <code>Comment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Comment} obj Optional instance to populate.
     * @return {module:model/Comment} The populated <code>Comment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Comment();

            if (data.hasOwnProperty('actor')) {
                obj['actor'] = CommentActor.constructFromObject(data['actor']);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('inReplyTo')) {
                obj['inReplyTo'] = ApiClient.convertToType(data['inReplyTo'], [CommentInReplyToInner]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = CommentObject.constructFromObject(data['object']);
            }
            if (data.hasOwnProperty('plusoners')) {
                obj['plusoners'] = CommentPlusoners.constructFromObject(data['plusoners']);
            }
            if (data.hasOwnProperty('published')) {
                obj['published'] = ApiClient.convertToType(data['published'], 'Date');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
            if (data.hasOwnProperty('verb')) {
                obj['verb'] = ApiClient.convertToType(data['verb'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Comment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Comment</code>.
     */
    static validateJSON(data) {
        // validate the optional field `actor`
        if (data['actor']) { // data not null
          CommentActor.validateJSON(data['actor']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['inReplyTo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inReplyTo'])) {
                throw new Error("Expected the field `inReplyTo` to be an array in the JSON data but got " + data['inReplyTo']);
            }
            // validate the optional field `inReplyTo` (array)
            for (const item of data['inReplyTo']) {
                CommentInReplyToInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `object`
        if (data['object']) { // data not null
          CommentObject.validateJSON(data['object']);
        }
        // validate the optional field `plusoners`
        if (data['plusoners']) { // data not null
          CommentPlusoners.validateJSON(data['plusoners']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // ensure the json data is a string
        if (data['verb'] && !(typeof data['verb'] === 'string' || data['verb'] instanceof String)) {
            throw new Error("Expected the field `verb` to be a primitive type in the JSON string but got " + data['verb']);
        }

        return true;
    }


}



/**
 * @member {module:model/CommentActor} actor
 */
Comment.prototype['actor'] = undefined;

/**
 * ETag of this response for caching purposes.
 * @member {String} etag
 */
Comment.prototype['etag'] = undefined;

/**
 * The ID of this comment.
 * @member {String} id
 */
Comment.prototype['id'] = undefined;

/**
 * The activity this comment replied to.
 * @member {Array.<module:model/CommentInReplyToInner>} inReplyTo
 */
Comment.prototype['inReplyTo'] = undefined;

/**
 * Identifies this resource as a comment. Value: \"plus#comment\".
 * @member {String} kind
 * @default 'plus#comment'
 */
Comment.prototype['kind'] = 'plus#comment';

/**
 * @member {module:model/CommentObject} object
 */
Comment.prototype['object'] = undefined;

/**
 * @member {module:model/CommentPlusoners} plusoners
 */
Comment.prototype['plusoners'] = undefined;

/**
 * The time at which this comment was initially published. Formatted as an RFC 3339 timestamp.
 * @member {Date} published
 */
Comment.prototype['published'] = undefined;

/**
 * Link to this comment resource.
 * @member {String} selfLink
 */
Comment.prototype['selfLink'] = undefined;

/**
 * The time at which this comment was last updated. Formatted as an RFC 3339 timestamp.
 * @member {Date} updated
 */
Comment.prototype['updated'] = undefined;

/**
 * This comment's verb, indicating what action was performed. Possible values are:   - \"post\" - Publish content to the stream.
 * @member {String} verb
 * @default 'post'
 */
Comment.prototype['verb'] = 'post';






export default Comment;

