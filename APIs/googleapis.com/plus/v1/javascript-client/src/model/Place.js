/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlaceAddress from './PlaceAddress';
import PlacePosition from './PlacePosition';

/**
 * The Place model module.
 * @module model/Place
 * @version v1
 */
class Place {
    /**
     * Constructs a new <code>Place</code>.
     * @alias module:model/Place
     */
    constructor() { 
        
        Place.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'plus#place';
    }

    /**
     * Constructs a <code>Place</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Place} obj Optional instance to populate.
     * @return {module:model/Place} The populated <code>Place</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Place();

            if (data.hasOwnProperty('address')) {
                obj['address'] = PlaceAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = PlacePosition.constructFromObject(data['position']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Place</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Place</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          PlaceAddress.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `position`
        if (data['position']) { // data not null
          PlacePosition.validateJSON(data['position']);
        }

        return true;
    }


}



/**
 * @member {module:model/PlaceAddress} address
 */
Place.prototype['address'] = undefined;

/**
 * The display name of the place.
 * @member {String} displayName
 */
Place.prototype['displayName'] = undefined;

/**
 * The id of the place.
 * @member {String} id
 */
Place.prototype['id'] = undefined;

/**
 * Identifies this resource as a place. Value: \"plus#place\".
 * @member {String} kind
 * @default 'plus#place'
 */
Place.prototype['kind'] = 'plus#place';

/**
 * @member {module:model/PlacePosition} position
 */
Place.prototype['position'] = undefined;






export default Place;

