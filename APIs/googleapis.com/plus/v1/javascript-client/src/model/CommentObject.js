/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CommentObject model module.
 * @module model/CommentObject
 * @version v1
 */
class CommentObject {
    /**
     * Constructs a new <code>CommentObject</code>.
     * The object of this comment.
     * @alias module:model/CommentObject
     */
    constructor() { 
        
        CommentObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['objectType'] = 'comment';
    }

    /**
     * Constructs a <code>CommentObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommentObject} obj Optional instance to populate.
     * @return {module:model/CommentObject} The populated <code>CommentObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommentObject();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('objectType')) {
                obj['objectType'] = ApiClient.convertToType(data['objectType'], 'String');
            }
            if (data.hasOwnProperty('originalContent')) {
                obj['originalContent'] = ApiClient.convertToType(data['originalContent'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommentObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommentObject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['objectType'] && !(typeof data['objectType'] === 'string' || data['objectType'] instanceof String)) {
            throw new Error("Expected the field `objectType` to be a primitive type in the JSON string but got " + data['objectType']);
        }
        // ensure the json data is a string
        if (data['originalContent'] && !(typeof data['originalContent'] === 'string' || data['originalContent'] instanceof String)) {
            throw new Error("Expected the field `originalContent` to be a primitive type in the JSON string but got " + data['originalContent']);
        }

        return true;
    }


}



/**
 * The HTML-formatted content, suitable for display.
 * @member {String} content
 */
CommentObject.prototype['content'] = undefined;

/**
 * The object type of this comment. Possible values are:   - \"comment\" - A comment in reply to an activity.
 * @member {String} objectType
 * @default 'comment'
 */
CommentObject.prototype['objectType'] = 'comment';

/**
 * The content (text) as provided by the author, stored without any HTML formatting. When creating or updating a comment, this value must be supplied as plain text in the request.
 * @member {String} originalContent
 */
CommentObject.prototype['originalContent'] = undefined;






export default CommentObject;

