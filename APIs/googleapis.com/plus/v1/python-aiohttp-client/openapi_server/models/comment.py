# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment_actor import CommentActor
from openapi_server.models.comment_in_reply_to_inner import CommentInReplyToInner
from openapi_server.models.comment_object import CommentObject
from openapi_server.models.comment_plusoners import CommentPlusoners
from openapi_server import util


class Comment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actor: CommentActor=None, etag: str=None, id: str=None, in_reply_to: List[CommentInReplyToInner]=None, kind: str='plus#comment', object: CommentObject=None, plusoners: CommentPlusoners=None, published: datetime=None, self_link: str=None, updated: datetime=None, verb: str='post'):
        """Comment - a model defined in OpenAPI

        :param actor: The actor of this Comment.
        :param etag: The etag of this Comment.
        :param id: The id of this Comment.
        :param in_reply_to: The in_reply_to of this Comment.
        :param kind: The kind of this Comment.
        :param object: The object of this Comment.
        :param plusoners: The plusoners of this Comment.
        :param published: The published of this Comment.
        :param self_link: The self_link of this Comment.
        :param updated: The updated of this Comment.
        :param verb: The verb of this Comment.
        """
        self.openapi_types = {
            'actor': CommentActor,
            'etag': str,
            'id': str,
            'in_reply_to': List[CommentInReplyToInner],
            'kind': str,
            'object': CommentObject,
            'plusoners': CommentPlusoners,
            'published': datetime,
            'self_link': str,
            'updated': datetime,
            'verb': str
        }

        self.attribute_map = {
            'actor': 'actor',
            'etag': 'etag',
            'id': 'id',
            'in_reply_to': 'inReplyTo',
            'kind': 'kind',
            'object': 'object',
            'plusoners': 'plusoners',
            'published': 'published',
            'self_link': 'selfLink',
            'updated': 'updated',
            'verb': 'verb'
        }

        self._actor = actor
        self._etag = etag
        self._id = id
        self._in_reply_to = in_reply_to
        self._kind = kind
        self._object = object
        self._plusoners = plusoners
        self._published = published
        self._self_link = self_link
        self._updated = updated
        self._verb = verb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Comment of this Comment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actor(self):
        """Gets the actor of this Comment.


        :return: The actor of this Comment.
        :rtype: CommentActor
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this Comment.


        :param actor: The actor of this Comment.
        :type actor: CommentActor
        """

        self._actor = actor

    @property
    def etag(self):
        """Gets the etag of this Comment.

        ETag of this response for caching purposes.

        :return: The etag of this Comment.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Comment.

        ETag of this response for caching purposes.

        :param etag: The etag of this Comment.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this Comment.

        The ID of this comment.

        :return: The id of this Comment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comment.

        The ID of this comment.

        :param id: The id of this Comment.
        :type id: str
        """

        self._id = id

    @property
    def in_reply_to(self):
        """Gets the in_reply_to of this Comment.

        The activity this comment replied to.

        :return: The in_reply_to of this Comment.
        :rtype: List[CommentInReplyToInner]
        """
        return self._in_reply_to

    @in_reply_to.setter
    def in_reply_to(self, in_reply_to):
        """Sets the in_reply_to of this Comment.

        The activity this comment replied to.

        :param in_reply_to: The in_reply_to of this Comment.
        :type in_reply_to: List[CommentInReplyToInner]
        """

        self._in_reply_to = in_reply_to

    @property
    def kind(self):
        """Gets the kind of this Comment.

        Identifies this resource as a comment. Value: \"plus#comment\".

        :return: The kind of this Comment.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Comment.

        Identifies this resource as a comment. Value: \"plus#comment\".

        :param kind: The kind of this Comment.
        :type kind: str
        """

        self._kind = kind

    @property
    def object(self):
        """Gets the object of this Comment.


        :return: The object of this Comment.
        :rtype: CommentObject
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this Comment.


        :param object: The object of this Comment.
        :type object: CommentObject
        """

        self._object = object

    @property
    def plusoners(self):
        """Gets the plusoners of this Comment.


        :return: The plusoners of this Comment.
        :rtype: CommentPlusoners
        """
        return self._plusoners

    @plusoners.setter
    def plusoners(self, plusoners):
        """Sets the plusoners of this Comment.


        :param plusoners: The plusoners of this Comment.
        :type plusoners: CommentPlusoners
        """

        self._plusoners = plusoners

    @property
    def published(self):
        """Gets the published of this Comment.

        The time at which this comment was initially published. Formatted as an RFC 3339 timestamp.

        :return: The published of this Comment.
        :rtype: datetime
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Comment.

        The time at which this comment was initially published. Formatted as an RFC 3339 timestamp.

        :param published: The published of this Comment.
        :type published: datetime
        """

        self._published = published

    @property
    def self_link(self):
        """Gets the self_link of this Comment.

        Link to this comment resource.

        :return: The self_link of this Comment.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Comment.

        Link to this comment resource.

        :param self_link: The self_link of this Comment.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def updated(self):
        """Gets the updated of this Comment.

        The time at which this comment was last updated. Formatted as an RFC 3339 timestamp.

        :return: The updated of this Comment.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Comment.

        The time at which this comment was last updated. Formatted as an RFC 3339 timestamp.

        :param updated: The updated of this Comment.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def verb(self):
        """Gets the verb of this Comment.

        This comment's verb, indicating what action was performed. Possible values are:   - \"post\" - Publish content to the stream.

        :return: The verb of this Comment.
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this Comment.

        This comment's verb, indicating what action was performed. Possible values are:   - \"post\" - Publish content to the stream.

        :param verb: The verb of this Comment.
        :type verb: str
        """

        self._verb = verb
