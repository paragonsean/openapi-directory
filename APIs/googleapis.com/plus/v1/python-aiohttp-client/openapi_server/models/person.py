# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.person_age_range import PersonAgeRange
from openapi_server.models.person_cover import PersonCover
from openapi_server.models.person_emails_inner import PersonEmailsInner
from openapi_server.models.person_image import PersonImage
from openapi_server.models.person_name import PersonName
from openapi_server.models.person_organizations_inner import PersonOrganizationsInner
from openapi_server.models.person_places_lived_inner import PersonPlacesLivedInner
from openapi_server.models.person_urls_inner import PersonUrlsInner
from openapi_server import util


class Person(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, about_me: str=None, age_range: PersonAgeRange=None, birthday: str=None, bragging_rights: str=None, circled_by_count: int=None, cover: PersonCover=None, current_location: str=None, display_name: str=None, domain: str=None, emails: List[PersonEmailsInner]=None, etag: str=None, gender: str=None, id: str=None, image: PersonImage=None, is_plus_user: bool=None, kind: str='plus#person', language: str=None, name: PersonName=None, nickname: str=None, object_type: str=None, occupation: str=None, organizations: List[PersonOrganizationsInner]=None, places_lived: List[PersonPlacesLivedInner]=None, plus_one_count: int=None, relationship_status: str=None, skills: str=None, tagline: str=None, url: str=None, urls: List[PersonUrlsInner]=None, verified: bool=None):
        """Person - a model defined in OpenAPI

        :param about_me: The about_me of this Person.
        :param age_range: The age_range of this Person.
        :param birthday: The birthday of this Person.
        :param bragging_rights: The bragging_rights of this Person.
        :param circled_by_count: The circled_by_count of this Person.
        :param cover: The cover of this Person.
        :param current_location: The current_location of this Person.
        :param display_name: The display_name of this Person.
        :param domain: The domain of this Person.
        :param emails: The emails of this Person.
        :param etag: The etag of this Person.
        :param gender: The gender of this Person.
        :param id: The id of this Person.
        :param image: The image of this Person.
        :param is_plus_user: The is_plus_user of this Person.
        :param kind: The kind of this Person.
        :param language: The language of this Person.
        :param name: The name of this Person.
        :param nickname: The nickname of this Person.
        :param object_type: The object_type of this Person.
        :param occupation: The occupation of this Person.
        :param organizations: The organizations of this Person.
        :param places_lived: The places_lived of this Person.
        :param plus_one_count: The plus_one_count of this Person.
        :param relationship_status: The relationship_status of this Person.
        :param skills: The skills of this Person.
        :param tagline: The tagline of this Person.
        :param url: The url of this Person.
        :param urls: The urls of this Person.
        :param verified: The verified of this Person.
        """
        self.openapi_types = {
            'about_me': str,
            'age_range': PersonAgeRange,
            'birthday': str,
            'bragging_rights': str,
            'circled_by_count': int,
            'cover': PersonCover,
            'current_location': str,
            'display_name': str,
            'domain': str,
            'emails': List[PersonEmailsInner],
            'etag': str,
            'gender': str,
            'id': str,
            'image': PersonImage,
            'is_plus_user': bool,
            'kind': str,
            'language': str,
            'name': PersonName,
            'nickname': str,
            'object_type': str,
            'occupation': str,
            'organizations': List[PersonOrganizationsInner],
            'places_lived': List[PersonPlacesLivedInner],
            'plus_one_count': int,
            'relationship_status': str,
            'skills': str,
            'tagline': str,
            'url': str,
            'urls': List[PersonUrlsInner],
            'verified': bool
        }

        self.attribute_map = {
            'about_me': 'aboutMe',
            'age_range': 'ageRange',
            'birthday': 'birthday',
            'bragging_rights': 'braggingRights',
            'circled_by_count': 'circledByCount',
            'cover': 'cover',
            'current_location': 'currentLocation',
            'display_name': 'displayName',
            'domain': 'domain',
            'emails': 'emails',
            'etag': 'etag',
            'gender': 'gender',
            'id': 'id',
            'image': 'image',
            'is_plus_user': 'isPlusUser',
            'kind': 'kind',
            'language': 'language',
            'name': 'name',
            'nickname': 'nickname',
            'object_type': 'objectType',
            'occupation': 'occupation',
            'organizations': 'organizations',
            'places_lived': 'placesLived',
            'plus_one_count': 'plusOneCount',
            'relationship_status': 'relationshipStatus',
            'skills': 'skills',
            'tagline': 'tagline',
            'url': 'url',
            'urls': 'urls',
            'verified': 'verified'
        }

        self._about_me = about_me
        self._age_range = age_range
        self._birthday = birthday
        self._bragging_rights = bragging_rights
        self._circled_by_count = circled_by_count
        self._cover = cover
        self._current_location = current_location
        self._display_name = display_name
        self._domain = domain
        self._emails = emails
        self._etag = etag
        self._gender = gender
        self._id = id
        self._image = image
        self._is_plus_user = is_plus_user
        self._kind = kind
        self._language = language
        self._name = name
        self._nickname = nickname
        self._object_type = object_type
        self._occupation = occupation
        self._organizations = organizations
        self._places_lived = places_lived
        self._plus_one_count = plus_one_count
        self._relationship_status = relationship_status
        self._skills = skills
        self._tagline = tagline
        self._url = url
        self._urls = urls
        self._verified = verified

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Person of this Person.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def about_me(self):
        """Gets the about_me of this Person.

        A short biography for this person.

        :return: The about_me of this Person.
        :rtype: str
        """
        return self._about_me

    @about_me.setter
    def about_me(self, about_me):
        """Sets the about_me of this Person.

        A short biography for this person.

        :param about_me: The about_me of this Person.
        :type about_me: str
        """

        self._about_me = about_me

    @property
    def age_range(self):
        """Gets the age_range of this Person.


        :return: The age_range of this Person.
        :rtype: PersonAgeRange
        """
        return self._age_range

    @age_range.setter
    def age_range(self, age_range):
        """Sets the age_range of this Person.


        :param age_range: The age_range of this Person.
        :type age_range: PersonAgeRange
        """

        self._age_range = age_range

    @property
    def birthday(self):
        """Gets the birthday of this Person.

        The person's date of birth, represented as YYYY-MM-DD.

        :return: The birthday of this Person.
        :rtype: str
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this Person.

        The person's date of birth, represented as YYYY-MM-DD.

        :param birthday: The birthday of this Person.
        :type birthday: str
        """

        self._birthday = birthday

    @property
    def bragging_rights(self):
        """Gets the bragging_rights of this Person.

        The \"bragging rights\" line of this person.

        :return: The bragging_rights of this Person.
        :rtype: str
        """
        return self._bragging_rights

    @bragging_rights.setter
    def bragging_rights(self, bragging_rights):
        """Sets the bragging_rights of this Person.

        The \"bragging rights\" line of this person.

        :param bragging_rights: The bragging_rights of this Person.
        :type bragging_rights: str
        """

        self._bragging_rights = bragging_rights

    @property
    def circled_by_count(self):
        """Gets the circled_by_count of this Person.

        For followers who are visible, the number of people who have added this person or page to a circle.

        :return: The circled_by_count of this Person.
        :rtype: int
        """
        return self._circled_by_count

    @circled_by_count.setter
    def circled_by_count(self, circled_by_count):
        """Sets the circled_by_count of this Person.

        For followers who are visible, the number of people who have added this person or page to a circle.

        :param circled_by_count: The circled_by_count of this Person.
        :type circled_by_count: int
        """

        self._circled_by_count = circled_by_count

    @property
    def cover(self):
        """Gets the cover of this Person.


        :return: The cover of this Person.
        :rtype: PersonCover
        """
        return self._cover

    @cover.setter
    def cover(self, cover):
        """Sets the cover of this Person.


        :param cover: The cover of this Person.
        :type cover: PersonCover
        """

        self._cover = cover

    @property
    def current_location(self):
        """Gets the current_location of this Person.

        (this field is not currently used)

        :return: The current_location of this Person.
        :rtype: str
        """
        return self._current_location

    @current_location.setter
    def current_location(self, current_location):
        """Sets the current_location of this Person.

        (this field is not currently used)

        :param current_location: The current_location of this Person.
        :type current_location: str
        """

        self._current_location = current_location

    @property
    def display_name(self):
        """Gets the display_name of this Person.

        The name of this person, which is suitable for display.

        :return: The display_name of this Person.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Person.

        The name of this person, which is suitable for display.

        :param display_name: The display_name of this Person.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def domain(self):
        """Gets the domain of this Person.

        The hosted domain name for the user's Google Apps account. For instance, example.com. The plus.profile.emails.read or email scope is needed to get this domain name.

        :return: The domain of this Person.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Person.

        The hosted domain name for the user's Google Apps account. For instance, example.com. The plus.profile.emails.read or email scope is needed to get this domain name.

        :param domain: The domain of this Person.
        :type domain: str
        """

        self._domain = domain

    @property
    def emails(self):
        """Gets the emails of this Person.

        A list of email addresses that this person has, including their Google account email address, and the public verified email addresses on their Google+ profile. The plus.profile.emails.read scope is needed to retrieve these email addresses, or the email scope can be used to retrieve just the Google account email address.

        :return: The emails of this Person.
        :rtype: List[PersonEmailsInner]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this Person.

        A list of email addresses that this person has, including their Google account email address, and the public verified email addresses on their Google+ profile. The plus.profile.emails.read scope is needed to retrieve these email addresses, or the email scope can be used to retrieve just the Google account email address.

        :param emails: The emails of this Person.
        :type emails: List[PersonEmailsInner]
        """

        self._emails = emails

    @property
    def etag(self):
        """Gets the etag of this Person.

        ETag of this response for caching purposes.

        :return: The etag of this Person.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Person.

        ETag of this response for caching purposes.

        :param etag: The etag of this Person.
        :type etag: str
        """

        self._etag = etag

    @property
    def gender(self):
        """Gets the gender of this Person.

        The person's gender. Possible values include, but are not limited to, the following values:   - \"male\" - Male gender.  - \"female\" - Female gender.  - \"other\" - Other.

        :return: The gender of this Person.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Person.

        The person's gender. Possible values include, but are not limited to, the following values:   - \"male\" - Male gender.  - \"female\" - Female gender.  - \"other\" - Other.

        :param gender: The gender of this Person.
        :type gender: str
        """

        self._gender = gender

    @property
    def id(self):
        """Gets the id of this Person.

        The ID of this person.

        :return: The id of this Person.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Person.

        The ID of this person.

        :param id: The id of this Person.
        :type id: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this Person.


        :return: The image of this Person.
        :rtype: PersonImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Person.


        :param image: The image of this Person.
        :type image: PersonImage
        """

        self._image = image

    @property
    def is_plus_user(self):
        """Gets the is_plus_user of this Person.

        Whether this user has signed up for Google+.

        :return: The is_plus_user of this Person.
        :rtype: bool
        """
        return self._is_plus_user

    @is_plus_user.setter
    def is_plus_user(self, is_plus_user):
        """Sets the is_plus_user of this Person.

        Whether this user has signed up for Google+.

        :param is_plus_user: The is_plus_user of this Person.
        :type is_plus_user: bool
        """

        self._is_plus_user = is_plus_user

    @property
    def kind(self):
        """Gets the kind of this Person.

        Identifies this resource as a person. Value: \"plus#person\".

        :return: The kind of this Person.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Person.

        Identifies this resource as a person. Value: \"plus#person\".

        :param kind: The kind of this Person.
        :type kind: str
        """

        self._kind = kind

    @property
    def language(self):
        """Gets the language of this Person.

        The user's preferred language for rendering.

        :return: The language of this Person.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Person.

        The user's preferred language for rendering.

        :param language: The language of this Person.
        :type language: str
        """

        self._language = language

    @property
    def name(self):
        """Gets the name of this Person.


        :return: The name of this Person.
        :rtype: PersonName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Person.


        :param name: The name of this Person.
        :type name: PersonName
        """

        self._name = name

    @property
    def nickname(self):
        """Gets the nickname of this Person.

        The nickname of this person.

        :return: The nickname of this Person.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this Person.

        The nickname of this person.

        :param nickname: The nickname of this Person.
        :type nickname: str
        """

        self._nickname = nickname

    @property
    def object_type(self):
        """Gets the object_type of this Person.

        Type of person within Google+. Possible values include, but are not limited to, the following values:   - \"person\" - represents an actual person.  - \"page\" - represents a page.

        :return: The object_type of this Person.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this Person.

        Type of person within Google+. Possible values include, but are not limited to, the following values:   - \"person\" - represents an actual person.  - \"page\" - represents a page.

        :param object_type: The object_type of this Person.
        :type object_type: str
        """

        self._object_type = object_type

    @property
    def occupation(self):
        """Gets the occupation of this Person.

        The occupation of this person.

        :return: The occupation of this Person.
        :rtype: str
        """
        return self._occupation

    @occupation.setter
    def occupation(self, occupation):
        """Sets the occupation of this Person.

        The occupation of this person.

        :param occupation: The occupation of this Person.
        :type occupation: str
        """

        self._occupation = occupation

    @property
    def organizations(self):
        """Gets the organizations of this Person.

        A list of current or past organizations with which this person is associated.

        :return: The organizations of this Person.
        :rtype: List[PersonOrganizationsInner]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this Person.

        A list of current or past organizations with which this person is associated.

        :param organizations: The organizations of this Person.
        :type organizations: List[PersonOrganizationsInner]
        """

        self._organizations = organizations

    @property
    def places_lived(self):
        """Gets the places_lived of this Person.

        A list of places where this person has lived.

        :return: The places_lived of this Person.
        :rtype: List[PersonPlacesLivedInner]
        """
        return self._places_lived

    @places_lived.setter
    def places_lived(self, places_lived):
        """Sets the places_lived of this Person.

        A list of places where this person has lived.

        :param places_lived: The places_lived of this Person.
        :type places_lived: List[PersonPlacesLivedInner]
        """

        self._places_lived = places_lived

    @property
    def plus_one_count(self):
        """Gets the plus_one_count of this Person.

        If a Google+ Page, the number of people who have +1'd this page.

        :return: The plus_one_count of this Person.
        :rtype: int
        """
        return self._plus_one_count

    @plus_one_count.setter
    def plus_one_count(self, plus_one_count):
        """Sets the plus_one_count of this Person.

        If a Google+ Page, the number of people who have +1'd this page.

        :param plus_one_count: The plus_one_count of this Person.
        :type plus_one_count: int
        """

        self._plus_one_count = plus_one_count

    @property
    def relationship_status(self):
        """Gets the relationship_status of this Person.

        The person's relationship status. Possible values include, but are not limited to, the following values:   - \"single\" - Person is single.  - \"in_a_relationship\" - Person is in a relationship.  - \"engaged\" - Person is engaged.  - \"married\" - Person is married.  - \"its_complicated\" - The relationship is complicated.  - \"open_relationship\" - Person is in an open relationship.  - \"widowed\" - Person is widowed.  - \"in_domestic_partnership\" - Person is in a domestic partnership.  - \"in_civil_union\" - Person is in a civil union.

        :return: The relationship_status of this Person.
        :rtype: str
        """
        return self._relationship_status

    @relationship_status.setter
    def relationship_status(self, relationship_status):
        """Sets the relationship_status of this Person.

        The person's relationship status. Possible values include, but are not limited to, the following values:   - \"single\" - Person is single.  - \"in_a_relationship\" - Person is in a relationship.  - \"engaged\" - Person is engaged.  - \"married\" - Person is married.  - \"its_complicated\" - The relationship is complicated.  - \"open_relationship\" - Person is in an open relationship.  - \"widowed\" - Person is widowed.  - \"in_domestic_partnership\" - Person is in a domestic partnership.  - \"in_civil_union\" - Person is in a civil union.

        :param relationship_status: The relationship_status of this Person.
        :type relationship_status: str
        """

        self._relationship_status = relationship_status

    @property
    def skills(self):
        """Gets the skills of this Person.

        The person's skills.

        :return: The skills of this Person.
        :rtype: str
        """
        return self._skills

    @skills.setter
    def skills(self, skills):
        """Sets the skills of this Person.

        The person's skills.

        :param skills: The skills of this Person.
        :type skills: str
        """

        self._skills = skills

    @property
    def tagline(self):
        """Gets the tagline of this Person.

        The brief description (tagline) of this person.

        :return: The tagline of this Person.
        :rtype: str
        """
        return self._tagline

    @tagline.setter
    def tagline(self, tagline):
        """Sets the tagline of this Person.

        The brief description (tagline) of this person.

        :param tagline: The tagline of this Person.
        :type tagline: str
        """

        self._tagline = tagline

    @property
    def url(self):
        """Gets the url of this Person.

        The URL of this person's profile.

        :return: The url of this Person.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Person.

        The URL of this person's profile.

        :param url: The url of this Person.
        :type url: str
        """

        self._url = url

    @property
    def urls(self):
        """Gets the urls of this Person.

        A list of URLs for this person.

        :return: The urls of this Person.
        :rtype: List[PersonUrlsInner]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this Person.

        A list of URLs for this person.

        :param urls: The urls of this Person.
        :type urls: List[PersonUrlsInner]
        """

        self._urls = urls

    @property
    def verified(self):
        """Gets the verified of this Person.

        Whether the person or Google+ Page has been verified.

        :return: The verified of this Person.
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this Person.

        Whether the person or Google+ Page has been verified.

        :param verified: The verified of this Person.
        :type verified: bool
        """

        self._verified = verified
