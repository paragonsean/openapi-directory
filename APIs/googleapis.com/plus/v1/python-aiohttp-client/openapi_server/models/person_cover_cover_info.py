# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PersonCoverCoverInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, left_image_offset: int=None, top_image_offset: int=None):
        """PersonCoverCoverInfo - a model defined in OpenAPI

        :param left_image_offset: The left_image_offset of this PersonCoverCoverInfo.
        :param top_image_offset: The top_image_offset of this PersonCoverCoverInfo.
        """
        self.openapi_types = {
            'left_image_offset': int,
            'top_image_offset': int
        }

        self.attribute_map = {
            'left_image_offset': 'leftImageOffset',
            'top_image_offset': 'topImageOffset'
        }

        self._left_image_offset = left_image_offset
        self._top_image_offset = top_image_offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonCoverCoverInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Person_cover_coverInfo of this PersonCoverCoverInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def left_image_offset(self):
        """Gets the left_image_offset of this PersonCoverCoverInfo.

        The difference between the left position of the cover image and the actual displayed cover image. Only valid for banner layout.

        :return: The left_image_offset of this PersonCoverCoverInfo.
        :rtype: int
        """
        return self._left_image_offset

    @left_image_offset.setter
    def left_image_offset(self, left_image_offset):
        """Sets the left_image_offset of this PersonCoverCoverInfo.

        The difference between the left position of the cover image and the actual displayed cover image. Only valid for banner layout.

        :param left_image_offset: The left_image_offset of this PersonCoverCoverInfo.
        :type left_image_offset: int
        """

        self._left_image_offset = left_image_offset

    @property
    def top_image_offset(self):
        """Gets the top_image_offset of this PersonCoverCoverInfo.

        The difference between the top position of the cover image and the actual displayed cover image. Only valid for banner layout.

        :return: The top_image_offset of this PersonCoverCoverInfo.
        :rtype: int
        """
        return self._top_image_offset

    @top_image_offset.setter
    def top_image_offset(self, top_image_offset):
        """Sets the top_image_offset of this PersonCoverCoverInfo.

        The difference between the top position of the cover image and the actual displayed cover image. Only valid for banner layout.

        :param top_image_offset: The top_image_offset of this PersonCoverCoverInfo.
        :type top_image_offset: int
        """

        self._top_image_offset = top_image_offset
