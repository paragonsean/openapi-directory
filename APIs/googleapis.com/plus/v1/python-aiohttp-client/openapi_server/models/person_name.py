# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PersonName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, family_name: str=None, formatted: str=None, given_name: str=None, honorific_prefix: str=None, honorific_suffix: str=None, middle_name: str=None):
        """PersonName - a model defined in OpenAPI

        :param family_name: The family_name of this PersonName.
        :param formatted: The formatted of this PersonName.
        :param given_name: The given_name of this PersonName.
        :param honorific_prefix: The honorific_prefix of this PersonName.
        :param honorific_suffix: The honorific_suffix of this PersonName.
        :param middle_name: The middle_name of this PersonName.
        """
        self.openapi_types = {
            'family_name': str,
            'formatted': str,
            'given_name': str,
            'honorific_prefix': str,
            'honorific_suffix': str,
            'middle_name': str
        }

        self.attribute_map = {
            'family_name': 'familyName',
            'formatted': 'formatted',
            'given_name': 'givenName',
            'honorific_prefix': 'honorificPrefix',
            'honorific_suffix': 'honorificSuffix',
            'middle_name': 'middleName'
        }

        self._family_name = family_name
        self._formatted = formatted
        self._given_name = given_name
        self._honorific_prefix = honorific_prefix
        self._honorific_suffix = honorific_suffix
        self._middle_name = middle_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonName':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Person_name of this PersonName.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def family_name(self):
        """Gets the family_name of this PersonName.

        The family name (last name) of this person.

        :return: The family_name of this PersonName.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this PersonName.

        The family name (last name) of this person.

        :param family_name: The family_name of this PersonName.
        :type family_name: str
        """

        self._family_name = family_name

    @property
    def formatted(self):
        """Gets the formatted of this PersonName.

        The full name of this person, including middle names, suffixes, etc.

        :return: The formatted of this PersonName.
        :rtype: str
        """
        return self._formatted

    @formatted.setter
    def formatted(self, formatted):
        """Sets the formatted of this PersonName.

        The full name of this person, including middle names, suffixes, etc.

        :param formatted: The formatted of this PersonName.
        :type formatted: str
        """

        self._formatted = formatted

    @property
    def given_name(self):
        """Gets the given_name of this PersonName.

        The given name (first name) of this person.

        :return: The given_name of this PersonName.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this PersonName.

        The given name (first name) of this person.

        :param given_name: The given_name of this PersonName.
        :type given_name: str
        """

        self._given_name = given_name

    @property
    def honorific_prefix(self):
        """Gets the honorific_prefix of this PersonName.

        The honorific prefixes (such as \"Dr.\" or \"Mrs.\") for this person.

        :return: The honorific_prefix of this PersonName.
        :rtype: str
        """
        return self._honorific_prefix

    @honorific_prefix.setter
    def honorific_prefix(self, honorific_prefix):
        """Sets the honorific_prefix of this PersonName.

        The honorific prefixes (such as \"Dr.\" or \"Mrs.\") for this person.

        :param honorific_prefix: The honorific_prefix of this PersonName.
        :type honorific_prefix: str
        """

        self._honorific_prefix = honorific_prefix

    @property
    def honorific_suffix(self):
        """Gets the honorific_suffix of this PersonName.

        The honorific suffixes (such as \"Jr.\") for this person.

        :return: The honorific_suffix of this PersonName.
        :rtype: str
        """
        return self._honorific_suffix

    @honorific_suffix.setter
    def honorific_suffix(self, honorific_suffix):
        """Sets the honorific_suffix of this PersonName.

        The honorific suffixes (such as \"Jr.\") for this person.

        :param honorific_suffix: The honorific_suffix of this PersonName.
        :type honorific_suffix: str
        """

        self._honorific_suffix = honorific_suffix

    @property
    def middle_name(self):
        """Gets the middle_name of this PersonName.

        The middle name of this person.

        :return: The middle_name of this PersonName.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this PersonName.

        The middle name of this person.

        :param middle_name: The middle_name of this PersonName.
        :type middle_name: str
        """

        self._middle_name = middle_name
