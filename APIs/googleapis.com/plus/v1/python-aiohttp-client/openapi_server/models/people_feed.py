# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.person import Person
from openapi_server import util


class PeopleFeed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, etag: str=None, items: List[Person]=None, kind: str='plus#peopleFeed', next_page_token: str=None, self_link: str=None, title: str=None, total_items: int=None):
        """PeopleFeed - a model defined in OpenAPI

        :param etag: The etag of this PeopleFeed.
        :param items: The items of this PeopleFeed.
        :param kind: The kind of this PeopleFeed.
        :param next_page_token: The next_page_token of this PeopleFeed.
        :param self_link: The self_link of this PeopleFeed.
        :param title: The title of this PeopleFeed.
        :param total_items: The total_items of this PeopleFeed.
        """
        self.openapi_types = {
            'etag': str,
            'items': List[Person],
            'kind': str,
            'next_page_token': str,
            'self_link': str,
            'title': str,
            'total_items': int
        }

        self.attribute_map = {
            'etag': 'etag',
            'items': 'items',
            'kind': 'kind',
            'next_page_token': 'nextPageToken',
            'self_link': 'selfLink',
            'title': 'title',
            'total_items': 'totalItems'
        }

        self._etag = etag
        self._items = items
        self._kind = kind
        self._next_page_token = next_page_token
        self._self_link = self_link
        self._title = title
        self._total_items = total_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PeopleFeed':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PeopleFeed of this PeopleFeed.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def etag(self):
        """Gets the etag of this PeopleFeed.

        ETag of this response for caching purposes.

        :return: The etag of this PeopleFeed.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this PeopleFeed.

        ETag of this response for caching purposes.

        :param etag: The etag of this PeopleFeed.
        :type etag: str
        """

        self._etag = etag

    @property
    def items(self):
        """Gets the items of this PeopleFeed.

        The people in this page of results. Each item includes the id, displayName, image, and url for the person. To retrieve additional profile data, see the people.get method.

        :return: The items of this PeopleFeed.
        :rtype: List[Person]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this PeopleFeed.

        The people in this page of results. Each item includes the id, displayName, image, and url for the person. To retrieve additional profile data, see the people.get method.

        :param items: The items of this PeopleFeed.
        :type items: List[Person]
        """

        self._items = items

    @property
    def kind(self):
        """Gets the kind of this PeopleFeed.

        Identifies this resource as a collection of people. Value: \"plus#peopleFeed\".

        :return: The kind of this PeopleFeed.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PeopleFeed.

        Identifies this resource as a collection of people. Value: \"plus#peopleFeed\".

        :param kind: The kind of this PeopleFeed.
        :type kind: str
        """

        self._kind = kind

    @property
    def next_page_token(self):
        """Gets the next_page_token of this PeopleFeed.

        The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results.

        :return: The next_page_token of this PeopleFeed.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this PeopleFeed.

        The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results.

        :param next_page_token: The next_page_token of this PeopleFeed.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def self_link(self):
        """Gets the self_link of this PeopleFeed.

        Link to this resource.

        :return: The self_link of this PeopleFeed.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this PeopleFeed.

        Link to this resource.

        :param self_link: The self_link of this PeopleFeed.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def title(self):
        """Gets the title of this PeopleFeed.

        The title of this collection of people.

        :return: The title of this PeopleFeed.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PeopleFeed.

        The title of this collection of people.

        :param title: The title of this PeopleFeed.
        :type title: str
        """

        self._title = title

    @property
    def total_items(self):
        """Gets the total_items of this PeopleFeed.

        The total number of people available in this list. The number of people in a response might be smaller due to paging. This might not be set for all collections.

        :return: The total_items of this PeopleFeed.
        :rtype: int
        """
        return self._total_items

    @total_items.setter
    def total_items(self, total_items):
        """Sets the total_items of this PeopleFeed.

        The total number of people available in this list. The number of people in a response might be smaller due to paging. This might not be set for all collections.

        :param total_items: The total_items of this PeopleFeed.
        :type total_items: int
        """

        self._total_items = total_items
