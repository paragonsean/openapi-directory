# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.person_cover_cover_info import PersonCoverCoverInfo
from openapi_server.models.person_cover_cover_photo import PersonCoverCoverPhoto
from openapi_server import util


class PersonCover(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cover_info: PersonCoverCoverInfo=None, cover_photo: PersonCoverCoverPhoto=None, layout: str=None):
        """PersonCover - a model defined in OpenAPI

        :param cover_info: The cover_info of this PersonCover.
        :param cover_photo: The cover_photo of this PersonCover.
        :param layout: The layout of this PersonCover.
        """
        self.openapi_types = {
            'cover_info': PersonCoverCoverInfo,
            'cover_photo': PersonCoverCoverPhoto,
            'layout': str
        }

        self.attribute_map = {
            'cover_info': 'coverInfo',
            'cover_photo': 'coverPhoto',
            'layout': 'layout'
        }

        self._cover_info = cover_info
        self._cover_photo = cover_photo
        self._layout = layout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonCover':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Person_cover of this PersonCover.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cover_info(self):
        """Gets the cover_info of this PersonCover.


        :return: The cover_info of this PersonCover.
        :rtype: PersonCoverCoverInfo
        """
        return self._cover_info

    @cover_info.setter
    def cover_info(self, cover_info):
        """Sets the cover_info of this PersonCover.


        :param cover_info: The cover_info of this PersonCover.
        :type cover_info: PersonCoverCoverInfo
        """

        self._cover_info = cover_info

    @property
    def cover_photo(self):
        """Gets the cover_photo of this PersonCover.


        :return: The cover_photo of this PersonCover.
        :rtype: PersonCoverCoverPhoto
        """
        return self._cover_photo

    @cover_photo.setter
    def cover_photo(self, cover_photo):
        """Sets the cover_photo of this PersonCover.


        :param cover_photo: The cover_photo of this PersonCover.
        :type cover_photo: PersonCoverCoverPhoto
        """

        self._cover_photo = cover_photo

    @property
    def layout(self):
        """Gets the layout of this PersonCover.

        The layout of the cover art. Possible values include, but are not limited to, the following values:   - \"banner\" - One large image banner.

        :return: The layout of this PersonCover.
        :rtype: str
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this PersonCover.

        The layout of the cover art. Possible values include, but are not limited to, the following values:   - \"banner\" - One large image banner.

        :param layout: The layout of this PersonCover.
        :type layout: str
        """

        self._layout = layout
