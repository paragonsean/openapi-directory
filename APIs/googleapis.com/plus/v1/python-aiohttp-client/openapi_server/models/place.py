# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.place_address import PlaceAddress
from openapi_server.models.place_position import PlacePosition
from openapi_server import util


class Place(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: PlaceAddress=None, display_name: str=None, id: str=None, kind: str='plus#place', position: PlacePosition=None):
        """Place - a model defined in OpenAPI

        :param address: The address of this Place.
        :param display_name: The display_name of this Place.
        :param id: The id of this Place.
        :param kind: The kind of this Place.
        :param position: The position of this Place.
        """
        self.openapi_types = {
            'address': PlaceAddress,
            'display_name': str,
            'id': str,
            'kind': str,
            'position': PlacePosition
        }

        self.attribute_map = {
            'address': 'address',
            'display_name': 'displayName',
            'id': 'id',
            'kind': 'kind',
            'position': 'position'
        }

        self._address = address
        self._display_name = display_name
        self._id = id
        self._kind = kind
        self._position = position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Place':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Place of this Place.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Place.


        :return: The address of this Place.
        :rtype: PlaceAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Place.


        :param address: The address of this Place.
        :type address: PlaceAddress
        """

        self._address = address

    @property
    def display_name(self):
        """Gets the display_name of this Place.

        The display name of the place.

        :return: The display_name of this Place.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Place.

        The display name of the place.

        :param display_name: The display_name of this Place.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this Place.

        The id of the place.

        :return: The id of this Place.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Place.

        The id of the place.

        :param id: The id of this Place.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Place.

        Identifies this resource as a place. Value: \"plus#place\".

        :return: The kind of this Place.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Place.

        Identifies this resource as a place. Value: \"plus#place\".

        :param kind: The kind of this Place.
        :type kind: str
        """

        self._kind = kind

    @property
    def position(self):
        """Gets the position of this Place.


        :return: The position of this Place.
        :rtype: PlacePosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Place.


        :param position: The position of this Place.
        :type position: PlacePosition
        """

        self._position = position
