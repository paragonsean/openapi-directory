/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerson_organizations_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerson_organizations_inner::OAIPerson_organizations_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerson_organizations_inner::OAIPerson_organizations_inner() {
    this->initializeModel();
}

OAIPerson_organizations_inner::~OAIPerson_organizations_inner() {}

void OAIPerson_organizations_inner::initializeModel() {

    m_department_isSet = false;
    m_department_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_primary_isSet = false;
    m_primary_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPerson_organizations_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerson_organizations_inner::fromJsonObject(QJsonObject json) {

    m_department_isValid = ::OpenAPI::fromJsonValue(m_department, json[QString("department")]);
    m_department_isSet = !json[QString("department")].isNull() && m_department_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_primary_isValid = ::OpenAPI::fromJsonValue(m_primary, json[QString("primary")]);
    m_primary_isSet = !json[QString("primary")].isNull() && m_primary_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPerson_organizations_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerson_organizations_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_department_isSet) {
        obj.insert(QString("department"), ::OpenAPI::toJsonValue(m_department));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_primary_isSet) {
        obj.insert(QString("primary"), ::OpenAPI::toJsonValue(m_primary));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPerson_organizations_inner::getDepartment() const {
    return m_department;
}
void OAIPerson_organizations_inner::setDepartment(const QString &department) {
    m_department = department;
    m_department_isSet = true;
}

bool OAIPerson_organizations_inner::is_department_Set() const{
    return m_department_isSet;
}

bool OAIPerson_organizations_inner::is_department_Valid() const{
    return m_department_isValid;
}

QString OAIPerson_organizations_inner::getDescription() const {
    return m_description;
}
void OAIPerson_organizations_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPerson_organizations_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPerson_organizations_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPerson_organizations_inner::getEndDate() const {
    return m_end_date;
}
void OAIPerson_organizations_inner::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIPerson_organizations_inner::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIPerson_organizations_inner::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIPerson_organizations_inner::getLocation() const {
    return m_location;
}
void OAIPerson_organizations_inner::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIPerson_organizations_inner::is_location_Set() const{
    return m_location_isSet;
}

bool OAIPerson_organizations_inner::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIPerson_organizations_inner::getName() const {
    return m_name;
}
void OAIPerson_organizations_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPerson_organizations_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPerson_organizations_inner::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIPerson_organizations_inner::isPrimary() const {
    return m_primary;
}
void OAIPerson_organizations_inner::setPrimary(const bool &primary) {
    m_primary = primary;
    m_primary_isSet = true;
}

bool OAIPerson_organizations_inner::is_primary_Set() const{
    return m_primary_isSet;
}

bool OAIPerson_organizations_inner::is_primary_Valid() const{
    return m_primary_isValid;
}

QString OAIPerson_organizations_inner::getStartDate() const {
    return m_start_date;
}
void OAIPerson_organizations_inner::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIPerson_organizations_inner::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIPerson_organizations_inner::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIPerson_organizations_inner::getTitle() const {
    return m_title;
}
void OAIPerson_organizations_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPerson_organizations_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPerson_organizations_inner::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIPerson_organizations_inner::getType() const {
    return m_type;
}
void OAIPerson_organizations_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPerson_organizations_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPerson_organizations_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPerson_organizations_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_department_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerson_organizations_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
