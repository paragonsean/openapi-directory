/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivity_object.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivity_object::OAIActivity_object(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivity_object::OAIActivity_object() {
    this->initializeModel();
}

OAIActivity_object::~OAIActivity_object() {}

void OAIActivity_object::initializeModel() {

    m_actor_isSet = false;
    m_actor_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_original_content_isSet = false;
    m_original_content_isValid = false;

    m_plusoners_isSet = false;
    m_plusoners_isValid = false;

    m_replies_isSet = false;
    m_replies_isValid = false;

    m_resharers_isSet = false;
    m_resharers_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIActivity_object::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivity_object::fromJsonObject(QJsonObject json) {

    m_actor_isValid = ::OpenAPI::fromJsonValue(m_actor, json[QString("actor")]);
    m_actor_isSet = !json[QString("actor")].isNull() && m_actor_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;

    m_original_content_isValid = ::OpenAPI::fromJsonValue(m_original_content, json[QString("originalContent")]);
    m_original_content_isSet = !json[QString("originalContent")].isNull() && m_original_content_isValid;

    m_plusoners_isValid = ::OpenAPI::fromJsonValue(m_plusoners, json[QString("plusoners")]);
    m_plusoners_isSet = !json[QString("plusoners")].isNull() && m_plusoners_isValid;

    m_replies_isValid = ::OpenAPI::fromJsonValue(m_replies, json[QString("replies")]);
    m_replies_isSet = !json[QString("replies")].isNull() && m_replies_isValid;

    m_resharers_isValid = ::OpenAPI::fromJsonValue(m_resharers, json[QString("resharers")]);
    m_resharers_isSet = !json[QString("resharers")].isNull() && m_resharers_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIActivity_object::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivity_object::asJsonObject() const {
    QJsonObject obj;
    if (m_actor.isSet()) {
        obj.insert(QString("actor"), ::OpenAPI::toJsonValue(m_actor));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    if (m_original_content_isSet) {
        obj.insert(QString("originalContent"), ::OpenAPI::toJsonValue(m_original_content));
    }
    if (m_plusoners.isSet()) {
        obj.insert(QString("plusoners"), ::OpenAPI::toJsonValue(m_plusoners));
    }
    if (m_replies.isSet()) {
        obj.insert(QString("replies"), ::OpenAPI::toJsonValue(m_replies));
    }
    if (m_resharers.isSet()) {
        obj.insert(QString("resharers"), ::OpenAPI::toJsonValue(m_resharers));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIActivity_object_actor OAIActivity_object::getActor() const {
    return m_actor;
}
void OAIActivity_object::setActor(const OAIActivity_object_actor &actor) {
    m_actor = actor;
    m_actor_isSet = true;
}

bool OAIActivity_object::is_actor_Set() const{
    return m_actor_isSet;
}

bool OAIActivity_object::is_actor_Valid() const{
    return m_actor_isValid;
}

QList<OAIActivity_object_attachments_inner> OAIActivity_object::getAttachments() const {
    return m_attachments;
}
void OAIActivity_object::setAttachments(const QList<OAIActivity_object_attachments_inner> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIActivity_object::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIActivity_object::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIActivity_object::getContent() const {
    return m_content;
}
void OAIActivity_object::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIActivity_object::is_content_Set() const{
    return m_content_isSet;
}

bool OAIActivity_object::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIActivity_object::getId() const {
    return m_id;
}
void OAIActivity_object::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIActivity_object::is_id_Set() const{
    return m_id_isSet;
}

bool OAIActivity_object::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIActivity_object::getObjectType() const {
    return m_object_type;
}
void OAIActivity_object::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIActivity_object::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIActivity_object::is_object_type_Valid() const{
    return m_object_type_isValid;
}

QString OAIActivity_object::getOriginalContent() const {
    return m_original_content;
}
void OAIActivity_object::setOriginalContent(const QString &original_content) {
    m_original_content = original_content;
    m_original_content_isSet = true;
}

bool OAIActivity_object::is_original_content_Set() const{
    return m_original_content_isSet;
}

bool OAIActivity_object::is_original_content_Valid() const{
    return m_original_content_isValid;
}

OAIActivity_object_plusoners OAIActivity_object::getPlusoners() const {
    return m_plusoners;
}
void OAIActivity_object::setPlusoners(const OAIActivity_object_plusoners &plusoners) {
    m_plusoners = plusoners;
    m_plusoners_isSet = true;
}

bool OAIActivity_object::is_plusoners_Set() const{
    return m_plusoners_isSet;
}

bool OAIActivity_object::is_plusoners_Valid() const{
    return m_plusoners_isValid;
}

OAIActivity_object_replies OAIActivity_object::getReplies() const {
    return m_replies;
}
void OAIActivity_object::setReplies(const OAIActivity_object_replies &replies) {
    m_replies = replies;
    m_replies_isSet = true;
}

bool OAIActivity_object::is_replies_Set() const{
    return m_replies_isSet;
}

bool OAIActivity_object::is_replies_Valid() const{
    return m_replies_isValid;
}

OAIActivity_object_resharers OAIActivity_object::getResharers() const {
    return m_resharers;
}
void OAIActivity_object::setResharers(const OAIActivity_object_resharers &resharers) {
    m_resharers = resharers;
    m_resharers_isSet = true;
}

bool OAIActivity_object::is_resharers_Set() const{
    return m_resharers_isSet;
}

bool OAIActivity_object::is_resharers_Valid() const{
    return m_resharers_isValid;
}

QString OAIActivity_object::getUrl() const {
    return m_url;
}
void OAIActivity_object::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIActivity_object::is_url_Set() const{
    return m_url_isSet;
}

bool OAIActivity_object::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIActivity_object::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plusoners.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resharers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivity_object::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
