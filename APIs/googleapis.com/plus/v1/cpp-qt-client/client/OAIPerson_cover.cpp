/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerson_cover.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerson_cover::OAIPerson_cover(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerson_cover::OAIPerson_cover() {
    this->initializeModel();
}

OAIPerson_cover::~OAIPerson_cover() {}

void OAIPerson_cover::initializeModel() {

    m_cover_info_isSet = false;
    m_cover_info_isValid = false;

    m_cover_photo_isSet = false;
    m_cover_photo_isValid = false;

    m_layout_isSet = false;
    m_layout_isValid = false;
}

void OAIPerson_cover::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerson_cover::fromJsonObject(QJsonObject json) {

    m_cover_info_isValid = ::OpenAPI::fromJsonValue(m_cover_info, json[QString("coverInfo")]);
    m_cover_info_isSet = !json[QString("coverInfo")].isNull() && m_cover_info_isValid;

    m_cover_photo_isValid = ::OpenAPI::fromJsonValue(m_cover_photo, json[QString("coverPhoto")]);
    m_cover_photo_isSet = !json[QString("coverPhoto")].isNull() && m_cover_photo_isValid;

    m_layout_isValid = ::OpenAPI::fromJsonValue(m_layout, json[QString("layout")]);
    m_layout_isSet = !json[QString("layout")].isNull() && m_layout_isValid;
}

QString OAIPerson_cover::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerson_cover::asJsonObject() const {
    QJsonObject obj;
    if (m_cover_info.isSet()) {
        obj.insert(QString("coverInfo"), ::OpenAPI::toJsonValue(m_cover_info));
    }
    if (m_cover_photo.isSet()) {
        obj.insert(QString("coverPhoto"), ::OpenAPI::toJsonValue(m_cover_photo));
    }
    if (m_layout_isSet) {
        obj.insert(QString("layout"), ::OpenAPI::toJsonValue(m_layout));
    }
    return obj;
}

OAIPerson_cover_coverInfo OAIPerson_cover::getCoverInfo() const {
    return m_cover_info;
}
void OAIPerson_cover::setCoverInfo(const OAIPerson_cover_coverInfo &cover_info) {
    m_cover_info = cover_info;
    m_cover_info_isSet = true;
}

bool OAIPerson_cover::is_cover_info_Set() const{
    return m_cover_info_isSet;
}

bool OAIPerson_cover::is_cover_info_Valid() const{
    return m_cover_info_isValid;
}

OAIPerson_cover_coverPhoto OAIPerson_cover::getCoverPhoto() const {
    return m_cover_photo;
}
void OAIPerson_cover::setCoverPhoto(const OAIPerson_cover_coverPhoto &cover_photo) {
    m_cover_photo = cover_photo;
    m_cover_photo_isSet = true;
}

bool OAIPerson_cover::is_cover_photo_Set() const{
    return m_cover_photo_isSet;
}

bool OAIPerson_cover::is_cover_photo_Valid() const{
    return m_cover_photo_isValid;
}

QString OAIPerson_cover::getLayout() const {
    return m_layout;
}
void OAIPerson_cover::setLayout(const QString &layout) {
    m_layout = layout;
    m_layout_isSet = true;
}

bool OAIPerson_cover::is_layout_Set() const{
    return m_layout_isSet;
}

bool OAIPerson_cover::is_layout_Valid() const{
    return m_layout_isValid;
}

bool OAIPerson_cover::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cover_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover_photo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_layout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerson_cover::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
