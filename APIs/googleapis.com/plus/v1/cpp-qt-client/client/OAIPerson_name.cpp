/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerson_name.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerson_name::OAIPerson_name(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerson_name::OAIPerson_name() {
    this->initializeModel();
}

OAIPerson_name::~OAIPerson_name() {}

void OAIPerson_name::initializeModel() {

    m_family_name_isSet = false;
    m_family_name_isValid = false;

    m_formatted_isSet = false;
    m_formatted_isValid = false;

    m_given_name_isSet = false;
    m_given_name_isValid = false;

    m_honorific_prefix_isSet = false;
    m_honorific_prefix_isValid = false;

    m_honorific_suffix_isSet = false;
    m_honorific_suffix_isValid = false;

    m_middle_name_isSet = false;
    m_middle_name_isValid = false;
}

void OAIPerson_name::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerson_name::fromJsonObject(QJsonObject json) {

    m_family_name_isValid = ::OpenAPI::fromJsonValue(m_family_name, json[QString("familyName")]);
    m_family_name_isSet = !json[QString("familyName")].isNull() && m_family_name_isValid;

    m_formatted_isValid = ::OpenAPI::fromJsonValue(m_formatted, json[QString("formatted")]);
    m_formatted_isSet = !json[QString("formatted")].isNull() && m_formatted_isValid;

    m_given_name_isValid = ::OpenAPI::fromJsonValue(m_given_name, json[QString("givenName")]);
    m_given_name_isSet = !json[QString("givenName")].isNull() && m_given_name_isValid;

    m_honorific_prefix_isValid = ::OpenAPI::fromJsonValue(m_honorific_prefix, json[QString("honorificPrefix")]);
    m_honorific_prefix_isSet = !json[QString("honorificPrefix")].isNull() && m_honorific_prefix_isValid;

    m_honorific_suffix_isValid = ::OpenAPI::fromJsonValue(m_honorific_suffix, json[QString("honorificSuffix")]);
    m_honorific_suffix_isSet = !json[QString("honorificSuffix")].isNull() && m_honorific_suffix_isValid;

    m_middle_name_isValid = ::OpenAPI::fromJsonValue(m_middle_name, json[QString("middleName")]);
    m_middle_name_isSet = !json[QString("middleName")].isNull() && m_middle_name_isValid;
}

QString OAIPerson_name::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerson_name::asJsonObject() const {
    QJsonObject obj;
    if (m_family_name_isSet) {
        obj.insert(QString("familyName"), ::OpenAPI::toJsonValue(m_family_name));
    }
    if (m_formatted_isSet) {
        obj.insert(QString("formatted"), ::OpenAPI::toJsonValue(m_formatted));
    }
    if (m_given_name_isSet) {
        obj.insert(QString("givenName"), ::OpenAPI::toJsonValue(m_given_name));
    }
    if (m_honorific_prefix_isSet) {
        obj.insert(QString("honorificPrefix"), ::OpenAPI::toJsonValue(m_honorific_prefix));
    }
    if (m_honorific_suffix_isSet) {
        obj.insert(QString("honorificSuffix"), ::OpenAPI::toJsonValue(m_honorific_suffix));
    }
    if (m_middle_name_isSet) {
        obj.insert(QString("middleName"), ::OpenAPI::toJsonValue(m_middle_name));
    }
    return obj;
}

QString OAIPerson_name::getFamilyName() const {
    return m_family_name;
}
void OAIPerson_name::setFamilyName(const QString &family_name) {
    m_family_name = family_name;
    m_family_name_isSet = true;
}

bool OAIPerson_name::is_family_name_Set() const{
    return m_family_name_isSet;
}

bool OAIPerson_name::is_family_name_Valid() const{
    return m_family_name_isValid;
}

QString OAIPerson_name::getFormatted() const {
    return m_formatted;
}
void OAIPerson_name::setFormatted(const QString &formatted) {
    m_formatted = formatted;
    m_formatted_isSet = true;
}

bool OAIPerson_name::is_formatted_Set() const{
    return m_formatted_isSet;
}

bool OAIPerson_name::is_formatted_Valid() const{
    return m_formatted_isValid;
}

QString OAIPerson_name::getGivenName() const {
    return m_given_name;
}
void OAIPerson_name::setGivenName(const QString &given_name) {
    m_given_name = given_name;
    m_given_name_isSet = true;
}

bool OAIPerson_name::is_given_name_Set() const{
    return m_given_name_isSet;
}

bool OAIPerson_name::is_given_name_Valid() const{
    return m_given_name_isValid;
}

QString OAIPerson_name::getHonorificPrefix() const {
    return m_honorific_prefix;
}
void OAIPerson_name::setHonorificPrefix(const QString &honorific_prefix) {
    m_honorific_prefix = honorific_prefix;
    m_honorific_prefix_isSet = true;
}

bool OAIPerson_name::is_honorific_prefix_Set() const{
    return m_honorific_prefix_isSet;
}

bool OAIPerson_name::is_honorific_prefix_Valid() const{
    return m_honorific_prefix_isValid;
}

QString OAIPerson_name::getHonorificSuffix() const {
    return m_honorific_suffix;
}
void OAIPerson_name::setHonorificSuffix(const QString &honorific_suffix) {
    m_honorific_suffix = honorific_suffix;
    m_honorific_suffix_isSet = true;
}

bool OAIPerson_name::is_honorific_suffix_Set() const{
    return m_honorific_suffix_isSet;
}

bool OAIPerson_name::is_honorific_suffix_Valid() const{
    return m_honorific_suffix_isValid;
}

QString OAIPerson_name::getMiddleName() const {
    return m_middle_name;
}
void OAIPerson_name::setMiddleName(const QString &middle_name) {
    m_middle_name = middle_name;
    m_middle_name_isSet = true;
}

bool OAIPerson_name::is_middle_name_Set() const{
    return m_middle_name_isSet;
}

bool OAIPerson_name::is_middle_name_Valid() const{
    return m_middle_name_isValid;
}

bool OAIPerson_name::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_family_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_given_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_honorific_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_honorific_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerson_name::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
