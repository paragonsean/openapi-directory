/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivity_object_attachments_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivity_object_attachments_inner::OAIActivity_object_attachments_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivity_object_attachments_inner::OAIActivity_object_attachments_inner() {
    this->initializeModel();
}

OAIActivity_object_attachments_inner::~OAIActivity_object_attachments_inner() {}

void OAIActivity_object_attachments_inner::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_embed_isSet = false;
    m_embed_isValid = false;

    m_full_image_isSet = false;
    m_full_image_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_thumbnails_isSet = false;
    m_thumbnails_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIActivity_object_attachments_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivity_object_attachments_inner::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_embed_isValid = ::OpenAPI::fromJsonValue(m_embed, json[QString("embed")]);
    m_embed_isSet = !json[QString("embed")].isNull() && m_embed_isValid;

    m_full_image_isValid = ::OpenAPI::fromJsonValue(m_full_image, json[QString("fullImage")]);
    m_full_image_isSet = !json[QString("fullImage")].isNull() && m_full_image_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;

    m_thumbnails_isValid = ::OpenAPI::fromJsonValue(m_thumbnails, json[QString("thumbnails")]);
    m_thumbnails_isSet = !json[QString("thumbnails")].isNull() && m_thumbnails_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIActivity_object_attachments_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivity_object_attachments_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_embed.isSet()) {
        obj.insert(QString("embed"), ::OpenAPI::toJsonValue(m_embed));
    }
    if (m_full_image.isSet()) {
        obj.insert(QString("fullImage"), ::OpenAPI::toJsonValue(m_full_image));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    if (m_thumbnails.size() > 0) {
        obj.insert(QString("thumbnails"), ::OpenAPI::toJsonValue(m_thumbnails));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIActivity_object_attachments_inner::getContent() const {
    return m_content;
}
void OAIActivity_object_attachments_inner::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIActivity_object_attachments_inner::is_content_Set() const{
    return m_content_isSet;
}

bool OAIActivity_object_attachments_inner::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIActivity_object_attachments_inner::getDisplayName() const {
    return m_display_name;
}
void OAIActivity_object_attachments_inner::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIActivity_object_attachments_inner::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIActivity_object_attachments_inner::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIActivity_object_attachments_inner_embed OAIActivity_object_attachments_inner::getEmbed() const {
    return m_embed;
}
void OAIActivity_object_attachments_inner::setEmbed(const OAIActivity_object_attachments_inner_embed &embed) {
    m_embed = embed;
    m_embed_isSet = true;
}

bool OAIActivity_object_attachments_inner::is_embed_Set() const{
    return m_embed_isSet;
}

bool OAIActivity_object_attachments_inner::is_embed_Valid() const{
    return m_embed_isValid;
}

OAIActivity_object_attachments_inner_fullImage OAIActivity_object_attachments_inner::getFullImage() const {
    return m_full_image;
}
void OAIActivity_object_attachments_inner::setFullImage(const OAIActivity_object_attachments_inner_fullImage &full_image) {
    m_full_image = full_image;
    m_full_image_isSet = true;
}

bool OAIActivity_object_attachments_inner::is_full_image_Set() const{
    return m_full_image_isSet;
}

bool OAIActivity_object_attachments_inner::is_full_image_Valid() const{
    return m_full_image_isValid;
}

QString OAIActivity_object_attachments_inner::getId() const {
    return m_id;
}
void OAIActivity_object_attachments_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIActivity_object_attachments_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIActivity_object_attachments_inner::is_id_Valid() const{
    return m_id_isValid;
}

OAIActivity_object_attachments_inner_image OAIActivity_object_attachments_inner::getImage() const {
    return m_image;
}
void OAIActivity_object_attachments_inner::setImage(const OAIActivity_object_attachments_inner_image &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIActivity_object_attachments_inner::is_image_Set() const{
    return m_image_isSet;
}

bool OAIActivity_object_attachments_inner::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIActivity_object_attachments_inner::getObjectType() const {
    return m_object_type;
}
void OAIActivity_object_attachments_inner::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIActivity_object_attachments_inner::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIActivity_object_attachments_inner::is_object_type_Valid() const{
    return m_object_type_isValid;
}

QList<OAIActivity_object_attachments_inner_thumbnails_inner> OAIActivity_object_attachments_inner::getThumbnails() const {
    return m_thumbnails;
}
void OAIActivity_object_attachments_inner::setThumbnails(const QList<OAIActivity_object_attachments_inner_thumbnails_inner> &thumbnails) {
    m_thumbnails = thumbnails;
    m_thumbnails_isSet = true;
}

bool OAIActivity_object_attachments_inner::is_thumbnails_Set() const{
    return m_thumbnails_isSet;
}

bool OAIActivity_object_attachments_inner::is_thumbnails_Valid() const{
    return m_thumbnails_isValid;
}

QString OAIActivity_object_attachments_inner::getUrl() const {
    return m_url;
}
void OAIActivity_object_attachments_inner::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIActivity_object_attachments_inner::is_url_Set() const{
    return m_url_isSet;
}

bool OAIActivity_object_attachments_inner::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIActivity_object_attachments_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivity_object_attachments_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
