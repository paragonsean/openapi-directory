/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComment_object.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComment_object::OAIComment_object(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComment_object::OAIComment_object() {
    this->initializeModel();
}

OAIComment_object::~OAIComment_object() {}

void OAIComment_object::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_original_content_isSet = false;
    m_original_content_isValid = false;
}

void OAIComment_object::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComment_object::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;

    m_original_content_isValid = ::OpenAPI::fromJsonValue(m_original_content, json[QString("originalContent")]);
    m_original_content_isSet = !json[QString("originalContent")].isNull() && m_original_content_isValid;
}

QString OAIComment_object::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComment_object::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    if (m_original_content_isSet) {
        obj.insert(QString("originalContent"), ::OpenAPI::toJsonValue(m_original_content));
    }
    return obj;
}

QString OAIComment_object::getContent() const {
    return m_content;
}
void OAIComment_object::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIComment_object::is_content_Set() const{
    return m_content_isSet;
}

bool OAIComment_object::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIComment_object::getObjectType() const {
    return m_object_type;
}
void OAIComment_object::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIComment_object::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIComment_object::is_object_type_Valid() const{
    return m_object_type_isValid;
}

QString OAIComment_object::getOriginalContent() const {
    return m_original_content;
}
void OAIComment_object::setOriginalContent(const QString &original_content) {
    m_original_content = original_content;
    m_original_content_isSet = true;
}

bool OAIComment_object::is_original_content_Set() const{
    return m_original_content_isSet;
}

bool OAIComment_object::is_original_content_Valid() const{
    return m_original_content_isValid;
}

bool OAIComment_object::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_content_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComment_object::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
