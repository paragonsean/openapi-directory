/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlace_address.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlace_address::OAIPlace_address(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlace_address::OAIPlace_address() {
    this->initializeModel();
}

OAIPlace_address::~OAIPlace_address() {}

void OAIPlace_address::initializeModel() {

    m_formatted_isSet = false;
    m_formatted_isValid = false;
}

void OAIPlace_address::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlace_address::fromJsonObject(QJsonObject json) {

    m_formatted_isValid = ::OpenAPI::fromJsonValue(m_formatted, json[QString("formatted")]);
    m_formatted_isSet = !json[QString("formatted")].isNull() && m_formatted_isValid;
}

QString OAIPlace_address::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlace_address::asJsonObject() const {
    QJsonObject obj;
    if (m_formatted_isSet) {
        obj.insert(QString("formatted"), ::OpenAPI::toJsonValue(m_formatted));
    }
    return obj;
}

QString OAIPlace_address::getFormatted() const {
    return m_formatted;
}
void OAIPlace_address::setFormatted(const QString &formatted) {
    m_formatted = formatted;
    m_formatted_isSet = true;
}

bool OAIPlace_address::is_formatted_Set() const{
    return m_formatted_isSet;
}

bool OAIPlace_address::is_formatted_Valid() const{
    return m_formatted_isValid;
}

bool OAIPlace_address::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_formatted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlace_address::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
