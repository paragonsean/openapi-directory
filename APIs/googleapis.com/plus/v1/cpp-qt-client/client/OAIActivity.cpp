/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivity::OAIActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivity::OAIActivity() {
    this->initializeModel();
}

OAIActivity::~OAIActivity() {}

void OAIActivity::initializeModel() {

    m_access_isSet = false;
    m_access_isValid = false;

    m_actor_isSet = false;
    m_actor_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_annotation_isSet = false;
    m_annotation_isValid = false;

    m_crosspost_source_isSet = false;
    m_crosspost_source_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_geocode_isSet = false;
    m_geocode_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_place_id_isSet = false;
    m_place_id_isValid = false;

    m_place_name_isSet = false;
    m_place_name_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_radius_isSet = false;
    m_radius_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_verb_isSet = false;
    m_verb_isValid = false;
}

void OAIActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivity::fromJsonObject(QJsonObject json) {

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("access")]);
    m_access_isSet = !json[QString("access")].isNull() && m_access_isValid;

    m_actor_isValid = ::OpenAPI::fromJsonValue(m_actor, json[QString("actor")]);
    m_actor_isSet = !json[QString("actor")].isNull() && m_actor_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_annotation_isValid = ::OpenAPI::fromJsonValue(m_annotation, json[QString("annotation")]);
    m_annotation_isSet = !json[QString("annotation")].isNull() && m_annotation_isValid;

    m_crosspost_source_isValid = ::OpenAPI::fromJsonValue(m_crosspost_source, json[QString("crosspostSource")]);
    m_crosspost_source_isSet = !json[QString("crosspostSource")].isNull() && m_crosspost_source_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_geocode_isValid = ::OpenAPI::fromJsonValue(m_geocode, json[QString("geocode")]);
    m_geocode_isSet = !json[QString("geocode")].isNull() && m_geocode_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_place_id_isValid = ::OpenAPI::fromJsonValue(m_place_id, json[QString("placeId")]);
    m_place_id_isSet = !json[QString("placeId")].isNull() && m_place_id_isValid;

    m_place_name_isValid = ::OpenAPI::fromJsonValue(m_place_name, json[QString("placeName")]);
    m_place_name_isSet = !json[QString("placeName")].isNull() && m_place_name_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_radius_isValid = ::OpenAPI::fromJsonValue(m_radius, json[QString("radius")]);
    m_radius_isSet = !json[QString("radius")].isNull() && m_radius_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_verb_isValid = ::OpenAPI::fromJsonValue(m_verb, json[QString("verb")]);
    m_verb_isSet = !json[QString("verb")].isNull() && m_verb_isValid;
}

QString OAIActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_access.isSet()) {
        obj.insert(QString("access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_actor.isSet()) {
        obj.insert(QString("actor"), ::OpenAPI::toJsonValue(m_actor));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_annotation_isSet) {
        obj.insert(QString("annotation"), ::OpenAPI::toJsonValue(m_annotation));
    }
    if (m_crosspost_source_isSet) {
        obj.insert(QString("crosspostSource"), ::OpenAPI::toJsonValue(m_crosspost_source));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_geocode_isSet) {
        obj.insert(QString("geocode"), ::OpenAPI::toJsonValue(m_geocode));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_object.isSet()) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_place_id_isSet) {
        obj.insert(QString("placeId"), ::OpenAPI::toJsonValue(m_place_id));
    }
    if (m_place_name_isSet) {
        obj.insert(QString("placeName"), ::OpenAPI::toJsonValue(m_place_name));
    }
    if (m_provider.isSet()) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_radius_isSet) {
        obj.insert(QString("radius"), ::OpenAPI::toJsonValue(m_radius));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_verb_isSet) {
        obj.insert(QString("verb"), ::OpenAPI::toJsonValue(m_verb));
    }
    return obj;
}

OAIAcl OAIActivity::getAccess() const {
    return m_access;
}
void OAIActivity::setAccess(const OAIAcl &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAIActivity::is_access_Set() const{
    return m_access_isSet;
}

bool OAIActivity::is_access_Valid() const{
    return m_access_isValid;
}

OAIActivity_actor OAIActivity::getActor() const {
    return m_actor;
}
void OAIActivity::setActor(const OAIActivity_actor &actor) {
    m_actor = actor;
    m_actor_isSet = true;
}

bool OAIActivity::is_actor_Set() const{
    return m_actor_isSet;
}

bool OAIActivity::is_actor_Valid() const{
    return m_actor_isValid;
}

QString OAIActivity::getAddress() const {
    return m_address;
}
void OAIActivity::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIActivity::is_address_Set() const{
    return m_address_isSet;
}

bool OAIActivity::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIActivity::getAnnotation() const {
    return m_annotation;
}
void OAIActivity::setAnnotation(const QString &annotation) {
    m_annotation = annotation;
    m_annotation_isSet = true;
}

bool OAIActivity::is_annotation_Set() const{
    return m_annotation_isSet;
}

bool OAIActivity::is_annotation_Valid() const{
    return m_annotation_isValid;
}

QString OAIActivity::getCrosspostSource() const {
    return m_crosspost_source;
}
void OAIActivity::setCrosspostSource(const QString &crosspost_source) {
    m_crosspost_source = crosspost_source;
    m_crosspost_source_isSet = true;
}

bool OAIActivity::is_crosspost_source_Set() const{
    return m_crosspost_source_isSet;
}

bool OAIActivity::is_crosspost_source_Valid() const{
    return m_crosspost_source_isValid;
}

QString OAIActivity::getEtag() const {
    return m_etag;
}
void OAIActivity::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIActivity::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIActivity::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIActivity::getGeocode() const {
    return m_geocode;
}
void OAIActivity::setGeocode(const QString &geocode) {
    m_geocode = geocode;
    m_geocode_isSet = true;
}

bool OAIActivity::is_geocode_Set() const{
    return m_geocode_isSet;
}

bool OAIActivity::is_geocode_Valid() const{
    return m_geocode_isValid;
}

QString OAIActivity::getId() const {
    return m_id;
}
void OAIActivity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIActivity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIActivity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIActivity::getKind() const {
    return m_kind;
}
void OAIActivity::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIActivity::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIActivity::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIPlace OAIActivity::getLocation() const {
    return m_location;
}
void OAIActivity::setLocation(const OAIPlace &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIActivity::is_location_Set() const{
    return m_location_isSet;
}

bool OAIActivity::is_location_Valid() const{
    return m_location_isValid;
}

OAIActivity_object OAIActivity::getObject() const {
    return m_object;
}
void OAIActivity::setObject(const OAIActivity_object &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIActivity::is_object_Set() const{
    return m_object_isSet;
}

bool OAIActivity::is_object_Valid() const{
    return m_object_isValid;
}

QString OAIActivity::getPlaceId() const {
    return m_place_id;
}
void OAIActivity::setPlaceId(const QString &place_id) {
    m_place_id = place_id;
    m_place_id_isSet = true;
}

bool OAIActivity::is_place_id_Set() const{
    return m_place_id_isSet;
}

bool OAIActivity::is_place_id_Valid() const{
    return m_place_id_isValid;
}

QString OAIActivity::getPlaceName() const {
    return m_place_name;
}
void OAIActivity::setPlaceName(const QString &place_name) {
    m_place_name = place_name;
    m_place_name_isSet = true;
}

bool OAIActivity::is_place_name_Set() const{
    return m_place_name_isSet;
}

bool OAIActivity::is_place_name_Valid() const{
    return m_place_name_isValid;
}

OAIActivity_provider OAIActivity::getProvider() const {
    return m_provider;
}
void OAIActivity::setProvider(const OAIActivity_provider &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIActivity::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIActivity::is_provider_Valid() const{
    return m_provider_isValid;
}

QDateTime OAIActivity::getPublished() const {
    return m_published;
}
void OAIActivity::setPublished(const QDateTime &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIActivity::is_published_Set() const{
    return m_published_isSet;
}

bool OAIActivity::is_published_Valid() const{
    return m_published_isValid;
}

QString OAIActivity::getRadius() const {
    return m_radius;
}
void OAIActivity::setRadius(const QString &radius) {
    m_radius = radius;
    m_radius_isSet = true;
}

bool OAIActivity::is_radius_Set() const{
    return m_radius_isSet;
}

bool OAIActivity::is_radius_Valid() const{
    return m_radius_isValid;
}

QString OAIActivity::getTitle() const {
    return m_title;
}
void OAIActivity::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIActivity::is_title_Set() const{
    return m_title_isSet;
}

bool OAIActivity::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIActivity::getUpdated() const {
    return m_updated;
}
void OAIActivity::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIActivity::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIActivity::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIActivity::getUrl() const {
    return m_url;
}
void OAIActivity::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIActivity::is_url_Set() const{
    return m_url_isSet;
}

bool OAIActivity::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIActivity::getVerb() const {
    return m_verb;
}
void OAIActivity::setVerb(const QString &verb) {
    m_verb = verb;
    m_verb_isSet = true;
}

bool OAIActivity::is_verb_Set() const{
    return m_verb_isSet;
}

bool OAIActivity::is_verb_Valid() const{
    return m_verb_isValid;
}

bool OAIActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_actor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crosspost_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geocode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
