/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerson.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerson::OAIPerson(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerson::OAIPerson() {
    this->initializeModel();
}

OAIPerson::~OAIPerson() {}

void OAIPerson::initializeModel() {

    m_about_me_isSet = false;
    m_about_me_isValid = false;

    m_age_range_isSet = false;
    m_age_range_isValid = false;

    m_birthday_isSet = false;
    m_birthday_isValid = false;

    m_bragging_rights_isSet = false;
    m_bragging_rights_isValid = false;

    m_circled_by_count_isSet = false;
    m_circled_by_count_isValid = false;

    m_cover_isSet = false;
    m_cover_isValid = false;

    m_current_location_isSet = false;
    m_current_location_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_emails_isSet = false;
    m_emails_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_is_plus_user_isSet = false;
    m_is_plus_user_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_occupation_isSet = false;
    m_occupation_isValid = false;

    m_organizations_isSet = false;
    m_organizations_isValid = false;

    m_places_lived_isSet = false;
    m_places_lived_isValid = false;

    m_plus_one_count_isSet = false;
    m_plus_one_count_isValid = false;

    m_relationship_status_isSet = false;
    m_relationship_status_isValid = false;

    m_skills_isSet = false;
    m_skills_isValid = false;

    m_tagline_isSet = false;
    m_tagline_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;

    m_verified_isSet = false;
    m_verified_isValid = false;
}

void OAIPerson::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerson::fromJsonObject(QJsonObject json) {

    m_about_me_isValid = ::OpenAPI::fromJsonValue(m_about_me, json[QString("aboutMe")]);
    m_about_me_isSet = !json[QString("aboutMe")].isNull() && m_about_me_isValid;

    m_age_range_isValid = ::OpenAPI::fromJsonValue(m_age_range, json[QString("ageRange")]);
    m_age_range_isSet = !json[QString("ageRange")].isNull() && m_age_range_isValid;

    m_birthday_isValid = ::OpenAPI::fromJsonValue(m_birthday, json[QString("birthday")]);
    m_birthday_isSet = !json[QString("birthday")].isNull() && m_birthday_isValid;

    m_bragging_rights_isValid = ::OpenAPI::fromJsonValue(m_bragging_rights, json[QString("braggingRights")]);
    m_bragging_rights_isSet = !json[QString("braggingRights")].isNull() && m_bragging_rights_isValid;

    m_circled_by_count_isValid = ::OpenAPI::fromJsonValue(m_circled_by_count, json[QString("circledByCount")]);
    m_circled_by_count_isSet = !json[QString("circledByCount")].isNull() && m_circled_by_count_isValid;

    m_cover_isValid = ::OpenAPI::fromJsonValue(m_cover, json[QString("cover")]);
    m_cover_isSet = !json[QString("cover")].isNull() && m_cover_isValid;

    m_current_location_isValid = ::OpenAPI::fromJsonValue(m_current_location, json[QString("currentLocation")]);
    m_current_location_isSet = !json[QString("currentLocation")].isNull() && m_current_location_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_emails_isValid = ::OpenAPI::fromJsonValue(m_emails, json[QString("emails")]);
    m_emails_isSet = !json[QString("emails")].isNull() && m_emails_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_is_plus_user_isValid = ::OpenAPI::fromJsonValue(m_is_plus_user, json[QString("isPlusUser")]);
    m_is_plus_user_isSet = !json[QString("isPlusUser")].isNull() && m_is_plus_user_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nickname_isValid = ::OpenAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;

    m_occupation_isValid = ::OpenAPI::fromJsonValue(m_occupation, json[QString("occupation")]);
    m_occupation_isSet = !json[QString("occupation")].isNull() && m_occupation_isValid;

    m_organizations_isValid = ::OpenAPI::fromJsonValue(m_organizations, json[QString("organizations")]);
    m_organizations_isSet = !json[QString("organizations")].isNull() && m_organizations_isValid;

    m_places_lived_isValid = ::OpenAPI::fromJsonValue(m_places_lived, json[QString("placesLived")]);
    m_places_lived_isSet = !json[QString("placesLived")].isNull() && m_places_lived_isValid;

    m_plus_one_count_isValid = ::OpenAPI::fromJsonValue(m_plus_one_count, json[QString("plusOneCount")]);
    m_plus_one_count_isSet = !json[QString("plusOneCount")].isNull() && m_plus_one_count_isValid;

    m_relationship_status_isValid = ::OpenAPI::fromJsonValue(m_relationship_status, json[QString("relationshipStatus")]);
    m_relationship_status_isSet = !json[QString("relationshipStatus")].isNull() && m_relationship_status_isValid;

    m_skills_isValid = ::OpenAPI::fromJsonValue(m_skills, json[QString("skills")]);
    m_skills_isSet = !json[QString("skills")].isNull() && m_skills_isValid;

    m_tagline_isValid = ::OpenAPI::fromJsonValue(m_tagline, json[QString("tagline")]);
    m_tagline_isSet = !json[QString("tagline")].isNull() && m_tagline_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;

    m_verified_isValid = ::OpenAPI::fromJsonValue(m_verified, json[QString("verified")]);
    m_verified_isSet = !json[QString("verified")].isNull() && m_verified_isValid;
}

QString OAIPerson::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerson::asJsonObject() const {
    QJsonObject obj;
    if (m_about_me_isSet) {
        obj.insert(QString("aboutMe"), ::OpenAPI::toJsonValue(m_about_me));
    }
    if (m_age_range.isSet()) {
        obj.insert(QString("ageRange"), ::OpenAPI::toJsonValue(m_age_range));
    }
    if (m_birthday_isSet) {
        obj.insert(QString("birthday"), ::OpenAPI::toJsonValue(m_birthday));
    }
    if (m_bragging_rights_isSet) {
        obj.insert(QString("braggingRights"), ::OpenAPI::toJsonValue(m_bragging_rights));
    }
    if (m_circled_by_count_isSet) {
        obj.insert(QString("circledByCount"), ::OpenAPI::toJsonValue(m_circled_by_count));
    }
    if (m_cover.isSet()) {
        obj.insert(QString("cover"), ::OpenAPI::toJsonValue(m_cover));
    }
    if (m_current_location_isSet) {
        obj.insert(QString("currentLocation"), ::OpenAPI::toJsonValue(m_current_location));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_emails.size() > 0) {
        obj.insert(QString("emails"), ::OpenAPI::toJsonValue(m_emails));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_is_plus_user_isSet) {
        obj.insert(QString("isPlusUser"), ::OpenAPI::toJsonValue(m_is_plus_user));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::OpenAPI::toJsonValue(m_nickname));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    if (m_occupation_isSet) {
        obj.insert(QString("occupation"), ::OpenAPI::toJsonValue(m_occupation));
    }
    if (m_organizations.size() > 0) {
        obj.insert(QString("organizations"), ::OpenAPI::toJsonValue(m_organizations));
    }
    if (m_places_lived.size() > 0) {
        obj.insert(QString("placesLived"), ::OpenAPI::toJsonValue(m_places_lived));
    }
    if (m_plus_one_count_isSet) {
        obj.insert(QString("plusOneCount"), ::OpenAPI::toJsonValue(m_plus_one_count));
    }
    if (m_relationship_status_isSet) {
        obj.insert(QString("relationshipStatus"), ::OpenAPI::toJsonValue(m_relationship_status));
    }
    if (m_skills_isSet) {
        obj.insert(QString("skills"), ::OpenAPI::toJsonValue(m_skills));
    }
    if (m_tagline_isSet) {
        obj.insert(QString("tagline"), ::OpenAPI::toJsonValue(m_tagline));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_urls.size() > 0) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    if (m_verified_isSet) {
        obj.insert(QString("verified"), ::OpenAPI::toJsonValue(m_verified));
    }
    return obj;
}

QString OAIPerson::getAboutMe() const {
    return m_about_me;
}
void OAIPerson::setAboutMe(const QString &about_me) {
    m_about_me = about_me;
    m_about_me_isSet = true;
}

bool OAIPerson::is_about_me_Set() const{
    return m_about_me_isSet;
}

bool OAIPerson::is_about_me_Valid() const{
    return m_about_me_isValid;
}

OAIPerson_ageRange OAIPerson::getAgeRange() const {
    return m_age_range;
}
void OAIPerson::setAgeRange(const OAIPerson_ageRange &age_range) {
    m_age_range = age_range;
    m_age_range_isSet = true;
}

bool OAIPerson::is_age_range_Set() const{
    return m_age_range_isSet;
}

bool OAIPerson::is_age_range_Valid() const{
    return m_age_range_isValid;
}

QString OAIPerson::getBirthday() const {
    return m_birthday;
}
void OAIPerson::setBirthday(const QString &birthday) {
    m_birthday = birthday;
    m_birthday_isSet = true;
}

bool OAIPerson::is_birthday_Set() const{
    return m_birthday_isSet;
}

bool OAIPerson::is_birthday_Valid() const{
    return m_birthday_isValid;
}

QString OAIPerson::getBraggingRights() const {
    return m_bragging_rights;
}
void OAIPerson::setBraggingRights(const QString &bragging_rights) {
    m_bragging_rights = bragging_rights;
    m_bragging_rights_isSet = true;
}

bool OAIPerson::is_bragging_rights_Set() const{
    return m_bragging_rights_isSet;
}

bool OAIPerson::is_bragging_rights_Valid() const{
    return m_bragging_rights_isValid;
}

qint32 OAIPerson::getCircledByCount() const {
    return m_circled_by_count;
}
void OAIPerson::setCircledByCount(const qint32 &circled_by_count) {
    m_circled_by_count = circled_by_count;
    m_circled_by_count_isSet = true;
}

bool OAIPerson::is_circled_by_count_Set() const{
    return m_circled_by_count_isSet;
}

bool OAIPerson::is_circled_by_count_Valid() const{
    return m_circled_by_count_isValid;
}

OAIPerson_cover OAIPerson::getCover() const {
    return m_cover;
}
void OAIPerson::setCover(const OAIPerson_cover &cover) {
    m_cover = cover;
    m_cover_isSet = true;
}

bool OAIPerson::is_cover_Set() const{
    return m_cover_isSet;
}

bool OAIPerson::is_cover_Valid() const{
    return m_cover_isValid;
}

QString OAIPerson::getCurrentLocation() const {
    return m_current_location;
}
void OAIPerson::setCurrentLocation(const QString &current_location) {
    m_current_location = current_location;
    m_current_location_isSet = true;
}

bool OAIPerson::is_current_location_Set() const{
    return m_current_location_isSet;
}

bool OAIPerson::is_current_location_Valid() const{
    return m_current_location_isValid;
}

QString OAIPerson::getDisplayName() const {
    return m_display_name;
}
void OAIPerson::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPerson::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPerson::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIPerson::getDomain() const {
    return m_domain;
}
void OAIPerson::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIPerson::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIPerson::is_domain_Valid() const{
    return m_domain_isValid;
}

QList<OAIPerson_emails_inner> OAIPerson::getEmails() const {
    return m_emails;
}
void OAIPerson::setEmails(const QList<OAIPerson_emails_inner> &emails) {
    m_emails = emails;
    m_emails_isSet = true;
}

bool OAIPerson::is_emails_Set() const{
    return m_emails_isSet;
}

bool OAIPerson::is_emails_Valid() const{
    return m_emails_isValid;
}

QString OAIPerson::getEtag() const {
    return m_etag;
}
void OAIPerson::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIPerson::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIPerson::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIPerson::getGender() const {
    return m_gender;
}
void OAIPerson::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIPerson::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIPerson::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAIPerson::getId() const {
    return m_id;
}
void OAIPerson::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPerson::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPerson::is_id_Valid() const{
    return m_id_isValid;
}

OAIPerson_image OAIPerson::getImage() const {
    return m_image;
}
void OAIPerson::setImage(const OAIPerson_image &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIPerson::is_image_Set() const{
    return m_image_isSet;
}

bool OAIPerson::is_image_Valid() const{
    return m_image_isValid;
}

bool OAIPerson::isIsPlusUser() const {
    return m_is_plus_user;
}
void OAIPerson::setIsPlusUser(const bool &is_plus_user) {
    m_is_plus_user = is_plus_user;
    m_is_plus_user_isSet = true;
}

bool OAIPerson::is_is_plus_user_Set() const{
    return m_is_plus_user_isSet;
}

bool OAIPerson::is_is_plus_user_Valid() const{
    return m_is_plus_user_isValid;
}

QString OAIPerson::getKind() const {
    return m_kind;
}
void OAIPerson::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPerson::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPerson::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIPerson::getLanguage() const {
    return m_language;
}
void OAIPerson::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIPerson::is_language_Set() const{
    return m_language_isSet;
}

bool OAIPerson::is_language_Valid() const{
    return m_language_isValid;
}

OAIPerson_name OAIPerson::getName() const {
    return m_name;
}
void OAIPerson::setName(const OAIPerson_name &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPerson::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPerson::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPerson::getNickname() const {
    return m_nickname;
}
void OAIPerson::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool OAIPerson::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool OAIPerson::is_nickname_Valid() const{
    return m_nickname_isValid;
}

QString OAIPerson::getObjectType() const {
    return m_object_type;
}
void OAIPerson::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIPerson::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIPerson::is_object_type_Valid() const{
    return m_object_type_isValid;
}

QString OAIPerson::getOccupation() const {
    return m_occupation;
}
void OAIPerson::setOccupation(const QString &occupation) {
    m_occupation = occupation;
    m_occupation_isSet = true;
}

bool OAIPerson::is_occupation_Set() const{
    return m_occupation_isSet;
}

bool OAIPerson::is_occupation_Valid() const{
    return m_occupation_isValid;
}

QList<OAIPerson_organizations_inner> OAIPerson::getOrganizations() const {
    return m_organizations;
}
void OAIPerson::setOrganizations(const QList<OAIPerson_organizations_inner> &organizations) {
    m_organizations = organizations;
    m_organizations_isSet = true;
}

bool OAIPerson::is_organizations_Set() const{
    return m_organizations_isSet;
}

bool OAIPerson::is_organizations_Valid() const{
    return m_organizations_isValid;
}

QList<OAIPerson_placesLived_inner> OAIPerson::getPlacesLived() const {
    return m_places_lived;
}
void OAIPerson::setPlacesLived(const QList<OAIPerson_placesLived_inner> &places_lived) {
    m_places_lived = places_lived;
    m_places_lived_isSet = true;
}

bool OAIPerson::is_places_lived_Set() const{
    return m_places_lived_isSet;
}

bool OAIPerson::is_places_lived_Valid() const{
    return m_places_lived_isValid;
}

qint32 OAIPerson::getPlusOneCount() const {
    return m_plus_one_count;
}
void OAIPerson::setPlusOneCount(const qint32 &plus_one_count) {
    m_plus_one_count = plus_one_count;
    m_plus_one_count_isSet = true;
}

bool OAIPerson::is_plus_one_count_Set() const{
    return m_plus_one_count_isSet;
}

bool OAIPerson::is_plus_one_count_Valid() const{
    return m_plus_one_count_isValid;
}

QString OAIPerson::getRelationshipStatus() const {
    return m_relationship_status;
}
void OAIPerson::setRelationshipStatus(const QString &relationship_status) {
    m_relationship_status = relationship_status;
    m_relationship_status_isSet = true;
}

bool OAIPerson::is_relationship_status_Set() const{
    return m_relationship_status_isSet;
}

bool OAIPerson::is_relationship_status_Valid() const{
    return m_relationship_status_isValid;
}

QString OAIPerson::getSkills() const {
    return m_skills;
}
void OAIPerson::setSkills(const QString &skills) {
    m_skills = skills;
    m_skills_isSet = true;
}

bool OAIPerson::is_skills_Set() const{
    return m_skills_isSet;
}

bool OAIPerson::is_skills_Valid() const{
    return m_skills_isValid;
}

QString OAIPerson::getTagline() const {
    return m_tagline;
}
void OAIPerson::setTagline(const QString &tagline) {
    m_tagline = tagline;
    m_tagline_isSet = true;
}

bool OAIPerson::is_tagline_Set() const{
    return m_tagline_isSet;
}

bool OAIPerson::is_tagline_Valid() const{
    return m_tagline_isValid;
}

QString OAIPerson::getUrl() const {
    return m_url;
}
void OAIPerson::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPerson::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPerson::is_url_Valid() const{
    return m_url_isValid;
}

QList<OAIPerson_urls_inner> OAIPerson::getUrls() const {
    return m_urls;
}
void OAIPerson::setUrls(const QList<OAIPerson_urls_inner> &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIPerson::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIPerson::is_urls_Valid() const{
    return m_urls_isValid;
}

bool OAIPerson::isVerified() const {
    return m_verified;
}
void OAIPerson::setVerified(const bool &verified) {
    m_verified = verified;
    m_verified_isSet = true;
}

bool OAIPerson::is_verified_Set() const{
    return m_verified_isSet;
}

bool OAIPerson::is_verified_Valid() const{
    return m_verified_isValid;
}

bool OAIPerson::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_about_me_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_age_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_birthday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bragging_rights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_circled_by_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cover.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_plus_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occupation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_places_lived.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_plus_one_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skills_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tagline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerson::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
