/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComment::OAIComment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComment::OAIComment() {
    this->initializeModel();
}

OAIComment::~OAIComment() {}

void OAIComment::initializeModel() {

    m_actor_isSet = false;
    m_actor_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_in_reply_to_isSet = false;
    m_in_reply_to_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_plusoners_isSet = false;
    m_plusoners_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_verb_isSet = false;
    m_verb_isValid = false;
}

void OAIComment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComment::fromJsonObject(QJsonObject json) {

    m_actor_isValid = ::OpenAPI::fromJsonValue(m_actor, json[QString("actor")]);
    m_actor_isSet = !json[QString("actor")].isNull() && m_actor_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_in_reply_to_isValid = ::OpenAPI::fromJsonValue(m_in_reply_to, json[QString("inReplyTo")]);
    m_in_reply_to_isSet = !json[QString("inReplyTo")].isNull() && m_in_reply_to_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_plusoners_isValid = ::OpenAPI::fromJsonValue(m_plusoners, json[QString("plusoners")]);
    m_plusoners_isSet = !json[QString("plusoners")].isNull() && m_plusoners_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_verb_isValid = ::OpenAPI::fromJsonValue(m_verb, json[QString("verb")]);
    m_verb_isSet = !json[QString("verb")].isNull() && m_verb_isValid;
}

QString OAIComment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComment::asJsonObject() const {
    QJsonObject obj;
    if (m_actor.isSet()) {
        obj.insert(QString("actor"), ::OpenAPI::toJsonValue(m_actor));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_in_reply_to.size() > 0) {
        obj.insert(QString("inReplyTo"), ::OpenAPI::toJsonValue(m_in_reply_to));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_object.isSet()) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_plusoners.isSet()) {
        obj.insert(QString("plusoners"), ::OpenAPI::toJsonValue(m_plusoners));
    }
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_verb_isSet) {
        obj.insert(QString("verb"), ::OpenAPI::toJsonValue(m_verb));
    }
    return obj;
}

OAIComment_actor OAIComment::getActor() const {
    return m_actor;
}
void OAIComment::setActor(const OAIComment_actor &actor) {
    m_actor = actor;
    m_actor_isSet = true;
}

bool OAIComment::is_actor_Set() const{
    return m_actor_isSet;
}

bool OAIComment::is_actor_Valid() const{
    return m_actor_isValid;
}

QString OAIComment::getEtag() const {
    return m_etag;
}
void OAIComment::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIComment::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIComment::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIComment::getId() const {
    return m_id;
}
void OAIComment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIComment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIComment::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIComment_inReplyTo_inner> OAIComment::getInReplyTo() const {
    return m_in_reply_to;
}
void OAIComment::setInReplyTo(const QList<OAIComment_inReplyTo_inner> &in_reply_to) {
    m_in_reply_to = in_reply_to;
    m_in_reply_to_isSet = true;
}

bool OAIComment::is_in_reply_to_Set() const{
    return m_in_reply_to_isSet;
}

bool OAIComment::is_in_reply_to_Valid() const{
    return m_in_reply_to_isValid;
}

QString OAIComment::getKind() const {
    return m_kind;
}
void OAIComment::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIComment::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIComment::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIComment_object OAIComment::getObject() const {
    return m_object;
}
void OAIComment::setObject(const OAIComment_object &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIComment::is_object_Set() const{
    return m_object_isSet;
}

bool OAIComment::is_object_Valid() const{
    return m_object_isValid;
}

OAIComment_plusoners OAIComment::getPlusoners() const {
    return m_plusoners;
}
void OAIComment::setPlusoners(const OAIComment_plusoners &plusoners) {
    m_plusoners = plusoners;
    m_plusoners_isSet = true;
}

bool OAIComment::is_plusoners_Set() const{
    return m_plusoners_isSet;
}

bool OAIComment::is_plusoners_Valid() const{
    return m_plusoners_isValid;
}

QDateTime OAIComment::getPublished() const {
    return m_published;
}
void OAIComment::setPublished(const QDateTime &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIComment::is_published_Set() const{
    return m_published_isSet;
}

bool OAIComment::is_published_Valid() const{
    return m_published_isValid;
}

QString OAIComment::getSelfLink() const {
    return m_self_link;
}
void OAIComment::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIComment::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIComment::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QDateTime OAIComment::getUpdated() const {
    return m_updated;
}
void OAIComment::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIComment::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIComment::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIComment::getVerb() const {
    return m_verb;
}
void OAIComment::setVerb(const QString &verb) {
    m_verb = verb;
    m_verb_isSet = true;
}

bool OAIComment::is_verb_Set() const{
    return m_verb_isSet;
}

bool OAIComment::is_verb_Valid() const{
    return m_verb_isValid;
}

bool OAIComment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_reply_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plusoners.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
