/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommentFeed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommentFeed::OAICommentFeed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommentFeed::OAICommentFeed() {
    this->initializeModel();
}

OAICommentFeed::~OAICommentFeed() {}

void OAICommentFeed::initializeModel() {

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_next_link_isSet = false;
    m_next_link_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAICommentFeed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommentFeed::fromJsonObject(QJsonObject json) {

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_next_link_isValid = ::OpenAPI::fromJsonValue(m_next_link, json[QString("nextLink")]);
    m_next_link_isSet = !json[QString("nextLink")].isNull() && m_next_link_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAICommentFeed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommentFeed::asJsonObject() const {
    QJsonObject obj;
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_next_link_isSet) {
        obj.insert(QString("nextLink"), ::OpenAPI::toJsonValue(m_next_link));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

QString OAICommentFeed::getEtag() const {
    return m_etag;
}
void OAICommentFeed::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAICommentFeed::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAICommentFeed::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAICommentFeed::getId() const {
    return m_id;
}
void OAICommentFeed::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICommentFeed::is_id_Set() const{
    return m_id_isSet;
}

bool OAICommentFeed::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIComment> OAICommentFeed::getItems() const {
    return m_items;
}
void OAICommentFeed::setItems(const QList<OAIComment> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAICommentFeed::is_items_Set() const{
    return m_items_isSet;
}

bool OAICommentFeed::is_items_Valid() const{
    return m_items_isValid;
}

QString OAICommentFeed::getKind() const {
    return m_kind;
}
void OAICommentFeed::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAICommentFeed::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAICommentFeed::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAICommentFeed::getNextLink() const {
    return m_next_link;
}
void OAICommentFeed::setNextLink(const QString &next_link) {
    m_next_link = next_link;
    m_next_link_isSet = true;
}

bool OAICommentFeed::is_next_link_Set() const{
    return m_next_link_isSet;
}

bool OAICommentFeed::is_next_link_Valid() const{
    return m_next_link_isValid;
}

QString OAICommentFeed::getNextPageToken() const {
    return m_next_page_token;
}
void OAICommentFeed::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAICommentFeed::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAICommentFeed::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QString OAICommentFeed::getTitle() const {
    return m_title;
}
void OAICommentFeed::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICommentFeed::is_title_Set() const{
    return m_title_isSet;
}

bool OAICommentFeed::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAICommentFeed::getUpdated() const {
    return m_updated;
}
void OAICommentFeed::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAICommentFeed::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAICommentFeed::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAICommentFeed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommentFeed::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
