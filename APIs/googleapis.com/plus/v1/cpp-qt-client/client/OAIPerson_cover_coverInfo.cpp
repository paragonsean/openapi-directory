/**
 * Google+ API
 * Builds on top of the Google+ platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerson_cover_coverInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerson_cover_coverInfo::OAIPerson_cover_coverInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerson_cover_coverInfo::OAIPerson_cover_coverInfo() {
    this->initializeModel();
}

OAIPerson_cover_coverInfo::~OAIPerson_cover_coverInfo() {}

void OAIPerson_cover_coverInfo::initializeModel() {

    m_left_image_offset_isSet = false;
    m_left_image_offset_isValid = false;

    m_top_image_offset_isSet = false;
    m_top_image_offset_isValid = false;
}

void OAIPerson_cover_coverInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerson_cover_coverInfo::fromJsonObject(QJsonObject json) {

    m_left_image_offset_isValid = ::OpenAPI::fromJsonValue(m_left_image_offset, json[QString("leftImageOffset")]);
    m_left_image_offset_isSet = !json[QString("leftImageOffset")].isNull() && m_left_image_offset_isValid;

    m_top_image_offset_isValid = ::OpenAPI::fromJsonValue(m_top_image_offset, json[QString("topImageOffset")]);
    m_top_image_offset_isSet = !json[QString("topImageOffset")].isNull() && m_top_image_offset_isValid;
}

QString OAIPerson_cover_coverInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerson_cover_coverInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_left_image_offset_isSet) {
        obj.insert(QString("leftImageOffset"), ::OpenAPI::toJsonValue(m_left_image_offset));
    }
    if (m_top_image_offset_isSet) {
        obj.insert(QString("topImageOffset"), ::OpenAPI::toJsonValue(m_top_image_offset));
    }
    return obj;
}

qint32 OAIPerson_cover_coverInfo::getLeftImageOffset() const {
    return m_left_image_offset;
}
void OAIPerson_cover_coverInfo::setLeftImageOffset(const qint32 &left_image_offset) {
    m_left_image_offset = left_image_offset;
    m_left_image_offset_isSet = true;
}

bool OAIPerson_cover_coverInfo::is_left_image_offset_Set() const{
    return m_left_image_offset_isSet;
}

bool OAIPerson_cover_coverInfo::is_left_image_offset_Valid() const{
    return m_left_image_offset_isValid;
}

qint32 OAIPerson_cover_coverInfo::getTopImageOffset() const {
    return m_top_image_offset;
}
void OAIPerson_cover_coverInfo::setTopImageOffset(const qint32 &top_image_offset) {
    m_top_image_offset = top_image_offset;
    m_top_image_offset_isSet = true;
}

bool OAIPerson_cover_coverInfo::is_top_image_offset_Set() const{
    return m_top_image_offset_isSet;
}

bool OAIPerson_cover_coverInfo::is_top_image_offset_Valid() const{
    return m_top_image_offset_isValid;
}

bool OAIPerson_cover_coverInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_left_image_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_image_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerson_cover_coverInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
