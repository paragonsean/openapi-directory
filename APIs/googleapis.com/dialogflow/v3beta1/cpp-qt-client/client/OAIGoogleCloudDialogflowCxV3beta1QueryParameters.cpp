/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3beta1QueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3beta1QueryParameters::OAIGoogleCloudDialogflowCxV3beta1QueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3beta1QueryParameters::OAIGoogleCloudDialogflowCxV3beta1QueryParameters() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3beta1QueryParameters::~OAIGoogleCloudDialogflowCxV3beta1QueryParameters() {}

void OAIGoogleCloudDialogflowCxV3beta1QueryParameters::initializeModel() {

    m_analyze_query_text_sentiment_isSet = false;
    m_analyze_query_text_sentiment_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_current_page_isSet = false;
    m_current_page_isValid = false;

    m_disable_webhook_isSet = false;
    m_disable_webhook_isValid = false;

    m_end_user_metadata_isSet = false;
    m_end_user_metadata_isValid = false;

    m_flow_versions_isSet = false;
    m_flow_versions_isValid = false;

    m_geo_location_isSet = false;
    m_geo_location_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_search_config_isSet = false;
    m_search_config_isValid = false;

    m_session_entity_types_isSet = false;
    m_session_entity_types_isValid = false;

    m_session_ttl_isSet = false;
    m_session_ttl_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_webhook_headers_isSet = false;
    m_webhook_headers_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3beta1QueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3beta1QueryParameters::fromJsonObject(QJsonObject json) {

    m_analyze_query_text_sentiment_isValid = ::OpenAPI::fromJsonValue(m_analyze_query_text_sentiment, json[QString("analyzeQueryTextSentiment")]);
    m_analyze_query_text_sentiment_isSet = !json[QString("analyzeQueryTextSentiment")].isNull() && m_analyze_query_text_sentiment_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_current_page_isValid = ::OpenAPI::fromJsonValue(m_current_page, json[QString("currentPage")]);
    m_current_page_isSet = !json[QString("currentPage")].isNull() && m_current_page_isValid;

    m_disable_webhook_isValid = ::OpenAPI::fromJsonValue(m_disable_webhook, json[QString("disableWebhook")]);
    m_disable_webhook_isSet = !json[QString("disableWebhook")].isNull() && m_disable_webhook_isValid;

    m_end_user_metadata_isValid = ::OpenAPI::fromJsonValue(m_end_user_metadata, json[QString("endUserMetadata")]);
    m_end_user_metadata_isSet = !json[QString("endUserMetadata")].isNull() && m_end_user_metadata_isValid;

    m_flow_versions_isValid = ::OpenAPI::fromJsonValue(m_flow_versions, json[QString("flowVersions")]);
    m_flow_versions_isSet = !json[QString("flowVersions")].isNull() && m_flow_versions_isValid;

    m_geo_location_isValid = ::OpenAPI::fromJsonValue(m_geo_location, json[QString("geoLocation")]);
    m_geo_location_isSet = !json[QString("geoLocation")].isNull() && m_geo_location_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_search_config_isValid = ::OpenAPI::fromJsonValue(m_search_config, json[QString("searchConfig")]);
    m_search_config_isSet = !json[QString("searchConfig")].isNull() && m_search_config_isValid;

    m_session_entity_types_isValid = ::OpenAPI::fromJsonValue(m_session_entity_types, json[QString("sessionEntityTypes")]);
    m_session_entity_types_isSet = !json[QString("sessionEntityTypes")].isNull() && m_session_entity_types_isValid;

    m_session_ttl_isValid = ::OpenAPI::fromJsonValue(m_session_ttl, json[QString("sessionTtl")]);
    m_session_ttl_isSet = !json[QString("sessionTtl")].isNull() && m_session_ttl_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_webhook_headers_isValid = ::OpenAPI::fromJsonValue(m_webhook_headers, json[QString("webhookHeaders")]);
    m_webhook_headers_isSet = !json[QString("webhookHeaders")].isNull() && m_webhook_headers_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1QueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3beta1QueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_analyze_query_text_sentiment_isSet) {
        obj.insert(QString("analyzeQueryTextSentiment"), ::OpenAPI::toJsonValue(m_analyze_query_text_sentiment));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_current_page_isSet) {
        obj.insert(QString("currentPage"), ::OpenAPI::toJsonValue(m_current_page));
    }
    if (m_disable_webhook_isSet) {
        obj.insert(QString("disableWebhook"), ::OpenAPI::toJsonValue(m_disable_webhook));
    }
    if (m_end_user_metadata.size() > 0) {
        obj.insert(QString("endUserMetadata"), ::OpenAPI::toJsonValue(m_end_user_metadata));
    }
    if (m_flow_versions.size() > 0) {
        obj.insert(QString("flowVersions"), ::OpenAPI::toJsonValue(m_flow_versions));
    }
    if (m_geo_location.isSet()) {
        obj.insert(QString("geoLocation"), ::OpenAPI::toJsonValue(m_geo_location));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_payload.size() > 0) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_search_config.isSet()) {
        obj.insert(QString("searchConfig"), ::OpenAPI::toJsonValue(m_search_config));
    }
    if (m_session_entity_types.size() > 0) {
        obj.insert(QString("sessionEntityTypes"), ::OpenAPI::toJsonValue(m_session_entity_types));
    }
    if (m_session_ttl_isSet) {
        obj.insert(QString("sessionTtl"), ::OpenAPI::toJsonValue(m_session_ttl));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_webhook_headers.size() > 0) {
        obj.insert(QString("webhookHeaders"), ::OpenAPI::toJsonValue(m_webhook_headers));
    }
    return obj;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::isAnalyzeQueryTextSentiment() const {
    return m_analyze_query_text_sentiment;
}
void OAIGoogleCloudDialogflowCxV3beta1QueryParameters::setAnalyzeQueryTextSentiment(const bool &analyze_query_text_sentiment) {
    m_analyze_query_text_sentiment = analyze_query_text_sentiment;
    m_analyze_query_text_sentiment_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_analyze_query_text_sentiment_Set() const{
    return m_analyze_query_text_sentiment_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_analyze_query_text_sentiment_Valid() const{
    return m_analyze_query_text_sentiment_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1QueryParameters::getChannel() const {
    return m_channel;
}
void OAIGoogleCloudDialogflowCxV3beta1QueryParameters::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1QueryParameters::getCurrentPage() const {
    return m_current_page;
}
void OAIGoogleCloudDialogflowCxV3beta1QueryParameters::setCurrentPage(const QString &current_page) {
    m_current_page = current_page;
    m_current_page_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_current_page_Set() const{
    return m_current_page_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_current_page_Valid() const{
    return m_current_page_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::isDisableWebhook() const {
    return m_disable_webhook;
}
void OAIGoogleCloudDialogflowCxV3beta1QueryParameters::setDisableWebhook(const bool &disable_webhook) {
    m_disable_webhook = disable_webhook;
    m_disable_webhook_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_disable_webhook_Set() const{
    return m_disable_webhook_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_disable_webhook_Valid() const{
    return m_disable_webhook_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudDialogflowCxV3beta1QueryParameters::getEndUserMetadata() const {
    return m_end_user_metadata;
}
void OAIGoogleCloudDialogflowCxV3beta1QueryParameters::setEndUserMetadata(const QMap<QString, QJsonValue> &end_user_metadata) {
    m_end_user_metadata = end_user_metadata;
    m_end_user_metadata_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_end_user_metadata_Set() const{
    return m_end_user_metadata_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_end_user_metadata_Valid() const{
    return m_end_user_metadata_isValid;
}

QList<QString> OAIGoogleCloudDialogflowCxV3beta1QueryParameters::getFlowVersions() const {
    return m_flow_versions;
}
void OAIGoogleCloudDialogflowCxV3beta1QueryParameters::setFlowVersions(const QList<QString> &flow_versions) {
    m_flow_versions = flow_versions;
    m_flow_versions_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_flow_versions_Set() const{
    return m_flow_versions_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_flow_versions_Valid() const{
    return m_flow_versions_isValid;
}

OAIGoogleTypeLatLng OAIGoogleCloudDialogflowCxV3beta1QueryParameters::getGeoLocation() const {
    return m_geo_location;
}
void OAIGoogleCloudDialogflowCxV3beta1QueryParameters::setGeoLocation(const OAIGoogleTypeLatLng &geo_location) {
    m_geo_location = geo_location;
    m_geo_location_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_geo_location_Set() const{
    return m_geo_location_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_geo_location_Valid() const{
    return m_geo_location_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudDialogflowCxV3beta1QueryParameters::getParameters() const {
    return m_parameters;
}
void OAIGoogleCloudDialogflowCxV3beta1QueryParameters::setParameters(const QMap<QString, QJsonValue> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudDialogflowCxV3beta1QueryParameters::getPayload() const {
    return m_payload;
}
void OAIGoogleCloudDialogflowCxV3beta1QueryParameters::setPayload(const QMap<QString, QJsonValue> &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_payload_Valid() const{
    return m_payload_isValid;
}

OAIGoogleCloudDialogflowCxV3beta1SearchConfig OAIGoogleCloudDialogflowCxV3beta1QueryParameters::getSearchConfig() const {
    return m_search_config;
}
void OAIGoogleCloudDialogflowCxV3beta1QueryParameters::setSearchConfig(const OAIGoogleCloudDialogflowCxV3beta1SearchConfig &search_config) {
    m_search_config = search_config;
    m_search_config_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_search_config_Set() const{
    return m_search_config_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_search_config_Valid() const{
    return m_search_config_isValid;
}

QList<OAIGoogleCloudDialogflowCxV3beta1SessionEntityType> OAIGoogleCloudDialogflowCxV3beta1QueryParameters::getSessionEntityTypes() const {
    return m_session_entity_types;
}
void OAIGoogleCloudDialogflowCxV3beta1QueryParameters::setSessionEntityTypes(const QList<OAIGoogleCloudDialogflowCxV3beta1SessionEntityType> &session_entity_types) {
    m_session_entity_types = session_entity_types;
    m_session_entity_types_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_session_entity_types_Set() const{
    return m_session_entity_types_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_session_entity_types_Valid() const{
    return m_session_entity_types_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1QueryParameters::getSessionTtl() const {
    return m_session_ttl;
}
void OAIGoogleCloudDialogflowCxV3beta1QueryParameters::setSessionTtl(const QString &session_ttl) {
    m_session_ttl = session_ttl;
    m_session_ttl_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_session_ttl_Set() const{
    return m_session_ttl_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_session_ttl_Valid() const{
    return m_session_ttl_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1QueryParameters::getTimeZone() const {
    return m_time_zone;
}
void OAIGoogleCloudDialogflowCxV3beta1QueryParameters::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QMap<QString, QString> OAIGoogleCloudDialogflowCxV3beta1QueryParameters::getWebhookHeaders() const {
    return m_webhook_headers;
}
void OAIGoogleCloudDialogflowCxV3beta1QueryParameters::setWebhookHeaders(const QMap<QString, QString> &webhook_headers) {
    m_webhook_headers = webhook_headers;
    m_webhook_headers_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_webhook_headers_Set() const{
    return m_webhook_headers_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::is_webhook_headers_Valid() const{
    return m_webhook_headers_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analyze_query_text_sentiment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_webhook_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_user_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_flow_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_entity_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3beta1QueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
