/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowV2beta1Message.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowV2beta1Message::OAIGoogleCloudDialogflowV2beta1Message(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowV2beta1Message::OAIGoogleCloudDialogflowV2beta1Message() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowV2beta1Message::~OAIGoogleCloudDialogflowV2beta1Message() {}

void OAIGoogleCloudDialogflowV2beta1Message::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_message_annotation_isSet = false;
    m_message_annotation_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_participant_isSet = false;
    m_participant_isValid = false;

    m_participant_role_isSet = false;
    m_participant_role_isValid = false;

    m_send_time_isSet = false;
    m_send_time_isValid = false;

    m_sentiment_analysis_isSet = false;
    m_sentiment_analysis_isValid = false;
}

void OAIGoogleCloudDialogflowV2beta1Message::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowV2beta1Message::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_message_annotation_isValid = ::OpenAPI::fromJsonValue(m_message_annotation, json[QString("messageAnnotation")]);
    m_message_annotation_isSet = !json[QString("messageAnnotation")].isNull() && m_message_annotation_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_participant_isValid = ::OpenAPI::fromJsonValue(m_participant, json[QString("participant")]);
    m_participant_isSet = !json[QString("participant")].isNull() && m_participant_isValid;

    m_participant_role_isValid = ::OpenAPI::fromJsonValue(m_participant_role, json[QString("participantRole")]);
    m_participant_role_isSet = !json[QString("participantRole")].isNull() && m_participant_role_isValid;

    m_send_time_isValid = ::OpenAPI::fromJsonValue(m_send_time, json[QString("sendTime")]);
    m_send_time_isSet = !json[QString("sendTime")].isNull() && m_send_time_isValid;

    m_sentiment_analysis_isValid = ::OpenAPI::fromJsonValue(m_sentiment_analysis, json[QString("sentimentAnalysis")]);
    m_sentiment_analysis_isSet = !json[QString("sentimentAnalysis")].isNull() && m_sentiment_analysis_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Message::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowV2beta1Message::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_message_annotation.isSet()) {
        obj.insert(QString("messageAnnotation"), ::OpenAPI::toJsonValue(m_message_annotation));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_participant_isSet) {
        obj.insert(QString("participant"), ::OpenAPI::toJsonValue(m_participant));
    }
    if (m_participant_role_isSet) {
        obj.insert(QString("participantRole"), ::OpenAPI::toJsonValue(m_participant_role));
    }
    if (m_send_time_isSet) {
        obj.insert(QString("sendTime"), ::OpenAPI::toJsonValue(m_send_time));
    }
    if (m_sentiment_analysis.isSet()) {
        obj.insert(QString("sentimentAnalysis"), ::OpenAPI::toJsonValue(m_sentiment_analysis));
    }
    return obj;
}

QString OAIGoogleCloudDialogflowV2beta1Message::getContent() const {
    return m_content;
}
void OAIGoogleCloudDialogflowV2beta1Message::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Message::is_content_Set() const{
    return m_content_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Message::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Message::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudDialogflowV2beta1Message::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Message::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Message::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Message::getLanguageCode() const {
    return m_language_code;
}
void OAIGoogleCloudDialogflowV2beta1Message::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Message::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Message::is_language_code_Valid() const{
    return m_language_code_isValid;
}

OAIGoogleCloudDialogflowV2beta1MessageAnnotation OAIGoogleCloudDialogflowV2beta1Message::getMessageAnnotation() const {
    return m_message_annotation;
}
void OAIGoogleCloudDialogflowV2beta1Message::setMessageAnnotation(const OAIGoogleCloudDialogflowV2beta1MessageAnnotation &message_annotation) {
    m_message_annotation = message_annotation;
    m_message_annotation_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Message::is_message_annotation_Set() const{
    return m_message_annotation_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Message::is_message_annotation_Valid() const{
    return m_message_annotation_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Message::getName() const {
    return m_name;
}
void OAIGoogleCloudDialogflowV2beta1Message::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Message::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Message::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Message::getParticipant() const {
    return m_participant;
}
void OAIGoogleCloudDialogflowV2beta1Message::setParticipant(const QString &participant) {
    m_participant = participant;
    m_participant_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Message::is_participant_Set() const{
    return m_participant_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Message::is_participant_Valid() const{
    return m_participant_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Message::getParticipantRole() const {
    return m_participant_role;
}
void OAIGoogleCloudDialogflowV2beta1Message::setParticipantRole(const QString &participant_role) {
    m_participant_role = participant_role;
    m_participant_role_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Message::is_participant_role_Set() const{
    return m_participant_role_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Message::is_participant_role_Valid() const{
    return m_participant_role_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Message::getSendTime() const {
    return m_send_time;
}
void OAIGoogleCloudDialogflowV2beta1Message::setSendTime(const QString &send_time) {
    m_send_time = send_time;
    m_send_time_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Message::is_send_time_Set() const{
    return m_send_time_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Message::is_send_time_Valid() const{
    return m_send_time_isValid;
}

OAIGoogleCloudDialogflowV2beta1SentimentAnalysisResult OAIGoogleCloudDialogflowV2beta1Message::getSentimentAnalysis() const {
    return m_sentiment_analysis;
}
void OAIGoogleCloudDialogflowV2beta1Message::setSentimentAnalysis(const OAIGoogleCloudDialogflowV2beta1SentimentAnalysisResult &sentiment_analysis) {
    m_sentiment_analysis = sentiment_analysis;
    m_sentiment_analysis_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Message::is_sentiment_analysis_Set() const{
    return m_sentiment_analysis_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Message::is_sentiment_analysis_Valid() const{
    return m_sentiment_analysis_isValid;
}

bool OAIGoogleCloudDialogflowV2beta1Message::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_annotation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_analysis.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowV2beta1Message::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
