/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3beta1TestCase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3beta1TestCase::OAIGoogleCloudDialogflowCxV3beta1TestCase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3beta1TestCase::OAIGoogleCloudDialogflowCxV3beta1TestCase() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3beta1TestCase::~OAIGoogleCloudDialogflowCxV3beta1TestCase() {}

void OAIGoogleCloudDialogflowCxV3beta1TestCase::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_last_test_result_isSet = false;
    m_last_test_result_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_test_case_conversation_turns_isSet = false;
    m_test_case_conversation_turns_isValid = false;

    m_test_config_isSet = false;
    m_test_config_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3beta1TestCase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3beta1TestCase::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_last_test_result_isValid = ::OpenAPI::fromJsonValue(m_last_test_result, json[QString("lastTestResult")]);
    m_last_test_result_isSet = !json[QString("lastTestResult")].isNull() && m_last_test_result_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_test_case_conversation_turns_isValid = ::OpenAPI::fromJsonValue(m_test_case_conversation_turns, json[QString("testCaseConversationTurns")]);
    m_test_case_conversation_turns_isSet = !json[QString("testCaseConversationTurns")].isNull() && m_test_case_conversation_turns_isValid;

    m_test_config_isValid = ::OpenAPI::fromJsonValue(m_test_config, json[QString("testConfig")]);
    m_test_config_isSet = !json[QString("testConfig")].isNull() && m_test_config_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1TestCase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3beta1TestCase::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_last_test_result.isSet()) {
        obj.insert(QString("lastTestResult"), ::OpenAPI::toJsonValue(m_last_test_result));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_test_case_conversation_turns.size() > 0) {
        obj.insert(QString("testCaseConversationTurns"), ::OpenAPI::toJsonValue(m_test_case_conversation_turns));
    }
    if (m_test_config.isSet()) {
        obj.insert(QString("testConfig"), ::OpenAPI::toJsonValue(m_test_config));
    }
    return obj;
}

QString OAIGoogleCloudDialogflowCxV3beta1TestCase::getCreationTime() const {
    return m_creation_time;
}
void OAIGoogleCloudDialogflowCxV3beta1TestCase::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1TestCase::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1TestCase::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1TestCase::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudDialogflowCxV3beta1TestCase::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1TestCase::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1TestCase::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIGoogleCloudDialogflowCxV3beta1TestCaseResult OAIGoogleCloudDialogflowCxV3beta1TestCase::getLastTestResult() const {
    return m_last_test_result;
}
void OAIGoogleCloudDialogflowCxV3beta1TestCase::setLastTestResult(const OAIGoogleCloudDialogflowCxV3beta1TestCaseResult &last_test_result) {
    m_last_test_result = last_test_result;
    m_last_test_result_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1TestCase::is_last_test_result_Set() const{
    return m_last_test_result_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1TestCase::is_last_test_result_Valid() const{
    return m_last_test_result_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1TestCase::getName() const {
    return m_name;
}
void OAIGoogleCloudDialogflowCxV3beta1TestCase::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1TestCase::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1TestCase::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1TestCase::getNotes() const {
    return m_notes;
}
void OAIGoogleCloudDialogflowCxV3beta1TestCase::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1TestCase::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1TestCase::is_notes_Valid() const{
    return m_notes_isValid;
}

QList<QString> OAIGoogleCloudDialogflowCxV3beta1TestCase::getTags() const {
    return m_tags;
}
void OAIGoogleCloudDialogflowCxV3beta1TestCase::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1TestCase::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1TestCase::is_tags_Valid() const{
    return m_tags_isValid;
}

QList<OAIGoogleCloudDialogflowCxV3beta1ConversationTurn> OAIGoogleCloudDialogflowCxV3beta1TestCase::getTestCaseConversationTurns() const {
    return m_test_case_conversation_turns;
}
void OAIGoogleCloudDialogflowCxV3beta1TestCase::setTestCaseConversationTurns(const QList<OAIGoogleCloudDialogflowCxV3beta1ConversationTurn> &test_case_conversation_turns) {
    m_test_case_conversation_turns = test_case_conversation_turns;
    m_test_case_conversation_turns_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1TestCase::is_test_case_conversation_turns_Set() const{
    return m_test_case_conversation_turns_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1TestCase::is_test_case_conversation_turns_Valid() const{
    return m_test_case_conversation_turns_isValid;
}

OAIGoogleCloudDialogflowCxV3beta1TestConfig OAIGoogleCloudDialogflowCxV3beta1TestCase::getTestConfig() const {
    return m_test_config;
}
void OAIGoogleCloudDialogflowCxV3beta1TestCase::setTestConfig(const OAIGoogleCloudDialogflowCxV3beta1TestConfig &test_config) {
    m_test_config = test_config;
    m_test_config_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1TestCase::is_test_config_Set() const{
    return m_test_config_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1TestCase::is_test_config_Valid() const{
    return m_test_config_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1TestCase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_test_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_case_conversation_turns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3beta1TestCase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
