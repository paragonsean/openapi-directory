/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3ContinuousTestResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3ContinuousTestResult::OAIGoogleCloudDialogflowCxV3ContinuousTestResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3ContinuousTestResult::OAIGoogleCloudDialogflowCxV3ContinuousTestResult() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3ContinuousTestResult::~OAIGoogleCloudDialogflowCxV3ContinuousTestResult() {}

void OAIGoogleCloudDialogflowCxV3ContinuousTestResult::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_run_time_isSet = false;
    m_run_time_isValid = false;

    m_test_case_results_isSet = false;
    m_test_case_results_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3ContinuousTestResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3ContinuousTestResult::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_run_time_isValid = ::OpenAPI::fromJsonValue(m_run_time, json[QString("runTime")]);
    m_run_time_isSet = !json[QString("runTime")].isNull() && m_run_time_isValid;

    m_test_case_results_isValid = ::OpenAPI::fromJsonValue(m_test_case_results, json[QString("testCaseResults")]);
    m_test_case_results_isSet = !json[QString("testCaseResults")].isNull() && m_test_case_results_isValid;
}

QString OAIGoogleCloudDialogflowCxV3ContinuousTestResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3ContinuousTestResult::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_run_time_isSet) {
        obj.insert(QString("runTime"), ::OpenAPI::toJsonValue(m_run_time));
    }
    if (m_test_case_results.size() > 0) {
        obj.insert(QString("testCaseResults"), ::OpenAPI::toJsonValue(m_test_case_results));
    }
    return obj;
}

QString OAIGoogleCloudDialogflowCxV3ContinuousTestResult::getName() const {
    return m_name;
}
void OAIGoogleCloudDialogflowCxV3ContinuousTestResult::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3ContinuousTestResult::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudDialogflowCxV3ContinuousTestResult::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleCloudDialogflowCxV3ContinuousTestResult::getResult() const {
    return m_result;
}
void OAIGoogleCloudDialogflowCxV3ContinuousTestResult::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3ContinuousTestResult::is_result_Set() const{
    return m_result_isSet;
}

bool OAIGoogleCloudDialogflowCxV3ContinuousTestResult::is_result_Valid() const{
    return m_result_isValid;
}

QString OAIGoogleCloudDialogflowCxV3ContinuousTestResult::getRunTime() const {
    return m_run_time;
}
void OAIGoogleCloudDialogflowCxV3ContinuousTestResult::setRunTime(const QString &run_time) {
    m_run_time = run_time;
    m_run_time_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3ContinuousTestResult::is_run_time_Set() const{
    return m_run_time_isSet;
}

bool OAIGoogleCloudDialogflowCxV3ContinuousTestResult::is_run_time_Valid() const{
    return m_run_time_isValid;
}

QList<QString> OAIGoogleCloudDialogflowCxV3ContinuousTestResult::getTestCaseResults() const {
    return m_test_case_results;
}
void OAIGoogleCloudDialogflowCxV3ContinuousTestResult::setTestCaseResults(const QList<QString> &test_case_results) {
    m_test_case_results = test_case_results;
    m_test_case_results_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3ContinuousTestResult::is_test_case_results_Set() const{
    return m_test_case_results_isSet;
}

bool OAIGoogleCloudDialogflowCxV3ContinuousTestResult::is_test_case_results_Valid() const{
    return m_test_case_results_isValid;
}

bool OAIGoogleCloudDialogflowCxV3ContinuousTestResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_case_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3ContinuousTestResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
