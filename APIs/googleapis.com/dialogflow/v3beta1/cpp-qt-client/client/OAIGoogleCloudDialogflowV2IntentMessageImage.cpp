/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowV2IntentMessageImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowV2IntentMessageImage::OAIGoogleCloudDialogflowV2IntentMessageImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowV2IntentMessageImage::OAIGoogleCloudDialogflowV2IntentMessageImage() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowV2IntentMessageImage::~OAIGoogleCloudDialogflowV2IntentMessageImage() {}

void OAIGoogleCloudDialogflowV2IntentMessageImage::initializeModel() {

    m_accessibility_text_isSet = false;
    m_accessibility_text_isValid = false;

    m_image_uri_isSet = false;
    m_image_uri_isValid = false;
}

void OAIGoogleCloudDialogflowV2IntentMessageImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowV2IntentMessageImage::fromJsonObject(QJsonObject json) {

    m_accessibility_text_isValid = ::OpenAPI::fromJsonValue(m_accessibility_text, json[QString("accessibilityText")]);
    m_accessibility_text_isSet = !json[QString("accessibilityText")].isNull() && m_accessibility_text_isValid;

    m_image_uri_isValid = ::OpenAPI::fromJsonValue(m_image_uri, json[QString("imageUri")]);
    m_image_uri_isSet = !json[QString("imageUri")].isNull() && m_image_uri_isValid;
}

QString OAIGoogleCloudDialogflowV2IntentMessageImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowV2IntentMessageImage::asJsonObject() const {
    QJsonObject obj;
    if (m_accessibility_text_isSet) {
        obj.insert(QString("accessibilityText"), ::OpenAPI::toJsonValue(m_accessibility_text));
    }
    if (m_image_uri_isSet) {
        obj.insert(QString("imageUri"), ::OpenAPI::toJsonValue(m_image_uri));
    }
    return obj;
}

QString OAIGoogleCloudDialogflowV2IntentMessageImage::getAccessibilityText() const {
    return m_accessibility_text;
}
void OAIGoogleCloudDialogflowV2IntentMessageImage::setAccessibilityText(const QString &accessibility_text) {
    m_accessibility_text = accessibility_text;
    m_accessibility_text_isSet = true;
}

bool OAIGoogleCloudDialogflowV2IntentMessageImage::is_accessibility_text_Set() const{
    return m_accessibility_text_isSet;
}

bool OAIGoogleCloudDialogflowV2IntentMessageImage::is_accessibility_text_Valid() const{
    return m_accessibility_text_isValid;
}

QString OAIGoogleCloudDialogflowV2IntentMessageImage::getImageUri() const {
    return m_image_uri;
}
void OAIGoogleCloudDialogflowV2IntentMessageImage::setImageUri(const QString &image_uri) {
    m_image_uri = image_uri;
    m_image_uri_isSet = true;
}

bool OAIGoogleCloudDialogflowV2IntentMessageImage::is_image_uri_Set() const{
    return m_image_uri_isSet;
}

bool OAIGoogleCloudDialogflowV2IntentMessageImage::is_image_uri_Valid() const{
    return m_image_uri_isValid;
}

bool OAIGoogleCloudDialogflowV2IntentMessageImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accessibility_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowV2IntentMessageImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
