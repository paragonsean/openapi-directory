/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3beta1Agent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3beta1Agent::OAIGoogleCloudDialogflowCxV3beta1Agent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3beta1Agent::OAIGoogleCloudDialogflowCxV3beta1Agent() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3beta1Agent::~OAIGoogleCloudDialogflowCxV3beta1Agent() {}

void OAIGoogleCloudDialogflowCxV3beta1Agent::initializeModel() {

    m_advanced_settings_isSet = false;
    m_advanced_settings_isValid = false;

    m_answer_feedback_settings_isSet = false;
    m_answer_feedback_settings_isValid = false;

    m_avatar_uri_isSet = false;
    m_avatar_uri_isValid = false;

    m_default_language_code_isSet = false;
    m_default_language_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_enable_spell_correction_isSet = false;
    m_enable_spell_correction_isValid = false;

    m_enable_stackdriver_logging_isSet = false;
    m_enable_stackdriver_logging_isValid = false;

    m_gen_app_builder_settings_isSet = false;
    m_gen_app_builder_settings_isValid = false;

    m_git_integration_settings_isSet = false;
    m_git_integration_settings_isValid = false;

    m_locked_isSet = false;
    m_locked_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_security_settings_isSet = false;
    m_security_settings_isValid = false;

    m_speech_to_text_settings_isSet = false;
    m_speech_to_text_settings_isValid = false;

    m_start_flow_isSet = false;
    m_start_flow_isValid = false;

    m_supported_language_codes_isSet = false;
    m_supported_language_codes_isValid = false;

    m_text_to_speech_settings_isSet = false;
    m_text_to_speech_settings_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3beta1Agent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3beta1Agent::fromJsonObject(QJsonObject json) {

    m_advanced_settings_isValid = ::OpenAPI::fromJsonValue(m_advanced_settings, json[QString("advancedSettings")]);
    m_advanced_settings_isSet = !json[QString("advancedSettings")].isNull() && m_advanced_settings_isValid;

    m_answer_feedback_settings_isValid = ::OpenAPI::fromJsonValue(m_answer_feedback_settings, json[QString("answerFeedbackSettings")]);
    m_answer_feedback_settings_isSet = !json[QString("answerFeedbackSettings")].isNull() && m_answer_feedback_settings_isValid;

    m_avatar_uri_isValid = ::OpenAPI::fromJsonValue(m_avatar_uri, json[QString("avatarUri")]);
    m_avatar_uri_isSet = !json[QString("avatarUri")].isNull() && m_avatar_uri_isValid;

    m_default_language_code_isValid = ::OpenAPI::fromJsonValue(m_default_language_code, json[QString("defaultLanguageCode")]);
    m_default_language_code_isSet = !json[QString("defaultLanguageCode")].isNull() && m_default_language_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_enable_spell_correction_isValid = ::OpenAPI::fromJsonValue(m_enable_spell_correction, json[QString("enableSpellCorrection")]);
    m_enable_spell_correction_isSet = !json[QString("enableSpellCorrection")].isNull() && m_enable_spell_correction_isValid;

    m_enable_stackdriver_logging_isValid = ::OpenAPI::fromJsonValue(m_enable_stackdriver_logging, json[QString("enableStackdriverLogging")]);
    m_enable_stackdriver_logging_isSet = !json[QString("enableStackdriverLogging")].isNull() && m_enable_stackdriver_logging_isValid;

    m_gen_app_builder_settings_isValid = ::OpenAPI::fromJsonValue(m_gen_app_builder_settings, json[QString("genAppBuilderSettings")]);
    m_gen_app_builder_settings_isSet = !json[QString("genAppBuilderSettings")].isNull() && m_gen_app_builder_settings_isValid;

    m_git_integration_settings_isValid = ::OpenAPI::fromJsonValue(m_git_integration_settings, json[QString("gitIntegrationSettings")]);
    m_git_integration_settings_isSet = !json[QString("gitIntegrationSettings")].isNull() && m_git_integration_settings_isValid;

    m_locked_isValid = ::OpenAPI::fromJsonValue(m_locked, json[QString("locked")]);
    m_locked_isSet = !json[QString("locked")].isNull() && m_locked_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_security_settings_isValid = ::OpenAPI::fromJsonValue(m_security_settings, json[QString("securitySettings")]);
    m_security_settings_isSet = !json[QString("securitySettings")].isNull() && m_security_settings_isValid;

    m_speech_to_text_settings_isValid = ::OpenAPI::fromJsonValue(m_speech_to_text_settings, json[QString("speechToTextSettings")]);
    m_speech_to_text_settings_isSet = !json[QString("speechToTextSettings")].isNull() && m_speech_to_text_settings_isValid;

    m_start_flow_isValid = ::OpenAPI::fromJsonValue(m_start_flow, json[QString("startFlow")]);
    m_start_flow_isSet = !json[QString("startFlow")].isNull() && m_start_flow_isValid;

    m_supported_language_codes_isValid = ::OpenAPI::fromJsonValue(m_supported_language_codes, json[QString("supportedLanguageCodes")]);
    m_supported_language_codes_isSet = !json[QString("supportedLanguageCodes")].isNull() && m_supported_language_codes_isValid;

    m_text_to_speech_settings_isValid = ::OpenAPI::fromJsonValue(m_text_to_speech_settings, json[QString("textToSpeechSettings")]);
    m_text_to_speech_settings_isSet = !json[QString("textToSpeechSettings")].isNull() && m_text_to_speech_settings_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1Agent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3beta1Agent::asJsonObject() const {
    QJsonObject obj;
    if (m_advanced_settings.isSet()) {
        obj.insert(QString("advancedSettings"), ::OpenAPI::toJsonValue(m_advanced_settings));
    }
    if (m_answer_feedback_settings.isSet()) {
        obj.insert(QString("answerFeedbackSettings"), ::OpenAPI::toJsonValue(m_answer_feedback_settings));
    }
    if (m_avatar_uri_isSet) {
        obj.insert(QString("avatarUri"), ::OpenAPI::toJsonValue(m_avatar_uri));
    }
    if (m_default_language_code_isSet) {
        obj.insert(QString("defaultLanguageCode"), ::OpenAPI::toJsonValue(m_default_language_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_enable_spell_correction_isSet) {
        obj.insert(QString("enableSpellCorrection"), ::OpenAPI::toJsonValue(m_enable_spell_correction));
    }
    if (m_enable_stackdriver_logging_isSet) {
        obj.insert(QString("enableStackdriverLogging"), ::OpenAPI::toJsonValue(m_enable_stackdriver_logging));
    }
    if (m_gen_app_builder_settings.isSet()) {
        obj.insert(QString("genAppBuilderSettings"), ::OpenAPI::toJsonValue(m_gen_app_builder_settings));
    }
    if (m_git_integration_settings.isSet()) {
        obj.insert(QString("gitIntegrationSettings"), ::OpenAPI::toJsonValue(m_git_integration_settings));
    }
    if (m_locked_isSet) {
        obj.insert(QString("locked"), ::OpenAPI::toJsonValue(m_locked));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_security_settings_isSet) {
        obj.insert(QString("securitySettings"), ::OpenAPI::toJsonValue(m_security_settings));
    }
    if (m_speech_to_text_settings.isSet()) {
        obj.insert(QString("speechToTextSettings"), ::OpenAPI::toJsonValue(m_speech_to_text_settings));
    }
    if (m_start_flow_isSet) {
        obj.insert(QString("startFlow"), ::OpenAPI::toJsonValue(m_start_flow));
    }
    if (m_supported_language_codes.size() > 0) {
        obj.insert(QString("supportedLanguageCodes"), ::OpenAPI::toJsonValue(m_supported_language_codes));
    }
    if (m_text_to_speech_settings.isSet()) {
        obj.insert(QString("textToSpeechSettings"), ::OpenAPI::toJsonValue(m_text_to_speech_settings));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

OAIGoogleCloudDialogflowCxV3beta1AdvancedSettings OAIGoogleCloudDialogflowCxV3beta1Agent::getAdvancedSettings() const {
    return m_advanced_settings;
}
void OAIGoogleCloudDialogflowCxV3beta1Agent::setAdvancedSettings(const OAIGoogleCloudDialogflowCxV3beta1AdvancedSettings &advanced_settings) {
    m_advanced_settings = advanced_settings;
    m_advanced_settings_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_advanced_settings_Set() const{
    return m_advanced_settings_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_advanced_settings_Valid() const{
    return m_advanced_settings_isValid;
}

OAIGoogleCloudDialogflowCxV3beta1AgentAnswerFeedbackSettings OAIGoogleCloudDialogflowCxV3beta1Agent::getAnswerFeedbackSettings() const {
    return m_answer_feedback_settings;
}
void OAIGoogleCloudDialogflowCxV3beta1Agent::setAnswerFeedbackSettings(const OAIGoogleCloudDialogflowCxV3beta1AgentAnswerFeedbackSettings &answer_feedback_settings) {
    m_answer_feedback_settings = answer_feedback_settings;
    m_answer_feedback_settings_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_answer_feedback_settings_Set() const{
    return m_answer_feedback_settings_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_answer_feedback_settings_Valid() const{
    return m_answer_feedback_settings_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1Agent::getAvatarUri() const {
    return m_avatar_uri;
}
void OAIGoogleCloudDialogflowCxV3beta1Agent::setAvatarUri(const QString &avatar_uri) {
    m_avatar_uri = avatar_uri;
    m_avatar_uri_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_avatar_uri_Set() const{
    return m_avatar_uri_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_avatar_uri_Valid() const{
    return m_avatar_uri_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1Agent::getDefaultLanguageCode() const {
    return m_default_language_code;
}
void OAIGoogleCloudDialogflowCxV3beta1Agent::setDefaultLanguageCode(const QString &default_language_code) {
    m_default_language_code = default_language_code;
    m_default_language_code_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_default_language_code_Set() const{
    return m_default_language_code_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_default_language_code_Valid() const{
    return m_default_language_code_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1Agent::getDescription() const {
    return m_description;
}
void OAIGoogleCloudDialogflowCxV3beta1Agent::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1Agent::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudDialogflowCxV3beta1Agent::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::isEnableSpellCorrection() const {
    return m_enable_spell_correction;
}
void OAIGoogleCloudDialogflowCxV3beta1Agent::setEnableSpellCorrection(const bool &enable_spell_correction) {
    m_enable_spell_correction = enable_spell_correction;
    m_enable_spell_correction_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_enable_spell_correction_Set() const{
    return m_enable_spell_correction_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_enable_spell_correction_Valid() const{
    return m_enable_spell_correction_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::isEnableStackdriverLogging() const {
    return m_enable_stackdriver_logging;
}
void OAIGoogleCloudDialogflowCxV3beta1Agent::setEnableStackdriverLogging(const bool &enable_stackdriver_logging) {
    m_enable_stackdriver_logging = enable_stackdriver_logging;
    m_enable_stackdriver_logging_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_enable_stackdriver_logging_Set() const{
    return m_enable_stackdriver_logging_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_enable_stackdriver_logging_Valid() const{
    return m_enable_stackdriver_logging_isValid;
}

OAIGoogleCloudDialogflowCxV3beta1AgentGenAppBuilderSettings OAIGoogleCloudDialogflowCxV3beta1Agent::getGenAppBuilderSettings() const {
    return m_gen_app_builder_settings;
}
void OAIGoogleCloudDialogflowCxV3beta1Agent::setGenAppBuilderSettings(const OAIGoogleCloudDialogflowCxV3beta1AgentGenAppBuilderSettings &gen_app_builder_settings) {
    m_gen_app_builder_settings = gen_app_builder_settings;
    m_gen_app_builder_settings_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_gen_app_builder_settings_Set() const{
    return m_gen_app_builder_settings_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_gen_app_builder_settings_Valid() const{
    return m_gen_app_builder_settings_isValid;
}

OAIGoogleCloudDialogflowCxV3beta1AgentGitIntegrationSettings OAIGoogleCloudDialogflowCxV3beta1Agent::getGitIntegrationSettings() const {
    return m_git_integration_settings;
}
void OAIGoogleCloudDialogflowCxV3beta1Agent::setGitIntegrationSettings(const OAIGoogleCloudDialogflowCxV3beta1AgentGitIntegrationSettings &git_integration_settings) {
    m_git_integration_settings = git_integration_settings;
    m_git_integration_settings_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_git_integration_settings_Set() const{
    return m_git_integration_settings_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_git_integration_settings_Valid() const{
    return m_git_integration_settings_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::isLocked() const {
    return m_locked;
}
void OAIGoogleCloudDialogflowCxV3beta1Agent::setLocked(const bool &locked) {
    m_locked = locked;
    m_locked_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_locked_Valid() const{
    return m_locked_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1Agent::getName() const {
    return m_name;
}
void OAIGoogleCloudDialogflowCxV3beta1Agent::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1Agent::getSecuritySettings() const {
    return m_security_settings;
}
void OAIGoogleCloudDialogflowCxV3beta1Agent::setSecuritySettings(const QString &security_settings) {
    m_security_settings = security_settings;
    m_security_settings_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_security_settings_Set() const{
    return m_security_settings_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_security_settings_Valid() const{
    return m_security_settings_isValid;
}

OAIGoogleCloudDialogflowCxV3beta1SpeechToTextSettings OAIGoogleCloudDialogflowCxV3beta1Agent::getSpeechToTextSettings() const {
    return m_speech_to_text_settings;
}
void OAIGoogleCloudDialogflowCxV3beta1Agent::setSpeechToTextSettings(const OAIGoogleCloudDialogflowCxV3beta1SpeechToTextSettings &speech_to_text_settings) {
    m_speech_to_text_settings = speech_to_text_settings;
    m_speech_to_text_settings_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_speech_to_text_settings_Set() const{
    return m_speech_to_text_settings_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_speech_to_text_settings_Valid() const{
    return m_speech_to_text_settings_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1Agent::getStartFlow() const {
    return m_start_flow;
}
void OAIGoogleCloudDialogflowCxV3beta1Agent::setStartFlow(const QString &start_flow) {
    m_start_flow = start_flow;
    m_start_flow_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_start_flow_Set() const{
    return m_start_flow_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_start_flow_Valid() const{
    return m_start_flow_isValid;
}

QList<QString> OAIGoogleCloudDialogflowCxV3beta1Agent::getSupportedLanguageCodes() const {
    return m_supported_language_codes;
}
void OAIGoogleCloudDialogflowCxV3beta1Agent::setSupportedLanguageCodes(const QList<QString> &supported_language_codes) {
    m_supported_language_codes = supported_language_codes;
    m_supported_language_codes_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_supported_language_codes_Set() const{
    return m_supported_language_codes_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_supported_language_codes_Valid() const{
    return m_supported_language_codes_isValid;
}

OAIGoogleCloudDialogflowCxV3beta1TextToSpeechSettings OAIGoogleCloudDialogflowCxV3beta1Agent::getTextToSpeechSettings() const {
    return m_text_to_speech_settings;
}
void OAIGoogleCloudDialogflowCxV3beta1Agent::setTextToSpeechSettings(const OAIGoogleCloudDialogflowCxV3beta1TextToSpeechSettings &text_to_speech_settings) {
    m_text_to_speech_settings = text_to_speech_settings;
    m_text_to_speech_settings_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_text_to_speech_settings_Set() const{
    return m_text_to_speech_settings_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_text_to_speech_settings_Valid() const{
    return m_text_to_speech_settings_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1Agent::getTimeZone() const {
    return m_time_zone;
}
void OAIGoogleCloudDialogflowCxV3beta1Agent::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advanced_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_answer_feedback_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_spell_correction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_stackdriver_logging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gen_app_builder_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_integration_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_settings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speech_to_text_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_language_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_to_speech_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3beta1Agent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
