/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::~OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest() {}

void OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::initializeModel() {

    m_agent_uri_isSet = false;
    m_agent_uri_isValid = false;

    m_data_format_isSet = false;
    m_data_format_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_git_destination_isSet = false;
    m_git_destination_isValid = false;

    m_include_bigquery_export_settings_isSet = false;
    m_include_bigquery_export_settings_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::fromJsonObject(QJsonObject json) {

    m_agent_uri_isValid = ::OpenAPI::fromJsonValue(m_agent_uri, json[QString("agentUri")]);
    m_agent_uri_isSet = !json[QString("agentUri")].isNull() && m_agent_uri_isValid;

    m_data_format_isValid = ::OpenAPI::fromJsonValue(m_data_format, json[QString("dataFormat")]);
    m_data_format_isSet = !json[QString("dataFormat")].isNull() && m_data_format_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_git_destination_isValid = ::OpenAPI::fromJsonValue(m_git_destination, json[QString("gitDestination")]);
    m_git_destination_isSet = !json[QString("gitDestination")].isNull() && m_git_destination_isValid;

    m_include_bigquery_export_settings_isValid = ::OpenAPI::fromJsonValue(m_include_bigquery_export_settings, json[QString("includeBigqueryExportSettings")]);
    m_include_bigquery_export_settings_isSet = !json[QString("includeBigqueryExportSettings")].isNull() && m_include_bigquery_export_settings_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_uri_isSet) {
        obj.insert(QString("agentUri"), ::OpenAPI::toJsonValue(m_agent_uri));
    }
    if (m_data_format_isSet) {
        obj.insert(QString("dataFormat"), ::OpenAPI::toJsonValue(m_data_format));
    }
    if (m_environment_isSet) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_git_destination.isSet()) {
        obj.insert(QString("gitDestination"), ::OpenAPI::toJsonValue(m_git_destination));
    }
    if (m_include_bigquery_export_settings_isSet) {
        obj.insert(QString("includeBigqueryExportSettings"), ::OpenAPI::toJsonValue(m_include_bigquery_export_settings));
    }
    return obj;
}

QString OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::getAgentUri() const {
    return m_agent_uri;
}
void OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::setAgentUri(const QString &agent_uri) {
    m_agent_uri = agent_uri;
    m_agent_uri_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::is_agent_uri_Set() const{
    return m_agent_uri_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::is_agent_uri_Valid() const{
    return m_agent_uri_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::getDataFormat() const {
    return m_data_format;
}
void OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::setDataFormat(const QString &data_format) {
    m_data_format = data_format;
    m_data_format_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::is_data_format_Set() const{
    return m_data_format_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::is_data_format_Valid() const{
    return m_data_format_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::getEnvironment() const {
    return m_environment;
}
void OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::setEnvironment(const QString &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::is_environment_Valid() const{
    return m_environment_isValid;
}

OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequestGitDestination OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::getGitDestination() const {
    return m_git_destination;
}
void OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::setGitDestination(const OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequestGitDestination &git_destination) {
    m_git_destination = git_destination;
    m_git_destination_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::is_git_destination_Set() const{
    return m_git_destination_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::is_git_destination_Valid() const{
    return m_git_destination_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::isIncludeBigqueryExportSettings() const {
    return m_include_bigquery_export_settings;
}
void OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::setIncludeBigqueryExportSettings(const bool &include_bigquery_export_settings) {
    m_include_bigquery_export_settings = include_bigquery_export_settings;
    m_include_bigquery_export_settings_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::is_include_bigquery_export_settings_Set() const{
    return m_include_bigquery_export_settings_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::is_include_bigquery_export_settings_Valid() const{
    return m_include_bigquery_export_settings_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_bigquery_export_settings_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3beta1ExportAgentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
