/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::~OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig() {}

void OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::initializeModel() {

    m_audio_encoding_isSet = false;
    m_audio_encoding_isValid = false;

    m_barge_in_config_isSet = false;
    m_barge_in_config_isValid = false;

    m_enable_word_info_isSet = false;
    m_enable_word_info_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_model_variant_isSet = false;
    m_model_variant_isValid = false;

    m_opt_out_conformer_model_migration_isSet = false;
    m_opt_out_conformer_model_migration_isValid = false;

    m_phrase_hints_isSet = false;
    m_phrase_hints_isValid = false;

    m_sample_rate_hertz_isSet = false;
    m_sample_rate_hertz_isValid = false;

    m_single_utterance_isSet = false;
    m_single_utterance_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::fromJsonObject(QJsonObject json) {

    m_audio_encoding_isValid = ::OpenAPI::fromJsonValue(m_audio_encoding, json[QString("audioEncoding")]);
    m_audio_encoding_isSet = !json[QString("audioEncoding")].isNull() && m_audio_encoding_isValid;

    m_barge_in_config_isValid = ::OpenAPI::fromJsonValue(m_barge_in_config, json[QString("bargeInConfig")]);
    m_barge_in_config_isSet = !json[QString("bargeInConfig")].isNull() && m_barge_in_config_isValid;

    m_enable_word_info_isValid = ::OpenAPI::fromJsonValue(m_enable_word_info, json[QString("enableWordInfo")]);
    m_enable_word_info_isSet = !json[QString("enableWordInfo")].isNull() && m_enable_word_info_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_model_variant_isValid = ::OpenAPI::fromJsonValue(m_model_variant, json[QString("modelVariant")]);
    m_model_variant_isSet = !json[QString("modelVariant")].isNull() && m_model_variant_isValid;

    m_opt_out_conformer_model_migration_isValid = ::OpenAPI::fromJsonValue(m_opt_out_conformer_model_migration, json[QString("optOutConformerModelMigration")]);
    m_opt_out_conformer_model_migration_isSet = !json[QString("optOutConformerModelMigration")].isNull() && m_opt_out_conformer_model_migration_isValid;

    m_phrase_hints_isValid = ::OpenAPI::fromJsonValue(m_phrase_hints, json[QString("phraseHints")]);
    m_phrase_hints_isSet = !json[QString("phraseHints")].isNull() && m_phrase_hints_isValid;

    m_sample_rate_hertz_isValid = ::OpenAPI::fromJsonValue(m_sample_rate_hertz, json[QString("sampleRateHertz")]);
    m_sample_rate_hertz_isSet = !json[QString("sampleRateHertz")].isNull() && m_sample_rate_hertz_isValid;

    m_single_utterance_isValid = ::OpenAPI::fromJsonValue(m_single_utterance, json[QString("singleUtterance")]);
    m_single_utterance_isSet = !json[QString("singleUtterance")].isNull() && m_single_utterance_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_encoding_isSet) {
        obj.insert(QString("audioEncoding"), ::OpenAPI::toJsonValue(m_audio_encoding));
    }
    if (m_barge_in_config.isSet()) {
        obj.insert(QString("bargeInConfig"), ::OpenAPI::toJsonValue(m_barge_in_config));
    }
    if (m_enable_word_info_isSet) {
        obj.insert(QString("enableWordInfo"), ::OpenAPI::toJsonValue(m_enable_word_info));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_model_variant_isSet) {
        obj.insert(QString("modelVariant"), ::OpenAPI::toJsonValue(m_model_variant));
    }
    if (m_opt_out_conformer_model_migration_isSet) {
        obj.insert(QString("optOutConformerModelMigration"), ::OpenAPI::toJsonValue(m_opt_out_conformer_model_migration));
    }
    if (m_phrase_hints.size() > 0) {
        obj.insert(QString("phraseHints"), ::OpenAPI::toJsonValue(m_phrase_hints));
    }
    if (m_sample_rate_hertz_isSet) {
        obj.insert(QString("sampleRateHertz"), ::OpenAPI::toJsonValue(m_sample_rate_hertz));
    }
    if (m_single_utterance_isSet) {
        obj.insert(QString("singleUtterance"), ::OpenAPI::toJsonValue(m_single_utterance));
    }
    return obj;
}

QString OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::getAudioEncoding() const {
    return m_audio_encoding;
}
void OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::setAudioEncoding(const QString &audio_encoding) {
    m_audio_encoding = audio_encoding;
    m_audio_encoding_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::is_audio_encoding_Set() const{
    return m_audio_encoding_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::is_audio_encoding_Valid() const{
    return m_audio_encoding_isValid;
}

OAIGoogleCloudDialogflowCxV3beta1BargeInConfig OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::getBargeInConfig() const {
    return m_barge_in_config;
}
void OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::setBargeInConfig(const OAIGoogleCloudDialogflowCxV3beta1BargeInConfig &barge_in_config) {
    m_barge_in_config = barge_in_config;
    m_barge_in_config_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::is_barge_in_config_Set() const{
    return m_barge_in_config_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::is_barge_in_config_Valid() const{
    return m_barge_in_config_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::isEnableWordInfo() const {
    return m_enable_word_info;
}
void OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::setEnableWordInfo(const bool &enable_word_info) {
    m_enable_word_info = enable_word_info;
    m_enable_word_info_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::is_enable_word_info_Set() const{
    return m_enable_word_info_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::is_enable_word_info_Valid() const{
    return m_enable_word_info_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::getModel() const {
    return m_model;
}
void OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::is_model_Set() const{
    return m_model_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::getModelVariant() const {
    return m_model_variant;
}
void OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::setModelVariant(const QString &model_variant) {
    m_model_variant = model_variant;
    m_model_variant_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::is_model_variant_Set() const{
    return m_model_variant_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::is_model_variant_Valid() const{
    return m_model_variant_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::isOptOutConformerModelMigration() const {
    return m_opt_out_conformer_model_migration;
}
void OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::setOptOutConformerModelMigration(const bool &opt_out_conformer_model_migration) {
    m_opt_out_conformer_model_migration = opt_out_conformer_model_migration;
    m_opt_out_conformer_model_migration_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::is_opt_out_conformer_model_migration_Set() const{
    return m_opt_out_conformer_model_migration_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::is_opt_out_conformer_model_migration_Valid() const{
    return m_opt_out_conformer_model_migration_isValid;
}

QList<QString> OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::getPhraseHints() const {
    return m_phrase_hints;
}
void OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::setPhraseHints(const QList<QString> &phrase_hints) {
    m_phrase_hints = phrase_hints;
    m_phrase_hints_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::is_phrase_hints_Set() const{
    return m_phrase_hints_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::is_phrase_hints_Valid() const{
    return m_phrase_hints_isValid;
}

qint32 OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::getSampleRateHertz() const {
    return m_sample_rate_hertz;
}
void OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::setSampleRateHertz(const qint32 &sample_rate_hertz) {
    m_sample_rate_hertz = sample_rate_hertz;
    m_sample_rate_hertz_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::is_sample_rate_hertz_Set() const{
    return m_sample_rate_hertz_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::is_sample_rate_hertz_Valid() const{
    return m_sample_rate_hertz_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::isSingleUtterance() const {
    return m_single_utterance;
}
void OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::setSingleUtterance(const bool &single_utterance) {
    m_single_utterance = single_utterance;
    m_single_utterance_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::is_single_utterance_Set() const{
    return m_single_utterance_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::is_single_utterance_Valid() const{
    return m_single_utterance_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_barge_in_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_word_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_variant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_out_conformer_model_migration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phrase_hints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_rate_hertz_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_utterance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3beta1InputAudioConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
