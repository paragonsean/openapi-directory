/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3beta1Match.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3beta1Match::OAIGoogleCloudDialogflowCxV3beta1Match(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3beta1Match::OAIGoogleCloudDialogflowCxV3beta1Match() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3beta1Match::~OAIGoogleCloudDialogflowCxV3beta1Match() {}

void OAIGoogleCloudDialogflowCxV3beta1Match::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_intent_isSet = false;
    m_intent_isValid = false;

    m_match_type_isSet = false;
    m_match_type_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_resolved_input_isSet = false;
    m_resolved_input_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3beta1Match::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3beta1Match::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_intent_isValid = ::OpenAPI::fromJsonValue(m_intent, json[QString("intent")]);
    m_intent_isSet = !json[QString("intent")].isNull() && m_intent_isValid;

    m_match_type_isValid = ::OpenAPI::fromJsonValue(m_match_type, json[QString("matchType")]);
    m_match_type_isSet = !json[QString("matchType")].isNull() && m_match_type_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_resolved_input_isValid = ::OpenAPI::fromJsonValue(m_resolved_input, json[QString("resolvedInput")]);
    m_resolved_input_isSet = !json[QString("resolvedInput")].isNull() && m_resolved_input_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1Match::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3beta1Match::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_intent.isSet()) {
        obj.insert(QString("intent"), ::OpenAPI::toJsonValue(m_intent));
    }
    if (m_match_type_isSet) {
        obj.insert(QString("matchType"), ::OpenAPI::toJsonValue(m_match_type));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_resolved_input_isSet) {
        obj.insert(QString("resolvedInput"), ::OpenAPI::toJsonValue(m_resolved_input));
    }
    return obj;
}

float OAIGoogleCloudDialogflowCxV3beta1Match::getConfidence() const {
    return m_confidence;
}
void OAIGoogleCloudDialogflowCxV3beta1Match::setConfidence(const float &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Match::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Match::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1Match::getEvent() const {
    return m_event;
}
void OAIGoogleCloudDialogflowCxV3beta1Match::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Match::is_event_Set() const{
    return m_event_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Match::is_event_Valid() const{
    return m_event_isValid;
}

OAIGoogleCloudDialogflowCxV3beta1Intent OAIGoogleCloudDialogflowCxV3beta1Match::getIntent() const {
    return m_intent;
}
void OAIGoogleCloudDialogflowCxV3beta1Match::setIntent(const OAIGoogleCloudDialogflowCxV3beta1Intent &intent) {
    m_intent = intent;
    m_intent_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Match::is_intent_Set() const{
    return m_intent_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Match::is_intent_Valid() const{
    return m_intent_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1Match::getMatchType() const {
    return m_match_type;
}
void OAIGoogleCloudDialogflowCxV3beta1Match::setMatchType(const QString &match_type) {
    m_match_type = match_type;
    m_match_type_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Match::is_match_type_Set() const{
    return m_match_type_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Match::is_match_type_Valid() const{
    return m_match_type_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudDialogflowCxV3beta1Match::getParameters() const {
    return m_parameters;
}
void OAIGoogleCloudDialogflowCxV3beta1Match::setParameters(const QMap<QString, QJsonValue> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Match::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Match::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1Match::getResolvedInput() const {
    return m_resolved_input;
}
void OAIGoogleCloudDialogflowCxV3beta1Match::setResolvedInput(const QString &resolved_input) {
    m_resolved_input = resolved_input;
    m_resolved_input_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1Match::is_resolved_input_Set() const{
    return m_resolved_input_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1Match::is_resolved_input_Valid() const{
    return m_resolved_input_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1Match::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_input_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3beta1Match::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
