/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::~OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse() {}

void OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::initializeModel() {

    m_base_version_content_json_isSet = false;
    m_base_version_content_json_isValid = false;

    m_compare_time_isSet = false;
    m_compare_time_isValid = false;

    m_target_version_content_json_isSet = false;
    m_target_version_content_json_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::fromJsonObject(QJsonObject json) {

    m_base_version_content_json_isValid = ::OpenAPI::fromJsonValue(m_base_version_content_json, json[QString("baseVersionContentJson")]);
    m_base_version_content_json_isSet = !json[QString("baseVersionContentJson")].isNull() && m_base_version_content_json_isValid;

    m_compare_time_isValid = ::OpenAPI::fromJsonValue(m_compare_time, json[QString("compareTime")]);
    m_compare_time_isSet = !json[QString("compareTime")].isNull() && m_compare_time_isValid;

    m_target_version_content_json_isValid = ::OpenAPI::fromJsonValue(m_target_version_content_json, json[QString("targetVersionContentJson")]);
    m_target_version_content_json_isSet = !json[QString("targetVersionContentJson")].isNull() && m_target_version_content_json_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_base_version_content_json_isSet) {
        obj.insert(QString("baseVersionContentJson"), ::OpenAPI::toJsonValue(m_base_version_content_json));
    }
    if (m_compare_time_isSet) {
        obj.insert(QString("compareTime"), ::OpenAPI::toJsonValue(m_compare_time));
    }
    if (m_target_version_content_json_isSet) {
        obj.insert(QString("targetVersionContentJson"), ::OpenAPI::toJsonValue(m_target_version_content_json));
    }
    return obj;
}

QString OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::getBaseVersionContentJson() const {
    return m_base_version_content_json;
}
void OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::setBaseVersionContentJson(const QString &base_version_content_json) {
    m_base_version_content_json = base_version_content_json;
    m_base_version_content_json_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::is_base_version_content_json_Set() const{
    return m_base_version_content_json_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::is_base_version_content_json_Valid() const{
    return m_base_version_content_json_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::getCompareTime() const {
    return m_compare_time;
}
void OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::setCompareTime(const QString &compare_time) {
    m_compare_time = compare_time;
    m_compare_time_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::is_compare_time_Set() const{
    return m_compare_time_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::is_compare_time_Valid() const{
    return m_compare_time_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::getTargetVersionContentJson() const {
    return m_target_version_content_json;
}
void OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::setTargetVersionContentJson(const QString &target_version_content_json) {
    m_target_version_content_json = target_version_content_json;
    m_target_version_content_json_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::is_target_version_content_json_Set() const{
    return m_target_version_content_json_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::is_target_version_content_json_Valid() const{
    return m_target_version_content_json_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_version_content_json_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compare_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_version_content_json_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3beta1CompareVersionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
