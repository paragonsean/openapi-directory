/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDialogflowCxV3beta1ExperimentDefinition from './GoogleCloudDialogflowCxV3beta1ExperimentDefinition';
import GoogleCloudDialogflowCxV3beta1ExperimentResult from './GoogleCloudDialogflowCxV3beta1ExperimentResult';
import GoogleCloudDialogflowCxV3beta1RolloutConfig from './GoogleCloudDialogflowCxV3beta1RolloutConfig';
import GoogleCloudDialogflowCxV3beta1RolloutState from './GoogleCloudDialogflowCxV3beta1RolloutState';
import GoogleCloudDialogflowCxV3beta1VariantsHistory from './GoogleCloudDialogflowCxV3beta1VariantsHistory';

/**
 * The GoogleCloudDialogflowCxV3beta1Experiment model module.
 * @module model/GoogleCloudDialogflowCxV3beta1Experiment
 * @version v3beta1
 */
class GoogleCloudDialogflowCxV3beta1Experiment {
    /**
     * Constructs a new <code>GoogleCloudDialogflowCxV3beta1Experiment</code>.
     * Represents an experiment in an environment.
     * @alias module:model/GoogleCloudDialogflowCxV3beta1Experiment
     */
    constructor() { 
        
        GoogleCloudDialogflowCxV3beta1Experiment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDialogflowCxV3beta1Experiment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDialogflowCxV3beta1Experiment} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDialogflowCxV3beta1Experiment} The populated <code>GoogleCloudDialogflowCxV3beta1Experiment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDialogflowCxV3beta1Experiment();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('definition')) {
                obj['definition'] = GoogleCloudDialogflowCxV3beta1ExperimentDefinition.constructFromObject(data['definition']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('experimentLength')) {
                obj['experimentLength'] = ApiClient.convertToType(data['experimentLength'], 'String');
            }
            if (data.hasOwnProperty('lastUpdateTime')) {
                obj['lastUpdateTime'] = ApiClient.convertToType(data['lastUpdateTime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = GoogleCloudDialogflowCxV3beta1ExperimentResult.constructFromObject(data['result']);
            }
            if (data.hasOwnProperty('rolloutConfig')) {
                obj['rolloutConfig'] = GoogleCloudDialogflowCxV3beta1RolloutConfig.constructFromObject(data['rolloutConfig']);
            }
            if (data.hasOwnProperty('rolloutFailureReason')) {
                obj['rolloutFailureReason'] = ApiClient.convertToType(data['rolloutFailureReason'], 'String');
            }
            if (data.hasOwnProperty('rolloutState')) {
                obj['rolloutState'] = GoogleCloudDialogflowCxV3beta1RolloutState.constructFromObject(data['rolloutState']);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('variantsHistory')) {
                obj['variantsHistory'] = ApiClient.convertToType(data['variantsHistory'], [GoogleCloudDialogflowCxV3beta1VariantsHistory]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDialogflowCxV3beta1Experiment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDialogflowCxV3beta1Experiment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `definition`
        if (data['definition']) { // data not null
          GoogleCloudDialogflowCxV3beta1ExperimentDefinition.validateJSON(data['definition']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // ensure the json data is a string
        if (data['experimentLength'] && !(typeof data['experimentLength'] === 'string' || data['experimentLength'] instanceof String)) {
            throw new Error("Expected the field `experimentLength` to be a primitive type in the JSON string but got " + data['experimentLength']);
        }
        // ensure the json data is a string
        if (data['lastUpdateTime'] && !(typeof data['lastUpdateTime'] === 'string' || data['lastUpdateTime'] instanceof String)) {
            throw new Error("Expected the field `lastUpdateTime` to be a primitive type in the JSON string but got " + data['lastUpdateTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `result`
        if (data['result']) { // data not null
          GoogleCloudDialogflowCxV3beta1ExperimentResult.validateJSON(data['result']);
        }
        // validate the optional field `rolloutConfig`
        if (data['rolloutConfig']) { // data not null
          GoogleCloudDialogflowCxV3beta1RolloutConfig.validateJSON(data['rolloutConfig']);
        }
        // ensure the json data is a string
        if (data['rolloutFailureReason'] && !(typeof data['rolloutFailureReason'] === 'string' || data['rolloutFailureReason'] instanceof String)) {
            throw new Error("Expected the field `rolloutFailureReason` to be a primitive type in the JSON string but got " + data['rolloutFailureReason']);
        }
        // validate the optional field `rolloutState`
        if (data['rolloutState']) { // data not null
          GoogleCloudDialogflowCxV3beta1RolloutState.validateJSON(data['rolloutState']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        if (data['variantsHistory']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['variantsHistory'])) {
                throw new Error("Expected the field `variantsHistory` to be an array in the JSON data but got " + data['variantsHistory']);
            }
            // validate the optional field `variantsHistory` (array)
            for (const item of data['variantsHistory']) {
                GoogleCloudDialogflowCxV3beta1VariantsHistory.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Creation time of this experiment.
 * @member {String} createTime
 */
GoogleCloudDialogflowCxV3beta1Experiment.prototype['createTime'] = undefined;

/**
 * @member {module:model/GoogleCloudDialogflowCxV3beta1ExperimentDefinition} definition
 */
GoogleCloudDialogflowCxV3beta1Experiment.prototype['definition'] = undefined;

/**
 * The human-readable description of the experiment.
 * @member {String} description
 */
GoogleCloudDialogflowCxV3beta1Experiment.prototype['description'] = undefined;

/**
 * Required. The human-readable name of the experiment (unique in an environment). Limit of 64 characters.
 * @member {String} displayName
 */
GoogleCloudDialogflowCxV3beta1Experiment.prototype['displayName'] = undefined;

/**
 * End time of this experiment.
 * @member {String} endTime
 */
GoogleCloudDialogflowCxV3beta1Experiment.prototype['endTime'] = undefined;

/**
 * Maximum number of days to run the experiment. If auto-rollout is not enabled, default value and maximum will be 30 days. If auto-rollout is enabled, default value and maximum will be 6 days.
 * @member {String} experimentLength
 */
GoogleCloudDialogflowCxV3beta1Experiment.prototype['experimentLength'] = undefined;

/**
 * Last update time of this experiment.
 * @member {String} lastUpdateTime
 */
GoogleCloudDialogflowCxV3beta1Experiment.prototype['lastUpdateTime'] = undefined;

/**
 * The name of the experiment. Format: projects//locations//agents//environments//experiments/..
 * @member {String} name
 */
GoogleCloudDialogflowCxV3beta1Experiment.prototype['name'] = undefined;

/**
 * @member {module:model/GoogleCloudDialogflowCxV3beta1ExperimentResult} result
 */
GoogleCloudDialogflowCxV3beta1Experiment.prototype['result'] = undefined;

/**
 * @member {module:model/GoogleCloudDialogflowCxV3beta1RolloutConfig} rolloutConfig
 */
GoogleCloudDialogflowCxV3beta1Experiment.prototype['rolloutConfig'] = undefined;

/**
 * The reason why rollout has failed. Should only be set when state is ROLLOUT_FAILED.
 * @member {String} rolloutFailureReason
 */
GoogleCloudDialogflowCxV3beta1Experiment.prototype['rolloutFailureReason'] = undefined;

/**
 * @member {module:model/GoogleCloudDialogflowCxV3beta1RolloutState} rolloutState
 */
GoogleCloudDialogflowCxV3beta1Experiment.prototype['rolloutState'] = undefined;

/**
 * Start time of this experiment.
 * @member {String} startTime
 */
GoogleCloudDialogflowCxV3beta1Experiment.prototype['startTime'] = undefined;

/**
 * The current state of the experiment. Transition triggered by Experiments.StartExperiment: DRAFT->RUNNING. Transition triggered by Experiments.CancelExperiment: DRAFT->DONE or RUNNING->DONE.
 * @member {module:model/GoogleCloudDialogflowCxV3beta1Experiment.StateEnum} state
 */
GoogleCloudDialogflowCxV3beta1Experiment.prototype['state'] = undefined;

/**
 * The history of updates to the experiment variants.
 * @member {Array.<module:model/GoogleCloudDialogflowCxV3beta1VariantsHistory>} variantsHistory
 */
GoogleCloudDialogflowCxV3beta1Experiment.prototype['variantsHistory'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDialogflowCxV3beta1Experiment['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "DRAFT"
     * @const
     */
    "DRAFT": "DRAFT",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "DONE"
     * @const
     */
    "DONE": "DONE",

    /**
     * value: "ROLLOUT_FAILED"
     * @const
     */
    "ROLLOUT_FAILED": "ROLLOUT_FAILED"
};



export default GoogleCloudDialogflowCxV3beta1Experiment;

