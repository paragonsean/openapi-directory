# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDialogflowCxV3beta1NluSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, classification_threshold: float=None, model_training_mode: str=None, model_type: str=None):
        """GoogleCloudDialogflowCxV3beta1NluSettings - a model defined in OpenAPI

        :param classification_threshold: The classification_threshold of this GoogleCloudDialogflowCxV3beta1NluSettings.
        :param model_training_mode: The model_training_mode of this GoogleCloudDialogflowCxV3beta1NluSettings.
        :param model_type: The model_type of this GoogleCloudDialogflowCxV3beta1NluSettings.
        """
        self.openapi_types = {
            'classification_threshold': float,
            'model_training_mode': str,
            'model_type': str
        }

        self.attribute_map = {
            'classification_threshold': 'classificationThreshold',
            'model_training_mode': 'modelTrainingMode',
            'model_type': 'modelType'
        }

        self._classification_threshold = classification_threshold
        self._model_training_mode = model_training_mode
        self._model_type = model_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowCxV3beta1NluSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowCxV3beta1NluSettings of this GoogleCloudDialogflowCxV3beta1NluSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def classification_threshold(self):
        """Gets the classification_threshold of this GoogleCloudDialogflowCxV3beta1NluSettings.

        To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold. If the returned score value is less than the threshold value, then a no-match event will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.

        :return: The classification_threshold of this GoogleCloudDialogflowCxV3beta1NluSettings.
        :rtype: float
        """
        return self._classification_threshold

    @classification_threshold.setter
    def classification_threshold(self, classification_threshold):
        """Sets the classification_threshold of this GoogleCloudDialogflowCxV3beta1NluSettings.

        To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold. If the returned score value is less than the threshold value, then a no-match event will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.

        :param classification_threshold: The classification_threshold of this GoogleCloudDialogflowCxV3beta1NluSettings.
        :type classification_threshold: float
        """

        self._classification_threshold = classification_threshold

    @property
    def model_training_mode(self):
        """Gets the model_training_mode of this GoogleCloudDialogflowCxV3beta1NluSettings.

        Indicates NLU model training mode.

        :return: The model_training_mode of this GoogleCloudDialogflowCxV3beta1NluSettings.
        :rtype: str
        """
        return self._model_training_mode

    @model_training_mode.setter
    def model_training_mode(self, model_training_mode):
        """Sets the model_training_mode of this GoogleCloudDialogflowCxV3beta1NluSettings.

        Indicates NLU model training mode.

        :param model_training_mode: The model_training_mode of this GoogleCloudDialogflowCxV3beta1NluSettings.
        :type model_training_mode: str
        """
        allowed_values = ["MODEL_TRAINING_MODE_UNSPECIFIED", "MODEL_TRAINING_MODE_AUTOMATIC", "MODEL_TRAINING_MODE_MANUAL"]  # noqa: E501
        if model_training_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `model_training_mode` ({0}), must be one of {1}"
                .format(model_training_mode, allowed_values)
            )

        self._model_training_mode = model_training_mode

    @property
    def model_type(self):
        """Gets the model_type of this GoogleCloudDialogflowCxV3beta1NluSettings.

        Indicates the type of NLU model.

        :return: The model_type of this GoogleCloudDialogflowCxV3beta1NluSettings.
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this GoogleCloudDialogflowCxV3beta1NluSettings.

        Indicates the type of NLU model.

        :param model_type: The model_type of this GoogleCloudDialogflowCxV3beta1NluSettings.
        :type model_type: str
        """
        allowed_values = ["MODEL_TYPE_UNSPECIFIED", "MODEL_TYPE_STANDARD", "MODEL_TYPE_ADVANCED"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"
                .format(model_type, allowed_values)
            )

        self._model_type = model_type
