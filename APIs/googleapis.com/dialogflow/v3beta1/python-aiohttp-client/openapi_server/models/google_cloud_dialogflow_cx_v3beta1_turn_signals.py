# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDialogflowCxV3beta1TurnSignals(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_escalated: bool=None, dtmf_used: bool=None, failure_reasons: List[str]=None, no_match: bool=None, no_user_input: bool=None, reached_end_page: bool=None, sentiment_magnitude: float=None, sentiment_score: float=None, user_escalated: bool=None, webhook_statuses: List[str]=None):
        """GoogleCloudDialogflowCxV3beta1TurnSignals - a model defined in OpenAPI

        :param agent_escalated: The agent_escalated of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :param dtmf_used: The dtmf_used of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :param failure_reasons: The failure_reasons of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :param no_match: The no_match of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :param no_user_input: The no_user_input of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :param reached_end_page: The reached_end_page of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :param sentiment_magnitude: The sentiment_magnitude of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :param sentiment_score: The sentiment_score of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :param user_escalated: The user_escalated of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :param webhook_statuses: The webhook_statuses of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        """
        self.openapi_types = {
            'agent_escalated': bool,
            'dtmf_used': bool,
            'failure_reasons': List[str],
            'no_match': bool,
            'no_user_input': bool,
            'reached_end_page': bool,
            'sentiment_magnitude': float,
            'sentiment_score': float,
            'user_escalated': bool,
            'webhook_statuses': List[str]
        }

        self.attribute_map = {
            'agent_escalated': 'agentEscalated',
            'dtmf_used': 'dtmfUsed',
            'failure_reasons': 'failureReasons',
            'no_match': 'noMatch',
            'no_user_input': 'noUserInput',
            'reached_end_page': 'reachedEndPage',
            'sentiment_magnitude': 'sentimentMagnitude',
            'sentiment_score': 'sentimentScore',
            'user_escalated': 'userEscalated',
            'webhook_statuses': 'webhookStatuses'
        }

        self._agent_escalated = agent_escalated
        self._dtmf_used = dtmf_used
        self._failure_reasons = failure_reasons
        self._no_match = no_match
        self._no_user_input = no_user_input
        self._reached_end_page = reached_end_page
        self._sentiment_magnitude = sentiment_magnitude
        self._sentiment_score = sentiment_score
        self._user_escalated = user_escalated
        self._webhook_statuses = webhook_statuses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowCxV3beta1TurnSignals':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowCxV3beta1TurnSignals of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_escalated(self):
        """Gets the agent_escalated of this GoogleCloudDialogflowCxV3beta1TurnSignals.

        Whether agent responded with LiveAgentHandoff fulfillment.

        :return: The agent_escalated of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :rtype: bool
        """
        return self._agent_escalated

    @agent_escalated.setter
    def agent_escalated(self, agent_escalated):
        """Sets the agent_escalated of this GoogleCloudDialogflowCxV3beta1TurnSignals.

        Whether agent responded with LiveAgentHandoff fulfillment.

        :param agent_escalated: The agent_escalated of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :type agent_escalated: bool
        """

        self._agent_escalated = agent_escalated

    @property
    def dtmf_used(self):
        """Gets the dtmf_used of this GoogleCloudDialogflowCxV3beta1TurnSignals.

        Whether user was using DTMF input.

        :return: The dtmf_used of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :rtype: bool
        """
        return self._dtmf_used

    @dtmf_used.setter
    def dtmf_used(self, dtmf_used):
        """Sets the dtmf_used of this GoogleCloudDialogflowCxV3beta1TurnSignals.

        Whether user was using DTMF input.

        :param dtmf_used: The dtmf_used of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :type dtmf_used: bool
        """

        self._dtmf_used = dtmf_used

    @property
    def failure_reasons(self):
        """Gets the failure_reasons of this GoogleCloudDialogflowCxV3beta1TurnSignals.

        Failure reasons of the turn.

        :return: The failure_reasons of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :rtype: List[str]
        """
        return self._failure_reasons

    @failure_reasons.setter
    def failure_reasons(self, failure_reasons):
        """Sets the failure_reasons of this GoogleCloudDialogflowCxV3beta1TurnSignals.

        Failure reasons of the turn.

        :param failure_reasons: The failure_reasons of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :type failure_reasons: List[str]
        """
        allowed_values = ["FAILURE_REASON_UNSPECIFIED", "FAILED_INTENT", "FAILED_WEBHOOK"]  # noqa: E501
        if not set(failure_reasons).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `failure_reasons` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(failure_reasons) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._failure_reasons = failure_reasons

    @property
    def no_match(self):
        """Gets the no_match of this GoogleCloudDialogflowCxV3beta1TurnSignals.

        Whether NLU predicted NO_MATCH.

        :return: The no_match of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :rtype: bool
        """
        return self._no_match

    @no_match.setter
    def no_match(self, no_match):
        """Sets the no_match of this GoogleCloudDialogflowCxV3beta1TurnSignals.

        Whether NLU predicted NO_MATCH.

        :param no_match: The no_match of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :type no_match: bool
        """

        self._no_match = no_match

    @property
    def no_user_input(self):
        """Gets the no_user_input of this GoogleCloudDialogflowCxV3beta1TurnSignals.

        Whether user provided no input.

        :return: The no_user_input of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :rtype: bool
        """
        return self._no_user_input

    @no_user_input.setter
    def no_user_input(self, no_user_input):
        """Sets the no_user_input of this GoogleCloudDialogflowCxV3beta1TurnSignals.

        Whether user provided no input.

        :param no_user_input: The no_user_input of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :type no_user_input: bool
        """

        self._no_user_input = no_user_input

    @property
    def reached_end_page(self):
        """Gets the reached_end_page of this GoogleCloudDialogflowCxV3beta1TurnSignals.

        Whether turn resulted in End Session page.

        :return: The reached_end_page of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :rtype: bool
        """
        return self._reached_end_page

    @reached_end_page.setter
    def reached_end_page(self, reached_end_page):
        """Sets the reached_end_page of this GoogleCloudDialogflowCxV3beta1TurnSignals.

        Whether turn resulted in End Session page.

        :param reached_end_page: The reached_end_page of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :type reached_end_page: bool
        """

        self._reached_end_page = reached_end_page

    @property
    def sentiment_magnitude(self):
        """Gets the sentiment_magnitude of this GoogleCloudDialogflowCxV3beta1TurnSignals.

        Sentiment magnitude of the user utterance if [sentiment](https://cloud.google.com/dialogflow/cx/docs/concept/sentiment) was enabled.

        :return: The sentiment_magnitude of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :rtype: float
        """
        return self._sentiment_magnitude

    @sentiment_magnitude.setter
    def sentiment_magnitude(self, sentiment_magnitude):
        """Sets the sentiment_magnitude of this GoogleCloudDialogflowCxV3beta1TurnSignals.

        Sentiment magnitude of the user utterance if [sentiment](https://cloud.google.com/dialogflow/cx/docs/concept/sentiment) was enabled.

        :param sentiment_magnitude: The sentiment_magnitude of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :type sentiment_magnitude: float
        """

        self._sentiment_magnitude = sentiment_magnitude

    @property
    def sentiment_score(self):
        """Gets the sentiment_score of this GoogleCloudDialogflowCxV3beta1TurnSignals.

        Sentiment score of the user utterance if [sentiment](https://cloud.google.com/dialogflow/cx/docs/concept/sentiment) was enabled.

        :return: The sentiment_score of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :rtype: float
        """
        return self._sentiment_score

    @sentiment_score.setter
    def sentiment_score(self, sentiment_score):
        """Sets the sentiment_score of this GoogleCloudDialogflowCxV3beta1TurnSignals.

        Sentiment score of the user utterance if [sentiment](https://cloud.google.com/dialogflow/cx/docs/concept/sentiment) was enabled.

        :param sentiment_score: The sentiment_score of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :type sentiment_score: float
        """

        self._sentiment_score = sentiment_score

    @property
    def user_escalated(self):
        """Gets the user_escalated of this GoogleCloudDialogflowCxV3beta1TurnSignals.

        Whether user was specifically asking for a live agent.

        :return: The user_escalated of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :rtype: bool
        """
        return self._user_escalated

    @user_escalated.setter
    def user_escalated(self, user_escalated):
        """Sets the user_escalated of this GoogleCloudDialogflowCxV3beta1TurnSignals.

        Whether user was specifically asking for a live agent.

        :param user_escalated: The user_escalated of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :type user_escalated: bool
        """

        self._user_escalated = user_escalated

    @property
    def webhook_statuses(self):
        """Gets the webhook_statuses of this GoogleCloudDialogflowCxV3beta1TurnSignals.

        Human-readable statuses of the webhooks triggered during this turn.

        :return: The webhook_statuses of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :rtype: List[str]
        """
        return self._webhook_statuses

    @webhook_statuses.setter
    def webhook_statuses(self, webhook_statuses):
        """Sets the webhook_statuses of this GoogleCloudDialogflowCxV3beta1TurnSignals.

        Human-readable statuses of the webhooks triggered during this turn.

        :param webhook_statuses: The webhook_statuses of this GoogleCloudDialogflowCxV3beta1TurnSignals.
        :type webhook_statuses: List[str]
        """

        self._webhook_statuses = webhook_statuses
