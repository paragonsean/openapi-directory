# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDialogflowCxV3beta1BoostSpecConditionBoostSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boost: float=None, condition: str=None):
        """GoogleCloudDialogflowCxV3beta1BoostSpecConditionBoostSpec - a model defined in OpenAPI

        :param boost: The boost of this GoogleCloudDialogflowCxV3beta1BoostSpecConditionBoostSpec.
        :param condition: The condition of this GoogleCloudDialogflowCxV3beta1BoostSpecConditionBoostSpec.
        """
        self.openapi_types = {
            'boost': float,
            'condition': str
        }

        self.attribute_map = {
            'boost': 'boost',
            'condition': 'condition'
        }

        self._boost = boost
        self._condition = condition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowCxV3beta1BoostSpecConditionBoostSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowCxV3beta1BoostSpecConditionBoostSpec of this GoogleCloudDialogflowCxV3beta1BoostSpecConditionBoostSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boost(self):
        """Gets the boost of this GoogleCloudDialogflowCxV3beta1BoostSpecConditionBoostSpec.

        Optional. Strength of the condition boost, which should be in [-1, 1]. Negative boost means demotion. Default is 0.0. Setting to 1.0 gives the document a big promotion. However, it does not necessarily mean that the boosted document will be the top result at all times, nor that other documents will be excluded. Results could still be shown even when none of them matches the condition. And results that are significantly more relevant to the search query can still trump your heavily favored but irrelevant documents. Setting to -1.0 gives the document a big demotion. However, results that are deeply relevant might still be shown. The document will have an upstream battle to get a fairly high ranking, but it is not blocked out completely. Setting to 0.0 means no boost applied. The boosting condition is ignored.

        :return: The boost of this GoogleCloudDialogflowCxV3beta1BoostSpecConditionBoostSpec.
        :rtype: float
        """
        return self._boost

    @boost.setter
    def boost(self, boost):
        """Sets the boost of this GoogleCloudDialogflowCxV3beta1BoostSpecConditionBoostSpec.

        Optional. Strength of the condition boost, which should be in [-1, 1]. Negative boost means demotion. Default is 0.0. Setting to 1.0 gives the document a big promotion. However, it does not necessarily mean that the boosted document will be the top result at all times, nor that other documents will be excluded. Results could still be shown even when none of them matches the condition. And results that are significantly more relevant to the search query can still trump your heavily favored but irrelevant documents. Setting to -1.0 gives the document a big demotion. However, results that are deeply relevant might still be shown. The document will have an upstream battle to get a fairly high ranking, but it is not blocked out completely. Setting to 0.0 means no boost applied. The boosting condition is ignored.

        :param boost: The boost of this GoogleCloudDialogflowCxV3beta1BoostSpecConditionBoostSpec.
        :type boost: float
        """

        self._boost = boost

    @property
    def condition(self):
        """Gets the condition of this GoogleCloudDialogflowCxV3beta1BoostSpecConditionBoostSpec.

        Optional. An expression which specifies a boost condition. The syntax and supported fields are the same as a filter expression. Examples: * To boost documents with document ID \"doc_1\" or \"doc_2\", and color \"Red\" or \"Blue\": * (id: ANY(\"doc_1\", \"doc_2\")) AND (color: ANY(\"Red\",\"Blue\"))

        :return: The condition of this GoogleCloudDialogflowCxV3beta1BoostSpecConditionBoostSpec.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this GoogleCloudDialogflowCxV3beta1BoostSpecConditionBoostSpec.

        Optional. An expression which specifies a boost condition. The syntax and supported fields are the same as a filter expression. Examples: * To boost documents with document ID \"doc_1\" or \"doc_2\", and color \"Red\" or \"Blue\": * (id: ANY(\"doc_1\", \"doc_2\")) AND (color: ANY(\"Red\",\"Blue\"))

        :param condition: The condition of this GoogleCloudDialogflowCxV3beta1BoostSpecConditionBoostSpec.
        :type condition: str
        """

        self._condition = condition
