# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dialogflow_cx_v3beta1_flow_import_strategy import GoogleCloudDialogflowCxV3beta1FlowImportStrategy
from openapi_server import util


class GoogleCloudDialogflowCxV3beta1ImportFlowRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flow_content: str=None, flow_import_strategy: GoogleCloudDialogflowCxV3beta1FlowImportStrategy=None, flow_uri: str=None, import_option: str=None):
        """GoogleCloudDialogflowCxV3beta1ImportFlowRequest - a model defined in OpenAPI

        :param flow_content: The flow_content of this GoogleCloudDialogflowCxV3beta1ImportFlowRequest.
        :param flow_import_strategy: The flow_import_strategy of this GoogleCloudDialogflowCxV3beta1ImportFlowRequest.
        :param flow_uri: The flow_uri of this GoogleCloudDialogflowCxV3beta1ImportFlowRequest.
        :param import_option: The import_option of this GoogleCloudDialogflowCxV3beta1ImportFlowRequest.
        """
        self.openapi_types = {
            'flow_content': str,
            'flow_import_strategy': GoogleCloudDialogflowCxV3beta1FlowImportStrategy,
            'flow_uri': str,
            'import_option': str
        }

        self.attribute_map = {
            'flow_content': 'flowContent',
            'flow_import_strategy': 'flowImportStrategy',
            'flow_uri': 'flowUri',
            'import_option': 'importOption'
        }

        self._flow_content = flow_content
        self._flow_import_strategy = flow_import_strategy
        self._flow_uri = flow_uri
        self._import_option = import_option

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowCxV3beta1ImportFlowRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowCxV3beta1ImportFlowRequest of this GoogleCloudDialogflowCxV3beta1ImportFlowRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flow_content(self):
        """Gets the flow_content of this GoogleCloudDialogflowCxV3beta1ImportFlowRequest.

        Uncompressed raw byte content for flow.

        :return: The flow_content of this GoogleCloudDialogflowCxV3beta1ImportFlowRequest.
        :rtype: str
        """
        return self._flow_content

    @flow_content.setter
    def flow_content(self, flow_content):
        """Sets the flow_content of this GoogleCloudDialogflowCxV3beta1ImportFlowRequest.

        Uncompressed raw byte content for flow.

        :param flow_content: The flow_content of this GoogleCloudDialogflowCxV3beta1ImportFlowRequest.
        :type flow_content: str
        """

        self._flow_content = flow_content

    @property
    def flow_import_strategy(self):
        """Gets the flow_import_strategy of this GoogleCloudDialogflowCxV3beta1ImportFlowRequest.


        :return: The flow_import_strategy of this GoogleCloudDialogflowCxV3beta1ImportFlowRequest.
        :rtype: GoogleCloudDialogflowCxV3beta1FlowImportStrategy
        """
        return self._flow_import_strategy

    @flow_import_strategy.setter
    def flow_import_strategy(self, flow_import_strategy):
        """Sets the flow_import_strategy of this GoogleCloudDialogflowCxV3beta1ImportFlowRequest.


        :param flow_import_strategy: The flow_import_strategy of this GoogleCloudDialogflowCxV3beta1ImportFlowRequest.
        :type flow_import_strategy: GoogleCloudDialogflowCxV3beta1FlowImportStrategy
        """

        self._flow_import_strategy = flow_import_strategy

    @property
    def flow_uri(self):
        """Gets the flow_uri of this GoogleCloudDialogflowCxV3beta1ImportFlowRequest.

        The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to import flow from. The format of this URI must be `gs:///`. Dialogflow performs a read operation for the Cloud Storage object on the caller's behalf, so your request authentication must have read permissions for the object. For more information, see [Dialogflow access control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).

        :return: The flow_uri of this GoogleCloudDialogflowCxV3beta1ImportFlowRequest.
        :rtype: str
        """
        return self._flow_uri

    @flow_uri.setter
    def flow_uri(self, flow_uri):
        """Sets the flow_uri of this GoogleCloudDialogflowCxV3beta1ImportFlowRequest.

        The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to import flow from. The format of this URI must be `gs:///`. Dialogflow performs a read operation for the Cloud Storage object on the caller's behalf, so your request authentication must have read permissions for the object. For more information, see [Dialogflow access control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).

        :param flow_uri: The flow_uri of this GoogleCloudDialogflowCxV3beta1ImportFlowRequest.
        :type flow_uri: str
        """

        self._flow_uri = flow_uri

    @property
    def import_option(self):
        """Gets the import_option of this GoogleCloudDialogflowCxV3beta1ImportFlowRequest.

        Flow import mode. If not specified, `KEEP` is assumed.

        :return: The import_option of this GoogleCloudDialogflowCxV3beta1ImportFlowRequest.
        :rtype: str
        """
        return self._import_option

    @import_option.setter
    def import_option(self, import_option):
        """Sets the import_option of this GoogleCloudDialogflowCxV3beta1ImportFlowRequest.

        Flow import mode. If not specified, `KEEP` is assumed.

        :param import_option: The import_option of this GoogleCloudDialogflowCxV3beta1ImportFlowRequest.
        :type import_option: str
        """
        allowed_values = ["IMPORT_OPTION_UNSPECIFIED", "KEEP", "FALLBACK"]  # noqa: E501
        if import_option not in allowed_values:
            raise ValueError(
                "Invalid value for `import_option` ({0}), must be one of {1}"
                .format(import_option, allowed_values)
            )

        self._import_option = import_option
