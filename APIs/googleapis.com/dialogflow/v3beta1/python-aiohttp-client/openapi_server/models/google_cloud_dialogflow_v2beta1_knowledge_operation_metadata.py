# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dialogflow_v2beta1_export_operation_metadata import GoogleCloudDialogflowV2beta1ExportOperationMetadata
from openapi_server import util


class GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, export_operation_metadata: GoogleCloudDialogflowV2beta1ExportOperationMetadata=None, knowledge_base: str=None, state: str=None):
        """GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata - a model defined in OpenAPI

        :param export_operation_metadata: The export_operation_metadata of this GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata.
        :param knowledge_base: The knowledge_base of this GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata.
        :param state: The state of this GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata.
        """
        self.openapi_types = {
            'export_operation_metadata': GoogleCloudDialogflowV2beta1ExportOperationMetadata,
            'knowledge_base': str,
            'state': str
        }

        self.attribute_map = {
            'export_operation_metadata': 'exportOperationMetadata',
            'knowledge_base': 'knowledgeBase',
            'state': 'state'
        }

        self._export_operation_metadata = export_operation_metadata
        self._knowledge_base = knowledge_base
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata of this GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def export_operation_metadata(self):
        """Gets the export_operation_metadata of this GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata.


        :return: The export_operation_metadata of this GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata.
        :rtype: GoogleCloudDialogflowV2beta1ExportOperationMetadata
        """
        return self._export_operation_metadata

    @export_operation_metadata.setter
    def export_operation_metadata(self, export_operation_metadata):
        """Sets the export_operation_metadata of this GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata.


        :param export_operation_metadata: The export_operation_metadata of this GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata.
        :type export_operation_metadata: GoogleCloudDialogflowV2beta1ExportOperationMetadata
        """

        self._export_operation_metadata = export_operation_metadata

    @property
    def knowledge_base(self):
        """Gets the knowledge_base of this GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata.

        The name of the knowledge base interacted with during the operation.

        :return: The knowledge_base of this GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata.
        :rtype: str
        """
        return self._knowledge_base

    @knowledge_base.setter
    def knowledge_base(self, knowledge_base):
        """Sets the knowledge_base of this GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata.

        The name of the knowledge base interacted with during the operation.

        :param knowledge_base: The knowledge_base of this GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata.
        :type knowledge_base: str
        """

        self._knowledge_base = knowledge_base

    @property
    def state(self):
        """Gets the state of this GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata.

        Required. Output only. The current state of this operation.

        :return: The state of this GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata.

        Required. Output only. The current state of this operation.

        :param state: The state of this GoogleCloudDialogflowV2beta1KnowledgeOperationMetadata.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PENDING", "RUNNING", "DONE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
