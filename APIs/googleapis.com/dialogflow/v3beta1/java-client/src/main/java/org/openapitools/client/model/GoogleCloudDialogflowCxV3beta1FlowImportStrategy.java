/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The flow import strategy used for resource conflict resolution associated with an ImportFlowRequest.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:33.933227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3beta1FlowImportStrategy {
  /**
   * Optional. Global flow import strategy for resource conflict resolution. The import Import strategy for resource conflict resolution, applied globally throughout the flow. It will be applied for all display name conflicts in the imported content. If not specified, &#39;CREATE_NEW&#39; is assumed.
   */
  @JsonAdapter(GlobalImportStrategyEnum.Adapter.class)
  public enum GlobalImportStrategyEnum {
    UNSPECIFIED("IMPORT_STRATEGY_UNSPECIFIED"),
    
    CREATE_NEW("IMPORT_STRATEGY_CREATE_NEW"),
    
    REPLACE("IMPORT_STRATEGY_REPLACE"),
    
    KEEP("IMPORT_STRATEGY_KEEP"),
    
    MERGE("IMPORT_STRATEGY_MERGE"),
    
    THROW_ERROR("IMPORT_STRATEGY_THROW_ERROR");

    private String value;

    GlobalImportStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GlobalImportStrategyEnum fromValue(String value) {
      for (GlobalImportStrategyEnum b : GlobalImportStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GlobalImportStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GlobalImportStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GlobalImportStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GlobalImportStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GlobalImportStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GLOBAL_IMPORT_STRATEGY = "globalImportStrategy";
  @SerializedName(SERIALIZED_NAME_GLOBAL_IMPORT_STRATEGY)
  private GlobalImportStrategyEnum globalImportStrategy;

  public GoogleCloudDialogflowCxV3beta1FlowImportStrategy() {
  }

  public GoogleCloudDialogflowCxV3beta1FlowImportStrategy globalImportStrategy(GlobalImportStrategyEnum globalImportStrategy) {
    this.globalImportStrategy = globalImportStrategy;
    return this;
  }

  /**
   * Optional. Global flow import strategy for resource conflict resolution. The import Import strategy for resource conflict resolution, applied globally throughout the flow. It will be applied for all display name conflicts in the imported content. If not specified, &#39;CREATE_NEW&#39; is assumed.
   * @return globalImportStrategy
   */
  @javax.annotation.Nullable
  public GlobalImportStrategyEnum getGlobalImportStrategy() {
    return globalImportStrategy;
  }

  public void setGlobalImportStrategy(GlobalImportStrategyEnum globalImportStrategy) {
    this.globalImportStrategy = globalImportStrategy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3beta1FlowImportStrategy googleCloudDialogflowCxV3beta1FlowImportStrategy = (GoogleCloudDialogflowCxV3beta1FlowImportStrategy) o;
    return Objects.equals(this.globalImportStrategy, googleCloudDialogflowCxV3beta1FlowImportStrategy.globalImportStrategy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(globalImportStrategy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3beta1FlowImportStrategy {\n");
    sb.append("    globalImportStrategy: ").append(toIndentedString(globalImportStrategy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("globalImportStrategy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3beta1FlowImportStrategy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3beta1FlowImportStrategy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3beta1FlowImportStrategy is not found in the empty JSON string", GoogleCloudDialogflowCxV3beta1FlowImportStrategy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3beta1FlowImportStrategy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3beta1FlowImportStrategy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("globalImportStrategy") != null && !jsonObj.get("globalImportStrategy").isJsonNull()) && !jsonObj.get("globalImportStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `globalImportStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("globalImportStrategy").toString()));
      }
      // validate the optional field `globalImportStrategy`
      if (jsonObj.get("globalImportStrategy") != null && !jsonObj.get("globalImportStrategy").isJsonNull()) {
        GlobalImportStrategyEnum.validateJsonElement(jsonObj.get("globalImportStrategy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3beta1FlowImportStrategy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3beta1FlowImportStrategy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3beta1FlowImportStrategy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3beta1FlowImportStrategy.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3beta1FlowImportStrategy>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3beta1FlowImportStrategy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3beta1FlowImportStrategy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3beta1FlowImportStrategy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3beta1FlowImportStrategy
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3beta1FlowImportStrategy
   */
  public static GoogleCloudDialogflowCxV3beta1FlowImportStrategy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3beta1FlowImportStrategy.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3beta1FlowImportStrategy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

