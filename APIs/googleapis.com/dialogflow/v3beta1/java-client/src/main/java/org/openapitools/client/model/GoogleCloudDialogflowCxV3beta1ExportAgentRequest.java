/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3beta1ExportAgentRequestGitDestination;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request message for Agents.ExportAgent.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:33.933227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3beta1ExportAgentRequest {
  public static final String SERIALIZED_NAME_AGENT_URI = "agentUri";
  @SerializedName(SERIALIZED_NAME_AGENT_URI)
  private String agentUri;

  /**
   * Optional. The data format of the exported agent. If not specified, &#x60;BLOB&#x60; is assumed.
   */
  @JsonAdapter(DataFormatEnum.Adapter.class)
  public enum DataFormatEnum {
    DATA_FORMAT_UNSPECIFIED("DATA_FORMAT_UNSPECIFIED"),
    
    BLOB("BLOB"),
    
    JSON_PACKAGE("JSON_PACKAGE");

    private String value;

    DataFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataFormatEnum fromValue(String value) {
      for (DataFormatEnum b : DataFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_FORMAT = "dataFormat";
  @SerializedName(SERIALIZED_NAME_DATA_FORMAT)
  private DataFormatEnum dataFormat;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private String environment;

  public static final String SERIALIZED_NAME_GIT_DESTINATION = "gitDestination";
  @SerializedName(SERIALIZED_NAME_GIT_DESTINATION)
  private GoogleCloudDialogflowCxV3beta1ExportAgentRequestGitDestination gitDestination;

  public static final String SERIALIZED_NAME_INCLUDE_BIGQUERY_EXPORT_SETTINGS = "includeBigqueryExportSettings";
  @SerializedName(SERIALIZED_NAME_INCLUDE_BIGQUERY_EXPORT_SETTINGS)
  private Boolean includeBigqueryExportSettings;

  public GoogleCloudDialogflowCxV3beta1ExportAgentRequest() {
  }

  public GoogleCloudDialogflowCxV3beta1ExportAgentRequest agentUri(String agentUri) {
    this.agentUri = agentUri;
    return this;
  }

  /**
   * Optional. The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to export the agent to. The format of this URI must be &#x60;gs:///&#x60;. If left unspecified, the serialized agent is returned inline. Dialogflow performs a write operation for the Cloud Storage object on the caller&#39;s behalf, so your request authentication must have write permissions for the object. For more information, see [Dialogflow access control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
   * @return agentUri
   */
  @javax.annotation.Nullable
  public String getAgentUri() {
    return agentUri;
  }

  public void setAgentUri(String agentUri) {
    this.agentUri = agentUri;
  }


  public GoogleCloudDialogflowCxV3beta1ExportAgentRequest dataFormat(DataFormatEnum dataFormat) {
    this.dataFormat = dataFormat;
    return this;
  }

  /**
   * Optional. The data format of the exported agent. If not specified, &#x60;BLOB&#x60; is assumed.
   * @return dataFormat
   */
  @javax.annotation.Nullable
  public DataFormatEnum getDataFormat() {
    return dataFormat;
  }

  public void setDataFormat(DataFormatEnum dataFormat) {
    this.dataFormat = dataFormat;
  }


  public GoogleCloudDialogflowCxV3beta1ExportAgentRequest environment(String environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Optional. Environment name. If not set, draft environment is assumed. Format: &#x60;projects//locations//agents//environments/&#x60;.
   * @return environment
   */
  @javax.annotation.Nullable
  public String getEnvironment() {
    return environment;
  }

  public void setEnvironment(String environment) {
    this.environment = environment;
  }


  public GoogleCloudDialogflowCxV3beta1ExportAgentRequest gitDestination(GoogleCloudDialogflowCxV3beta1ExportAgentRequestGitDestination gitDestination) {
    this.gitDestination = gitDestination;
    return this;
  }

  /**
   * Get gitDestination
   * @return gitDestination
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3beta1ExportAgentRequestGitDestination getGitDestination() {
    return gitDestination;
  }

  public void setGitDestination(GoogleCloudDialogflowCxV3beta1ExportAgentRequestGitDestination gitDestination) {
    this.gitDestination = gitDestination;
  }


  public GoogleCloudDialogflowCxV3beta1ExportAgentRequest includeBigqueryExportSettings(Boolean includeBigqueryExportSettings) {
    this.includeBigqueryExportSettings = includeBigqueryExportSettings;
    return this;
  }

  /**
   * Optional. Whether to include BigQuery Export setting.
   * @return includeBigqueryExportSettings
   */
  @javax.annotation.Nullable
  public Boolean getIncludeBigqueryExportSettings() {
    return includeBigqueryExportSettings;
  }

  public void setIncludeBigqueryExportSettings(Boolean includeBigqueryExportSettings) {
    this.includeBigqueryExportSettings = includeBigqueryExportSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3beta1ExportAgentRequest googleCloudDialogflowCxV3beta1ExportAgentRequest = (GoogleCloudDialogflowCxV3beta1ExportAgentRequest) o;
    return Objects.equals(this.agentUri, googleCloudDialogflowCxV3beta1ExportAgentRequest.agentUri) &&
        Objects.equals(this.dataFormat, googleCloudDialogflowCxV3beta1ExportAgentRequest.dataFormat) &&
        Objects.equals(this.environment, googleCloudDialogflowCxV3beta1ExportAgentRequest.environment) &&
        Objects.equals(this.gitDestination, googleCloudDialogflowCxV3beta1ExportAgentRequest.gitDestination) &&
        Objects.equals(this.includeBigqueryExportSettings, googleCloudDialogflowCxV3beta1ExportAgentRequest.includeBigqueryExportSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentUri, dataFormat, environment, gitDestination, includeBigqueryExportSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3beta1ExportAgentRequest {\n");
    sb.append("    agentUri: ").append(toIndentedString(agentUri)).append("\n");
    sb.append("    dataFormat: ").append(toIndentedString(dataFormat)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    gitDestination: ").append(toIndentedString(gitDestination)).append("\n");
    sb.append("    includeBigqueryExportSettings: ").append(toIndentedString(includeBigqueryExportSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentUri");
    openapiFields.add("dataFormat");
    openapiFields.add("environment");
    openapiFields.add("gitDestination");
    openapiFields.add("includeBigqueryExportSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3beta1ExportAgentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3beta1ExportAgentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3beta1ExportAgentRequest is not found in the empty JSON string", GoogleCloudDialogflowCxV3beta1ExportAgentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3beta1ExportAgentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3beta1ExportAgentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("agentUri") != null && !jsonObj.get("agentUri").isJsonNull()) && !jsonObj.get("agentUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentUri").toString()));
      }
      if ((jsonObj.get("dataFormat") != null && !jsonObj.get("dataFormat").isJsonNull()) && !jsonObj.get("dataFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataFormat").toString()));
      }
      // validate the optional field `dataFormat`
      if (jsonObj.get("dataFormat") != null && !jsonObj.get("dataFormat").isJsonNull()) {
        DataFormatEnum.validateJsonElement(jsonObj.get("dataFormat"));
      }
      if ((jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) && !jsonObj.get("environment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environment").toString()));
      }
      // validate the optional field `gitDestination`
      if (jsonObj.get("gitDestination") != null && !jsonObj.get("gitDestination").isJsonNull()) {
        GoogleCloudDialogflowCxV3beta1ExportAgentRequestGitDestination.validateJsonElement(jsonObj.get("gitDestination"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3beta1ExportAgentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3beta1ExportAgentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3beta1ExportAgentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3beta1ExportAgentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3beta1ExportAgentRequest>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3beta1ExportAgentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3beta1ExportAgentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3beta1ExportAgentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3beta1ExportAgentRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3beta1ExportAgentRequest
   */
  public static GoogleCloudDialogflowCxV3beta1ExportAgentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3beta1ExportAgentRequest.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3beta1ExportAgentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

