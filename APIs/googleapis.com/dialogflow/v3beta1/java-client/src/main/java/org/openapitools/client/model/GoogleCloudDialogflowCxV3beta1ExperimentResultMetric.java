/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3beta1ExperimentResultConfidenceInterval;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metric and corresponding confidence intervals.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:33.933227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3beta1ExperimentResultMetric {
  public static final String SERIALIZED_NAME_CONFIDENCE_INTERVAL = "confidenceInterval";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE_INTERVAL)
  private GoogleCloudDialogflowCxV3beta1ExperimentResultConfidenceInterval confidenceInterval;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Double count;

  /**
   * Count-based metric type. Only one of type or count_type is specified in each Metric.
   */
  @JsonAdapter(CountTypeEnum.Adapter.class)
  public enum CountTypeEnum {
    COUNT_TYPE_UNSPECIFIED("COUNT_TYPE_UNSPECIFIED"),
    
    TOTAL_NO_MATCH_COUNT("TOTAL_NO_MATCH_COUNT"),
    
    TOTAL_TURN_COUNT("TOTAL_TURN_COUNT"),
    
    AVERAGE_TURN_COUNT("AVERAGE_TURN_COUNT");

    private String value;

    CountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CountTypeEnum fromValue(String value) {
      for (CountTypeEnum b : CountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CountTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CountTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COUNT_TYPE = "countType";
  @SerializedName(SERIALIZED_NAME_COUNT_TYPE)
  private CountTypeEnum countType;

  public static final String SERIALIZED_NAME_RATIO = "ratio";
  @SerializedName(SERIALIZED_NAME_RATIO)
  private Double ratio;

  /**
   * Ratio-based metric type. Only one of type or count_type is specified in each Metric.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    METRIC_UNSPECIFIED("METRIC_UNSPECIFIED"),
    
    CONTAINED_SESSION_NO_CALLBACK_RATE("CONTAINED_SESSION_NO_CALLBACK_RATE"),
    
    LIVE_AGENT_HANDOFF_RATE("LIVE_AGENT_HANDOFF_RATE"),
    
    CALLBACK_SESSION_RATE("CALLBACK_SESSION_RATE"),
    
    ABANDONED_SESSION_RATE("ABANDONED_SESSION_RATE"),
    
    SESSION_END_RATE("SESSION_END_RATE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public GoogleCloudDialogflowCxV3beta1ExperimentResultMetric() {
  }

  public GoogleCloudDialogflowCxV3beta1ExperimentResultMetric confidenceInterval(GoogleCloudDialogflowCxV3beta1ExperimentResultConfidenceInterval confidenceInterval) {
    this.confidenceInterval = confidenceInterval;
    return this;
  }

  /**
   * Get confidenceInterval
   * @return confidenceInterval
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3beta1ExperimentResultConfidenceInterval getConfidenceInterval() {
    return confidenceInterval;
  }

  public void setConfidenceInterval(GoogleCloudDialogflowCxV3beta1ExperimentResultConfidenceInterval confidenceInterval) {
    this.confidenceInterval = confidenceInterval;
  }


  public GoogleCloudDialogflowCxV3beta1ExperimentResultMetric count(Double count) {
    this.count = count;
    return this;
  }

  /**
   * Count value of a metric.
   * @return count
   */
  @javax.annotation.Nullable
  public Double getCount() {
    return count;
  }

  public void setCount(Double count) {
    this.count = count;
  }


  public GoogleCloudDialogflowCxV3beta1ExperimentResultMetric countType(CountTypeEnum countType) {
    this.countType = countType;
    return this;
  }

  /**
   * Count-based metric type. Only one of type or count_type is specified in each Metric.
   * @return countType
   */
  @javax.annotation.Nullable
  public CountTypeEnum getCountType() {
    return countType;
  }

  public void setCountType(CountTypeEnum countType) {
    this.countType = countType;
  }


  public GoogleCloudDialogflowCxV3beta1ExperimentResultMetric ratio(Double ratio) {
    this.ratio = ratio;
    return this;
  }

  /**
   * Ratio value of a metric.
   * @return ratio
   */
  @javax.annotation.Nullable
  public Double getRatio() {
    return ratio;
  }

  public void setRatio(Double ratio) {
    this.ratio = ratio;
  }


  public GoogleCloudDialogflowCxV3beta1ExperimentResultMetric type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Ratio-based metric type. Only one of type or count_type is specified in each Metric.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3beta1ExperimentResultMetric googleCloudDialogflowCxV3beta1ExperimentResultMetric = (GoogleCloudDialogflowCxV3beta1ExperimentResultMetric) o;
    return Objects.equals(this.confidenceInterval, googleCloudDialogflowCxV3beta1ExperimentResultMetric.confidenceInterval) &&
        Objects.equals(this.count, googleCloudDialogflowCxV3beta1ExperimentResultMetric.count) &&
        Objects.equals(this.countType, googleCloudDialogflowCxV3beta1ExperimentResultMetric.countType) &&
        Objects.equals(this.ratio, googleCloudDialogflowCxV3beta1ExperimentResultMetric.ratio) &&
        Objects.equals(this.type, googleCloudDialogflowCxV3beta1ExperimentResultMetric.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confidenceInterval, count, countType, ratio, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3beta1ExperimentResultMetric {\n");
    sb.append("    confidenceInterval: ").append(toIndentedString(confidenceInterval)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    countType: ").append(toIndentedString(countType)).append("\n");
    sb.append("    ratio: ").append(toIndentedString(ratio)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confidenceInterval");
    openapiFields.add("count");
    openapiFields.add("countType");
    openapiFields.add("ratio");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3beta1ExperimentResultMetric
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3beta1ExperimentResultMetric.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3beta1ExperimentResultMetric is not found in the empty JSON string", GoogleCloudDialogflowCxV3beta1ExperimentResultMetric.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3beta1ExperimentResultMetric.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3beta1ExperimentResultMetric` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `confidenceInterval`
      if (jsonObj.get("confidenceInterval") != null && !jsonObj.get("confidenceInterval").isJsonNull()) {
        GoogleCloudDialogflowCxV3beta1ExperimentResultConfidenceInterval.validateJsonElement(jsonObj.get("confidenceInterval"));
      }
      if ((jsonObj.get("countType") != null && !jsonObj.get("countType").isJsonNull()) && !jsonObj.get("countType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countType").toString()));
      }
      // validate the optional field `countType`
      if (jsonObj.get("countType") != null && !jsonObj.get("countType").isJsonNull()) {
        CountTypeEnum.validateJsonElement(jsonObj.get("countType"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3beta1ExperimentResultMetric.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3beta1ExperimentResultMetric' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3beta1ExperimentResultMetric> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3beta1ExperimentResultMetric.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3beta1ExperimentResultMetric>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3beta1ExperimentResultMetric value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3beta1ExperimentResultMetric read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3beta1ExperimentResultMetric given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3beta1ExperimentResultMetric
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3beta1ExperimentResultMetric
   */
  public static GoogleCloudDialogflowCxV3beta1ExperimentResultMetric fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3beta1ExperimentResultMetric.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3beta1ExperimentResultMetric to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

