/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings related to NLU.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:33.933227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3beta1NluSettings {
  public static final String SERIALIZED_NAME_CLASSIFICATION_THRESHOLD = "classificationThreshold";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION_THRESHOLD)
  private Float classificationThreshold;

  /**
   * Indicates NLU model training mode.
   */
  @JsonAdapter(ModelTrainingModeEnum.Adapter.class)
  public enum ModelTrainingModeEnum {
    UNSPECIFIED("MODEL_TRAINING_MODE_UNSPECIFIED"),
    
    AUTOMATIC("MODEL_TRAINING_MODE_AUTOMATIC"),
    
    MANUAL("MODEL_TRAINING_MODE_MANUAL");

    private String value;

    ModelTrainingModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModelTrainingModeEnum fromValue(String value) {
      for (ModelTrainingModeEnum b : ModelTrainingModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModelTrainingModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModelTrainingModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModelTrainingModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModelTrainingModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModelTrainingModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODEL_TRAINING_MODE = "modelTrainingMode";
  @SerializedName(SERIALIZED_NAME_MODEL_TRAINING_MODE)
  private ModelTrainingModeEnum modelTrainingMode;

  /**
   * Indicates the type of NLU model.
   */
  @JsonAdapter(ModelTypeEnum.Adapter.class)
  public enum ModelTypeEnum {
    UNSPECIFIED("MODEL_TYPE_UNSPECIFIED"),
    
    STANDARD("MODEL_TYPE_STANDARD"),
    
    ADVANCED("MODEL_TYPE_ADVANCED");

    private String value;

    ModelTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModelTypeEnum fromValue(String value) {
      for (ModelTypeEnum b : ModelTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModelTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModelTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModelTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModelTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModelTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODEL_TYPE = "modelType";
  @SerializedName(SERIALIZED_NAME_MODEL_TYPE)
  private ModelTypeEnum modelType;

  public GoogleCloudDialogflowCxV3beta1NluSettings() {
  }

  public GoogleCloudDialogflowCxV3beta1NluSettings classificationThreshold(Float classificationThreshold) {
    this.classificationThreshold = classificationThreshold;
    return this;
  }

  /**
   * To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold. If the returned score value is less than the threshold value, then a no-match event will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.
   * @return classificationThreshold
   */
  @javax.annotation.Nullable
  public Float getClassificationThreshold() {
    return classificationThreshold;
  }

  public void setClassificationThreshold(Float classificationThreshold) {
    this.classificationThreshold = classificationThreshold;
  }


  public GoogleCloudDialogflowCxV3beta1NluSettings modelTrainingMode(ModelTrainingModeEnum modelTrainingMode) {
    this.modelTrainingMode = modelTrainingMode;
    return this;
  }

  /**
   * Indicates NLU model training mode.
   * @return modelTrainingMode
   */
  @javax.annotation.Nullable
  public ModelTrainingModeEnum getModelTrainingMode() {
    return modelTrainingMode;
  }

  public void setModelTrainingMode(ModelTrainingModeEnum modelTrainingMode) {
    this.modelTrainingMode = modelTrainingMode;
  }


  public GoogleCloudDialogflowCxV3beta1NluSettings modelType(ModelTypeEnum modelType) {
    this.modelType = modelType;
    return this;
  }

  /**
   * Indicates the type of NLU model.
   * @return modelType
   */
  @javax.annotation.Nullable
  public ModelTypeEnum getModelType() {
    return modelType;
  }

  public void setModelType(ModelTypeEnum modelType) {
    this.modelType = modelType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3beta1NluSettings googleCloudDialogflowCxV3beta1NluSettings = (GoogleCloudDialogflowCxV3beta1NluSettings) o;
    return Objects.equals(this.classificationThreshold, googleCloudDialogflowCxV3beta1NluSettings.classificationThreshold) &&
        Objects.equals(this.modelTrainingMode, googleCloudDialogflowCxV3beta1NluSettings.modelTrainingMode) &&
        Objects.equals(this.modelType, googleCloudDialogflowCxV3beta1NluSettings.modelType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classificationThreshold, modelTrainingMode, modelType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3beta1NluSettings {\n");
    sb.append("    classificationThreshold: ").append(toIndentedString(classificationThreshold)).append("\n");
    sb.append("    modelTrainingMode: ").append(toIndentedString(modelTrainingMode)).append("\n");
    sb.append("    modelType: ").append(toIndentedString(modelType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("classificationThreshold");
    openapiFields.add("modelTrainingMode");
    openapiFields.add("modelType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3beta1NluSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3beta1NluSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3beta1NluSettings is not found in the empty JSON string", GoogleCloudDialogflowCxV3beta1NluSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3beta1NluSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3beta1NluSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("modelTrainingMode") != null && !jsonObj.get("modelTrainingMode").isJsonNull()) && !jsonObj.get("modelTrainingMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelTrainingMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelTrainingMode").toString()));
      }
      // validate the optional field `modelTrainingMode`
      if (jsonObj.get("modelTrainingMode") != null && !jsonObj.get("modelTrainingMode").isJsonNull()) {
        ModelTrainingModeEnum.validateJsonElement(jsonObj.get("modelTrainingMode"));
      }
      if ((jsonObj.get("modelType") != null && !jsonObj.get("modelType").isJsonNull()) && !jsonObj.get("modelType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelType").toString()));
      }
      // validate the optional field `modelType`
      if (jsonObj.get("modelType") != null && !jsonObj.get("modelType").isJsonNull()) {
        ModelTypeEnum.validateJsonElement(jsonObj.get("modelType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3beta1NluSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3beta1NluSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3beta1NluSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3beta1NluSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3beta1NluSettings>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3beta1NluSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3beta1NluSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3beta1NluSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3beta1NluSettings
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3beta1NluSettings
   */
  public static GoogleCloudDialogflowCxV3beta1NluSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3beta1NluSettings.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3beta1NluSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

