/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3ConversationTurn;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3TestCaseResult;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3TestConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a test case.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:33.933227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3TestCase {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_LAST_TEST_RESULT = "lastTestResult";
  @SerializedName(SERIALIZED_NAME_LAST_TEST_RESULT)
  private GoogleCloudDialogflowCxV3TestCaseResult lastTestResult;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEST_CASE_CONVERSATION_TURNS = "testCaseConversationTurns";
  @SerializedName(SERIALIZED_NAME_TEST_CASE_CONVERSATION_TURNS)
  private List<GoogleCloudDialogflowCxV3ConversationTurn> testCaseConversationTurns = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEST_CONFIG = "testConfig";
  @SerializedName(SERIALIZED_NAME_TEST_CONFIG)
  private GoogleCloudDialogflowCxV3TestConfig testConfig;

  public GoogleCloudDialogflowCxV3TestCase() {
  }

  public GoogleCloudDialogflowCxV3TestCase(
     String creationTime
  ) {
    this();
    this.creationTime = creationTime;
  }

  /**
   * Output only. When the test was created.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }



  public GoogleCloudDialogflowCxV3TestCase displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The human-readable name of the test case, unique within the agent. Limit of 200 characters.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudDialogflowCxV3TestCase lastTestResult(GoogleCloudDialogflowCxV3TestCaseResult lastTestResult) {
    this.lastTestResult = lastTestResult;
    return this;
  }

  /**
   * Get lastTestResult
   * @return lastTestResult
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3TestCaseResult getLastTestResult() {
    return lastTestResult;
  }

  public void setLastTestResult(GoogleCloudDialogflowCxV3TestCaseResult lastTestResult) {
    this.lastTestResult = lastTestResult;
  }


  public GoogleCloudDialogflowCxV3TestCase name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The unique identifier of the test case. TestCases.CreateTestCase will populate the name automatically. Otherwise use format: &#x60;projects//locations//agents/ /testCases/&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudDialogflowCxV3TestCase notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Additional freeform notes about the test case. Limit of 400 characters.
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public GoogleCloudDialogflowCxV3TestCase tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public GoogleCloudDialogflowCxV3TestCase addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Tags are short descriptions that users may apply to test cases for organizational and filtering purposes. Each tag should start with \&quot;#\&quot; and has a limit of 30 characters.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public GoogleCloudDialogflowCxV3TestCase testCaseConversationTurns(List<GoogleCloudDialogflowCxV3ConversationTurn> testCaseConversationTurns) {
    this.testCaseConversationTurns = testCaseConversationTurns;
    return this;
  }

  public GoogleCloudDialogflowCxV3TestCase addTestCaseConversationTurnsItem(GoogleCloudDialogflowCxV3ConversationTurn testCaseConversationTurnsItem) {
    if (this.testCaseConversationTurns == null) {
      this.testCaseConversationTurns = new ArrayList<>();
    }
    this.testCaseConversationTurns.add(testCaseConversationTurnsItem);
    return this;
  }

  /**
   * The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
   * @return testCaseConversationTurns
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDialogflowCxV3ConversationTurn> getTestCaseConversationTurns() {
    return testCaseConversationTurns;
  }

  public void setTestCaseConversationTurns(List<GoogleCloudDialogflowCxV3ConversationTurn> testCaseConversationTurns) {
    this.testCaseConversationTurns = testCaseConversationTurns;
  }


  public GoogleCloudDialogflowCxV3TestCase testConfig(GoogleCloudDialogflowCxV3TestConfig testConfig) {
    this.testConfig = testConfig;
    return this;
  }

  /**
   * Get testConfig
   * @return testConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3TestConfig getTestConfig() {
    return testConfig;
  }

  public void setTestConfig(GoogleCloudDialogflowCxV3TestConfig testConfig) {
    this.testConfig = testConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3TestCase googleCloudDialogflowCxV3TestCase = (GoogleCloudDialogflowCxV3TestCase) o;
    return Objects.equals(this.creationTime, googleCloudDialogflowCxV3TestCase.creationTime) &&
        Objects.equals(this.displayName, googleCloudDialogflowCxV3TestCase.displayName) &&
        Objects.equals(this.lastTestResult, googleCloudDialogflowCxV3TestCase.lastTestResult) &&
        Objects.equals(this.name, googleCloudDialogflowCxV3TestCase.name) &&
        Objects.equals(this.notes, googleCloudDialogflowCxV3TestCase.notes) &&
        Objects.equals(this.tags, googleCloudDialogflowCxV3TestCase.tags) &&
        Objects.equals(this.testCaseConversationTurns, googleCloudDialogflowCxV3TestCase.testCaseConversationTurns) &&
        Objects.equals(this.testConfig, googleCloudDialogflowCxV3TestCase.testConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, displayName, lastTestResult, name, notes, tags, testCaseConversationTurns, testConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3TestCase {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    lastTestResult: ").append(toIndentedString(lastTestResult)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    testCaseConversationTurns: ").append(toIndentedString(testCaseConversationTurns)).append("\n");
    sb.append("    testConfig: ").append(toIndentedString(testConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("displayName");
    openapiFields.add("lastTestResult");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("tags");
    openapiFields.add("testCaseConversationTurns");
    openapiFields.add("testConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3TestCase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3TestCase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3TestCase is not found in the empty JSON string", GoogleCloudDialogflowCxV3TestCase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3TestCase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3TestCase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) && !jsonObj.get("creationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationTime").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `lastTestResult`
      if (jsonObj.get("lastTestResult") != null && !jsonObj.get("lastTestResult").isJsonNull()) {
        GoogleCloudDialogflowCxV3TestCaseResult.validateJsonElement(jsonObj.get("lastTestResult"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (jsonObj.get("testCaseConversationTurns") != null && !jsonObj.get("testCaseConversationTurns").isJsonNull()) {
        JsonArray jsonArraytestCaseConversationTurns = jsonObj.getAsJsonArray("testCaseConversationTurns");
        if (jsonArraytestCaseConversationTurns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("testCaseConversationTurns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `testCaseConversationTurns` to be an array in the JSON string but got `%s`", jsonObj.get("testCaseConversationTurns").toString()));
          }

          // validate the optional field `testCaseConversationTurns` (array)
          for (int i = 0; i < jsonArraytestCaseConversationTurns.size(); i++) {
            GoogleCloudDialogflowCxV3ConversationTurn.validateJsonElement(jsonArraytestCaseConversationTurns.get(i));
          };
        }
      }
      // validate the optional field `testConfig`
      if (jsonObj.get("testConfig") != null && !jsonObj.get("testConfig").isJsonNull()) {
        GoogleCloudDialogflowCxV3TestConfig.validateJsonElement(jsonObj.get("testConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3TestCase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3TestCase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3TestCase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3TestCase.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3TestCase>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3TestCase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3TestCase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3TestCase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3TestCase
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3TestCase
   */
  public static GoogleCloudDialogflowCxV3TestCase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3TestCase.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3TestCase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

