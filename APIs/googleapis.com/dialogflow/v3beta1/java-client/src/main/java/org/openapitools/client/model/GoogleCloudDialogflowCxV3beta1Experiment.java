/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3beta1ExperimentDefinition;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3beta1ExperimentResult;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3beta1RolloutConfig;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3beta1RolloutState;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3beta1VariantsHistory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents an experiment in an environment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:33.933227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3beta1Experiment {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DEFINITION = "definition";
  @SerializedName(SERIALIZED_NAME_DEFINITION)
  private GoogleCloudDialogflowCxV3beta1ExperimentDefinition definition;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_EXPERIMENT_LENGTH = "experimentLength";
  @SerializedName(SERIALIZED_NAME_EXPERIMENT_LENGTH)
  private String experimentLength;

  public static final String SERIALIZED_NAME_LAST_UPDATE_TIME = "lastUpdateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TIME)
  private String lastUpdateTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private GoogleCloudDialogflowCxV3beta1ExperimentResult result;

  public static final String SERIALIZED_NAME_ROLLOUT_CONFIG = "rolloutConfig";
  @SerializedName(SERIALIZED_NAME_ROLLOUT_CONFIG)
  private GoogleCloudDialogflowCxV3beta1RolloutConfig rolloutConfig;

  public static final String SERIALIZED_NAME_ROLLOUT_FAILURE_REASON = "rolloutFailureReason";
  @SerializedName(SERIALIZED_NAME_ROLLOUT_FAILURE_REASON)
  private String rolloutFailureReason;

  public static final String SERIALIZED_NAME_ROLLOUT_STATE = "rolloutState";
  @SerializedName(SERIALIZED_NAME_ROLLOUT_STATE)
  private GoogleCloudDialogflowCxV3beta1RolloutState rolloutState;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  /**
   * The current state of the experiment. Transition triggered by Experiments.StartExperiment: DRAFT-&gt;RUNNING. Transition triggered by Experiments.CancelExperiment: DRAFT-&gt;DONE or RUNNING-&gt;DONE.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    DRAFT("DRAFT"),
    
    RUNNING("RUNNING"),
    
    DONE("DONE"),
    
    ROLLOUT_FAILED("ROLLOUT_FAILED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_VARIANTS_HISTORY = "variantsHistory";
  @SerializedName(SERIALIZED_NAME_VARIANTS_HISTORY)
  private List<GoogleCloudDialogflowCxV3beta1VariantsHistory> variantsHistory = new ArrayList<>();

  public GoogleCloudDialogflowCxV3beta1Experiment() {
  }

  public GoogleCloudDialogflowCxV3beta1Experiment createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Creation time of this experiment.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public GoogleCloudDialogflowCxV3beta1Experiment definition(GoogleCloudDialogflowCxV3beta1ExperimentDefinition definition) {
    this.definition = definition;
    return this;
  }

  /**
   * Get definition
   * @return definition
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3beta1ExperimentDefinition getDefinition() {
    return definition;
  }

  public void setDefinition(GoogleCloudDialogflowCxV3beta1ExperimentDefinition definition) {
    this.definition = definition;
  }


  public GoogleCloudDialogflowCxV3beta1Experiment description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The human-readable description of the experiment.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleCloudDialogflowCxV3beta1Experiment displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The human-readable name of the experiment (unique in an environment). Limit of 64 characters.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudDialogflowCxV3beta1Experiment endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * End time of this experiment.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public GoogleCloudDialogflowCxV3beta1Experiment experimentLength(String experimentLength) {
    this.experimentLength = experimentLength;
    return this;
  }

  /**
   * Maximum number of days to run the experiment. If auto-rollout is not enabled, default value and maximum will be 30 days. If auto-rollout is enabled, default value and maximum will be 6 days.
   * @return experimentLength
   */
  @javax.annotation.Nullable
  public String getExperimentLength() {
    return experimentLength;
  }

  public void setExperimentLength(String experimentLength) {
    this.experimentLength = experimentLength;
  }


  public GoogleCloudDialogflowCxV3beta1Experiment lastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  /**
   * Last update time of this experiment.
   * @return lastUpdateTime
   */
  @javax.annotation.Nullable
  public String getLastUpdateTime() {
    return lastUpdateTime;
  }

  public void setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
  }


  public GoogleCloudDialogflowCxV3beta1Experiment name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the experiment. Format: projects//locations//agents//environments//experiments/..
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudDialogflowCxV3beta1Experiment result(GoogleCloudDialogflowCxV3beta1ExperimentResult result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3beta1ExperimentResult getResult() {
    return result;
  }

  public void setResult(GoogleCloudDialogflowCxV3beta1ExperimentResult result) {
    this.result = result;
  }


  public GoogleCloudDialogflowCxV3beta1Experiment rolloutConfig(GoogleCloudDialogflowCxV3beta1RolloutConfig rolloutConfig) {
    this.rolloutConfig = rolloutConfig;
    return this;
  }

  /**
   * Get rolloutConfig
   * @return rolloutConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3beta1RolloutConfig getRolloutConfig() {
    return rolloutConfig;
  }

  public void setRolloutConfig(GoogleCloudDialogflowCxV3beta1RolloutConfig rolloutConfig) {
    this.rolloutConfig = rolloutConfig;
  }


  public GoogleCloudDialogflowCxV3beta1Experiment rolloutFailureReason(String rolloutFailureReason) {
    this.rolloutFailureReason = rolloutFailureReason;
    return this;
  }

  /**
   * The reason why rollout has failed. Should only be set when state is ROLLOUT_FAILED.
   * @return rolloutFailureReason
   */
  @javax.annotation.Nullable
  public String getRolloutFailureReason() {
    return rolloutFailureReason;
  }

  public void setRolloutFailureReason(String rolloutFailureReason) {
    this.rolloutFailureReason = rolloutFailureReason;
  }


  public GoogleCloudDialogflowCxV3beta1Experiment rolloutState(GoogleCloudDialogflowCxV3beta1RolloutState rolloutState) {
    this.rolloutState = rolloutState;
    return this;
  }

  /**
   * Get rolloutState
   * @return rolloutState
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3beta1RolloutState getRolloutState() {
    return rolloutState;
  }

  public void setRolloutState(GoogleCloudDialogflowCxV3beta1RolloutState rolloutState) {
    this.rolloutState = rolloutState;
  }


  public GoogleCloudDialogflowCxV3beta1Experiment startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Start time of this experiment.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public GoogleCloudDialogflowCxV3beta1Experiment state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The current state of the experiment. Transition triggered by Experiments.StartExperiment: DRAFT-&gt;RUNNING. Transition triggered by Experiments.CancelExperiment: DRAFT-&gt;DONE or RUNNING-&gt;DONE.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public GoogleCloudDialogflowCxV3beta1Experiment variantsHistory(List<GoogleCloudDialogflowCxV3beta1VariantsHistory> variantsHistory) {
    this.variantsHistory = variantsHistory;
    return this;
  }

  public GoogleCloudDialogflowCxV3beta1Experiment addVariantsHistoryItem(GoogleCloudDialogflowCxV3beta1VariantsHistory variantsHistoryItem) {
    if (this.variantsHistory == null) {
      this.variantsHistory = new ArrayList<>();
    }
    this.variantsHistory.add(variantsHistoryItem);
    return this;
  }

  /**
   * The history of updates to the experiment variants.
   * @return variantsHistory
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDialogflowCxV3beta1VariantsHistory> getVariantsHistory() {
    return variantsHistory;
  }

  public void setVariantsHistory(List<GoogleCloudDialogflowCxV3beta1VariantsHistory> variantsHistory) {
    this.variantsHistory = variantsHistory;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3beta1Experiment googleCloudDialogflowCxV3beta1Experiment = (GoogleCloudDialogflowCxV3beta1Experiment) o;
    return Objects.equals(this.createTime, googleCloudDialogflowCxV3beta1Experiment.createTime) &&
        Objects.equals(this.definition, googleCloudDialogflowCxV3beta1Experiment.definition) &&
        Objects.equals(this.description, googleCloudDialogflowCxV3beta1Experiment.description) &&
        Objects.equals(this.displayName, googleCloudDialogflowCxV3beta1Experiment.displayName) &&
        Objects.equals(this.endTime, googleCloudDialogflowCxV3beta1Experiment.endTime) &&
        Objects.equals(this.experimentLength, googleCloudDialogflowCxV3beta1Experiment.experimentLength) &&
        Objects.equals(this.lastUpdateTime, googleCloudDialogflowCxV3beta1Experiment.lastUpdateTime) &&
        Objects.equals(this.name, googleCloudDialogflowCxV3beta1Experiment.name) &&
        Objects.equals(this.result, googleCloudDialogflowCxV3beta1Experiment.result) &&
        Objects.equals(this.rolloutConfig, googleCloudDialogflowCxV3beta1Experiment.rolloutConfig) &&
        Objects.equals(this.rolloutFailureReason, googleCloudDialogflowCxV3beta1Experiment.rolloutFailureReason) &&
        Objects.equals(this.rolloutState, googleCloudDialogflowCxV3beta1Experiment.rolloutState) &&
        Objects.equals(this.startTime, googleCloudDialogflowCxV3beta1Experiment.startTime) &&
        Objects.equals(this.state, googleCloudDialogflowCxV3beta1Experiment.state) &&
        Objects.equals(this.variantsHistory, googleCloudDialogflowCxV3beta1Experiment.variantsHistory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, definition, description, displayName, endTime, experimentLength, lastUpdateTime, name, result, rolloutConfig, rolloutFailureReason, rolloutState, startTime, state, variantsHistory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3beta1Experiment {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    experimentLength: ").append(toIndentedString(experimentLength)).append("\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    rolloutConfig: ").append(toIndentedString(rolloutConfig)).append("\n");
    sb.append("    rolloutFailureReason: ").append(toIndentedString(rolloutFailureReason)).append("\n");
    sb.append("    rolloutState: ").append(toIndentedString(rolloutState)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    variantsHistory: ").append(toIndentedString(variantsHistory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("definition");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("endTime");
    openapiFields.add("experimentLength");
    openapiFields.add("lastUpdateTime");
    openapiFields.add("name");
    openapiFields.add("result");
    openapiFields.add("rolloutConfig");
    openapiFields.add("rolloutFailureReason");
    openapiFields.add("rolloutState");
    openapiFields.add("startTime");
    openapiFields.add("state");
    openapiFields.add("variantsHistory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3beta1Experiment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3beta1Experiment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3beta1Experiment is not found in the empty JSON string", GoogleCloudDialogflowCxV3beta1Experiment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3beta1Experiment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3beta1Experiment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `definition`
      if (jsonObj.get("definition") != null && !jsonObj.get("definition").isJsonNull()) {
        GoogleCloudDialogflowCxV3beta1ExperimentDefinition.validateJsonElement(jsonObj.get("definition"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("experimentLength") != null && !jsonObj.get("experimentLength").isJsonNull()) && !jsonObj.get("experimentLength").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `experimentLength` to be a primitive type in the JSON string but got `%s`", jsonObj.get("experimentLength").toString()));
      }
      if ((jsonObj.get("lastUpdateTime") != null && !jsonObj.get("lastUpdateTime").isJsonNull()) && !jsonObj.get("lastUpdateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdateTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        GoogleCloudDialogflowCxV3beta1ExperimentResult.validateJsonElement(jsonObj.get("result"));
      }
      // validate the optional field `rolloutConfig`
      if (jsonObj.get("rolloutConfig") != null && !jsonObj.get("rolloutConfig").isJsonNull()) {
        GoogleCloudDialogflowCxV3beta1RolloutConfig.validateJsonElement(jsonObj.get("rolloutConfig"));
      }
      if ((jsonObj.get("rolloutFailureReason") != null && !jsonObj.get("rolloutFailureReason").isJsonNull()) && !jsonObj.get("rolloutFailureReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rolloutFailureReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rolloutFailureReason").toString()));
      }
      // validate the optional field `rolloutState`
      if (jsonObj.get("rolloutState") != null && !jsonObj.get("rolloutState").isJsonNull()) {
        GoogleCloudDialogflowCxV3beta1RolloutState.validateJsonElement(jsonObj.get("rolloutState"));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if (jsonObj.get("variantsHistory") != null && !jsonObj.get("variantsHistory").isJsonNull()) {
        JsonArray jsonArrayvariantsHistory = jsonObj.getAsJsonArray("variantsHistory");
        if (jsonArrayvariantsHistory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("variantsHistory").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `variantsHistory` to be an array in the JSON string but got `%s`", jsonObj.get("variantsHistory").toString()));
          }

          // validate the optional field `variantsHistory` (array)
          for (int i = 0; i < jsonArrayvariantsHistory.size(); i++) {
            GoogleCloudDialogflowCxV3beta1VariantsHistory.validateJsonElement(jsonArrayvariantsHistory.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3beta1Experiment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3beta1Experiment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3beta1Experiment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3beta1Experiment.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3beta1Experiment>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3beta1Experiment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3beta1Experiment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3beta1Experiment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3beta1Experiment
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3beta1Experiment
   */
  public static GoogleCloudDialogflowCxV3beta1Experiment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3beta1Experiment.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3beta1Experiment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

