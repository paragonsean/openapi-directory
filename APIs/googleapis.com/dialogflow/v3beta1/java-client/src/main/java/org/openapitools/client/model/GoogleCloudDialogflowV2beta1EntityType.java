/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDialogflowV2beta1EntityTypeEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Each intent parameter has a type, called the entity type, which dictates exactly how data from an end-user expression is extracted. Dialogflow provides predefined system entities that can match many common types of data. For example, there are system entities for matching dates, times, colors, email addresses, and so on. You can also create your own custom entities for matching custom data. For example, you could define a vegetable entity that can match the types of vegetables available for purchase with a grocery store agent. For more information, see the [Entity guide](https://cloud.google.com/dialogflow/docs/entities-overview).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:33.933227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowV2beta1EntityType {
  /**
   * Optional. Indicates whether the entity type can be automatically expanded.
   */
  @JsonAdapter(AutoExpansionModeEnum.Adapter.class)
  public enum AutoExpansionModeEnum {
    UNSPECIFIED("AUTO_EXPANSION_MODE_UNSPECIFIED"),
    
    DEFAULT("AUTO_EXPANSION_MODE_DEFAULT");

    private String value;

    AutoExpansionModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutoExpansionModeEnum fromValue(String value) {
      for (AutoExpansionModeEnum b : AutoExpansionModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutoExpansionModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutoExpansionModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutoExpansionModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutoExpansionModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AutoExpansionModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTO_EXPANSION_MODE = "autoExpansionMode";
  @SerializedName(SERIALIZED_NAME_AUTO_EXPANSION_MODE)
  private AutoExpansionModeEnum autoExpansionMode;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENABLE_FUZZY_EXTRACTION = "enableFuzzyExtraction";
  @SerializedName(SERIALIZED_NAME_ENABLE_FUZZY_EXTRACTION)
  private Boolean enableFuzzyExtraction;

  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  private List<GoogleCloudDialogflowV2beta1EntityTypeEntity> entities = new ArrayList<>();

  /**
   * Required. Indicates the kind of entity type.
   */
  @JsonAdapter(KindEnum.Adapter.class)
  public enum KindEnum {
    UNSPECIFIED("KIND_UNSPECIFIED"),
    
    MAP("KIND_MAP"),
    
    LIST("KIND_LIST"),
    
    REGEXP("KIND_REGEXP");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KindEnum fromValue(String value) {
      for (KindEnum b : KindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private KindEnum kind;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public GoogleCloudDialogflowV2beta1EntityType() {
  }

  public GoogleCloudDialogflowV2beta1EntityType autoExpansionMode(AutoExpansionModeEnum autoExpansionMode) {
    this.autoExpansionMode = autoExpansionMode;
    return this;
  }

  /**
   * Optional. Indicates whether the entity type can be automatically expanded.
   * @return autoExpansionMode
   */
  @javax.annotation.Nullable
  public AutoExpansionModeEnum getAutoExpansionMode() {
    return autoExpansionMode;
  }

  public void setAutoExpansionMode(AutoExpansionModeEnum autoExpansionMode) {
    this.autoExpansionMode = autoExpansionMode;
  }


  public GoogleCloudDialogflowV2beta1EntityType displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The name of the entity type.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudDialogflowV2beta1EntityType enableFuzzyExtraction(Boolean enableFuzzyExtraction) {
    this.enableFuzzyExtraction = enableFuzzyExtraction;
    return this;
  }

  /**
   * Optional. Enables fuzzy entity extraction during classification.
   * @return enableFuzzyExtraction
   */
  @javax.annotation.Nullable
  public Boolean getEnableFuzzyExtraction() {
    return enableFuzzyExtraction;
  }

  public void setEnableFuzzyExtraction(Boolean enableFuzzyExtraction) {
    this.enableFuzzyExtraction = enableFuzzyExtraction;
  }


  public GoogleCloudDialogflowV2beta1EntityType entities(List<GoogleCloudDialogflowV2beta1EntityTypeEntity> entities) {
    this.entities = entities;
    return this;
  }

  public GoogleCloudDialogflowV2beta1EntityType addEntitiesItem(GoogleCloudDialogflowV2beta1EntityTypeEntity entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

  /**
   * Optional. The collection of entity entries associated with the entity type.
   * @return entities
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDialogflowV2beta1EntityTypeEntity> getEntities() {
    return entities;
  }

  public void setEntities(List<GoogleCloudDialogflowV2beta1EntityTypeEntity> entities) {
    this.entities = entities;
  }


  public GoogleCloudDialogflowV2beta1EntityType kind(KindEnum kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Required. Indicates the kind of entity type.
   * @return kind
   */
  @javax.annotation.Nullable
  public KindEnum getKind() {
    return kind;
  }

  public void setKind(KindEnum kind) {
    this.kind = kind;
  }


  public GoogleCloudDialogflowV2beta1EntityType name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The unique identifier of the entity type. Required for EntityTypes.UpdateEntityType and EntityTypes.BatchUpdateEntityTypes methods. Supported formats: - &#x60;projects//agent/entityTypes/&#x60; - &#x60;projects//locations//agent/entityTypes/&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowV2beta1EntityType googleCloudDialogflowV2beta1EntityType = (GoogleCloudDialogflowV2beta1EntityType) o;
    return Objects.equals(this.autoExpansionMode, googleCloudDialogflowV2beta1EntityType.autoExpansionMode) &&
        Objects.equals(this.displayName, googleCloudDialogflowV2beta1EntityType.displayName) &&
        Objects.equals(this.enableFuzzyExtraction, googleCloudDialogflowV2beta1EntityType.enableFuzzyExtraction) &&
        Objects.equals(this.entities, googleCloudDialogflowV2beta1EntityType.entities) &&
        Objects.equals(this.kind, googleCloudDialogflowV2beta1EntityType.kind) &&
        Objects.equals(this.name, googleCloudDialogflowV2beta1EntityType.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoExpansionMode, displayName, enableFuzzyExtraction, entities, kind, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowV2beta1EntityType {\n");
    sb.append("    autoExpansionMode: ").append(toIndentedString(autoExpansionMode)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    enableFuzzyExtraction: ").append(toIndentedString(enableFuzzyExtraction)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoExpansionMode");
    openapiFields.add("displayName");
    openapiFields.add("enableFuzzyExtraction");
    openapiFields.add("entities");
    openapiFields.add("kind");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowV2beta1EntityType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowV2beta1EntityType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowV2beta1EntityType is not found in the empty JSON string", GoogleCloudDialogflowV2beta1EntityType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowV2beta1EntityType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowV2beta1EntityType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("autoExpansionMode") != null && !jsonObj.get("autoExpansionMode").isJsonNull()) && !jsonObj.get("autoExpansionMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoExpansionMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoExpansionMode").toString()));
      }
      // validate the optional field `autoExpansionMode`
      if (jsonObj.get("autoExpansionMode") != null && !jsonObj.get("autoExpansionMode").isJsonNull()) {
        AutoExpansionModeEnum.validateJsonElement(jsonObj.get("autoExpansionMode"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("entities") != null && !jsonObj.get("entities").isJsonNull()) {
        JsonArray jsonArrayentities = jsonObj.getAsJsonArray("entities");
        if (jsonArrayentities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entities` to be an array in the JSON string but got `%s`", jsonObj.get("entities").toString()));
          }

          // validate the optional field `entities` (array)
          for (int i = 0; i < jsonArrayentities.size(); i++) {
            GoogleCloudDialogflowV2beta1EntityTypeEntity.validateJsonElement(jsonArrayentities.get(i));
          };
        }
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `kind`
      if (jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) {
        KindEnum.validateJsonElement(jsonObj.get("kind"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowV2beta1EntityType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowV2beta1EntityType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowV2beta1EntityType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowV2beta1EntityType.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowV2beta1EntityType>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowV2beta1EntityType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowV2beta1EntityType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowV2beta1EntityType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowV2beta1EntityType
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowV2beta1EntityType
   */
  public static GoogleCloudDialogflowV2beta1EntityType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowV2beta1EntityType.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowV2beta1EntityType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

