/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3beta1InlineSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request message for Intents.ImportIntents.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:33.933227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3beta1ImportIntentsRequest {
  public static final String SERIALIZED_NAME_INTENTS_CONTENT = "intentsContent";
  @SerializedName(SERIALIZED_NAME_INTENTS_CONTENT)
  private GoogleCloudDialogflowCxV3beta1InlineSource intentsContent;

  public static final String SERIALIZED_NAME_INTENTS_URI = "intentsUri";
  @SerializedName(SERIALIZED_NAME_INTENTS_URI)
  private String intentsUri;

  /**
   * Merge option for importing intents. If not specified, &#x60;REJECT&#x60; is assumed.
   */
  @JsonAdapter(MergeOptionEnum.Adapter.class)
  public enum MergeOptionEnum {
    MERGE_OPTION_UNSPECIFIED("MERGE_OPTION_UNSPECIFIED"),
    
    REJECT("REJECT"),
    
    REPLACE("REPLACE"),
    
    MERGE("MERGE"),
    
    RENAME("RENAME"),
    
    REPORT_CONFLICT("REPORT_CONFLICT"),
    
    KEEP("KEEP");

    private String value;

    MergeOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MergeOptionEnum fromValue(String value) {
      for (MergeOptionEnum b : MergeOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MergeOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MergeOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MergeOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MergeOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MergeOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MERGE_OPTION = "mergeOption";
  @SerializedName(SERIALIZED_NAME_MERGE_OPTION)
  private MergeOptionEnum mergeOption;

  public GoogleCloudDialogflowCxV3beta1ImportIntentsRequest() {
  }

  public GoogleCloudDialogflowCxV3beta1ImportIntentsRequest intentsContent(GoogleCloudDialogflowCxV3beta1InlineSource intentsContent) {
    this.intentsContent = intentsContent;
    return this;
  }

  /**
   * Get intentsContent
   * @return intentsContent
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3beta1InlineSource getIntentsContent() {
    return intentsContent;
  }

  public void setIntentsContent(GoogleCloudDialogflowCxV3beta1InlineSource intentsContent) {
    this.intentsContent = intentsContent;
  }


  public GoogleCloudDialogflowCxV3beta1ImportIntentsRequest intentsUri(String intentsUri) {
    this.intentsUri = intentsUri;
    return this;
  }

  /**
   * The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to import intents from. The format of this URI must be &#x60;gs:///&#x60;. Dialogflow performs a read operation for the Cloud Storage object on the caller&#39;s behalf, so your request authentication must have read permissions for the object. For more information, see [Dialogflow access control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
   * @return intentsUri
   */
  @javax.annotation.Nullable
  public String getIntentsUri() {
    return intentsUri;
  }

  public void setIntentsUri(String intentsUri) {
    this.intentsUri = intentsUri;
  }


  public GoogleCloudDialogflowCxV3beta1ImportIntentsRequest mergeOption(MergeOptionEnum mergeOption) {
    this.mergeOption = mergeOption;
    return this;
  }

  /**
   * Merge option for importing intents. If not specified, &#x60;REJECT&#x60; is assumed.
   * @return mergeOption
   */
  @javax.annotation.Nullable
  public MergeOptionEnum getMergeOption() {
    return mergeOption;
  }

  public void setMergeOption(MergeOptionEnum mergeOption) {
    this.mergeOption = mergeOption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3beta1ImportIntentsRequest googleCloudDialogflowCxV3beta1ImportIntentsRequest = (GoogleCloudDialogflowCxV3beta1ImportIntentsRequest) o;
    return Objects.equals(this.intentsContent, googleCloudDialogflowCxV3beta1ImportIntentsRequest.intentsContent) &&
        Objects.equals(this.intentsUri, googleCloudDialogflowCxV3beta1ImportIntentsRequest.intentsUri) &&
        Objects.equals(this.mergeOption, googleCloudDialogflowCxV3beta1ImportIntentsRequest.mergeOption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intentsContent, intentsUri, mergeOption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3beta1ImportIntentsRequest {\n");
    sb.append("    intentsContent: ").append(toIndentedString(intentsContent)).append("\n");
    sb.append("    intentsUri: ").append(toIndentedString(intentsUri)).append("\n");
    sb.append("    mergeOption: ").append(toIndentedString(mergeOption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("intentsContent");
    openapiFields.add("intentsUri");
    openapiFields.add("mergeOption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3beta1ImportIntentsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3beta1ImportIntentsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3beta1ImportIntentsRequest is not found in the empty JSON string", GoogleCloudDialogflowCxV3beta1ImportIntentsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3beta1ImportIntentsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3beta1ImportIntentsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `intentsContent`
      if (jsonObj.get("intentsContent") != null && !jsonObj.get("intentsContent").isJsonNull()) {
        GoogleCloudDialogflowCxV3beta1InlineSource.validateJsonElement(jsonObj.get("intentsContent"));
      }
      if ((jsonObj.get("intentsUri") != null && !jsonObj.get("intentsUri").isJsonNull()) && !jsonObj.get("intentsUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intentsUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intentsUri").toString()));
      }
      if ((jsonObj.get("mergeOption") != null && !jsonObj.get("mergeOption").isJsonNull()) && !jsonObj.get("mergeOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mergeOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mergeOption").toString()));
      }
      // validate the optional field `mergeOption`
      if (jsonObj.get("mergeOption") != null && !jsonObj.get("mergeOption").isJsonNull()) {
        MergeOptionEnum.validateJsonElement(jsonObj.get("mergeOption"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3beta1ImportIntentsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3beta1ImportIntentsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3beta1ImportIntentsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3beta1ImportIntentsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3beta1ImportIntentsRequest>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3beta1ImportIntentsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3beta1ImportIntentsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3beta1ImportIntentsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3beta1ImportIntentsRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3beta1ImportIntentsRequest
   */
  public static GoogleCloudDialogflowCxV3beta1ImportIntentsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3beta1ImportIntentsRequest.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3beta1ImportIntentsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

