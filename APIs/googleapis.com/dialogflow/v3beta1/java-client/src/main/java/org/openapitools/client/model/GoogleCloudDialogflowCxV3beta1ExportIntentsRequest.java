/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request message for Intents.ExportIntents.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:33.933227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3beta1ExportIntentsRequest {
  /**
   * Optional. The data format of the exported intents. If not specified, &#x60;BLOB&#x60; is assumed.
   */
  @JsonAdapter(DataFormatEnum.Adapter.class)
  public enum DataFormatEnum {
    DATA_FORMAT_UNSPECIFIED("DATA_FORMAT_UNSPECIFIED"),
    
    BLOB("BLOB"),
    
    JSON("JSON"),
    
    CSV("CSV");

    private String value;

    DataFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataFormatEnum fromValue(String value) {
      for (DataFormatEnum b : DataFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_FORMAT = "dataFormat";
  @SerializedName(SERIALIZED_NAME_DATA_FORMAT)
  private DataFormatEnum dataFormat;

  public static final String SERIALIZED_NAME_INTENTS = "intents";
  @SerializedName(SERIALIZED_NAME_INTENTS)
  private List<String> intents = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTENTS_CONTENT_INLINE = "intentsContentInline";
  @SerializedName(SERIALIZED_NAME_INTENTS_CONTENT_INLINE)
  private Boolean intentsContentInline;

  public static final String SERIALIZED_NAME_INTENTS_URI = "intentsUri";
  @SerializedName(SERIALIZED_NAME_INTENTS_URI)
  private String intentsUri;

  public GoogleCloudDialogflowCxV3beta1ExportIntentsRequest() {
  }

  public GoogleCloudDialogflowCxV3beta1ExportIntentsRequest dataFormat(DataFormatEnum dataFormat) {
    this.dataFormat = dataFormat;
    return this;
  }

  /**
   * Optional. The data format of the exported intents. If not specified, &#x60;BLOB&#x60; is assumed.
   * @return dataFormat
   */
  @javax.annotation.Nullable
  public DataFormatEnum getDataFormat() {
    return dataFormat;
  }

  public void setDataFormat(DataFormatEnum dataFormat) {
    this.dataFormat = dataFormat;
  }


  public GoogleCloudDialogflowCxV3beta1ExportIntentsRequest intents(List<String> intents) {
    this.intents = intents;
    return this;
  }

  public GoogleCloudDialogflowCxV3beta1ExportIntentsRequest addIntentsItem(String intentsItem) {
    if (this.intents == null) {
      this.intents = new ArrayList<>();
    }
    this.intents.add(intentsItem);
    return this;
  }

  /**
   * Required. The name of the intents to export. Format: &#x60;projects//locations//agents//intents/&#x60;.
   * @return intents
   */
  @javax.annotation.Nullable
  public List<String> getIntents() {
    return intents;
  }

  public void setIntents(List<String> intents) {
    this.intents = intents;
  }


  public GoogleCloudDialogflowCxV3beta1ExportIntentsRequest intentsContentInline(Boolean intentsContentInline) {
    this.intentsContentInline = intentsContentInline;
    return this;
  }

  /**
   * Optional. The option to return the serialized intents inline.
   * @return intentsContentInline
   */
  @javax.annotation.Nullable
  public Boolean getIntentsContentInline() {
    return intentsContentInline;
  }

  public void setIntentsContentInline(Boolean intentsContentInline) {
    this.intentsContentInline = intentsContentInline;
  }


  public GoogleCloudDialogflowCxV3beta1ExportIntentsRequest intentsUri(String intentsUri) {
    this.intentsUri = intentsUri;
    return this;
  }

  /**
   * Optional. The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to export the intents to. The format of this URI must be &#x60;gs:///&#x60;. Dialogflow performs a write operation for the Cloud Storage object on the caller&#39;s behalf, so your request authentication must have write permissions for the object. For more information, see [Dialogflow access control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
   * @return intentsUri
   */
  @javax.annotation.Nullable
  public String getIntentsUri() {
    return intentsUri;
  }

  public void setIntentsUri(String intentsUri) {
    this.intentsUri = intentsUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3beta1ExportIntentsRequest googleCloudDialogflowCxV3beta1ExportIntentsRequest = (GoogleCloudDialogflowCxV3beta1ExportIntentsRequest) o;
    return Objects.equals(this.dataFormat, googleCloudDialogflowCxV3beta1ExportIntentsRequest.dataFormat) &&
        Objects.equals(this.intents, googleCloudDialogflowCxV3beta1ExportIntentsRequest.intents) &&
        Objects.equals(this.intentsContentInline, googleCloudDialogflowCxV3beta1ExportIntentsRequest.intentsContentInline) &&
        Objects.equals(this.intentsUri, googleCloudDialogflowCxV3beta1ExportIntentsRequest.intentsUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataFormat, intents, intentsContentInline, intentsUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3beta1ExportIntentsRequest {\n");
    sb.append("    dataFormat: ").append(toIndentedString(dataFormat)).append("\n");
    sb.append("    intents: ").append(toIndentedString(intents)).append("\n");
    sb.append("    intentsContentInline: ").append(toIndentedString(intentsContentInline)).append("\n");
    sb.append("    intentsUri: ").append(toIndentedString(intentsUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataFormat");
    openapiFields.add("intents");
    openapiFields.add("intentsContentInline");
    openapiFields.add("intentsUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3beta1ExportIntentsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3beta1ExportIntentsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3beta1ExportIntentsRequest is not found in the empty JSON string", GoogleCloudDialogflowCxV3beta1ExportIntentsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3beta1ExportIntentsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3beta1ExportIntentsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataFormat") != null && !jsonObj.get("dataFormat").isJsonNull()) && !jsonObj.get("dataFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataFormat").toString()));
      }
      // validate the optional field `dataFormat`
      if (jsonObj.get("dataFormat") != null && !jsonObj.get("dataFormat").isJsonNull()) {
        DataFormatEnum.validateJsonElement(jsonObj.get("dataFormat"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("intents") != null && !jsonObj.get("intents").isJsonNull() && !jsonObj.get("intents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `intents` to be an array in the JSON string but got `%s`", jsonObj.get("intents").toString()));
      }
      if ((jsonObj.get("intentsUri") != null && !jsonObj.get("intentsUri").isJsonNull()) && !jsonObj.get("intentsUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intentsUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intentsUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3beta1ExportIntentsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3beta1ExportIntentsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3beta1ExportIntentsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3beta1ExportIntentsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3beta1ExportIntentsRequest>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3beta1ExportIntentsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3beta1ExportIntentsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3beta1ExportIntentsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3beta1ExportIntentsRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3beta1ExportIntentsRequest
   */
  public static GoogleCloudDialogflowCxV3beta1ExportIntentsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3beta1ExportIntentsRequest.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3beta1ExportIntentsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

