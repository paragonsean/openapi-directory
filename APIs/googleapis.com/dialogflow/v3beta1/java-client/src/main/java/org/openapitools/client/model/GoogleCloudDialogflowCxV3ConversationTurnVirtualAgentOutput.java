/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3Intent;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3Page;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3ResponseMessageText;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3TestRunDifference;
import org.openapitools.client.model.GoogleRpcStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The output from the virtual agent.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:33.933227-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput {
  public static final String SERIALIZED_NAME_CURRENT_PAGE = "currentPage";
  @SerializedName(SERIALIZED_NAME_CURRENT_PAGE)
  private GoogleCloudDialogflowCxV3Page currentPage;

  public static final String SERIALIZED_NAME_DIAGNOSTIC_INFO = "diagnosticInfo";
  @SerializedName(SERIALIZED_NAME_DIAGNOSTIC_INFO)
  private Map<String, Object> diagnosticInfo = new HashMap<>();

  public static final String SERIALIZED_NAME_DIFFERENCES = "differences";
  @SerializedName(SERIALIZED_NAME_DIFFERENCES)
  private List<GoogleCloudDialogflowCxV3TestRunDifference> differences = new ArrayList<>();

  public static final String SERIALIZED_NAME_SESSION_PARAMETERS = "sessionParameters";
  @SerializedName(SERIALIZED_NAME_SESSION_PARAMETERS)
  private Map<String, Object> sessionParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private GoogleRpcStatus status;

  public static final String SERIALIZED_NAME_TEXT_RESPONSES = "textResponses";
  @SerializedName(SERIALIZED_NAME_TEXT_RESPONSES)
  private List<GoogleCloudDialogflowCxV3ResponseMessageText> textResponses = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRIGGERED_INTENT = "triggeredIntent";
  @SerializedName(SERIALIZED_NAME_TRIGGERED_INTENT)
  private GoogleCloudDialogflowCxV3Intent triggeredIntent;

  public GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput() {
  }

  public GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput(
     List<GoogleCloudDialogflowCxV3TestRunDifference> differences
  ) {
    this();
    this.differences = differences;
  }

  public GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput currentPage(GoogleCloudDialogflowCxV3Page currentPage) {
    this.currentPage = currentPage;
    return this;
  }

  /**
   * Get currentPage
   * @return currentPage
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3Page getCurrentPage() {
    return currentPage;
  }

  public void setCurrentPage(GoogleCloudDialogflowCxV3Page currentPage) {
    this.currentPage = currentPage;
  }


  public GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput diagnosticInfo(Map<String, Object> diagnosticInfo) {
    this.diagnosticInfo = diagnosticInfo;
    return this;
  }

  public GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput putDiagnosticInfoItem(String key, Object diagnosticInfoItem) {
    if (this.diagnosticInfo == null) {
      this.diagnosticInfo = new HashMap<>();
    }
    this.diagnosticInfo.put(key, diagnosticInfoItem);
    return this;
  }

  /**
   * Required. Input only. The diagnostic info output for the turn. Required to calculate the testing coverage.
   * @return diagnosticInfo
   */
  @javax.annotation.Nullable
  public Map<String, Object> getDiagnosticInfo() {
    return diagnosticInfo;
  }

  public void setDiagnosticInfo(Map<String, Object> diagnosticInfo) {
    this.diagnosticInfo = diagnosticInfo;
  }


  /**
   * Output only. If this is part of a result conversation turn, the list of differences between the original run and the replay for this output, if any.
   * @return differences
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDialogflowCxV3TestRunDifference> getDifferences() {
    return differences;
  }



  public GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput sessionParameters(Map<String, Object> sessionParameters) {
    this.sessionParameters = sessionParameters;
    return this;
  }

  public GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput putSessionParametersItem(String key, Object sessionParametersItem) {
    if (this.sessionParameters == null) {
      this.sessionParameters = new HashMap<>();
    }
    this.sessionParameters.put(key, sessionParametersItem);
    return this;
  }

  /**
   * The session parameters available to the bot at this point.
   * @return sessionParameters
   */
  @javax.annotation.Nullable
  public Map<String, Object> getSessionParameters() {
    return sessionParameters;
  }

  public void setSessionParameters(Map<String, Object> sessionParameters) {
    this.sessionParameters = sessionParameters;
  }


  public GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput status(GoogleRpcStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public GoogleRpcStatus getStatus() {
    return status;
  }

  public void setStatus(GoogleRpcStatus status) {
    this.status = status;
  }


  public GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput textResponses(List<GoogleCloudDialogflowCxV3ResponseMessageText> textResponses) {
    this.textResponses = textResponses;
    return this;
  }

  public GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput addTextResponsesItem(GoogleCloudDialogflowCxV3ResponseMessageText textResponsesItem) {
    if (this.textResponses == null) {
      this.textResponses = new ArrayList<>();
    }
    this.textResponses.add(textResponsesItem);
    return this;
  }

  /**
   * The text responses from the agent for the turn.
   * @return textResponses
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDialogflowCxV3ResponseMessageText> getTextResponses() {
    return textResponses;
  }

  public void setTextResponses(List<GoogleCloudDialogflowCxV3ResponseMessageText> textResponses) {
    this.textResponses = textResponses;
  }


  public GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput triggeredIntent(GoogleCloudDialogflowCxV3Intent triggeredIntent) {
    this.triggeredIntent = triggeredIntent;
    return this;
  }

  /**
   * Get triggeredIntent
   * @return triggeredIntent
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3Intent getTriggeredIntent() {
    return triggeredIntent;
  }

  public void setTriggeredIntent(GoogleCloudDialogflowCxV3Intent triggeredIntent) {
    this.triggeredIntent = triggeredIntent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput googleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput = (GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput) o;
    return Objects.equals(this.currentPage, googleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput.currentPage) &&
        Objects.equals(this.diagnosticInfo, googleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput.diagnosticInfo) &&
        Objects.equals(this.differences, googleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput.differences) &&
        Objects.equals(this.sessionParameters, googleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput.sessionParameters) &&
        Objects.equals(this.status, googleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput.status) &&
        Objects.equals(this.textResponses, googleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput.textResponses) &&
        Objects.equals(this.triggeredIntent, googleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput.triggeredIntent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentPage, diagnosticInfo, differences, sessionParameters, status, textResponses, triggeredIntent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput {\n");
    sb.append("    currentPage: ").append(toIndentedString(currentPage)).append("\n");
    sb.append("    diagnosticInfo: ").append(toIndentedString(diagnosticInfo)).append("\n");
    sb.append("    differences: ").append(toIndentedString(differences)).append("\n");
    sb.append("    sessionParameters: ").append(toIndentedString(sessionParameters)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    textResponses: ").append(toIndentedString(textResponses)).append("\n");
    sb.append("    triggeredIntent: ").append(toIndentedString(triggeredIntent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentPage");
    openapiFields.add("diagnosticInfo");
    openapiFields.add("differences");
    openapiFields.add("sessionParameters");
    openapiFields.add("status");
    openapiFields.add("textResponses");
    openapiFields.add("triggeredIntent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput is not found in the empty JSON string", GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `currentPage`
      if (jsonObj.get("currentPage") != null && !jsonObj.get("currentPage").isJsonNull()) {
        GoogleCloudDialogflowCxV3Page.validateJsonElement(jsonObj.get("currentPage"));
      }
      if (jsonObj.get("differences") != null && !jsonObj.get("differences").isJsonNull()) {
        JsonArray jsonArraydifferences = jsonObj.getAsJsonArray("differences");
        if (jsonArraydifferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("differences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `differences` to be an array in the JSON string but got `%s`", jsonObj.get("differences").toString()));
          }

          // validate the optional field `differences` (array)
          for (int i = 0; i < jsonArraydifferences.size(); i++) {
            GoogleCloudDialogflowCxV3TestRunDifference.validateJsonElement(jsonArraydifferences.get(i));
          };
        }
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        GoogleRpcStatus.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("textResponses") != null && !jsonObj.get("textResponses").isJsonNull()) {
        JsonArray jsonArraytextResponses = jsonObj.getAsJsonArray("textResponses");
        if (jsonArraytextResponses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("textResponses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `textResponses` to be an array in the JSON string but got `%s`", jsonObj.get("textResponses").toString()));
          }

          // validate the optional field `textResponses` (array)
          for (int i = 0; i < jsonArraytextResponses.size(); i++) {
            GoogleCloudDialogflowCxV3ResponseMessageText.validateJsonElement(jsonArraytextResponses.get(i));
          };
        }
      }
      // validate the optional field `triggeredIntent`
      if (jsonObj.get("triggeredIntent") != null && !jsonObj.get("triggeredIntent").isJsonNull()) {
        GoogleCloudDialogflowCxV3Intent.validateJsonElement(jsonObj.get("triggeredIntent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput
   */
  public static GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3ConversationTurnVirtualAgentOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

