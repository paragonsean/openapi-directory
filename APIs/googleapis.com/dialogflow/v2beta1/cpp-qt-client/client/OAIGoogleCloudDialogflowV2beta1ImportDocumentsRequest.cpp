/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::~OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest() {}

void OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::initializeModel() {

    m_document_template_isSet = false;
    m_document_template_isValid = false;

    m_gcs_source_isSet = false;
    m_gcs_source_isValid = false;

    m_import_gcs_custom_metadata_isSet = false;
    m_import_gcs_custom_metadata_isValid = false;
}

void OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::fromJsonObject(QJsonObject json) {

    m_document_template_isValid = ::OpenAPI::fromJsonValue(m_document_template, json[QString("documentTemplate")]);
    m_document_template_isSet = !json[QString("documentTemplate")].isNull() && m_document_template_isValid;

    m_gcs_source_isValid = ::OpenAPI::fromJsonValue(m_gcs_source, json[QString("gcsSource")]);
    m_gcs_source_isSet = !json[QString("gcsSource")].isNull() && m_gcs_source_isValid;

    m_import_gcs_custom_metadata_isValid = ::OpenAPI::fromJsonValue(m_import_gcs_custom_metadata, json[QString("importGcsCustomMetadata")]);
    m_import_gcs_custom_metadata_isSet = !json[QString("importGcsCustomMetadata")].isNull() && m_import_gcs_custom_metadata_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_document_template.isSet()) {
        obj.insert(QString("documentTemplate"), ::OpenAPI::toJsonValue(m_document_template));
    }
    if (m_gcs_source.isSet()) {
        obj.insert(QString("gcsSource"), ::OpenAPI::toJsonValue(m_gcs_source));
    }
    if (m_import_gcs_custom_metadata_isSet) {
        obj.insert(QString("importGcsCustomMetadata"), ::OpenAPI::toJsonValue(m_import_gcs_custom_metadata));
    }
    return obj;
}

OAIGoogleCloudDialogflowV2beta1ImportDocumentTemplate OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::getDocumentTemplate() const {
    return m_document_template;
}
void OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::setDocumentTemplate(const OAIGoogleCloudDialogflowV2beta1ImportDocumentTemplate &document_template) {
    m_document_template = document_template;
    m_document_template_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::is_document_template_Set() const{
    return m_document_template_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::is_document_template_Valid() const{
    return m_document_template_isValid;
}

OAIGoogleCloudDialogflowV2beta1GcsSources OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::getGcsSource() const {
    return m_gcs_source;
}
void OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::setGcsSource(const OAIGoogleCloudDialogflowV2beta1GcsSources &gcs_source) {
    m_gcs_source = gcs_source;
    m_gcs_source_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::is_gcs_source_Set() const{
    return m_gcs_source_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::is_gcs_source_Valid() const{
    return m_gcs_source_isValid;
}

bool OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::isImportGcsCustomMetadata() const {
    return m_import_gcs_custom_metadata;
}
void OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::setImportGcsCustomMetadata(const bool &import_gcs_custom_metadata) {
    m_import_gcs_custom_metadata = import_gcs_custom_metadata;
    m_import_gcs_custom_metadata_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::is_import_gcs_custom_metadata_Set() const{
    return m_import_gcs_custom_metadata_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::is_import_gcs_custom_metadata_Valid() const{
    return m_import_gcs_custom_metadata_isValid;
}

bool OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_gcs_custom_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
