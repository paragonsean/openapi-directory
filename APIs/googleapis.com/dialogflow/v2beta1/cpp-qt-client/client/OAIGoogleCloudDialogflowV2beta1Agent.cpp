/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowV2beta1Agent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowV2beta1Agent::OAIGoogleCloudDialogflowV2beta1Agent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowV2beta1Agent::OAIGoogleCloudDialogflowV2beta1Agent() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowV2beta1Agent::~OAIGoogleCloudDialogflowV2beta1Agent() {}

void OAIGoogleCloudDialogflowV2beta1Agent::initializeModel() {

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_avatar_uri_isSet = false;
    m_avatar_uri_isValid = false;

    m_classification_threshold_isSet = false;
    m_classification_threshold_isValid = false;

    m_default_language_code_isSet = false;
    m_default_language_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_enable_logging_isSet = false;
    m_enable_logging_isValid = false;

    m_match_mode_isSet = false;
    m_match_mode_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_supported_language_codes_isSet = false;
    m_supported_language_codes_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIGoogleCloudDialogflowV2beta1Agent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowV2beta1Agent::fromJsonObject(QJsonObject json) {

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("apiVersion")]);
    m_api_version_isSet = !json[QString("apiVersion")].isNull() && m_api_version_isValid;

    m_avatar_uri_isValid = ::OpenAPI::fromJsonValue(m_avatar_uri, json[QString("avatarUri")]);
    m_avatar_uri_isSet = !json[QString("avatarUri")].isNull() && m_avatar_uri_isValid;

    m_classification_threshold_isValid = ::OpenAPI::fromJsonValue(m_classification_threshold, json[QString("classificationThreshold")]);
    m_classification_threshold_isSet = !json[QString("classificationThreshold")].isNull() && m_classification_threshold_isValid;

    m_default_language_code_isValid = ::OpenAPI::fromJsonValue(m_default_language_code, json[QString("defaultLanguageCode")]);
    m_default_language_code_isSet = !json[QString("defaultLanguageCode")].isNull() && m_default_language_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_enable_logging_isValid = ::OpenAPI::fromJsonValue(m_enable_logging, json[QString("enableLogging")]);
    m_enable_logging_isSet = !json[QString("enableLogging")].isNull() && m_enable_logging_isValid;

    m_match_mode_isValid = ::OpenAPI::fromJsonValue(m_match_mode, json[QString("matchMode")]);
    m_match_mode_isSet = !json[QString("matchMode")].isNull() && m_match_mode_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_supported_language_codes_isValid = ::OpenAPI::fromJsonValue(m_supported_language_codes, json[QString("supportedLanguageCodes")]);
    m_supported_language_codes_isSet = !json[QString("supportedLanguageCodes")].isNull() && m_supported_language_codes_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Agent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowV2beta1Agent::asJsonObject() const {
    QJsonObject obj;
    if (m_api_version_isSet) {
        obj.insert(QString("apiVersion"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_avatar_uri_isSet) {
        obj.insert(QString("avatarUri"), ::OpenAPI::toJsonValue(m_avatar_uri));
    }
    if (m_classification_threshold_isSet) {
        obj.insert(QString("classificationThreshold"), ::OpenAPI::toJsonValue(m_classification_threshold));
    }
    if (m_default_language_code_isSet) {
        obj.insert(QString("defaultLanguageCode"), ::OpenAPI::toJsonValue(m_default_language_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_enable_logging_isSet) {
        obj.insert(QString("enableLogging"), ::OpenAPI::toJsonValue(m_enable_logging));
    }
    if (m_match_mode_isSet) {
        obj.insert(QString("matchMode"), ::OpenAPI::toJsonValue(m_match_mode));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_supported_language_codes.size() > 0) {
        obj.insert(QString("supportedLanguageCodes"), ::OpenAPI::toJsonValue(m_supported_language_codes));
    }
    if (m_tier_isSet) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QString OAIGoogleCloudDialogflowV2beta1Agent::getApiVersion() const {
    return m_api_version;
}
void OAIGoogleCloudDialogflowV2beta1Agent::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Agent::getAvatarUri() const {
    return m_avatar_uri;
}
void OAIGoogleCloudDialogflowV2beta1Agent::setAvatarUri(const QString &avatar_uri) {
    m_avatar_uri = avatar_uri;
    m_avatar_uri_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_avatar_uri_Set() const{
    return m_avatar_uri_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_avatar_uri_Valid() const{
    return m_avatar_uri_isValid;
}

float OAIGoogleCloudDialogflowV2beta1Agent::getClassificationThreshold() const {
    return m_classification_threshold;
}
void OAIGoogleCloudDialogflowV2beta1Agent::setClassificationThreshold(const float &classification_threshold) {
    m_classification_threshold = classification_threshold;
    m_classification_threshold_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_classification_threshold_Set() const{
    return m_classification_threshold_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_classification_threshold_Valid() const{
    return m_classification_threshold_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Agent::getDefaultLanguageCode() const {
    return m_default_language_code;
}
void OAIGoogleCloudDialogflowV2beta1Agent::setDefaultLanguageCode(const QString &default_language_code) {
    m_default_language_code = default_language_code;
    m_default_language_code_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_default_language_code_Set() const{
    return m_default_language_code_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_default_language_code_Valid() const{
    return m_default_language_code_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Agent::getDescription() const {
    return m_description;
}
void OAIGoogleCloudDialogflowV2beta1Agent::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Agent::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudDialogflowV2beta1Agent::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::isEnableLogging() const {
    return m_enable_logging;
}
void OAIGoogleCloudDialogflowV2beta1Agent::setEnableLogging(const bool &enable_logging) {
    m_enable_logging = enable_logging;
    m_enable_logging_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_enable_logging_Set() const{
    return m_enable_logging_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_enable_logging_Valid() const{
    return m_enable_logging_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Agent::getMatchMode() const {
    return m_match_mode;
}
void OAIGoogleCloudDialogflowV2beta1Agent::setMatchMode(const QString &match_mode) {
    m_match_mode = match_mode;
    m_match_mode_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_match_mode_Set() const{
    return m_match_mode_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_match_mode_Valid() const{
    return m_match_mode_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Agent::getParent() const {
    return m_parent;
}
void OAIGoogleCloudDialogflowV2beta1Agent::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_parent_Valid() const{
    return m_parent_isValid;
}

QList<QString> OAIGoogleCloudDialogflowV2beta1Agent::getSupportedLanguageCodes() const {
    return m_supported_language_codes;
}
void OAIGoogleCloudDialogflowV2beta1Agent::setSupportedLanguageCodes(const QList<QString> &supported_language_codes) {
    m_supported_language_codes = supported_language_codes;
    m_supported_language_codes_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_supported_language_codes_Set() const{
    return m_supported_language_codes_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_supported_language_codes_Valid() const{
    return m_supported_language_codes_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Agent::getTier() const {
    return m_tier;
}
void OAIGoogleCloudDialogflowV2beta1Agent::setTier(const QString &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_tier_Valid() const{
    return m_tier_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Agent::getTimeZone() const {
    return m_time_zone;
}
void OAIGoogleCloudDialogflowV2beta1Agent::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_logging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_language_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowV2beta1Agent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
