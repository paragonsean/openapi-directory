/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowV2beta1QueryResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowV2beta1QueryResult::OAIGoogleCloudDialogflowV2beta1QueryResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowV2beta1QueryResult::OAIGoogleCloudDialogflowV2beta1QueryResult() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowV2beta1QueryResult::~OAIGoogleCloudDialogflowV2beta1QueryResult() {}

void OAIGoogleCloudDialogflowV2beta1QueryResult::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_all_required_params_present_isSet = false;
    m_all_required_params_present_isValid = false;

    m_cancels_slot_filling_isSet = false;
    m_cancels_slot_filling_isValid = false;

    m_diagnostic_info_isSet = false;
    m_diagnostic_info_isValid = false;

    m_fulfillment_messages_isSet = false;
    m_fulfillment_messages_isValid = false;

    m_fulfillment_text_isSet = false;
    m_fulfillment_text_isValid = false;

    m_intent_isSet = false;
    m_intent_isValid = false;

    m_intent_detection_confidence_isSet = false;
    m_intent_detection_confidence_isValid = false;

    m_knowledge_answers_isSet = false;
    m_knowledge_answers_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_output_contexts_isSet = false;
    m_output_contexts_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_query_text_isSet = false;
    m_query_text_isValid = false;

    m_sentiment_analysis_result_isSet = false;
    m_sentiment_analysis_result_isValid = false;

    m_speech_recognition_confidence_isSet = false;
    m_speech_recognition_confidence_isValid = false;

    m_webhook_payload_isSet = false;
    m_webhook_payload_isValid = false;

    m_webhook_source_isSet = false;
    m_webhook_source_isValid = false;
}

void OAIGoogleCloudDialogflowV2beta1QueryResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowV2beta1QueryResult::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_all_required_params_present_isValid = ::OpenAPI::fromJsonValue(m_all_required_params_present, json[QString("allRequiredParamsPresent")]);
    m_all_required_params_present_isSet = !json[QString("allRequiredParamsPresent")].isNull() && m_all_required_params_present_isValid;

    m_cancels_slot_filling_isValid = ::OpenAPI::fromJsonValue(m_cancels_slot_filling, json[QString("cancelsSlotFilling")]);
    m_cancels_slot_filling_isSet = !json[QString("cancelsSlotFilling")].isNull() && m_cancels_slot_filling_isValid;

    m_diagnostic_info_isValid = ::OpenAPI::fromJsonValue(m_diagnostic_info, json[QString("diagnosticInfo")]);
    m_diagnostic_info_isSet = !json[QString("diagnosticInfo")].isNull() && m_diagnostic_info_isValid;

    m_fulfillment_messages_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_messages, json[QString("fulfillmentMessages")]);
    m_fulfillment_messages_isSet = !json[QString("fulfillmentMessages")].isNull() && m_fulfillment_messages_isValid;

    m_fulfillment_text_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_text, json[QString("fulfillmentText")]);
    m_fulfillment_text_isSet = !json[QString("fulfillmentText")].isNull() && m_fulfillment_text_isValid;

    m_intent_isValid = ::OpenAPI::fromJsonValue(m_intent, json[QString("intent")]);
    m_intent_isSet = !json[QString("intent")].isNull() && m_intent_isValid;

    m_intent_detection_confidence_isValid = ::OpenAPI::fromJsonValue(m_intent_detection_confidence, json[QString("intentDetectionConfidence")]);
    m_intent_detection_confidence_isSet = !json[QString("intentDetectionConfidence")].isNull() && m_intent_detection_confidence_isValid;

    m_knowledge_answers_isValid = ::OpenAPI::fromJsonValue(m_knowledge_answers, json[QString("knowledgeAnswers")]);
    m_knowledge_answers_isSet = !json[QString("knowledgeAnswers")].isNull() && m_knowledge_answers_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_output_contexts_isValid = ::OpenAPI::fromJsonValue(m_output_contexts, json[QString("outputContexts")]);
    m_output_contexts_isSet = !json[QString("outputContexts")].isNull() && m_output_contexts_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_query_text_isValid = ::OpenAPI::fromJsonValue(m_query_text, json[QString("queryText")]);
    m_query_text_isSet = !json[QString("queryText")].isNull() && m_query_text_isValid;

    m_sentiment_analysis_result_isValid = ::OpenAPI::fromJsonValue(m_sentiment_analysis_result, json[QString("sentimentAnalysisResult")]);
    m_sentiment_analysis_result_isSet = !json[QString("sentimentAnalysisResult")].isNull() && m_sentiment_analysis_result_isValid;

    m_speech_recognition_confidence_isValid = ::OpenAPI::fromJsonValue(m_speech_recognition_confidence, json[QString("speechRecognitionConfidence")]);
    m_speech_recognition_confidence_isSet = !json[QString("speechRecognitionConfidence")].isNull() && m_speech_recognition_confidence_isValid;

    m_webhook_payload_isValid = ::OpenAPI::fromJsonValue(m_webhook_payload, json[QString("webhookPayload")]);
    m_webhook_payload_isSet = !json[QString("webhookPayload")].isNull() && m_webhook_payload_isValid;

    m_webhook_source_isValid = ::OpenAPI::fromJsonValue(m_webhook_source, json[QString("webhookSource")]);
    m_webhook_source_isSet = !json[QString("webhookSource")].isNull() && m_webhook_source_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1QueryResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowV2beta1QueryResult::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_all_required_params_present_isSet) {
        obj.insert(QString("allRequiredParamsPresent"), ::OpenAPI::toJsonValue(m_all_required_params_present));
    }
    if (m_cancels_slot_filling_isSet) {
        obj.insert(QString("cancelsSlotFilling"), ::OpenAPI::toJsonValue(m_cancels_slot_filling));
    }
    if (m_diagnostic_info.size() > 0) {
        obj.insert(QString("diagnosticInfo"), ::OpenAPI::toJsonValue(m_diagnostic_info));
    }
    if (m_fulfillment_messages.size() > 0) {
        obj.insert(QString("fulfillmentMessages"), ::OpenAPI::toJsonValue(m_fulfillment_messages));
    }
    if (m_fulfillment_text_isSet) {
        obj.insert(QString("fulfillmentText"), ::OpenAPI::toJsonValue(m_fulfillment_text));
    }
    if (m_intent.isSet()) {
        obj.insert(QString("intent"), ::OpenAPI::toJsonValue(m_intent));
    }
    if (m_intent_detection_confidence_isSet) {
        obj.insert(QString("intentDetectionConfidence"), ::OpenAPI::toJsonValue(m_intent_detection_confidence));
    }
    if (m_knowledge_answers.isSet()) {
        obj.insert(QString("knowledgeAnswers"), ::OpenAPI::toJsonValue(m_knowledge_answers));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_output_contexts.size() > 0) {
        obj.insert(QString("outputContexts"), ::OpenAPI::toJsonValue(m_output_contexts));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_query_text_isSet) {
        obj.insert(QString("queryText"), ::OpenAPI::toJsonValue(m_query_text));
    }
    if (m_sentiment_analysis_result.isSet()) {
        obj.insert(QString("sentimentAnalysisResult"), ::OpenAPI::toJsonValue(m_sentiment_analysis_result));
    }
    if (m_speech_recognition_confidence_isSet) {
        obj.insert(QString("speechRecognitionConfidence"), ::OpenAPI::toJsonValue(m_speech_recognition_confidence));
    }
    if (m_webhook_payload.size() > 0) {
        obj.insert(QString("webhookPayload"), ::OpenAPI::toJsonValue(m_webhook_payload));
    }
    if (m_webhook_source_isSet) {
        obj.insert(QString("webhookSource"), ::OpenAPI::toJsonValue(m_webhook_source));
    }
    return obj;
}

QString OAIGoogleCloudDialogflowV2beta1QueryResult::getAction() const {
    return m_action;
}
void OAIGoogleCloudDialogflowV2beta1QueryResult::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_action_Set() const{
    return m_action_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_action_Valid() const{
    return m_action_isValid;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::isAllRequiredParamsPresent() const {
    return m_all_required_params_present;
}
void OAIGoogleCloudDialogflowV2beta1QueryResult::setAllRequiredParamsPresent(const bool &all_required_params_present) {
    m_all_required_params_present = all_required_params_present;
    m_all_required_params_present_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_all_required_params_present_Set() const{
    return m_all_required_params_present_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_all_required_params_present_Valid() const{
    return m_all_required_params_present_isValid;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::isCancelsSlotFilling() const {
    return m_cancels_slot_filling;
}
void OAIGoogleCloudDialogflowV2beta1QueryResult::setCancelsSlotFilling(const bool &cancels_slot_filling) {
    m_cancels_slot_filling = cancels_slot_filling;
    m_cancels_slot_filling_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_cancels_slot_filling_Set() const{
    return m_cancels_slot_filling_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_cancels_slot_filling_Valid() const{
    return m_cancels_slot_filling_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudDialogflowV2beta1QueryResult::getDiagnosticInfo() const {
    return m_diagnostic_info;
}
void OAIGoogleCloudDialogflowV2beta1QueryResult::setDiagnosticInfo(const QMap<QString, QJsonValue> &diagnostic_info) {
    m_diagnostic_info = diagnostic_info;
    m_diagnostic_info_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_diagnostic_info_Set() const{
    return m_diagnostic_info_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_diagnostic_info_Valid() const{
    return m_diagnostic_info_isValid;
}

QList<OAIGoogleCloudDialogflowV2beta1IntentMessage> OAIGoogleCloudDialogflowV2beta1QueryResult::getFulfillmentMessages() const {
    return m_fulfillment_messages;
}
void OAIGoogleCloudDialogflowV2beta1QueryResult::setFulfillmentMessages(const QList<OAIGoogleCloudDialogflowV2beta1IntentMessage> &fulfillment_messages) {
    m_fulfillment_messages = fulfillment_messages;
    m_fulfillment_messages_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_fulfillment_messages_Set() const{
    return m_fulfillment_messages_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_fulfillment_messages_Valid() const{
    return m_fulfillment_messages_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1QueryResult::getFulfillmentText() const {
    return m_fulfillment_text;
}
void OAIGoogleCloudDialogflowV2beta1QueryResult::setFulfillmentText(const QString &fulfillment_text) {
    m_fulfillment_text = fulfillment_text;
    m_fulfillment_text_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_fulfillment_text_Set() const{
    return m_fulfillment_text_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_fulfillment_text_Valid() const{
    return m_fulfillment_text_isValid;
}

OAIGoogleCloudDialogflowV2beta1Intent OAIGoogleCloudDialogflowV2beta1QueryResult::getIntent() const {
    return m_intent;
}
void OAIGoogleCloudDialogflowV2beta1QueryResult::setIntent(const OAIGoogleCloudDialogflowV2beta1Intent &intent) {
    m_intent = intent;
    m_intent_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_intent_Set() const{
    return m_intent_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_intent_Valid() const{
    return m_intent_isValid;
}

float OAIGoogleCloudDialogflowV2beta1QueryResult::getIntentDetectionConfidence() const {
    return m_intent_detection_confidence;
}
void OAIGoogleCloudDialogflowV2beta1QueryResult::setIntentDetectionConfidence(const float &intent_detection_confidence) {
    m_intent_detection_confidence = intent_detection_confidence;
    m_intent_detection_confidence_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_intent_detection_confidence_Set() const{
    return m_intent_detection_confidence_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_intent_detection_confidence_Valid() const{
    return m_intent_detection_confidence_isValid;
}

OAIGoogleCloudDialogflowV2beta1KnowledgeAnswers OAIGoogleCloudDialogflowV2beta1QueryResult::getKnowledgeAnswers() const {
    return m_knowledge_answers;
}
void OAIGoogleCloudDialogflowV2beta1QueryResult::setKnowledgeAnswers(const OAIGoogleCloudDialogflowV2beta1KnowledgeAnswers &knowledge_answers) {
    m_knowledge_answers = knowledge_answers;
    m_knowledge_answers_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_knowledge_answers_Set() const{
    return m_knowledge_answers_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_knowledge_answers_Valid() const{
    return m_knowledge_answers_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1QueryResult::getLanguageCode() const {
    return m_language_code;
}
void OAIGoogleCloudDialogflowV2beta1QueryResult::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QList<OAIGoogleCloudDialogflowV2beta1Context> OAIGoogleCloudDialogflowV2beta1QueryResult::getOutputContexts() const {
    return m_output_contexts;
}
void OAIGoogleCloudDialogflowV2beta1QueryResult::setOutputContexts(const QList<OAIGoogleCloudDialogflowV2beta1Context> &output_contexts) {
    m_output_contexts = output_contexts;
    m_output_contexts_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_output_contexts_Set() const{
    return m_output_contexts_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_output_contexts_Valid() const{
    return m_output_contexts_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudDialogflowV2beta1QueryResult::getParameters() const {
    return m_parameters;
}
void OAIGoogleCloudDialogflowV2beta1QueryResult::setParameters(const QMap<QString, QJsonValue> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1QueryResult::getQueryText() const {
    return m_query_text;
}
void OAIGoogleCloudDialogflowV2beta1QueryResult::setQueryText(const QString &query_text) {
    m_query_text = query_text;
    m_query_text_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_query_text_Set() const{
    return m_query_text_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_query_text_Valid() const{
    return m_query_text_isValid;
}

OAIGoogleCloudDialogflowV2beta1SentimentAnalysisResult OAIGoogleCloudDialogflowV2beta1QueryResult::getSentimentAnalysisResult() const {
    return m_sentiment_analysis_result;
}
void OAIGoogleCloudDialogflowV2beta1QueryResult::setSentimentAnalysisResult(const OAIGoogleCloudDialogflowV2beta1SentimentAnalysisResult &sentiment_analysis_result) {
    m_sentiment_analysis_result = sentiment_analysis_result;
    m_sentiment_analysis_result_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_sentiment_analysis_result_Set() const{
    return m_sentiment_analysis_result_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_sentiment_analysis_result_Valid() const{
    return m_sentiment_analysis_result_isValid;
}

float OAIGoogleCloudDialogflowV2beta1QueryResult::getSpeechRecognitionConfidence() const {
    return m_speech_recognition_confidence;
}
void OAIGoogleCloudDialogflowV2beta1QueryResult::setSpeechRecognitionConfidence(const float &speech_recognition_confidence) {
    m_speech_recognition_confidence = speech_recognition_confidence;
    m_speech_recognition_confidence_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_speech_recognition_confidence_Set() const{
    return m_speech_recognition_confidence_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_speech_recognition_confidence_Valid() const{
    return m_speech_recognition_confidence_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudDialogflowV2beta1QueryResult::getWebhookPayload() const {
    return m_webhook_payload;
}
void OAIGoogleCloudDialogflowV2beta1QueryResult::setWebhookPayload(const QMap<QString, QJsonValue> &webhook_payload) {
    m_webhook_payload = webhook_payload;
    m_webhook_payload_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_webhook_payload_Set() const{
    return m_webhook_payload_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_webhook_payload_Valid() const{
    return m_webhook_payload_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1QueryResult::getWebhookSource() const {
    return m_webhook_source;
}
void OAIGoogleCloudDialogflowV2beta1QueryResult::setWebhookSource(const QString &webhook_source) {
    m_webhook_source = webhook_source;
    m_webhook_source_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_webhook_source_Set() const{
    return m_webhook_source_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::is_webhook_source_Valid() const{
    return m_webhook_source_isValid;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_required_params_present_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancels_slot_filling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diagnostic_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillment_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillment_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_detection_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_knowledge_answers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_contexts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_analysis_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_speech_recognition_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_payload.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowV2beta1QueryResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
