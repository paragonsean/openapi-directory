/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::~OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply() {}

void OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::initializeModel() {

    m_allow_cancellation_isSet = false;
    m_allow_cancellation_isValid = false;

    m_automated_agent_reply_type_isSet = false;
    m_automated_agent_reply_type_isValid = false;

    m_cx_current_page_isSet = false;
    m_cx_current_page_isValid = false;

    m_cx_session_parameters_isSet = false;
    m_cx_session_parameters_isValid = false;

    m_detect_intent_response_isSet = false;
    m_detect_intent_response_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_intent_isSet = false;
    m_intent_isValid = false;

    m_match_confidence_isSet = false;
    m_match_confidence_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_response_messages_isSet = false;
    m_response_messages_isValid = false;
}

void OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::fromJsonObject(QJsonObject json) {

    m_allow_cancellation_isValid = ::OpenAPI::fromJsonValue(m_allow_cancellation, json[QString("allowCancellation")]);
    m_allow_cancellation_isSet = !json[QString("allowCancellation")].isNull() && m_allow_cancellation_isValid;

    m_automated_agent_reply_type_isValid = ::OpenAPI::fromJsonValue(m_automated_agent_reply_type, json[QString("automatedAgentReplyType")]);
    m_automated_agent_reply_type_isSet = !json[QString("automatedAgentReplyType")].isNull() && m_automated_agent_reply_type_isValid;

    m_cx_current_page_isValid = ::OpenAPI::fromJsonValue(m_cx_current_page, json[QString("cxCurrentPage")]);
    m_cx_current_page_isSet = !json[QString("cxCurrentPage")].isNull() && m_cx_current_page_isValid;

    m_cx_session_parameters_isValid = ::OpenAPI::fromJsonValue(m_cx_session_parameters, json[QString("cxSessionParameters")]);
    m_cx_session_parameters_isSet = !json[QString("cxSessionParameters")].isNull() && m_cx_session_parameters_isValid;

    m_detect_intent_response_isValid = ::OpenAPI::fromJsonValue(m_detect_intent_response, json[QString("detectIntentResponse")]);
    m_detect_intent_response_isSet = !json[QString("detectIntentResponse")].isNull() && m_detect_intent_response_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_intent_isValid = ::OpenAPI::fromJsonValue(m_intent, json[QString("intent")]);
    m_intent_isSet = !json[QString("intent")].isNull() && m_intent_isValid;

    m_match_confidence_isValid = ::OpenAPI::fromJsonValue(m_match_confidence, json[QString("matchConfidence")]);
    m_match_confidence_isSet = !json[QString("matchConfidence")].isNull() && m_match_confidence_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_response_messages_isValid = ::OpenAPI::fromJsonValue(m_response_messages, json[QString("responseMessages")]);
    m_response_messages_isSet = !json[QString("responseMessages")].isNull() && m_response_messages_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_cancellation_isSet) {
        obj.insert(QString("allowCancellation"), ::OpenAPI::toJsonValue(m_allow_cancellation));
    }
    if (m_automated_agent_reply_type_isSet) {
        obj.insert(QString("automatedAgentReplyType"), ::OpenAPI::toJsonValue(m_automated_agent_reply_type));
    }
    if (m_cx_current_page_isSet) {
        obj.insert(QString("cxCurrentPage"), ::OpenAPI::toJsonValue(m_cx_current_page));
    }
    if (m_cx_session_parameters.size() > 0) {
        obj.insert(QString("cxSessionParameters"), ::OpenAPI::toJsonValue(m_cx_session_parameters));
    }
    if (m_detect_intent_response.isSet()) {
        obj.insert(QString("detectIntentResponse"), ::OpenAPI::toJsonValue(m_detect_intent_response));
    }
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_intent_isSet) {
        obj.insert(QString("intent"), ::OpenAPI::toJsonValue(m_intent));
    }
    if (m_match_confidence_isSet) {
        obj.insert(QString("matchConfidence"), ::OpenAPI::toJsonValue(m_match_confidence));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_response_messages.size() > 0) {
        obj.insert(QString("responseMessages"), ::OpenAPI::toJsonValue(m_response_messages));
    }
    return obj;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::isAllowCancellation() const {
    return m_allow_cancellation;
}
void OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::setAllowCancellation(const bool &allow_cancellation) {
    m_allow_cancellation = allow_cancellation;
    m_allow_cancellation_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::is_allow_cancellation_Set() const{
    return m_allow_cancellation_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::is_allow_cancellation_Valid() const{
    return m_allow_cancellation_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::getAutomatedAgentReplyType() const {
    return m_automated_agent_reply_type;
}
void OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::setAutomatedAgentReplyType(const QString &automated_agent_reply_type) {
    m_automated_agent_reply_type = automated_agent_reply_type;
    m_automated_agent_reply_type_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::is_automated_agent_reply_type_Set() const{
    return m_automated_agent_reply_type_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::is_automated_agent_reply_type_Valid() const{
    return m_automated_agent_reply_type_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::getCxCurrentPage() const {
    return m_cx_current_page;
}
void OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::setCxCurrentPage(const QString &cx_current_page) {
    m_cx_current_page = cx_current_page;
    m_cx_current_page_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::is_cx_current_page_Set() const{
    return m_cx_current_page_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::is_cx_current_page_Valid() const{
    return m_cx_current_page_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::getCxSessionParameters() const {
    return m_cx_session_parameters;
}
void OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::setCxSessionParameters(const QMap<QString, QJsonValue> &cx_session_parameters) {
    m_cx_session_parameters = cx_session_parameters;
    m_cx_session_parameters_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::is_cx_session_parameters_Set() const{
    return m_cx_session_parameters_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::is_cx_session_parameters_Valid() const{
    return m_cx_session_parameters_isValid;
}

OAIGoogleCloudDialogflowV2beta1DetectIntentResponse OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::getDetectIntentResponse() const {
    return m_detect_intent_response;
}
void OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::setDetectIntentResponse(const OAIGoogleCloudDialogflowV2beta1DetectIntentResponse &detect_intent_response) {
    m_detect_intent_response = detect_intent_response;
    m_detect_intent_response_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::is_detect_intent_response_Set() const{
    return m_detect_intent_response_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::is_detect_intent_response_Valid() const{
    return m_detect_intent_response_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::getEvent() const {
    return m_event;
}
void OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::is_event_Set() const{
    return m_event_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::is_event_Valid() const{
    return m_event_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::getIntent() const {
    return m_intent;
}
void OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::setIntent(const QString &intent) {
    m_intent = intent;
    m_intent_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::is_intent_Set() const{
    return m_intent_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::is_intent_Valid() const{
    return m_intent_isValid;
}

float OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::getMatchConfidence() const {
    return m_match_confidence;
}
void OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::setMatchConfidence(const float &match_confidence) {
    m_match_confidence = match_confidence;
    m_match_confidence_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::is_match_confidence_Set() const{
    return m_match_confidence_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::is_match_confidence_Valid() const{
    return m_match_confidence_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::getParameters() const {
    return m_parameters;
}
void OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::setParameters(const QMap<QString, QJsonValue> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QList<OAIGoogleCloudDialogflowV2beta1ResponseMessage> OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::getResponseMessages() const {
    return m_response_messages;
}
void OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::setResponseMessages(const QList<OAIGoogleCloudDialogflowV2beta1ResponseMessage> &response_messages) {
    m_response_messages = response_messages;
    m_response_messages_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::is_response_messages_Set() const{
    return m_response_messages_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::is_response_messages_Valid() const{
    return m_response_messages_isValid;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_cancellation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automated_agent_reply_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cx_current_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cx_session_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detect_intent_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowV2beta1AutomatedAgentReply::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
