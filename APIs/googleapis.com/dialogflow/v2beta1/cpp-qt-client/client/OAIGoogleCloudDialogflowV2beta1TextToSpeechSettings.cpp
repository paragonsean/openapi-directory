/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::~OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings() {}

void OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::initializeModel() {

    m_enable_text_to_speech_isSet = false;
    m_enable_text_to_speech_isValid = false;

    m_output_audio_encoding_isSet = false;
    m_output_audio_encoding_isValid = false;

    m_sample_rate_hertz_isSet = false;
    m_sample_rate_hertz_isValid = false;

    m_synthesize_speech_configs_isSet = false;
    m_synthesize_speech_configs_isValid = false;
}

void OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::fromJsonObject(QJsonObject json) {

    m_enable_text_to_speech_isValid = ::OpenAPI::fromJsonValue(m_enable_text_to_speech, json[QString("enableTextToSpeech")]);
    m_enable_text_to_speech_isSet = !json[QString("enableTextToSpeech")].isNull() && m_enable_text_to_speech_isValid;

    m_output_audio_encoding_isValid = ::OpenAPI::fromJsonValue(m_output_audio_encoding, json[QString("outputAudioEncoding")]);
    m_output_audio_encoding_isSet = !json[QString("outputAudioEncoding")].isNull() && m_output_audio_encoding_isValid;

    m_sample_rate_hertz_isValid = ::OpenAPI::fromJsonValue(m_sample_rate_hertz, json[QString("sampleRateHertz")]);
    m_sample_rate_hertz_isSet = !json[QString("sampleRateHertz")].isNull() && m_sample_rate_hertz_isValid;

    m_synthesize_speech_configs_isValid = ::OpenAPI::fromJsonValue(m_synthesize_speech_configs, json[QString("synthesizeSpeechConfigs")]);
    m_synthesize_speech_configs_isSet = !json[QString("synthesizeSpeechConfigs")].isNull() && m_synthesize_speech_configs_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_text_to_speech_isSet) {
        obj.insert(QString("enableTextToSpeech"), ::OpenAPI::toJsonValue(m_enable_text_to_speech));
    }
    if (m_output_audio_encoding_isSet) {
        obj.insert(QString("outputAudioEncoding"), ::OpenAPI::toJsonValue(m_output_audio_encoding));
    }
    if (m_sample_rate_hertz_isSet) {
        obj.insert(QString("sampleRateHertz"), ::OpenAPI::toJsonValue(m_sample_rate_hertz));
    }
    if (m_synthesize_speech_configs.size() > 0) {
        obj.insert(QString("synthesizeSpeechConfigs"), ::OpenAPI::toJsonValue(m_synthesize_speech_configs));
    }
    return obj;
}

bool OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::isEnableTextToSpeech() const {
    return m_enable_text_to_speech;
}
void OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::setEnableTextToSpeech(const bool &enable_text_to_speech) {
    m_enable_text_to_speech = enable_text_to_speech;
    m_enable_text_to_speech_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::is_enable_text_to_speech_Set() const{
    return m_enable_text_to_speech_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::is_enable_text_to_speech_Valid() const{
    return m_enable_text_to_speech_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::getOutputAudioEncoding() const {
    return m_output_audio_encoding;
}
void OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::setOutputAudioEncoding(const QString &output_audio_encoding) {
    m_output_audio_encoding = output_audio_encoding;
    m_output_audio_encoding_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::is_output_audio_encoding_Set() const{
    return m_output_audio_encoding_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::is_output_audio_encoding_Valid() const{
    return m_output_audio_encoding_isValid;
}

qint32 OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::getSampleRateHertz() const {
    return m_sample_rate_hertz;
}
void OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::setSampleRateHertz(const qint32 &sample_rate_hertz) {
    m_sample_rate_hertz = sample_rate_hertz;
    m_sample_rate_hertz_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::is_sample_rate_hertz_Set() const{
    return m_sample_rate_hertz_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::is_sample_rate_hertz_Valid() const{
    return m_sample_rate_hertz_isValid;
}

QMap<QString, OAIGoogleCloudDialogflowV2beta1SynthesizeSpeechConfig> OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::getSynthesizeSpeechConfigs() const {
    return m_synthesize_speech_configs;
}
void OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::setSynthesizeSpeechConfigs(const QMap<QString, OAIGoogleCloudDialogflowV2beta1SynthesizeSpeechConfig> &synthesize_speech_configs) {
    m_synthesize_speech_configs = synthesize_speech_configs;
    m_synthesize_speech_configs_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::is_synthesize_speech_configs_Set() const{
    return m_synthesize_speech_configs_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::is_synthesize_speech_configs_Valid() const{
    return m_synthesize_speech_configs_isValid;
}

bool OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_text_to_speech_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_audio_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_rate_hertz_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synthesize_speech_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowV2beta1TextToSpeechSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
