/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::~OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput() {}

void OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::initializeModel() {

    m_current_page_isSet = false;
    m_current_page_isValid = false;

    m_diagnostic_info_isSet = false;
    m_diagnostic_info_isValid = false;

    m_differences_isSet = false;
    m_differences_isValid = false;

    m_session_parameters_isSet = false;
    m_session_parameters_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_text_responses_isSet = false;
    m_text_responses_isValid = false;

    m_triggered_intent_isSet = false;
    m_triggered_intent_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::fromJsonObject(QJsonObject json) {

    m_current_page_isValid = ::OpenAPI::fromJsonValue(m_current_page, json[QString("currentPage")]);
    m_current_page_isSet = !json[QString("currentPage")].isNull() && m_current_page_isValid;

    m_diagnostic_info_isValid = ::OpenAPI::fromJsonValue(m_diagnostic_info, json[QString("diagnosticInfo")]);
    m_diagnostic_info_isSet = !json[QString("diagnosticInfo")].isNull() && m_diagnostic_info_isValid;

    m_differences_isValid = ::OpenAPI::fromJsonValue(m_differences, json[QString("differences")]);
    m_differences_isSet = !json[QString("differences")].isNull() && m_differences_isValid;

    m_session_parameters_isValid = ::OpenAPI::fromJsonValue(m_session_parameters, json[QString("sessionParameters")]);
    m_session_parameters_isSet = !json[QString("sessionParameters")].isNull() && m_session_parameters_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_text_responses_isValid = ::OpenAPI::fromJsonValue(m_text_responses, json[QString("textResponses")]);
    m_text_responses_isSet = !json[QString("textResponses")].isNull() && m_text_responses_isValid;

    m_triggered_intent_isValid = ::OpenAPI::fromJsonValue(m_triggered_intent, json[QString("triggeredIntent")]);
    m_triggered_intent_isSet = !json[QString("triggeredIntent")].isNull() && m_triggered_intent_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_current_page.isSet()) {
        obj.insert(QString("currentPage"), ::OpenAPI::toJsonValue(m_current_page));
    }
    if (m_diagnostic_info.size() > 0) {
        obj.insert(QString("diagnosticInfo"), ::OpenAPI::toJsonValue(m_diagnostic_info));
    }
    if (m_differences.size() > 0) {
        obj.insert(QString("differences"), ::OpenAPI::toJsonValue(m_differences));
    }
    if (m_session_parameters.size() > 0) {
        obj.insert(QString("sessionParameters"), ::OpenAPI::toJsonValue(m_session_parameters));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_text_responses.size() > 0) {
        obj.insert(QString("textResponses"), ::OpenAPI::toJsonValue(m_text_responses));
    }
    if (m_triggered_intent.isSet()) {
        obj.insert(QString("triggeredIntent"), ::OpenAPI::toJsonValue(m_triggered_intent));
    }
    return obj;
}

OAIGoogleCloudDialogflowCxV3beta1Page OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::getCurrentPage() const {
    return m_current_page;
}
void OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::setCurrentPage(const OAIGoogleCloudDialogflowCxV3beta1Page &current_page) {
    m_current_page = current_page;
    m_current_page_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::is_current_page_Set() const{
    return m_current_page_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::is_current_page_Valid() const{
    return m_current_page_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::getDiagnosticInfo() const {
    return m_diagnostic_info;
}
void OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::setDiagnosticInfo(const QMap<QString, QJsonValue> &diagnostic_info) {
    m_diagnostic_info = diagnostic_info;
    m_diagnostic_info_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::is_diagnostic_info_Set() const{
    return m_diagnostic_info_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::is_diagnostic_info_Valid() const{
    return m_diagnostic_info_isValid;
}

QList<OAIGoogleCloudDialogflowCxV3beta1TestRunDifference> OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::getDifferences() const {
    return m_differences;
}
void OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::setDifferences(const QList<OAIGoogleCloudDialogflowCxV3beta1TestRunDifference> &differences) {
    m_differences = differences;
    m_differences_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::is_differences_Set() const{
    return m_differences_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::is_differences_Valid() const{
    return m_differences_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::getSessionParameters() const {
    return m_session_parameters;
}
void OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::setSessionParameters(const QMap<QString, QJsonValue> &session_parameters) {
    m_session_parameters = session_parameters;
    m_session_parameters_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::is_session_parameters_Set() const{
    return m_session_parameters_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::is_session_parameters_Valid() const{
    return m_session_parameters_isValid;
}

OAIGoogleRpcStatus OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::getStatus() const {
    return m_status;
}
void OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::setStatus(const OAIGoogleRpcStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIGoogleCloudDialogflowCxV3beta1ResponseMessageText> OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::getTextResponses() const {
    return m_text_responses;
}
void OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::setTextResponses(const QList<OAIGoogleCloudDialogflowCxV3beta1ResponseMessageText> &text_responses) {
    m_text_responses = text_responses;
    m_text_responses_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::is_text_responses_Set() const{
    return m_text_responses_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::is_text_responses_Valid() const{
    return m_text_responses_isValid;
}

OAIGoogleCloudDialogflowCxV3beta1Intent OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::getTriggeredIntent() const {
    return m_triggered_intent;
}
void OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::setTriggeredIntent(const OAIGoogleCloudDialogflowCxV3beta1Intent &triggered_intent) {
    m_triggered_intent = triggered_intent;
    m_triggered_intent_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::is_triggered_intent_Set() const{
    return m_triggered_intent_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::is_triggered_intent_Valid() const{
    return m_triggered_intent_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_page.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_diagnostic_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_differences.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_responses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_triggered_intent.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
