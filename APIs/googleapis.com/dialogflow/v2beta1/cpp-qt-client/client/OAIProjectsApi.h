/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleCloudDialogflowV2beta1Agent.h"
#include "OAIGoogleCloudDialogflowV2beta1AnalyzeContentRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1AnalyzeContentResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1BatchCreateEntitiesRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1BatchCreateMessagesRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1BatchCreateMessagesResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1BatchDeleteEntitiesRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1BatchDeleteEntityTypesRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1BatchDeleteIntentsRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1BatchUpdateEntitiesRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1BatchUpdateEntityTypesRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1BatchUpdateIntentsRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1ClearSuggestionFeatureConfigRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1CompileSuggestionRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1CompileSuggestionResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1Context.h"
#include "OAIGoogleCloudDialogflowV2beta1Conversation.h"
#include "OAIGoogleCloudDialogflowV2beta1ConversationProfile.h"
#include "OAIGoogleCloudDialogflowV2beta1DetectIntentRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1DetectIntentResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1Document.h"
#include "OAIGoogleCloudDialogflowV2beta1Environment.h"
#include "OAIGoogleCloudDialogflowV2beta1EnvironmentHistory.h"
#include "OAIGoogleCloudDialogflowV2beta1ExportAgentRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1GenerateStatelessSummaryRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1GenerateStatelessSummaryResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1ImportAgentRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1Intent.h"
#include "OAIGoogleCloudDialogflowV2beta1KnowledgeBase.h"
#include "OAIGoogleCloudDialogflowV2beta1ListAnswerRecordsResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1ListContextsResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1ListConversationProfilesResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1ListConversationsResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1ListDocumentsResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1ListEnvironmentsResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1ListIntentsResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1ListKnowledgeBasesResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1ListMessagesResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1ListParticipantsResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1ListSessionEntityTypesResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1ListSuggestionsResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1ListVersionsResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1Participant.h"
#include "OAIGoogleCloudDialogflowV2beta1ReloadDocumentRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1RestoreAgentRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1SearchAgentsResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1SearchKnowledgeRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1SearchKnowledgeResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1SessionEntityType.h"
#include "OAIGoogleCloudDialogflowV2beta1SetSuggestionFeatureConfigRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1SuggestArticlesRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1SuggestArticlesResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1SuggestConversationSummaryRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1SuggestConversationSummaryResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1SuggestFaqAnswersRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1SuggestFaqAnswersResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1SuggestSmartRepliesRequest.h"
#include "OAIGoogleCloudDialogflowV2beta1SuggestSmartRepliesResponse.h"
#include "OAIGoogleCloudDialogflowV2beta1ValidationResult.h"
#include "OAIGoogleCloudDialogflowV2beta1Version.h"
#include "OAIGoogleCloudLocationListLocationsResponse.h"
#include "OAIGoogleLongrunningListOperationsResponse.h"
#include "OAIGoogleLongrunningOperation.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_compile_suggestion_request OAIGoogleCloudDialogflowV2beta1CompileSuggestionRequest [optional]
    */
    virtual void dialogflow_projects_conversations_participants_suggestions_compile(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1CompileSuggestionRequest> &oai_google_cloud_dialogflow_v2beta1_compile_suggestion_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1CompileSuggestionRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_conversations_participants_suggestions_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_batch_delete_entity_types_request OAIGoogleCloudDialogflowV2beta1BatchDeleteEntityTypesRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_entityTypes_batchDelete(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1BatchDeleteEntityTypesRequest> &oai_google_cloud_dialogflow_v2beta1_batch_delete_entity_types_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1BatchDeleteEntityTypesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_batch_update_entity_types_request OAIGoogleCloudDialogflowV2beta1BatchUpdateEntityTypesRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_entityTypes_batchUpdate(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1BatchUpdateEntityTypesRequest> &oai_google_cloud_dialogflow_v2beta1_batch_update_entity_types_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1BatchUpdateEntityTypesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_batch_create_entities_request OAIGoogleCloudDialogflowV2beta1BatchCreateEntitiesRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_entityTypes_entities_batchCreate(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1BatchCreateEntitiesRequest> &oai_google_cloud_dialogflow_v2beta1_batch_create_entities_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1BatchCreateEntitiesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_batch_delete_entities_request OAIGoogleCloudDialogflowV2beta1BatchDeleteEntitiesRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_entityTypes_entities_batchDelete(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1BatchDeleteEntitiesRequest> &oai_google_cloud_dialogflow_v2beta1_batch_delete_entities_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1BatchDeleteEntitiesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_batch_update_entities_request OAIGoogleCloudDialogflowV2beta1BatchUpdateEntitiesRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_entityTypes_entities_batchUpdate(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1BatchUpdateEntitiesRequest> &oai_google_cloud_dialogflow_v2beta1_batch_update_entities_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1BatchUpdateEntitiesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  environment_id QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_environment OAIGoogleCloudDialogflowV2beta1Environment [optional]
    */
    virtual void dialogflow_projects_locations_agent_environments_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1Environment> &oai_google_cloud_dialogflow_v2beta1_environment = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1Environment>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agent_environments_getHistory(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agent_environments_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_export_agent_request OAIGoogleCloudDialogflowV2beta1ExportAgentRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_export(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1ExportAgentRequest> &oai_google_cloud_dialogflow_v2beta1_export_agent_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1ExportAgentRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  language_code QString [optional]
    */
    virtual void dialogflow_projects_locations_agent_getValidationResult(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_import_agent_request OAIGoogleCloudDialogflowV2beta1ImportAgentRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_import(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1ImportAgentRequest> &oai_google_cloud_dialogflow_v2beta1_import_agent_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1ImportAgentRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_batch_delete_intents_request OAIGoogleCloudDialogflowV2beta1BatchDeleteIntentsRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_intents_batchDelete(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1BatchDeleteIntentsRequest> &oai_google_cloud_dialogflow_v2beta1_batch_delete_intents_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1BatchDeleteIntentsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_batch_update_intents_request OAIGoogleCloudDialogflowV2beta1BatchUpdateIntentsRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_intents_batchUpdate(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1BatchUpdateIntentsRequest> &oai_google_cloud_dialogflow_v2beta1_batch_update_intents_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1BatchUpdateIntentsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  intent_view QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_intent OAIGoogleCloudDialogflowV2beta1Intent [optional]
    */
    virtual void dialogflow_projects_locations_agent_intents_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &intent_view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1Intent> &oai_google_cloud_dialogflow_v2beta1_intent = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1Intent>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  intent_view QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agent_intents_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &intent_view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_restore_agent_request OAIGoogleCloudDialogflowV2beta1RestoreAgentRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_restore(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1RestoreAgentRequest> &oai_google_cloud_dialogflow_v2beta1_restore_agent_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1RestoreAgentRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agent_search(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_context OAIGoogleCloudDialogflowV2beta1Context [optional]
    */
    virtual void dialogflow_projects_locations_agent_sessions_contexts_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1Context> &oai_google_cloud_dialogflow_v2beta1_context = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1Context>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agent_sessions_contexts_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void dialogflow_projects_locations_agent_sessions_deleteContexts(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_detect_intent_request OAIGoogleCloudDialogflowV2beta1DetectIntentRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_sessions_detectIntent(const QString &session, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1DetectIntentRequest> &oai_google_cloud_dialogflow_v2beta1_detect_intent_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1DetectIntentRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_session_entity_type OAIGoogleCloudDialogflowV2beta1SessionEntityType [optional]
    */
    virtual void dialogflow_projects_locations_agent_sessions_entityTypes_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1SessionEntityType> &oai_google_cloud_dialogflow_v2beta1_session_entity_type = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1SessionEntityType>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agent_sessions_entityTypes_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void dialogflow_projects_locations_agent_train(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_version OAIGoogleCloudDialogflowV2beta1Version [optional]
    */
    virtual void dialogflow_projects_locations_agent_versions_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1Version> &oai_google_cloud_dialogflow_v2beta1_version = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1Version>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agent_versions_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_answerRecords_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conversation_profile QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_clear_suggestion_feature_config_request OAIGoogleCloudDialogflowV2beta1ClearSuggestionFeatureConfigRequest [optional]
    */
    virtual void dialogflow_projects_locations_conversationProfiles_clearSuggestionFeatureConfig(const QString &conversation_profile, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1ClearSuggestionFeatureConfigRequest> &oai_google_cloud_dialogflow_v2beta1_clear_suggestion_feature_config_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1ClearSuggestionFeatureConfigRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_conversation_profile OAIGoogleCloudDialogflowV2beta1ConversationProfile [optional]
    */
    virtual void dialogflow_projects_locations_conversationProfiles_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1ConversationProfile> &oai_google_cloud_dialogflow_v2beta1_conversation_profile = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1ConversationProfile>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_conversationProfiles_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conversation_profile QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_set_suggestion_feature_config_request OAIGoogleCloudDialogflowV2beta1SetSuggestionFeatureConfigRequest [optional]
    */
    virtual void dialogflow_projects_locations_conversationProfiles_setSuggestionFeatureConfig(const QString &conversation_profile, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1SetSuggestionFeatureConfigRequest> &oai_google_cloud_dialogflow_v2beta1_set_suggestion_feature_config_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1SetSuggestionFeatureConfigRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void dialogflow_projects_locations_conversations_complete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  conversation_id QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_conversation OAIGoogleCloudDialogflowV2beta1Conversation [optional]
    */
    virtual void dialogflow_projects_locations_conversations_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conversation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1Conversation> &oai_google_cloud_dialogflow_v2beta1_conversation = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1Conversation>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_conversations_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_batch_create_messages_request OAIGoogleCloudDialogflowV2beta1BatchCreateMessagesRequest [optional]
    */
    virtual void dialogflow_projects_locations_conversations_messages_batchCreate(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1BatchCreateMessagesRequest> &oai_google_cloud_dialogflow_v2beta1_batch_create_messages_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1BatchCreateMessagesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_conversations_messages_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  participant QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_analyze_content_request OAIGoogleCloudDialogflowV2beta1AnalyzeContentRequest [optional]
    */
    virtual void dialogflow_projects_locations_conversations_participants_analyzeContent(const QString &participant, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1AnalyzeContentRequest> &oai_google_cloud_dialogflow_v2beta1_analyze_content_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1AnalyzeContentRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_participant OAIGoogleCloudDialogflowV2beta1Participant [optional]
    */
    virtual void dialogflow_projects_locations_conversations_participants_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1Participant> &oai_google_cloud_dialogflow_v2beta1_participant = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1Participant>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_conversations_participants_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_suggest_articles_request OAIGoogleCloudDialogflowV2beta1SuggestArticlesRequest [optional]
    */
    virtual void dialogflow_projects_locations_conversations_participants_suggestions_suggestArticles(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1SuggestArticlesRequest> &oai_google_cloud_dialogflow_v2beta1_suggest_articles_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1SuggestArticlesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_suggest_faq_answers_request OAIGoogleCloudDialogflowV2beta1SuggestFaqAnswersRequest [optional]
    */
    virtual void dialogflow_projects_locations_conversations_participants_suggestions_suggestFaqAnswers(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1SuggestFaqAnswersRequest> &oai_google_cloud_dialogflow_v2beta1_suggest_faq_answers_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1SuggestFaqAnswersRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_suggest_smart_replies_request OAIGoogleCloudDialogflowV2beta1SuggestSmartRepliesRequest [optional]
    */
    virtual void dialogflow_projects_locations_conversations_participants_suggestions_suggestSmartReplies(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1SuggestSmartRepliesRequest> &oai_google_cloud_dialogflow_v2beta1_suggest_smart_replies_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1SuggestSmartRepliesRequest>());

    /**
    * @param[in]  conversation QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_search_knowledge_request OAIGoogleCloudDialogflowV2beta1SearchKnowledgeRequest [optional]
    */
    virtual void dialogflow_projects_locations_conversations_suggestions_searchKnowledge(const QString &conversation, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1SearchKnowledgeRequest> &oai_google_cloud_dialogflow_v2beta1_search_knowledge_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1SearchKnowledgeRequest>());

    /**
    * @param[in]  conversation QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_suggest_conversation_summary_request OAIGoogleCloudDialogflowV2beta1SuggestConversationSummaryRequest [optional]
    */
    virtual void dialogflow_projects_locations_conversations_suggestions_suggestConversationSummary(const QString &conversation, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1SuggestConversationSummaryRequest> &oai_google_cloud_dialogflow_v2beta1_suggest_conversation_summary_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1SuggestConversationSummaryRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void dialogflow_projects_locations_deleteAgent(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void dialogflow_projects_locations_getAgent(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_knowledge_base OAIGoogleCloudDialogflowV2beta1KnowledgeBase [optional]
    */
    virtual void dialogflow_projects_locations_knowledgeBases_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1KnowledgeBase> &oai_google_cloud_dialogflow_v2beta1_knowledge_base = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1KnowledgeBase>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  import_gcs_custom_metadata bool [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_document OAIGoogleCloudDialogflowV2beta1Document [optional]
    */
    virtual void dialogflow_projects_locations_knowledgeBases_documents_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &import_gcs_custom_metadata = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1Document> &oai_google_cloud_dialogflow_v2beta1_document = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1Document>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  force bool [optional]
    */
    virtual void dialogflow_projects_locations_knowledgeBases_documents_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_import_documents_request OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest [optional]
    */
    virtual void dialogflow_projects_locations_knowledgeBases_documents_import(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest> &oai_google_cloud_dialogflow_v2beta1_import_documents_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1ImportDocumentsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_knowledgeBases_documents_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_document OAIGoogleCloudDialogflowV2beta1Document [optional]
    */
    virtual void dialogflow_projects_locations_knowledgeBases_documents_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1Document> &oai_google_cloud_dialogflow_v2beta1_document = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1Document>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_reload_document_request OAIGoogleCloudDialogflowV2beta1ReloadDocumentRequest [optional]
    */
    virtual void dialogflow_projects_locations_knowledgeBases_documents_reload(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1ReloadDocumentRequest> &oai_google_cloud_dialogflow_v2beta1_reload_document_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1ReloadDocumentRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_knowledgeBases_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_agent OAIGoogleCloudDialogflowV2beta1Agent [optional]
    */
    virtual void dialogflow_projects_locations_setAgent(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1Agent> &oai_google_cloud_dialogflow_v2beta1_agent = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1Agent>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void dialogflow_projects_operations_cancel(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  intent_view QString [optional]
    * @param[in]  language_code QString [optional]
    */
    virtual void dialogflow_projects_operations_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &intent_view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_operations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_generate_stateless_summary_request OAIGoogleCloudDialogflowV2beta1GenerateStatelessSummaryRequest [optional]
    */
    virtual void dialogflow_projects_suggestions_generateStatelessSummary(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1GenerateStatelessSummaryRequest> &oai_google_cloud_dialogflow_v2beta1_generate_stateless_summary_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1GenerateStatelessSummaryRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2beta1_search_knowledge_request OAIGoogleCloudDialogflowV2beta1SearchKnowledgeRequest [optional]
    */
    virtual void dialogflow_projects_suggestions_searchKnowledge(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1SearchKnowledgeRequest> &oai_google_cloud_dialogflow_v2beta1_search_knowledge_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2beta1SearchKnowledgeRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dialogflow_projects_conversations_participants_suggestions_compileCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_conversations_participants_suggestions_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_entityTypes_batchDeleteCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_entityTypes_batchUpdateCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchCreateCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchDeleteCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchUpdateCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_environments_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_environments_getHistoryCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_environments_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_exportCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_getValidationResultCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_importCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_intents_batchDeleteCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_intents_batchUpdateCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_intents_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_intents_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_restoreCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_searchCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_sessions_contexts_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_sessions_contexts_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_sessions_deleteContextsCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_sessions_detectIntentCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_sessions_entityTypes_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_sessions_entityTypes_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_trainCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_versions_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_versions_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_answerRecords_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversationProfiles_clearSuggestionFeatureConfigCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversationProfiles_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversationProfiles_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversationProfiles_setSuggestionFeatureConfigCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_completeCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_messages_batchCreateCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_messages_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_participants_analyzeContentCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_participants_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_participants_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestArticlesCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestFaqAnswersCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestSmartRepliesCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_suggestions_searchKnowledgeCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_suggestions_suggestConversationSummaryCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_deleteAgentCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_getAgentCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_knowledgeBases_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_knowledgeBases_documents_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_knowledgeBases_documents_deleteCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_knowledgeBases_documents_importCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_knowledgeBases_documents_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_knowledgeBases_documents_patchCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_knowledgeBases_documents_reloadCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_knowledgeBases_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_setAgentCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_operations_cancelCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_operations_getCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_operations_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_suggestions_generateStatelessSummaryCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_suggestions_searchKnowledgeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dialogflow_projects_conversations_participants_suggestions_compileSignal(OAIGoogleCloudDialogflowV2beta1CompileSuggestionResponse summary);
    void dialogflow_projects_conversations_participants_suggestions_listSignal(OAIGoogleCloudDialogflowV2beta1ListSuggestionsResponse summary);
    void dialogflow_projects_locations_agent_entityTypes_batchDeleteSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_entityTypes_batchUpdateSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchCreateSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchDeleteSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchUpdateSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_environments_createSignal(OAIGoogleCloudDialogflowV2beta1Environment summary);
    void dialogflow_projects_locations_agent_environments_getHistorySignal(OAIGoogleCloudDialogflowV2beta1EnvironmentHistory summary);
    void dialogflow_projects_locations_agent_environments_listSignal(OAIGoogleCloudDialogflowV2beta1ListEnvironmentsResponse summary);
    void dialogflow_projects_locations_agent_exportSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_getValidationResultSignal(OAIGoogleCloudDialogflowV2beta1ValidationResult summary);
    void dialogflow_projects_locations_agent_importSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_intents_batchDeleteSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_intents_batchUpdateSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_intents_createSignal(OAIGoogleCloudDialogflowV2beta1Intent summary);
    void dialogflow_projects_locations_agent_intents_listSignal(OAIGoogleCloudDialogflowV2beta1ListIntentsResponse summary);
    void dialogflow_projects_locations_agent_restoreSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_searchSignal(OAIGoogleCloudDialogflowV2beta1SearchAgentsResponse summary);
    void dialogflow_projects_locations_agent_sessions_contexts_createSignal(OAIGoogleCloudDialogflowV2beta1Context summary);
    void dialogflow_projects_locations_agent_sessions_contexts_listSignal(OAIGoogleCloudDialogflowV2beta1ListContextsResponse summary);
    void dialogflow_projects_locations_agent_sessions_deleteContextsSignal(OAIObject summary);
    void dialogflow_projects_locations_agent_sessions_detectIntentSignal(OAIGoogleCloudDialogflowV2beta1DetectIntentResponse summary);
    void dialogflow_projects_locations_agent_sessions_entityTypes_createSignal(OAIGoogleCloudDialogflowV2beta1SessionEntityType summary);
    void dialogflow_projects_locations_agent_sessions_entityTypes_listSignal(OAIGoogleCloudDialogflowV2beta1ListSessionEntityTypesResponse summary);
    void dialogflow_projects_locations_agent_trainSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_versions_createSignal(OAIGoogleCloudDialogflowV2beta1Version summary);
    void dialogflow_projects_locations_agent_versions_listSignal(OAIGoogleCloudDialogflowV2beta1ListVersionsResponse summary);
    void dialogflow_projects_locations_answerRecords_listSignal(OAIGoogleCloudDialogflowV2beta1ListAnswerRecordsResponse summary);
    void dialogflow_projects_locations_conversationProfiles_clearSuggestionFeatureConfigSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_conversationProfiles_createSignal(OAIGoogleCloudDialogflowV2beta1ConversationProfile summary);
    void dialogflow_projects_locations_conversationProfiles_listSignal(OAIGoogleCloudDialogflowV2beta1ListConversationProfilesResponse summary);
    void dialogflow_projects_locations_conversationProfiles_setSuggestionFeatureConfigSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_conversations_completeSignal(OAIGoogleCloudDialogflowV2beta1Conversation summary);
    void dialogflow_projects_locations_conversations_createSignal(OAIGoogleCloudDialogflowV2beta1Conversation summary);
    void dialogflow_projects_locations_conversations_listSignal(OAIGoogleCloudDialogflowV2beta1ListConversationsResponse summary);
    void dialogflow_projects_locations_conversations_messages_batchCreateSignal(OAIGoogleCloudDialogflowV2beta1BatchCreateMessagesResponse summary);
    void dialogflow_projects_locations_conversations_messages_listSignal(OAIGoogleCloudDialogflowV2beta1ListMessagesResponse summary);
    void dialogflow_projects_locations_conversations_participants_analyzeContentSignal(OAIGoogleCloudDialogflowV2beta1AnalyzeContentResponse summary);
    void dialogflow_projects_locations_conversations_participants_createSignal(OAIGoogleCloudDialogflowV2beta1Participant summary);
    void dialogflow_projects_locations_conversations_participants_listSignal(OAIGoogleCloudDialogflowV2beta1ListParticipantsResponse summary);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestArticlesSignal(OAIGoogleCloudDialogflowV2beta1SuggestArticlesResponse summary);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestFaqAnswersSignal(OAIGoogleCloudDialogflowV2beta1SuggestFaqAnswersResponse summary);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestSmartRepliesSignal(OAIGoogleCloudDialogflowV2beta1SuggestSmartRepliesResponse summary);
    void dialogflow_projects_locations_conversations_suggestions_searchKnowledgeSignal(OAIGoogleCloudDialogflowV2beta1SearchKnowledgeResponse summary);
    void dialogflow_projects_locations_conversations_suggestions_suggestConversationSummarySignal(OAIGoogleCloudDialogflowV2beta1SuggestConversationSummaryResponse summary);
    void dialogflow_projects_locations_deleteAgentSignal(OAIObject summary);
    void dialogflow_projects_locations_getAgentSignal(OAIGoogleCloudDialogflowV2beta1Agent summary);
    void dialogflow_projects_locations_knowledgeBases_createSignal(OAIGoogleCloudDialogflowV2beta1KnowledgeBase summary);
    void dialogflow_projects_locations_knowledgeBases_documents_createSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_documents_deleteSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_documents_importSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_documents_listSignal(OAIGoogleCloudDialogflowV2beta1ListDocumentsResponse summary);
    void dialogflow_projects_locations_knowledgeBases_documents_patchSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_documents_reloadSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_listSignal(OAIGoogleCloudDialogflowV2beta1ListKnowledgeBasesResponse summary);
    void dialogflow_projects_locations_listSignal(OAIGoogleCloudLocationListLocationsResponse summary);
    void dialogflow_projects_locations_setAgentSignal(OAIGoogleCloudDialogflowV2beta1Agent summary);
    void dialogflow_projects_operations_cancelSignal(OAIObject summary);
    void dialogflow_projects_operations_getSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_operations_listSignal(OAIGoogleLongrunningListOperationsResponse summary);
    void dialogflow_projects_suggestions_generateStatelessSummarySignal(OAIGoogleCloudDialogflowV2beta1GenerateStatelessSummaryResponse summary);
    void dialogflow_projects_suggestions_searchKnowledgeSignal(OAIGoogleCloudDialogflowV2beta1SearchKnowledgeResponse summary);


    void dialogflow_projects_conversations_participants_suggestions_compileSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1CompileSuggestionResponse summary);
    void dialogflow_projects_conversations_participants_suggestions_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1ListSuggestionsResponse summary);
    void dialogflow_projects_locations_agent_entityTypes_batchDeleteSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_entityTypes_batchUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchCreateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchDeleteSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_environments_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1Environment summary);
    void dialogflow_projects_locations_agent_environments_getHistorySignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1EnvironmentHistory summary);
    void dialogflow_projects_locations_agent_environments_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1ListEnvironmentsResponse summary);
    void dialogflow_projects_locations_agent_exportSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_getValidationResultSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1ValidationResult summary);
    void dialogflow_projects_locations_agent_importSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_intents_batchDeleteSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_intents_batchUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_intents_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1Intent summary);
    void dialogflow_projects_locations_agent_intents_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1ListIntentsResponse summary);
    void dialogflow_projects_locations_agent_restoreSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_searchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1SearchAgentsResponse summary);
    void dialogflow_projects_locations_agent_sessions_contexts_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1Context summary);
    void dialogflow_projects_locations_agent_sessions_contexts_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1ListContextsResponse summary);
    void dialogflow_projects_locations_agent_sessions_deleteContextsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void dialogflow_projects_locations_agent_sessions_detectIntentSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1DetectIntentResponse summary);
    void dialogflow_projects_locations_agent_sessions_entityTypes_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1SessionEntityType summary);
    void dialogflow_projects_locations_agent_sessions_entityTypes_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1ListSessionEntityTypesResponse summary);
    void dialogflow_projects_locations_agent_trainSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_versions_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1Version summary);
    void dialogflow_projects_locations_agent_versions_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1ListVersionsResponse summary);
    void dialogflow_projects_locations_answerRecords_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1ListAnswerRecordsResponse summary);
    void dialogflow_projects_locations_conversationProfiles_clearSuggestionFeatureConfigSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_conversationProfiles_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1ConversationProfile summary);
    void dialogflow_projects_locations_conversationProfiles_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1ListConversationProfilesResponse summary);
    void dialogflow_projects_locations_conversationProfiles_setSuggestionFeatureConfigSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_conversations_completeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1Conversation summary);
    void dialogflow_projects_locations_conversations_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1Conversation summary);
    void dialogflow_projects_locations_conversations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1ListConversationsResponse summary);
    void dialogflow_projects_locations_conversations_messages_batchCreateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1BatchCreateMessagesResponse summary);
    void dialogflow_projects_locations_conversations_messages_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1ListMessagesResponse summary);
    void dialogflow_projects_locations_conversations_participants_analyzeContentSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1AnalyzeContentResponse summary);
    void dialogflow_projects_locations_conversations_participants_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1Participant summary);
    void dialogflow_projects_locations_conversations_participants_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1ListParticipantsResponse summary);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestArticlesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1SuggestArticlesResponse summary);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestFaqAnswersSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1SuggestFaqAnswersResponse summary);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestSmartRepliesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1SuggestSmartRepliesResponse summary);
    void dialogflow_projects_locations_conversations_suggestions_searchKnowledgeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1SearchKnowledgeResponse summary);
    void dialogflow_projects_locations_conversations_suggestions_suggestConversationSummarySignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1SuggestConversationSummaryResponse summary);
    void dialogflow_projects_locations_deleteAgentSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void dialogflow_projects_locations_getAgentSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1Agent summary);
    void dialogflow_projects_locations_knowledgeBases_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1KnowledgeBase summary);
    void dialogflow_projects_locations_knowledgeBases_documents_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_documents_deleteSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_documents_importSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_documents_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1ListDocumentsResponse summary);
    void dialogflow_projects_locations_knowledgeBases_documents_patchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_documents_reloadSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1ListKnowledgeBasesResponse summary);
    void dialogflow_projects_locations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudLocationListLocationsResponse summary);
    void dialogflow_projects_locations_setAgentSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1Agent summary);
    void dialogflow_projects_operations_cancelSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void dialogflow_projects_operations_getSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_operations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningListOperationsResponse summary);
    void dialogflow_projects_suggestions_generateStatelessSummarySignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1GenerateStatelessSummaryResponse summary);
    void dialogflow_projects_suggestions_searchKnowledgeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2beta1SearchKnowledgeResponse summary);

    Q_DECL_DEPRECATED_X("Use dialogflow_projects_conversations_participants_suggestions_compileSignalError() instead")
    void dialogflow_projects_conversations_participants_suggestions_compileSignalE(OAIGoogleCloudDialogflowV2beta1CompileSuggestionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_conversations_participants_suggestions_compileSignalError(OAIGoogleCloudDialogflowV2beta1CompileSuggestionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_conversations_participants_suggestions_listSignalError() instead")
    void dialogflow_projects_conversations_participants_suggestions_listSignalE(OAIGoogleCloudDialogflowV2beta1ListSuggestionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_conversations_participants_suggestions_listSignalError(OAIGoogleCloudDialogflowV2beta1ListSuggestionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_entityTypes_batchDeleteSignalError() instead")
    void dialogflow_projects_locations_agent_entityTypes_batchDeleteSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_entityTypes_batchDeleteSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_entityTypes_batchUpdateSignalError() instead")
    void dialogflow_projects_locations_agent_entityTypes_batchUpdateSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_entityTypes_batchUpdateSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_entityTypes_entities_batchCreateSignalError() instead")
    void dialogflow_projects_locations_agent_entityTypes_entities_batchCreateSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchCreateSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_entityTypes_entities_batchDeleteSignalError() instead")
    void dialogflow_projects_locations_agent_entityTypes_entities_batchDeleteSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchDeleteSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_entityTypes_entities_batchUpdateSignalError() instead")
    void dialogflow_projects_locations_agent_entityTypes_entities_batchUpdateSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchUpdateSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_environments_createSignalError() instead")
    void dialogflow_projects_locations_agent_environments_createSignalE(OAIGoogleCloudDialogflowV2beta1Environment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_environments_createSignalError(OAIGoogleCloudDialogflowV2beta1Environment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_environments_getHistorySignalError() instead")
    void dialogflow_projects_locations_agent_environments_getHistorySignalE(OAIGoogleCloudDialogflowV2beta1EnvironmentHistory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_environments_getHistorySignalError(OAIGoogleCloudDialogflowV2beta1EnvironmentHistory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_environments_listSignalError() instead")
    void dialogflow_projects_locations_agent_environments_listSignalE(OAIGoogleCloudDialogflowV2beta1ListEnvironmentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_environments_listSignalError(OAIGoogleCloudDialogflowV2beta1ListEnvironmentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_exportSignalError() instead")
    void dialogflow_projects_locations_agent_exportSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_exportSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_getValidationResultSignalError() instead")
    void dialogflow_projects_locations_agent_getValidationResultSignalE(OAIGoogleCloudDialogflowV2beta1ValidationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_getValidationResultSignalError(OAIGoogleCloudDialogflowV2beta1ValidationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_importSignalError() instead")
    void dialogflow_projects_locations_agent_importSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_importSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_intents_batchDeleteSignalError() instead")
    void dialogflow_projects_locations_agent_intents_batchDeleteSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_intents_batchDeleteSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_intents_batchUpdateSignalError() instead")
    void dialogflow_projects_locations_agent_intents_batchUpdateSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_intents_batchUpdateSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_intents_createSignalError() instead")
    void dialogflow_projects_locations_agent_intents_createSignalE(OAIGoogleCloudDialogflowV2beta1Intent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_intents_createSignalError(OAIGoogleCloudDialogflowV2beta1Intent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_intents_listSignalError() instead")
    void dialogflow_projects_locations_agent_intents_listSignalE(OAIGoogleCloudDialogflowV2beta1ListIntentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_intents_listSignalError(OAIGoogleCloudDialogflowV2beta1ListIntentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_restoreSignalError() instead")
    void dialogflow_projects_locations_agent_restoreSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_restoreSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_searchSignalError() instead")
    void dialogflow_projects_locations_agent_searchSignalE(OAIGoogleCloudDialogflowV2beta1SearchAgentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_searchSignalError(OAIGoogleCloudDialogflowV2beta1SearchAgentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_contexts_createSignalError() instead")
    void dialogflow_projects_locations_agent_sessions_contexts_createSignalE(OAIGoogleCloudDialogflowV2beta1Context summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_contexts_createSignalError(OAIGoogleCloudDialogflowV2beta1Context summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_contexts_listSignalError() instead")
    void dialogflow_projects_locations_agent_sessions_contexts_listSignalE(OAIGoogleCloudDialogflowV2beta1ListContextsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_contexts_listSignalError(OAIGoogleCloudDialogflowV2beta1ListContextsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_deleteContextsSignalError() instead")
    void dialogflow_projects_locations_agent_sessions_deleteContextsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_deleteContextsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_detectIntentSignalError() instead")
    void dialogflow_projects_locations_agent_sessions_detectIntentSignalE(OAIGoogleCloudDialogflowV2beta1DetectIntentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_detectIntentSignalError(OAIGoogleCloudDialogflowV2beta1DetectIntentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_entityTypes_createSignalError() instead")
    void dialogflow_projects_locations_agent_sessions_entityTypes_createSignalE(OAIGoogleCloudDialogflowV2beta1SessionEntityType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_entityTypes_createSignalError(OAIGoogleCloudDialogflowV2beta1SessionEntityType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_entityTypes_listSignalError() instead")
    void dialogflow_projects_locations_agent_sessions_entityTypes_listSignalE(OAIGoogleCloudDialogflowV2beta1ListSessionEntityTypesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_entityTypes_listSignalError(OAIGoogleCloudDialogflowV2beta1ListSessionEntityTypesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_trainSignalError() instead")
    void dialogflow_projects_locations_agent_trainSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_trainSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_versions_createSignalError() instead")
    void dialogflow_projects_locations_agent_versions_createSignalE(OAIGoogleCloudDialogflowV2beta1Version summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_versions_createSignalError(OAIGoogleCloudDialogflowV2beta1Version summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_versions_listSignalError() instead")
    void dialogflow_projects_locations_agent_versions_listSignalE(OAIGoogleCloudDialogflowV2beta1ListVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_versions_listSignalError(OAIGoogleCloudDialogflowV2beta1ListVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_answerRecords_listSignalError() instead")
    void dialogflow_projects_locations_answerRecords_listSignalE(OAIGoogleCloudDialogflowV2beta1ListAnswerRecordsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_answerRecords_listSignalError(OAIGoogleCloudDialogflowV2beta1ListAnswerRecordsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationProfiles_clearSuggestionFeatureConfigSignalError() instead")
    void dialogflow_projects_locations_conversationProfiles_clearSuggestionFeatureConfigSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationProfiles_clearSuggestionFeatureConfigSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationProfiles_createSignalError() instead")
    void dialogflow_projects_locations_conversationProfiles_createSignalE(OAIGoogleCloudDialogflowV2beta1ConversationProfile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationProfiles_createSignalError(OAIGoogleCloudDialogflowV2beta1ConversationProfile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationProfiles_listSignalError() instead")
    void dialogflow_projects_locations_conversationProfiles_listSignalE(OAIGoogleCloudDialogflowV2beta1ListConversationProfilesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationProfiles_listSignalError(OAIGoogleCloudDialogflowV2beta1ListConversationProfilesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationProfiles_setSuggestionFeatureConfigSignalError() instead")
    void dialogflow_projects_locations_conversationProfiles_setSuggestionFeatureConfigSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationProfiles_setSuggestionFeatureConfigSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_completeSignalError() instead")
    void dialogflow_projects_locations_conversations_completeSignalE(OAIGoogleCloudDialogflowV2beta1Conversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_completeSignalError(OAIGoogleCloudDialogflowV2beta1Conversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_createSignalError() instead")
    void dialogflow_projects_locations_conversations_createSignalE(OAIGoogleCloudDialogflowV2beta1Conversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_createSignalError(OAIGoogleCloudDialogflowV2beta1Conversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_listSignalError() instead")
    void dialogflow_projects_locations_conversations_listSignalE(OAIGoogleCloudDialogflowV2beta1ListConversationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_listSignalError(OAIGoogleCloudDialogflowV2beta1ListConversationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_messages_batchCreateSignalError() instead")
    void dialogflow_projects_locations_conversations_messages_batchCreateSignalE(OAIGoogleCloudDialogflowV2beta1BatchCreateMessagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_messages_batchCreateSignalError(OAIGoogleCloudDialogflowV2beta1BatchCreateMessagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_messages_listSignalError() instead")
    void dialogflow_projects_locations_conversations_messages_listSignalE(OAIGoogleCloudDialogflowV2beta1ListMessagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_messages_listSignalError(OAIGoogleCloudDialogflowV2beta1ListMessagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_analyzeContentSignalError() instead")
    void dialogflow_projects_locations_conversations_participants_analyzeContentSignalE(OAIGoogleCloudDialogflowV2beta1AnalyzeContentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_analyzeContentSignalError(OAIGoogleCloudDialogflowV2beta1AnalyzeContentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_createSignalError() instead")
    void dialogflow_projects_locations_conversations_participants_createSignalE(OAIGoogleCloudDialogflowV2beta1Participant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_createSignalError(OAIGoogleCloudDialogflowV2beta1Participant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_listSignalError() instead")
    void dialogflow_projects_locations_conversations_participants_listSignalE(OAIGoogleCloudDialogflowV2beta1ListParticipantsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_listSignalError(OAIGoogleCloudDialogflowV2beta1ListParticipantsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_suggestions_suggestArticlesSignalError() instead")
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestArticlesSignalE(OAIGoogleCloudDialogflowV2beta1SuggestArticlesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestArticlesSignalError(OAIGoogleCloudDialogflowV2beta1SuggestArticlesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_suggestions_suggestFaqAnswersSignalError() instead")
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestFaqAnswersSignalE(OAIGoogleCloudDialogflowV2beta1SuggestFaqAnswersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestFaqAnswersSignalError(OAIGoogleCloudDialogflowV2beta1SuggestFaqAnswersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_suggestions_suggestSmartRepliesSignalError() instead")
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestSmartRepliesSignalE(OAIGoogleCloudDialogflowV2beta1SuggestSmartRepliesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestSmartRepliesSignalError(OAIGoogleCloudDialogflowV2beta1SuggestSmartRepliesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_suggestions_searchKnowledgeSignalError() instead")
    void dialogflow_projects_locations_conversations_suggestions_searchKnowledgeSignalE(OAIGoogleCloudDialogflowV2beta1SearchKnowledgeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_suggestions_searchKnowledgeSignalError(OAIGoogleCloudDialogflowV2beta1SearchKnowledgeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_suggestions_suggestConversationSummarySignalError() instead")
    void dialogflow_projects_locations_conversations_suggestions_suggestConversationSummarySignalE(OAIGoogleCloudDialogflowV2beta1SuggestConversationSummaryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_suggestions_suggestConversationSummarySignalError(OAIGoogleCloudDialogflowV2beta1SuggestConversationSummaryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_deleteAgentSignalError() instead")
    void dialogflow_projects_locations_deleteAgentSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_deleteAgentSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_getAgentSignalError() instead")
    void dialogflow_projects_locations_getAgentSignalE(OAIGoogleCloudDialogflowV2beta1Agent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_getAgentSignalError(OAIGoogleCloudDialogflowV2beta1Agent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_createSignalError() instead")
    void dialogflow_projects_locations_knowledgeBases_createSignalE(OAIGoogleCloudDialogflowV2beta1KnowledgeBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_createSignalError(OAIGoogleCloudDialogflowV2beta1KnowledgeBase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_createSignalError() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_deleteSignalError() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_deleteSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_deleteSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_importSignalError() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_importSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_importSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_listSignalError() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_listSignalE(OAIGoogleCloudDialogflowV2beta1ListDocumentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_listSignalError(OAIGoogleCloudDialogflowV2beta1ListDocumentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_patchSignalError() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_patchSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_patchSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_reloadSignalError() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_reloadSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_reloadSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_listSignalError() instead")
    void dialogflow_projects_locations_knowledgeBases_listSignalE(OAIGoogleCloudDialogflowV2beta1ListKnowledgeBasesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_listSignalError(OAIGoogleCloudDialogflowV2beta1ListKnowledgeBasesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_listSignalError() instead")
    void dialogflow_projects_locations_listSignalE(OAIGoogleCloudLocationListLocationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_listSignalError(OAIGoogleCloudLocationListLocationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_setAgentSignalError() instead")
    void dialogflow_projects_locations_setAgentSignalE(OAIGoogleCloudDialogflowV2beta1Agent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_setAgentSignalError(OAIGoogleCloudDialogflowV2beta1Agent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_operations_cancelSignalError() instead")
    void dialogflow_projects_operations_cancelSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_operations_cancelSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_operations_getSignalError() instead")
    void dialogflow_projects_operations_getSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_operations_getSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_operations_listSignalError() instead")
    void dialogflow_projects_operations_listSignalE(OAIGoogleLongrunningListOperationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_operations_listSignalError(OAIGoogleLongrunningListOperationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_suggestions_generateStatelessSummarySignalError() instead")
    void dialogflow_projects_suggestions_generateStatelessSummarySignalE(OAIGoogleCloudDialogflowV2beta1GenerateStatelessSummaryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_suggestions_generateStatelessSummarySignalError(OAIGoogleCloudDialogflowV2beta1GenerateStatelessSummaryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_suggestions_searchKnowledgeSignalError() instead")
    void dialogflow_projects_suggestions_searchKnowledgeSignalE(OAIGoogleCloudDialogflowV2beta1SearchKnowledgeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_suggestions_searchKnowledgeSignalError(OAIGoogleCloudDialogflowV2beta1SearchKnowledgeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dialogflow_projects_conversations_participants_suggestions_compileSignalErrorFull() instead")
    void dialogflow_projects_conversations_participants_suggestions_compileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_conversations_participants_suggestions_compileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_conversations_participants_suggestions_listSignalErrorFull() instead")
    void dialogflow_projects_conversations_participants_suggestions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_conversations_participants_suggestions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_entityTypes_batchDeleteSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_entityTypes_batchDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_entityTypes_batchDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_entityTypes_batchUpdateSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_entityTypes_batchUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_entityTypes_batchUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_entityTypes_entities_batchCreateSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_entityTypes_entities_batchCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_entityTypes_entities_batchDeleteSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_entityTypes_entities_batchDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_entityTypes_entities_batchUpdateSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_entityTypes_entities_batchUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_environments_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_environments_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_environments_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_environments_getHistorySignalErrorFull() instead")
    void dialogflow_projects_locations_agent_environments_getHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_environments_getHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_environments_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_environments_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_environments_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_exportSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_exportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_exportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_getValidationResultSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_getValidationResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_getValidationResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_importSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_intents_batchDeleteSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_intents_batchDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_intents_batchDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_intents_batchUpdateSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_intents_batchUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_intents_batchUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_intents_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_intents_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_intents_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_intents_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_intents_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_intents_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_restoreSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_restoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_restoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_searchSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_contexts_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_sessions_contexts_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_contexts_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_contexts_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_sessions_contexts_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_contexts_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_deleteContextsSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_sessions_deleteContextsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_deleteContextsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_detectIntentSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_sessions_detectIntentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_detectIntentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_entityTypes_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_sessions_entityTypes_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_entityTypes_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_entityTypes_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_sessions_entityTypes_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_entityTypes_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_trainSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_trainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_trainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_versions_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_versions_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_versions_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_versions_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_versions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_versions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_answerRecords_listSignalErrorFull() instead")
    void dialogflow_projects_locations_answerRecords_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_answerRecords_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationProfiles_clearSuggestionFeatureConfigSignalErrorFull() instead")
    void dialogflow_projects_locations_conversationProfiles_clearSuggestionFeatureConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationProfiles_clearSuggestionFeatureConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationProfiles_createSignalErrorFull() instead")
    void dialogflow_projects_locations_conversationProfiles_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationProfiles_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationProfiles_listSignalErrorFull() instead")
    void dialogflow_projects_locations_conversationProfiles_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationProfiles_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationProfiles_setSuggestionFeatureConfigSignalErrorFull() instead")
    void dialogflow_projects_locations_conversationProfiles_setSuggestionFeatureConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationProfiles_setSuggestionFeatureConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_completeSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_completeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_completeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_createSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_listSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_messages_batchCreateSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_messages_batchCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_messages_batchCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_messages_listSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_messages_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_messages_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_analyzeContentSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_participants_analyzeContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_analyzeContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_createSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_participants_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_listSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_participants_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_suggestions_suggestArticlesSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestArticlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestArticlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_suggestions_suggestFaqAnswersSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestFaqAnswersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestFaqAnswersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_suggestions_suggestSmartRepliesSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestSmartRepliesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestSmartRepliesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_suggestions_searchKnowledgeSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_suggestions_searchKnowledgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_suggestions_searchKnowledgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_suggestions_suggestConversationSummarySignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_suggestions_suggestConversationSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_suggestions_suggestConversationSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_deleteAgentSignalErrorFull() instead")
    void dialogflow_projects_locations_deleteAgentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_deleteAgentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_getAgentSignalErrorFull() instead")
    void dialogflow_projects_locations_getAgentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_getAgentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_createSignalErrorFull() instead")
    void dialogflow_projects_locations_knowledgeBases_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_createSignalErrorFull() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_deleteSignalErrorFull() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_importSignalErrorFull() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_listSignalErrorFull() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_patchSignalErrorFull() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_reloadSignalErrorFull() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_reloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_reloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_listSignalErrorFull() instead")
    void dialogflow_projects_locations_knowledgeBases_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_listSignalErrorFull() instead")
    void dialogflow_projects_locations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_setAgentSignalErrorFull() instead")
    void dialogflow_projects_locations_setAgentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_setAgentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_operations_cancelSignalErrorFull() instead")
    void dialogflow_projects_operations_cancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_operations_cancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_operations_getSignalErrorFull() instead")
    void dialogflow_projects_operations_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_operations_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_operations_listSignalErrorFull() instead")
    void dialogflow_projects_operations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_operations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_suggestions_generateStatelessSummarySignalErrorFull() instead")
    void dialogflow_projects_suggestions_generateStatelessSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_suggestions_generateStatelessSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_suggestions_searchKnowledgeSignalErrorFull() instead")
    void dialogflow_projects_suggestions_searchKnowledgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_suggestions_searchKnowledgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
