/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowV2beta1Document.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowV2beta1Document::OAIGoogleCloudDialogflowV2beta1Document(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowV2beta1Document::OAIGoogleCloudDialogflowV2beta1Document() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowV2beta1Document::~OAIGoogleCloudDialogflowV2beta1Document() {}

void OAIGoogleCloudDialogflowV2beta1Document::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_content_uri_isSet = false;
    m_content_uri_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_enable_auto_reload_isSet = false;
    m_enable_auto_reload_isValid = false;

    m_knowledge_types_isSet = false;
    m_knowledge_types_isValid = false;

    m_latest_reload_status_isSet = false;
    m_latest_reload_status_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_raw_content_isSet = false;
    m_raw_content_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIGoogleCloudDialogflowV2beta1Document::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowV2beta1Document::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_content_uri_isValid = ::OpenAPI::fromJsonValue(m_content_uri, json[QString("contentUri")]);
    m_content_uri_isSet = !json[QString("contentUri")].isNull() && m_content_uri_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_enable_auto_reload_isValid = ::OpenAPI::fromJsonValue(m_enable_auto_reload, json[QString("enableAutoReload")]);
    m_enable_auto_reload_isSet = !json[QString("enableAutoReload")].isNull() && m_enable_auto_reload_isValid;

    m_knowledge_types_isValid = ::OpenAPI::fromJsonValue(m_knowledge_types, json[QString("knowledgeTypes")]);
    m_knowledge_types_isSet = !json[QString("knowledgeTypes")].isNull() && m_knowledge_types_isValid;

    m_latest_reload_status_isValid = ::OpenAPI::fromJsonValue(m_latest_reload_status, json[QString("latestReloadStatus")]);
    m_latest_reload_status_isSet = !json[QString("latestReloadStatus")].isNull() && m_latest_reload_status_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_raw_content_isValid = ::OpenAPI::fromJsonValue(m_raw_content, json[QString("rawContent")]);
    m_raw_content_isSet = !json[QString("rawContent")].isNull() && m_raw_content_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Document::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowV2beta1Document::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_content_uri_isSet) {
        obj.insert(QString("contentUri"), ::OpenAPI::toJsonValue(m_content_uri));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_enable_auto_reload_isSet) {
        obj.insert(QString("enableAutoReload"), ::OpenAPI::toJsonValue(m_enable_auto_reload));
    }
    if (m_knowledge_types.size() > 0) {
        obj.insert(QString("knowledgeTypes"), ::OpenAPI::toJsonValue(m_knowledge_types));
    }
    if (m_latest_reload_status.isSet()) {
        obj.insert(QString("latestReloadStatus"), ::OpenAPI::toJsonValue(m_latest_reload_status));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_raw_content_isSet) {
        obj.insert(QString("rawContent"), ::OpenAPI::toJsonValue(m_raw_content));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIGoogleCloudDialogflowV2beta1Document::getContent() const {
    return m_content;
}
void OAIGoogleCloudDialogflowV2beta1Document::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_content_Set() const{
    return m_content_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Document::getContentUri() const {
    return m_content_uri;
}
void OAIGoogleCloudDialogflowV2beta1Document::setContentUri(const QString &content_uri) {
    m_content_uri = content_uri;
    m_content_uri_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_content_uri_Set() const{
    return m_content_uri_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_content_uri_Valid() const{
    return m_content_uri_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Document::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudDialogflowV2beta1Document::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIGoogleCloudDialogflowV2beta1Document::isEnableAutoReload() const {
    return m_enable_auto_reload;
}
void OAIGoogleCloudDialogflowV2beta1Document::setEnableAutoReload(const bool &enable_auto_reload) {
    m_enable_auto_reload = enable_auto_reload;
    m_enable_auto_reload_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_enable_auto_reload_Set() const{
    return m_enable_auto_reload_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_enable_auto_reload_Valid() const{
    return m_enable_auto_reload_isValid;
}

QList<QString> OAIGoogleCloudDialogflowV2beta1Document::getKnowledgeTypes() const {
    return m_knowledge_types;
}
void OAIGoogleCloudDialogflowV2beta1Document::setKnowledgeTypes(const QList<QString> &knowledge_types) {
    m_knowledge_types = knowledge_types;
    m_knowledge_types_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_knowledge_types_Set() const{
    return m_knowledge_types_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_knowledge_types_Valid() const{
    return m_knowledge_types_isValid;
}

OAIGoogleCloudDialogflowV2beta1DocumentReloadStatus OAIGoogleCloudDialogflowV2beta1Document::getLatestReloadStatus() const {
    return m_latest_reload_status;
}
void OAIGoogleCloudDialogflowV2beta1Document::setLatestReloadStatus(const OAIGoogleCloudDialogflowV2beta1DocumentReloadStatus &latest_reload_status) {
    m_latest_reload_status = latest_reload_status;
    m_latest_reload_status_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_latest_reload_status_Set() const{
    return m_latest_reload_status_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_latest_reload_status_Valid() const{
    return m_latest_reload_status_isValid;
}

QMap<QString, QString> OAIGoogleCloudDialogflowV2beta1Document::getMetadata() const {
    return m_metadata;
}
void OAIGoogleCloudDialogflowV2beta1Document::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Document::getMimeType() const {
    return m_mime_type;
}
void OAIGoogleCloudDialogflowV2beta1Document::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Document::getName() const {
    return m_name;
}
void OAIGoogleCloudDialogflowV2beta1Document::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_name_Valid() const{
    return m_name_isValid;
}

QByteArray OAIGoogleCloudDialogflowV2beta1Document::getRawContent() const {
    return m_raw_content;
}
void OAIGoogleCloudDialogflowV2beta1Document::setRawContent(const QByteArray &raw_content) {
    m_raw_content = raw_content;
    m_raw_content_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_raw_content_Set() const{
    return m_raw_content_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_raw_content_Valid() const{
    return m_raw_content_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1Document::getState() const {
    return m_state;
}
void OAIGoogleCloudDialogflowV2beta1Document::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1Document::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIGoogleCloudDialogflowV2beta1Document::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_auto_reload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_knowledge_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_reload_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowV2beta1Document::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
