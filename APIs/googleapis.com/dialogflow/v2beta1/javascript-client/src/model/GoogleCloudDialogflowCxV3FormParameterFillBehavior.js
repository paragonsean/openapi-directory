/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDialogflowCxV3EventHandler from './GoogleCloudDialogflowCxV3EventHandler';
import GoogleCloudDialogflowCxV3Fulfillment from './GoogleCloudDialogflowCxV3Fulfillment';

/**
 * The GoogleCloudDialogflowCxV3FormParameterFillBehavior model module.
 * @module model/GoogleCloudDialogflowCxV3FormParameterFillBehavior
 * @version v2beta1
 */
class GoogleCloudDialogflowCxV3FormParameterFillBehavior {
    /**
     * Constructs a new <code>GoogleCloudDialogflowCxV3FormParameterFillBehavior</code>.
     * Configuration for how the filling of a parameter should be handled.
     * @alias module:model/GoogleCloudDialogflowCxV3FormParameterFillBehavior
     */
    constructor() { 
        
        GoogleCloudDialogflowCxV3FormParameterFillBehavior.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDialogflowCxV3FormParameterFillBehavior</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDialogflowCxV3FormParameterFillBehavior} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDialogflowCxV3FormParameterFillBehavior} The populated <code>GoogleCloudDialogflowCxV3FormParameterFillBehavior</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDialogflowCxV3FormParameterFillBehavior();

            if (data.hasOwnProperty('initialPromptFulfillment')) {
                obj['initialPromptFulfillment'] = GoogleCloudDialogflowCxV3Fulfillment.constructFromObject(data['initialPromptFulfillment']);
            }
            if (data.hasOwnProperty('repromptEventHandlers')) {
                obj['repromptEventHandlers'] = ApiClient.convertToType(data['repromptEventHandlers'], [GoogleCloudDialogflowCxV3EventHandler]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDialogflowCxV3FormParameterFillBehavior</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDialogflowCxV3FormParameterFillBehavior</code>.
     */
    static validateJSON(data) {
        // validate the optional field `initialPromptFulfillment`
        if (data['initialPromptFulfillment']) { // data not null
          GoogleCloudDialogflowCxV3Fulfillment.validateJSON(data['initialPromptFulfillment']);
        }
        if (data['repromptEventHandlers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['repromptEventHandlers'])) {
                throw new Error("Expected the field `repromptEventHandlers` to be an array in the JSON data but got " + data['repromptEventHandlers']);
            }
            // validate the optional field `repromptEventHandlers` (array)
            for (const item of data['repromptEventHandlers']) {
                GoogleCloudDialogflowCxV3EventHandler.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudDialogflowCxV3Fulfillment} initialPromptFulfillment
 */
GoogleCloudDialogflowCxV3FormParameterFillBehavior.prototype['initialPromptFulfillment'] = undefined;

/**
 * The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are: * `sys.no-match-`, where N can be from 1 to 6 * `sys.no-match-default` * `sys.no-input-`, where N can be from 1 to 6 * `sys.no-input-default` * `sys.invalid-parameter` `initial_prompt_fulfillment` provides the first prompt for the parameter. If the user's response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the `sys.no-match-1`/`sys.no-input-1` handler (if defined) will be called to provide a prompt. The `sys.no-match-2`/`sys.no-input-2` handler (if defined) will respond to the next no-match/no-input event, and so on. A `sys.no-match-default` or `sys.no-input-default` handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed. A `sys.invalid-parameter` handler can be defined to handle the case where the parameter values have been `invalidated` by webhook. For example, if the user's response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the `sys.invalid-parameter` handler (if defined) will be called to provide a prompt. If the event handler for the corresponding event can't be found on the parameter, `initial_prompt_fulfillment` will be re-prompted.
 * @member {Array.<module:model/GoogleCloudDialogflowCxV3EventHandler>} repromptEventHandlers
 */
GoogleCloudDialogflowCxV3FormParameterFillBehavior.prototype['repromptEventHandlers'] = undefined;






export default GoogleCloudDialogflowCxV3FormParameterFillBehavior;

