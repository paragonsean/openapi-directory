# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dialogflow_v2_article_suggestion_model_metadata import GoogleCloudDialogflowV2ArticleSuggestionModelMetadata
from openapi_server.models.google_cloud_dialogflow_v2_input_dataset import GoogleCloudDialogflowV2InputDataset
from openapi_server.models.google_cloud_dialogflow_v2_smart_reply_model_metadata import GoogleCloudDialogflowV2SmartReplyModelMetadata
from openapi_server import util


class GoogleCloudDialogflowV2ConversationModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, article_suggestion_model_metadata: GoogleCloudDialogflowV2ArticleSuggestionModelMetadata=None, create_time: str=None, datasets: List[GoogleCloudDialogflowV2InputDataset]=None, display_name: str=None, language_code: str=None, name: str=None, smart_reply_model_metadata: GoogleCloudDialogflowV2SmartReplyModelMetadata=None, state: str=None):
        """GoogleCloudDialogflowV2ConversationModel - a model defined in OpenAPI

        :param article_suggestion_model_metadata: The article_suggestion_model_metadata of this GoogleCloudDialogflowV2ConversationModel.
        :param create_time: The create_time of this GoogleCloudDialogflowV2ConversationModel.
        :param datasets: The datasets of this GoogleCloudDialogflowV2ConversationModel.
        :param display_name: The display_name of this GoogleCloudDialogflowV2ConversationModel.
        :param language_code: The language_code of this GoogleCloudDialogflowV2ConversationModel.
        :param name: The name of this GoogleCloudDialogflowV2ConversationModel.
        :param smart_reply_model_metadata: The smart_reply_model_metadata of this GoogleCloudDialogflowV2ConversationModel.
        :param state: The state of this GoogleCloudDialogflowV2ConversationModel.
        """
        self.openapi_types = {
            'article_suggestion_model_metadata': GoogleCloudDialogflowV2ArticleSuggestionModelMetadata,
            'create_time': str,
            'datasets': List[GoogleCloudDialogflowV2InputDataset],
            'display_name': str,
            'language_code': str,
            'name': str,
            'smart_reply_model_metadata': GoogleCloudDialogflowV2SmartReplyModelMetadata,
            'state': str
        }

        self.attribute_map = {
            'article_suggestion_model_metadata': 'articleSuggestionModelMetadata',
            'create_time': 'createTime',
            'datasets': 'datasets',
            'display_name': 'displayName',
            'language_code': 'languageCode',
            'name': 'name',
            'smart_reply_model_metadata': 'smartReplyModelMetadata',
            'state': 'state'
        }

        self._article_suggestion_model_metadata = article_suggestion_model_metadata
        self._create_time = create_time
        self._datasets = datasets
        self._display_name = display_name
        self._language_code = language_code
        self._name = name
        self._smart_reply_model_metadata = smart_reply_model_metadata
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowV2ConversationModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowV2ConversationModel of this GoogleCloudDialogflowV2ConversationModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def article_suggestion_model_metadata(self):
        """Gets the article_suggestion_model_metadata of this GoogleCloudDialogflowV2ConversationModel.


        :return: The article_suggestion_model_metadata of this GoogleCloudDialogflowV2ConversationModel.
        :rtype: GoogleCloudDialogflowV2ArticleSuggestionModelMetadata
        """
        return self._article_suggestion_model_metadata

    @article_suggestion_model_metadata.setter
    def article_suggestion_model_metadata(self, article_suggestion_model_metadata):
        """Sets the article_suggestion_model_metadata of this GoogleCloudDialogflowV2ConversationModel.


        :param article_suggestion_model_metadata: The article_suggestion_model_metadata of this GoogleCloudDialogflowV2ConversationModel.
        :type article_suggestion_model_metadata: GoogleCloudDialogflowV2ArticleSuggestionModelMetadata
        """

        self._article_suggestion_model_metadata = article_suggestion_model_metadata

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudDialogflowV2ConversationModel.

        Output only. Creation time of this model.

        :return: The create_time of this GoogleCloudDialogflowV2ConversationModel.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudDialogflowV2ConversationModel.

        Output only. Creation time of this model.

        :param create_time: The create_time of this GoogleCloudDialogflowV2ConversationModel.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def datasets(self):
        """Gets the datasets of this GoogleCloudDialogflowV2ConversationModel.

        Required. Datasets used to create model.

        :return: The datasets of this GoogleCloudDialogflowV2ConversationModel.
        :rtype: List[GoogleCloudDialogflowV2InputDataset]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this GoogleCloudDialogflowV2ConversationModel.

        Required. Datasets used to create model.

        :param datasets: The datasets of this GoogleCloudDialogflowV2ConversationModel.
        :type datasets: List[GoogleCloudDialogflowV2InputDataset]
        """

        self._datasets = datasets

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudDialogflowV2ConversationModel.

        Required. The display name of the model. At most 64 bytes long.

        :return: The display_name of this GoogleCloudDialogflowV2ConversationModel.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudDialogflowV2ConversationModel.

        Required. The display name of the model. At most 64 bytes long.

        :param display_name: The display_name of this GoogleCloudDialogflowV2ConversationModel.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def language_code(self):
        """Gets the language_code of this GoogleCloudDialogflowV2ConversationModel.

        Language code for the conversation model. If not specified, the language is en-US. Language at ConversationModel should be set for all non en-us languages. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: \"en-US\".

        :return: The language_code of this GoogleCloudDialogflowV2ConversationModel.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this GoogleCloudDialogflowV2ConversationModel.

        Language code for the conversation model. If not specified, the language is en-US. Language at ConversationModel should be set for all non en-us languages. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: \"en-US\".

        :param language_code: The language_code of this GoogleCloudDialogflowV2ConversationModel.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def name(self):
        """Gets the name of this GoogleCloudDialogflowV2ConversationModel.

        ConversationModel resource name. Format: `projects//conversationModels/`

        :return: The name of this GoogleCloudDialogflowV2ConversationModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDialogflowV2ConversationModel.

        ConversationModel resource name. Format: `projects//conversationModels/`

        :param name: The name of this GoogleCloudDialogflowV2ConversationModel.
        :type name: str
        """

        self._name = name

    @property
    def smart_reply_model_metadata(self):
        """Gets the smart_reply_model_metadata of this GoogleCloudDialogflowV2ConversationModel.


        :return: The smart_reply_model_metadata of this GoogleCloudDialogflowV2ConversationModel.
        :rtype: GoogleCloudDialogflowV2SmartReplyModelMetadata
        """
        return self._smart_reply_model_metadata

    @smart_reply_model_metadata.setter
    def smart_reply_model_metadata(self, smart_reply_model_metadata):
        """Sets the smart_reply_model_metadata of this GoogleCloudDialogflowV2ConversationModel.


        :param smart_reply_model_metadata: The smart_reply_model_metadata of this GoogleCloudDialogflowV2ConversationModel.
        :type smart_reply_model_metadata: GoogleCloudDialogflowV2SmartReplyModelMetadata
        """

        self._smart_reply_model_metadata = smart_reply_model_metadata

    @property
    def state(self):
        """Gets the state of this GoogleCloudDialogflowV2ConversationModel.

        Output only. State of the model. A model can only serve prediction requests after it gets deployed.

        :return: The state of this GoogleCloudDialogflowV2ConversationModel.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudDialogflowV2ConversationModel.

        Output only. State of the model. A model can only serve prediction requests after it gets deployed.

        :param state: The state of this GoogleCloudDialogflowV2ConversationModel.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "UNDEPLOYED", "DEPLOYING", "DEPLOYED", "UNDEPLOYING", "DELETING", "FAILED", "PENDING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
