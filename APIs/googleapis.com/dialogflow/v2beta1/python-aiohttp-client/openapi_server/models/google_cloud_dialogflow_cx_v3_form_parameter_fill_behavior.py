# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dialogflow_cx_v3_event_handler import GoogleCloudDialogflowCxV3EventHandler
from openapi_server.models.google_cloud_dialogflow_cx_v3_fulfillment import GoogleCloudDialogflowCxV3Fulfillment
from openapi_server import util


class GoogleCloudDialogflowCxV3FormParameterFillBehavior(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, initial_prompt_fulfillment: GoogleCloudDialogflowCxV3Fulfillment=None, reprompt_event_handlers: List[GoogleCloudDialogflowCxV3EventHandler]=None):
        """GoogleCloudDialogflowCxV3FormParameterFillBehavior - a model defined in OpenAPI

        :param initial_prompt_fulfillment: The initial_prompt_fulfillment of this GoogleCloudDialogflowCxV3FormParameterFillBehavior.
        :param reprompt_event_handlers: The reprompt_event_handlers of this GoogleCloudDialogflowCxV3FormParameterFillBehavior.
        """
        self.openapi_types = {
            'initial_prompt_fulfillment': GoogleCloudDialogflowCxV3Fulfillment,
            'reprompt_event_handlers': List[GoogleCloudDialogflowCxV3EventHandler]
        }

        self.attribute_map = {
            'initial_prompt_fulfillment': 'initialPromptFulfillment',
            'reprompt_event_handlers': 'repromptEventHandlers'
        }

        self._initial_prompt_fulfillment = initial_prompt_fulfillment
        self._reprompt_event_handlers = reprompt_event_handlers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowCxV3FormParameterFillBehavior':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowCxV3FormParameterFillBehavior of this GoogleCloudDialogflowCxV3FormParameterFillBehavior.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def initial_prompt_fulfillment(self):
        """Gets the initial_prompt_fulfillment of this GoogleCloudDialogflowCxV3FormParameterFillBehavior.


        :return: The initial_prompt_fulfillment of this GoogleCloudDialogflowCxV3FormParameterFillBehavior.
        :rtype: GoogleCloudDialogflowCxV3Fulfillment
        """
        return self._initial_prompt_fulfillment

    @initial_prompt_fulfillment.setter
    def initial_prompt_fulfillment(self, initial_prompt_fulfillment):
        """Sets the initial_prompt_fulfillment of this GoogleCloudDialogflowCxV3FormParameterFillBehavior.


        :param initial_prompt_fulfillment: The initial_prompt_fulfillment of this GoogleCloudDialogflowCxV3FormParameterFillBehavior.
        :type initial_prompt_fulfillment: GoogleCloudDialogflowCxV3Fulfillment
        """

        self._initial_prompt_fulfillment = initial_prompt_fulfillment

    @property
    def reprompt_event_handlers(self):
        """Gets the reprompt_event_handlers of this GoogleCloudDialogflowCxV3FormParameterFillBehavior.

        The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are: * `sys.no-match-`, where N can be from 1 to 6 * `sys.no-match-default` * `sys.no-input-`, where N can be from 1 to 6 * `sys.no-input-default` * `sys.invalid-parameter` `initial_prompt_fulfillment` provides the first prompt for the parameter. If the user's response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the `sys.no-match-1`/`sys.no-input-1` handler (if defined) will be called to provide a prompt. The `sys.no-match-2`/`sys.no-input-2` handler (if defined) will respond to the next no-match/no-input event, and so on. A `sys.no-match-default` or `sys.no-input-default` handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed. A `sys.invalid-parameter` handler can be defined to handle the case where the parameter values have been `invalidated` by webhook. For example, if the user's response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the `sys.invalid-parameter` handler (if defined) will be called to provide a prompt. If the event handler for the corresponding event can't be found on the parameter, `initial_prompt_fulfillment` will be re-prompted.

        :return: The reprompt_event_handlers of this GoogleCloudDialogflowCxV3FormParameterFillBehavior.
        :rtype: List[GoogleCloudDialogflowCxV3EventHandler]
        """
        return self._reprompt_event_handlers

    @reprompt_event_handlers.setter
    def reprompt_event_handlers(self, reprompt_event_handlers):
        """Sets the reprompt_event_handlers of this GoogleCloudDialogflowCxV3FormParameterFillBehavior.

        The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are: * `sys.no-match-`, where N can be from 1 to 6 * `sys.no-match-default` * `sys.no-input-`, where N can be from 1 to 6 * `sys.no-input-default` * `sys.invalid-parameter` `initial_prompt_fulfillment` provides the first prompt for the parameter. If the user's response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the `sys.no-match-1`/`sys.no-input-1` handler (if defined) will be called to provide a prompt. The `sys.no-match-2`/`sys.no-input-2` handler (if defined) will respond to the next no-match/no-input event, and so on. A `sys.no-match-default` or `sys.no-input-default` handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed. A `sys.invalid-parameter` handler can be defined to handle the case where the parameter values have been `invalidated` by webhook. For example, if the user's response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the `sys.invalid-parameter` handler (if defined) will be called to provide a prompt. If the event handler for the corresponding event can't be found on the parameter, `initial_prompt_fulfillment` will be re-prompted.

        :param reprompt_event_handlers: The reprompt_event_handlers of this GoogleCloudDialogflowCxV3FormParameterFillBehavior.
        :type reprompt_event_handlers: List[GoogleCloudDialogflowCxV3EventHandler]
        """

        self._reprompt_event_handlers = reprompt_event_handlers
