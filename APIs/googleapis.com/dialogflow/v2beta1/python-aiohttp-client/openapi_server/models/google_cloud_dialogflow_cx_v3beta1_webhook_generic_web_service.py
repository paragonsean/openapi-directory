# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDialogflowCxV3beta1WebhookGenericWebService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_ca_certs: List[str]=None, http_method: str=None, parameter_mapping: Dict[str, str]=None, password: str=None, request_body: str=None, request_headers: Dict[str, str]=None, uri: str=None, username: str=None, webhook_type: str=None):
        """GoogleCloudDialogflowCxV3beta1WebhookGenericWebService - a model defined in OpenAPI

        :param allowed_ca_certs: The allowed_ca_certs of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :param http_method: The http_method of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :param parameter_mapping: The parameter_mapping of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :param password: The password of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :param request_body: The request_body of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :param request_headers: The request_headers of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :param uri: The uri of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :param username: The username of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :param webhook_type: The webhook_type of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        """
        self.openapi_types = {
            'allowed_ca_certs': List[str],
            'http_method': str,
            'parameter_mapping': Dict[str, str],
            'password': str,
            'request_body': str,
            'request_headers': Dict[str, str],
            'uri': str,
            'username': str,
            'webhook_type': str
        }

        self.attribute_map = {
            'allowed_ca_certs': 'allowedCaCerts',
            'http_method': 'httpMethod',
            'parameter_mapping': 'parameterMapping',
            'password': 'password',
            'request_body': 'requestBody',
            'request_headers': 'requestHeaders',
            'uri': 'uri',
            'username': 'username',
            'webhook_type': 'webhookType'
        }

        self._allowed_ca_certs = allowed_ca_certs
        self._http_method = http_method
        self._parameter_mapping = parameter_mapping
        self._password = password
        self._request_body = request_body
        self._request_headers = request_headers
        self._uri = uri
        self._username = username
        self._webhook_type = webhook_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowCxV3beta1WebhookGenericWebService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowCxV3beta1WebhookGenericWebService of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_ca_certs(self):
        """Gets the allowed_ca_certs of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.

        Optional. Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification. This overrides the default SSL trust store. If this is empty or unspecified, Dialogflow will use Google's default trust store to verify certificates. N.B. Make sure the HTTPS server certificates are signed with \"subject alt name\". For instance a certificate can be self-signed using the following command, ``` openssl x509 -req -days 200 -in example.com.csr \\ -signkey example.com.key \\ -out example.com.crt \\ -extfile <(printf \"\\nsubjectAltName='DNS:www.example.com'\") ```

        :return: The allowed_ca_certs of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :rtype: List[str]
        """
        return self._allowed_ca_certs

    @allowed_ca_certs.setter
    def allowed_ca_certs(self, allowed_ca_certs):
        """Sets the allowed_ca_certs of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.

        Optional. Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification. This overrides the default SSL trust store. If this is empty or unspecified, Dialogflow will use Google's default trust store to verify certificates. N.B. Make sure the HTTPS server certificates are signed with \"subject alt name\". For instance a certificate can be self-signed using the following command, ``` openssl x509 -req -days 200 -in example.com.csr \\ -signkey example.com.key \\ -out example.com.crt \\ -extfile <(printf \"\\nsubjectAltName='DNS:www.example.com'\") ```

        :param allowed_ca_certs: The allowed_ca_certs of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :type allowed_ca_certs: List[str]
        """

        self._allowed_ca_certs = allowed_ca_certs

    @property
    def http_method(self):
        """Gets the http_method of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.

        Optional. HTTP method for the flexible webhook calls. Standard webhook always uses POST.

        :return: The http_method of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.

        Optional. HTTP method for the flexible webhook calls. Standard webhook always uses POST.

        :param http_method: The http_method of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :type http_method: str
        """
        allowed_values = ["HTTP_METHOD_UNSPECIFIED", "POST", "GET", "HEAD", "PUT", "DELETE", "PATCH", "OPTIONS"]  # noqa: E501
        if http_method not in allowed_values:
            raise ValueError(
                "Invalid value for `http_method` ({0}), must be one of {1}"
                .format(http_method, allowed_values)
            )

        self._http_method = http_method

    @property
    def parameter_mapping(self):
        """Gets the parameter_mapping of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.

        Optional. Maps the values extracted from specific fields of the flexible webhook response into session parameters. - Key: session parameter name - Value: field path in the webhook response

        :return: The parameter_mapping of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :rtype: Dict[str, str]
        """
        return self._parameter_mapping

    @parameter_mapping.setter
    def parameter_mapping(self, parameter_mapping):
        """Sets the parameter_mapping of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.

        Optional. Maps the values extracted from specific fields of the flexible webhook response into session parameters. - Key: session parameter name - Value: field path in the webhook response

        :param parameter_mapping: The parameter_mapping of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :type parameter_mapping: Dict[str, str]
        """

        self._parameter_mapping = parameter_mapping

    @property
    def password(self):
        """Gets the password of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.

        The password for HTTP Basic authentication.

        :return: The password of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.

        The password for HTTP Basic authentication.

        :param password: The password of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :type password: str
        """

        self._password = password

    @property
    def request_body(self):
        """Gets the request_body of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.

        Optional. Defines a custom JSON object as request body to send to flexible webhook.

        :return: The request_body of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :rtype: str
        """
        return self._request_body

    @request_body.setter
    def request_body(self, request_body):
        """Sets the request_body of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.

        Optional. Defines a custom JSON object as request body to send to flexible webhook.

        :param request_body: The request_body of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :type request_body: str
        """

        self._request_body = request_body

    @property
    def request_headers(self):
        """Gets the request_headers of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.

        The HTTP request headers to send together with webhook requests.

        :return: The request_headers of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :rtype: Dict[str, str]
        """
        return self._request_headers

    @request_headers.setter
    def request_headers(self, request_headers):
        """Sets the request_headers of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.

        The HTTP request headers to send together with webhook requests.

        :param request_headers: The request_headers of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :type request_headers: Dict[str, str]
        """

        self._request_headers = request_headers

    @property
    def uri(self):
        """Gets the uri of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.

        Required. The webhook URI for receiving POST requests. It must use https protocol.

        :return: The uri of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.

        Required. The webhook URI for receiving POST requests. It must use https protocol.

        :param uri: The uri of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :type uri: str
        """

        self._uri = uri

    @property
    def username(self):
        """Gets the username of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.

        The user name for HTTP Basic authentication.

        :return: The username of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.

        The user name for HTTP Basic authentication.

        :param username: The username of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :type username: str
        """

        self._username = username

    @property
    def webhook_type(self):
        """Gets the webhook_type of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.

        Optional. Type of the webhook.

        :return: The webhook_type of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :rtype: str
        """
        return self._webhook_type

    @webhook_type.setter
    def webhook_type(self, webhook_type):
        """Sets the webhook_type of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.

        Optional. Type of the webhook.

        :param webhook_type: The webhook_type of this GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.
        :type webhook_type: str
        """
        allowed_values = ["WEBHOOK_TYPE_UNSPECIFIED", "STANDARD", "FLEXIBLE"]  # noqa: E501
        if webhook_type not in allowed_values:
            raise ValueError(
                "Invalid value for `webhook_type` ({0}), must be one of {1}"
                .format(webhook_type, allowed_values)
            )

        self._webhook_type = webhook_type
