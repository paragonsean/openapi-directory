# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dialogflow_v2beta1_document_reload_status import GoogleCloudDialogflowV2beta1DocumentReloadStatus
from openapi_server import util


class GoogleCloudDialogflowV2beta1Document(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, content_uri: str=None, display_name: str=None, enable_auto_reload: bool=None, knowledge_types: List[str]=None, latest_reload_status: GoogleCloudDialogflowV2beta1DocumentReloadStatus=None, metadata: Dict[str, str]=None, mime_type: str=None, name: str=None, raw_content: str=None, state: str=None):
        """GoogleCloudDialogflowV2beta1Document - a model defined in OpenAPI

        :param content: The content of this GoogleCloudDialogflowV2beta1Document.
        :param content_uri: The content_uri of this GoogleCloudDialogflowV2beta1Document.
        :param display_name: The display_name of this GoogleCloudDialogflowV2beta1Document.
        :param enable_auto_reload: The enable_auto_reload of this GoogleCloudDialogflowV2beta1Document.
        :param knowledge_types: The knowledge_types of this GoogleCloudDialogflowV2beta1Document.
        :param latest_reload_status: The latest_reload_status of this GoogleCloudDialogflowV2beta1Document.
        :param metadata: The metadata of this GoogleCloudDialogflowV2beta1Document.
        :param mime_type: The mime_type of this GoogleCloudDialogflowV2beta1Document.
        :param name: The name of this GoogleCloudDialogflowV2beta1Document.
        :param raw_content: The raw_content of this GoogleCloudDialogflowV2beta1Document.
        :param state: The state of this GoogleCloudDialogflowV2beta1Document.
        """
        self.openapi_types = {
            'content': str,
            'content_uri': str,
            'display_name': str,
            'enable_auto_reload': bool,
            'knowledge_types': List[str],
            'latest_reload_status': GoogleCloudDialogflowV2beta1DocumentReloadStatus,
            'metadata': Dict[str, str],
            'mime_type': str,
            'name': str,
            'raw_content': str,
            'state': str
        }

        self.attribute_map = {
            'content': 'content',
            'content_uri': 'contentUri',
            'display_name': 'displayName',
            'enable_auto_reload': 'enableAutoReload',
            'knowledge_types': 'knowledgeTypes',
            'latest_reload_status': 'latestReloadStatus',
            'metadata': 'metadata',
            'mime_type': 'mimeType',
            'name': 'name',
            'raw_content': 'rawContent',
            'state': 'state'
        }

        self._content = content
        self._content_uri = content_uri
        self._display_name = display_name
        self._enable_auto_reload = enable_auto_reload
        self._knowledge_types = knowledge_types
        self._latest_reload_status = latest_reload_status
        self._metadata = metadata
        self._mime_type = mime_type
        self._name = name
        self._raw_content = raw_content
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowV2beta1Document':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowV2beta1Document of this GoogleCloudDialogflowV2beta1Document.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this GoogleCloudDialogflowV2beta1Document.

        The raw content of the document. This field is only permitted for EXTRACTIVE_QA and FAQ knowledge types. Note: This field is in the process of being deprecated, please use raw_content instead.

        :return: The content of this GoogleCloudDialogflowV2beta1Document.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this GoogleCloudDialogflowV2beta1Document.

        The raw content of the document. This field is only permitted for EXTRACTIVE_QA and FAQ knowledge types. Note: This field is in the process of being deprecated, please use raw_content instead.

        :param content: The content of this GoogleCloudDialogflowV2beta1Document.
        :type content: str
        """

        self._content = content

    @property
    def content_uri(self):
        """Gets the content_uri of this GoogleCloudDialogflowV2beta1Document.

        The URI where the file content is located. For documents stored in Google Cloud Storage, these URIs must have the form `gs:///`. NOTE: External URLs must correspond to public webpages, i.e., they must be indexed by Google Search. In particular, URLs for showing documents in Google Cloud Storage (i.e. the URL in your browser) are not supported. Instead use the `gs://` format URI described above.

        :return: The content_uri of this GoogleCloudDialogflowV2beta1Document.
        :rtype: str
        """
        return self._content_uri

    @content_uri.setter
    def content_uri(self, content_uri):
        """Sets the content_uri of this GoogleCloudDialogflowV2beta1Document.

        The URI where the file content is located. For documents stored in Google Cloud Storage, these URIs must have the form `gs:///`. NOTE: External URLs must correspond to public webpages, i.e., they must be indexed by Google Search. In particular, URLs for showing documents in Google Cloud Storage (i.e. the URL in your browser) are not supported. Instead use the `gs://` format URI described above.

        :param content_uri: The content_uri of this GoogleCloudDialogflowV2beta1Document.
        :type content_uri: str
        """

        self._content_uri = content_uri

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudDialogflowV2beta1Document.

        Required. The display name of the document. The name must be 1024 bytes or less; otherwise, the creation request fails.

        :return: The display_name of this GoogleCloudDialogflowV2beta1Document.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudDialogflowV2beta1Document.

        Required. The display name of the document. The name must be 1024 bytes or less; otherwise, the creation request fails.

        :param display_name: The display_name of this GoogleCloudDialogflowV2beta1Document.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enable_auto_reload(self):
        """Gets the enable_auto_reload of this GoogleCloudDialogflowV2beta1Document.

        Optional. If true, we try to automatically reload the document every day (at a time picked by the system). If false or unspecified, we don't try to automatically reload the document. Currently you can only enable automatic reload for documents sourced from a public url, see `source` field for the source types. Reload status can be tracked in `latest_reload_status`. If a reload fails, we will keep the document unchanged. If a reload fails with internal errors, the system will try to reload the document on the next day. If a reload fails with non-retriable errors (e.g. PERMISSION_DENIED), the system will not try to reload the document anymore. You need to manually reload the document successfully by calling `ReloadDocument` and clear the errors.

        :return: The enable_auto_reload of this GoogleCloudDialogflowV2beta1Document.
        :rtype: bool
        """
        return self._enable_auto_reload

    @enable_auto_reload.setter
    def enable_auto_reload(self, enable_auto_reload):
        """Sets the enable_auto_reload of this GoogleCloudDialogflowV2beta1Document.

        Optional. If true, we try to automatically reload the document every day (at a time picked by the system). If false or unspecified, we don't try to automatically reload the document. Currently you can only enable automatic reload for documents sourced from a public url, see `source` field for the source types. Reload status can be tracked in `latest_reload_status`. If a reload fails, we will keep the document unchanged. If a reload fails with internal errors, the system will try to reload the document on the next day. If a reload fails with non-retriable errors (e.g. PERMISSION_DENIED), the system will not try to reload the document anymore. You need to manually reload the document successfully by calling `ReloadDocument` and clear the errors.

        :param enable_auto_reload: The enable_auto_reload of this GoogleCloudDialogflowV2beta1Document.
        :type enable_auto_reload: bool
        """

        self._enable_auto_reload = enable_auto_reload

    @property
    def knowledge_types(self):
        """Gets the knowledge_types of this GoogleCloudDialogflowV2beta1Document.

        Required. The knowledge type of document content.

        :return: The knowledge_types of this GoogleCloudDialogflowV2beta1Document.
        :rtype: List[str]
        """
        return self._knowledge_types

    @knowledge_types.setter
    def knowledge_types(self, knowledge_types):
        """Sets the knowledge_types of this GoogleCloudDialogflowV2beta1Document.

        Required. The knowledge type of document content.

        :param knowledge_types: The knowledge_types of this GoogleCloudDialogflowV2beta1Document.
        :type knowledge_types: List[str]
        """
        allowed_values = ["KNOWLEDGE_TYPE_UNSPECIFIED", "FAQ", "EXTRACTIVE_QA", "ARTICLE_SUGGESTION", "AGENT_FACING_SMART_REPLY", "SMART_REPLY"]  # noqa: E501
        if not set(knowledge_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `knowledge_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(knowledge_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._knowledge_types = knowledge_types

    @property
    def latest_reload_status(self):
        """Gets the latest_reload_status of this GoogleCloudDialogflowV2beta1Document.


        :return: The latest_reload_status of this GoogleCloudDialogflowV2beta1Document.
        :rtype: GoogleCloudDialogflowV2beta1DocumentReloadStatus
        """
        return self._latest_reload_status

    @latest_reload_status.setter
    def latest_reload_status(self, latest_reload_status):
        """Sets the latest_reload_status of this GoogleCloudDialogflowV2beta1Document.


        :param latest_reload_status: The latest_reload_status of this GoogleCloudDialogflowV2beta1Document.
        :type latest_reload_status: GoogleCloudDialogflowV2beta1DocumentReloadStatus
        """

        self._latest_reload_status = latest_reload_status

    @property
    def metadata(self):
        """Gets the metadata of this GoogleCloudDialogflowV2beta1Document.

        Optional. Metadata for the document. The metadata supports arbitrary key-value pairs. Suggested use cases include storing a document's title, an external URL distinct from the document's content_uri, etc. The max size of a `key` or a `value` of the metadata is 1024 bytes.

        :return: The metadata of this GoogleCloudDialogflowV2beta1Document.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GoogleCloudDialogflowV2beta1Document.

        Optional. Metadata for the document. The metadata supports arbitrary key-value pairs. Suggested use cases include storing a document's title, an external URL distinct from the document's content_uri, etc. The max size of a `key` or a `value` of the metadata is 1024 bytes.

        :param metadata: The metadata of this GoogleCloudDialogflowV2beta1Document.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def mime_type(self):
        """Gets the mime_type of this GoogleCloudDialogflowV2beta1Document.

        Required. The MIME type of this document.

        :return: The mime_type of this GoogleCloudDialogflowV2beta1Document.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this GoogleCloudDialogflowV2beta1Document.

        Required. The MIME type of this document.

        :param mime_type: The mime_type of this GoogleCloudDialogflowV2beta1Document.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def name(self):
        """Gets the name of this GoogleCloudDialogflowV2beta1Document.

        Optional. The document resource name. The name must be empty when creating a document. Format: `projects//locations//knowledgeBases//documents/`.

        :return: The name of this GoogleCloudDialogflowV2beta1Document.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDialogflowV2beta1Document.

        Optional. The document resource name. The name must be empty when creating a document. Format: `projects//locations//knowledgeBases//documents/`.

        :param name: The name of this GoogleCloudDialogflowV2beta1Document.
        :type name: str
        """

        self._name = name

    @property
    def raw_content(self):
        """Gets the raw_content of this GoogleCloudDialogflowV2beta1Document.

        The raw content of the document. This field is only permitted for EXTRACTIVE_QA and FAQ knowledge types.

        :return: The raw_content of this GoogleCloudDialogflowV2beta1Document.
        :rtype: str
        """
        return self._raw_content

    @raw_content.setter
    def raw_content(self, raw_content):
        """Sets the raw_content of this GoogleCloudDialogflowV2beta1Document.

        The raw content of the document. This field is only permitted for EXTRACTIVE_QA and FAQ knowledge types.

        :param raw_content: The raw_content of this GoogleCloudDialogflowV2beta1Document.
        :type raw_content: str
        """

        self._raw_content = raw_content

    @property
    def state(self):
        """Gets the state of this GoogleCloudDialogflowV2beta1Document.

        Output only. The current state of the document.

        :return: The state of this GoogleCloudDialogflowV2beta1Document.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudDialogflowV2beta1Document.

        Output only. The current state of the document.

        :param state: The state of this GoogleCloudDialogflowV2beta1Document.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "ACTIVE", "UPDATING", "RELOADING", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
