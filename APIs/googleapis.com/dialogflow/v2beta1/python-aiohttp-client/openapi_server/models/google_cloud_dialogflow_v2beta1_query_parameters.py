# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dialogflow_v2beta1_context import GoogleCloudDialogflowV2beta1Context
from openapi_server.models.google_cloud_dialogflow_v2beta1_sentiment_analysis_request_config import GoogleCloudDialogflowV2beta1SentimentAnalysisRequestConfig
from openapi_server.models.google_cloud_dialogflow_v2beta1_session_entity_type import GoogleCloudDialogflowV2beta1SessionEntityType
from openapi_server.models.google_cloud_dialogflow_v2beta1_sub_agent import GoogleCloudDialogflowV2beta1SubAgent
from openapi_server.models.google_type_lat_lng import GoogleTypeLatLng
from openapi_server import util


class GoogleCloudDialogflowV2beta1QueryParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contexts: List[GoogleCloudDialogflowV2beta1Context]=None, geo_location: GoogleTypeLatLng=None, knowledge_base_names: List[str]=None, payload: Dict[str, object]=None, platform: str=None, reset_contexts: bool=None, sentiment_analysis_request_config: GoogleCloudDialogflowV2beta1SentimentAnalysisRequestConfig=None, session_entity_types: List[GoogleCloudDialogflowV2beta1SessionEntityType]=None, sub_agents: List[GoogleCloudDialogflowV2beta1SubAgent]=None, time_zone: str=None, webhook_headers: Dict[str, str]=None):
        """GoogleCloudDialogflowV2beta1QueryParameters - a model defined in OpenAPI

        :param contexts: The contexts of this GoogleCloudDialogflowV2beta1QueryParameters.
        :param geo_location: The geo_location of this GoogleCloudDialogflowV2beta1QueryParameters.
        :param knowledge_base_names: The knowledge_base_names of this GoogleCloudDialogflowV2beta1QueryParameters.
        :param payload: The payload of this GoogleCloudDialogflowV2beta1QueryParameters.
        :param platform: The platform of this GoogleCloudDialogflowV2beta1QueryParameters.
        :param reset_contexts: The reset_contexts of this GoogleCloudDialogflowV2beta1QueryParameters.
        :param sentiment_analysis_request_config: The sentiment_analysis_request_config of this GoogleCloudDialogflowV2beta1QueryParameters.
        :param session_entity_types: The session_entity_types of this GoogleCloudDialogflowV2beta1QueryParameters.
        :param sub_agents: The sub_agents of this GoogleCloudDialogflowV2beta1QueryParameters.
        :param time_zone: The time_zone of this GoogleCloudDialogflowV2beta1QueryParameters.
        :param webhook_headers: The webhook_headers of this GoogleCloudDialogflowV2beta1QueryParameters.
        """
        self.openapi_types = {
            'contexts': List[GoogleCloudDialogflowV2beta1Context],
            'geo_location': GoogleTypeLatLng,
            'knowledge_base_names': List[str],
            'payload': Dict[str, object],
            'platform': str,
            'reset_contexts': bool,
            'sentiment_analysis_request_config': GoogleCloudDialogflowV2beta1SentimentAnalysisRequestConfig,
            'session_entity_types': List[GoogleCloudDialogflowV2beta1SessionEntityType],
            'sub_agents': List[GoogleCloudDialogflowV2beta1SubAgent],
            'time_zone': str,
            'webhook_headers': Dict[str, str]
        }

        self.attribute_map = {
            'contexts': 'contexts',
            'geo_location': 'geoLocation',
            'knowledge_base_names': 'knowledgeBaseNames',
            'payload': 'payload',
            'platform': 'platform',
            'reset_contexts': 'resetContexts',
            'sentiment_analysis_request_config': 'sentimentAnalysisRequestConfig',
            'session_entity_types': 'sessionEntityTypes',
            'sub_agents': 'subAgents',
            'time_zone': 'timeZone',
            'webhook_headers': 'webhookHeaders'
        }

        self._contexts = contexts
        self._geo_location = geo_location
        self._knowledge_base_names = knowledge_base_names
        self._payload = payload
        self._platform = platform
        self._reset_contexts = reset_contexts
        self._sentiment_analysis_request_config = sentiment_analysis_request_config
        self._session_entity_types = session_entity_types
        self._sub_agents = sub_agents
        self._time_zone = time_zone
        self._webhook_headers = webhook_headers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowV2beta1QueryParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowV2beta1QueryParameters of this GoogleCloudDialogflowV2beta1QueryParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contexts(self):
        """Gets the contexts of this GoogleCloudDialogflowV2beta1QueryParameters.

        The collection of contexts to be activated before this query is executed.

        :return: The contexts of this GoogleCloudDialogflowV2beta1QueryParameters.
        :rtype: List[GoogleCloudDialogflowV2beta1Context]
        """
        return self._contexts

    @contexts.setter
    def contexts(self, contexts):
        """Sets the contexts of this GoogleCloudDialogflowV2beta1QueryParameters.

        The collection of contexts to be activated before this query is executed.

        :param contexts: The contexts of this GoogleCloudDialogflowV2beta1QueryParameters.
        :type contexts: List[GoogleCloudDialogflowV2beta1Context]
        """

        self._contexts = contexts

    @property
    def geo_location(self):
        """Gets the geo_location of this GoogleCloudDialogflowV2beta1QueryParameters.


        :return: The geo_location of this GoogleCloudDialogflowV2beta1QueryParameters.
        :rtype: GoogleTypeLatLng
        """
        return self._geo_location

    @geo_location.setter
    def geo_location(self, geo_location):
        """Sets the geo_location of this GoogleCloudDialogflowV2beta1QueryParameters.


        :param geo_location: The geo_location of this GoogleCloudDialogflowV2beta1QueryParameters.
        :type geo_location: GoogleTypeLatLng
        """

        self._geo_location = geo_location

    @property
    def knowledge_base_names(self):
        """Gets the knowledge_base_names of this GoogleCloudDialogflowV2beta1QueryParameters.

        KnowledgeBases to get alternative results from. If not set, the KnowledgeBases enabled in the agent (through UI) will be used. Format: `projects//knowledgeBases/`.

        :return: The knowledge_base_names of this GoogleCloudDialogflowV2beta1QueryParameters.
        :rtype: List[str]
        """
        return self._knowledge_base_names

    @knowledge_base_names.setter
    def knowledge_base_names(self, knowledge_base_names):
        """Sets the knowledge_base_names of this GoogleCloudDialogflowV2beta1QueryParameters.

        KnowledgeBases to get alternative results from. If not set, the KnowledgeBases enabled in the agent (through UI) will be used. Format: `projects//knowledgeBases/`.

        :param knowledge_base_names: The knowledge_base_names of this GoogleCloudDialogflowV2beta1QueryParameters.
        :type knowledge_base_names: List[str]
        """

        self._knowledge_base_names = knowledge_base_names

    @property
    def payload(self):
        """Gets the payload of this GoogleCloudDialogflowV2beta1QueryParameters.

        This field can be used to pass custom data to your webhook. Arbitrary JSON objects are supported. If supplied, the value is used to populate the `WebhookRequest.original_detect_intent_request.payload` field sent to your webhook.

        :return: The payload of this GoogleCloudDialogflowV2beta1QueryParameters.
        :rtype: Dict[str, object]
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this GoogleCloudDialogflowV2beta1QueryParameters.

        This field can be used to pass custom data to your webhook. Arbitrary JSON objects are supported. If supplied, the value is used to populate the `WebhookRequest.original_detect_intent_request.payload` field sent to your webhook.

        :param payload: The payload of this GoogleCloudDialogflowV2beta1QueryParameters.
        :type payload: Dict[str, object]
        """

        self._payload = payload

    @property
    def platform(self):
        """Gets the platform of this GoogleCloudDialogflowV2beta1QueryParameters.

        The platform of the virtual agent response messages. If not empty, only emits messages from this platform in the response. Valid values are the enum names of platform.

        :return: The platform of this GoogleCloudDialogflowV2beta1QueryParameters.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this GoogleCloudDialogflowV2beta1QueryParameters.

        The platform of the virtual agent response messages. If not empty, only emits messages from this platform in the response. Valid values are the enum names of platform.

        :param platform: The platform of this GoogleCloudDialogflowV2beta1QueryParameters.
        :type platform: str
        """

        self._platform = platform

    @property
    def reset_contexts(self):
        """Gets the reset_contexts of this GoogleCloudDialogflowV2beta1QueryParameters.

        Specifies whether to delete all contexts in the current session before the new ones are activated.

        :return: The reset_contexts of this GoogleCloudDialogflowV2beta1QueryParameters.
        :rtype: bool
        """
        return self._reset_contexts

    @reset_contexts.setter
    def reset_contexts(self, reset_contexts):
        """Sets the reset_contexts of this GoogleCloudDialogflowV2beta1QueryParameters.

        Specifies whether to delete all contexts in the current session before the new ones are activated.

        :param reset_contexts: The reset_contexts of this GoogleCloudDialogflowV2beta1QueryParameters.
        :type reset_contexts: bool
        """

        self._reset_contexts = reset_contexts

    @property
    def sentiment_analysis_request_config(self):
        """Gets the sentiment_analysis_request_config of this GoogleCloudDialogflowV2beta1QueryParameters.


        :return: The sentiment_analysis_request_config of this GoogleCloudDialogflowV2beta1QueryParameters.
        :rtype: GoogleCloudDialogflowV2beta1SentimentAnalysisRequestConfig
        """
        return self._sentiment_analysis_request_config

    @sentiment_analysis_request_config.setter
    def sentiment_analysis_request_config(self, sentiment_analysis_request_config):
        """Sets the sentiment_analysis_request_config of this GoogleCloudDialogflowV2beta1QueryParameters.


        :param sentiment_analysis_request_config: The sentiment_analysis_request_config of this GoogleCloudDialogflowV2beta1QueryParameters.
        :type sentiment_analysis_request_config: GoogleCloudDialogflowV2beta1SentimentAnalysisRequestConfig
        """

        self._sentiment_analysis_request_config = sentiment_analysis_request_config

    @property
    def session_entity_types(self):
        """Gets the session_entity_types of this GoogleCloudDialogflowV2beta1QueryParameters.

        Additional session entity types to replace or extend developer entity types with. The entity synonyms apply to all languages and persist for the session of this query.

        :return: The session_entity_types of this GoogleCloudDialogflowV2beta1QueryParameters.
        :rtype: List[GoogleCloudDialogflowV2beta1SessionEntityType]
        """
        return self._session_entity_types

    @session_entity_types.setter
    def session_entity_types(self, session_entity_types):
        """Sets the session_entity_types of this GoogleCloudDialogflowV2beta1QueryParameters.

        Additional session entity types to replace or extend developer entity types with. The entity synonyms apply to all languages and persist for the session of this query.

        :param session_entity_types: The session_entity_types of this GoogleCloudDialogflowV2beta1QueryParameters.
        :type session_entity_types: List[GoogleCloudDialogflowV2beta1SessionEntityType]
        """

        self._session_entity_types = session_entity_types

    @property
    def sub_agents(self):
        """Gets the sub_agents of this GoogleCloudDialogflowV2beta1QueryParameters.

        For mega agent query, directly specify which sub agents to query. If any specified sub agent is not linked to the mega agent, an error will be returned. If empty, Dialogflow will decide which sub agents to query. If specified for a non-mega-agent query, will be silently ignored.

        :return: The sub_agents of this GoogleCloudDialogflowV2beta1QueryParameters.
        :rtype: List[GoogleCloudDialogflowV2beta1SubAgent]
        """
        return self._sub_agents

    @sub_agents.setter
    def sub_agents(self, sub_agents):
        """Sets the sub_agents of this GoogleCloudDialogflowV2beta1QueryParameters.

        For mega agent query, directly specify which sub agents to query. If any specified sub agent is not linked to the mega agent, an error will be returned. If empty, Dialogflow will decide which sub agents to query. If specified for a non-mega-agent query, will be silently ignored.

        :param sub_agents: The sub_agents of this GoogleCloudDialogflowV2beta1QueryParameters.
        :type sub_agents: List[GoogleCloudDialogflowV2beta1SubAgent]
        """

        self._sub_agents = sub_agents

    @property
    def time_zone(self):
        """Gets the time_zone of this GoogleCloudDialogflowV2beta1QueryParameters.

        The time zone of this conversational query from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris. If not provided, the time zone specified in agent settings is used.

        :return: The time_zone of this GoogleCloudDialogflowV2beta1QueryParameters.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this GoogleCloudDialogflowV2beta1QueryParameters.

        The time zone of this conversational query from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris. If not provided, the time zone specified in agent settings is used.

        :param time_zone: The time_zone of this GoogleCloudDialogflowV2beta1QueryParameters.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def webhook_headers(self):
        """Gets the webhook_headers of this GoogleCloudDialogflowV2beta1QueryParameters.

        This field can be used to pass HTTP headers for a webhook call. These headers will be sent to webhook along with the headers that have been configured through Dialogflow web console. The headers defined within this field will overwrite the headers configured through Dialogflow console if there is a conflict. Header names are case-insensitive. Google's specified headers are not allowed. Including: \"Host\", \"Content-Length\", \"Connection\", \"From\", \"User-Agent\", \"Accept-Encoding\", \"If-Modified-Since\", \"If-None-Match\", \"X-Forwarded-For\", etc.

        :return: The webhook_headers of this GoogleCloudDialogflowV2beta1QueryParameters.
        :rtype: Dict[str, str]
        """
        return self._webhook_headers

    @webhook_headers.setter
    def webhook_headers(self, webhook_headers):
        """Sets the webhook_headers of this GoogleCloudDialogflowV2beta1QueryParameters.

        This field can be used to pass HTTP headers for a webhook call. These headers will be sent to webhook along with the headers that have been configured through Dialogflow web console. The headers defined within this field will overwrite the headers configured through Dialogflow console if there is a conflict. Header names are case-insensitive. Google's specified headers are not allowed. Including: \"Host\", \"Content-Length\", \"Connection\", \"From\", \"User-Agent\", \"Accept-Encoding\", \"If-Modified-Since\", \"If-None-Match\", \"X-Forwarded-For\", etc.

        :param webhook_headers: The webhook_headers of this GoogleCloudDialogflowV2beta1QueryParameters.
        :type webhook_headers: Dict[str, str]
        """

        self._webhook_headers = webhook_headers
