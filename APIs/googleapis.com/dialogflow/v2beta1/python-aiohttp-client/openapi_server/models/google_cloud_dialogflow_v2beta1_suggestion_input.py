# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dialogflow_v2beta1_intent_input import GoogleCloudDialogflowV2beta1IntentInput
from openapi_server.models.google_cloud_dialogflow_v2beta1_text_input import GoogleCloudDialogflowV2beta1TextInput
from openapi_server import util


class GoogleCloudDialogflowV2beta1SuggestionInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answer_record: str=None, intent_input: GoogleCloudDialogflowV2beta1IntentInput=None, parameters: Dict[str, object]=None, text_override: GoogleCloudDialogflowV2beta1TextInput=None):
        """GoogleCloudDialogflowV2beta1SuggestionInput - a model defined in OpenAPI

        :param answer_record: The answer_record of this GoogleCloudDialogflowV2beta1SuggestionInput.
        :param intent_input: The intent_input of this GoogleCloudDialogflowV2beta1SuggestionInput.
        :param parameters: The parameters of this GoogleCloudDialogflowV2beta1SuggestionInput.
        :param text_override: The text_override of this GoogleCloudDialogflowV2beta1SuggestionInput.
        """
        self.openapi_types = {
            'answer_record': str,
            'intent_input': GoogleCloudDialogflowV2beta1IntentInput,
            'parameters': Dict[str, object],
            'text_override': GoogleCloudDialogflowV2beta1TextInput
        }

        self.attribute_map = {
            'answer_record': 'answerRecord',
            'intent_input': 'intentInput',
            'parameters': 'parameters',
            'text_override': 'textOverride'
        }

        self._answer_record = answer_record
        self._intent_input = intent_input
        self._parameters = parameters
        self._text_override = text_override

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowV2beta1SuggestionInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowV2beta1SuggestionInput of this GoogleCloudDialogflowV2beta1SuggestionInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answer_record(self):
        """Gets the answer_record of this GoogleCloudDialogflowV2beta1SuggestionInput.

        Required. The ID of a suggestion selected by the human agent. The suggestion(s) were generated in a previous call to request Dialogflow assist. The format is: `projects//locations//answerRecords/` where is an alphanumeric string.

        :return: The answer_record of this GoogleCloudDialogflowV2beta1SuggestionInput.
        :rtype: str
        """
        return self._answer_record

    @answer_record.setter
    def answer_record(self, answer_record):
        """Sets the answer_record of this GoogleCloudDialogflowV2beta1SuggestionInput.

        Required. The ID of a suggestion selected by the human agent. The suggestion(s) were generated in a previous call to request Dialogflow assist. The format is: `projects//locations//answerRecords/` where is an alphanumeric string.

        :param answer_record: The answer_record of this GoogleCloudDialogflowV2beta1SuggestionInput.
        :type answer_record: str
        """

        self._answer_record = answer_record

    @property
    def intent_input(self):
        """Gets the intent_input of this GoogleCloudDialogflowV2beta1SuggestionInput.


        :return: The intent_input of this GoogleCloudDialogflowV2beta1SuggestionInput.
        :rtype: GoogleCloudDialogflowV2beta1IntentInput
        """
        return self._intent_input

    @intent_input.setter
    def intent_input(self, intent_input):
        """Sets the intent_input of this GoogleCloudDialogflowV2beta1SuggestionInput.


        :param intent_input: The intent_input of this GoogleCloudDialogflowV2beta1SuggestionInput.
        :type intent_input: GoogleCloudDialogflowV2beta1IntentInput
        """

        self._intent_input = intent_input

    @property
    def parameters(self):
        """Gets the parameters of this GoogleCloudDialogflowV2beta1SuggestionInput.

        In Dialogflow assist for v3, the user can submit a form by sending a SuggestionInput. The form is uniquely determined by the answer_record field, which identifies a v3 QueryResult containing the current page. The form parameters are specified via the parameters field. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value.

        :return: The parameters of this GoogleCloudDialogflowV2beta1SuggestionInput.
        :rtype: Dict[str, object]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this GoogleCloudDialogflowV2beta1SuggestionInput.

        In Dialogflow assist for v3, the user can submit a form by sending a SuggestionInput. The form is uniquely determined by the answer_record field, which identifies a v3 QueryResult containing the current page. The form parameters are specified via the parameters field. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value.

        :param parameters: The parameters of this GoogleCloudDialogflowV2beta1SuggestionInput.
        :type parameters: Dict[str, object]
        """

        self._parameters = parameters

    @property
    def text_override(self):
        """Gets the text_override of this GoogleCloudDialogflowV2beta1SuggestionInput.


        :return: The text_override of this GoogleCloudDialogflowV2beta1SuggestionInput.
        :rtype: GoogleCloudDialogflowV2beta1TextInput
        """
        return self._text_override

    @text_override.setter
    def text_override(self, text_override):
        """Sets the text_override of this GoogleCloudDialogflowV2beta1SuggestionInput.


        :param text_override: The text_override of this GoogleCloudDialogflowV2beta1SuggestionInput.
        :type text_override: GoogleCloudDialogflowV2beta1TextInput
        """

        self._text_override = text_override
