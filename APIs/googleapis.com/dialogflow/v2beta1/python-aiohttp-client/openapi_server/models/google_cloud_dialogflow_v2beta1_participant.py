# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDialogflowV2beta1Participant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, documents_metadata_filters: Dict[str, str]=None, name: str=None, obfuscated_external_user_id: str=None, role: str=None):
        """GoogleCloudDialogflowV2beta1Participant - a model defined in OpenAPI

        :param documents_metadata_filters: The documents_metadata_filters of this GoogleCloudDialogflowV2beta1Participant.
        :param name: The name of this GoogleCloudDialogflowV2beta1Participant.
        :param obfuscated_external_user_id: The obfuscated_external_user_id of this GoogleCloudDialogflowV2beta1Participant.
        :param role: The role of this GoogleCloudDialogflowV2beta1Participant.
        """
        self.openapi_types = {
            'documents_metadata_filters': Dict[str, str],
            'name': str,
            'obfuscated_external_user_id': str,
            'role': str
        }

        self.attribute_map = {
            'documents_metadata_filters': 'documentsMetadataFilters',
            'name': 'name',
            'obfuscated_external_user_id': 'obfuscatedExternalUserId',
            'role': 'role'
        }

        self._documents_metadata_filters = documents_metadata_filters
        self._name = name
        self._obfuscated_external_user_id = obfuscated_external_user_id
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowV2beta1Participant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowV2beta1Participant of this GoogleCloudDialogflowV2beta1Participant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def documents_metadata_filters(self):
        """Gets the documents_metadata_filters of this GoogleCloudDialogflowV2beta1Participant.

        Optional. Key-value filters on the metadata of documents returned by article suggestion. If specified, article suggestion only returns suggested documents that match all filters in their Document.metadata. Multiple values for a metadata key should be concatenated by comma. For example, filters to match all documents that have 'US' or 'CA' in their market metadata values and 'agent' in their user metadata values will be ``` documents_metadata_filters { key: \"market\" value: \"US,CA\" } documents_metadata_filters { key: \"user\" value: \"agent\" } ```

        :return: The documents_metadata_filters of this GoogleCloudDialogflowV2beta1Participant.
        :rtype: Dict[str, str]
        """
        return self._documents_metadata_filters

    @documents_metadata_filters.setter
    def documents_metadata_filters(self, documents_metadata_filters):
        """Sets the documents_metadata_filters of this GoogleCloudDialogflowV2beta1Participant.

        Optional. Key-value filters on the metadata of documents returned by article suggestion. If specified, article suggestion only returns suggested documents that match all filters in their Document.metadata. Multiple values for a metadata key should be concatenated by comma. For example, filters to match all documents that have 'US' or 'CA' in their market metadata values and 'agent' in their user metadata values will be ``` documents_metadata_filters { key: \"market\" value: \"US,CA\" } documents_metadata_filters { key: \"user\" value: \"agent\" } ```

        :param documents_metadata_filters: The documents_metadata_filters of this GoogleCloudDialogflowV2beta1Participant.
        :type documents_metadata_filters: Dict[str, str]
        """

        self._documents_metadata_filters = documents_metadata_filters

    @property
    def name(self):
        """Gets the name of this GoogleCloudDialogflowV2beta1Participant.

        Optional. The unique identifier of this participant. Format: `projects//locations//conversations//participants/`.

        :return: The name of this GoogleCloudDialogflowV2beta1Participant.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDialogflowV2beta1Participant.

        Optional. The unique identifier of this participant. Format: `projects//locations//conversations//participants/`.

        :param name: The name of this GoogleCloudDialogflowV2beta1Participant.
        :type name: str
        """

        self._name = name

    @property
    def obfuscated_external_user_id(self):
        """Gets the obfuscated_external_user_id of this GoogleCloudDialogflowV2beta1Participant.

        Optional. Obfuscated user id that should be associated with the created participant. You can specify a user id as follows: 1. If you set this field in CreateParticipantRequest or UpdateParticipantRequest, Dialogflow adds the obfuscated user id with the participant. 2. If you set this field in AnalyzeContent or StreamingAnalyzeContent, Dialogflow will update Participant.obfuscated_external_user_id. Dialogflow uses this user id for billing and measurement. If a user with the same obfuscated_external_user_id is created in a later conversation, Dialogflow will know it's the same user. Dialogflow also uses this user id for Agent Assist suggestion personalization. For example, Dialogflow can use it to provide personalized smart reply suggestions for this user. Note: * Please never pass raw user ids to Dialogflow. Always obfuscate your user id first. * Dialogflow only accepts a UTF-8 encoded string, e.g., a hex digest of a hash function like SHA-512. * The length of the user id must be <= 256 characters.

        :return: The obfuscated_external_user_id of this GoogleCloudDialogflowV2beta1Participant.
        :rtype: str
        """
        return self._obfuscated_external_user_id

    @obfuscated_external_user_id.setter
    def obfuscated_external_user_id(self, obfuscated_external_user_id):
        """Sets the obfuscated_external_user_id of this GoogleCloudDialogflowV2beta1Participant.

        Optional. Obfuscated user id that should be associated with the created participant. You can specify a user id as follows: 1. If you set this field in CreateParticipantRequest or UpdateParticipantRequest, Dialogflow adds the obfuscated user id with the participant. 2. If you set this field in AnalyzeContent or StreamingAnalyzeContent, Dialogflow will update Participant.obfuscated_external_user_id. Dialogflow uses this user id for billing and measurement. If a user with the same obfuscated_external_user_id is created in a later conversation, Dialogflow will know it's the same user. Dialogflow also uses this user id for Agent Assist suggestion personalization. For example, Dialogflow can use it to provide personalized smart reply suggestions for this user. Note: * Please never pass raw user ids to Dialogflow. Always obfuscate your user id first. * Dialogflow only accepts a UTF-8 encoded string, e.g., a hex digest of a hash function like SHA-512. * The length of the user id must be <= 256 characters.

        :param obfuscated_external_user_id: The obfuscated_external_user_id of this GoogleCloudDialogflowV2beta1Participant.
        :type obfuscated_external_user_id: str
        """

        self._obfuscated_external_user_id = obfuscated_external_user_id

    @property
    def role(self):
        """Gets the role of this GoogleCloudDialogflowV2beta1Participant.

        Immutable. The role this participant plays in the conversation. This field must be set during participant creation and is then immutable.

        :return: The role of this GoogleCloudDialogflowV2beta1Participant.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this GoogleCloudDialogflowV2beta1Participant.

        Immutable. The role this participant plays in the conversation. This field must be set during participant creation and is then immutable.

        :param role: The role of this GoogleCloudDialogflowV2beta1Participant.
        :type role: str
        """
        allowed_values = ["ROLE_UNSPECIFIED", "HUMAN_AGENT", "AUTOMATED_AGENT", "END_USER"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role
