# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDialogflowV2beta1TelephonyDtmfEvents(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dtmf_events: List[str]=None):
        """GoogleCloudDialogflowV2beta1TelephonyDtmfEvents - a model defined in OpenAPI

        :param dtmf_events: The dtmf_events of this GoogleCloudDialogflowV2beta1TelephonyDtmfEvents.
        """
        self.openapi_types = {
            'dtmf_events': List[str]
        }

        self.attribute_map = {
            'dtmf_events': 'dtmfEvents'
        }

        self._dtmf_events = dtmf_events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowV2beta1TelephonyDtmfEvents':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowV2beta1TelephonyDtmfEvents of this GoogleCloudDialogflowV2beta1TelephonyDtmfEvents.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dtmf_events(self):
        """Gets the dtmf_events of this GoogleCloudDialogflowV2beta1TelephonyDtmfEvents.

        A sequence of TelephonyDtmf digits.

        :return: The dtmf_events of this GoogleCloudDialogflowV2beta1TelephonyDtmfEvents.
        :rtype: List[str]
        """
        return self._dtmf_events

    @dtmf_events.setter
    def dtmf_events(self, dtmf_events):
        """Sets the dtmf_events of this GoogleCloudDialogflowV2beta1TelephonyDtmfEvents.

        A sequence of TelephonyDtmf digits.

        :param dtmf_events: The dtmf_events of this GoogleCloudDialogflowV2beta1TelephonyDtmfEvents.
        :type dtmf_events: List[str]
        """
        allowed_values = ["TELEPHONY_DTMF_UNSPECIFIED", "DTMF_ONE", "DTMF_TWO", "DTMF_THREE", "DTMF_FOUR", "DTMF_FIVE", "DTMF_SIX", "DTMF_SEVEN", "DTMF_EIGHT", "DTMF_NINE", "DTMF_ZERO", "DTMF_A", "DTMF_B", "DTMF_C", "DTMF_D", "DTMF_STAR", "DTMF_POUND"]  # noqa: E501
        if not set(dtmf_events).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `dtmf_events` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(dtmf_events) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._dtmf_events = dtmf_events
