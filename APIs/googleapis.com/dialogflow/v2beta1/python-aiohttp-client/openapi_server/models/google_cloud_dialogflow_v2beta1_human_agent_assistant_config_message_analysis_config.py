# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigMessageAnalysisConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_entity_extraction: bool=None, enable_sentiment_analysis: bool=None):
        """GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigMessageAnalysisConfig - a model defined in OpenAPI

        :param enable_entity_extraction: The enable_entity_extraction of this GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigMessageAnalysisConfig.
        :param enable_sentiment_analysis: The enable_sentiment_analysis of this GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigMessageAnalysisConfig.
        """
        self.openapi_types = {
            'enable_entity_extraction': bool,
            'enable_sentiment_analysis': bool
        }

        self.attribute_map = {
            'enable_entity_extraction': 'enableEntityExtraction',
            'enable_sentiment_analysis': 'enableSentimentAnalysis'
        }

        self._enable_entity_extraction = enable_entity_extraction
        self._enable_sentiment_analysis = enable_sentiment_analysis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigMessageAnalysisConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigMessageAnalysisConfig of this GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigMessageAnalysisConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_entity_extraction(self):
        """Gets the enable_entity_extraction of this GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigMessageAnalysisConfig.

        Enable entity extraction in conversation messages on [agent assist stage](https://cloud.google.com/dialogflow/priv/docs/contact-center/basics#stages). If unspecified, defaults to false. Currently, this feature is not general available, please contact Google to get access.

        :return: The enable_entity_extraction of this GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigMessageAnalysisConfig.
        :rtype: bool
        """
        return self._enable_entity_extraction

    @enable_entity_extraction.setter
    def enable_entity_extraction(self, enable_entity_extraction):
        """Sets the enable_entity_extraction of this GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigMessageAnalysisConfig.

        Enable entity extraction in conversation messages on [agent assist stage](https://cloud.google.com/dialogflow/priv/docs/contact-center/basics#stages). If unspecified, defaults to false. Currently, this feature is not general available, please contact Google to get access.

        :param enable_entity_extraction: The enable_entity_extraction of this GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigMessageAnalysisConfig.
        :type enable_entity_extraction: bool
        """

        self._enable_entity_extraction = enable_entity_extraction

    @property
    def enable_sentiment_analysis(self):
        """Gets the enable_sentiment_analysis of this GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigMessageAnalysisConfig.

        Enable sentiment analysis in conversation messages on [agent assist stage](https://cloud.google.com/dialogflow/priv/docs/contact-center/basics#stages). If unspecified, defaults to false. Sentiment analysis inspects user input and identifies the prevailing subjective opinion, especially to determine a user's attitude as positive, negative, or neutral: https://cloud.google.com/natural-language/docs/basics#sentiment_analysis For Participants.StreamingAnalyzeContent method, result will be in StreamingAnalyzeContentResponse.message.SentimentAnalysisResult. For Participants.AnalyzeContent method, result will be in AnalyzeContentResponse.message.SentimentAnalysisResult For Conversations.ListMessages method, result will be in ListMessagesResponse.messages.SentimentAnalysisResult If Pub/Sub notification is configured, result will be in ConversationEvent.new_message_payload.SentimentAnalysisResult.

        :return: The enable_sentiment_analysis of this GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigMessageAnalysisConfig.
        :rtype: bool
        """
        return self._enable_sentiment_analysis

    @enable_sentiment_analysis.setter
    def enable_sentiment_analysis(self, enable_sentiment_analysis):
        """Sets the enable_sentiment_analysis of this GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigMessageAnalysisConfig.

        Enable sentiment analysis in conversation messages on [agent assist stage](https://cloud.google.com/dialogflow/priv/docs/contact-center/basics#stages). If unspecified, defaults to false. Sentiment analysis inspects user input and identifies the prevailing subjective opinion, especially to determine a user's attitude as positive, negative, or neutral: https://cloud.google.com/natural-language/docs/basics#sentiment_analysis For Participants.StreamingAnalyzeContent method, result will be in StreamingAnalyzeContentResponse.message.SentimentAnalysisResult. For Participants.AnalyzeContent method, result will be in AnalyzeContentResponse.message.SentimentAnalysisResult For Conversations.ListMessages method, result will be in ListMessagesResponse.messages.SentimentAnalysisResult If Pub/Sub notification is configured, result will be in ConversationEvent.new_message_payload.SentimentAnalysisResult.

        :param enable_sentiment_analysis: The enable_sentiment_analysis of this GoogleCloudDialogflowV2beta1HumanAgentAssistantConfigMessageAnalysisConfig.
        :type enable_sentiment_analysis: bool
        """

        self._enable_sentiment_analysis = enable_sentiment_analysis
