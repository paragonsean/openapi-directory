# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDialogflowV2beta1SpeechContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boost: float=None, phrases: List[str]=None):
        """GoogleCloudDialogflowV2beta1SpeechContext - a model defined in OpenAPI

        :param boost: The boost of this GoogleCloudDialogflowV2beta1SpeechContext.
        :param phrases: The phrases of this GoogleCloudDialogflowV2beta1SpeechContext.
        """
        self.openapi_types = {
            'boost': float,
            'phrases': List[str]
        }

        self.attribute_map = {
            'boost': 'boost',
            'phrases': 'phrases'
        }

        self._boost = boost
        self._phrases = phrases

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowV2beta1SpeechContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowV2beta1SpeechContext of this GoogleCloudDialogflowV2beta1SpeechContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boost(self):
        """Gets the boost of this GoogleCloudDialogflowV2beta1SpeechContext.

        Optional. Boost for this context compared to other contexts: * If the boost is positive, Dialogflow will increase the probability that the phrases in this context are recognized over similar sounding phrases. * If the boost is unspecified or non-positive, Dialogflow will not apply any boost. Dialogflow recommends that you use boosts in the range (0, 20] and that you find a value that fits your use case with binary search.

        :return: The boost of this GoogleCloudDialogflowV2beta1SpeechContext.
        :rtype: float
        """
        return self._boost

    @boost.setter
    def boost(self, boost):
        """Sets the boost of this GoogleCloudDialogflowV2beta1SpeechContext.

        Optional. Boost for this context compared to other contexts: * If the boost is positive, Dialogflow will increase the probability that the phrases in this context are recognized over similar sounding phrases. * If the boost is unspecified or non-positive, Dialogflow will not apply any boost. Dialogflow recommends that you use boosts in the range (0, 20] and that you find a value that fits your use case with binary search.

        :param boost: The boost of this GoogleCloudDialogflowV2beta1SpeechContext.
        :type boost: float
        """

        self._boost = boost

    @property
    def phrases(self):
        """Gets the phrases of this GoogleCloudDialogflowV2beta1SpeechContext.

        Optional. A list of strings containing words and phrases that the speech recognizer should recognize with higher likelihood. This list can be used to: * improve accuracy for words and phrases you expect the user to say, e.g. typical commands for your Dialogflow agent * add additional words to the speech recognizer vocabulary * ... See the [Cloud Speech documentation](https://cloud.google.com/speech-to-text/quotas) for usage limits.

        :return: The phrases of this GoogleCloudDialogflowV2beta1SpeechContext.
        :rtype: List[str]
        """
        return self._phrases

    @phrases.setter
    def phrases(self, phrases):
        """Sets the phrases of this GoogleCloudDialogflowV2beta1SpeechContext.

        Optional. A list of strings containing words and phrases that the speech recognizer should recognize with higher likelihood. This list can be used to: * improve accuracy for words and phrases you expect the user to say, e.g. typical commands for your Dialogflow agent * add additional words to the speech recognizer vocabulary * ... See the [Cloud Speech documentation](https://cloud.google.com/speech-to-text/quotas) for usage limits.

        :param phrases: The phrases of this GoogleCloudDialogflowV2beta1SpeechContext.
        :type phrases: List[str]
        """

        self._phrases = phrases
