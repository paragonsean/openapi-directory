# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDialogflowV2beta1Context(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lifespan_count: int=None, name: str=None, parameters: Dict[str, object]=None):
        """GoogleCloudDialogflowV2beta1Context - a model defined in OpenAPI

        :param lifespan_count: The lifespan_count of this GoogleCloudDialogflowV2beta1Context.
        :param name: The name of this GoogleCloudDialogflowV2beta1Context.
        :param parameters: The parameters of this GoogleCloudDialogflowV2beta1Context.
        """
        self.openapi_types = {
            'lifespan_count': int,
            'name': str,
            'parameters': Dict[str, object]
        }

        self.attribute_map = {
            'lifespan_count': 'lifespanCount',
            'name': 'name',
            'parameters': 'parameters'
        }

        self._lifespan_count = lifespan_count
        self._name = name
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowV2beta1Context':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowV2beta1Context of this GoogleCloudDialogflowV2beta1Context.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lifespan_count(self):
        """Gets the lifespan_count of this GoogleCloudDialogflowV2beta1Context.

        Optional. The number of conversational query requests after which the context expires. The default is `0`. If set to `0`, the context expires immediately. Contexts expire automatically after 20 minutes if there are no matching queries.

        :return: The lifespan_count of this GoogleCloudDialogflowV2beta1Context.
        :rtype: int
        """
        return self._lifespan_count

    @lifespan_count.setter
    def lifespan_count(self, lifespan_count):
        """Sets the lifespan_count of this GoogleCloudDialogflowV2beta1Context.

        Optional. The number of conversational query requests after which the context expires. The default is `0`. If set to `0`, the context expires immediately. Contexts expire automatically after 20 minutes if there are no matching queries.

        :param lifespan_count: The lifespan_count of this GoogleCloudDialogflowV2beta1Context.
        :type lifespan_count: int
        """

        self._lifespan_count = lifespan_count

    @property
    def name(self):
        """Gets the name of this GoogleCloudDialogflowV2beta1Context.

        Required. The unique identifier of the context. Supported formats: - `projects//agent/sessions//contexts/`, - `projects//locations//agent/sessions//contexts/`, - `projects//agent/environments//users//sessions//contexts/`, - `projects//locations//agent/environments//users//sessions//contexts/`, The `Context ID` is always converted to lowercase, may only contain characters in `a-zA-Z0-9_-%` and may be at most 250 bytes long. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. The following context names are reserved for internal use by Dialogflow. You should not use these contexts or create contexts with these names: * `__system_counters__` * `*_id_dialog_context` * `*_dialog_params_size`

        :return: The name of this GoogleCloudDialogflowV2beta1Context.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDialogflowV2beta1Context.

        Required. The unique identifier of the context. Supported formats: - `projects//agent/sessions//contexts/`, - `projects//locations//agent/sessions//contexts/`, - `projects//agent/environments//users//sessions//contexts/`, - `projects//locations//agent/environments//users//sessions//contexts/`, The `Context ID` is always converted to lowercase, may only contain characters in `a-zA-Z0-9_-%` and may be at most 250 bytes long. If `Environment ID` is not specified, we assume default 'draft' environment. If `User ID` is not specified, we assume default '-' user. The following context names are reserved for internal use by Dialogflow. You should not use these contexts or create contexts with these names: * `__system_counters__` * `*_id_dialog_context` * `*_dialog_params_size`

        :param name: The name of this GoogleCloudDialogflowV2beta1Context.
        :type name: str
        """

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this GoogleCloudDialogflowV2beta1Context.

        Optional. The collection of parameters associated with this context. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value.

        :return: The parameters of this GoogleCloudDialogflowV2beta1Context.
        :rtype: Dict[str, object]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this GoogleCloudDialogflowV2beta1Context.

        Optional. The collection of parameters associated with this context. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value.

        :param parameters: The parameters of this GoogleCloudDialogflowV2beta1Context.
        :type parameters: Dict[str, object]
        """

        self._parameters = parameters
