# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDialogflowV2beta1VoiceSelectionParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, ssml_gender: str=None):
        """GoogleCloudDialogflowV2beta1VoiceSelectionParams - a model defined in OpenAPI

        :param name: The name of this GoogleCloudDialogflowV2beta1VoiceSelectionParams.
        :param ssml_gender: The ssml_gender of this GoogleCloudDialogflowV2beta1VoiceSelectionParams.
        """
        self.openapi_types = {
            'name': str,
            'ssml_gender': str
        }

        self.attribute_map = {
            'name': 'name',
            'ssml_gender': 'ssmlGender'
        }

        self._name = name
        self._ssml_gender = ssml_gender

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowV2beta1VoiceSelectionParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowV2beta1VoiceSelectionParams of this GoogleCloudDialogflowV2beta1VoiceSelectionParams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this GoogleCloudDialogflowV2beta1VoiceSelectionParams.

        Optional. The name of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and ssml_gender. For the list of available voices, please refer to [Supported voices and languages](https://cloud.google.com/text-to-speech/docs/voices).

        :return: The name of this GoogleCloudDialogflowV2beta1VoiceSelectionParams.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDialogflowV2beta1VoiceSelectionParams.

        Optional. The name of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and ssml_gender. For the list of available voices, please refer to [Supported voices and languages](https://cloud.google.com/text-to-speech/docs/voices).

        :param name: The name of this GoogleCloudDialogflowV2beta1VoiceSelectionParams.
        :type name: str
        """

        self._name = name

    @property
    def ssml_gender(self):
        """Gets the ssml_gender of this GoogleCloudDialogflowV2beta1VoiceSelectionParams.

        Optional. The preferred gender of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and name. Note that this is only a preference, not requirement. If a voice of the appropriate gender is not available, the synthesizer should substitute a voice with a different gender rather than failing the request.

        :return: The ssml_gender of this GoogleCloudDialogflowV2beta1VoiceSelectionParams.
        :rtype: str
        """
        return self._ssml_gender

    @ssml_gender.setter
    def ssml_gender(self, ssml_gender):
        """Sets the ssml_gender of this GoogleCloudDialogflowV2beta1VoiceSelectionParams.

        Optional. The preferred gender of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and name. Note that this is only a preference, not requirement. If a voice of the appropriate gender is not available, the synthesizer should substitute a voice with a different gender rather than failing the request.

        :param ssml_gender: The ssml_gender of this GoogleCloudDialogflowV2beta1VoiceSelectionParams.
        :type ssml_gender: str
        """
        allowed_values = ["SSML_VOICE_GENDER_UNSPECIFIED", "SSML_VOICE_GENDER_MALE", "SSML_VOICE_GENDER_FEMALE", "SSML_VOICE_GENDER_NEUTRAL"]  # noqa: E501
        if ssml_gender not in allowed_values:
            raise ValueError(
                "Invalid value for `ssml_gender` ({0}), must be one of {1}"
                .format(ssml_gender, allowed_values)
            )

        self._ssml_gender = ssml_gender
