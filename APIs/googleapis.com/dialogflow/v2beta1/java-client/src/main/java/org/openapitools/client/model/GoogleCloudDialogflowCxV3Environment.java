/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3EnvironmentTestCasesConfig;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3EnvironmentVersionConfig;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3EnvironmentWebhookConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents an environment for an agent. You can create multiple versions of your agent and publish them to separate environments. When you edit an agent, you are editing the draft agent. At any point, you can save the draft agent as an agent version, which is an immutable snapshot of your agent. When you save the draft agent, it is published to the default environment. When you create agent versions, you can publish them to custom environments. You can create a variety of custom environments for testing, development, production, etc.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:43.085785-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3Environment {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TEST_CASES_CONFIG = "testCasesConfig";
  @SerializedName(SERIALIZED_NAME_TEST_CASES_CONFIG)
  private GoogleCloudDialogflowCxV3EnvironmentTestCasesConfig testCasesConfig;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VERSION_CONFIGS = "versionConfigs";
  @SerializedName(SERIALIZED_NAME_VERSION_CONFIGS)
  private List<GoogleCloudDialogflowCxV3EnvironmentVersionConfig> versionConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEBHOOK_CONFIG = "webhookConfig";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_CONFIG)
  private GoogleCloudDialogflowCxV3EnvironmentWebhookConfig webhookConfig;

  public GoogleCloudDialogflowCxV3Environment() {
  }

  public GoogleCloudDialogflowCxV3Environment(
     String updateTime
  ) {
    this();
    this.updateTime = updateTime;
  }

  public GoogleCloudDialogflowCxV3Environment description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The human-readable description of the environment. The maximum length is 500 characters. If exceeded, the request is rejected.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleCloudDialogflowCxV3Environment displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The human-readable name of the environment (unique in an agent). Limit of 64 characters.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudDialogflowCxV3Environment name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the environment. Format: &#x60;projects//locations//agents//environments/&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudDialogflowCxV3Environment testCasesConfig(GoogleCloudDialogflowCxV3EnvironmentTestCasesConfig testCasesConfig) {
    this.testCasesConfig = testCasesConfig;
    return this;
  }

  /**
   * Get testCasesConfig
   * @return testCasesConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3EnvironmentTestCasesConfig getTestCasesConfig() {
    return testCasesConfig;
  }

  public void setTestCasesConfig(GoogleCloudDialogflowCxV3EnvironmentTestCasesConfig testCasesConfig) {
    this.testCasesConfig = testCasesConfig;
  }


  /**
   * Output only. Update time of this environment.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public GoogleCloudDialogflowCxV3Environment versionConfigs(List<GoogleCloudDialogflowCxV3EnvironmentVersionConfig> versionConfigs) {
    this.versionConfigs = versionConfigs;
    return this;
  }

  public GoogleCloudDialogflowCxV3Environment addVersionConfigsItem(GoogleCloudDialogflowCxV3EnvironmentVersionConfig versionConfigsItem) {
    if (this.versionConfigs == null) {
      this.versionConfigs = new ArrayList<>();
    }
    this.versionConfigs.add(versionConfigsItem);
    return this;
  }

  /**
   * A list of configurations for flow versions. You should include version configs for all flows that are reachable from &#x60;Start Flow&#x60; in the agent. Otherwise, an error will be returned.
   * @return versionConfigs
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDialogflowCxV3EnvironmentVersionConfig> getVersionConfigs() {
    return versionConfigs;
  }

  public void setVersionConfigs(List<GoogleCloudDialogflowCxV3EnvironmentVersionConfig> versionConfigs) {
    this.versionConfigs = versionConfigs;
  }


  public GoogleCloudDialogflowCxV3Environment webhookConfig(GoogleCloudDialogflowCxV3EnvironmentWebhookConfig webhookConfig) {
    this.webhookConfig = webhookConfig;
    return this;
  }

  /**
   * Get webhookConfig
   * @return webhookConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3EnvironmentWebhookConfig getWebhookConfig() {
    return webhookConfig;
  }

  public void setWebhookConfig(GoogleCloudDialogflowCxV3EnvironmentWebhookConfig webhookConfig) {
    this.webhookConfig = webhookConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3Environment googleCloudDialogflowCxV3Environment = (GoogleCloudDialogflowCxV3Environment) o;
    return Objects.equals(this.description, googleCloudDialogflowCxV3Environment.description) &&
        Objects.equals(this.displayName, googleCloudDialogflowCxV3Environment.displayName) &&
        Objects.equals(this.name, googleCloudDialogflowCxV3Environment.name) &&
        Objects.equals(this.testCasesConfig, googleCloudDialogflowCxV3Environment.testCasesConfig) &&
        Objects.equals(this.updateTime, googleCloudDialogflowCxV3Environment.updateTime) &&
        Objects.equals(this.versionConfigs, googleCloudDialogflowCxV3Environment.versionConfigs) &&
        Objects.equals(this.webhookConfig, googleCloudDialogflowCxV3Environment.webhookConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayName, name, testCasesConfig, updateTime, versionConfigs, webhookConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3Environment {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    testCasesConfig: ").append(toIndentedString(testCasesConfig)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    versionConfigs: ").append(toIndentedString(versionConfigs)).append("\n");
    sb.append("    webhookConfig: ").append(toIndentedString(webhookConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("name");
    openapiFields.add("testCasesConfig");
    openapiFields.add("updateTime");
    openapiFields.add("versionConfigs");
    openapiFields.add("webhookConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3Environment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3Environment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3Environment is not found in the empty JSON string", GoogleCloudDialogflowCxV3Environment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3Environment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3Environment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `testCasesConfig`
      if (jsonObj.get("testCasesConfig") != null && !jsonObj.get("testCasesConfig").isJsonNull()) {
        GoogleCloudDialogflowCxV3EnvironmentTestCasesConfig.validateJsonElement(jsonObj.get("testCasesConfig"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if (jsonObj.get("versionConfigs") != null && !jsonObj.get("versionConfigs").isJsonNull()) {
        JsonArray jsonArrayversionConfigs = jsonObj.getAsJsonArray("versionConfigs");
        if (jsonArrayversionConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("versionConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `versionConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("versionConfigs").toString()));
          }

          // validate the optional field `versionConfigs` (array)
          for (int i = 0; i < jsonArrayversionConfigs.size(); i++) {
            GoogleCloudDialogflowCxV3EnvironmentVersionConfig.validateJsonElement(jsonArrayversionConfigs.get(i));
          };
        }
      }
      // validate the optional field `webhookConfig`
      if (jsonObj.get("webhookConfig") != null && !jsonObj.get("webhookConfig").isJsonNull()) {
        GoogleCloudDialogflowCxV3EnvironmentWebhookConfig.validateJsonElement(jsonObj.get("webhookConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3Environment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3Environment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3Environment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3Environment.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3Environment>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3Environment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3Environment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3Environment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3Environment
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3Environment
   */
  public static GoogleCloudDialogflowCxV3Environment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3Environment.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3Environment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

