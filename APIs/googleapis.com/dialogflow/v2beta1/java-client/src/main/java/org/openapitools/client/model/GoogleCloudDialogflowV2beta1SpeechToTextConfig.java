/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configures speech transcription for ConversationProfile.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:43.085785-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowV2beta1SpeechToTextConfig {
  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  /**
   * The speech model used in speech to text. &#x60;SPEECH_MODEL_VARIANT_UNSPECIFIED&#x60;, &#x60;USE_BEST_AVAILABLE&#x60; will be treated as &#x60;USE_ENHANCED&#x60;. It can be overridden in AnalyzeContentRequest and StreamingAnalyzeContentRequest request. If enhanced model variant is specified and an enhanced version of the specified model for the language does not exist, then it would emit an error.
   */
  @JsonAdapter(SpeechModelVariantEnum.Adapter.class)
  public enum SpeechModelVariantEnum {
    SPEECH_MODEL_VARIANT_UNSPECIFIED("SPEECH_MODEL_VARIANT_UNSPECIFIED"),
    
    USE_BEST_AVAILABLE("USE_BEST_AVAILABLE"),
    
    USE_STANDARD("USE_STANDARD"),
    
    USE_ENHANCED("USE_ENHANCED");

    private String value;

    SpeechModelVariantEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SpeechModelVariantEnum fromValue(String value) {
      for (SpeechModelVariantEnum b : SpeechModelVariantEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SpeechModelVariantEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SpeechModelVariantEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SpeechModelVariantEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SpeechModelVariantEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SpeechModelVariantEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SPEECH_MODEL_VARIANT = "speechModelVariant";
  @SerializedName(SERIALIZED_NAME_SPEECH_MODEL_VARIANT)
  private SpeechModelVariantEnum speechModelVariant;

  public static final String SERIALIZED_NAME_USE_TIMEOUT_BASED_ENDPOINTING = "useTimeoutBasedEndpointing";
  @SerializedName(SERIALIZED_NAME_USE_TIMEOUT_BASED_ENDPOINTING)
  private Boolean useTimeoutBasedEndpointing;

  public GoogleCloudDialogflowV2beta1SpeechToTextConfig() {
  }

  public GoogleCloudDialogflowV2beta1SpeechToTextConfig model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Which Speech model to select. Select the model best suited to your domain to get best results. If a model is not explicitly specified, then Dialogflow auto-selects a model based on other parameters in the SpeechToTextConfig and Agent settings. If enhanced speech model is enabled for the agent and an enhanced version of the specified model for the language does not exist, then the speech is recognized using the standard version of the specified model. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics#select-model) for more details. If you specify a model, the following models typically have the best performance: - phone_call (best for Agent Assist and telephony) - latest_short (best for Dialogflow non-telephony) - command_and_search Leave this field unspecified to use [Agent Speech settings](https://cloud.google.com/dialogflow/cx/docs/concept/agent#settings-speech) for model selection.
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public GoogleCloudDialogflowV2beta1SpeechToTextConfig speechModelVariant(SpeechModelVariantEnum speechModelVariant) {
    this.speechModelVariant = speechModelVariant;
    return this;
  }

  /**
   * The speech model used in speech to text. &#x60;SPEECH_MODEL_VARIANT_UNSPECIFIED&#x60;, &#x60;USE_BEST_AVAILABLE&#x60; will be treated as &#x60;USE_ENHANCED&#x60;. It can be overridden in AnalyzeContentRequest and StreamingAnalyzeContentRequest request. If enhanced model variant is specified and an enhanced version of the specified model for the language does not exist, then it would emit an error.
   * @return speechModelVariant
   */
  @javax.annotation.Nullable
  public SpeechModelVariantEnum getSpeechModelVariant() {
    return speechModelVariant;
  }

  public void setSpeechModelVariant(SpeechModelVariantEnum speechModelVariant) {
    this.speechModelVariant = speechModelVariant;
  }


  public GoogleCloudDialogflowV2beta1SpeechToTextConfig useTimeoutBasedEndpointing(Boolean useTimeoutBasedEndpointing) {
    this.useTimeoutBasedEndpointing = useTimeoutBasedEndpointing;
    return this;
  }

  /**
   * Use timeout based endpointing, interpreting endpointer sensitivy as seconds of timeout value.
   * @return useTimeoutBasedEndpointing
   */
  @javax.annotation.Nullable
  public Boolean getUseTimeoutBasedEndpointing() {
    return useTimeoutBasedEndpointing;
  }

  public void setUseTimeoutBasedEndpointing(Boolean useTimeoutBasedEndpointing) {
    this.useTimeoutBasedEndpointing = useTimeoutBasedEndpointing;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowV2beta1SpeechToTextConfig googleCloudDialogflowV2beta1SpeechToTextConfig = (GoogleCloudDialogflowV2beta1SpeechToTextConfig) o;
    return Objects.equals(this.model, googleCloudDialogflowV2beta1SpeechToTextConfig.model) &&
        Objects.equals(this.speechModelVariant, googleCloudDialogflowV2beta1SpeechToTextConfig.speechModelVariant) &&
        Objects.equals(this.useTimeoutBasedEndpointing, googleCloudDialogflowV2beta1SpeechToTextConfig.useTimeoutBasedEndpointing);
  }

  @Override
  public int hashCode() {
    return Objects.hash(model, speechModelVariant, useTimeoutBasedEndpointing);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowV2beta1SpeechToTextConfig {\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    speechModelVariant: ").append(toIndentedString(speechModelVariant)).append("\n");
    sb.append("    useTimeoutBasedEndpointing: ").append(toIndentedString(useTimeoutBasedEndpointing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("model");
    openapiFields.add("speechModelVariant");
    openapiFields.add("useTimeoutBasedEndpointing");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowV2beta1SpeechToTextConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowV2beta1SpeechToTextConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowV2beta1SpeechToTextConfig is not found in the empty JSON string", GoogleCloudDialogflowV2beta1SpeechToTextConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowV2beta1SpeechToTextConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowV2beta1SpeechToTextConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("speechModelVariant") != null && !jsonObj.get("speechModelVariant").isJsonNull()) && !jsonObj.get("speechModelVariant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `speechModelVariant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("speechModelVariant").toString()));
      }
      // validate the optional field `speechModelVariant`
      if (jsonObj.get("speechModelVariant") != null && !jsonObj.get("speechModelVariant").isJsonNull()) {
        SpeechModelVariantEnum.validateJsonElement(jsonObj.get("speechModelVariant"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowV2beta1SpeechToTextConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowV2beta1SpeechToTextConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowV2beta1SpeechToTextConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowV2beta1SpeechToTextConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowV2beta1SpeechToTextConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowV2beta1SpeechToTextConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowV2beta1SpeechToTextConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowV2beta1SpeechToTextConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowV2beta1SpeechToTextConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowV2beta1SpeechToTextConfig
   */
  public static GoogleCloudDialogflowV2beta1SpeechToTextConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowV2beta1SpeechToTextConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowV2beta1SpeechToTextConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

