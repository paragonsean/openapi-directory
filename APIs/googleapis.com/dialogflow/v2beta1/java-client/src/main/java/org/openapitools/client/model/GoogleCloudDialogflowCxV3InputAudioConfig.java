/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3BargeInConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Instructs the speech recognizer on how to process the audio content.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:43.085785-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3InputAudioConfig {
  /**
   * Required. Audio encoding of the audio content to process.
   */
  @JsonAdapter(AudioEncodingEnum.Adapter.class)
  public enum AudioEncodingEnum {
    UNSPECIFIED("AUDIO_ENCODING_UNSPECIFIED"),
    
    LINEAR_16("AUDIO_ENCODING_LINEAR_16"),
    
    FLAC("AUDIO_ENCODING_FLAC"),
    
    MULAW("AUDIO_ENCODING_MULAW"),
    
    AMR("AUDIO_ENCODING_AMR"),
    
    AMR_WB("AUDIO_ENCODING_AMR_WB"),
    
    OGG_OPUS("AUDIO_ENCODING_OGG_OPUS"),
    
    SPEEX_WITH_HEADER_BYTE("AUDIO_ENCODING_SPEEX_WITH_HEADER_BYTE");

    private String value;

    AudioEncodingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AudioEncodingEnum fromValue(String value) {
      for (AudioEncodingEnum b : AudioEncodingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AudioEncodingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AudioEncodingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AudioEncodingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AudioEncodingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AudioEncodingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUDIO_ENCODING = "audioEncoding";
  @SerializedName(SERIALIZED_NAME_AUDIO_ENCODING)
  private AudioEncodingEnum audioEncoding;

  public static final String SERIALIZED_NAME_BARGE_IN_CONFIG = "bargeInConfig";
  @SerializedName(SERIALIZED_NAME_BARGE_IN_CONFIG)
  private GoogleCloudDialogflowCxV3BargeInConfig bargeInConfig;

  public static final String SERIALIZED_NAME_ENABLE_WORD_INFO = "enableWordInfo";
  @SerializedName(SERIALIZED_NAME_ENABLE_WORD_INFO)
  private Boolean enableWordInfo;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  /**
   * Optional. Which variant of the Speech model to use.
   */
  @JsonAdapter(ModelVariantEnum.Adapter.class)
  public enum ModelVariantEnum {
    SPEECH_MODEL_VARIANT_UNSPECIFIED("SPEECH_MODEL_VARIANT_UNSPECIFIED"),
    
    USE_BEST_AVAILABLE("USE_BEST_AVAILABLE"),
    
    USE_STANDARD("USE_STANDARD"),
    
    USE_ENHANCED("USE_ENHANCED");

    private String value;

    ModelVariantEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModelVariantEnum fromValue(String value) {
      for (ModelVariantEnum b : ModelVariantEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModelVariantEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModelVariantEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModelVariantEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModelVariantEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModelVariantEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODEL_VARIANT = "modelVariant";
  @SerializedName(SERIALIZED_NAME_MODEL_VARIANT)
  private ModelVariantEnum modelVariant;

  public static final String SERIALIZED_NAME_OPT_OUT_CONFORMER_MODEL_MIGRATION = "optOutConformerModelMigration";
  @SerializedName(SERIALIZED_NAME_OPT_OUT_CONFORMER_MODEL_MIGRATION)
  private Boolean optOutConformerModelMigration;

  public static final String SERIALIZED_NAME_PHRASE_HINTS = "phraseHints";
  @SerializedName(SERIALIZED_NAME_PHRASE_HINTS)
  private List<String> phraseHints = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAMPLE_RATE_HERTZ = "sampleRateHertz";
  @SerializedName(SERIALIZED_NAME_SAMPLE_RATE_HERTZ)
  private Integer sampleRateHertz;

  public static final String SERIALIZED_NAME_SINGLE_UTTERANCE = "singleUtterance";
  @SerializedName(SERIALIZED_NAME_SINGLE_UTTERANCE)
  private Boolean singleUtterance;

  public GoogleCloudDialogflowCxV3InputAudioConfig() {
  }

  public GoogleCloudDialogflowCxV3InputAudioConfig audioEncoding(AudioEncodingEnum audioEncoding) {
    this.audioEncoding = audioEncoding;
    return this;
  }

  /**
   * Required. Audio encoding of the audio content to process.
   * @return audioEncoding
   */
  @javax.annotation.Nullable
  public AudioEncodingEnum getAudioEncoding() {
    return audioEncoding;
  }

  public void setAudioEncoding(AudioEncodingEnum audioEncoding) {
    this.audioEncoding = audioEncoding;
  }


  public GoogleCloudDialogflowCxV3InputAudioConfig bargeInConfig(GoogleCloudDialogflowCxV3BargeInConfig bargeInConfig) {
    this.bargeInConfig = bargeInConfig;
    return this;
  }

  /**
   * Get bargeInConfig
   * @return bargeInConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3BargeInConfig getBargeInConfig() {
    return bargeInConfig;
  }

  public void setBargeInConfig(GoogleCloudDialogflowCxV3BargeInConfig bargeInConfig) {
    this.bargeInConfig = bargeInConfig;
  }


  public GoogleCloudDialogflowCxV3InputAudioConfig enableWordInfo(Boolean enableWordInfo) {
    this.enableWordInfo = enableWordInfo;
    return this;
  }

  /**
   * Optional. If &#x60;true&#x60;, Dialogflow returns SpeechWordInfo in StreamingRecognitionResult with information about the recognized speech words, e.g. start and end time offsets. If false or unspecified, Speech doesn&#39;t return any word-level information.
   * @return enableWordInfo
   */
  @javax.annotation.Nullable
  public Boolean getEnableWordInfo() {
    return enableWordInfo;
  }

  public void setEnableWordInfo(Boolean enableWordInfo) {
    this.enableWordInfo = enableWordInfo;
  }


  public GoogleCloudDialogflowCxV3InputAudioConfig model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Optional. Which Speech model to select for the given request. For more information, see [Speech models](https://cloud.google.com/dialogflow/cx/docs/concept/speech-models).
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public GoogleCloudDialogflowCxV3InputAudioConfig modelVariant(ModelVariantEnum modelVariant) {
    this.modelVariant = modelVariant;
    return this;
  }

  /**
   * Optional. Which variant of the Speech model to use.
   * @return modelVariant
   */
  @javax.annotation.Nullable
  public ModelVariantEnum getModelVariant() {
    return modelVariant;
  }

  public void setModelVariant(ModelVariantEnum modelVariant) {
    this.modelVariant = modelVariant;
  }


  public GoogleCloudDialogflowCxV3InputAudioConfig optOutConformerModelMigration(Boolean optOutConformerModelMigration) {
    this.optOutConformerModelMigration = optOutConformerModelMigration;
    return this;
  }

  /**
   * If &#x60;true&#x60;, the request will opt out for STT conformer model migration. This field will be deprecated once force migration takes place in June 2024. Please refer to [Dialogflow CX Speech model migration](https://cloud.google.com/dialogflow/cx/docs/concept/speech-model-migration).
   * @return optOutConformerModelMigration
   */
  @javax.annotation.Nullable
  public Boolean getOptOutConformerModelMigration() {
    return optOutConformerModelMigration;
  }

  public void setOptOutConformerModelMigration(Boolean optOutConformerModelMigration) {
    this.optOutConformerModelMigration = optOutConformerModelMigration;
  }


  public GoogleCloudDialogflowCxV3InputAudioConfig phraseHints(List<String> phraseHints) {
    this.phraseHints = phraseHints;
    return this;
  }

  public GoogleCloudDialogflowCxV3InputAudioConfig addPhraseHintsItem(String phraseHintsItem) {
    if (this.phraseHints == null) {
      this.phraseHints = new ArrayList<>();
    }
    this.phraseHints.add(phraseHintsItem);
    return this;
  }

  /**
   * Optional. A list of strings containing words and phrases that the speech recognizer should recognize with higher likelihood. See [the Cloud Speech documentation](https://cloud.google.com/speech-to-text/docs/basics#phrase-hints) for more details.
   * @return phraseHints
   */
  @javax.annotation.Nullable
  public List<String> getPhraseHints() {
    return phraseHints;
  }

  public void setPhraseHints(List<String> phraseHints) {
    this.phraseHints = phraseHints;
  }


  public GoogleCloudDialogflowCxV3InputAudioConfig sampleRateHertz(Integer sampleRateHertz) {
    this.sampleRateHertz = sampleRateHertz;
    return this;
  }

  /**
   * Sample rate (in Hertz) of the audio content sent in the query. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics) for more details.
   * @return sampleRateHertz
   */
  @javax.annotation.Nullable
  public Integer getSampleRateHertz() {
    return sampleRateHertz;
  }

  public void setSampleRateHertz(Integer sampleRateHertz) {
    this.sampleRateHertz = sampleRateHertz;
  }


  public GoogleCloudDialogflowCxV3InputAudioConfig singleUtterance(Boolean singleUtterance) {
    this.singleUtterance = singleUtterance;
    return this;
  }

  /**
   * Optional. If &#x60;false&#x60; (default), recognition does not cease until the client closes the stream. If &#x60;true&#x60;, the recognizer will detect a single spoken utterance in input audio. Recognition ceases when it detects the audio&#39;s voice has stopped or paused. In this case, once a detected intent is received, the client should close the stream and start a new request with a new stream as needed. Note: This setting is relevant only for streaming methods.
   * @return singleUtterance
   */
  @javax.annotation.Nullable
  public Boolean getSingleUtterance() {
    return singleUtterance;
  }

  public void setSingleUtterance(Boolean singleUtterance) {
    this.singleUtterance = singleUtterance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3InputAudioConfig googleCloudDialogflowCxV3InputAudioConfig = (GoogleCloudDialogflowCxV3InputAudioConfig) o;
    return Objects.equals(this.audioEncoding, googleCloudDialogflowCxV3InputAudioConfig.audioEncoding) &&
        Objects.equals(this.bargeInConfig, googleCloudDialogflowCxV3InputAudioConfig.bargeInConfig) &&
        Objects.equals(this.enableWordInfo, googleCloudDialogflowCxV3InputAudioConfig.enableWordInfo) &&
        Objects.equals(this.model, googleCloudDialogflowCxV3InputAudioConfig.model) &&
        Objects.equals(this.modelVariant, googleCloudDialogflowCxV3InputAudioConfig.modelVariant) &&
        Objects.equals(this.optOutConformerModelMigration, googleCloudDialogflowCxV3InputAudioConfig.optOutConformerModelMigration) &&
        Objects.equals(this.phraseHints, googleCloudDialogflowCxV3InputAudioConfig.phraseHints) &&
        Objects.equals(this.sampleRateHertz, googleCloudDialogflowCxV3InputAudioConfig.sampleRateHertz) &&
        Objects.equals(this.singleUtterance, googleCloudDialogflowCxV3InputAudioConfig.singleUtterance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioEncoding, bargeInConfig, enableWordInfo, model, modelVariant, optOutConformerModelMigration, phraseHints, sampleRateHertz, singleUtterance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3InputAudioConfig {\n");
    sb.append("    audioEncoding: ").append(toIndentedString(audioEncoding)).append("\n");
    sb.append("    bargeInConfig: ").append(toIndentedString(bargeInConfig)).append("\n");
    sb.append("    enableWordInfo: ").append(toIndentedString(enableWordInfo)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    modelVariant: ").append(toIndentedString(modelVariant)).append("\n");
    sb.append("    optOutConformerModelMigration: ").append(toIndentedString(optOutConformerModelMigration)).append("\n");
    sb.append("    phraseHints: ").append(toIndentedString(phraseHints)).append("\n");
    sb.append("    sampleRateHertz: ").append(toIndentedString(sampleRateHertz)).append("\n");
    sb.append("    singleUtterance: ").append(toIndentedString(singleUtterance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audioEncoding");
    openapiFields.add("bargeInConfig");
    openapiFields.add("enableWordInfo");
    openapiFields.add("model");
    openapiFields.add("modelVariant");
    openapiFields.add("optOutConformerModelMigration");
    openapiFields.add("phraseHints");
    openapiFields.add("sampleRateHertz");
    openapiFields.add("singleUtterance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3InputAudioConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3InputAudioConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3InputAudioConfig is not found in the empty JSON string", GoogleCloudDialogflowCxV3InputAudioConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3InputAudioConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3InputAudioConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("audioEncoding") != null && !jsonObj.get("audioEncoding").isJsonNull()) && !jsonObj.get("audioEncoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audioEncoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audioEncoding").toString()));
      }
      // validate the optional field `audioEncoding`
      if (jsonObj.get("audioEncoding") != null && !jsonObj.get("audioEncoding").isJsonNull()) {
        AudioEncodingEnum.validateJsonElement(jsonObj.get("audioEncoding"));
      }
      // validate the optional field `bargeInConfig`
      if (jsonObj.get("bargeInConfig") != null && !jsonObj.get("bargeInConfig").isJsonNull()) {
        GoogleCloudDialogflowCxV3BargeInConfig.validateJsonElement(jsonObj.get("bargeInConfig"));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("modelVariant") != null && !jsonObj.get("modelVariant").isJsonNull()) && !jsonObj.get("modelVariant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelVariant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelVariant").toString()));
      }
      // validate the optional field `modelVariant`
      if (jsonObj.get("modelVariant") != null && !jsonObj.get("modelVariant").isJsonNull()) {
        ModelVariantEnum.validateJsonElement(jsonObj.get("modelVariant"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("phraseHints") != null && !jsonObj.get("phraseHints").isJsonNull() && !jsonObj.get("phraseHints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `phraseHints` to be an array in the JSON string but got `%s`", jsonObj.get("phraseHints").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3InputAudioConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3InputAudioConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3InputAudioConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3InputAudioConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3InputAudioConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3InputAudioConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3InputAudioConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3InputAudioConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3InputAudioConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3InputAudioConfig
   */
  public static GoogleCloudDialogflowCxV3InputAudioConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3InputAudioConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3InputAudioConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

