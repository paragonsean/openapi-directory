/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3EventHandler;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3Fulfillment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for how the filling of a parameter should be handled.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:43.085785-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3FormParameterFillBehavior {
  public static final String SERIALIZED_NAME_INITIAL_PROMPT_FULFILLMENT = "initialPromptFulfillment";
  @SerializedName(SERIALIZED_NAME_INITIAL_PROMPT_FULFILLMENT)
  private GoogleCloudDialogflowCxV3Fulfillment initialPromptFulfillment;

  public static final String SERIALIZED_NAME_REPROMPT_EVENT_HANDLERS = "repromptEventHandlers";
  @SerializedName(SERIALIZED_NAME_REPROMPT_EVENT_HANDLERS)
  private List<GoogleCloudDialogflowCxV3EventHandler> repromptEventHandlers = new ArrayList<>();

  public GoogleCloudDialogflowCxV3FormParameterFillBehavior() {
  }

  public GoogleCloudDialogflowCxV3FormParameterFillBehavior initialPromptFulfillment(GoogleCloudDialogflowCxV3Fulfillment initialPromptFulfillment) {
    this.initialPromptFulfillment = initialPromptFulfillment;
    return this;
  }

  /**
   * Get initialPromptFulfillment
   * @return initialPromptFulfillment
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3Fulfillment getInitialPromptFulfillment() {
    return initialPromptFulfillment;
  }

  public void setInitialPromptFulfillment(GoogleCloudDialogflowCxV3Fulfillment initialPromptFulfillment) {
    this.initialPromptFulfillment = initialPromptFulfillment;
  }


  public GoogleCloudDialogflowCxV3FormParameterFillBehavior repromptEventHandlers(List<GoogleCloudDialogflowCxV3EventHandler> repromptEventHandlers) {
    this.repromptEventHandlers = repromptEventHandlers;
    return this;
  }

  public GoogleCloudDialogflowCxV3FormParameterFillBehavior addRepromptEventHandlersItem(GoogleCloudDialogflowCxV3EventHandler repromptEventHandlersItem) {
    if (this.repromptEventHandlers == null) {
      this.repromptEventHandlers = new ArrayList<>();
    }
    this.repromptEventHandlers.add(repromptEventHandlersItem);
    return this;
  }

  /**
   * The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are: * &#x60;sys.no-match-&#x60;, where N can be from 1 to 6 * &#x60;sys.no-match-default&#x60; * &#x60;sys.no-input-&#x60;, where N can be from 1 to 6 * &#x60;sys.no-input-default&#x60; * &#x60;sys.invalid-parameter&#x60; &#x60;initial_prompt_fulfillment&#x60; provides the first prompt for the parameter. If the user&#39;s response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the &#x60;sys.no-match-1&#x60;/&#x60;sys.no-input-1&#x60; handler (if defined) will be called to provide a prompt. The &#x60;sys.no-match-2&#x60;/&#x60;sys.no-input-2&#x60; handler (if defined) will respond to the next no-match/no-input event, and so on. A &#x60;sys.no-match-default&#x60; or &#x60;sys.no-input-default&#x60; handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed. A &#x60;sys.invalid-parameter&#x60; handler can be defined to handle the case where the parameter values have been &#x60;invalidated&#x60; by webhook. For example, if the user&#39;s response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the &#x60;sys.invalid-parameter&#x60; handler (if defined) will be called to provide a prompt. If the event handler for the corresponding event can&#39;t be found on the parameter, &#x60;initial_prompt_fulfillment&#x60; will be re-prompted.
   * @return repromptEventHandlers
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDialogflowCxV3EventHandler> getRepromptEventHandlers() {
    return repromptEventHandlers;
  }

  public void setRepromptEventHandlers(List<GoogleCloudDialogflowCxV3EventHandler> repromptEventHandlers) {
    this.repromptEventHandlers = repromptEventHandlers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3FormParameterFillBehavior googleCloudDialogflowCxV3FormParameterFillBehavior = (GoogleCloudDialogflowCxV3FormParameterFillBehavior) o;
    return Objects.equals(this.initialPromptFulfillment, googleCloudDialogflowCxV3FormParameterFillBehavior.initialPromptFulfillment) &&
        Objects.equals(this.repromptEventHandlers, googleCloudDialogflowCxV3FormParameterFillBehavior.repromptEventHandlers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(initialPromptFulfillment, repromptEventHandlers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3FormParameterFillBehavior {\n");
    sb.append("    initialPromptFulfillment: ").append(toIndentedString(initialPromptFulfillment)).append("\n");
    sb.append("    repromptEventHandlers: ").append(toIndentedString(repromptEventHandlers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("initialPromptFulfillment");
    openapiFields.add("repromptEventHandlers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3FormParameterFillBehavior
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3FormParameterFillBehavior.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3FormParameterFillBehavior is not found in the empty JSON string", GoogleCloudDialogflowCxV3FormParameterFillBehavior.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3FormParameterFillBehavior.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3FormParameterFillBehavior` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `initialPromptFulfillment`
      if (jsonObj.get("initialPromptFulfillment") != null && !jsonObj.get("initialPromptFulfillment").isJsonNull()) {
        GoogleCloudDialogflowCxV3Fulfillment.validateJsonElement(jsonObj.get("initialPromptFulfillment"));
      }
      if (jsonObj.get("repromptEventHandlers") != null && !jsonObj.get("repromptEventHandlers").isJsonNull()) {
        JsonArray jsonArrayrepromptEventHandlers = jsonObj.getAsJsonArray("repromptEventHandlers");
        if (jsonArrayrepromptEventHandlers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("repromptEventHandlers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `repromptEventHandlers` to be an array in the JSON string but got `%s`", jsonObj.get("repromptEventHandlers").toString()));
          }

          // validate the optional field `repromptEventHandlers` (array)
          for (int i = 0; i < jsonArrayrepromptEventHandlers.size(); i++) {
            GoogleCloudDialogflowCxV3EventHandler.validateJsonElement(jsonArrayrepromptEventHandlers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3FormParameterFillBehavior.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3FormParameterFillBehavior' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3FormParameterFillBehavior> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3FormParameterFillBehavior.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3FormParameterFillBehavior>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3FormParameterFillBehavior value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3FormParameterFillBehavior read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3FormParameterFillBehavior given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3FormParameterFillBehavior
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3FormParameterFillBehavior
   */
  public static GoogleCloudDialogflowCxV3FormParameterFillBehavior fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3FormParameterFillBehavior.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3FormParameterFillBehavior to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

