/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudDialogflowV2beta1IntentInput;
import org.openapitools.client.model.GoogleCloudDialogflowV2beta1TextInput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the selection of a suggestion.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:43.085785-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowV2beta1SuggestionInput {
  public static final String SERIALIZED_NAME_ANSWER_RECORD = "answerRecord";
  @SerializedName(SERIALIZED_NAME_ANSWER_RECORD)
  private String answerRecord;

  public static final String SERIALIZED_NAME_INTENT_INPUT = "intentInput";
  @SerializedName(SERIALIZED_NAME_INTENT_INPUT)
  private GoogleCloudDialogflowV2beta1IntentInput intentInput;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, Object> parameters = new HashMap<>();

  public static final String SERIALIZED_NAME_TEXT_OVERRIDE = "textOverride";
  @SerializedName(SERIALIZED_NAME_TEXT_OVERRIDE)
  private GoogleCloudDialogflowV2beta1TextInput textOverride;

  public GoogleCloudDialogflowV2beta1SuggestionInput() {
  }

  public GoogleCloudDialogflowV2beta1SuggestionInput answerRecord(String answerRecord) {
    this.answerRecord = answerRecord;
    return this;
  }

  /**
   * Required. The ID of a suggestion selected by the human agent. The suggestion(s) were generated in a previous call to request Dialogflow assist. The format is: &#x60;projects//locations//answerRecords/&#x60; where is an alphanumeric string.
   * @return answerRecord
   */
  @javax.annotation.Nullable
  public String getAnswerRecord() {
    return answerRecord;
  }

  public void setAnswerRecord(String answerRecord) {
    this.answerRecord = answerRecord;
  }


  public GoogleCloudDialogflowV2beta1SuggestionInput intentInput(GoogleCloudDialogflowV2beta1IntentInput intentInput) {
    this.intentInput = intentInput;
    return this;
  }

  /**
   * Get intentInput
   * @return intentInput
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowV2beta1IntentInput getIntentInput() {
    return intentInput;
  }

  public void setIntentInput(GoogleCloudDialogflowV2beta1IntentInput intentInput) {
    this.intentInput = intentInput;
  }


  public GoogleCloudDialogflowV2beta1SuggestionInput parameters(Map<String, Object> parameters) {
    this.parameters = parameters;
    return this;
  }

  public GoogleCloudDialogflowV2beta1SuggestionInput putParametersItem(String key, Object parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * In Dialogflow assist for v3, the user can submit a form by sending a SuggestionInput. The form is uniquely determined by the answer_record field, which identifies a v3 QueryResult containing the current page. The form parameters are specified via the parameters field. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter&#39;s entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter&#39;s entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, Object> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, Object> parameters) {
    this.parameters = parameters;
  }


  public GoogleCloudDialogflowV2beta1SuggestionInput textOverride(GoogleCloudDialogflowV2beta1TextInput textOverride) {
    this.textOverride = textOverride;
    return this;
  }

  /**
   * Get textOverride
   * @return textOverride
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowV2beta1TextInput getTextOverride() {
    return textOverride;
  }

  public void setTextOverride(GoogleCloudDialogflowV2beta1TextInput textOverride) {
    this.textOverride = textOverride;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowV2beta1SuggestionInput googleCloudDialogflowV2beta1SuggestionInput = (GoogleCloudDialogflowV2beta1SuggestionInput) o;
    return Objects.equals(this.answerRecord, googleCloudDialogflowV2beta1SuggestionInput.answerRecord) &&
        Objects.equals(this.intentInput, googleCloudDialogflowV2beta1SuggestionInput.intentInput) &&
        Objects.equals(this.parameters, googleCloudDialogflowV2beta1SuggestionInput.parameters) &&
        Objects.equals(this.textOverride, googleCloudDialogflowV2beta1SuggestionInput.textOverride);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answerRecord, intentInput, parameters, textOverride);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowV2beta1SuggestionInput {\n");
    sb.append("    answerRecord: ").append(toIndentedString(answerRecord)).append("\n");
    sb.append("    intentInput: ").append(toIndentedString(intentInput)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    textOverride: ").append(toIndentedString(textOverride)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("answerRecord");
    openapiFields.add("intentInput");
    openapiFields.add("parameters");
    openapiFields.add("textOverride");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowV2beta1SuggestionInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowV2beta1SuggestionInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowV2beta1SuggestionInput is not found in the empty JSON string", GoogleCloudDialogflowV2beta1SuggestionInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowV2beta1SuggestionInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowV2beta1SuggestionInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("answerRecord") != null && !jsonObj.get("answerRecord").isJsonNull()) && !jsonObj.get("answerRecord").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `answerRecord` to be a primitive type in the JSON string but got `%s`", jsonObj.get("answerRecord").toString()));
      }
      // validate the optional field `intentInput`
      if (jsonObj.get("intentInput") != null && !jsonObj.get("intentInput").isJsonNull()) {
        GoogleCloudDialogflowV2beta1IntentInput.validateJsonElement(jsonObj.get("intentInput"));
      }
      // validate the optional field `textOverride`
      if (jsonObj.get("textOverride") != null && !jsonObj.get("textOverride").isJsonNull()) {
        GoogleCloudDialogflowV2beta1TextInput.validateJsonElement(jsonObj.get("textOverride"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowV2beta1SuggestionInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowV2beta1SuggestionInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowV2beta1SuggestionInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowV2beta1SuggestionInput.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowV2beta1SuggestionInput>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowV2beta1SuggestionInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowV2beta1SuggestionInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowV2beta1SuggestionInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowV2beta1SuggestionInput
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowV2beta1SuggestionInput
   */
  public static GoogleCloudDialogflowV2beta1SuggestionInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowV2beta1SuggestionInput.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowV2beta1SuggestionInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

