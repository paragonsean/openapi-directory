/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3WebhookGenericWebService;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3WebhookServiceDirectoryConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Webhooks host the developer&#39;s business logic. During a session, webhooks allow the developer to use the data extracted by Dialogflow&#39;s natural language processing to generate dynamic responses, validate collected data, or trigger actions on the backend.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:43.085785-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3Webhook {
  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_GENERIC_WEB_SERVICE = "genericWebService";
  @SerializedName(SERIALIZED_NAME_GENERIC_WEB_SERVICE)
  private GoogleCloudDialogflowCxV3WebhookGenericWebService genericWebService;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERVICE_DIRECTORY = "serviceDirectory";
  @SerializedName(SERIALIZED_NAME_SERVICE_DIRECTORY)
  private GoogleCloudDialogflowCxV3WebhookServiceDirectoryConfig serviceDirectory;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private String timeout;

  public GoogleCloudDialogflowCxV3Webhook() {
  }

  public GoogleCloudDialogflowCxV3Webhook disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Indicates whether the webhook is disabled.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public GoogleCloudDialogflowCxV3Webhook displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The human-readable name of the webhook, unique within the agent.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudDialogflowCxV3Webhook genericWebService(GoogleCloudDialogflowCxV3WebhookGenericWebService genericWebService) {
    this.genericWebService = genericWebService;
    return this;
  }

  /**
   * Get genericWebService
   * @return genericWebService
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3WebhookGenericWebService getGenericWebService() {
    return genericWebService;
  }

  public void setGenericWebService(GoogleCloudDialogflowCxV3WebhookGenericWebService genericWebService) {
    this.genericWebService = genericWebService;
  }


  public GoogleCloudDialogflowCxV3Webhook name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The unique identifier of the webhook. Required for the Webhooks.UpdateWebhook method. Webhooks.CreateWebhook populates the name automatically. Format: &#x60;projects//locations//agents//webhooks/&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudDialogflowCxV3Webhook serviceDirectory(GoogleCloudDialogflowCxV3WebhookServiceDirectoryConfig serviceDirectory) {
    this.serviceDirectory = serviceDirectory;
    return this;
  }

  /**
   * Get serviceDirectory
   * @return serviceDirectory
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3WebhookServiceDirectoryConfig getServiceDirectory() {
    return serviceDirectory;
  }

  public void setServiceDirectory(GoogleCloudDialogflowCxV3WebhookServiceDirectoryConfig serviceDirectory) {
    this.serviceDirectory = serviceDirectory;
  }


  public GoogleCloudDialogflowCxV3Webhook timeout(String timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Webhook execution timeout. Execution is considered failed if Dialogflow doesn&#39;t receive a response from webhook at the end of the timeout period. Defaults to 5 seconds, maximum allowed timeout is 30 seconds.
   * @return timeout
   */
  @javax.annotation.Nullable
  public String getTimeout() {
    return timeout;
  }

  public void setTimeout(String timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3Webhook googleCloudDialogflowCxV3Webhook = (GoogleCloudDialogflowCxV3Webhook) o;
    return Objects.equals(this.disabled, googleCloudDialogflowCxV3Webhook.disabled) &&
        Objects.equals(this.displayName, googleCloudDialogflowCxV3Webhook.displayName) &&
        Objects.equals(this.genericWebService, googleCloudDialogflowCxV3Webhook.genericWebService) &&
        Objects.equals(this.name, googleCloudDialogflowCxV3Webhook.name) &&
        Objects.equals(this.serviceDirectory, googleCloudDialogflowCxV3Webhook.serviceDirectory) &&
        Objects.equals(this.timeout, googleCloudDialogflowCxV3Webhook.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disabled, displayName, genericWebService, name, serviceDirectory, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3Webhook {\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    genericWebService: ").append(toIndentedString(genericWebService)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serviceDirectory: ").append(toIndentedString(serviceDirectory)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disabled");
    openapiFields.add("displayName");
    openapiFields.add("genericWebService");
    openapiFields.add("name");
    openapiFields.add("serviceDirectory");
    openapiFields.add("timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3Webhook
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3Webhook.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3Webhook is not found in the empty JSON string", GoogleCloudDialogflowCxV3Webhook.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3Webhook.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3Webhook` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `genericWebService`
      if (jsonObj.get("genericWebService") != null && !jsonObj.get("genericWebService").isJsonNull()) {
        GoogleCloudDialogflowCxV3WebhookGenericWebService.validateJsonElement(jsonObj.get("genericWebService"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `serviceDirectory`
      if (jsonObj.get("serviceDirectory") != null && !jsonObj.get("serviceDirectory").isJsonNull()) {
        GoogleCloudDialogflowCxV3WebhookServiceDirectoryConfig.validateJsonElement(jsonObj.get("serviceDirectory"));
      }
      if ((jsonObj.get("timeout") != null && !jsonObj.get("timeout").isJsonNull()) && !jsonObj.get("timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeout").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3Webhook.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3Webhook' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3Webhook> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3Webhook.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3Webhook>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3Webhook value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3Webhook read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3Webhook given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3Webhook
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3Webhook
   */
  public static GoogleCloudDialogflowCxV3Webhook fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3Webhook.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3Webhook to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

