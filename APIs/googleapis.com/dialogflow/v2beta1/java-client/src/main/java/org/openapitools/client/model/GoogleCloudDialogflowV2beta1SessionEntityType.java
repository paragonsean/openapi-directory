/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDialogflowV2beta1EntityTypeEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A session represents a conversation between a Dialogflow agent and an end-user. You can create special entities, called session entities, during a session. Session entities can extend or replace custom entity types and only exist during the session that they were created for. All session data, including session entities, is stored by Dialogflow for 20 minutes. For more information, see the [session entity guide](https://cloud.google.com/dialogflow/docs/entities-session).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:43.085785-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowV2beta1SessionEntityType {
  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  private List<GoogleCloudDialogflowV2beta1EntityTypeEntity> entities = new ArrayList<>();

  /**
   * Required. Indicates whether the additional data should override or supplement the custom entity type definition.
   */
  @JsonAdapter(EntityOverrideModeEnum.Adapter.class)
  public enum EntityOverrideModeEnum {
    UNSPECIFIED("ENTITY_OVERRIDE_MODE_UNSPECIFIED"),
    
    OVERRIDE("ENTITY_OVERRIDE_MODE_OVERRIDE"),
    
    SUPPLEMENT("ENTITY_OVERRIDE_MODE_SUPPLEMENT");

    private String value;

    EntityOverrideModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityOverrideModeEnum fromValue(String value) {
      for (EntityOverrideModeEnum b : EntityOverrideModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityOverrideModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityOverrideModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityOverrideModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityOverrideModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntityOverrideModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_OVERRIDE_MODE = "entityOverrideMode";
  @SerializedName(SERIALIZED_NAME_ENTITY_OVERRIDE_MODE)
  private EntityOverrideModeEnum entityOverrideMode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public GoogleCloudDialogflowV2beta1SessionEntityType() {
  }

  public GoogleCloudDialogflowV2beta1SessionEntityType entities(List<GoogleCloudDialogflowV2beta1EntityTypeEntity> entities) {
    this.entities = entities;
    return this;
  }

  public GoogleCloudDialogflowV2beta1SessionEntityType addEntitiesItem(GoogleCloudDialogflowV2beta1EntityTypeEntity entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

  /**
   * Required. The collection of entities associated with this session entity type.
   * @return entities
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDialogflowV2beta1EntityTypeEntity> getEntities() {
    return entities;
  }

  public void setEntities(List<GoogleCloudDialogflowV2beta1EntityTypeEntity> entities) {
    this.entities = entities;
  }


  public GoogleCloudDialogflowV2beta1SessionEntityType entityOverrideMode(EntityOverrideModeEnum entityOverrideMode) {
    this.entityOverrideMode = entityOverrideMode;
    return this;
  }

  /**
   * Required. Indicates whether the additional data should override or supplement the custom entity type definition.
   * @return entityOverrideMode
   */
  @javax.annotation.Nullable
  public EntityOverrideModeEnum getEntityOverrideMode() {
    return entityOverrideMode;
  }

  public void setEntityOverrideMode(EntityOverrideModeEnum entityOverrideMode) {
    this.entityOverrideMode = entityOverrideMode;
  }


  public GoogleCloudDialogflowV2beta1SessionEntityType name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The unique identifier of this session entity type. Supported formats: - &#x60;projects//agent/sessions//entityTypes/&#x60; - &#x60;projects//locations//agent/sessions//entityTypes/&#x60; - &#x60;projects//agent/environments//users//sessions//entityTypes/&#x60; - &#x60;projects//locations//agent/environments/ /users//sessions//entityTypes/&#x60; If &#x60;Location ID&#x60; is not specified we assume default &#39;us&#39; location. If &#x60;Environment ID&#x60; is not specified, we assume default &#39;draft&#39; environment. If &#x60;User ID&#x60; is not specified, we assume default &#39;-&#39; user. &#x60;&#x60; must be the display name of an existing entity type in the same agent that will be overridden or supplemented.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowV2beta1SessionEntityType googleCloudDialogflowV2beta1SessionEntityType = (GoogleCloudDialogflowV2beta1SessionEntityType) o;
    return Objects.equals(this.entities, googleCloudDialogflowV2beta1SessionEntityType.entities) &&
        Objects.equals(this.entityOverrideMode, googleCloudDialogflowV2beta1SessionEntityType.entityOverrideMode) &&
        Objects.equals(this.name, googleCloudDialogflowV2beta1SessionEntityType.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entities, entityOverrideMode, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowV2beta1SessionEntityType {\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    entityOverrideMode: ").append(toIndentedString(entityOverrideMode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entities");
    openapiFields.add("entityOverrideMode");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowV2beta1SessionEntityType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowV2beta1SessionEntityType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowV2beta1SessionEntityType is not found in the empty JSON string", GoogleCloudDialogflowV2beta1SessionEntityType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowV2beta1SessionEntityType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowV2beta1SessionEntityType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("entities") != null && !jsonObj.get("entities").isJsonNull()) {
        JsonArray jsonArrayentities = jsonObj.getAsJsonArray("entities");
        if (jsonArrayentities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entities` to be an array in the JSON string but got `%s`", jsonObj.get("entities").toString()));
          }

          // validate the optional field `entities` (array)
          for (int i = 0; i < jsonArrayentities.size(); i++) {
            GoogleCloudDialogflowV2beta1EntityTypeEntity.validateJsonElement(jsonArrayentities.get(i));
          };
        }
      }
      if ((jsonObj.get("entityOverrideMode") != null && !jsonObj.get("entityOverrideMode").isJsonNull()) && !jsonObj.get("entityOverrideMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityOverrideMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityOverrideMode").toString()));
      }
      // validate the optional field `entityOverrideMode`
      if (jsonObj.get("entityOverrideMode") != null && !jsonObj.get("entityOverrideMode").isJsonNull()) {
        EntityOverrideModeEnum.validateJsonElement(jsonObj.get("entityOverrideMode"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowV2beta1SessionEntityType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowV2beta1SessionEntityType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowV2beta1SessionEntityType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowV2beta1SessionEntityType.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowV2beta1SessionEntityType>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowV2beta1SessionEntityType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowV2beta1SessionEntityType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowV2beta1SessionEntityType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowV2beta1SessionEntityType
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowV2beta1SessionEntityType
   */
  public static GoogleCloudDialogflowV2beta1SessionEntityType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowV2beta1SessionEntityType.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowV2beta1SessionEntityType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

