/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDialogflowV2beta1AgentAssistantFeedback;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents feedback the customer has about the quality &amp; correctness of a certain answer in a conversation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:43.085785-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowV2beta1AnswerFeedback {
  public static final String SERIALIZED_NAME_AGENT_ASSISTANT_DETAIL_FEEDBACK = "agentAssistantDetailFeedback";
  @SerializedName(SERIALIZED_NAME_AGENT_ASSISTANT_DETAIL_FEEDBACK)
  private GoogleCloudDialogflowV2beta1AgentAssistantFeedback agentAssistantDetailFeedback;

  public static final String SERIALIZED_NAME_CLICK_TIME = "clickTime";
  @SerializedName(SERIALIZED_NAME_CLICK_TIME)
  private String clickTime;

  public static final String SERIALIZED_NAME_CLICKED = "clicked";
  @SerializedName(SERIALIZED_NAME_CLICKED)
  private Boolean clicked;

  /**
   * The correctness level of the specific answer.
   */
  @JsonAdapter(CorrectnessLevelEnum.Adapter.class)
  public enum CorrectnessLevelEnum {
    CORRECTNESS_LEVEL_UNSPECIFIED("CORRECTNESS_LEVEL_UNSPECIFIED"),
    
    NOT_CORRECT("NOT_CORRECT"),
    
    PARTIALLY_CORRECT("PARTIALLY_CORRECT"),
    
    FULLY_CORRECT("FULLY_CORRECT");

    private String value;

    CorrectnessLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CorrectnessLevelEnum fromValue(String value) {
      for (CorrectnessLevelEnum b : CorrectnessLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CorrectnessLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CorrectnessLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CorrectnessLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CorrectnessLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CorrectnessLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CORRECTNESS_LEVEL = "correctnessLevel";
  @SerializedName(SERIALIZED_NAME_CORRECTNESS_LEVEL)
  private CorrectnessLevelEnum correctnessLevel;

  public static final String SERIALIZED_NAME_DISPLAY_TIME = "displayTime";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TIME)
  private String displayTime;

  public static final String SERIALIZED_NAME_DISPLAYED = "displayed";
  @SerializedName(SERIALIZED_NAME_DISPLAYED)
  private Boolean displayed;

  public GoogleCloudDialogflowV2beta1AnswerFeedback() {
  }

  public GoogleCloudDialogflowV2beta1AnswerFeedback agentAssistantDetailFeedback(GoogleCloudDialogflowV2beta1AgentAssistantFeedback agentAssistantDetailFeedback) {
    this.agentAssistantDetailFeedback = agentAssistantDetailFeedback;
    return this;
  }

  /**
   * Get agentAssistantDetailFeedback
   * @return agentAssistantDetailFeedback
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowV2beta1AgentAssistantFeedback getAgentAssistantDetailFeedback() {
    return agentAssistantDetailFeedback;
  }

  public void setAgentAssistantDetailFeedback(GoogleCloudDialogflowV2beta1AgentAssistantFeedback agentAssistantDetailFeedback) {
    this.agentAssistantDetailFeedback = agentAssistantDetailFeedback;
  }


  public GoogleCloudDialogflowV2beta1AnswerFeedback clickTime(String clickTime) {
    this.clickTime = clickTime;
    return this;
  }

  /**
   * Time when the answer/item was clicked.
   * @return clickTime
   */
  @javax.annotation.Nullable
  public String getClickTime() {
    return clickTime;
  }

  public void setClickTime(String clickTime) {
    this.clickTime = clickTime;
  }


  public GoogleCloudDialogflowV2beta1AnswerFeedback clicked(Boolean clicked) {
    this.clicked = clicked;
    return this;
  }

  /**
   * Indicates whether the answer/item was clicked by the human agent or not. Default to false. For knowledge search, the answer record is considered to be clicked if the answer was copied or any URI was clicked.
   * @return clicked
   */
  @javax.annotation.Nullable
  public Boolean getClicked() {
    return clicked;
  }

  public void setClicked(Boolean clicked) {
    this.clicked = clicked;
  }


  public GoogleCloudDialogflowV2beta1AnswerFeedback correctnessLevel(CorrectnessLevelEnum correctnessLevel) {
    this.correctnessLevel = correctnessLevel;
    return this;
  }

  /**
   * The correctness level of the specific answer.
   * @return correctnessLevel
   */
  @javax.annotation.Nullable
  public CorrectnessLevelEnum getCorrectnessLevel() {
    return correctnessLevel;
  }

  public void setCorrectnessLevel(CorrectnessLevelEnum correctnessLevel) {
    this.correctnessLevel = correctnessLevel;
  }


  public GoogleCloudDialogflowV2beta1AnswerFeedback displayTime(String displayTime) {
    this.displayTime = displayTime;
    return this;
  }

  /**
   * Time when the answer/item was displayed.
   * @return displayTime
   */
  @javax.annotation.Nullable
  public String getDisplayTime() {
    return displayTime;
  }

  public void setDisplayTime(String displayTime) {
    this.displayTime = displayTime;
  }


  public GoogleCloudDialogflowV2beta1AnswerFeedback displayed(Boolean displayed) {
    this.displayed = displayed;
    return this;
  }

  /**
   * Indicates whether the answer/item was displayed to the human agent in the agent desktop UI. Default to false.
   * @return displayed
   */
  @javax.annotation.Nullable
  public Boolean getDisplayed() {
    return displayed;
  }

  public void setDisplayed(Boolean displayed) {
    this.displayed = displayed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowV2beta1AnswerFeedback googleCloudDialogflowV2beta1AnswerFeedback = (GoogleCloudDialogflowV2beta1AnswerFeedback) o;
    return Objects.equals(this.agentAssistantDetailFeedback, googleCloudDialogflowV2beta1AnswerFeedback.agentAssistantDetailFeedback) &&
        Objects.equals(this.clickTime, googleCloudDialogflowV2beta1AnswerFeedback.clickTime) &&
        Objects.equals(this.clicked, googleCloudDialogflowV2beta1AnswerFeedback.clicked) &&
        Objects.equals(this.correctnessLevel, googleCloudDialogflowV2beta1AnswerFeedback.correctnessLevel) &&
        Objects.equals(this.displayTime, googleCloudDialogflowV2beta1AnswerFeedback.displayTime) &&
        Objects.equals(this.displayed, googleCloudDialogflowV2beta1AnswerFeedback.displayed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentAssistantDetailFeedback, clickTime, clicked, correctnessLevel, displayTime, displayed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowV2beta1AnswerFeedback {\n");
    sb.append("    agentAssistantDetailFeedback: ").append(toIndentedString(agentAssistantDetailFeedback)).append("\n");
    sb.append("    clickTime: ").append(toIndentedString(clickTime)).append("\n");
    sb.append("    clicked: ").append(toIndentedString(clicked)).append("\n");
    sb.append("    correctnessLevel: ").append(toIndentedString(correctnessLevel)).append("\n");
    sb.append("    displayTime: ").append(toIndentedString(displayTime)).append("\n");
    sb.append("    displayed: ").append(toIndentedString(displayed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentAssistantDetailFeedback");
    openapiFields.add("clickTime");
    openapiFields.add("clicked");
    openapiFields.add("correctnessLevel");
    openapiFields.add("displayTime");
    openapiFields.add("displayed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowV2beta1AnswerFeedback
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowV2beta1AnswerFeedback.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowV2beta1AnswerFeedback is not found in the empty JSON string", GoogleCloudDialogflowV2beta1AnswerFeedback.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowV2beta1AnswerFeedback.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowV2beta1AnswerFeedback` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `agentAssistantDetailFeedback`
      if (jsonObj.get("agentAssistantDetailFeedback") != null && !jsonObj.get("agentAssistantDetailFeedback").isJsonNull()) {
        GoogleCloudDialogflowV2beta1AgentAssistantFeedback.validateJsonElement(jsonObj.get("agentAssistantDetailFeedback"));
      }
      if ((jsonObj.get("clickTime") != null && !jsonObj.get("clickTime").isJsonNull()) && !jsonObj.get("clickTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clickTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clickTime").toString()));
      }
      if ((jsonObj.get("correctnessLevel") != null && !jsonObj.get("correctnessLevel").isJsonNull()) && !jsonObj.get("correctnessLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correctnessLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correctnessLevel").toString()));
      }
      // validate the optional field `correctnessLevel`
      if (jsonObj.get("correctnessLevel") != null && !jsonObj.get("correctnessLevel").isJsonNull()) {
        CorrectnessLevelEnum.validateJsonElement(jsonObj.get("correctnessLevel"));
      }
      if ((jsonObj.get("displayTime") != null && !jsonObj.get("displayTime").isJsonNull()) && !jsonObj.get("displayTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowV2beta1AnswerFeedback.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowV2beta1AnswerFeedback' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowV2beta1AnswerFeedback> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowV2beta1AnswerFeedback.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowV2beta1AnswerFeedback>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowV2beta1AnswerFeedback value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowV2beta1AnswerFeedback read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowV2beta1AnswerFeedback given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowV2beta1AnswerFeedback
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowV2beta1AnswerFeedback
   */
  public static GoogleCloudDialogflowV2beta1AnswerFeedback fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowV2beta1AnswerFeedback.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowV2beta1AnswerFeedback to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

