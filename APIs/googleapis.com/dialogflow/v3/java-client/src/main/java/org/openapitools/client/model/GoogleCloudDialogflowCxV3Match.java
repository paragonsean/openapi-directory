/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3Intent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents one match result of MatchIntent.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:42.852499-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3Match {
  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private Float confidence;

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private String event;

  public static final String SERIALIZED_NAME_INTENT = "intent";
  @SerializedName(SERIALIZED_NAME_INTENT)
  private GoogleCloudDialogflowCxV3Intent intent;

  /**
   * Type of this Match.
   */
  @JsonAdapter(MatchTypeEnum.Adapter.class)
  public enum MatchTypeEnum {
    MATCH_TYPE_UNSPECIFIED("MATCH_TYPE_UNSPECIFIED"),
    
    INTENT("INTENT"),
    
    DIRECT_INTENT("DIRECT_INTENT"),
    
    PARAMETER_FILLING("PARAMETER_FILLING"),
    
    NO_MATCH("NO_MATCH"),
    
    NO_INPUT("NO_INPUT"),
    
    EVENT("EVENT");

    private String value;

    MatchTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MatchTypeEnum fromValue(String value) {
      for (MatchTypeEnum b : MatchTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MatchTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatchTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatchTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MatchTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MatchTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MATCH_TYPE = "matchType";
  @SerializedName(SERIALIZED_NAME_MATCH_TYPE)
  private MatchTypeEnum matchType;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, Object> parameters = new HashMap<>();

  public static final String SERIALIZED_NAME_RESOLVED_INPUT = "resolvedInput";
  @SerializedName(SERIALIZED_NAME_RESOLVED_INPUT)
  private String resolvedInput;

  public GoogleCloudDialogflowCxV3Match() {
  }

  public GoogleCloudDialogflowCxV3Match confidence(Float confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * The confidence of this match. Values range from 0.0 (completely uncertain) to 1.0 (completely certain). This value is for informational purpose only and is only used to help match the best intent within the classification threshold. This value may change for the same end-user expression at any time due to a model retraining or change in implementation.
   * @return confidence
   */
  @javax.annotation.Nullable
  public Float getConfidence() {
    return confidence;
  }

  public void setConfidence(Float confidence) {
    this.confidence = confidence;
  }


  public GoogleCloudDialogflowCxV3Match event(String event) {
    this.event = event;
    return this;
  }

  /**
   * The event that matched the query. Filled for &#x60;EVENT&#x60;, &#x60;NO_MATCH&#x60; and &#x60;NO_INPUT&#x60; match types.
   * @return event
   */
  @javax.annotation.Nullable
  public String getEvent() {
    return event;
  }

  public void setEvent(String event) {
    this.event = event;
  }


  public GoogleCloudDialogflowCxV3Match intent(GoogleCloudDialogflowCxV3Intent intent) {
    this.intent = intent;
    return this;
  }

  /**
   * Get intent
   * @return intent
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3Intent getIntent() {
    return intent;
  }

  public void setIntent(GoogleCloudDialogflowCxV3Intent intent) {
    this.intent = intent;
  }


  public GoogleCloudDialogflowCxV3Match matchType(MatchTypeEnum matchType) {
    this.matchType = matchType;
    return this;
  }

  /**
   * Type of this Match.
   * @return matchType
   */
  @javax.annotation.Nullable
  public MatchTypeEnum getMatchType() {
    return matchType;
  }

  public void setMatchType(MatchTypeEnum matchType) {
    this.matchType = matchType;
  }


  public GoogleCloudDialogflowCxV3Match parameters(Map<String, Object> parameters) {
    this.parameters = parameters;
    return this;
  }

  public GoogleCloudDialogflowCxV3Match putParametersItem(String key, Object parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * The collection of parameters extracted from the query. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter&#39;s entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter&#39;s entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, Object> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, Object> parameters) {
    this.parameters = parameters;
  }


  public GoogleCloudDialogflowCxV3Match resolvedInput(String resolvedInput) {
    this.resolvedInput = resolvedInput;
    return this;
  }

  /**
   * Final text input which was matched during MatchIntent. This value can be different from original input sent in request because of spelling correction or other processing.
   * @return resolvedInput
   */
  @javax.annotation.Nullable
  public String getResolvedInput() {
    return resolvedInput;
  }

  public void setResolvedInput(String resolvedInput) {
    this.resolvedInput = resolvedInput;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3Match googleCloudDialogflowCxV3Match = (GoogleCloudDialogflowCxV3Match) o;
    return Objects.equals(this.confidence, googleCloudDialogflowCxV3Match.confidence) &&
        Objects.equals(this.event, googleCloudDialogflowCxV3Match.event) &&
        Objects.equals(this.intent, googleCloudDialogflowCxV3Match.intent) &&
        Objects.equals(this.matchType, googleCloudDialogflowCxV3Match.matchType) &&
        Objects.equals(this.parameters, googleCloudDialogflowCxV3Match.parameters) &&
        Objects.equals(this.resolvedInput, googleCloudDialogflowCxV3Match.resolvedInput);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confidence, event, intent, matchType, parameters, resolvedInput);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3Match {\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    intent: ").append(toIndentedString(intent)).append("\n");
    sb.append("    matchType: ").append(toIndentedString(matchType)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    resolvedInput: ").append(toIndentedString(resolvedInput)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confidence");
    openapiFields.add("event");
    openapiFields.add("intent");
    openapiFields.add("matchType");
    openapiFields.add("parameters");
    openapiFields.add("resolvedInput");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3Match
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3Match.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3Match is not found in the empty JSON string", GoogleCloudDialogflowCxV3Match.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3Match.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3Match` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("event") != null && !jsonObj.get("event").isJsonNull()) && !jsonObj.get("event").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event").toString()));
      }
      // validate the optional field `intent`
      if (jsonObj.get("intent") != null && !jsonObj.get("intent").isJsonNull()) {
        GoogleCloudDialogflowCxV3Intent.validateJsonElement(jsonObj.get("intent"));
      }
      if ((jsonObj.get("matchType") != null && !jsonObj.get("matchType").isJsonNull()) && !jsonObj.get("matchType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchType").toString()));
      }
      // validate the optional field `matchType`
      if (jsonObj.get("matchType") != null && !jsonObj.get("matchType").isJsonNull()) {
        MatchTypeEnum.validateJsonElement(jsonObj.get("matchType"));
      }
      if ((jsonObj.get("resolvedInput") != null && !jsonObj.get("resolvedInput").isJsonNull()) && !jsonObj.get("resolvedInput").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolvedInput` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolvedInput").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3Match.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3Match' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3Match> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3Match.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3Match>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3Match value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3Match read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3Match given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3Match
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3Match
   */
  public static GoogleCloudDialogflowCxV3Match fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3Match.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3Match to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

