/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3SearchConfig;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3SessionEntityType;
import org.openapitools.client.model.GoogleTypeLatLng;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the parameters of a conversational query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:42.852499-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3QueryParameters {
  public static final String SERIALIZED_NAME_ANALYZE_QUERY_TEXT_SENTIMENT = "analyzeQueryTextSentiment";
  @SerializedName(SERIALIZED_NAME_ANALYZE_QUERY_TEXT_SENTIMENT)
  private Boolean analyzeQueryTextSentiment;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public static final String SERIALIZED_NAME_CURRENT_PAGE = "currentPage";
  @SerializedName(SERIALIZED_NAME_CURRENT_PAGE)
  private String currentPage;

  public static final String SERIALIZED_NAME_DISABLE_WEBHOOK = "disableWebhook";
  @SerializedName(SERIALIZED_NAME_DISABLE_WEBHOOK)
  private Boolean disableWebhook;

  public static final String SERIALIZED_NAME_END_USER_METADATA = "endUserMetadata";
  @SerializedName(SERIALIZED_NAME_END_USER_METADATA)
  private Map<String, Object> endUserMetadata = new HashMap<>();

  public static final String SERIALIZED_NAME_FLOW_VERSIONS = "flowVersions";
  @SerializedName(SERIALIZED_NAME_FLOW_VERSIONS)
  private List<String> flowVersions = new ArrayList<>();

  public static final String SERIALIZED_NAME_GEO_LOCATION = "geoLocation";
  @SerializedName(SERIALIZED_NAME_GEO_LOCATION)
  private GoogleTypeLatLng geoLocation;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, Object> parameters = new HashMap<>();

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private Map<String, Object> payload = new HashMap<>();

  public static final String SERIALIZED_NAME_SEARCH_CONFIG = "searchConfig";
  @SerializedName(SERIALIZED_NAME_SEARCH_CONFIG)
  private GoogleCloudDialogflowCxV3SearchConfig searchConfig;

  public static final String SERIALIZED_NAME_SESSION_ENTITY_TYPES = "sessionEntityTypes";
  @SerializedName(SERIALIZED_NAME_SESSION_ENTITY_TYPES)
  private List<GoogleCloudDialogflowCxV3SessionEntityType> sessionEntityTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SESSION_TTL = "sessionTtl";
  @SerializedName(SERIALIZED_NAME_SESSION_TTL)
  private String sessionTtl;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_WEBHOOK_HEADERS = "webhookHeaders";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_HEADERS)
  private Map<String, String> webhookHeaders = new HashMap<>();

  public GoogleCloudDialogflowCxV3QueryParameters() {
  }

  public GoogleCloudDialogflowCxV3QueryParameters analyzeQueryTextSentiment(Boolean analyzeQueryTextSentiment) {
    this.analyzeQueryTextSentiment = analyzeQueryTextSentiment;
    return this;
  }

  /**
   * Configures whether sentiment analysis should be performed. If not provided, sentiment analysis is not performed.
   * @return analyzeQueryTextSentiment
   */
  @javax.annotation.Nullable
  public Boolean getAnalyzeQueryTextSentiment() {
    return analyzeQueryTextSentiment;
  }

  public void setAnalyzeQueryTextSentiment(Boolean analyzeQueryTextSentiment) {
    this.analyzeQueryTextSentiment = analyzeQueryTextSentiment;
  }


  public GoogleCloudDialogflowCxV3QueryParameters channel(String channel) {
    this.channel = channel;
    return this;
  }

  /**
   * The channel which this query is for. If specified, only the ResponseMessage associated with the channel will be returned. If no ResponseMessage is associated with the channel, it falls back to the ResponseMessage with unspecified channel. If unspecified, the ResponseMessage with unspecified channel will be returned.
   * @return channel
   */
  @javax.annotation.Nullable
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public GoogleCloudDialogflowCxV3QueryParameters currentPage(String currentPage) {
    this.currentPage = currentPage;
    return this;
  }

  /**
   * The unique identifier of the page to override the current page in the session. Format: &#x60;projects//locations//agents//flows//pages/&#x60;. If &#x60;current_page&#x60; is specified, the previous state of the session will be ignored by Dialogflow, including the previous page and the previous session parameters. In most cases, current_page and parameters should be configured together to direct a session to a specific state.
   * @return currentPage
   */
  @javax.annotation.Nullable
  public String getCurrentPage() {
    return currentPage;
  }

  public void setCurrentPage(String currentPage) {
    this.currentPage = currentPage;
  }


  public GoogleCloudDialogflowCxV3QueryParameters disableWebhook(Boolean disableWebhook) {
    this.disableWebhook = disableWebhook;
    return this;
  }

  /**
   * Whether to disable webhook calls for this request.
   * @return disableWebhook
   */
  @javax.annotation.Nullable
  public Boolean getDisableWebhook() {
    return disableWebhook;
  }

  public void setDisableWebhook(Boolean disableWebhook) {
    this.disableWebhook = disableWebhook;
  }


  public GoogleCloudDialogflowCxV3QueryParameters endUserMetadata(Map<String, Object> endUserMetadata) {
    this.endUserMetadata = endUserMetadata;
    return this;
  }

  public GoogleCloudDialogflowCxV3QueryParameters putEndUserMetadataItem(String key, Object endUserMetadataItem) {
    if (this.endUserMetadata == null) {
      this.endUserMetadata = new HashMap<>();
    }
    this.endUserMetadata.put(key, endUserMetadataItem);
    return this;
  }

  /**
   * Optional. Information about the end-user to improve the relevance and accuracy of generative answers. This will be interpreted and used by a language model, so, for good results, the data should be self-descriptive, and in a simple structure. Example: &#x60;&#x60;&#x60;json { \&quot;subscription plan\&quot;: \&quot;Business Premium Plus\&quot;, \&quot;devices owned\&quot;: [ {\&quot;model\&quot;: \&quot;Google Pixel 7\&quot;}, {\&quot;model\&quot;: \&quot;Google Pixel Tablet\&quot;} ] } &#x60;&#x60;&#x60;
   * @return endUserMetadata
   */
  @javax.annotation.Nullable
  public Map<String, Object> getEndUserMetadata() {
    return endUserMetadata;
  }

  public void setEndUserMetadata(Map<String, Object> endUserMetadata) {
    this.endUserMetadata = endUserMetadata;
  }


  public GoogleCloudDialogflowCxV3QueryParameters flowVersions(List<String> flowVersions) {
    this.flowVersions = flowVersions;
    return this;
  }

  public GoogleCloudDialogflowCxV3QueryParameters addFlowVersionsItem(String flowVersionsItem) {
    if (this.flowVersions == null) {
      this.flowVersions = new ArrayList<>();
    }
    this.flowVersions.add(flowVersionsItem);
    return this;
  }

  /**
   * A list of flow versions to override for the request. Format: &#x60;projects//locations//agents//flows//versions/&#x60;. If version 1 of flow X is included in this list, the traffic of flow X will go through version 1 regardless of the version configuration in the environment. Each flow can have at most one version specified in this list.
   * @return flowVersions
   */
  @javax.annotation.Nullable
  public List<String> getFlowVersions() {
    return flowVersions;
  }

  public void setFlowVersions(List<String> flowVersions) {
    this.flowVersions = flowVersions;
  }


  public GoogleCloudDialogflowCxV3QueryParameters geoLocation(GoogleTypeLatLng geoLocation) {
    this.geoLocation = geoLocation;
    return this;
  }

  /**
   * Get geoLocation
   * @return geoLocation
   */
  @javax.annotation.Nullable
  public GoogleTypeLatLng getGeoLocation() {
    return geoLocation;
  }

  public void setGeoLocation(GoogleTypeLatLng geoLocation) {
    this.geoLocation = geoLocation;
  }


  public GoogleCloudDialogflowCxV3QueryParameters parameters(Map<String, Object> parameters) {
    this.parameters = parameters;
    return this;
  }

  public GoogleCloudDialogflowCxV3QueryParameters putParametersItem(String key, Object parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * Additional parameters to be put into session parameters. To remove a parameter from the session, clients should explicitly set the parameter value to null. You can reference the session parameters in the agent with the following format: $session.params.parameter-id. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter&#39;s entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter&#39;s entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, Object> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, Object> parameters) {
    this.parameters = parameters;
  }


  public GoogleCloudDialogflowCxV3QueryParameters payload(Map<String, Object> payload) {
    this.payload = payload;
    return this;
  }

  public GoogleCloudDialogflowCxV3QueryParameters putPayloadItem(String key, Object payloadItem) {
    if (this.payload == null) {
      this.payload = new HashMap<>();
    }
    this.payload.put(key, payloadItem);
    return this;
  }

  /**
   * This field can be used to pass custom data into the webhook associated with the agent. Arbitrary JSON objects are supported. Some integrations that query a Dialogflow agent may provide additional information in the payload. In particular, for the Dialogflow Phone Gateway integration, this field has the form: &#x60;&#x60;&#x60; { \&quot;telephony\&quot;: { \&quot;caller_id\&quot;: \&quot;+18558363987\&quot; } } &#x60;&#x60;&#x60;
   * @return payload
   */
  @javax.annotation.Nullable
  public Map<String, Object> getPayload() {
    return payload;
  }

  public void setPayload(Map<String, Object> payload) {
    this.payload = payload;
  }


  public GoogleCloudDialogflowCxV3QueryParameters searchConfig(GoogleCloudDialogflowCxV3SearchConfig searchConfig) {
    this.searchConfig = searchConfig;
    return this;
  }

  /**
   * Get searchConfig
   * @return searchConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3SearchConfig getSearchConfig() {
    return searchConfig;
  }

  public void setSearchConfig(GoogleCloudDialogflowCxV3SearchConfig searchConfig) {
    this.searchConfig = searchConfig;
  }


  public GoogleCloudDialogflowCxV3QueryParameters sessionEntityTypes(List<GoogleCloudDialogflowCxV3SessionEntityType> sessionEntityTypes) {
    this.sessionEntityTypes = sessionEntityTypes;
    return this;
  }

  public GoogleCloudDialogflowCxV3QueryParameters addSessionEntityTypesItem(GoogleCloudDialogflowCxV3SessionEntityType sessionEntityTypesItem) {
    if (this.sessionEntityTypes == null) {
      this.sessionEntityTypes = new ArrayList<>();
    }
    this.sessionEntityTypes.add(sessionEntityTypesItem);
    return this;
  }

  /**
   * Additional session entity types to replace or extend developer entity types with. The entity synonyms apply to all languages and persist for the session of this query.
   * @return sessionEntityTypes
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDialogflowCxV3SessionEntityType> getSessionEntityTypes() {
    return sessionEntityTypes;
  }

  public void setSessionEntityTypes(List<GoogleCloudDialogflowCxV3SessionEntityType> sessionEntityTypes) {
    this.sessionEntityTypes = sessionEntityTypes;
  }


  public GoogleCloudDialogflowCxV3QueryParameters sessionTtl(String sessionTtl) {
    this.sessionTtl = sessionTtl;
    return this;
  }

  /**
   * Optional. Configure lifetime of the Dialogflow session. By default, a Dialogflow session remains active and its data is stored for 30 minutes after the last request is sent for the session. This value should be no longer than 1 day.
   * @return sessionTtl
   */
  @javax.annotation.Nullable
  public String getSessionTtl() {
    return sessionTtl;
  }

  public void setSessionTtl(String sessionTtl) {
    this.sessionTtl = sessionTtl;
  }


  public GoogleCloudDialogflowCxV3QueryParameters timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * The time zone of this conversational query from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris. If not provided, the time zone specified in the agent is used.
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public GoogleCloudDialogflowCxV3QueryParameters webhookHeaders(Map<String, String> webhookHeaders) {
    this.webhookHeaders = webhookHeaders;
    return this;
  }

  public GoogleCloudDialogflowCxV3QueryParameters putWebhookHeadersItem(String key, String webhookHeadersItem) {
    if (this.webhookHeaders == null) {
      this.webhookHeaders = new HashMap<>();
    }
    this.webhookHeaders.put(key, webhookHeadersItem);
    return this;
  }

  /**
   * This field can be used to pass HTTP headers for a webhook call. These headers will be sent to webhook along with the headers that have been configured through Dialogflow web console. The headers defined within this field will overwrite the headers configured through Dialogflow console if there is a conflict. Header names are case-insensitive. Google&#39;s specified headers are not allowed. Including: \&quot;Host\&quot;, \&quot;Content-Length\&quot;, \&quot;Connection\&quot;, \&quot;From\&quot;, \&quot;User-Agent\&quot;, \&quot;Accept-Encoding\&quot;, \&quot;If-Modified-Since\&quot;, \&quot;If-None-Match\&quot;, \&quot;X-Forwarded-For\&quot;, etc.
   * @return webhookHeaders
   */
  @javax.annotation.Nullable
  public Map<String, String> getWebhookHeaders() {
    return webhookHeaders;
  }

  public void setWebhookHeaders(Map<String, String> webhookHeaders) {
    this.webhookHeaders = webhookHeaders;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3QueryParameters googleCloudDialogflowCxV3QueryParameters = (GoogleCloudDialogflowCxV3QueryParameters) o;
    return Objects.equals(this.analyzeQueryTextSentiment, googleCloudDialogflowCxV3QueryParameters.analyzeQueryTextSentiment) &&
        Objects.equals(this.channel, googleCloudDialogflowCxV3QueryParameters.channel) &&
        Objects.equals(this.currentPage, googleCloudDialogflowCxV3QueryParameters.currentPage) &&
        Objects.equals(this.disableWebhook, googleCloudDialogflowCxV3QueryParameters.disableWebhook) &&
        Objects.equals(this.endUserMetadata, googleCloudDialogflowCxV3QueryParameters.endUserMetadata) &&
        Objects.equals(this.flowVersions, googleCloudDialogflowCxV3QueryParameters.flowVersions) &&
        Objects.equals(this.geoLocation, googleCloudDialogflowCxV3QueryParameters.geoLocation) &&
        Objects.equals(this.parameters, googleCloudDialogflowCxV3QueryParameters.parameters) &&
        Objects.equals(this.payload, googleCloudDialogflowCxV3QueryParameters.payload) &&
        Objects.equals(this.searchConfig, googleCloudDialogflowCxV3QueryParameters.searchConfig) &&
        Objects.equals(this.sessionEntityTypes, googleCloudDialogflowCxV3QueryParameters.sessionEntityTypes) &&
        Objects.equals(this.sessionTtl, googleCloudDialogflowCxV3QueryParameters.sessionTtl) &&
        Objects.equals(this.timeZone, googleCloudDialogflowCxV3QueryParameters.timeZone) &&
        Objects.equals(this.webhookHeaders, googleCloudDialogflowCxV3QueryParameters.webhookHeaders);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analyzeQueryTextSentiment, channel, currentPage, disableWebhook, endUserMetadata, flowVersions, geoLocation, parameters, payload, searchConfig, sessionEntityTypes, sessionTtl, timeZone, webhookHeaders);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3QueryParameters {\n");
    sb.append("    analyzeQueryTextSentiment: ").append(toIndentedString(analyzeQueryTextSentiment)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    currentPage: ").append(toIndentedString(currentPage)).append("\n");
    sb.append("    disableWebhook: ").append(toIndentedString(disableWebhook)).append("\n");
    sb.append("    endUserMetadata: ").append(toIndentedString(endUserMetadata)).append("\n");
    sb.append("    flowVersions: ").append(toIndentedString(flowVersions)).append("\n");
    sb.append("    geoLocation: ").append(toIndentedString(geoLocation)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    searchConfig: ").append(toIndentedString(searchConfig)).append("\n");
    sb.append("    sessionEntityTypes: ").append(toIndentedString(sessionEntityTypes)).append("\n");
    sb.append("    sessionTtl: ").append(toIndentedString(sessionTtl)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    webhookHeaders: ").append(toIndentedString(webhookHeaders)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analyzeQueryTextSentiment");
    openapiFields.add("channel");
    openapiFields.add("currentPage");
    openapiFields.add("disableWebhook");
    openapiFields.add("endUserMetadata");
    openapiFields.add("flowVersions");
    openapiFields.add("geoLocation");
    openapiFields.add("parameters");
    openapiFields.add("payload");
    openapiFields.add("searchConfig");
    openapiFields.add("sessionEntityTypes");
    openapiFields.add("sessionTtl");
    openapiFields.add("timeZone");
    openapiFields.add("webhookHeaders");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3QueryParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3QueryParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3QueryParameters is not found in the empty JSON string", GoogleCloudDialogflowCxV3QueryParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3QueryParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3QueryParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if ((jsonObj.get("currentPage") != null && !jsonObj.get("currentPage").isJsonNull()) && !jsonObj.get("currentPage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentPage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentPage").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("flowVersions") != null && !jsonObj.get("flowVersions").isJsonNull() && !jsonObj.get("flowVersions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flowVersions` to be an array in the JSON string but got `%s`", jsonObj.get("flowVersions").toString()));
      }
      // validate the optional field `geoLocation`
      if (jsonObj.get("geoLocation") != null && !jsonObj.get("geoLocation").isJsonNull()) {
        GoogleTypeLatLng.validateJsonElement(jsonObj.get("geoLocation"));
      }
      // validate the optional field `searchConfig`
      if (jsonObj.get("searchConfig") != null && !jsonObj.get("searchConfig").isJsonNull()) {
        GoogleCloudDialogflowCxV3SearchConfig.validateJsonElement(jsonObj.get("searchConfig"));
      }
      if (jsonObj.get("sessionEntityTypes") != null && !jsonObj.get("sessionEntityTypes").isJsonNull()) {
        JsonArray jsonArraysessionEntityTypes = jsonObj.getAsJsonArray("sessionEntityTypes");
        if (jsonArraysessionEntityTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sessionEntityTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sessionEntityTypes` to be an array in the JSON string but got `%s`", jsonObj.get("sessionEntityTypes").toString()));
          }

          // validate the optional field `sessionEntityTypes` (array)
          for (int i = 0; i < jsonArraysessionEntityTypes.size(); i++) {
            GoogleCloudDialogflowCxV3SessionEntityType.validateJsonElement(jsonArraysessionEntityTypes.get(i));
          };
        }
      }
      if ((jsonObj.get("sessionTtl") != null && !jsonObj.get("sessionTtl").isJsonNull()) && !jsonObj.get("sessionTtl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionTtl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionTtl").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3QueryParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3QueryParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3QueryParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3QueryParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3QueryParameters>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3QueryParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3QueryParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3QueryParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3QueryParameters
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3QueryParameters
   */
  public static GoogleCloudDialogflowCxV3QueryParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3QueryParameters.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3QueryParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

