/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3EntityTypeEntity;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3EntityTypeExcludedPhrase;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Entities are extracted from user input and represent parameters that are meaningful to your application. For example, a date range, a proper name such as a geographic location or landmark, and so on. Entities represent actionable data for your application. When you define an entity, you can also include synonyms that all map to that entity. For example, \&quot;soft drink\&quot;, \&quot;soda\&quot;, \&quot;pop\&quot;, and so on. There are three types of entities: * **System** - entities that are defined by the Dialogflow API for common data types such as date, time, currency, and so on. A system entity is represented by the &#x60;EntityType&#x60; type. * **Custom** - entities that are defined by you that represent actionable data that is meaningful to your application. For example, you could define a &#x60;pizza.sauce&#x60; entity for red or white pizza sauce, a &#x60;pizza.cheese&#x60; entity for the different types of cheese on a pizza, a &#x60;pizza.topping&#x60; entity for different toppings, and so on. A custom entity is represented by the &#x60;EntityType&#x60; type. * **User** - entities that are built for an individual user such as favorites, preferences, playlists, and so on. A user entity is represented by the SessionEntityType type. For more information about entity types, see the [Dialogflow documentation](https://cloud.google.com/dialogflow/docs/entities-overview).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:42.852499-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3EntityType {
  /**
   * Indicates whether the entity type can be automatically expanded.
   */
  @JsonAdapter(AutoExpansionModeEnum.Adapter.class)
  public enum AutoExpansionModeEnum {
    UNSPECIFIED("AUTO_EXPANSION_MODE_UNSPECIFIED"),
    
    DEFAULT("AUTO_EXPANSION_MODE_DEFAULT");

    private String value;

    AutoExpansionModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutoExpansionModeEnum fromValue(String value) {
      for (AutoExpansionModeEnum b : AutoExpansionModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutoExpansionModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutoExpansionModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutoExpansionModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutoExpansionModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AutoExpansionModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTO_EXPANSION_MODE = "autoExpansionMode";
  @SerializedName(SERIALIZED_NAME_AUTO_EXPANSION_MODE)
  private AutoExpansionModeEnum autoExpansionMode;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENABLE_FUZZY_EXTRACTION = "enableFuzzyExtraction";
  @SerializedName(SERIALIZED_NAME_ENABLE_FUZZY_EXTRACTION)
  private Boolean enableFuzzyExtraction;

  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  private List<GoogleCloudDialogflowCxV3EntityTypeEntity> entities = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUDED_PHRASES = "excludedPhrases";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_PHRASES)
  private List<GoogleCloudDialogflowCxV3EntityTypeExcludedPhrase> excludedPhrases = new ArrayList<>();

  /**
   * Required. Indicates the kind of entity type.
   */
  @JsonAdapter(KindEnum.Adapter.class)
  public enum KindEnum {
    UNSPECIFIED("KIND_UNSPECIFIED"),
    
    MAP("KIND_MAP"),
    
    LIST("KIND_LIST"),
    
    REGEXP("KIND_REGEXP");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KindEnum fromValue(String value) {
      for (KindEnum b : KindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private KindEnum kind;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REDACT = "redact";
  @SerializedName(SERIALIZED_NAME_REDACT)
  private Boolean redact;

  public GoogleCloudDialogflowCxV3EntityType() {
  }

  public GoogleCloudDialogflowCxV3EntityType autoExpansionMode(AutoExpansionModeEnum autoExpansionMode) {
    this.autoExpansionMode = autoExpansionMode;
    return this;
  }

  /**
   * Indicates whether the entity type can be automatically expanded.
   * @return autoExpansionMode
   */
  @javax.annotation.Nullable
  public AutoExpansionModeEnum getAutoExpansionMode() {
    return autoExpansionMode;
  }

  public void setAutoExpansionMode(AutoExpansionModeEnum autoExpansionMode) {
    this.autoExpansionMode = autoExpansionMode;
  }


  public GoogleCloudDialogflowCxV3EntityType displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The human-readable name of the entity type, unique within the agent.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudDialogflowCxV3EntityType enableFuzzyExtraction(Boolean enableFuzzyExtraction) {
    this.enableFuzzyExtraction = enableFuzzyExtraction;
    return this;
  }

  /**
   * Enables fuzzy entity extraction during classification.
   * @return enableFuzzyExtraction
   */
  @javax.annotation.Nullable
  public Boolean getEnableFuzzyExtraction() {
    return enableFuzzyExtraction;
  }

  public void setEnableFuzzyExtraction(Boolean enableFuzzyExtraction) {
    this.enableFuzzyExtraction = enableFuzzyExtraction;
  }


  public GoogleCloudDialogflowCxV3EntityType entities(List<GoogleCloudDialogflowCxV3EntityTypeEntity> entities) {
    this.entities = entities;
    return this;
  }

  public GoogleCloudDialogflowCxV3EntityType addEntitiesItem(GoogleCloudDialogflowCxV3EntityTypeEntity entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

  /**
   * The collection of entity entries associated with the entity type.
   * @return entities
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDialogflowCxV3EntityTypeEntity> getEntities() {
    return entities;
  }

  public void setEntities(List<GoogleCloudDialogflowCxV3EntityTypeEntity> entities) {
    this.entities = entities;
  }


  public GoogleCloudDialogflowCxV3EntityType excludedPhrases(List<GoogleCloudDialogflowCxV3EntityTypeExcludedPhrase> excludedPhrases) {
    this.excludedPhrases = excludedPhrases;
    return this;
  }

  public GoogleCloudDialogflowCxV3EntityType addExcludedPhrasesItem(GoogleCloudDialogflowCxV3EntityTypeExcludedPhrase excludedPhrasesItem) {
    if (this.excludedPhrases == null) {
      this.excludedPhrases = new ArrayList<>();
    }
    this.excludedPhrases.add(excludedPhrasesItem);
    return this;
  }

  /**
   * Collection of exceptional words and phrases that shouldn&#39;t be matched. For example, if you have a size entity type with entry &#x60;giant&#x60;(an adjective), you might consider adding &#x60;giants&#x60;(a noun) as an exclusion. If the kind of entity type is &#x60;KIND_MAP&#x60;, then the phrases specified by entities and excluded phrases should be mutually exclusive.
   * @return excludedPhrases
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDialogflowCxV3EntityTypeExcludedPhrase> getExcludedPhrases() {
    return excludedPhrases;
  }

  public void setExcludedPhrases(List<GoogleCloudDialogflowCxV3EntityTypeExcludedPhrase> excludedPhrases) {
    this.excludedPhrases = excludedPhrases;
  }


  public GoogleCloudDialogflowCxV3EntityType kind(KindEnum kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Required. Indicates the kind of entity type.
   * @return kind
   */
  @javax.annotation.Nullable
  public KindEnum getKind() {
    return kind;
  }

  public void setKind(KindEnum kind) {
    this.kind = kind;
  }


  public GoogleCloudDialogflowCxV3EntityType name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The unique identifier of the entity type. Required for EntityTypes.UpdateEntityType. Format: &#x60;projects//locations//agents//entityTypes/&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudDialogflowCxV3EntityType redact(Boolean redact) {
    this.redact = redact;
    return this;
  }

  /**
   * Indicates whether parameters of the entity type should be redacted in log. If redaction is enabled, page parameters and intent parameters referring to the entity type will be replaced by parameter name when logging.
   * @return redact
   */
  @javax.annotation.Nullable
  public Boolean getRedact() {
    return redact;
  }

  public void setRedact(Boolean redact) {
    this.redact = redact;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3EntityType googleCloudDialogflowCxV3EntityType = (GoogleCloudDialogflowCxV3EntityType) o;
    return Objects.equals(this.autoExpansionMode, googleCloudDialogflowCxV3EntityType.autoExpansionMode) &&
        Objects.equals(this.displayName, googleCloudDialogflowCxV3EntityType.displayName) &&
        Objects.equals(this.enableFuzzyExtraction, googleCloudDialogflowCxV3EntityType.enableFuzzyExtraction) &&
        Objects.equals(this.entities, googleCloudDialogflowCxV3EntityType.entities) &&
        Objects.equals(this.excludedPhrases, googleCloudDialogflowCxV3EntityType.excludedPhrases) &&
        Objects.equals(this.kind, googleCloudDialogflowCxV3EntityType.kind) &&
        Objects.equals(this.name, googleCloudDialogflowCxV3EntityType.name) &&
        Objects.equals(this.redact, googleCloudDialogflowCxV3EntityType.redact);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoExpansionMode, displayName, enableFuzzyExtraction, entities, excludedPhrases, kind, name, redact);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3EntityType {\n");
    sb.append("    autoExpansionMode: ").append(toIndentedString(autoExpansionMode)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    enableFuzzyExtraction: ").append(toIndentedString(enableFuzzyExtraction)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    excludedPhrases: ").append(toIndentedString(excludedPhrases)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    redact: ").append(toIndentedString(redact)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoExpansionMode");
    openapiFields.add("displayName");
    openapiFields.add("enableFuzzyExtraction");
    openapiFields.add("entities");
    openapiFields.add("excludedPhrases");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("redact");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3EntityType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3EntityType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3EntityType is not found in the empty JSON string", GoogleCloudDialogflowCxV3EntityType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3EntityType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3EntityType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("autoExpansionMode") != null && !jsonObj.get("autoExpansionMode").isJsonNull()) && !jsonObj.get("autoExpansionMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoExpansionMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoExpansionMode").toString()));
      }
      // validate the optional field `autoExpansionMode`
      if (jsonObj.get("autoExpansionMode") != null && !jsonObj.get("autoExpansionMode").isJsonNull()) {
        AutoExpansionModeEnum.validateJsonElement(jsonObj.get("autoExpansionMode"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("entities") != null && !jsonObj.get("entities").isJsonNull()) {
        JsonArray jsonArrayentities = jsonObj.getAsJsonArray("entities");
        if (jsonArrayentities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entities` to be an array in the JSON string but got `%s`", jsonObj.get("entities").toString()));
          }

          // validate the optional field `entities` (array)
          for (int i = 0; i < jsonArrayentities.size(); i++) {
            GoogleCloudDialogflowCxV3EntityTypeEntity.validateJsonElement(jsonArrayentities.get(i));
          };
        }
      }
      if (jsonObj.get("excludedPhrases") != null && !jsonObj.get("excludedPhrases").isJsonNull()) {
        JsonArray jsonArrayexcludedPhrases = jsonObj.getAsJsonArray("excludedPhrases");
        if (jsonArrayexcludedPhrases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("excludedPhrases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `excludedPhrases` to be an array in the JSON string but got `%s`", jsonObj.get("excludedPhrases").toString()));
          }

          // validate the optional field `excludedPhrases` (array)
          for (int i = 0; i < jsonArrayexcludedPhrases.size(); i++) {
            GoogleCloudDialogflowCxV3EntityTypeExcludedPhrase.validateJsonElement(jsonArrayexcludedPhrases.get(i));
          };
        }
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `kind`
      if (jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) {
        KindEnum.validateJsonElement(jsonObj.get("kind"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3EntityType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3EntityType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3EntityType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3EntityType.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3EntityType>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3EntityType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3EntityType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3EntityType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3EntityType
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3EntityType
   */
  public static GoogleCloudDialogflowCxV3EntityType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3EntityType.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3EntityType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

