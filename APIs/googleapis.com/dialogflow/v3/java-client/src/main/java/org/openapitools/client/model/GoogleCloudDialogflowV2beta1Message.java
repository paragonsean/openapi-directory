/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDialogflowV2beta1MessageAnnotation;
import org.openapitools.client.model.GoogleCloudDialogflowV2beta1SentimentAnalysisResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a message posted into a conversation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:42.852499-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowV2beta1Message {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_MESSAGE_ANNOTATION = "messageAnnotation";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ANNOTATION)
  private GoogleCloudDialogflowV2beta1MessageAnnotation messageAnnotation;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARTICIPANT = "participant";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT)
  private String participant;

  /**
   * Output only. The role of the participant.
   */
  @JsonAdapter(ParticipantRoleEnum.Adapter.class)
  public enum ParticipantRoleEnum {
    ROLE_UNSPECIFIED("ROLE_UNSPECIFIED"),
    
    HUMAN_AGENT("HUMAN_AGENT"),
    
    AUTOMATED_AGENT("AUTOMATED_AGENT"),
    
    END_USER("END_USER");

    private String value;

    ParticipantRoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ParticipantRoleEnum fromValue(String value) {
      for (ParticipantRoleEnum b : ParticipantRoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ParticipantRoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ParticipantRoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ParticipantRoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ParticipantRoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ParticipantRoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PARTICIPANT_ROLE = "participantRole";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_ROLE)
  private ParticipantRoleEnum participantRole;

  public static final String SERIALIZED_NAME_SEND_TIME = "sendTime";
  @SerializedName(SERIALIZED_NAME_SEND_TIME)
  private String sendTime;

  public static final String SERIALIZED_NAME_SENTIMENT_ANALYSIS = "sentimentAnalysis";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_ANALYSIS)
  private GoogleCloudDialogflowV2beta1SentimentAnalysisResult sentimentAnalysis;

  public GoogleCloudDialogflowV2beta1Message() {
  }

  public GoogleCloudDialogflowV2beta1Message(
     String createTime, 
     String participant, 
     ParticipantRoleEnum participantRole
  ) {
    this();
    this.createTime = createTime;
    this.participant = participant;
    this.participantRole = participantRole;
  }

  public GoogleCloudDialogflowV2beta1Message content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Required. The message content.
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  /**
   * Output only. The time when the message was created in Contact Center AI.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public GoogleCloudDialogflowV2beta1Message languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Optional. The message language. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: \&quot;en-US\&quot;.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public GoogleCloudDialogflowV2beta1Message messageAnnotation(GoogleCloudDialogflowV2beta1MessageAnnotation messageAnnotation) {
    this.messageAnnotation = messageAnnotation;
    return this;
  }

  /**
   * Get messageAnnotation
   * @return messageAnnotation
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowV2beta1MessageAnnotation getMessageAnnotation() {
    return messageAnnotation;
  }

  public void setMessageAnnotation(GoogleCloudDialogflowV2beta1MessageAnnotation messageAnnotation) {
    this.messageAnnotation = messageAnnotation;
  }


  public GoogleCloudDialogflowV2beta1Message name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. The unique identifier of the message. Format: &#x60;projects//locations//conversations//messages/&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. The participant that sends this message.
   * @return participant
   */
  @javax.annotation.Nullable
  public String getParticipant() {
    return participant;
  }



  /**
   * Output only. The role of the participant.
   * @return participantRole
   */
  @javax.annotation.Nullable
  public ParticipantRoleEnum getParticipantRole() {
    return participantRole;
  }



  public GoogleCloudDialogflowV2beta1Message sendTime(String sendTime) {
    this.sendTime = sendTime;
    return this;
  }

  /**
   * Optional. The time when the message was sent.
   * @return sendTime
   */
  @javax.annotation.Nullable
  public String getSendTime() {
    return sendTime;
  }

  public void setSendTime(String sendTime) {
    this.sendTime = sendTime;
  }


  public GoogleCloudDialogflowV2beta1Message sentimentAnalysis(GoogleCloudDialogflowV2beta1SentimentAnalysisResult sentimentAnalysis) {
    this.sentimentAnalysis = sentimentAnalysis;
    return this;
  }

  /**
   * Get sentimentAnalysis
   * @return sentimentAnalysis
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowV2beta1SentimentAnalysisResult getSentimentAnalysis() {
    return sentimentAnalysis;
  }

  public void setSentimentAnalysis(GoogleCloudDialogflowV2beta1SentimentAnalysisResult sentimentAnalysis) {
    this.sentimentAnalysis = sentimentAnalysis;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowV2beta1Message googleCloudDialogflowV2beta1Message = (GoogleCloudDialogflowV2beta1Message) o;
    return Objects.equals(this.content, googleCloudDialogflowV2beta1Message.content) &&
        Objects.equals(this.createTime, googleCloudDialogflowV2beta1Message.createTime) &&
        Objects.equals(this.languageCode, googleCloudDialogflowV2beta1Message.languageCode) &&
        Objects.equals(this.messageAnnotation, googleCloudDialogflowV2beta1Message.messageAnnotation) &&
        Objects.equals(this.name, googleCloudDialogflowV2beta1Message.name) &&
        Objects.equals(this.participant, googleCloudDialogflowV2beta1Message.participant) &&
        Objects.equals(this.participantRole, googleCloudDialogflowV2beta1Message.participantRole) &&
        Objects.equals(this.sendTime, googleCloudDialogflowV2beta1Message.sendTime) &&
        Objects.equals(this.sentimentAnalysis, googleCloudDialogflowV2beta1Message.sentimentAnalysis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, createTime, languageCode, messageAnnotation, name, participant, participantRole, sendTime, sentimentAnalysis);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowV2beta1Message {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    messageAnnotation: ").append(toIndentedString(messageAnnotation)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    participant: ").append(toIndentedString(participant)).append("\n");
    sb.append("    participantRole: ").append(toIndentedString(participantRole)).append("\n");
    sb.append("    sendTime: ").append(toIndentedString(sendTime)).append("\n");
    sb.append("    sentimentAnalysis: ").append(toIndentedString(sentimentAnalysis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("createTime");
    openapiFields.add("languageCode");
    openapiFields.add("messageAnnotation");
    openapiFields.add("name");
    openapiFields.add("participant");
    openapiFields.add("participantRole");
    openapiFields.add("sendTime");
    openapiFields.add("sentimentAnalysis");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowV2beta1Message
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowV2beta1Message.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowV2beta1Message is not found in the empty JSON string", GoogleCloudDialogflowV2beta1Message.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowV2beta1Message.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowV2beta1Message` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      // validate the optional field `messageAnnotation`
      if (jsonObj.get("messageAnnotation") != null && !jsonObj.get("messageAnnotation").isJsonNull()) {
        GoogleCloudDialogflowV2beta1MessageAnnotation.validateJsonElement(jsonObj.get("messageAnnotation"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("participant") != null && !jsonObj.get("participant").isJsonNull()) && !jsonObj.get("participant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participant").toString()));
      }
      if ((jsonObj.get("participantRole") != null && !jsonObj.get("participantRole").isJsonNull()) && !jsonObj.get("participantRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participantRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participantRole").toString()));
      }
      // validate the optional field `participantRole`
      if (jsonObj.get("participantRole") != null && !jsonObj.get("participantRole").isJsonNull()) {
        ParticipantRoleEnum.validateJsonElement(jsonObj.get("participantRole"));
      }
      if ((jsonObj.get("sendTime") != null && !jsonObj.get("sendTime").isJsonNull()) && !jsonObj.get("sendTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendTime").toString()));
      }
      // validate the optional field `sentimentAnalysis`
      if (jsonObj.get("sentimentAnalysis") != null && !jsonObj.get("sentimentAnalysis").isJsonNull()) {
        GoogleCloudDialogflowV2beta1SentimentAnalysisResult.validateJsonElement(jsonObj.get("sentimentAnalysis"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowV2beta1Message.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowV2beta1Message' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowV2beta1Message> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowV2beta1Message.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowV2beta1Message>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowV2beta1Message value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowV2beta1Message read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowV2beta1Message given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowV2beta1Message
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowV2beta1Message
   */
  public static GoogleCloudDialogflowV2beta1Message fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowV2beta1Message.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowV2beta1Message to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

