/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings of integration with GitHub.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:42.852499-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings {
  public static final String SERIALIZED_NAME_ACCESS_TOKEN = "accessToken";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN)
  private String accessToken;

  public static final String SERIALIZED_NAME_BRANCHES = "branches";
  @SerializedName(SERIALIZED_NAME_BRANCHES)
  private List<String> branches = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_REPOSITORY_URI = "repositoryUri";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_URI)
  private String repositoryUri;

  public static final String SERIALIZED_NAME_TRACKING_BRANCH = "trackingBranch";
  @SerializedName(SERIALIZED_NAME_TRACKING_BRANCH)
  private String trackingBranch;

  public GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings() {
  }

  public GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings accessToken(String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  /**
   * The access token used to authenticate the access to the GitHub repository.
   * @return accessToken
   */
  @javax.annotation.Nullable
  public String getAccessToken() {
    return accessToken;
  }

  public void setAccessToken(String accessToken) {
    this.accessToken = accessToken;
  }


  public GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings branches(List<String> branches) {
    this.branches = branches;
    return this;
  }

  public GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings addBranchesItem(String branchesItem) {
    if (this.branches == null) {
      this.branches = new ArrayList<>();
    }
    this.branches.add(branchesItem);
    return this;
  }

  /**
   * A list of branches configured to be used from Dialogflow.
   * @return branches
   */
  @javax.annotation.Nullable
  public List<String> getBranches() {
    return branches;
  }

  public void setBranches(List<String> branches) {
    this.branches = branches;
  }


  public GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The unique repository display name for the GitHub repository.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings repositoryUri(String repositoryUri) {
    this.repositoryUri = repositoryUri;
    return this;
  }

  /**
   * The GitHub repository URI related to the agent.
   * @return repositoryUri
   */
  @javax.annotation.Nullable
  public String getRepositoryUri() {
    return repositoryUri;
  }

  public void setRepositoryUri(String repositoryUri) {
    this.repositoryUri = repositoryUri;
  }


  public GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings trackingBranch(String trackingBranch) {
    this.trackingBranch = trackingBranch;
    return this;
  }

  /**
   * The branch of the GitHub repository tracked for this agent.
   * @return trackingBranch
   */
  @javax.annotation.Nullable
  public String getTrackingBranch() {
    return trackingBranch;
  }

  public void setTrackingBranch(String trackingBranch) {
    this.trackingBranch = trackingBranch;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings googleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings = (GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings) o;
    return Objects.equals(this.accessToken, googleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings.accessToken) &&
        Objects.equals(this.branches, googleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings.branches) &&
        Objects.equals(this.displayName, googleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings.displayName) &&
        Objects.equals(this.repositoryUri, googleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings.repositoryUri) &&
        Objects.equals(this.trackingBranch, googleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings.trackingBranch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessToken, branches, displayName, repositoryUri, trackingBranch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings {\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    branches: ").append(toIndentedString(branches)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    repositoryUri: ").append(toIndentedString(repositoryUri)).append("\n");
    sb.append("    trackingBranch: ").append(toIndentedString(trackingBranch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessToken");
    openapiFields.add("branches");
    openapiFields.add("displayName");
    openapiFields.add("repositoryUri");
    openapiFields.add("trackingBranch");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings is not found in the empty JSON string", GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessToken") != null && !jsonObj.get("accessToken").isJsonNull()) && !jsonObj.get("accessToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessToken").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("branches") != null && !jsonObj.get("branches").isJsonNull() && !jsonObj.get("branches").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `branches` to be an array in the JSON string but got `%s`", jsonObj.get("branches").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("repositoryUri") != null && !jsonObj.get("repositoryUri").isJsonNull()) && !jsonObj.get("repositoryUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repositoryUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repositoryUri").toString()));
      }
      if ((jsonObj.get("trackingBranch") != null && !jsonObj.get("trackingBranch").isJsonNull()) && !jsonObj.get("trackingBranch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingBranch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingBranch").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings
   */
  public static GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

