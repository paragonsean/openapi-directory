/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents configuration for a generic web service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:42.852499-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3beta1WebhookGenericWebService {
  public static final String SERIALIZED_NAME_ALLOWED_CA_CERTS = "allowedCaCerts";
  @SerializedName(SERIALIZED_NAME_ALLOWED_CA_CERTS)
  private List<byte[]> allowedCaCerts = new ArrayList<>();

  /**
   * Optional. HTTP method for the flexible webhook calls. Standard webhook always uses POST.
   */
  @JsonAdapter(HttpMethodEnum.Adapter.class)
  public enum HttpMethodEnum {
    HTTP_METHOD_UNSPECIFIED("HTTP_METHOD_UNSPECIFIED"),
    
    POST("POST"),
    
    GET("GET"),
    
    HEAD("HEAD"),
    
    PUT("PUT"),
    
    DELETE("DELETE"),
    
    PATCH("PATCH"),
    
    OPTIONS("OPTIONS");

    private String value;

    HttpMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HttpMethodEnum fromValue(String value) {
      for (HttpMethodEnum b : HttpMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HttpMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HttpMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HttpMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HttpMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HttpMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HTTP_METHOD = "httpMethod";
  @SerializedName(SERIALIZED_NAME_HTTP_METHOD)
  private HttpMethodEnum httpMethod;

  public static final String SERIALIZED_NAME_PARAMETER_MAPPING = "parameterMapping";
  @SerializedName(SERIALIZED_NAME_PARAMETER_MAPPING)
  private Map<String, String> parameterMapping = new HashMap<>();

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_REQUEST_BODY = "requestBody";
  @SerializedName(SERIALIZED_NAME_REQUEST_BODY)
  private String requestBody;

  public static final String SERIALIZED_NAME_REQUEST_HEADERS = "requestHeaders";
  @SerializedName(SERIALIZED_NAME_REQUEST_HEADERS)
  private Map<String, String> requestHeaders = new HashMap<>();

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  /**
   * Optional. Type of the webhook.
   */
  @JsonAdapter(WebhookTypeEnum.Adapter.class)
  public enum WebhookTypeEnum {
    WEBHOOK_TYPE_UNSPECIFIED("WEBHOOK_TYPE_UNSPECIFIED"),
    
    STANDARD("STANDARD"),
    
    FLEXIBLE("FLEXIBLE");

    private String value;

    WebhookTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WebhookTypeEnum fromValue(String value) {
      for (WebhookTypeEnum b : WebhookTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WebhookTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WebhookTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WebhookTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WebhookTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WebhookTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WEBHOOK_TYPE = "webhookType";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_TYPE)
  private WebhookTypeEnum webhookType;

  public GoogleCloudDialogflowCxV3beta1WebhookGenericWebService() {
  }

  public GoogleCloudDialogflowCxV3beta1WebhookGenericWebService allowedCaCerts(List<byte[]> allowedCaCerts) {
    this.allowedCaCerts = allowedCaCerts;
    return this;
  }

  public GoogleCloudDialogflowCxV3beta1WebhookGenericWebService addAllowedCaCertsItem(byte[] allowedCaCertsItem) {
    if (this.allowedCaCerts == null) {
      this.allowedCaCerts = new ArrayList<>();
    }
    this.allowedCaCerts.add(allowedCaCertsItem);
    return this;
  }

  /**
   * Optional. Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification. This overrides the default SSL trust store. If this is empty or unspecified, Dialogflow will use Google&#39;s default trust store to verify certificates. N.B. Make sure the HTTPS server certificates are signed with \&quot;subject alt name\&quot;. For instance a certificate can be self-signed using the following command, &#x60;&#x60;&#x60; openssl x509 -req -days 200 -in example.com.csr \\ -signkey example.com.key \\ -out example.com.crt \\ -extfile &lt;(printf \&quot;\\nsubjectAltName&#x3D;&#39;DNS:www.example.com&#39;\&quot;) &#x60;&#x60;&#x60;
   * @return allowedCaCerts
   */
  @javax.annotation.Nullable
  public List<byte[]> getAllowedCaCerts() {
    return allowedCaCerts;
  }

  public void setAllowedCaCerts(List<byte[]> allowedCaCerts) {
    this.allowedCaCerts = allowedCaCerts;
  }


  public GoogleCloudDialogflowCxV3beta1WebhookGenericWebService httpMethod(HttpMethodEnum httpMethod) {
    this.httpMethod = httpMethod;
    return this;
  }

  /**
   * Optional. HTTP method for the flexible webhook calls. Standard webhook always uses POST.
   * @return httpMethod
   */
  @javax.annotation.Nullable
  public HttpMethodEnum getHttpMethod() {
    return httpMethod;
  }

  public void setHttpMethod(HttpMethodEnum httpMethod) {
    this.httpMethod = httpMethod;
  }


  public GoogleCloudDialogflowCxV3beta1WebhookGenericWebService parameterMapping(Map<String, String> parameterMapping) {
    this.parameterMapping = parameterMapping;
    return this;
  }

  public GoogleCloudDialogflowCxV3beta1WebhookGenericWebService putParameterMappingItem(String key, String parameterMappingItem) {
    if (this.parameterMapping == null) {
      this.parameterMapping = new HashMap<>();
    }
    this.parameterMapping.put(key, parameterMappingItem);
    return this;
  }

  /**
   * Optional. Maps the values extracted from specific fields of the flexible webhook response into session parameters. - Key: session parameter name - Value: field path in the webhook response
   * @return parameterMapping
   */
  @javax.annotation.Nullable
  public Map<String, String> getParameterMapping() {
    return parameterMapping;
  }

  public void setParameterMapping(Map<String, String> parameterMapping) {
    this.parameterMapping = parameterMapping;
  }


  @Deprecated
  public GoogleCloudDialogflowCxV3beta1WebhookGenericWebService password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The password for HTTP Basic authentication.
   * @return password
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  @Deprecated
  public void setPassword(String password) {
    this.password = password;
  }


  public GoogleCloudDialogflowCxV3beta1WebhookGenericWebService requestBody(String requestBody) {
    this.requestBody = requestBody;
    return this;
  }

  /**
   * Optional. Defines a custom JSON object as request body to send to flexible webhook.
   * @return requestBody
   */
  @javax.annotation.Nullable
  public String getRequestBody() {
    return requestBody;
  }

  public void setRequestBody(String requestBody) {
    this.requestBody = requestBody;
  }


  public GoogleCloudDialogflowCxV3beta1WebhookGenericWebService requestHeaders(Map<String, String> requestHeaders) {
    this.requestHeaders = requestHeaders;
    return this;
  }

  public GoogleCloudDialogflowCxV3beta1WebhookGenericWebService putRequestHeadersItem(String key, String requestHeadersItem) {
    if (this.requestHeaders == null) {
      this.requestHeaders = new HashMap<>();
    }
    this.requestHeaders.put(key, requestHeadersItem);
    return this;
  }

  /**
   * The HTTP request headers to send together with webhook requests.
   * @return requestHeaders
   */
  @javax.annotation.Nullable
  public Map<String, String> getRequestHeaders() {
    return requestHeaders;
  }

  public void setRequestHeaders(Map<String, String> requestHeaders) {
    this.requestHeaders = requestHeaders;
  }


  public GoogleCloudDialogflowCxV3beta1WebhookGenericWebService uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Required. The webhook URI for receiving POST requests. It must use https protocol.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  @Deprecated
  public GoogleCloudDialogflowCxV3beta1WebhookGenericWebService username(String username) {
    this.username = username;
    return this;
  }

  /**
   * The user name for HTTP Basic authentication.
   * @return username
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  @Deprecated
  public void setUsername(String username) {
    this.username = username;
  }


  public GoogleCloudDialogflowCxV3beta1WebhookGenericWebService webhookType(WebhookTypeEnum webhookType) {
    this.webhookType = webhookType;
    return this;
  }

  /**
   * Optional. Type of the webhook.
   * @return webhookType
   */
  @javax.annotation.Nullable
  public WebhookTypeEnum getWebhookType() {
    return webhookType;
  }

  public void setWebhookType(WebhookTypeEnum webhookType) {
    this.webhookType = webhookType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3beta1WebhookGenericWebService googleCloudDialogflowCxV3beta1WebhookGenericWebService = (GoogleCloudDialogflowCxV3beta1WebhookGenericWebService) o;
    return Objects.equals(this.allowedCaCerts, googleCloudDialogflowCxV3beta1WebhookGenericWebService.allowedCaCerts) &&
        Objects.equals(this.httpMethod, googleCloudDialogflowCxV3beta1WebhookGenericWebService.httpMethod) &&
        Objects.equals(this.parameterMapping, googleCloudDialogflowCxV3beta1WebhookGenericWebService.parameterMapping) &&
        Objects.equals(this.password, googleCloudDialogflowCxV3beta1WebhookGenericWebService.password) &&
        Objects.equals(this.requestBody, googleCloudDialogflowCxV3beta1WebhookGenericWebService.requestBody) &&
        Objects.equals(this.requestHeaders, googleCloudDialogflowCxV3beta1WebhookGenericWebService.requestHeaders) &&
        Objects.equals(this.uri, googleCloudDialogflowCxV3beta1WebhookGenericWebService.uri) &&
        Objects.equals(this.username, googleCloudDialogflowCxV3beta1WebhookGenericWebService.username) &&
        Objects.equals(this.webhookType, googleCloudDialogflowCxV3beta1WebhookGenericWebService.webhookType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedCaCerts, httpMethod, parameterMapping, password, requestBody, requestHeaders, uri, username, webhookType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3beta1WebhookGenericWebService {\n");
    sb.append("    allowedCaCerts: ").append(toIndentedString(allowedCaCerts)).append("\n");
    sb.append("    httpMethod: ").append(toIndentedString(httpMethod)).append("\n");
    sb.append("    parameterMapping: ").append(toIndentedString(parameterMapping)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    requestBody: ").append(toIndentedString(requestBody)).append("\n");
    sb.append("    requestHeaders: ").append(toIndentedString(requestHeaders)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    webhookType: ").append(toIndentedString(webhookType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedCaCerts");
    openapiFields.add("httpMethod");
    openapiFields.add("parameterMapping");
    openapiFields.add("password");
    openapiFields.add("requestBody");
    openapiFields.add("requestHeaders");
    openapiFields.add("uri");
    openapiFields.add("username");
    openapiFields.add("webhookType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3beta1WebhookGenericWebService
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3beta1WebhookGenericWebService is not found in the empty JSON string", GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3beta1WebhookGenericWebService` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedCaCerts") != null && !jsonObj.get("allowedCaCerts").isJsonNull() && !jsonObj.get("allowedCaCerts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedCaCerts` to be an array in the JSON string but got `%s`", jsonObj.get("allowedCaCerts").toString()));
      }
      if ((jsonObj.get("httpMethod") != null && !jsonObj.get("httpMethod").isJsonNull()) && !jsonObj.get("httpMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpMethod").toString()));
      }
      // validate the optional field `httpMethod`
      if (jsonObj.get("httpMethod") != null && !jsonObj.get("httpMethod").isJsonNull()) {
        HttpMethodEnum.validateJsonElement(jsonObj.get("httpMethod"));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("requestBody") != null && !jsonObj.get("requestBody").isJsonNull()) && !jsonObj.get("requestBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestBody").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("webhookType") != null && !jsonObj.get("webhookType").isJsonNull()) && !jsonObj.get("webhookType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookType").toString()));
      }
      // validate the optional field `webhookType`
      if (jsonObj.get("webhookType") != null && !jsonObj.get("webhookType").isJsonNull()) {
        WebhookTypeEnum.validateJsonElement(jsonObj.get("webhookType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3beta1WebhookGenericWebService' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3beta1WebhookGenericWebService> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3beta1WebhookGenericWebService>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3beta1WebhookGenericWebService value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3beta1WebhookGenericWebService read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3beta1WebhookGenericWebService given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3beta1WebhookGenericWebService
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3beta1WebhookGenericWebService
   */
  public static GoogleCloudDialogflowCxV3beta1WebhookGenericWebService fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3beta1WebhookGenericWebService.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3beta1WebhookGenericWebService to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

