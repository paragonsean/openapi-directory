/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3Match;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3Page;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response of MatchIntent.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:42.852499-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3MatchIntentResponse {
  public static final String SERIALIZED_NAME_CURRENT_PAGE = "currentPage";
  @SerializedName(SERIALIZED_NAME_CURRENT_PAGE)
  private GoogleCloudDialogflowCxV3Page currentPage;

  public static final String SERIALIZED_NAME_MATCHES = "matches";
  @SerializedName(SERIALIZED_NAME_MATCHES)
  private List<GoogleCloudDialogflowCxV3Match> matches = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TRANSCRIPT = "transcript";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT)
  private String transcript;

  public static final String SERIALIZED_NAME_TRIGGER_EVENT = "triggerEvent";
  @SerializedName(SERIALIZED_NAME_TRIGGER_EVENT)
  private String triggerEvent;

  public static final String SERIALIZED_NAME_TRIGGER_INTENT = "triggerIntent";
  @SerializedName(SERIALIZED_NAME_TRIGGER_INTENT)
  private String triggerIntent;

  public GoogleCloudDialogflowCxV3MatchIntentResponse() {
  }

  public GoogleCloudDialogflowCxV3MatchIntentResponse currentPage(GoogleCloudDialogflowCxV3Page currentPage) {
    this.currentPage = currentPage;
    return this;
  }

  /**
   * Get currentPage
   * @return currentPage
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3Page getCurrentPage() {
    return currentPage;
  }

  public void setCurrentPage(GoogleCloudDialogflowCxV3Page currentPage) {
    this.currentPage = currentPage;
  }


  public GoogleCloudDialogflowCxV3MatchIntentResponse matches(List<GoogleCloudDialogflowCxV3Match> matches) {
    this.matches = matches;
    return this;
  }

  public GoogleCloudDialogflowCxV3MatchIntentResponse addMatchesItem(GoogleCloudDialogflowCxV3Match matchesItem) {
    if (this.matches == null) {
      this.matches = new ArrayList<>();
    }
    this.matches.add(matchesItem);
    return this;
  }

  /**
   * Match results, if more than one, ordered descendingly by the confidence we have that the particular intent matches the query.
   * @return matches
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDialogflowCxV3Match> getMatches() {
    return matches;
  }

  public void setMatches(List<GoogleCloudDialogflowCxV3Match> matches) {
    this.matches = matches;
  }


  public GoogleCloudDialogflowCxV3MatchIntentResponse text(String text) {
    this.text = text;
    return this;
  }

  /**
   * If natural language text was provided as input, this field will contain a copy of the text.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public GoogleCloudDialogflowCxV3MatchIntentResponse transcript(String transcript) {
    this.transcript = transcript;
    return this;
  }

  /**
   * If natural language speech audio was provided as input, this field will contain the transcript for the audio.
   * @return transcript
   */
  @javax.annotation.Nullable
  public String getTranscript() {
    return transcript;
  }

  public void setTranscript(String transcript) {
    this.transcript = transcript;
  }


  public GoogleCloudDialogflowCxV3MatchIntentResponse triggerEvent(String triggerEvent) {
    this.triggerEvent = triggerEvent;
    return this;
  }

  /**
   * If an event was provided as input, this field will contain a copy of the event name.
   * @return triggerEvent
   */
  @javax.annotation.Nullable
  public String getTriggerEvent() {
    return triggerEvent;
  }

  public void setTriggerEvent(String triggerEvent) {
    this.triggerEvent = triggerEvent;
  }


  public GoogleCloudDialogflowCxV3MatchIntentResponse triggerIntent(String triggerIntent) {
    this.triggerIntent = triggerIntent;
    return this;
  }

  /**
   * If an intent was provided as input, this field will contain a copy of the intent identifier. Format: &#x60;projects//locations//agents//intents/&#x60;.
   * @return triggerIntent
   */
  @javax.annotation.Nullable
  public String getTriggerIntent() {
    return triggerIntent;
  }

  public void setTriggerIntent(String triggerIntent) {
    this.triggerIntent = triggerIntent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3MatchIntentResponse googleCloudDialogflowCxV3MatchIntentResponse = (GoogleCloudDialogflowCxV3MatchIntentResponse) o;
    return Objects.equals(this.currentPage, googleCloudDialogflowCxV3MatchIntentResponse.currentPage) &&
        Objects.equals(this.matches, googleCloudDialogflowCxV3MatchIntentResponse.matches) &&
        Objects.equals(this.text, googleCloudDialogflowCxV3MatchIntentResponse.text) &&
        Objects.equals(this.transcript, googleCloudDialogflowCxV3MatchIntentResponse.transcript) &&
        Objects.equals(this.triggerEvent, googleCloudDialogflowCxV3MatchIntentResponse.triggerEvent) &&
        Objects.equals(this.triggerIntent, googleCloudDialogflowCxV3MatchIntentResponse.triggerIntent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentPage, matches, text, transcript, triggerEvent, triggerIntent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3MatchIntentResponse {\n");
    sb.append("    currentPage: ").append(toIndentedString(currentPage)).append("\n");
    sb.append("    matches: ").append(toIndentedString(matches)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    transcript: ").append(toIndentedString(transcript)).append("\n");
    sb.append("    triggerEvent: ").append(toIndentedString(triggerEvent)).append("\n");
    sb.append("    triggerIntent: ").append(toIndentedString(triggerIntent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentPage");
    openapiFields.add("matches");
    openapiFields.add("text");
    openapiFields.add("transcript");
    openapiFields.add("triggerEvent");
    openapiFields.add("triggerIntent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3MatchIntentResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3MatchIntentResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3MatchIntentResponse is not found in the empty JSON string", GoogleCloudDialogflowCxV3MatchIntentResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3MatchIntentResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3MatchIntentResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `currentPage`
      if (jsonObj.get("currentPage") != null && !jsonObj.get("currentPage").isJsonNull()) {
        GoogleCloudDialogflowCxV3Page.validateJsonElement(jsonObj.get("currentPage"));
      }
      if (jsonObj.get("matches") != null && !jsonObj.get("matches").isJsonNull()) {
        JsonArray jsonArraymatches = jsonObj.getAsJsonArray("matches");
        if (jsonArraymatches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("matches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `matches` to be an array in the JSON string but got `%s`", jsonObj.get("matches").toString()));
          }

          // validate the optional field `matches` (array)
          for (int i = 0; i < jsonArraymatches.size(); i++) {
            GoogleCloudDialogflowCxV3Match.validateJsonElement(jsonArraymatches.get(i));
          };
        }
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("transcript") != null && !jsonObj.get("transcript").isJsonNull()) && !jsonObj.get("transcript").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transcript` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transcript").toString()));
      }
      if ((jsonObj.get("triggerEvent") != null && !jsonObj.get("triggerEvent").isJsonNull()) && !jsonObj.get("triggerEvent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerEvent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggerEvent").toString()));
      }
      if ((jsonObj.get("triggerIntent") != null && !jsonObj.get("triggerIntent").isJsonNull()) && !jsonObj.get("triggerIntent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerIntent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggerIntent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3MatchIntentResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3MatchIntentResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3MatchIntentResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3MatchIntentResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3MatchIntentResponse>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3MatchIntentResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3MatchIntentResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3MatchIntentResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3MatchIntentResponse
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3MatchIntentResponse
   */
  public static GoogleCloudDialogflowCxV3MatchIntentResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3MatchIntentResponse.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3MatchIntentResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

