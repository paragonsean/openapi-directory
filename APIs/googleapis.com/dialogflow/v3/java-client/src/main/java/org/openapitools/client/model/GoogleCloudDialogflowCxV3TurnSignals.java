/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Collection of all signals that were extracted for a single turn of the conversation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:42.852499-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3TurnSignals {
  public static final String SERIALIZED_NAME_AGENT_ESCALATED = "agentEscalated";
  @SerializedName(SERIALIZED_NAME_AGENT_ESCALATED)
  private Boolean agentEscalated;

  public static final String SERIALIZED_NAME_DTMF_USED = "dtmfUsed";
  @SerializedName(SERIALIZED_NAME_DTMF_USED)
  private Boolean dtmfUsed;

  /**
   * Gets or Sets failureReasons
   */
  @JsonAdapter(FailureReasonsEnum.Adapter.class)
  public enum FailureReasonsEnum {
    FAILURE_REASON_UNSPECIFIED("FAILURE_REASON_UNSPECIFIED"),
    
    FAILED_INTENT("FAILED_INTENT"),
    
    FAILED_WEBHOOK("FAILED_WEBHOOK");

    private String value;

    FailureReasonsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FailureReasonsEnum fromValue(String value) {
      for (FailureReasonsEnum b : FailureReasonsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FailureReasonsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FailureReasonsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FailureReasonsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FailureReasonsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FailureReasonsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FAILURE_REASONS = "failureReasons";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASONS)
  private List<FailureReasonsEnum> failureReasons = new ArrayList<>();

  public static final String SERIALIZED_NAME_NO_MATCH = "noMatch";
  @SerializedName(SERIALIZED_NAME_NO_MATCH)
  private Boolean noMatch;

  public static final String SERIALIZED_NAME_NO_USER_INPUT = "noUserInput";
  @SerializedName(SERIALIZED_NAME_NO_USER_INPUT)
  private Boolean noUserInput;

  public static final String SERIALIZED_NAME_REACHED_END_PAGE = "reachedEndPage";
  @SerializedName(SERIALIZED_NAME_REACHED_END_PAGE)
  private Boolean reachedEndPage;

  public static final String SERIALIZED_NAME_SENTIMENT_MAGNITUDE = "sentimentMagnitude";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_MAGNITUDE)
  private Float sentimentMagnitude;

  public static final String SERIALIZED_NAME_SENTIMENT_SCORE = "sentimentScore";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_SCORE)
  private Float sentimentScore;

  public static final String SERIALIZED_NAME_USER_ESCALATED = "userEscalated";
  @SerializedName(SERIALIZED_NAME_USER_ESCALATED)
  private Boolean userEscalated;

  public static final String SERIALIZED_NAME_WEBHOOK_STATUSES = "webhookStatuses";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_STATUSES)
  private List<String> webhookStatuses = new ArrayList<>();

  public GoogleCloudDialogflowCxV3TurnSignals() {
  }

  public GoogleCloudDialogflowCxV3TurnSignals agentEscalated(Boolean agentEscalated) {
    this.agentEscalated = agentEscalated;
    return this;
  }

  /**
   * Whether agent responded with LiveAgentHandoff fulfillment.
   * @return agentEscalated
   */
  @javax.annotation.Nullable
  public Boolean getAgentEscalated() {
    return agentEscalated;
  }

  public void setAgentEscalated(Boolean agentEscalated) {
    this.agentEscalated = agentEscalated;
  }


  public GoogleCloudDialogflowCxV3TurnSignals dtmfUsed(Boolean dtmfUsed) {
    this.dtmfUsed = dtmfUsed;
    return this;
  }

  /**
   * Whether user was using DTMF input.
   * @return dtmfUsed
   */
  @javax.annotation.Nullable
  public Boolean getDtmfUsed() {
    return dtmfUsed;
  }

  public void setDtmfUsed(Boolean dtmfUsed) {
    this.dtmfUsed = dtmfUsed;
  }


  public GoogleCloudDialogflowCxV3TurnSignals failureReasons(List<FailureReasonsEnum> failureReasons) {
    this.failureReasons = failureReasons;
    return this;
  }

  public GoogleCloudDialogflowCxV3TurnSignals addFailureReasonsItem(FailureReasonsEnum failureReasonsItem) {
    if (this.failureReasons == null) {
      this.failureReasons = new ArrayList<>();
    }
    this.failureReasons.add(failureReasonsItem);
    return this;
  }

  /**
   * Failure reasons of the turn.
   * @return failureReasons
   */
  @javax.annotation.Nullable
  public List<FailureReasonsEnum> getFailureReasons() {
    return failureReasons;
  }

  public void setFailureReasons(List<FailureReasonsEnum> failureReasons) {
    this.failureReasons = failureReasons;
  }


  public GoogleCloudDialogflowCxV3TurnSignals noMatch(Boolean noMatch) {
    this.noMatch = noMatch;
    return this;
  }

  /**
   * Whether NLU predicted NO_MATCH.
   * @return noMatch
   */
  @javax.annotation.Nullable
  public Boolean getNoMatch() {
    return noMatch;
  }

  public void setNoMatch(Boolean noMatch) {
    this.noMatch = noMatch;
  }


  public GoogleCloudDialogflowCxV3TurnSignals noUserInput(Boolean noUserInput) {
    this.noUserInput = noUserInput;
    return this;
  }

  /**
   * Whether user provided no input.
   * @return noUserInput
   */
  @javax.annotation.Nullable
  public Boolean getNoUserInput() {
    return noUserInput;
  }

  public void setNoUserInput(Boolean noUserInput) {
    this.noUserInput = noUserInput;
  }


  public GoogleCloudDialogflowCxV3TurnSignals reachedEndPage(Boolean reachedEndPage) {
    this.reachedEndPage = reachedEndPage;
    return this;
  }

  /**
   * Whether turn resulted in End Session page.
   * @return reachedEndPage
   */
  @javax.annotation.Nullable
  public Boolean getReachedEndPage() {
    return reachedEndPage;
  }

  public void setReachedEndPage(Boolean reachedEndPage) {
    this.reachedEndPage = reachedEndPage;
  }


  public GoogleCloudDialogflowCxV3TurnSignals sentimentMagnitude(Float sentimentMagnitude) {
    this.sentimentMagnitude = sentimentMagnitude;
    return this;
  }

  /**
   * Sentiment magnitude of the user utterance if [sentiment](https://cloud.google.com/dialogflow/cx/docs/concept/sentiment) was enabled.
   * @return sentimentMagnitude
   */
  @javax.annotation.Nullable
  public Float getSentimentMagnitude() {
    return sentimentMagnitude;
  }

  public void setSentimentMagnitude(Float sentimentMagnitude) {
    this.sentimentMagnitude = sentimentMagnitude;
  }


  public GoogleCloudDialogflowCxV3TurnSignals sentimentScore(Float sentimentScore) {
    this.sentimentScore = sentimentScore;
    return this;
  }

  /**
   * Sentiment score of the user utterance if [sentiment](https://cloud.google.com/dialogflow/cx/docs/concept/sentiment) was enabled.
   * @return sentimentScore
   */
  @javax.annotation.Nullable
  public Float getSentimentScore() {
    return sentimentScore;
  }

  public void setSentimentScore(Float sentimentScore) {
    this.sentimentScore = sentimentScore;
  }


  public GoogleCloudDialogflowCxV3TurnSignals userEscalated(Boolean userEscalated) {
    this.userEscalated = userEscalated;
    return this;
  }

  /**
   * Whether user was specifically asking for a live agent.
   * @return userEscalated
   */
  @javax.annotation.Nullable
  public Boolean getUserEscalated() {
    return userEscalated;
  }

  public void setUserEscalated(Boolean userEscalated) {
    this.userEscalated = userEscalated;
  }


  public GoogleCloudDialogflowCxV3TurnSignals webhookStatuses(List<String> webhookStatuses) {
    this.webhookStatuses = webhookStatuses;
    return this;
  }

  public GoogleCloudDialogflowCxV3TurnSignals addWebhookStatusesItem(String webhookStatusesItem) {
    if (this.webhookStatuses == null) {
      this.webhookStatuses = new ArrayList<>();
    }
    this.webhookStatuses.add(webhookStatusesItem);
    return this;
  }

  /**
   * Human-readable statuses of the webhooks triggered during this turn.
   * @return webhookStatuses
   */
  @javax.annotation.Nullable
  public List<String> getWebhookStatuses() {
    return webhookStatuses;
  }

  public void setWebhookStatuses(List<String> webhookStatuses) {
    this.webhookStatuses = webhookStatuses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3TurnSignals googleCloudDialogflowCxV3TurnSignals = (GoogleCloudDialogflowCxV3TurnSignals) o;
    return Objects.equals(this.agentEscalated, googleCloudDialogflowCxV3TurnSignals.agentEscalated) &&
        Objects.equals(this.dtmfUsed, googleCloudDialogflowCxV3TurnSignals.dtmfUsed) &&
        Objects.equals(this.failureReasons, googleCloudDialogflowCxV3TurnSignals.failureReasons) &&
        Objects.equals(this.noMatch, googleCloudDialogflowCxV3TurnSignals.noMatch) &&
        Objects.equals(this.noUserInput, googleCloudDialogflowCxV3TurnSignals.noUserInput) &&
        Objects.equals(this.reachedEndPage, googleCloudDialogflowCxV3TurnSignals.reachedEndPage) &&
        Objects.equals(this.sentimentMagnitude, googleCloudDialogflowCxV3TurnSignals.sentimentMagnitude) &&
        Objects.equals(this.sentimentScore, googleCloudDialogflowCxV3TurnSignals.sentimentScore) &&
        Objects.equals(this.userEscalated, googleCloudDialogflowCxV3TurnSignals.userEscalated) &&
        Objects.equals(this.webhookStatuses, googleCloudDialogflowCxV3TurnSignals.webhookStatuses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentEscalated, dtmfUsed, failureReasons, noMatch, noUserInput, reachedEndPage, sentimentMagnitude, sentimentScore, userEscalated, webhookStatuses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3TurnSignals {\n");
    sb.append("    agentEscalated: ").append(toIndentedString(agentEscalated)).append("\n");
    sb.append("    dtmfUsed: ").append(toIndentedString(dtmfUsed)).append("\n");
    sb.append("    failureReasons: ").append(toIndentedString(failureReasons)).append("\n");
    sb.append("    noMatch: ").append(toIndentedString(noMatch)).append("\n");
    sb.append("    noUserInput: ").append(toIndentedString(noUserInput)).append("\n");
    sb.append("    reachedEndPage: ").append(toIndentedString(reachedEndPage)).append("\n");
    sb.append("    sentimentMagnitude: ").append(toIndentedString(sentimentMagnitude)).append("\n");
    sb.append("    sentimentScore: ").append(toIndentedString(sentimentScore)).append("\n");
    sb.append("    userEscalated: ").append(toIndentedString(userEscalated)).append("\n");
    sb.append("    webhookStatuses: ").append(toIndentedString(webhookStatuses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentEscalated");
    openapiFields.add("dtmfUsed");
    openapiFields.add("failureReasons");
    openapiFields.add("noMatch");
    openapiFields.add("noUserInput");
    openapiFields.add("reachedEndPage");
    openapiFields.add("sentimentMagnitude");
    openapiFields.add("sentimentScore");
    openapiFields.add("userEscalated");
    openapiFields.add("webhookStatuses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3TurnSignals
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3TurnSignals.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3TurnSignals is not found in the empty JSON string", GoogleCloudDialogflowCxV3TurnSignals.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3TurnSignals.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3TurnSignals` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("failureReasons") != null && !jsonObj.get("failureReasons").isJsonNull() && !jsonObj.get("failureReasons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureReasons` to be an array in the JSON string but got `%s`", jsonObj.get("failureReasons").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("webhookStatuses") != null && !jsonObj.get("webhookStatuses").isJsonNull() && !jsonObj.get("webhookStatuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("webhookStatuses").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3TurnSignals.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3TurnSignals' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3TurnSignals> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3TurnSignals.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3TurnSignals>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3TurnSignals value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3TurnSignals read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3TurnSignals given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3TurnSignals
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3TurnSignals
   */
  public static GoogleCloudDialogflowCxV3TurnSignals fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3TurnSignals.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3TurnSignals to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

