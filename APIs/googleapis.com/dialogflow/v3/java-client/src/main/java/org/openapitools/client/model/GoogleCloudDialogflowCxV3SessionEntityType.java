/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3EntityTypeEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Session entity types are referred to as **User** entity types and are entities that are built for an individual user such as favorites, preferences, playlists, and so on. You can redefine a session entity type at the session level to extend or replace a custom entity type at the user session level (we refer to the entity types defined at the agent level as \&quot;custom entity types\&quot;). Note: session entity types apply to all queries, regardless of the language. For more information about entity types, see the [Dialogflow documentation](https://cloud.google.com/dialogflow/docs/entities-overview).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:42.852499-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3SessionEntityType {
  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  private List<GoogleCloudDialogflowCxV3EntityTypeEntity> entities = new ArrayList<>();

  /**
   * Required. Indicates whether the additional data should override or supplement the custom entity type definition.
   */
  @JsonAdapter(EntityOverrideModeEnum.Adapter.class)
  public enum EntityOverrideModeEnum {
    UNSPECIFIED("ENTITY_OVERRIDE_MODE_UNSPECIFIED"),
    
    OVERRIDE("ENTITY_OVERRIDE_MODE_OVERRIDE"),
    
    SUPPLEMENT("ENTITY_OVERRIDE_MODE_SUPPLEMENT");

    private String value;

    EntityOverrideModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityOverrideModeEnum fromValue(String value) {
      for (EntityOverrideModeEnum b : EntityOverrideModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityOverrideModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityOverrideModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityOverrideModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityOverrideModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntityOverrideModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_OVERRIDE_MODE = "entityOverrideMode";
  @SerializedName(SERIALIZED_NAME_ENTITY_OVERRIDE_MODE)
  private EntityOverrideModeEnum entityOverrideMode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public GoogleCloudDialogflowCxV3SessionEntityType() {
  }

  public GoogleCloudDialogflowCxV3SessionEntityType entities(List<GoogleCloudDialogflowCxV3EntityTypeEntity> entities) {
    this.entities = entities;
    return this;
  }

  public GoogleCloudDialogflowCxV3SessionEntityType addEntitiesItem(GoogleCloudDialogflowCxV3EntityTypeEntity entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

  /**
   * Required. The collection of entities to override or supplement the custom entity type.
   * @return entities
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDialogflowCxV3EntityTypeEntity> getEntities() {
    return entities;
  }

  public void setEntities(List<GoogleCloudDialogflowCxV3EntityTypeEntity> entities) {
    this.entities = entities;
  }


  public GoogleCloudDialogflowCxV3SessionEntityType entityOverrideMode(EntityOverrideModeEnum entityOverrideMode) {
    this.entityOverrideMode = entityOverrideMode;
    return this;
  }

  /**
   * Required. Indicates whether the additional data should override or supplement the custom entity type definition.
   * @return entityOverrideMode
   */
  @javax.annotation.Nullable
  public EntityOverrideModeEnum getEntityOverrideMode() {
    return entityOverrideMode;
  }

  public void setEntityOverrideMode(EntityOverrideModeEnum entityOverrideMode) {
    this.entityOverrideMode = entityOverrideMode;
  }


  public GoogleCloudDialogflowCxV3SessionEntityType name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The unique identifier of the session entity type. Format: &#x60;projects//locations//agents//sessions//entityTypes/&#x60; or &#x60;projects//locations//agents//environments//sessions//entityTypes/&#x60;. If &#x60;Environment ID&#x60; is not specified, we assume default &#39;draft&#39; environment.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3SessionEntityType googleCloudDialogflowCxV3SessionEntityType = (GoogleCloudDialogflowCxV3SessionEntityType) o;
    return Objects.equals(this.entities, googleCloudDialogflowCxV3SessionEntityType.entities) &&
        Objects.equals(this.entityOverrideMode, googleCloudDialogflowCxV3SessionEntityType.entityOverrideMode) &&
        Objects.equals(this.name, googleCloudDialogflowCxV3SessionEntityType.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entities, entityOverrideMode, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3SessionEntityType {\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    entityOverrideMode: ").append(toIndentedString(entityOverrideMode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entities");
    openapiFields.add("entityOverrideMode");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3SessionEntityType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3SessionEntityType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3SessionEntityType is not found in the empty JSON string", GoogleCloudDialogflowCxV3SessionEntityType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3SessionEntityType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3SessionEntityType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("entities") != null && !jsonObj.get("entities").isJsonNull()) {
        JsonArray jsonArrayentities = jsonObj.getAsJsonArray("entities");
        if (jsonArrayentities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entities` to be an array in the JSON string but got `%s`", jsonObj.get("entities").toString()));
          }

          // validate the optional field `entities` (array)
          for (int i = 0; i < jsonArrayentities.size(); i++) {
            GoogleCloudDialogflowCxV3EntityTypeEntity.validateJsonElement(jsonArrayentities.get(i));
          };
        }
      }
      if ((jsonObj.get("entityOverrideMode") != null && !jsonObj.get("entityOverrideMode").isJsonNull()) && !jsonObj.get("entityOverrideMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityOverrideMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityOverrideMode").toString()));
      }
      // validate the optional field `entityOverrideMode`
      if (jsonObj.get("entityOverrideMode") != null && !jsonObj.get("entityOverrideMode").isJsonNull()) {
        EntityOverrideModeEnum.validateJsonElement(jsonObj.get("entityOverrideMode"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3SessionEntityType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3SessionEntityType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3SessionEntityType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3SessionEntityType.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3SessionEntityType>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3SessionEntityType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3SessionEntityType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3SessionEntityType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3SessionEntityType
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3SessionEntityType
   */
  public static GoogleCloudDialogflowCxV3SessionEntityType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3SessionEntityType.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3SessionEntityType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

