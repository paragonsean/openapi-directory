/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDialogflowV2beta1IntentMessageCardButton;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The card response message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:42.852499-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowV2beta1IntentMessageCard {
  public static final String SERIALIZED_NAME_BUTTONS = "buttons";
  @SerializedName(SERIALIZED_NAME_BUTTONS)
  private List<GoogleCloudDialogflowV2beta1IntentMessageCardButton> buttons = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE_URI = "imageUri";
  @SerializedName(SERIALIZED_NAME_IMAGE_URI)
  private String imageUri;

  public static final String SERIALIZED_NAME_SUBTITLE = "subtitle";
  @SerializedName(SERIALIZED_NAME_SUBTITLE)
  private String subtitle;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public GoogleCloudDialogflowV2beta1IntentMessageCard() {
  }

  public GoogleCloudDialogflowV2beta1IntentMessageCard buttons(List<GoogleCloudDialogflowV2beta1IntentMessageCardButton> buttons) {
    this.buttons = buttons;
    return this;
  }

  public GoogleCloudDialogflowV2beta1IntentMessageCard addButtonsItem(GoogleCloudDialogflowV2beta1IntentMessageCardButton buttonsItem) {
    if (this.buttons == null) {
      this.buttons = new ArrayList<>();
    }
    this.buttons.add(buttonsItem);
    return this;
  }

  /**
   * Optional. The collection of card buttons.
   * @return buttons
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDialogflowV2beta1IntentMessageCardButton> getButtons() {
    return buttons;
  }

  public void setButtons(List<GoogleCloudDialogflowV2beta1IntentMessageCardButton> buttons) {
    this.buttons = buttons;
  }


  public GoogleCloudDialogflowV2beta1IntentMessageCard imageUri(String imageUri) {
    this.imageUri = imageUri;
    return this;
  }

  /**
   * Optional. The public URI to an image file for the card.
   * @return imageUri
   */
  @javax.annotation.Nullable
  public String getImageUri() {
    return imageUri;
  }

  public void setImageUri(String imageUri) {
    this.imageUri = imageUri;
  }


  public GoogleCloudDialogflowV2beta1IntentMessageCard subtitle(String subtitle) {
    this.subtitle = subtitle;
    return this;
  }

  /**
   * Optional. The subtitle of the card.
   * @return subtitle
   */
  @javax.annotation.Nullable
  public String getSubtitle() {
    return subtitle;
  }

  public void setSubtitle(String subtitle) {
    this.subtitle = subtitle;
  }


  public GoogleCloudDialogflowV2beta1IntentMessageCard title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Optional. The title of the card.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowV2beta1IntentMessageCard googleCloudDialogflowV2beta1IntentMessageCard = (GoogleCloudDialogflowV2beta1IntentMessageCard) o;
    return Objects.equals(this.buttons, googleCloudDialogflowV2beta1IntentMessageCard.buttons) &&
        Objects.equals(this.imageUri, googleCloudDialogflowV2beta1IntentMessageCard.imageUri) &&
        Objects.equals(this.subtitle, googleCloudDialogflowV2beta1IntentMessageCard.subtitle) &&
        Objects.equals(this.title, googleCloudDialogflowV2beta1IntentMessageCard.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buttons, imageUri, subtitle, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowV2beta1IntentMessageCard {\n");
    sb.append("    buttons: ").append(toIndentedString(buttons)).append("\n");
    sb.append("    imageUri: ").append(toIndentedString(imageUri)).append("\n");
    sb.append("    subtitle: ").append(toIndentedString(subtitle)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buttons");
    openapiFields.add("imageUri");
    openapiFields.add("subtitle");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowV2beta1IntentMessageCard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowV2beta1IntentMessageCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowV2beta1IntentMessageCard is not found in the empty JSON string", GoogleCloudDialogflowV2beta1IntentMessageCard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowV2beta1IntentMessageCard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowV2beta1IntentMessageCard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("buttons") != null && !jsonObj.get("buttons").isJsonNull()) {
        JsonArray jsonArraybuttons = jsonObj.getAsJsonArray("buttons");
        if (jsonArraybuttons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("buttons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `buttons` to be an array in the JSON string but got `%s`", jsonObj.get("buttons").toString()));
          }

          // validate the optional field `buttons` (array)
          for (int i = 0; i < jsonArraybuttons.size(); i++) {
            GoogleCloudDialogflowV2beta1IntentMessageCardButton.validateJsonElement(jsonArraybuttons.get(i));
          };
        }
      }
      if ((jsonObj.get("imageUri") != null && !jsonObj.get("imageUri").isJsonNull()) && !jsonObj.get("imageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUri").toString()));
      }
      if ((jsonObj.get("subtitle") != null && !jsonObj.get("subtitle").isJsonNull()) && !jsonObj.get("subtitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtitle").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowV2beta1IntentMessageCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowV2beta1IntentMessageCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowV2beta1IntentMessageCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowV2beta1IntentMessageCard.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowV2beta1IntentMessageCard>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowV2beta1IntentMessageCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowV2beta1IntentMessageCard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowV2beta1IntentMessageCard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowV2beta1IntentMessageCard
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowV2beta1IntentMessageCard
   */
  public static GoogleCloudDialogflowV2beta1IntentMessageCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowV2beta1IntentMessageCard.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowV2beta1IntentMessageCard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

