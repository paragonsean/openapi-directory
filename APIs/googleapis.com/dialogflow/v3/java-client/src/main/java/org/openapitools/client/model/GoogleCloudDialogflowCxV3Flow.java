/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3AdvancedSettings;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3EventHandler;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3KnowledgeConnectorSettings;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3NluSettings;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3TransitionRoute;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Flows represents the conversation flows when you build your chatbot agent. A flow consists of many pages connected by the transition routes. Conversations always start with the built-in Start Flow (with an all-0 ID). Transition routes can direct the conversation session from the current flow (parent flow) to another flow (sub flow). When the sub flow is finished, Dialogflow will bring the session back to the parent flow, where the sub flow is started. Usually, when a transition route is followed by a matched intent, the intent will be \&quot;consumed\&quot;. This means the intent won&#39;t activate more transition routes. However, when the followed transition route moves the conversation session into a different flow, the matched intent can be carried over and to be consumed in the target flow.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:42.852499-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3Flow {
  public static final String SERIALIZED_NAME_ADVANCED_SETTINGS = "advancedSettings";
  @SerializedName(SERIALIZED_NAME_ADVANCED_SETTINGS)
  private GoogleCloudDialogflowCxV3AdvancedSettings advancedSettings;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EVENT_HANDLERS = "eventHandlers";
  @SerializedName(SERIALIZED_NAME_EVENT_HANDLERS)
  private List<GoogleCloudDialogflowCxV3EventHandler> eventHandlers = new ArrayList<>();

  public static final String SERIALIZED_NAME_KNOWLEDGE_CONNECTOR_SETTINGS = "knowledgeConnectorSettings";
  @SerializedName(SERIALIZED_NAME_KNOWLEDGE_CONNECTOR_SETTINGS)
  private GoogleCloudDialogflowCxV3KnowledgeConnectorSettings knowledgeConnectorSettings;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NLU_SETTINGS = "nluSettings";
  @SerializedName(SERIALIZED_NAME_NLU_SETTINGS)
  private GoogleCloudDialogflowCxV3NluSettings nluSettings;

  public static final String SERIALIZED_NAME_TRANSITION_ROUTE_GROUPS = "transitionRouteGroups";
  @SerializedName(SERIALIZED_NAME_TRANSITION_ROUTE_GROUPS)
  private List<String> transitionRouteGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSITION_ROUTES = "transitionRoutes";
  @SerializedName(SERIALIZED_NAME_TRANSITION_ROUTES)
  private List<GoogleCloudDialogflowCxV3TransitionRoute> transitionRoutes = new ArrayList<>();

  public GoogleCloudDialogflowCxV3Flow() {
  }

  public GoogleCloudDialogflowCxV3Flow advancedSettings(GoogleCloudDialogflowCxV3AdvancedSettings advancedSettings) {
    this.advancedSettings = advancedSettings;
    return this;
  }

  /**
   * Get advancedSettings
   * @return advancedSettings
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3AdvancedSettings getAdvancedSettings() {
    return advancedSettings;
  }

  public void setAdvancedSettings(GoogleCloudDialogflowCxV3AdvancedSettings advancedSettings) {
    this.advancedSettings = advancedSettings;
  }


  public GoogleCloudDialogflowCxV3Flow description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleCloudDialogflowCxV3Flow displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The human-readable name of the flow.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GoogleCloudDialogflowCxV3Flow eventHandlers(List<GoogleCloudDialogflowCxV3EventHandler> eventHandlers) {
    this.eventHandlers = eventHandlers;
    return this;
  }

  public GoogleCloudDialogflowCxV3Flow addEventHandlersItem(GoogleCloudDialogflowCxV3EventHandler eventHandlersItem) {
    if (this.eventHandlers == null) {
      this.eventHandlers = new ArrayList<>();
    }
    this.eventHandlers.add(eventHandlersItem);
    return this;
  }

  /**
   * A flow&#39;s event handlers serve two purposes: * They are responsible for handling events (e.g. no match, webhook errors) in the flow. * They are inherited by every page&#39;s event handlers, which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow. Unlike transition_routes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.
   * @return eventHandlers
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDialogflowCxV3EventHandler> getEventHandlers() {
    return eventHandlers;
  }

  public void setEventHandlers(List<GoogleCloudDialogflowCxV3EventHandler> eventHandlers) {
    this.eventHandlers = eventHandlers;
  }


  public GoogleCloudDialogflowCxV3Flow knowledgeConnectorSettings(GoogleCloudDialogflowCxV3KnowledgeConnectorSettings knowledgeConnectorSettings) {
    this.knowledgeConnectorSettings = knowledgeConnectorSettings;
    return this;
  }

  /**
   * Get knowledgeConnectorSettings
   * @return knowledgeConnectorSettings
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3KnowledgeConnectorSettings getKnowledgeConnectorSettings() {
    return knowledgeConnectorSettings;
  }

  public void setKnowledgeConnectorSettings(GoogleCloudDialogflowCxV3KnowledgeConnectorSettings knowledgeConnectorSettings) {
    this.knowledgeConnectorSettings = knowledgeConnectorSettings;
  }


  public GoogleCloudDialogflowCxV3Flow name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The unique identifier of the flow. Format: &#x60;projects//locations//agents//flows/&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudDialogflowCxV3Flow nluSettings(GoogleCloudDialogflowCxV3NluSettings nluSettings) {
    this.nluSettings = nluSettings;
    return this;
  }

  /**
   * Get nluSettings
   * @return nluSettings
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3NluSettings getNluSettings() {
    return nluSettings;
  }

  public void setNluSettings(GoogleCloudDialogflowCxV3NluSettings nluSettings) {
    this.nluSettings = nluSettings;
  }


  public GoogleCloudDialogflowCxV3Flow transitionRouteGroups(List<String> transitionRouteGroups) {
    this.transitionRouteGroups = transitionRouteGroups;
    return this;
  }

  public GoogleCloudDialogflowCxV3Flow addTransitionRouteGroupsItem(String transitionRouteGroupsItem) {
    if (this.transitionRouteGroups == null) {
      this.transitionRouteGroups = new ArrayList<>();
    }
    this.transitionRouteGroups.add(transitionRouteGroupsItem);
    return this;
  }

  /**
   * A flow&#39;s transition route group serve two purposes: * They are responsible for matching the user&#39;s first utterances in the flow. * They are inherited by every page&#39;s transition route groups. Transition route groups defined in the page have higher priority than those defined in the flow. Format:&#x60;projects//locations//agents//flows//transitionRouteGroups/&#x60; or &#x60;projects//locations//agents//transitionRouteGroups/&#x60; for agent-level groups.
   * @return transitionRouteGroups
   */
  @javax.annotation.Nullable
  public List<String> getTransitionRouteGroups() {
    return transitionRouteGroups;
  }

  public void setTransitionRouteGroups(List<String> transitionRouteGroups) {
    this.transitionRouteGroups = transitionRouteGroups;
  }


  public GoogleCloudDialogflowCxV3Flow transitionRoutes(List<GoogleCloudDialogflowCxV3TransitionRoute> transitionRoutes) {
    this.transitionRoutes = transitionRoutes;
    return this;
  }

  public GoogleCloudDialogflowCxV3Flow addTransitionRoutesItem(GoogleCloudDialogflowCxV3TransitionRoute transitionRoutesItem) {
    if (this.transitionRoutes == null) {
      this.transitionRoutes = new ArrayList<>();
    }
    this.transitionRoutes.add(transitionRoutesItem);
    return this;
  }

  /**
   * A flow&#39;s transition routes serve two purposes: * They are responsible for matching the user&#39;s first utterances in the flow. * They are inherited by every page&#39;s transition routes and can support use cases such as the user saying \&quot;help\&quot; or \&quot;can I talk to a human?\&quot;, which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow. TransitionRoutes are evalauted in the following order: * TransitionRoutes with intent specified. * TransitionRoutes with only condition specified. TransitionRoutes with intent specified are inherited by pages in the flow.
   * @return transitionRoutes
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDialogflowCxV3TransitionRoute> getTransitionRoutes() {
    return transitionRoutes;
  }

  public void setTransitionRoutes(List<GoogleCloudDialogflowCxV3TransitionRoute> transitionRoutes) {
    this.transitionRoutes = transitionRoutes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3Flow googleCloudDialogflowCxV3Flow = (GoogleCloudDialogflowCxV3Flow) o;
    return Objects.equals(this.advancedSettings, googleCloudDialogflowCxV3Flow.advancedSettings) &&
        Objects.equals(this.description, googleCloudDialogflowCxV3Flow.description) &&
        Objects.equals(this.displayName, googleCloudDialogflowCxV3Flow.displayName) &&
        Objects.equals(this.eventHandlers, googleCloudDialogflowCxV3Flow.eventHandlers) &&
        Objects.equals(this.knowledgeConnectorSettings, googleCloudDialogflowCxV3Flow.knowledgeConnectorSettings) &&
        Objects.equals(this.name, googleCloudDialogflowCxV3Flow.name) &&
        Objects.equals(this.nluSettings, googleCloudDialogflowCxV3Flow.nluSettings) &&
        Objects.equals(this.transitionRouteGroups, googleCloudDialogflowCxV3Flow.transitionRouteGroups) &&
        Objects.equals(this.transitionRoutes, googleCloudDialogflowCxV3Flow.transitionRoutes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advancedSettings, description, displayName, eventHandlers, knowledgeConnectorSettings, name, nluSettings, transitionRouteGroups, transitionRoutes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3Flow {\n");
    sb.append("    advancedSettings: ").append(toIndentedString(advancedSettings)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    eventHandlers: ").append(toIndentedString(eventHandlers)).append("\n");
    sb.append("    knowledgeConnectorSettings: ").append(toIndentedString(knowledgeConnectorSettings)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nluSettings: ").append(toIndentedString(nluSettings)).append("\n");
    sb.append("    transitionRouteGroups: ").append(toIndentedString(transitionRouteGroups)).append("\n");
    sb.append("    transitionRoutes: ").append(toIndentedString(transitionRoutes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advancedSettings");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("eventHandlers");
    openapiFields.add("knowledgeConnectorSettings");
    openapiFields.add("name");
    openapiFields.add("nluSettings");
    openapiFields.add("transitionRouteGroups");
    openapiFields.add("transitionRoutes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3Flow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3Flow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3Flow is not found in the empty JSON string", GoogleCloudDialogflowCxV3Flow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3Flow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3Flow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `advancedSettings`
      if (jsonObj.get("advancedSettings") != null && !jsonObj.get("advancedSettings").isJsonNull()) {
        GoogleCloudDialogflowCxV3AdvancedSettings.validateJsonElement(jsonObj.get("advancedSettings"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("eventHandlers") != null && !jsonObj.get("eventHandlers").isJsonNull()) {
        JsonArray jsonArrayeventHandlers = jsonObj.getAsJsonArray("eventHandlers");
        if (jsonArrayeventHandlers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("eventHandlers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `eventHandlers` to be an array in the JSON string but got `%s`", jsonObj.get("eventHandlers").toString()));
          }

          // validate the optional field `eventHandlers` (array)
          for (int i = 0; i < jsonArrayeventHandlers.size(); i++) {
            GoogleCloudDialogflowCxV3EventHandler.validateJsonElement(jsonArrayeventHandlers.get(i));
          };
        }
      }
      // validate the optional field `knowledgeConnectorSettings`
      if (jsonObj.get("knowledgeConnectorSettings") != null && !jsonObj.get("knowledgeConnectorSettings").isJsonNull()) {
        GoogleCloudDialogflowCxV3KnowledgeConnectorSettings.validateJsonElement(jsonObj.get("knowledgeConnectorSettings"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `nluSettings`
      if (jsonObj.get("nluSettings") != null && !jsonObj.get("nluSettings").isJsonNull()) {
        GoogleCloudDialogflowCxV3NluSettings.validateJsonElement(jsonObj.get("nluSettings"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("transitionRouteGroups") != null && !jsonObj.get("transitionRouteGroups").isJsonNull() && !jsonObj.get("transitionRouteGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transitionRouteGroups` to be an array in the JSON string but got `%s`", jsonObj.get("transitionRouteGroups").toString()));
      }
      if (jsonObj.get("transitionRoutes") != null && !jsonObj.get("transitionRoutes").isJsonNull()) {
        JsonArray jsonArraytransitionRoutes = jsonObj.getAsJsonArray("transitionRoutes");
        if (jsonArraytransitionRoutes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transitionRoutes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transitionRoutes` to be an array in the JSON string but got `%s`", jsonObj.get("transitionRoutes").toString()));
          }

          // validate the optional field `transitionRoutes` (array)
          for (int i = 0; i < jsonArraytransitionRoutes.size(); i++) {
            GoogleCloudDialogflowCxV3TransitionRoute.validateJsonElement(jsonArraytransitionRoutes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3Flow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3Flow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3Flow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3Flow.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3Flow>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3Flow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3Flow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3Flow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3Flow
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3Flow
   */
  public static GoogleCloudDialogflowCxV3Flow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3Flow.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3Flow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

