/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3IntentCoverage;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3TransitionCoverage;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3TransitionRouteGroupCoverage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response message for TestCases.CalculateCoverage.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:47:42.852499-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3CalculateCoverageResponse {
  public static final String SERIALIZED_NAME_AGENT = "agent";
  @SerializedName(SERIALIZED_NAME_AGENT)
  private String agent;

  public static final String SERIALIZED_NAME_INTENT_COVERAGE = "intentCoverage";
  @SerializedName(SERIALIZED_NAME_INTENT_COVERAGE)
  private GoogleCloudDialogflowCxV3IntentCoverage intentCoverage;

  public static final String SERIALIZED_NAME_ROUTE_GROUP_COVERAGE = "routeGroupCoverage";
  @SerializedName(SERIALIZED_NAME_ROUTE_GROUP_COVERAGE)
  private GoogleCloudDialogflowCxV3TransitionRouteGroupCoverage routeGroupCoverage;

  public static final String SERIALIZED_NAME_TRANSITION_COVERAGE = "transitionCoverage";
  @SerializedName(SERIALIZED_NAME_TRANSITION_COVERAGE)
  private GoogleCloudDialogflowCxV3TransitionCoverage transitionCoverage;

  public GoogleCloudDialogflowCxV3CalculateCoverageResponse() {
  }

  public GoogleCloudDialogflowCxV3CalculateCoverageResponse agent(String agent) {
    this.agent = agent;
    return this;
  }

  /**
   * The agent to calculate coverage for. Format: &#x60;projects//locations//agents/&#x60;.
   * @return agent
   */
  @javax.annotation.Nullable
  public String getAgent() {
    return agent;
  }

  public void setAgent(String agent) {
    this.agent = agent;
  }


  public GoogleCloudDialogflowCxV3CalculateCoverageResponse intentCoverage(GoogleCloudDialogflowCxV3IntentCoverage intentCoverage) {
    this.intentCoverage = intentCoverage;
    return this;
  }

  /**
   * Get intentCoverage
   * @return intentCoverage
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3IntentCoverage getIntentCoverage() {
    return intentCoverage;
  }

  public void setIntentCoverage(GoogleCloudDialogflowCxV3IntentCoverage intentCoverage) {
    this.intentCoverage = intentCoverage;
  }


  public GoogleCloudDialogflowCxV3CalculateCoverageResponse routeGroupCoverage(GoogleCloudDialogflowCxV3TransitionRouteGroupCoverage routeGroupCoverage) {
    this.routeGroupCoverage = routeGroupCoverage;
    return this;
  }

  /**
   * Get routeGroupCoverage
   * @return routeGroupCoverage
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3TransitionRouteGroupCoverage getRouteGroupCoverage() {
    return routeGroupCoverage;
  }

  public void setRouteGroupCoverage(GoogleCloudDialogflowCxV3TransitionRouteGroupCoverage routeGroupCoverage) {
    this.routeGroupCoverage = routeGroupCoverage;
  }


  public GoogleCloudDialogflowCxV3CalculateCoverageResponse transitionCoverage(GoogleCloudDialogflowCxV3TransitionCoverage transitionCoverage) {
    this.transitionCoverage = transitionCoverage;
    return this;
  }

  /**
   * Get transitionCoverage
   * @return transitionCoverage
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3TransitionCoverage getTransitionCoverage() {
    return transitionCoverage;
  }

  public void setTransitionCoverage(GoogleCloudDialogflowCxV3TransitionCoverage transitionCoverage) {
    this.transitionCoverage = transitionCoverage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3CalculateCoverageResponse googleCloudDialogflowCxV3CalculateCoverageResponse = (GoogleCloudDialogflowCxV3CalculateCoverageResponse) o;
    return Objects.equals(this.agent, googleCloudDialogflowCxV3CalculateCoverageResponse.agent) &&
        Objects.equals(this.intentCoverage, googleCloudDialogflowCxV3CalculateCoverageResponse.intentCoverage) &&
        Objects.equals(this.routeGroupCoverage, googleCloudDialogflowCxV3CalculateCoverageResponse.routeGroupCoverage) &&
        Objects.equals(this.transitionCoverage, googleCloudDialogflowCxV3CalculateCoverageResponse.transitionCoverage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agent, intentCoverage, routeGroupCoverage, transitionCoverage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3CalculateCoverageResponse {\n");
    sb.append("    agent: ").append(toIndentedString(agent)).append("\n");
    sb.append("    intentCoverage: ").append(toIndentedString(intentCoverage)).append("\n");
    sb.append("    routeGroupCoverage: ").append(toIndentedString(routeGroupCoverage)).append("\n");
    sb.append("    transitionCoverage: ").append(toIndentedString(transitionCoverage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agent");
    openapiFields.add("intentCoverage");
    openapiFields.add("routeGroupCoverage");
    openapiFields.add("transitionCoverage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3CalculateCoverageResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3CalculateCoverageResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3CalculateCoverageResponse is not found in the empty JSON string", GoogleCloudDialogflowCxV3CalculateCoverageResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3CalculateCoverageResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3CalculateCoverageResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("agent") != null && !jsonObj.get("agent").isJsonNull()) && !jsonObj.get("agent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agent").toString()));
      }
      // validate the optional field `intentCoverage`
      if (jsonObj.get("intentCoverage") != null && !jsonObj.get("intentCoverage").isJsonNull()) {
        GoogleCloudDialogflowCxV3IntentCoverage.validateJsonElement(jsonObj.get("intentCoverage"));
      }
      // validate the optional field `routeGroupCoverage`
      if (jsonObj.get("routeGroupCoverage") != null && !jsonObj.get("routeGroupCoverage").isJsonNull()) {
        GoogleCloudDialogflowCxV3TransitionRouteGroupCoverage.validateJsonElement(jsonObj.get("routeGroupCoverage"));
      }
      // validate the optional field `transitionCoverage`
      if (jsonObj.get("transitionCoverage") != null && !jsonObj.get("transitionCoverage").isJsonNull()) {
        GoogleCloudDialogflowCxV3TransitionCoverage.validateJsonElement(jsonObj.get("transitionCoverage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3CalculateCoverageResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3CalculateCoverageResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3CalculateCoverageResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3CalculateCoverageResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3CalculateCoverageResponse>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3CalculateCoverageResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3CalculateCoverageResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3CalculateCoverageResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3CalculateCoverageResponse
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3CalculateCoverageResponse
   */
  public static GoogleCloudDialogflowCxV3CalculateCoverageResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3CalculateCoverageResponse.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3CalculateCoverageResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

