/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3WebhookRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3WebhookRequest::OAIGoogleCloudDialogflowCxV3WebhookRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3WebhookRequest::OAIGoogleCloudDialogflowCxV3WebhookRequest() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3WebhookRequest::~OAIGoogleCloudDialogflowCxV3WebhookRequest() {}

void OAIGoogleCloudDialogflowCxV3WebhookRequest::initializeModel() {

    m_detect_intent_response_id_isSet = false;
    m_detect_intent_response_id_isValid = false;

    m_dtmf_digits_isSet = false;
    m_dtmf_digits_isValid = false;

    m_fulfillment_info_isSet = false;
    m_fulfillment_info_isValid = false;

    m_intent_info_isSet = false;
    m_intent_info_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_page_info_isSet = false;
    m_page_info_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_sentiment_analysis_result_isSet = false;
    m_sentiment_analysis_result_isValid = false;

    m_session_info_isSet = false;
    m_session_info_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_transcript_isSet = false;
    m_transcript_isValid = false;

    m_trigger_event_isSet = false;
    m_trigger_event_isValid = false;

    m_trigger_intent_isSet = false;
    m_trigger_intent_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3WebhookRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3WebhookRequest::fromJsonObject(QJsonObject json) {

    m_detect_intent_response_id_isValid = ::OpenAPI::fromJsonValue(m_detect_intent_response_id, json[QString("detectIntentResponseId")]);
    m_detect_intent_response_id_isSet = !json[QString("detectIntentResponseId")].isNull() && m_detect_intent_response_id_isValid;

    m_dtmf_digits_isValid = ::OpenAPI::fromJsonValue(m_dtmf_digits, json[QString("dtmfDigits")]);
    m_dtmf_digits_isSet = !json[QString("dtmfDigits")].isNull() && m_dtmf_digits_isValid;

    m_fulfillment_info_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_info, json[QString("fulfillmentInfo")]);
    m_fulfillment_info_isSet = !json[QString("fulfillmentInfo")].isNull() && m_fulfillment_info_isValid;

    m_intent_info_isValid = ::OpenAPI::fromJsonValue(m_intent_info, json[QString("intentInfo")]);
    m_intent_info_isSet = !json[QString("intentInfo")].isNull() && m_intent_info_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_page_info_isValid = ::OpenAPI::fromJsonValue(m_page_info, json[QString("pageInfo")]);
    m_page_info_isSet = !json[QString("pageInfo")].isNull() && m_page_info_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_sentiment_analysis_result_isValid = ::OpenAPI::fromJsonValue(m_sentiment_analysis_result, json[QString("sentimentAnalysisResult")]);
    m_sentiment_analysis_result_isSet = !json[QString("sentimentAnalysisResult")].isNull() && m_sentiment_analysis_result_isValid;

    m_session_info_isValid = ::OpenAPI::fromJsonValue(m_session_info, json[QString("sessionInfo")]);
    m_session_info_isSet = !json[QString("sessionInfo")].isNull() && m_session_info_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_transcript_isValid = ::OpenAPI::fromJsonValue(m_transcript, json[QString("transcript")]);
    m_transcript_isSet = !json[QString("transcript")].isNull() && m_transcript_isValid;

    m_trigger_event_isValid = ::OpenAPI::fromJsonValue(m_trigger_event, json[QString("triggerEvent")]);
    m_trigger_event_isSet = !json[QString("triggerEvent")].isNull() && m_trigger_event_isValid;

    m_trigger_intent_isValid = ::OpenAPI::fromJsonValue(m_trigger_intent, json[QString("triggerIntent")]);
    m_trigger_intent_isSet = !json[QString("triggerIntent")].isNull() && m_trigger_intent_isValid;
}

QString OAIGoogleCloudDialogflowCxV3WebhookRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3WebhookRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_detect_intent_response_id_isSet) {
        obj.insert(QString("detectIntentResponseId"), ::OpenAPI::toJsonValue(m_detect_intent_response_id));
    }
    if (m_dtmf_digits_isSet) {
        obj.insert(QString("dtmfDigits"), ::OpenAPI::toJsonValue(m_dtmf_digits));
    }
    if (m_fulfillment_info.isSet()) {
        obj.insert(QString("fulfillmentInfo"), ::OpenAPI::toJsonValue(m_fulfillment_info));
    }
    if (m_intent_info.isSet()) {
        obj.insert(QString("intentInfo"), ::OpenAPI::toJsonValue(m_intent_info));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_page_info.isSet()) {
        obj.insert(QString("pageInfo"), ::OpenAPI::toJsonValue(m_page_info));
    }
    if (m_payload.size() > 0) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_sentiment_analysis_result.isSet()) {
        obj.insert(QString("sentimentAnalysisResult"), ::OpenAPI::toJsonValue(m_sentiment_analysis_result));
    }
    if (m_session_info.isSet()) {
        obj.insert(QString("sessionInfo"), ::OpenAPI::toJsonValue(m_session_info));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_transcript_isSet) {
        obj.insert(QString("transcript"), ::OpenAPI::toJsonValue(m_transcript));
    }
    if (m_trigger_event_isSet) {
        obj.insert(QString("triggerEvent"), ::OpenAPI::toJsonValue(m_trigger_event));
    }
    if (m_trigger_intent_isSet) {
        obj.insert(QString("triggerIntent"), ::OpenAPI::toJsonValue(m_trigger_intent));
    }
    return obj;
}

QString OAIGoogleCloudDialogflowCxV3WebhookRequest::getDetectIntentResponseId() const {
    return m_detect_intent_response_id;
}
void OAIGoogleCloudDialogflowCxV3WebhookRequest::setDetectIntentResponseId(const QString &detect_intent_response_id) {
    m_detect_intent_response_id = detect_intent_response_id;
    m_detect_intent_response_id_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_detect_intent_response_id_Set() const{
    return m_detect_intent_response_id_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_detect_intent_response_id_Valid() const{
    return m_detect_intent_response_id_isValid;
}

QString OAIGoogleCloudDialogflowCxV3WebhookRequest::getDtmfDigits() const {
    return m_dtmf_digits;
}
void OAIGoogleCloudDialogflowCxV3WebhookRequest::setDtmfDigits(const QString &dtmf_digits) {
    m_dtmf_digits = dtmf_digits;
    m_dtmf_digits_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_dtmf_digits_Set() const{
    return m_dtmf_digits_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_dtmf_digits_Valid() const{
    return m_dtmf_digits_isValid;
}

OAIGoogleCloudDialogflowCxV3WebhookRequestFulfillmentInfo OAIGoogleCloudDialogflowCxV3WebhookRequest::getFulfillmentInfo() const {
    return m_fulfillment_info;
}
void OAIGoogleCloudDialogflowCxV3WebhookRequest::setFulfillmentInfo(const OAIGoogleCloudDialogflowCxV3WebhookRequestFulfillmentInfo &fulfillment_info) {
    m_fulfillment_info = fulfillment_info;
    m_fulfillment_info_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_fulfillment_info_Set() const{
    return m_fulfillment_info_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_fulfillment_info_Valid() const{
    return m_fulfillment_info_isValid;
}

OAIGoogleCloudDialogflowCxV3WebhookRequestIntentInfo OAIGoogleCloudDialogflowCxV3WebhookRequest::getIntentInfo() const {
    return m_intent_info;
}
void OAIGoogleCloudDialogflowCxV3WebhookRequest::setIntentInfo(const OAIGoogleCloudDialogflowCxV3WebhookRequestIntentInfo &intent_info) {
    m_intent_info = intent_info;
    m_intent_info_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_intent_info_Set() const{
    return m_intent_info_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_intent_info_Valid() const{
    return m_intent_info_isValid;
}

QString OAIGoogleCloudDialogflowCxV3WebhookRequest::getLanguageCode() const {
    return m_language_code;
}
void OAIGoogleCloudDialogflowCxV3WebhookRequest::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QList<OAIGoogleCloudDialogflowCxV3ResponseMessage> OAIGoogleCloudDialogflowCxV3WebhookRequest::getMessages() const {
    return m_messages;
}
void OAIGoogleCloudDialogflowCxV3WebhookRequest::setMessages(const QList<OAIGoogleCloudDialogflowCxV3ResponseMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_messages_Valid() const{
    return m_messages_isValid;
}

OAIGoogleCloudDialogflowCxV3PageInfo OAIGoogleCloudDialogflowCxV3WebhookRequest::getPageInfo() const {
    return m_page_info;
}
void OAIGoogleCloudDialogflowCxV3WebhookRequest::setPageInfo(const OAIGoogleCloudDialogflowCxV3PageInfo &page_info) {
    m_page_info = page_info;
    m_page_info_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_page_info_Set() const{
    return m_page_info_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_page_info_Valid() const{
    return m_page_info_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudDialogflowCxV3WebhookRequest::getPayload() const {
    return m_payload;
}
void OAIGoogleCloudDialogflowCxV3WebhookRequest::setPayload(const QMap<QString, QJsonValue> &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_payload_Valid() const{
    return m_payload_isValid;
}

OAIGoogleCloudDialogflowCxV3WebhookRequestSentimentAnalysisResult OAIGoogleCloudDialogflowCxV3WebhookRequest::getSentimentAnalysisResult() const {
    return m_sentiment_analysis_result;
}
void OAIGoogleCloudDialogflowCxV3WebhookRequest::setSentimentAnalysisResult(const OAIGoogleCloudDialogflowCxV3WebhookRequestSentimentAnalysisResult &sentiment_analysis_result) {
    m_sentiment_analysis_result = sentiment_analysis_result;
    m_sentiment_analysis_result_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_sentiment_analysis_result_Set() const{
    return m_sentiment_analysis_result_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_sentiment_analysis_result_Valid() const{
    return m_sentiment_analysis_result_isValid;
}

OAIGoogleCloudDialogflowCxV3SessionInfo OAIGoogleCloudDialogflowCxV3WebhookRequest::getSessionInfo() const {
    return m_session_info;
}
void OAIGoogleCloudDialogflowCxV3WebhookRequest::setSessionInfo(const OAIGoogleCloudDialogflowCxV3SessionInfo &session_info) {
    m_session_info = session_info;
    m_session_info_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_session_info_Set() const{
    return m_session_info_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_session_info_Valid() const{
    return m_session_info_isValid;
}

QString OAIGoogleCloudDialogflowCxV3WebhookRequest::getText() const {
    return m_text;
}
void OAIGoogleCloudDialogflowCxV3WebhookRequest::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_text_Set() const{
    return m_text_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIGoogleCloudDialogflowCxV3WebhookRequest::getTranscript() const {
    return m_transcript;
}
void OAIGoogleCloudDialogflowCxV3WebhookRequest::setTranscript(const QString &transcript) {
    m_transcript = transcript;
    m_transcript_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_transcript_Set() const{
    return m_transcript_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_transcript_Valid() const{
    return m_transcript_isValid;
}

QString OAIGoogleCloudDialogflowCxV3WebhookRequest::getTriggerEvent() const {
    return m_trigger_event;
}
void OAIGoogleCloudDialogflowCxV3WebhookRequest::setTriggerEvent(const QString &trigger_event) {
    m_trigger_event = trigger_event;
    m_trigger_event_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_trigger_event_Set() const{
    return m_trigger_event_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_trigger_event_Valid() const{
    return m_trigger_event_isValid;
}

QString OAIGoogleCloudDialogflowCxV3WebhookRequest::getTriggerIntent() const {
    return m_trigger_intent;
}
void OAIGoogleCloudDialogflowCxV3WebhookRequest::setTriggerIntent(const QString &trigger_intent) {
    m_trigger_intent = trigger_intent;
    m_trigger_intent_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_trigger_intent_Set() const{
    return m_trigger_intent_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::is_trigger_intent_Valid() const{
    return m_trigger_intent_isValid;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detect_intent_response_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dtmf_digits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillment_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_analysis_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcript_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_intent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3WebhookRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
