/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3beta1TurnSignals.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3beta1TurnSignals::OAIGoogleCloudDialogflowCxV3beta1TurnSignals(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3beta1TurnSignals::OAIGoogleCloudDialogflowCxV3beta1TurnSignals() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3beta1TurnSignals::~OAIGoogleCloudDialogflowCxV3beta1TurnSignals() {}

void OAIGoogleCloudDialogflowCxV3beta1TurnSignals::initializeModel() {

    m_agent_escalated_isSet = false;
    m_agent_escalated_isValid = false;

    m_dtmf_used_isSet = false;
    m_dtmf_used_isValid = false;

    m_failure_reasons_isSet = false;
    m_failure_reasons_isValid = false;

    m_no_match_isSet = false;
    m_no_match_isValid = false;

    m_no_user_input_isSet = false;
    m_no_user_input_isValid = false;

    m_reached_end_page_isSet = false;
    m_reached_end_page_isValid = false;

    m_sentiment_magnitude_isSet = false;
    m_sentiment_magnitude_isValid = false;

    m_sentiment_score_isSet = false;
    m_sentiment_score_isValid = false;

    m_user_escalated_isSet = false;
    m_user_escalated_isValid = false;

    m_webhook_statuses_isSet = false;
    m_webhook_statuses_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3beta1TurnSignals::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3beta1TurnSignals::fromJsonObject(QJsonObject json) {

    m_agent_escalated_isValid = ::OpenAPI::fromJsonValue(m_agent_escalated, json[QString("agentEscalated")]);
    m_agent_escalated_isSet = !json[QString("agentEscalated")].isNull() && m_agent_escalated_isValid;

    m_dtmf_used_isValid = ::OpenAPI::fromJsonValue(m_dtmf_used, json[QString("dtmfUsed")]);
    m_dtmf_used_isSet = !json[QString("dtmfUsed")].isNull() && m_dtmf_used_isValid;

    m_failure_reasons_isValid = ::OpenAPI::fromJsonValue(m_failure_reasons, json[QString("failureReasons")]);
    m_failure_reasons_isSet = !json[QString("failureReasons")].isNull() && m_failure_reasons_isValid;

    m_no_match_isValid = ::OpenAPI::fromJsonValue(m_no_match, json[QString("noMatch")]);
    m_no_match_isSet = !json[QString("noMatch")].isNull() && m_no_match_isValid;

    m_no_user_input_isValid = ::OpenAPI::fromJsonValue(m_no_user_input, json[QString("noUserInput")]);
    m_no_user_input_isSet = !json[QString("noUserInput")].isNull() && m_no_user_input_isValid;

    m_reached_end_page_isValid = ::OpenAPI::fromJsonValue(m_reached_end_page, json[QString("reachedEndPage")]);
    m_reached_end_page_isSet = !json[QString("reachedEndPage")].isNull() && m_reached_end_page_isValid;

    m_sentiment_magnitude_isValid = ::OpenAPI::fromJsonValue(m_sentiment_magnitude, json[QString("sentimentMagnitude")]);
    m_sentiment_magnitude_isSet = !json[QString("sentimentMagnitude")].isNull() && m_sentiment_magnitude_isValid;

    m_sentiment_score_isValid = ::OpenAPI::fromJsonValue(m_sentiment_score, json[QString("sentimentScore")]);
    m_sentiment_score_isSet = !json[QString("sentimentScore")].isNull() && m_sentiment_score_isValid;

    m_user_escalated_isValid = ::OpenAPI::fromJsonValue(m_user_escalated, json[QString("userEscalated")]);
    m_user_escalated_isSet = !json[QString("userEscalated")].isNull() && m_user_escalated_isValid;

    m_webhook_statuses_isValid = ::OpenAPI::fromJsonValue(m_webhook_statuses, json[QString("webhookStatuses")]);
    m_webhook_statuses_isSet = !json[QString("webhookStatuses")].isNull() && m_webhook_statuses_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1TurnSignals::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3beta1TurnSignals::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_escalated_isSet) {
        obj.insert(QString("agentEscalated"), ::OpenAPI::toJsonValue(m_agent_escalated));
    }
    if (m_dtmf_used_isSet) {
        obj.insert(QString("dtmfUsed"), ::OpenAPI::toJsonValue(m_dtmf_used));
    }
    if (m_failure_reasons.size() > 0) {
        obj.insert(QString("failureReasons"), ::OpenAPI::toJsonValue(m_failure_reasons));
    }
    if (m_no_match_isSet) {
        obj.insert(QString("noMatch"), ::OpenAPI::toJsonValue(m_no_match));
    }
    if (m_no_user_input_isSet) {
        obj.insert(QString("noUserInput"), ::OpenAPI::toJsonValue(m_no_user_input));
    }
    if (m_reached_end_page_isSet) {
        obj.insert(QString("reachedEndPage"), ::OpenAPI::toJsonValue(m_reached_end_page));
    }
    if (m_sentiment_magnitude_isSet) {
        obj.insert(QString("sentimentMagnitude"), ::OpenAPI::toJsonValue(m_sentiment_magnitude));
    }
    if (m_sentiment_score_isSet) {
        obj.insert(QString("sentimentScore"), ::OpenAPI::toJsonValue(m_sentiment_score));
    }
    if (m_user_escalated_isSet) {
        obj.insert(QString("userEscalated"), ::OpenAPI::toJsonValue(m_user_escalated));
    }
    if (m_webhook_statuses.size() > 0) {
        obj.insert(QString("webhookStatuses"), ::OpenAPI::toJsonValue(m_webhook_statuses));
    }
    return obj;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::isAgentEscalated() const {
    return m_agent_escalated;
}
void OAIGoogleCloudDialogflowCxV3beta1TurnSignals::setAgentEscalated(const bool &agent_escalated) {
    m_agent_escalated = agent_escalated;
    m_agent_escalated_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::is_agent_escalated_Set() const{
    return m_agent_escalated_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::is_agent_escalated_Valid() const{
    return m_agent_escalated_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::isDtmfUsed() const {
    return m_dtmf_used;
}
void OAIGoogleCloudDialogflowCxV3beta1TurnSignals::setDtmfUsed(const bool &dtmf_used) {
    m_dtmf_used = dtmf_used;
    m_dtmf_used_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::is_dtmf_used_Set() const{
    return m_dtmf_used_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::is_dtmf_used_Valid() const{
    return m_dtmf_used_isValid;
}

QList<QString> OAIGoogleCloudDialogflowCxV3beta1TurnSignals::getFailureReasons() const {
    return m_failure_reasons;
}
void OAIGoogleCloudDialogflowCxV3beta1TurnSignals::setFailureReasons(const QList<QString> &failure_reasons) {
    m_failure_reasons = failure_reasons;
    m_failure_reasons_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::is_failure_reasons_Set() const{
    return m_failure_reasons_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::is_failure_reasons_Valid() const{
    return m_failure_reasons_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::isNoMatch() const {
    return m_no_match;
}
void OAIGoogleCloudDialogflowCxV3beta1TurnSignals::setNoMatch(const bool &no_match) {
    m_no_match = no_match;
    m_no_match_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::is_no_match_Set() const{
    return m_no_match_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::is_no_match_Valid() const{
    return m_no_match_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::isNoUserInput() const {
    return m_no_user_input;
}
void OAIGoogleCloudDialogflowCxV3beta1TurnSignals::setNoUserInput(const bool &no_user_input) {
    m_no_user_input = no_user_input;
    m_no_user_input_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::is_no_user_input_Set() const{
    return m_no_user_input_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::is_no_user_input_Valid() const{
    return m_no_user_input_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::isReachedEndPage() const {
    return m_reached_end_page;
}
void OAIGoogleCloudDialogflowCxV3beta1TurnSignals::setReachedEndPage(const bool &reached_end_page) {
    m_reached_end_page = reached_end_page;
    m_reached_end_page_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::is_reached_end_page_Set() const{
    return m_reached_end_page_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::is_reached_end_page_Valid() const{
    return m_reached_end_page_isValid;
}

float OAIGoogleCloudDialogflowCxV3beta1TurnSignals::getSentimentMagnitude() const {
    return m_sentiment_magnitude;
}
void OAIGoogleCloudDialogflowCxV3beta1TurnSignals::setSentimentMagnitude(const float &sentiment_magnitude) {
    m_sentiment_magnitude = sentiment_magnitude;
    m_sentiment_magnitude_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::is_sentiment_magnitude_Set() const{
    return m_sentiment_magnitude_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::is_sentiment_magnitude_Valid() const{
    return m_sentiment_magnitude_isValid;
}

float OAIGoogleCloudDialogflowCxV3beta1TurnSignals::getSentimentScore() const {
    return m_sentiment_score;
}
void OAIGoogleCloudDialogflowCxV3beta1TurnSignals::setSentimentScore(const float &sentiment_score) {
    m_sentiment_score = sentiment_score;
    m_sentiment_score_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::is_sentiment_score_Set() const{
    return m_sentiment_score_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::is_sentiment_score_Valid() const{
    return m_sentiment_score_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::isUserEscalated() const {
    return m_user_escalated;
}
void OAIGoogleCloudDialogflowCxV3beta1TurnSignals::setUserEscalated(const bool &user_escalated) {
    m_user_escalated = user_escalated;
    m_user_escalated_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::is_user_escalated_Set() const{
    return m_user_escalated_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::is_user_escalated_Valid() const{
    return m_user_escalated_isValid;
}

QList<QString> OAIGoogleCloudDialogflowCxV3beta1TurnSignals::getWebhookStatuses() const {
    return m_webhook_statuses;
}
void OAIGoogleCloudDialogflowCxV3beta1TurnSignals::setWebhookStatuses(const QList<QString> &webhook_statuses) {
    m_webhook_statuses = webhook_statuses;
    m_webhook_statuses_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::is_webhook_statuses_Set() const{
    return m_webhook_statuses_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::is_webhook_statuses_Valid() const{
    return m_webhook_statuses_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_escalated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dtmf_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_user_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reached_end_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_magnitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_escalated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3beta1TurnSignals::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
