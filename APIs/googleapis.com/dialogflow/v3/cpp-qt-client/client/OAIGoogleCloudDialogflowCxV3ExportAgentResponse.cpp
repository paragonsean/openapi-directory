/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3ExportAgentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3ExportAgentResponse::OAIGoogleCloudDialogflowCxV3ExportAgentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3ExportAgentResponse::OAIGoogleCloudDialogflowCxV3ExportAgentResponse() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3ExportAgentResponse::~OAIGoogleCloudDialogflowCxV3ExportAgentResponse() {}

void OAIGoogleCloudDialogflowCxV3ExportAgentResponse::initializeModel() {

    m_agent_content_isSet = false;
    m_agent_content_isValid = false;

    m_agent_uri_isSet = false;
    m_agent_uri_isValid = false;

    m_commit_sha_isSet = false;
    m_commit_sha_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3ExportAgentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3ExportAgentResponse::fromJsonObject(QJsonObject json) {

    m_agent_content_isValid = ::OpenAPI::fromJsonValue(m_agent_content, json[QString("agentContent")]);
    m_agent_content_isSet = !json[QString("agentContent")].isNull() && m_agent_content_isValid;

    m_agent_uri_isValid = ::OpenAPI::fromJsonValue(m_agent_uri, json[QString("agentUri")]);
    m_agent_uri_isSet = !json[QString("agentUri")].isNull() && m_agent_uri_isValid;

    m_commit_sha_isValid = ::OpenAPI::fromJsonValue(m_commit_sha, json[QString("commitSha")]);
    m_commit_sha_isSet = !json[QString("commitSha")].isNull() && m_commit_sha_isValid;
}

QString OAIGoogleCloudDialogflowCxV3ExportAgentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3ExportAgentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_content_isSet) {
        obj.insert(QString("agentContent"), ::OpenAPI::toJsonValue(m_agent_content));
    }
    if (m_agent_uri_isSet) {
        obj.insert(QString("agentUri"), ::OpenAPI::toJsonValue(m_agent_uri));
    }
    if (m_commit_sha_isSet) {
        obj.insert(QString("commitSha"), ::OpenAPI::toJsonValue(m_commit_sha));
    }
    return obj;
}

QByteArray OAIGoogleCloudDialogflowCxV3ExportAgentResponse::getAgentContent() const {
    return m_agent_content;
}
void OAIGoogleCloudDialogflowCxV3ExportAgentResponse::setAgentContent(const QByteArray &agent_content) {
    m_agent_content = agent_content;
    m_agent_content_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3ExportAgentResponse::is_agent_content_Set() const{
    return m_agent_content_isSet;
}

bool OAIGoogleCloudDialogflowCxV3ExportAgentResponse::is_agent_content_Valid() const{
    return m_agent_content_isValid;
}

QString OAIGoogleCloudDialogflowCxV3ExportAgentResponse::getAgentUri() const {
    return m_agent_uri;
}
void OAIGoogleCloudDialogflowCxV3ExportAgentResponse::setAgentUri(const QString &agent_uri) {
    m_agent_uri = agent_uri;
    m_agent_uri_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3ExportAgentResponse::is_agent_uri_Set() const{
    return m_agent_uri_isSet;
}

bool OAIGoogleCloudDialogflowCxV3ExportAgentResponse::is_agent_uri_Valid() const{
    return m_agent_uri_isValid;
}

QString OAIGoogleCloudDialogflowCxV3ExportAgentResponse::getCommitSha() const {
    return m_commit_sha;
}
void OAIGoogleCloudDialogflowCxV3ExportAgentResponse::setCommitSha(const QString &commit_sha) {
    m_commit_sha = commit_sha;
    m_commit_sha_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3ExportAgentResponse::is_commit_sha_Set() const{
    return m_commit_sha_isSet;
}

bool OAIGoogleCloudDialogflowCxV3ExportAgentResponse::is_commit_sha_Valid() const{
    return m_commit_sha_isValid;
}

bool OAIGoogleCloudDialogflowCxV3ExportAgentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_sha_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3ExportAgentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
