/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleCloudDialogflowCxV3Agent.h"
#include "OAIGoogleCloudDialogflowCxV3AnswerFeedback.h"
#include "OAIGoogleCloudDialogflowCxV3BatchDeleteTestCasesRequest.h"
#include "OAIGoogleCloudDialogflowCxV3BatchRunTestCasesRequest.h"
#include "OAIGoogleCloudDialogflowCxV3CalculateCoverageResponse.h"
#include "OAIGoogleCloudDialogflowCxV3CompareVersionsRequest.h"
#include "OAIGoogleCloudDialogflowCxV3CompareVersionsResponse.h"
#include "OAIGoogleCloudDialogflowCxV3DeployFlowRequest.h"
#include "OAIGoogleCloudDialogflowCxV3DetectIntentRequest.h"
#include "OAIGoogleCloudDialogflowCxV3DetectIntentResponse.h"
#include "OAIGoogleCloudDialogflowCxV3Environment.h"
#include "OAIGoogleCloudDialogflowCxV3Experiment.h"
#include "OAIGoogleCloudDialogflowCxV3ExportEntityTypesRequest.h"
#include "OAIGoogleCloudDialogflowCxV3ExportFlowRequest.h"
#include "OAIGoogleCloudDialogflowCxV3ExportIntentsRequest.h"
#include "OAIGoogleCloudDialogflowCxV3ExportTestCasesRequest.h"
#include "OAIGoogleCloudDialogflowCxV3Flow.h"
#include "OAIGoogleCloudDialogflowCxV3FlowValidationResult.h"
#include "OAIGoogleCloudDialogflowCxV3FulfillIntentRequest.h"
#include "OAIGoogleCloudDialogflowCxV3FulfillIntentResponse.h"
#include "OAIGoogleCloudDialogflowCxV3Generator.h"
#include "OAIGoogleCloudDialogflowCxV3ImportEntityTypesRequest.h"
#include "OAIGoogleCloudDialogflowCxV3ImportFlowRequest.h"
#include "OAIGoogleCloudDialogflowCxV3ImportIntentsRequest.h"
#include "OAIGoogleCloudDialogflowCxV3ImportTestCasesRequest.h"
#include "OAIGoogleCloudDialogflowCxV3Intent.h"
#include "OAIGoogleCloudDialogflowCxV3ListAgentsResponse.h"
#include "OAIGoogleCloudDialogflowCxV3ListChangelogsResponse.h"
#include "OAIGoogleCloudDialogflowCxV3ListContinuousTestResultsResponse.h"
#include "OAIGoogleCloudDialogflowCxV3ListDeploymentsResponse.h"
#include "OAIGoogleCloudDialogflowCxV3ListEnvironmentsResponse.h"
#include "OAIGoogleCloudDialogflowCxV3ListExperimentsResponse.h"
#include "OAIGoogleCloudDialogflowCxV3ListFlowsResponse.h"
#include "OAIGoogleCloudDialogflowCxV3ListGeneratorsResponse.h"
#include "OAIGoogleCloudDialogflowCxV3ListIntentsResponse.h"
#include "OAIGoogleCloudDialogflowCxV3ListPagesResponse.h"
#include "OAIGoogleCloudDialogflowCxV3ListSecuritySettingsResponse.h"
#include "OAIGoogleCloudDialogflowCxV3ListSessionEntityTypesResponse.h"
#include "OAIGoogleCloudDialogflowCxV3ListTestCaseResultsResponse.h"
#include "OAIGoogleCloudDialogflowCxV3ListTestCasesResponse.h"
#include "OAIGoogleCloudDialogflowCxV3ListTransitionRouteGroupsResponse.h"
#include "OAIGoogleCloudDialogflowCxV3ListVersionsResponse.h"
#include "OAIGoogleCloudDialogflowCxV3ListWebhooksResponse.h"
#include "OAIGoogleCloudDialogflowCxV3LoadVersionRequest.h"
#include "OAIGoogleCloudDialogflowCxV3LookupEnvironmentHistoryResponse.h"
#include "OAIGoogleCloudDialogflowCxV3MatchIntentRequest.h"
#include "OAIGoogleCloudDialogflowCxV3MatchIntentResponse.h"
#include "OAIGoogleCloudDialogflowCxV3Page.h"
#include "OAIGoogleCloudDialogflowCxV3RestoreAgentRequest.h"
#include "OAIGoogleCloudDialogflowCxV3RunTestCaseRequest.h"
#include "OAIGoogleCloudDialogflowCxV3SecuritySettings.h"
#include "OAIGoogleCloudDialogflowCxV3SessionEntityType.h"
#include "OAIGoogleCloudDialogflowCxV3SubmitAnswerFeedbackRequest.h"
#include "OAIGoogleCloudDialogflowCxV3TestCase.h"
#include "OAIGoogleCloudDialogflowCxV3TransitionRouteGroup.h"
#include "OAIGoogleCloudDialogflowCxV3ValidateFlowRequest.h"
#include "OAIGoogleCloudDialogflowCxV3Version.h"
#include "OAIGoogleCloudDialogflowCxV3Webhook.h"
#include "OAIGoogleCloudLocationListLocationsResponse.h"
#include "OAIGoogleLongrunningListOperationsResponse.h"
#include "OAIGoogleLongrunningOperation.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agents_changelogs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_agent OAIGoogleCloudDialogflowCxV3Agent [optional]
    */
    virtual void dialogflow_projects_locations_agents_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3Agent> &oai_google_cloud_dialogflow_cx_v3_agent = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3Agent>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_export_entity_types_request OAIGoogleCloudDialogflowCxV3ExportEntityTypesRequest [optional]
    */
    virtual void dialogflow_projects_locations_agents_entityTypes_export(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3ExportEntityTypesRequest> &oai_google_cloud_dialogflow_cx_v3_export_entity_types_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3ExportEntityTypesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_import_entity_types_request OAIGoogleCloudDialogflowCxV3ImportEntityTypesRequest [optional]
    */
    virtual void dialogflow_projects_locations_agents_entityTypes_import(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3ImportEntityTypesRequest> &oai_google_cloud_dialogflow_cx_v3_import_entity_types_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3ImportEntityTypesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agents_environments_continuousTestResults_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_environment OAIGoogleCloudDialogflowCxV3Environment [optional]
    */
    virtual void dialogflow_projects_locations_agents_environments_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3Environment> &oai_google_cloud_dialogflow_cx_v3_environment = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3Environment>());

    /**
    * @param[in]  environment QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_deploy_flow_request OAIGoogleCloudDialogflowCxV3DeployFlowRequest [optional]
    */
    virtual void dialogflow_projects_locations_agents_environments_deployFlow(const QString &environment, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3DeployFlowRequest> &oai_google_cloud_dialogflow_cx_v3_deploy_flow_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3DeployFlowRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agents_environments_deployments_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_experiment OAIGoogleCloudDialogflowCxV3Experiment [optional]
    */
    virtual void dialogflow_projects_locations_agents_environments_experiments_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3Experiment> &oai_google_cloud_dialogflow_cx_v3_experiment = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3Experiment>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agents_environments_experiments_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void dialogflow_projects_locations_agents_environments_experiments_start(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void dialogflow_projects_locations_agents_environments_experiments_stop(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agents_environments_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agents_environments_lookupEnvironmentHistory(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  environment QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void dialogflow_projects_locations_agents_environments_runContinuousTest(const QString &environment, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_flow OAIGoogleCloudDialogflowCxV3Flow [optional]
    */
    virtual void dialogflow_projects_locations_agents_flows_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3Flow> &oai_google_cloud_dialogflow_cx_v3_flow = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3Flow>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_export_flow_request OAIGoogleCloudDialogflowCxV3ExportFlowRequest [optional]
    */
    virtual void dialogflow_projects_locations_agents_flows_export(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3ExportFlowRequest> &oai_google_cloud_dialogflow_cx_v3_export_flow_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3ExportFlowRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_import_flow_request OAIGoogleCloudDialogflowCxV3ImportFlowRequest [optional]
    */
    virtual void dialogflow_projects_locations_agents_flows_import(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3ImportFlowRequest> &oai_google_cloud_dialogflow_cx_v3_import_flow_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3ImportFlowRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agents_flows_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_page OAIGoogleCloudDialogflowCxV3Page [optional]
    */
    virtual void dialogflow_projects_locations_agents_flows_pages_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3Page> &oai_google_cloud_dialogflow_cx_v3_page = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3Page>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agents_flows_pages_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void dialogflow_projects_locations_agents_flows_train(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_validate_flow_request OAIGoogleCloudDialogflowCxV3ValidateFlowRequest [optional]
    */
    virtual void dialogflow_projects_locations_agents_flows_validate(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3ValidateFlowRequest> &oai_google_cloud_dialogflow_cx_v3_validate_flow_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3ValidateFlowRequest>());

    /**
    * @param[in]  base_version QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_compare_versions_request OAIGoogleCloudDialogflowCxV3CompareVersionsRequest [optional]
    */
    virtual void dialogflow_projects_locations_agents_flows_versions_compareVersions(const QString &base_version, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3CompareVersionsRequest> &oai_google_cloud_dialogflow_cx_v3_compare_versions_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3CompareVersionsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_version OAIGoogleCloudDialogflowCxV3Version [optional]
    */
    virtual void dialogflow_projects_locations_agents_flows_versions_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3Version> &oai_google_cloud_dialogflow_cx_v3_version = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3Version>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agents_flows_versions_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_load_version_request OAIGoogleCloudDialogflowCxV3LoadVersionRequest [optional]
    */
    virtual void dialogflow_projects_locations_agents_flows_versions_load(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3LoadVersionRequest> &oai_google_cloud_dialogflow_cx_v3_load_version_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3LoadVersionRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_generator OAIGoogleCloudDialogflowCxV3Generator [optional]
    */
    virtual void dialogflow_projects_locations_agents_generators_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3Generator> &oai_google_cloud_dialogflow_cx_v3_generator = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3Generator>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agents_generators_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_intent OAIGoogleCloudDialogflowCxV3Intent [optional]
    */
    virtual void dialogflow_projects_locations_agents_intents_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3Intent> &oai_google_cloud_dialogflow_cx_v3_intent = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3Intent>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_export_intents_request OAIGoogleCloudDialogflowCxV3ExportIntentsRequest [optional]
    */
    virtual void dialogflow_projects_locations_agents_intents_export(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3ExportIntentsRequest> &oai_google_cloud_dialogflow_cx_v3_export_intents_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3ExportIntentsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_import_intents_request OAIGoogleCloudDialogflowCxV3ImportIntentsRequest [optional]
    */
    virtual void dialogflow_projects_locations_agents_intents_import(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3ImportIntentsRequest> &oai_google_cloud_dialogflow_cx_v3_import_intents_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3ImportIntentsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  intent_view QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agents_intents_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &intent_view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agents_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_restore_agent_request OAIGoogleCloudDialogflowCxV3RestoreAgentRequest [optional]
    */
    virtual void dialogflow_projects_locations_agents_restore(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3RestoreAgentRequest> &oai_google_cloud_dialogflow_cx_v3_restore_agent_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3RestoreAgentRequest>());

    /**
    * @param[in]  session QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_detect_intent_request OAIGoogleCloudDialogflowCxV3DetectIntentRequest [optional]
    */
    virtual void dialogflow_projects_locations_agents_sessions_detectIntent(const QString &session, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3DetectIntentRequest> &oai_google_cloud_dialogflow_cx_v3_detect_intent_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3DetectIntentRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_session_entity_type OAIGoogleCloudDialogflowCxV3SessionEntityType [optional]
    */
    virtual void dialogflow_projects_locations_agents_sessions_entityTypes_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3SessionEntityType> &oai_google_cloud_dialogflow_cx_v3_session_entity_type = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3SessionEntityType>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agents_sessions_entityTypes_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_fulfill_intent_request OAIGoogleCloudDialogflowCxV3FulfillIntentRequest [optional]
    */
    virtual void dialogflow_projects_locations_agents_sessions_fulfillIntent(const QString &session, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3FulfillIntentRequest> &oai_google_cloud_dialogflow_cx_v3_fulfill_intent_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3FulfillIntentRequest>());

    /**
    * @param[in]  session QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_match_intent_request OAIGoogleCloudDialogflowCxV3MatchIntentRequest [optional]
    */
    virtual void dialogflow_projects_locations_agents_sessions_matchIntent(const QString &session, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3MatchIntentRequest> &oai_google_cloud_dialogflow_cx_v3_match_intent_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3MatchIntentRequest>());

    /**
    * @param[in]  session QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_detect_intent_request OAIGoogleCloudDialogflowCxV3DetectIntentRequest [optional]
    */
    virtual void dialogflow_projects_locations_agents_sessions_serverStreamingDetectIntent(const QString &session, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3DetectIntentRequest> &oai_google_cloud_dialogflow_cx_v3_detect_intent_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3DetectIntentRequest>());

    /**
    * @param[in]  session QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_submit_answer_feedback_request OAIGoogleCloudDialogflowCxV3SubmitAnswerFeedbackRequest [optional]
    */
    virtual void dialogflow_projects_locations_agents_sessions_submitAnswerFeedback(const QString &session, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3SubmitAnswerFeedbackRequest> &oai_google_cloud_dialogflow_cx_v3_submit_answer_feedback_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3SubmitAnswerFeedbackRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_batch_delete_test_cases_request OAIGoogleCloudDialogflowCxV3BatchDeleteTestCasesRequest [optional]
    */
    virtual void dialogflow_projects_locations_agents_testCases_batchDelete(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3BatchDeleteTestCasesRequest> &oai_google_cloud_dialogflow_cx_v3_batch_delete_test_cases_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3BatchDeleteTestCasesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_batch_run_test_cases_request OAIGoogleCloudDialogflowCxV3BatchRunTestCasesRequest [optional]
    */
    virtual void dialogflow_projects_locations_agents_testCases_batchRun(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3BatchRunTestCasesRequest> &oai_google_cloud_dialogflow_cx_v3_batch_run_test_cases_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3BatchRunTestCasesRequest>());

    /**
    * @param[in]  agent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void dialogflow_projects_locations_agents_testCases_calculateCoverage(const QString &agent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_test_case OAIGoogleCloudDialogflowCxV3TestCase [optional]
    */
    virtual void dialogflow_projects_locations_agents_testCases_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3TestCase> &oai_google_cloud_dialogflow_cx_v3_test_case = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3TestCase>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_export_test_cases_request OAIGoogleCloudDialogflowCxV3ExportTestCasesRequest [optional]
    */
    virtual void dialogflow_projects_locations_agents_testCases_export(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3ExportTestCasesRequest> &oai_google_cloud_dialogflow_cx_v3_export_test_cases_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3ExportTestCasesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_import_test_cases_request OAIGoogleCloudDialogflowCxV3ImportTestCasesRequest [optional]
    */
    virtual void dialogflow_projects_locations_agents_testCases_import(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3ImportTestCasesRequest> &oai_google_cloud_dialogflow_cx_v3_import_test_cases_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3ImportTestCasesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void dialogflow_projects_locations_agents_testCases_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agents_testCases_results_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_run_test_case_request OAIGoogleCloudDialogflowCxV3RunTestCaseRequest [optional]
    */
    virtual void dialogflow_projects_locations_agents_testCases_run(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3RunTestCaseRequest> &oai_google_cloud_dialogflow_cx_v3_run_test_case_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3RunTestCaseRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_transition_route_group OAIGoogleCloudDialogflowCxV3TransitionRouteGroup [optional]
    */
    virtual void dialogflow_projects_locations_agents_transitionRouteGroups_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3TransitionRouteGroup> &oai_google_cloud_dialogflow_cx_v3_transition_route_group = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3TransitionRouteGroup>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agents_transitionRouteGroups_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_webhook OAIGoogleCloudDialogflowCxV3Webhook [optional]
    */
    virtual void dialogflow_projects_locations_agents_webhooks_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3Webhook> &oai_google_cloud_dialogflow_cx_v3_webhook = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3Webhook>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agents_webhooks_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_security_settings OAIGoogleCloudDialogflowCxV3SecuritySettings [optional]
    */
    virtual void dialogflow_projects_locations_securitySettings_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3SecuritySettings> &oai_google_cloud_dialogflow_cx_v3_security_settings = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3SecuritySettings>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  force bool [optional]
    */
    virtual void dialogflow_projects_locations_securitySettings_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_securitySettings_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_cx_v3_security_settings OAIGoogleCloudDialogflowCxV3SecuritySettings [optional]
    */
    virtual void dialogflow_projects_locations_securitySettings_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3SecuritySettings> &oai_google_cloud_dialogflow_cx_v3_security_settings = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowCxV3SecuritySettings>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void dialogflow_projects_operations_cancel(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  language_code QString [optional]
    */
    virtual void dialogflow_projects_operations_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_operations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dialogflow_projects_locations_agents_changelogs_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_entityTypes_exportCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_entityTypes_importCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_environments_continuousTestResults_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_environments_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_environments_deployFlowCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_environments_deployments_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_environments_experiments_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_environments_experiments_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_environments_experiments_startCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_environments_experiments_stopCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_environments_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_environments_lookupEnvironmentHistoryCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_environments_runContinuousTestCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_flows_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_flows_exportCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_flows_importCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_flows_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_flows_pages_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_flows_pages_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_flows_trainCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_flows_validateCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_flows_versions_compareVersionsCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_flows_versions_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_flows_versions_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_flows_versions_loadCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_generators_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_generators_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_intents_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_intents_exportCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_intents_importCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_intents_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_restoreCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_sessions_detectIntentCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_sessions_entityTypes_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_sessions_entityTypes_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_sessions_fulfillIntentCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_sessions_matchIntentCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_sessions_serverStreamingDetectIntentCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_sessions_submitAnswerFeedbackCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_testCases_batchDeleteCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_testCases_batchRunCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_testCases_calculateCoverageCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_testCases_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_testCases_exportCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_testCases_importCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_testCases_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_testCases_results_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_testCases_runCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_transitionRouteGroups_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_transitionRouteGroups_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_webhooks_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agents_webhooks_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_securitySettings_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_securitySettings_deleteCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_securitySettings_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_securitySettings_patchCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_operations_cancelCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_operations_getCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_operations_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dialogflow_projects_locations_agents_changelogs_listSignal(OAIGoogleCloudDialogflowCxV3ListChangelogsResponse summary);
    void dialogflow_projects_locations_agents_createSignal(OAIGoogleCloudDialogflowCxV3Agent summary);
    void dialogflow_projects_locations_agents_entityTypes_exportSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_entityTypes_importSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_environments_continuousTestResults_listSignal(OAIGoogleCloudDialogflowCxV3ListContinuousTestResultsResponse summary);
    void dialogflow_projects_locations_agents_environments_createSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_environments_deployFlowSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_environments_deployments_listSignal(OAIGoogleCloudDialogflowCxV3ListDeploymentsResponse summary);
    void dialogflow_projects_locations_agents_environments_experiments_createSignal(OAIGoogleCloudDialogflowCxV3Experiment summary);
    void dialogflow_projects_locations_agents_environments_experiments_listSignal(OAIGoogleCloudDialogflowCxV3ListExperimentsResponse summary);
    void dialogflow_projects_locations_agents_environments_experiments_startSignal(OAIGoogleCloudDialogflowCxV3Experiment summary);
    void dialogflow_projects_locations_agents_environments_experiments_stopSignal(OAIGoogleCloudDialogflowCxV3Experiment summary);
    void dialogflow_projects_locations_agents_environments_listSignal(OAIGoogleCloudDialogflowCxV3ListEnvironmentsResponse summary);
    void dialogflow_projects_locations_agents_environments_lookupEnvironmentHistorySignal(OAIGoogleCloudDialogflowCxV3LookupEnvironmentHistoryResponse summary);
    void dialogflow_projects_locations_agents_environments_runContinuousTestSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_flows_createSignal(OAIGoogleCloudDialogflowCxV3Flow summary);
    void dialogflow_projects_locations_agents_flows_exportSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_flows_importSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_flows_listSignal(OAIGoogleCloudDialogflowCxV3ListFlowsResponse summary);
    void dialogflow_projects_locations_agents_flows_pages_createSignal(OAIGoogleCloudDialogflowCxV3Page summary);
    void dialogflow_projects_locations_agents_flows_pages_listSignal(OAIGoogleCloudDialogflowCxV3ListPagesResponse summary);
    void dialogflow_projects_locations_agents_flows_trainSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_flows_validateSignal(OAIGoogleCloudDialogflowCxV3FlowValidationResult summary);
    void dialogflow_projects_locations_agents_flows_versions_compareVersionsSignal(OAIGoogleCloudDialogflowCxV3CompareVersionsResponse summary);
    void dialogflow_projects_locations_agents_flows_versions_createSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_flows_versions_listSignal(OAIGoogleCloudDialogflowCxV3ListVersionsResponse summary);
    void dialogflow_projects_locations_agents_flows_versions_loadSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_generators_createSignal(OAIGoogleCloudDialogflowCxV3Generator summary);
    void dialogflow_projects_locations_agents_generators_listSignal(OAIGoogleCloudDialogflowCxV3ListGeneratorsResponse summary);
    void dialogflow_projects_locations_agents_intents_createSignal(OAIGoogleCloudDialogflowCxV3Intent summary);
    void dialogflow_projects_locations_agents_intents_exportSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_intents_importSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_intents_listSignal(OAIGoogleCloudDialogflowCxV3ListIntentsResponse summary);
    void dialogflow_projects_locations_agents_listSignal(OAIGoogleCloudDialogflowCxV3ListAgentsResponse summary);
    void dialogflow_projects_locations_agents_restoreSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_sessions_detectIntentSignal(OAIGoogleCloudDialogflowCxV3DetectIntentResponse summary);
    void dialogflow_projects_locations_agents_sessions_entityTypes_createSignal(OAIGoogleCloudDialogflowCxV3SessionEntityType summary);
    void dialogflow_projects_locations_agents_sessions_entityTypes_listSignal(OAIGoogleCloudDialogflowCxV3ListSessionEntityTypesResponse summary);
    void dialogflow_projects_locations_agents_sessions_fulfillIntentSignal(OAIGoogleCloudDialogflowCxV3FulfillIntentResponse summary);
    void dialogflow_projects_locations_agents_sessions_matchIntentSignal(OAIGoogleCloudDialogflowCxV3MatchIntentResponse summary);
    void dialogflow_projects_locations_agents_sessions_serverStreamingDetectIntentSignal(OAIGoogleCloudDialogflowCxV3DetectIntentResponse summary);
    void dialogflow_projects_locations_agents_sessions_submitAnswerFeedbackSignal(OAIGoogleCloudDialogflowCxV3AnswerFeedback summary);
    void dialogflow_projects_locations_agents_testCases_batchDeleteSignal(OAIObject summary);
    void dialogflow_projects_locations_agents_testCases_batchRunSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_testCases_calculateCoverageSignal(OAIGoogleCloudDialogflowCxV3CalculateCoverageResponse summary);
    void dialogflow_projects_locations_agents_testCases_createSignal(OAIGoogleCloudDialogflowCxV3TestCase summary);
    void dialogflow_projects_locations_agents_testCases_exportSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_testCases_importSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_testCases_listSignal(OAIGoogleCloudDialogflowCxV3ListTestCasesResponse summary);
    void dialogflow_projects_locations_agents_testCases_results_listSignal(OAIGoogleCloudDialogflowCxV3ListTestCaseResultsResponse summary);
    void dialogflow_projects_locations_agents_testCases_runSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_transitionRouteGroups_createSignal(OAIGoogleCloudDialogflowCxV3TransitionRouteGroup summary);
    void dialogflow_projects_locations_agents_transitionRouteGroups_listSignal(OAIGoogleCloudDialogflowCxV3ListTransitionRouteGroupsResponse summary);
    void dialogflow_projects_locations_agents_webhooks_createSignal(OAIGoogleCloudDialogflowCxV3Webhook summary);
    void dialogflow_projects_locations_agents_webhooks_listSignal(OAIGoogleCloudDialogflowCxV3ListWebhooksResponse summary);
    void dialogflow_projects_locations_listSignal(OAIGoogleCloudLocationListLocationsResponse summary);
    void dialogflow_projects_locations_securitySettings_createSignal(OAIGoogleCloudDialogflowCxV3SecuritySettings summary);
    void dialogflow_projects_locations_securitySettings_deleteSignal(OAIObject summary);
    void dialogflow_projects_locations_securitySettings_listSignal(OAIGoogleCloudDialogflowCxV3ListSecuritySettingsResponse summary);
    void dialogflow_projects_locations_securitySettings_patchSignal(OAIGoogleCloudDialogflowCxV3SecuritySettings summary);
    void dialogflow_projects_operations_cancelSignal(OAIObject summary);
    void dialogflow_projects_operations_getSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_operations_listSignal(OAIGoogleLongrunningListOperationsResponse summary);


    void dialogflow_projects_locations_agents_changelogs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3ListChangelogsResponse summary);
    void dialogflow_projects_locations_agents_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3Agent summary);
    void dialogflow_projects_locations_agents_entityTypes_exportSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_entityTypes_importSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_environments_continuousTestResults_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3ListContinuousTestResultsResponse summary);
    void dialogflow_projects_locations_agents_environments_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_environments_deployFlowSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_environments_deployments_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3ListDeploymentsResponse summary);
    void dialogflow_projects_locations_agents_environments_experiments_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3Experiment summary);
    void dialogflow_projects_locations_agents_environments_experiments_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3ListExperimentsResponse summary);
    void dialogflow_projects_locations_agents_environments_experiments_startSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3Experiment summary);
    void dialogflow_projects_locations_agents_environments_experiments_stopSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3Experiment summary);
    void dialogflow_projects_locations_agents_environments_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3ListEnvironmentsResponse summary);
    void dialogflow_projects_locations_agents_environments_lookupEnvironmentHistorySignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3LookupEnvironmentHistoryResponse summary);
    void dialogflow_projects_locations_agents_environments_runContinuousTestSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_flows_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3Flow summary);
    void dialogflow_projects_locations_agents_flows_exportSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_flows_importSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_flows_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3ListFlowsResponse summary);
    void dialogflow_projects_locations_agents_flows_pages_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3Page summary);
    void dialogflow_projects_locations_agents_flows_pages_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3ListPagesResponse summary);
    void dialogflow_projects_locations_agents_flows_trainSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_flows_validateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3FlowValidationResult summary);
    void dialogflow_projects_locations_agents_flows_versions_compareVersionsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3CompareVersionsResponse summary);
    void dialogflow_projects_locations_agents_flows_versions_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_flows_versions_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3ListVersionsResponse summary);
    void dialogflow_projects_locations_agents_flows_versions_loadSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_generators_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3Generator summary);
    void dialogflow_projects_locations_agents_generators_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3ListGeneratorsResponse summary);
    void dialogflow_projects_locations_agents_intents_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3Intent summary);
    void dialogflow_projects_locations_agents_intents_exportSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_intents_importSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_intents_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3ListIntentsResponse summary);
    void dialogflow_projects_locations_agents_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3ListAgentsResponse summary);
    void dialogflow_projects_locations_agents_restoreSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_sessions_detectIntentSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3DetectIntentResponse summary);
    void dialogflow_projects_locations_agents_sessions_entityTypes_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3SessionEntityType summary);
    void dialogflow_projects_locations_agents_sessions_entityTypes_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3ListSessionEntityTypesResponse summary);
    void dialogflow_projects_locations_agents_sessions_fulfillIntentSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3FulfillIntentResponse summary);
    void dialogflow_projects_locations_agents_sessions_matchIntentSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3MatchIntentResponse summary);
    void dialogflow_projects_locations_agents_sessions_serverStreamingDetectIntentSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3DetectIntentResponse summary);
    void dialogflow_projects_locations_agents_sessions_submitAnswerFeedbackSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3AnswerFeedback summary);
    void dialogflow_projects_locations_agents_testCases_batchDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void dialogflow_projects_locations_agents_testCases_batchRunSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_testCases_calculateCoverageSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3CalculateCoverageResponse summary);
    void dialogflow_projects_locations_agents_testCases_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3TestCase summary);
    void dialogflow_projects_locations_agents_testCases_exportSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_testCases_importSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_testCases_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3ListTestCasesResponse summary);
    void dialogflow_projects_locations_agents_testCases_results_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3ListTestCaseResultsResponse summary);
    void dialogflow_projects_locations_agents_testCases_runSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agents_transitionRouteGroups_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3TransitionRouteGroup summary);
    void dialogflow_projects_locations_agents_transitionRouteGroups_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3ListTransitionRouteGroupsResponse summary);
    void dialogflow_projects_locations_agents_webhooks_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3Webhook summary);
    void dialogflow_projects_locations_agents_webhooks_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3ListWebhooksResponse summary);
    void dialogflow_projects_locations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudLocationListLocationsResponse summary);
    void dialogflow_projects_locations_securitySettings_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3SecuritySettings summary);
    void dialogflow_projects_locations_securitySettings_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void dialogflow_projects_locations_securitySettings_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3ListSecuritySettingsResponse summary);
    void dialogflow_projects_locations_securitySettings_patchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowCxV3SecuritySettings summary);
    void dialogflow_projects_operations_cancelSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void dialogflow_projects_operations_getSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_operations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningListOperationsResponse summary);

    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_changelogs_listSignalError() instead")
    void dialogflow_projects_locations_agents_changelogs_listSignalE(OAIGoogleCloudDialogflowCxV3ListChangelogsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_changelogs_listSignalError(OAIGoogleCloudDialogflowCxV3ListChangelogsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_createSignalError() instead")
    void dialogflow_projects_locations_agents_createSignalE(OAIGoogleCloudDialogflowCxV3Agent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_createSignalError(OAIGoogleCloudDialogflowCxV3Agent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_entityTypes_exportSignalError() instead")
    void dialogflow_projects_locations_agents_entityTypes_exportSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_entityTypes_exportSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_entityTypes_importSignalError() instead")
    void dialogflow_projects_locations_agents_entityTypes_importSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_entityTypes_importSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_continuousTestResults_listSignalError() instead")
    void dialogflow_projects_locations_agents_environments_continuousTestResults_listSignalE(OAIGoogleCloudDialogflowCxV3ListContinuousTestResultsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_continuousTestResults_listSignalError(OAIGoogleCloudDialogflowCxV3ListContinuousTestResultsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_createSignalError() instead")
    void dialogflow_projects_locations_agents_environments_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_deployFlowSignalError() instead")
    void dialogflow_projects_locations_agents_environments_deployFlowSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_deployFlowSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_deployments_listSignalError() instead")
    void dialogflow_projects_locations_agents_environments_deployments_listSignalE(OAIGoogleCloudDialogflowCxV3ListDeploymentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_deployments_listSignalError(OAIGoogleCloudDialogflowCxV3ListDeploymentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_experiments_createSignalError() instead")
    void dialogflow_projects_locations_agents_environments_experiments_createSignalE(OAIGoogleCloudDialogflowCxV3Experiment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_experiments_createSignalError(OAIGoogleCloudDialogflowCxV3Experiment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_experiments_listSignalError() instead")
    void dialogflow_projects_locations_agents_environments_experiments_listSignalE(OAIGoogleCloudDialogflowCxV3ListExperimentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_experiments_listSignalError(OAIGoogleCloudDialogflowCxV3ListExperimentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_experiments_startSignalError() instead")
    void dialogflow_projects_locations_agents_environments_experiments_startSignalE(OAIGoogleCloudDialogflowCxV3Experiment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_experiments_startSignalError(OAIGoogleCloudDialogflowCxV3Experiment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_experiments_stopSignalError() instead")
    void dialogflow_projects_locations_agents_environments_experiments_stopSignalE(OAIGoogleCloudDialogflowCxV3Experiment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_experiments_stopSignalError(OAIGoogleCloudDialogflowCxV3Experiment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_listSignalError() instead")
    void dialogflow_projects_locations_agents_environments_listSignalE(OAIGoogleCloudDialogflowCxV3ListEnvironmentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_listSignalError(OAIGoogleCloudDialogflowCxV3ListEnvironmentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_lookupEnvironmentHistorySignalError() instead")
    void dialogflow_projects_locations_agents_environments_lookupEnvironmentHistorySignalE(OAIGoogleCloudDialogflowCxV3LookupEnvironmentHistoryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_lookupEnvironmentHistorySignalError(OAIGoogleCloudDialogflowCxV3LookupEnvironmentHistoryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_runContinuousTestSignalError() instead")
    void dialogflow_projects_locations_agents_environments_runContinuousTestSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_runContinuousTestSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_createSignalError() instead")
    void dialogflow_projects_locations_agents_flows_createSignalE(OAIGoogleCloudDialogflowCxV3Flow summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_createSignalError(OAIGoogleCloudDialogflowCxV3Flow summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_exportSignalError() instead")
    void dialogflow_projects_locations_agents_flows_exportSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_exportSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_importSignalError() instead")
    void dialogflow_projects_locations_agents_flows_importSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_importSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_listSignalError() instead")
    void dialogflow_projects_locations_agents_flows_listSignalE(OAIGoogleCloudDialogflowCxV3ListFlowsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_listSignalError(OAIGoogleCloudDialogflowCxV3ListFlowsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_pages_createSignalError() instead")
    void dialogflow_projects_locations_agents_flows_pages_createSignalE(OAIGoogleCloudDialogflowCxV3Page summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_pages_createSignalError(OAIGoogleCloudDialogflowCxV3Page summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_pages_listSignalError() instead")
    void dialogflow_projects_locations_agents_flows_pages_listSignalE(OAIGoogleCloudDialogflowCxV3ListPagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_pages_listSignalError(OAIGoogleCloudDialogflowCxV3ListPagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_trainSignalError() instead")
    void dialogflow_projects_locations_agents_flows_trainSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_trainSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_validateSignalError() instead")
    void dialogflow_projects_locations_agents_flows_validateSignalE(OAIGoogleCloudDialogflowCxV3FlowValidationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_validateSignalError(OAIGoogleCloudDialogflowCxV3FlowValidationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_versions_compareVersionsSignalError() instead")
    void dialogflow_projects_locations_agents_flows_versions_compareVersionsSignalE(OAIGoogleCloudDialogflowCxV3CompareVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_versions_compareVersionsSignalError(OAIGoogleCloudDialogflowCxV3CompareVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_versions_createSignalError() instead")
    void dialogflow_projects_locations_agents_flows_versions_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_versions_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_versions_listSignalError() instead")
    void dialogflow_projects_locations_agents_flows_versions_listSignalE(OAIGoogleCloudDialogflowCxV3ListVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_versions_listSignalError(OAIGoogleCloudDialogflowCxV3ListVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_versions_loadSignalError() instead")
    void dialogflow_projects_locations_agents_flows_versions_loadSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_versions_loadSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_generators_createSignalError() instead")
    void dialogflow_projects_locations_agents_generators_createSignalE(OAIGoogleCloudDialogflowCxV3Generator summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_generators_createSignalError(OAIGoogleCloudDialogflowCxV3Generator summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_generators_listSignalError() instead")
    void dialogflow_projects_locations_agents_generators_listSignalE(OAIGoogleCloudDialogflowCxV3ListGeneratorsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_generators_listSignalError(OAIGoogleCloudDialogflowCxV3ListGeneratorsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_intents_createSignalError() instead")
    void dialogflow_projects_locations_agents_intents_createSignalE(OAIGoogleCloudDialogflowCxV3Intent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_intents_createSignalError(OAIGoogleCloudDialogflowCxV3Intent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_intents_exportSignalError() instead")
    void dialogflow_projects_locations_agents_intents_exportSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_intents_exportSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_intents_importSignalError() instead")
    void dialogflow_projects_locations_agents_intents_importSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_intents_importSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_intents_listSignalError() instead")
    void dialogflow_projects_locations_agents_intents_listSignalE(OAIGoogleCloudDialogflowCxV3ListIntentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_intents_listSignalError(OAIGoogleCloudDialogflowCxV3ListIntentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_listSignalError() instead")
    void dialogflow_projects_locations_agents_listSignalE(OAIGoogleCloudDialogflowCxV3ListAgentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_listSignalError(OAIGoogleCloudDialogflowCxV3ListAgentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_restoreSignalError() instead")
    void dialogflow_projects_locations_agents_restoreSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_restoreSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_sessions_detectIntentSignalError() instead")
    void dialogflow_projects_locations_agents_sessions_detectIntentSignalE(OAIGoogleCloudDialogflowCxV3DetectIntentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_sessions_detectIntentSignalError(OAIGoogleCloudDialogflowCxV3DetectIntentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_sessions_entityTypes_createSignalError() instead")
    void dialogflow_projects_locations_agents_sessions_entityTypes_createSignalE(OAIGoogleCloudDialogflowCxV3SessionEntityType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_sessions_entityTypes_createSignalError(OAIGoogleCloudDialogflowCxV3SessionEntityType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_sessions_entityTypes_listSignalError() instead")
    void dialogflow_projects_locations_agents_sessions_entityTypes_listSignalE(OAIGoogleCloudDialogflowCxV3ListSessionEntityTypesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_sessions_entityTypes_listSignalError(OAIGoogleCloudDialogflowCxV3ListSessionEntityTypesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_sessions_fulfillIntentSignalError() instead")
    void dialogflow_projects_locations_agents_sessions_fulfillIntentSignalE(OAIGoogleCloudDialogflowCxV3FulfillIntentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_sessions_fulfillIntentSignalError(OAIGoogleCloudDialogflowCxV3FulfillIntentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_sessions_matchIntentSignalError() instead")
    void dialogflow_projects_locations_agents_sessions_matchIntentSignalE(OAIGoogleCloudDialogflowCxV3MatchIntentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_sessions_matchIntentSignalError(OAIGoogleCloudDialogflowCxV3MatchIntentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_sessions_serverStreamingDetectIntentSignalError() instead")
    void dialogflow_projects_locations_agents_sessions_serverStreamingDetectIntentSignalE(OAIGoogleCloudDialogflowCxV3DetectIntentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_sessions_serverStreamingDetectIntentSignalError(OAIGoogleCloudDialogflowCxV3DetectIntentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_sessions_submitAnswerFeedbackSignalError() instead")
    void dialogflow_projects_locations_agents_sessions_submitAnswerFeedbackSignalE(OAIGoogleCloudDialogflowCxV3AnswerFeedback summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_sessions_submitAnswerFeedbackSignalError(OAIGoogleCloudDialogflowCxV3AnswerFeedback summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_testCases_batchDeleteSignalError() instead")
    void dialogflow_projects_locations_agents_testCases_batchDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_testCases_batchDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_testCases_batchRunSignalError() instead")
    void dialogflow_projects_locations_agents_testCases_batchRunSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_testCases_batchRunSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_testCases_calculateCoverageSignalError() instead")
    void dialogflow_projects_locations_agents_testCases_calculateCoverageSignalE(OAIGoogleCloudDialogflowCxV3CalculateCoverageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_testCases_calculateCoverageSignalError(OAIGoogleCloudDialogflowCxV3CalculateCoverageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_testCases_createSignalError() instead")
    void dialogflow_projects_locations_agents_testCases_createSignalE(OAIGoogleCloudDialogflowCxV3TestCase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_testCases_createSignalError(OAIGoogleCloudDialogflowCxV3TestCase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_testCases_exportSignalError() instead")
    void dialogflow_projects_locations_agents_testCases_exportSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_testCases_exportSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_testCases_importSignalError() instead")
    void dialogflow_projects_locations_agents_testCases_importSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_testCases_importSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_testCases_listSignalError() instead")
    void dialogflow_projects_locations_agents_testCases_listSignalE(OAIGoogleCloudDialogflowCxV3ListTestCasesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_testCases_listSignalError(OAIGoogleCloudDialogflowCxV3ListTestCasesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_testCases_results_listSignalError() instead")
    void dialogflow_projects_locations_agents_testCases_results_listSignalE(OAIGoogleCloudDialogflowCxV3ListTestCaseResultsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_testCases_results_listSignalError(OAIGoogleCloudDialogflowCxV3ListTestCaseResultsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_testCases_runSignalError() instead")
    void dialogflow_projects_locations_agents_testCases_runSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_testCases_runSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_transitionRouteGroups_createSignalError() instead")
    void dialogflow_projects_locations_agents_transitionRouteGroups_createSignalE(OAIGoogleCloudDialogflowCxV3TransitionRouteGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_transitionRouteGroups_createSignalError(OAIGoogleCloudDialogflowCxV3TransitionRouteGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_transitionRouteGroups_listSignalError() instead")
    void dialogflow_projects_locations_agents_transitionRouteGroups_listSignalE(OAIGoogleCloudDialogflowCxV3ListTransitionRouteGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_transitionRouteGroups_listSignalError(OAIGoogleCloudDialogflowCxV3ListTransitionRouteGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_webhooks_createSignalError() instead")
    void dialogflow_projects_locations_agents_webhooks_createSignalE(OAIGoogleCloudDialogflowCxV3Webhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_webhooks_createSignalError(OAIGoogleCloudDialogflowCxV3Webhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_webhooks_listSignalError() instead")
    void dialogflow_projects_locations_agents_webhooks_listSignalE(OAIGoogleCloudDialogflowCxV3ListWebhooksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_webhooks_listSignalError(OAIGoogleCloudDialogflowCxV3ListWebhooksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_listSignalError() instead")
    void dialogflow_projects_locations_listSignalE(OAIGoogleCloudLocationListLocationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_listSignalError(OAIGoogleCloudLocationListLocationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_securitySettings_createSignalError() instead")
    void dialogflow_projects_locations_securitySettings_createSignalE(OAIGoogleCloudDialogflowCxV3SecuritySettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_securitySettings_createSignalError(OAIGoogleCloudDialogflowCxV3SecuritySettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_securitySettings_deleteSignalError() instead")
    void dialogflow_projects_locations_securitySettings_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_securitySettings_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_securitySettings_listSignalError() instead")
    void dialogflow_projects_locations_securitySettings_listSignalE(OAIGoogleCloudDialogflowCxV3ListSecuritySettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_securitySettings_listSignalError(OAIGoogleCloudDialogflowCxV3ListSecuritySettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_securitySettings_patchSignalError() instead")
    void dialogflow_projects_locations_securitySettings_patchSignalE(OAIGoogleCloudDialogflowCxV3SecuritySettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_securitySettings_patchSignalError(OAIGoogleCloudDialogflowCxV3SecuritySettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_operations_cancelSignalError() instead")
    void dialogflow_projects_operations_cancelSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_operations_cancelSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_operations_getSignalError() instead")
    void dialogflow_projects_operations_getSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_operations_getSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_operations_listSignalError() instead")
    void dialogflow_projects_operations_listSignalE(OAIGoogleLongrunningListOperationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_operations_listSignalError(OAIGoogleLongrunningListOperationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_changelogs_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_changelogs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_changelogs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_entityTypes_exportSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_entityTypes_exportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_entityTypes_exportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_entityTypes_importSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_entityTypes_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_entityTypes_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_continuousTestResults_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_environments_continuousTestResults_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_continuousTestResults_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_environments_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_deployFlowSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_environments_deployFlowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_deployFlowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_deployments_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_environments_deployments_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_deployments_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_experiments_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_environments_experiments_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_experiments_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_experiments_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_environments_experiments_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_experiments_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_experiments_startSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_environments_experiments_startSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_experiments_startSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_experiments_stopSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_environments_experiments_stopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_experiments_stopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_environments_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_lookupEnvironmentHistorySignalErrorFull() instead")
    void dialogflow_projects_locations_agents_environments_lookupEnvironmentHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_lookupEnvironmentHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_environments_runContinuousTestSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_environments_runContinuousTestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_environments_runContinuousTestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_flows_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_exportSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_flows_exportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_exportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_importSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_flows_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_flows_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_pages_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_flows_pages_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_pages_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_pages_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_flows_pages_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_pages_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_trainSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_flows_trainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_trainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_validateSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_flows_validateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_validateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_versions_compareVersionsSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_flows_versions_compareVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_versions_compareVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_versions_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_flows_versions_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_versions_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_versions_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_flows_versions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_versions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_flows_versions_loadSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_flows_versions_loadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_flows_versions_loadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_generators_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_generators_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_generators_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_generators_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_generators_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_generators_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_intents_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_intents_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_intents_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_intents_exportSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_intents_exportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_intents_exportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_intents_importSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_intents_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_intents_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_intents_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_intents_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_intents_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_restoreSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_restoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_restoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_sessions_detectIntentSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_sessions_detectIntentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_sessions_detectIntentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_sessions_entityTypes_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_sessions_entityTypes_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_sessions_entityTypes_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_sessions_entityTypes_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_sessions_entityTypes_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_sessions_entityTypes_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_sessions_fulfillIntentSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_sessions_fulfillIntentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_sessions_fulfillIntentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_sessions_matchIntentSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_sessions_matchIntentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_sessions_matchIntentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_sessions_serverStreamingDetectIntentSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_sessions_serverStreamingDetectIntentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_sessions_serverStreamingDetectIntentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_sessions_submitAnswerFeedbackSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_sessions_submitAnswerFeedbackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_sessions_submitAnswerFeedbackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_testCases_batchDeleteSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_testCases_batchDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_testCases_batchDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_testCases_batchRunSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_testCases_batchRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_testCases_batchRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_testCases_calculateCoverageSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_testCases_calculateCoverageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_testCases_calculateCoverageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_testCases_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_testCases_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_testCases_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_testCases_exportSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_testCases_exportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_testCases_exportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_testCases_importSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_testCases_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_testCases_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_testCases_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_testCases_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_testCases_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_testCases_results_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_testCases_results_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_testCases_results_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_testCases_runSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_testCases_runSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_testCases_runSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_transitionRouteGroups_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_transitionRouteGroups_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_transitionRouteGroups_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_transitionRouteGroups_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_transitionRouteGroups_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_transitionRouteGroups_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_webhooks_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_webhooks_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_webhooks_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agents_webhooks_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agents_webhooks_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agents_webhooks_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_listSignalErrorFull() instead")
    void dialogflow_projects_locations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_securitySettings_createSignalErrorFull() instead")
    void dialogflow_projects_locations_securitySettings_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_securitySettings_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_securitySettings_deleteSignalErrorFull() instead")
    void dialogflow_projects_locations_securitySettings_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_securitySettings_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_securitySettings_listSignalErrorFull() instead")
    void dialogflow_projects_locations_securitySettings_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_securitySettings_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_securitySettings_patchSignalErrorFull() instead")
    void dialogflow_projects_locations_securitySettings_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_securitySettings_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_operations_cancelSignalErrorFull() instead")
    void dialogflow_projects_operations_cancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_operations_cancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_operations_getSignalErrorFull() instead")
    void dialogflow_projects_operations_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_operations_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_operations_listSignalErrorFull() instead")
    void dialogflow_projects_operations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_operations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
