/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3ExperimentResultMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::OAIGoogleCloudDialogflowCxV3ExperimentResultMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::OAIGoogleCloudDialogflowCxV3ExperimentResultMetric() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::~OAIGoogleCloudDialogflowCxV3ExperimentResultMetric() {}

void OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::initializeModel() {

    m_confidence_interval_isSet = false;
    m_confidence_interval_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_count_type_isSet = false;
    m_count_type_isValid = false;

    m_ratio_isSet = false;
    m_ratio_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::fromJsonObject(QJsonObject json) {

    m_confidence_interval_isValid = ::OpenAPI::fromJsonValue(m_confidence_interval, json[QString("confidenceInterval")]);
    m_confidence_interval_isSet = !json[QString("confidenceInterval")].isNull() && m_confidence_interval_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_count_type_isValid = ::OpenAPI::fromJsonValue(m_count_type, json[QString("countType")]);
    m_count_type_isSet = !json[QString("countType")].isNull() && m_count_type_isValid;

    m_ratio_isValid = ::OpenAPI::fromJsonValue(m_ratio, json[QString("ratio")]);
    m_ratio_isSet = !json[QString("ratio")].isNull() && m_ratio_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_interval.isSet()) {
        obj.insert(QString("confidenceInterval"), ::OpenAPI::toJsonValue(m_confidence_interval));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_count_type_isSet) {
        obj.insert(QString("countType"), ::OpenAPI::toJsonValue(m_count_type));
    }
    if (m_ratio_isSet) {
        obj.insert(QString("ratio"), ::OpenAPI::toJsonValue(m_ratio));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIGoogleCloudDialogflowCxV3ExperimentResultConfidenceInterval OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::getConfidenceInterval() const {
    return m_confidence_interval;
}
void OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::setConfidenceInterval(const OAIGoogleCloudDialogflowCxV3ExperimentResultConfidenceInterval &confidence_interval) {
    m_confidence_interval = confidence_interval;
    m_confidence_interval_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::is_confidence_interval_Set() const{
    return m_confidence_interval_isSet;
}

bool OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::is_confidence_interval_Valid() const{
    return m_confidence_interval_isValid;
}

double OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::getCount() const {
    return m_count;
}
void OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::setCount(const double &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::is_count_Set() const{
    return m_count_isSet;
}

bool OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::getCountType() const {
    return m_count_type;
}
void OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::setCountType(const QString &count_type) {
    m_count_type = count_type;
    m_count_type_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::is_count_type_Set() const{
    return m_count_type_isSet;
}

bool OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::is_count_type_Valid() const{
    return m_count_type_isValid;
}

double OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::getRatio() const {
    return m_ratio;
}
void OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::setRatio(const double &ratio) {
    m_ratio = ratio;
    m_ratio_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::is_ratio_Set() const{
    return m_ratio_isSet;
}

bool OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::is_ratio_Valid() const{
    return m_ratio_isValid;
}

QString OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::getType() const {
    return m_type;
}
void OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3ExperimentResultMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
