/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3CompareVersionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3CompareVersionsRequest::OAIGoogleCloudDialogflowCxV3CompareVersionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3CompareVersionsRequest::OAIGoogleCloudDialogflowCxV3CompareVersionsRequest() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3CompareVersionsRequest::~OAIGoogleCloudDialogflowCxV3CompareVersionsRequest() {}

void OAIGoogleCloudDialogflowCxV3CompareVersionsRequest::initializeModel() {

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_target_version_isSet = false;
    m_target_version_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3CompareVersionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3CompareVersionsRequest::fromJsonObject(QJsonObject json) {

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_target_version_isValid = ::OpenAPI::fromJsonValue(m_target_version, json[QString("targetVersion")]);
    m_target_version_isSet = !json[QString("targetVersion")].isNull() && m_target_version_isValid;
}

QString OAIGoogleCloudDialogflowCxV3CompareVersionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3CompareVersionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_target_version_isSet) {
        obj.insert(QString("targetVersion"), ::OpenAPI::toJsonValue(m_target_version));
    }
    return obj;
}

QString OAIGoogleCloudDialogflowCxV3CompareVersionsRequest::getLanguageCode() const {
    return m_language_code;
}
void OAIGoogleCloudDialogflowCxV3CompareVersionsRequest::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3CompareVersionsRequest::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIGoogleCloudDialogflowCxV3CompareVersionsRequest::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIGoogleCloudDialogflowCxV3CompareVersionsRequest::getTargetVersion() const {
    return m_target_version;
}
void OAIGoogleCloudDialogflowCxV3CompareVersionsRequest::setTargetVersion(const QString &target_version) {
    m_target_version = target_version;
    m_target_version_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3CompareVersionsRequest::is_target_version_Set() const{
    return m_target_version_isSet;
}

bool OAIGoogleCloudDialogflowCxV3CompareVersionsRequest::is_target_version_Valid() const{
    return m_target_version_isValid;
}

bool OAIGoogleCloudDialogflowCxV3CompareVersionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3CompareVersionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
