/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3FilterSpecs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3FilterSpecs::OAIGoogleCloudDialogflowCxV3FilterSpecs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3FilterSpecs::OAIGoogleCloudDialogflowCxV3FilterSpecs() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3FilterSpecs::~OAIGoogleCloudDialogflowCxV3FilterSpecs() {}

void OAIGoogleCloudDialogflowCxV3FilterSpecs::initializeModel() {

    m_data_stores_isSet = false;
    m_data_stores_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3FilterSpecs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3FilterSpecs::fromJsonObject(QJsonObject json) {

    m_data_stores_isValid = ::OpenAPI::fromJsonValue(m_data_stores, json[QString("dataStores")]);
    m_data_stores_isSet = !json[QString("dataStores")].isNull() && m_data_stores_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;
}

QString OAIGoogleCloudDialogflowCxV3FilterSpecs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3FilterSpecs::asJsonObject() const {
    QJsonObject obj;
    if (m_data_stores.size() > 0) {
        obj.insert(QString("dataStores"), ::OpenAPI::toJsonValue(m_data_stores));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    return obj;
}

QList<QString> OAIGoogleCloudDialogflowCxV3FilterSpecs::getDataStores() const {
    return m_data_stores;
}
void OAIGoogleCloudDialogflowCxV3FilterSpecs::setDataStores(const QList<QString> &data_stores) {
    m_data_stores = data_stores;
    m_data_stores_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3FilterSpecs::is_data_stores_Set() const{
    return m_data_stores_isSet;
}

bool OAIGoogleCloudDialogflowCxV3FilterSpecs::is_data_stores_Valid() const{
    return m_data_stores_isValid;
}

QString OAIGoogleCloudDialogflowCxV3FilterSpecs::getFilter() const {
    return m_filter;
}
void OAIGoogleCloudDialogflowCxV3FilterSpecs::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3FilterSpecs::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGoogleCloudDialogflowCxV3FilterSpecs::is_filter_Valid() const{
    return m_filter_isValid;
}

bool OAIGoogleCloudDialogflowCxV3FilterSpecs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_stores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3FilterSpecs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
