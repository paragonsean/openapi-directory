/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3WebhookGenericWebService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::OAIGoogleCloudDialogflowCxV3WebhookGenericWebService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::OAIGoogleCloudDialogflowCxV3WebhookGenericWebService() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::~OAIGoogleCloudDialogflowCxV3WebhookGenericWebService() {}

void OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::initializeModel() {

    m_allowed_ca_certs_isSet = false;
    m_allowed_ca_certs_isValid = false;

    m_http_method_isSet = false;
    m_http_method_isValid = false;

    m_parameter_mapping_isSet = false;
    m_parameter_mapping_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_request_body_isSet = false;
    m_request_body_isValid = false;

    m_request_headers_isSet = false;
    m_request_headers_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_webhook_type_isSet = false;
    m_webhook_type_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::fromJsonObject(QJsonObject json) {

    m_allowed_ca_certs_isValid = ::OpenAPI::fromJsonValue(m_allowed_ca_certs, json[QString("allowedCaCerts")]);
    m_allowed_ca_certs_isSet = !json[QString("allowedCaCerts")].isNull() && m_allowed_ca_certs_isValid;

    m_http_method_isValid = ::OpenAPI::fromJsonValue(m_http_method, json[QString("httpMethod")]);
    m_http_method_isSet = !json[QString("httpMethod")].isNull() && m_http_method_isValid;

    m_parameter_mapping_isValid = ::OpenAPI::fromJsonValue(m_parameter_mapping, json[QString("parameterMapping")]);
    m_parameter_mapping_isSet = !json[QString("parameterMapping")].isNull() && m_parameter_mapping_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_request_body_isValid = ::OpenAPI::fromJsonValue(m_request_body, json[QString("requestBody")]);
    m_request_body_isSet = !json[QString("requestBody")].isNull() && m_request_body_isValid;

    m_request_headers_isValid = ::OpenAPI::fromJsonValue(m_request_headers, json[QString("requestHeaders")]);
    m_request_headers_isSet = !json[QString("requestHeaders")].isNull() && m_request_headers_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_webhook_type_isValid = ::OpenAPI::fromJsonValue(m_webhook_type, json[QString("webhookType")]);
    m_webhook_type_isSet = !json[QString("webhookType")].isNull() && m_webhook_type_isValid;
}

QString OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_ca_certs.size() > 0) {
        obj.insert(QString("allowedCaCerts"), ::OpenAPI::toJsonValue(m_allowed_ca_certs));
    }
    if (m_http_method_isSet) {
        obj.insert(QString("httpMethod"), ::OpenAPI::toJsonValue(m_http_method));
    }
    if (m_parameter_mapping.size() > 0) {
        obj.insert(QString("parameterMapping"), ::OpenAPI::toJsonValue(m_parameter_mapping));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_request_body_isSet) {
        obj.insert(QString("requestBody"), ::OpenAPI::toJsonValue(m_request_body));
    }
    if (m_request_headers.size() > 0) {
        obj.insert(QString("requestHeaders"), ::OpenAPI::toJsonValue(m_request_headers));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_webhook_type_isSet) {
        obj.insert(QString("webhookType"), ::OpenAPI::toJsonValue(m_webhook_type));
    }
    return obj;
}

QList<QByteArray> OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::getAllowedCaCerts() const {
    return m_allowed_ca_certs;
}
void OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::setAllowedCaCerts(const QList<QByteArray> &allowed_ca_certs) {
    m_allowed_ca_certs = allowed_ca_certs;
    m_allowed_ca_certs_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::is_allowed_ca_certs_Set() const{
    return m_allowed_ca_certs_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::is_allowed_ca_certs_Valid() const{
    return m_allowed_ca_certs_isValid;
}

QString OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::getHttpMethod() const {
    return m_http_method;
}
void OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::setHttpMethod(const QString &http_method) {
    m_http_method = http_method;
    m_http_method_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::is_http_method_Set() const{
    return m_http_method_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::is_http_method_Valid() const{
    return m_http_method_isValid;
}

QMap<QString, QString> OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::getParameterMapping() const {
    return m_parameter_mapping;
}
void OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::setParameterMapping(const QMap<QString, QString> &parameter_mapping) {
    m_parameter_mapping = parameter_mapping;
    m_parameter_mapping_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::is_parameter_mapping_Set() const{
    return m_parameter_mapping_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::is_parameter_mapping_Valid() const{
    return m_parameter_mapping_isValid;
}

QString OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::getPassword() const {
    return m_password;
}
void OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::is_password_Set() const{
    return m_password_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::getRequestBody() const {
    return m_request_body;
}
void OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::setRequestBody(const QString &request_body) {
    m_request_body = request_body;
    m_request_body_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::is_request_body_Set() const{
    return m_request_body_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::is_request_body_Valid() const{
    return m_request_body_isValid;
}

QMap<QString, QString> OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::getRequestHeaders() const {
    return m_request_headers;
}
void OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::setRequestHeaders(const QMap<QString, QString> &request_headers) {
    m_request_headers = request_headers;
    m_request_headers_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::is_request_headers_Set() const{
    return m_request_headers_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::is_request_headers_Valid() const{
    return m_request_headers_isValid;
}

QString OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::getUri() const {
    return m_uri;
}
void OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::getUsername() const {
    return m_username;
}
void OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::is_username_Set() const{
    return m_username_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::getWebhookType() const {
    return m_webhook_type;
}
void OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::setWebhookType(const QString &webhook_type) {
    m_webhook_type = webhook_type;
    m_webhook_type_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::is_webhook_type_Set() const{
    return m_webhook_type_isSet;
}

bool OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::is_webhook_type_Valid() const{
    return m_webhook_type_isValid;
}

bool OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_ca_certs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_mapping.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3WebhookGenericWebService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
