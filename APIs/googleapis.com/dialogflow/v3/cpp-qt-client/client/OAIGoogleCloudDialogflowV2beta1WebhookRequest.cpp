/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowV2beta1WebhookRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowV2beta1WebhookRequest::OAIGoogleCloudDialogflowV2beta1WebhookRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowV2beta1WebhookRequest::OAIGoogleCloudDialogflowV2beta1WebhookRequest() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowV2beta1WebhookRequest::~OAIGoogleCloudDialogflowV2beta1WebhookRequest() {}

void OAIGoogleCloudDialogflowV2beta1WebhookRequest::initializeModel() {

    m_alternative_query_results_isSet = false;
    m_alternative_query_results_isValid = false;

    m_original_detect_intent_request_isSet = false;
    m_original_detect_intent_request_isValid = false;

    m_query_result_isSet = false;
    m_query_result_isValid = false;

    m_response_id_isSet = false;
    m_response_id_isValid = false;

    m_session_isSet = false;
    m_session_isValid = false;
}

void OAIGoogleCloudDialogflowV2beta1WebhookRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowV2beta1WebhookRequest::fromJsonObject(QJsonObject json) {

    m_alternative_query_results_isValid = ::OpenAPI::fromJsonValue(m_alternative_query_results, json[QString("alternativeQueryResults")]);
    m_alternative_query_results_isSet = !json[QString("alternativeQueryResults")].isNull() && m_alternative_query_results_isValid;

    m_original_detect_intent_request_isValid = ::OpenAPI::fromJsonValue(m_original_detect_intent_request, json[QString("originalDetectIntentRequest")]);
    m_original_detect_intent_request_isSet = !json[QString("originalDetectIntentRequest")].isNull() && m_original_detect_intent_request_isValid;

    m_query_result_isValid = ::OpenAPI::fromJsonValue(m_query_result, json[QString("queryResult")]);
    m_query_result_isSet = !json[QString("queryResult")].isNull() && m_query_result_isValid;

    m_response_id_isValid = ::OpenAPI::fromJsonValue(m_response_id, json[QString("responseId")]);
    m_response_id_isSet = !json[QString("responseId")].isNull() && m_response_id_isValid;

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("session")]);
    m_session_isSet = !json[QString("session")].isNull() && m_session_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1WebhookRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowV2beta1WebhookRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_alternative_query_results.size() > 0) {
        obj.insert(QString("alternativeQueryResults"), ::OpenAPI::toJsonValue(m_alternative_query_results));
    }
    if (m_original_detect_intent_request.isSet()) {
        obj.insert(QString("originalDetectIntentRequest"), ::OpenAPI::toJsonValue(m_original_detect_intent_request));
    }
    if (m_query_result.isSet()) {
        obj.insert(QString("queryResult"), ::OpenAPI::toJsonValue(m_query_result));
    }
    if (m_response_id_isSet) {
        obj.insert(QString("responseId"), ::OpenAPI::toJsonValue(m_response_id));
    }
    if (m_session_isSet) {
        obj.insert(QString("session"), ::OpenAPI::toJsonValue(m_session));
    }
    return obj;
}

QList<OAIGoogleCloudDialogflowV2beta1QueryResult> OAIGoogleCloudDialogflowV2beta1WebhookRequest::getAlternativeQueryResults() const {
    return m_alternative_query_results;
}
void OAIGoogleCloudDialogflowV2beta1WebhookRequest::setAlternativeQueryResults(const QList<OAIGoogleCloudDialogflowV2beta1QueryResult> &alternative_query_results) {
    m_alternative_query_results = alternative_query_results;
    m_alternative_query_results_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1WebhookRequest::is_alternative_query_results_Set() const{
    return m_alternative_query_results_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1WebhookRequest::is_alternative_query_results_Valid() const{
    return m_alternative_query_results_isValid;
}

OAIGoogleCloudDialogflowV2beta1OriginalDetectIntentRequest OAIGoogleCloudDialogflowV2beta1WebhookRequest::getOriginalDetectIntentRequest() const {
    return m_original_detect_intent_request;
}
void OAIGoogleCloudDialogflowV2beta1WebhookRequest::setOriginalDetectIntentRequest(const OAIGoogleCloudDialogflowV2beta1OriginalDetectIntentRequest &original_detect_intent_request) {
    m_original_detect_intent_request = original_detect_intent_request;
    m_original_detect_intent_request_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1WebhookRequest::is_original_detect_intent_request_Set() const{
    return m_original_detect_intent_request_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1WebhookRequest::is_original_detect_intent_request_Valid() const{
    return m_original_detect_intent_request_isValid;
}

OAIGoogleCloudDialogflowV2beta1QueryResult OAIGoogleCloudDialogflowV2beta1WebhookRequest::getQueryResult() const {
    return m_query_result;
}
void OAIGoogleCloudDialogflowV2beta1WebhookRequest::setQueryResult(const OAIGoogleCloudDialogflowV2beta1QueryResult &query_result) {
    m_query_result = query_result;
    m_query_result_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1WebhookRequest::is_query_result_Set() const{
    return m_query_result_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1WebhookRequest::is_query_result_Valid() const{
    return m_query_result_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1WebhookRequest::getResponseId() const {
    return m_response_id;
}
void OAIGoogleCloudDialogflowV2beta1WebhookRequest::setResponseId(const QString &response_id) {
    m_response_id = response_id;
    m_response_id_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1WebhookRequest::is_response_id_Set() const{
    return m_response_id_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1WebhookRequest::is_response_id_Valid() const{
    return m_response_id_isValid;
}

QString OAIGoogleCloudDialogflowV2beta1WebhookRequest::getSession() const {
    return m_session;
}
void OAIGoogleCloudDialogflowV2beta1WebhookRequest::setSession(const QString &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAIGoogleCloudDialogflowV2beta1WebhookRequest::is_session_Set() const{
    return m_session_isSet;
}

bool OAIGoogleCloudDialogflowV2beta1WebhookRequest::is_session_Valid() const{
    return m_session_isValid;
}

bool OAIGoogleCloudDialogflowV2beta1WebhookRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternative_query_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_detect_intent_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowV2beta1WebhookRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
