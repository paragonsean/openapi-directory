/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3MatchIntentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3MatchIntentResponse::OAIGoogleCloudDialogflowCxV3MatchIntentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3MatchIntentResponse::OAIGoogleCloudDialogflowCxV3MatchIntentResponse() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3MatchIntentResponse::~OAIGoogleCloudDialogflowCxV3MatchIntentResponse() {}

void OAIGoogleCloudDialogflowCxV3MatchIntentResponse::initializeModel() {

    m_current_page_isSet = false;
    m_current_page_isValid = false;

    m_matches_isSet = false;
    m_matches_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_transcript_isSet = false;
    m_transcript_isValid = false;

    m_trigger_event_isSet = false;
    m_trigger_event_isValid = false;

    m_trigger_intent_isSet = false;
    m_trigger_intent_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3MatchIntentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3MatchIntentResponse::fromJsonObject(QJsonObject json) {

    m_current_page_isValid = ::OpenAPI::fromJsonValue(m_current_page, json[QString("currentPage")]);
    m_current_page_isSet = !json[QString("currentPage")].isNull() && m_current_page_isValid;

    m_matches_isValid = ::OpenAPI::fromJsonValue(m_matches, json[QString("matches")]);
    m_matches_isSet = !json[QString("matches")].isNull() && m_matches_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_transcript_isValid = ::OpenAPI::fromJsonValue(m_transcript, json[QString("transcript")]);
    m_transcript_isSet = !json[QString("transcript")].isNull() && m_transcript_isValid;

    m_trigger_event_isValid = ::OpenAPI::fromJsonValue(m_trigger_event, json[QString("triggerEvent")]);
    m_trigger_event_isSet = !json[QString("triggerEvent")].isNull() && m_trigger_event_isValid;

    m_trigger_intent_isValid = ::OpenAPI::fromJsonValue(m_trigger_intent, json[QString("triggerIntent")]);
    m_trigger_intent_isSet = !json[QString("triggerIntent")].isNull() && m_trigger_intent_isValid;
}

QString OAIGoogleCloudDialogflowCxV3MatchIntentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3MatchIntentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_current_page.isSet()) {
        obj.insert(QString("currentPage"), ::OpenAPI::toJsonValue(m_current_page));
    }
    if (m_matches.size() > 0) {
        obj.insert(QString("matches"), ::OpenAPI::toJsonValue(m_matches));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_transcript_isSet) {
        obj.insert(QString("transcript"), ::OpenAPI::toJsonValue(m_transcript));
    }
    if (m_trigger_event_isSet) {
        obj.insert(QString("triggerEvent"), ::OpenAPI::toJsonValue(m_trigger_event));
    }
    if (m_trigger_intent_isSet) {
        obj.insert(QString("triggerIntent"), ::OpenAPI::toJsonValue(m_trigger_intent));
    }
    return obj;
}

OAIGoogleCloudDialogflowCxV3Page OAIGoogleCloudDialogflowCxV3MatchIntentResponse::getCurrentPage() const {
    return m_current_page;
}
void OAIGoogleCloudDialogflowCxV3MatchIntentResponse::setCurrentPage(const OAIGoogleCloudDialogflowCxV3Page &current_page) {
    m_current_page = current_page;
    m_current_page_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3MatchIntentResponse::is_current_page_Set() const{
    return m_current_page_isSet;
}

bool OAIGoogleCloudDialogflowCxV3MatchIntentResponse::is_current_page_Valid() const{
    return m_current_page_isValid;
}

QList<OAIGoogleCloudDialogflowCxV3Match> OAIGoogleCloudDialogflowCxV3MatchIntentResponse::getMatches() const {
    return m_matches;
}
void OAIGoogleCloudDialogflowCxV3MatchIntentResponse::setMatches(const QList<OAIGoogleCloudDialogflowCxV3Match> &matches) {
    m_matches = matches;
    m_matches_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3MatchIntentResponse::is_matches_Set() const{
    return m_matches_isSet;
}

bool OAIGoogleCloudDialogflowCxV3MatchIntentResponse::is_matches_Valid() const{
    return m_matches_isValid;
}

QString OAIGoogleCloudDialogflowCxV3MatchIntentResponse::getText() const {
    return m_text;
}
void OAIGoogleCloudDialogflowCxV3MatchIntentResponse::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3MatchIntentResponse::is_text_Set() const{
    return m_text_isSet;
}

bool OAIGoogleCloudDialogflowCxV3MatchIntentResponse::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIGoogleCloudDialogflowCxV3MatchIntentResponse::getTranscript() const {
    return m_transcript;
}
void OAIGoogleCloudDialogflowCxV3MatchIntentResponse::setTranscript(const QString &transcript) {
    m_transcript = transcript;
    m_transcript_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3MatchIntentResponse::is_transcript_Set() const{
    return m_transcript_isSet;
}

bool OAIGoogleCloudDialogflowCxV3MatchIntentResponse::is_transcript_Valid() const{
    return m_transcript_isValid;
}

QString OAIGoogleCloudDialogflowCxV3MatchIntentResponse::getTriggerEvent() const {
    return m_trigger_event;
}
void OAIGoogleCloudDialogflowCxV3MatchIntentResponse::setTriggerEvent(const QString &trigger_event) {
    m_trigger_event = trigger_event;
    m_trigger_event_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3MatchIntentResponse::is_trigger_event_Set() const{
    return m_trigger_event_isSet;
}

bool OAIGoogleCloudDialogflowCxV3MatchIntentResponse::is_trigger_event_Valid() const{
    return m_trigger_event_isValid;
}

QString OAIGoogleCloudDialogflowCxV3MatchIntentResponse::getTriggerIntent() const {
    return m_trigger_intent;
}
void OAIGoogleCloudDialogflowCxV3MatchIntentResponse::setTriggerIntent(const QString &trigger_intent) {
    m_trigger_intent = trigger_intent;
    m_trigger_intent_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3MatchIntentResponse::is_trigger_intent_Set() const{
    return m_trigger_intent_isSet;
}

bool OAIGoogleCloudDialogflowCxV3MatchIntentResponse::is_trigger_intent_Valid() const{
    return m_trigger_intent_isValid;
}

bool OAIGoogleCloudDialogflowCxV3MatchIntentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_page.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcript_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_intent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3MatchIntentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
