/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::~OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings() {}

void OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_branches_isSet = false;
    m_branches_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_repository_uri_isSet = false;
    m_repository_uri_isValid = false;

    m_tracking_branch_isSet = false;
    m_tracking_branch_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("accessToken")]);
    m_access_token_isSet = !json[QString("accessToken")].isNull() && m_access_token_isValid;

    m_branches_isValid = ::OpenAPI::fromJsonValue(m_branches, json[QString("branches")]);
    m_branches_isSet = !json[QString("branches")].isNull() && m_branches_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_repository_uri_isValid = ::OpenAPI::fromJsonValue(m_repository_uri, json[QString("repositoryUri")]);
    m_repository_uri_isSet = !json[QString("repositoryUri")].isNull() && m_repository_uri_isValid;

    m_tracking_branch_isValid = ::OpenAPI::fromJsonValue(m_tracking_branch, json[QString("trackingBranch")]);
    m_tracking_branch_isSet = !json[QString("trackingBranch")].isNull() && m_tracking_branch_isValid;
}

QString OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("accessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_branches.size() > 0) {
        obj.insert(QString("branches"), ::OpenAPI::toJsonValue(m_branches));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_repository_uri_isSet) {
        obj.insert(QString("repositoryUri"), ::OpenAPI::toJsonValue(m_repository_uri));
    }
    if (m_tracking_branch_isSet) {
        obj.insert(QString("trackingBranch"), ::OpenAPI::toJsonValue(m_tracking_branch));
    }
    return obj;
}

QString OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::getAccessToken() const {
    return m_access_token;
}
void OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::is_access_token_Valid() const{
    return m_access_token_isValid;
}

QList<QString> OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::getBranches() const {
    return m_branches;
}
void OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::setBranches(const QList<QString> &branches) {
    m_branches = branches;
    m_branches_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::is_branches_Set() const{
    return m_branches_isSet;
}

bool OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::is_branches_Valid() const{
    return m_branches_isValid;
}

QString OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::getRepositoryUri() const {
    return m_repository_uri;
}
void OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::setRepositoryUri(const QString &repository_uri) {
    m_repository_uri = repository_uri;
    m_repository_uri_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::is_repository_uri_Set() const{
    return m_repository_uri_isSet;
}

bool OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::is_repository_uri_Valid() const{
    return m_repository_uri_isValid;
}

QString OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::getTrackingBranch() const {
    return m_tracking_branch;
}
void OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::setTrackingBranch(const QString &tracking_branch) {
    m_tracking_branch = tracking_branch;
    m_tracking_branch_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::is_tracking_branch_Set() const{
    return m_tracking_branch_isSet;
}

bool OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::is_tracking_branch_Valid() const{
    return m_tracking_branch_isValid;
}

bool OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_branch_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3AgentGitIntegrationSettingsGithubSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
