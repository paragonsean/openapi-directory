/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::~OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput() {}

void OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::initializeModel() {

    m_enable_sentiment_analysis_isSet = false;
    m_enable_sentiment_analysis_isValid = false;

    m_injected_parameters_isSet = false;
    m_injected_parameters_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_is_webhook_enabled_isSet = false;
    m_is_webhook_enabled_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::fromJsonObject(QJsonObject json) {

    m_enable_sentiment_analysis_isValid = ::OpenAPI::fromJsonValue(m_enable_sentiment_analysis, json[QString("enableSentimentAnalysis")]);
    m_enable_sentiment_analysis_isSet = !json[QString("enableSentimentAnalysis")].isNull() && m_enable_sentiment_analysis_isValid;

    m_injected_parameters_isValid = ::OpenAPI::fromJsonValue(m_injected_parameters, json[QString("injectedParameters")]);
    m_injected_parameters_isSet = !json[QString("injectedParameters")].isNull() && m_injected_parameters_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_is_webhook_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_webhook_enabled, json[QString("isWebhookEnabled")]);
    m_is_webhook_enabled_isSet = !json[QString("isWebhookEnabled")].isNull() && m_is_webhook_enabled_isValid;
}

QString OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_sentiment_analysis_isSet) {
        obj.insert(QString("enableSentimentAnalysis"), ::OpenAPI::toJsonValue(m_enable_sentiment_analysis));
    }
    if (m_injected_parameters.size() > 0) {
        obj.insert(QString("injectedParameters"), ::OpenAPI::toJsonValue(m_injected_parameters));
    }
    if (m_input.isSet()) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_is_webhook_enabled_isSet) {
        obj.insert(QString("isWebhookEnabled"), ::OpenAPI::toJsonValue(m_is_webhook_enabled));
    }
    return obj;
}

bool OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::isEnableSentimentAnalysis() const {
    return m_enable_sentiment_analysis;
}
void OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::setEnableSentimentAnalysis(const bool &enable_sentiment_analysis) {
    m_enable_sentiment_analysis = enable_sentiment_analysis;
    m_enable_sentiment_analysis_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::is_enable_sentiment_analysis_Set() const{
    return m_enable_sentiment_analysis_isSet;
}

bool OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::is_enable_sentiment_analysis_Valid() const{
    return m_enable_sentiment_analysis_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::getInjectedParameters() const {
    return m_injected_parameters;
}
void OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::setInjectedParameters(const QMap<QString, QJsonValue> &injected_parameters) {
    m_injected_parameters = injected_parameters;
    m_injected_parameters_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::is_injected_parameters_Set() const{
    return m_injected_parameters_isSet;
}

bool OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::is_injected_parameters_Valid() const{
    return m_injected_parameters_isValid;
}

OAIGoogleCloudDialogflowCxV3QueryInput OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::getInput() const {
    return m_input;
}
void OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::setInput(const OAIGoogleCloudDialogflowCxV3QueryInput &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::is_input_Set() const{
    return m_input_isSet;
}

bool OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::is_input_Valid() const{
    return m_input_isValid;
}

bool OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::isIsWebhookEnabled() const {
    return m_is_webhook_enabled;
}
void OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::setIsWebhookEnabled(const bool &is_webhook_enabled) {
    m_is_webhook_enabled = is_webhook_enabled;
    m_is_webhook_enabled_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::is_is_webhook_enabled_Set() const{
    return m_is_webhook_enabled_isSet;
}

bool OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::is_is_webhook_enabled_Valid() const{
    return m_is_webhook_enabled_isValid;
}

bool OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_sentiment_analysis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_injected_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_webhook_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3ConversationTurnUserInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
