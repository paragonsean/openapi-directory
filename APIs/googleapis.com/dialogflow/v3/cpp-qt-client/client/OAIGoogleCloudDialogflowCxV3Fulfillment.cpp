/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3Fulfillment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3Fulfillment::OAIGoogleCloudDialogflowCxV3Fulfillment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3Fulfillment::OAIGoogleCloudDialogflowCxV3Fulfillment() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3Fulfillment::~OAIGoogleCloudDialogflowCxV3Fulfillment() {}

void OAIGoogleCloudDialogflowCxV3Fulfillment::initializeModel() {

    m_advanced_settings_isSet = false;
    m_advanced_settings_isValid = false;

    m_conditional_cases_isSet = false;
    m_conditional_cases_isValid = false;

    m_enable_generative_fallback_isSet = false;
    m_enable_generative_fallback_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_return_partial_responses_isSet = false;
    m_return_partial_responses_isValid = false;

    m_set_parameter_actions_isSet = false;
    m_set_parameter_actions_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_webhook_isSet = false;
    m_webhook_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3Fulfillment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3Fulfillment::fromJsonObject(QJsonObject json) {

    m_advanced_settings_isValid = ::OpenAPI::fromJsonValue(m_advanced_settings, json[QString("advancedSettings")]);
    m_advanced_settings_isSet = !json[QString("advancedSettings")].isNull() && m_advanced_settings_isValid;

    m_conditional_cases_isValid = ::OpenAPI::fromJsonValue(m_conditional_cases, json[QString("conditionalCases")]);
    m_conditional_cases_isSet = !json[QString("conditionalCases")].isNull() && m_conditional_cases_isValid;

    m_enable_generative_fallback_isValid = ::OpenAPI::fromJsonValue(m_enable_generative_fallback, json[QString("enableGenerativeFallback")]);
    m_enable_generative_fallback_isSet = !json[QString("enableGenerativeFallback")].isNull() && m_enable_generative_fallback_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_return_partial_responses_isValid = ::OpenAPI::fromJsonValue(m_return_partial_responses, json[QString("returnPartialResponses")]);
    m_return_partial_responses_isSet = !json[QString("returnPartialResponses")].isNull() && m_return_partial_responses_isValid;

    m_set_parameter_actions_isValid = ::OpenAPI::fromJsonValue(m_set_parameter_actions, json[QString("setParameterActions")]);
    m_set_parameter_actions_isSet = !json[QString("setParameterActions")].isNull() && m_set_parameter_actions_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_webhook_isValid = ::OpenAPI::fromJsonValue(m_webhook, json[QString("webhook")]);
    m_webhook_isSet = !json[QString("webhook")].isNull() && m_webhook_isValid;
}

QString OAIGoogleCloudDialogflowCxV3Fulfillment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3Fulfillment::asJsonObject() const {
    QJsonObject obj;
    if (m_advanced_settings.isSet()) {
        obj.insert(QString("advancedSettings"), ::OpenAPI::toJsonValue(m_advanced_settings));
    }
    if (m_conditional_cases.size() > 0) {
        obj.insert(QString("conditionalCases"), ::OpenAPI::toJsonValue(m_conditional_cases));
    }
    if (m_enable_generative_fallback_isSet) {
        obj.insert(QString("enableGenerativeFallback"), ::OpenAPI::toJsonValue(m_enable_generative_fallback));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_return_partial_responses_isSet) {
        obj.insert(QString("returnPartialResponses"), ::OpenAPI::toJsonValue(m_return_partial_responses));
    }
    if (m_set_parameter_actions.size() > 0) {
        obj.insert(QString("setParameterActions"), ::OpenAPI::toJsonValue(m_set_parameter_actions));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_webhook_isSet) {
        obj.insert(QString("webhook"), ::OpenAPI::toJsonValue(m_webhook));
    }
    return obj;
}

OAIGoogleCloudDialogflowCxV3AdvancedSettings OAIGoogleCloudDialogflowCxV3Fulfillment::getAdvancedSettings() const {
    return m_advanced_settings;
}
void OAIGoogleCloudDialogflowCxV3Fulfillment::setAdvancedSettings(const OAIGoogleCloudDialogflowCxV3AdvancedSettings &advanced_settings) {
    m_advanced_settings = advanced_settings;
    m_advanced_settings_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3Fulfillment::is_advanced_settings_Set() const{
    return m_advanced_settings_isSet;
}

bool OAIGoogleCloudDialogflowCxV3Fulfillment::is_advanced_settings_Valid() const{
    return m_advanced_settings_isValid;
}

QList<OAIGoogleCloudDialogflowCxV3FulfillmentConditionalCases> OAIGoogleCloudDialogflowCxV3Fulfillment::getConditionalCases() const {
    return m_conditional_cases;
}
void OAIGoogleCloudDialogflowCxV3Fulfillment::setConditionalCases(const QList<OAIGoogleCloudDialogflowCxV3FulfillmentConditionalCases> &conditional_cases) {
    m_conditional_cases = conditional_cases;
    m_conditional_cases_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3Fulfillment::is_conditional_cases_Set() const{
    return m_conditional_cases_isSet;
}

bool OAIGoogleCloudDialogflowCxV3Fulfillment::is_conditional_cases_Valid() const{
    return m_conditional_cases_isValid;
}

bool OAIGoogleCloudDialogflowCxV3Fulfillment::isEnableGenerativeFallback() const {
    return m_enable_generative_fallback;
}
void OAIGoogleCloudDialogflowCxV3Fulfillment::setEnableGenerativeFallback(const bool &enable_generative_fallback) {
    m_enable_generative_fallback = enable_generative_fallback;
    m_enable_generative_fallback_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3Fulfillment::is_enable_generative_fallback_Set() const{
    return m_enable_generative_fallback_isSet;
}

bool OAIGoogleCloudDialogflowCxV3Fulfillment::is_enable_generative_fallback_Valid() const{
    return m_enable_generative_fallback_isValid;
}

QList<OAIGoogleCloudDialogflowCxV3ResponseMessage> OAIGoogleCloudDialogflowCxV3Fulfillment::getMessages() const {
    return m_messages;
}
void OAIGoogleCloudDialogflowCxV3Fulfillment::setMessages(const QList<OAIGoogleCloudDialogflowCxV3ResponseMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3Fulfillment::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIGoogleCloudDialogflowCxV3Fulfillment::is_messages_Valid() const{
    return m_messages_isValid;
}

bool OAIGoogleCloudDialogflowCxV3Fulfillment::isReturnPartialResponses() const {
    return m_return_partial_responses;
}
void OAIGoogleCloudDialogflowCxV3Fulfillment::setReturnPartialResponses(const bool &return_partial_responses) {
    m_return_partial_responses = return_partial_responses;
    m_return_partial_responses_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3Fulfillment::is_return_partial_responses_Set() const{
    return m_return_partial_responses_isSet;
}

bool OAIGoogleCloudDialogflowCxV3Fulfillment::is_return_partial_responses_Valid() const{
    return m_return_partial_responses_isValid;
}

QList<OAIGoogleCloudDialogflowCxV3FulfillmentSetParameterAction> OAIGoogleCloudDialogflowCxV3Fulfillment::getSetParameterActions() const {
    return m_set_parameter_actions;
}
void OAIGoogleCloudDialogflowCxV3Fulfillment::setSetParameterActions(const QList<OAIGoogleCloudDialogflowCxV3FulfillmentSetParameterAction> &set_parameter_actions) {
    m_set_parameter_actions = set_parameter_actions;
    m_set_parameter_actions_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3Fulfillment::is_set_parameter_actions_Set() const{
    return m_set_parameter_actions_isSet;
}

bool OAIGoogleCloudDialogflowCxV3Fulfillment::is_set_parameter_actions_Valid() const{
    return m_set_parameter_actions_isValid;
}

QString OAIGoogleCloudDialogflowCxV3Fulfillment::getTag() const {
    return m_tag;
}
void OAIGoogleCloudDialogflowCxV3Fulfillment::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3Fulfillment::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIGoogleCloudDialogflowCxV3Fulfillment::is_tag_Valid() const{
    return m_tag_isValid;
}

QString OAIGoogleCloudDialogflowCxV3Fulfillment::getWebhook() const {
    return m_webhook;
}
void OAIGoogleCloudDialogflowCxV3Fulfillment::setWebhook(const QString &webhook) {
    m_webhook = webhook;
    m_webhook_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3Fulfillment::is_webhook_Set() const{
    return m_webhook_isSet;
}

bool OAIGoogleCloudDialogflowCxV3Fulfillment::is_webhook_Valid() const{
    return m_webhook_isValid;
}

bool OAIGoogleCloudDialogflowCxV3Fulfillment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advanced_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditional_cases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_generative_fallback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_partial_responses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_parameter_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3Fulfillment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
