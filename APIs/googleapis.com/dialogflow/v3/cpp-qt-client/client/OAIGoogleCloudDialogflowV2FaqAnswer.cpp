/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowV2FaqAnswer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowV2FaqAnswer::OAIGoogleCloudDialogflowV2FaqAnswer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowV2FaqAnswer::OAIGoogleCloudDialogflowV2FaqAnswer() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowV2FaqAnswer::~OAIGoogleCloudDialogflowV2FaqAnswer() {}

void OAIGoogleCloudDialogflowV2FaqAnswer::initializeModel() {

    m_answer_isSet = false;
    m_answer_isValid = false;

    m_answer_record_isSet = false;
    m_answer_record_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_question_isSet = false;
    m_question_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIGoogleCloudDialogflowV2FaqAnswer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowV2FaqAnswer::fromJsonObject(QJsonObject json) {

    m_answer_isValid = ::OpenAPI::fromJsonValue(m_answer, json[QString("answer")]);
    m_answer_isSet = !json[QString("answer")].isNull() && m_answer_isValid;

    m_answer_record_isValid = ::OpenAPI::fromJsonValue(m_answer_record, json[QString("answerRecord")]);
    m_answer_record_isSet = !json[QString("answerRecord")].isNull() && m_answer_record_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_question_isValid = ::OpenAPI::fromJsonValue(m_question, json[QString("question")]);
    m_question_isSet = !json[QString("question")].isNull() && m_question_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIGoogleCloudDialogflowV2FaqAnswer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowV2FaqAnswer::asJsonObject() const {
    QJsonObject obj;
    if (m_answer_isSet) {
        obj.insert(QString("answer"), ::OpenAPI::toJsonValue(m_answer));
    }
    if (m_answer_record_isSet) {
        obj.insert(QString("answerRecord"), ::OpenAPI::toJsonValue(m_answer_record));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_question_isSet) {
        obj.insert(QString("question"), ::OpenAPI::toJsonValue(m_question));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAIGoogleCloudDialogflowV2FaqAnswer::getAnswer() const {
    return m_answer;
}
void OAIGoogleCloudDialogflowV2FaqAnswer::setAnswer(const QString &answer) {
    m_answer = answer;
    m_answer_isSet = true;
}

bool OAIGoogleCloudDialogflowV2FaqAnswer::is_answer_Set() const{
    return m_answer_isSet;
}

bool OAIGoogleCloudDialogflowV2FaqAnswer::is_answer_Valid() const{
    return m_answer_isValid;
}

QString OAIGoogleCloudDialogflowV2FaqAnswer::getAnswerRecord() const {
    return m_answer_record;
}
void OAIGoogleCloudDialogflowV2FaqAnswer::setAnswerRecord(const QString &answer_record) {
    m_answer_record = answer_record;
    m_answer_record_isSet = true;
}

bool OAIGoogleCloudDialogflowV2FaqAnswer::is_answer_record_Set() const{
    return m_answer_record_isSet;
}

bool OAIGoogleCloudDialogflowV2FaqAnswer::is_answer_record_Valid() const{
    return m_answer_record_isValid;
}

float OAIGoogleCloudDialogflowV2FaqAnswer::getConfidence() const {
    return m_confidence;
}
void OAIGoogleCloudDialogflowV2FaqAnswer::setConfidence(const float &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIGoogleCloudDialogflowV2FaqAnswer::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIGoogleCloudDialogflowV2FaqAnswer::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QMap<QString, QString> OAIGoogleCloudDialogflowV2FaqAnswer::getMetadata() const {
    return m_metadata;
}
void OAIGoogleCloudDialogflowV2FaqAnswer::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGoogleCloudDialogflowV2FaqAnswer::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGoogleCloudDialogflowV2FaqAnswer::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIGoogleCloudDialogflowV2FaqAnswer::getQuestion() const {
    return m_question;
}
void OAIGoogleCloudDialogflowV2FaqAnswer::setQuestion(const QString &question) {
    m_question = question;
    m_question_isSet = true;
}

bool OAIGoogleCloudDialogflowV2FaqAnswer::is_question_Set() const{
    return m_question_isSet;
}

bool OAIGoogleCloudDialogflowV2FaqAnswer::is_question_Valid() const{
    return m_question_isValid;
}

QString OAIGoogleCloudDialogflowV2FaqAnswer::getSource() const {
    return m_source;
}
void OAIGoogleCloudDialogflowV2FaqAnswer::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIGoogleCloudDialogflowV2FaqAnswer::is_source_Set() const{
    return m_source_isSet;
}

bool OAIGoogleCloudDialogflowV2FaqAnswer::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIGoogleCloudDialogflowV2FaqAnswer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answer_record_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowV2FaqAnswer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
