/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3QueryResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3QueryResult::OAIGoogleCloudDialogflowCxV3QueryResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3QueryResult::OAIGoogleCloudDialogflowCxV3QueryResult() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3QueryResult::~OAIGoogleCloudDialogflowCxV3QueryResult() {}

void OAIGoogleCloudDialogflowCxV3QueryResult::initializeModel() {

    m_advanced_settings_isSet = false;
    m_advanced_settings_isValid = false;

    m_allow_answer_feedback_isSet = false;
    m_allow_answer_feedback_isValid = false;

    m_current_page_isSet = false;
    m_current_page_isValid = false;

    m_diagnostic_info_isSet = false;
    m_diagnostic_info_isValid = false;

    m_dtmf_isSet = false;
    m_dtmf_isValid = false;

    m_intent_isSet = false;
    m_intent_isValid = false;

    m_intent_detection_confidence_isSet = false;
    m_intent_detection_confidence_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_response_messages_isSet = false;
    m_response_messages_isValid = false;

    m_sentiment_analysis_result_isSet = false;
    m_sentiment_analysis_result_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_transcript_isSet = false;
    m_transcript_isValid = false;

    m_trigger_event_isSet = false;
    m_trigger_event_isValid = false;

    m_trigger_intent_isSet = false;
    m_trigger_intent_isValid = false;

    m_webhook_payloads_isSet = false;
    m_webhook_payloads_isValid = false;

    m_webhook_statuses_isSet = false;
    m_webhook_statuses_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3QueryResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3QueryResult::fromJsonObject(QJsonObject json) {

    m_advanced_settings_isValid = ::OpenAPI::fromJsonValue(m_advanced_settings, json[QString("advancedSettings")]);
    m_advanced_settings_isSet = !json[QString("advancedSettings")].isNull() && m_advanced_settings_isValid;

    m_allow_answer_feedback_isValid = ::OpenAPI::fromJsonValue(m_allow_answer_feedback, json[QString("allowAnswerFeedback")]);
    m_allow_answer_feedback_isSet = !json[QString("allowAnswerFeedback")].isNull() && m_allow_answer_feedback_isValid;

    m_current_page_isValid = ::OpenAPI::fromJsonValue(m_current_page, json[QString("currentPage")]);
    m_current_page_isSet = !json[QString("currentPage")].isNull() && m_current_page_isValid;

    m_diagnostic_info_isValid = ::OpenAPI::fromJsonValue(m_diagnostic_info, json[QString("diagnosticInfo")]);
    m_diagnostic_info_isSet = !json[QString("diagnosticInfo")].isNull() && m_diagnostic_info_isValid;

    m_dtmf_isValid = ::OpenAPI::fromJsonValue(m_dtmf, json[QString("dtmf")]);
    m_dtmf_isSet = !json[QString("dtmf")].isNull() && m_dtmf_isValid;

    m_intent_isValid = ::OpenAPI::fromJsonValue(m_intent, json[QString("intent")]);
    m_intent_isSet = !json[QString("intent")].isNull() && m_intent_isValid;

    m_intent_detection_confidence_isValid = ::OpenAPI::fromJsonValue(m_intent_detection_confidence, json[QString("intentDetectionConfidence")]);
    m_intent_detection_confidence_isSet = !json[QString("intentDetectionConfidence")].isNull() && m_intent_detection_confidence_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_response_messages_isValid = ::OpenAPI::fromJsonValue(m_response_messages, json[QString("responseMessages")]);
    m_response_messages_isSet = !json[QString("responseMessages")].isNull() && m_response_messages_isValid;

    m_sentiment_analysis_result_isValid = ::OpenAPI::fromJsonValue(m_sentiment_analysis_result, json[QString("sentimentAnalysisResult")]);
    m_sentiment_analysis_result_isSet = !json[QString("sentimentAnalysisResult")].isNull() && m_sentiment_analysis_result_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_transcript_isValid = ::OpenAPI::fromJsonValue(m_transcript, json[QString("transcript")]);
    m_transcript_isSet = !json[QString("transcript")].isNull() && m_transcript_isValid;

    m_trigger_event_isValid = ::OpenAPI::fromJsonValue(m_trigger_event, json[QString("triggerEvent")]);
    m_trigger_event_isSet = !json[QString("triggerEvent")].isNull() && m_trigger_event_isValid;

    m_trigger_intent_isValid = ::OpenAPI::fromJsonValue(m_trigger_intent, json[QString("triggerIntent")]);
    m_trigger_intent_isSet = !json[QString("triggerIntent")].isNull() && m_trigger_intent_isValid;

    if(json["webhookPayloads"].isArray()){
        auto arr = json["webhookPayloads"].toArray();
        m_webhook_payloads_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QJsonValue> item;
                m_webhook_payloads_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_webhook_payloads_isSet = !jval.isNull() && m_webhook_payloads_isValid;
                m_webhook_payloads.push_back(item);
            }
        }
    }

    m_webhook_statuses_isValid = ::OpenAPI::fromJsonValue(m_webhook_statuses, json[QString("webhookStatuses")]);
    m_webhook_statuses_isSet = !json[QString("webhookStatuses")].isNull() && m_webhook_statuses_isValid;
}

QString OAIGoogleCloudDialogflowCxV3QueryResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3QueryResult::asJsonObject() const {
    QJsonObject obj;
    if (m_advanced_settings.isSet()) {
        obj.insert(QString("advancedSettings"), ::OpenAPI::toJsonValue(m_advanced_settings));
    }
    if (m_allow_answer_feedback_isSet) {
        obj.insert(QString("allowAnswerFeedback"), ::OpenAPI::toJsonValue(m_allow_answer_feedback));
    }
    if (m_current_page.isSet()) {
        obj.insert(QString("currentPage"), ::OpenAPI::toJsonValue(m_current_page));
    }
    if (m_diagnostic_info.size() > 0) {
        obj.insert(QString("diagnosticInfo"), ::OpenAPI::toJsonValue(m_diagnostic_info));
    }
    if (m_dtmf.isSet()) {
        obj.insert(QString("dtmf"), ::OpenAPI::toJsonValue(m_dtmf));
    }
    if (m_intent.isSet()) {
        obj.insert(QString("intent"), ::OpenAPI::toJsonValue(m_intent));
    }
    if (m_intent_detection_confidence_isSet) {
        obj.insert(QString("intentDetectionConfidence"), ::OpenAPI::toJsonValue(m_intent_detection_confidence));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_match.isSet()) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_response_messages.size() > 0) {
        obj.insert(QString("responseMessages"), ::OpenAPI::toJsonValue(m_response_messages));
    }
    if (m_sentiment_analysis_result.isSet()) {
        obj.insert(QString("sentimentAnalysisResult"), ::OpenAPI::toJsonValue(m_sentiment_analysis_result));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_transcript_isSet) {
        obj.insert(QString("transcript"), ::OpenAPI::toJsonValue(m_transcript));
    }
    if (m_trigger_event_isSet) {
        obj.insert(QString("triggerEvent"), ::OpenAPI::toJsonValue(m_trigger_event));
    }
    if (m_trigger_intent_isSet) {
        obj.insert(QString("triggerIntent"), ::OpenAPI::toJsonValue(m_trigger_intent));
    }
    if (m_webhook_payloads.size() > 0) {
        
        obj.insert(QString("webhookPayloads"), toJsonValue(m_webhook_payloads));
    }
    if (m_webhook_statuses.size() > 0) {
        obj.insert(QString("webhookStatuses"), ::OpenAPI::toJsonValue(m_webhook_statuses));
    }
    return obj;
}

OAIGoogleCloudDialogflowCxV3AdvancedSettings OAIGoogleCloudDialogflowCxV3QueryResult::getAdvancedSettings() const {
    return m_advanced_settings;
}
void OAIGoogleCloudDialogflowCxV3QueryResult::setAdvancedSettings(const OAIGoogleCloudDialogflowCxV3AdvancedSettings &advanced_settings) {
    m_advanced_settings = advanced_settings;
    m_advanced_settings_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_advanced_settings_Set() const{
    return m_advanced_settings_isSet;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_advanced_settings_Valid() const{
    return m_advanced_settings_isValid;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::isAllowAnswerFeedback() const {
    return m_allow_answer_feedback;
}
void OAIGoogleCloudDialogflowCxV3QueryResult::setAllowAnswerFeedback(const bool &allow_answer_feedback) {
    m_allow_answer_feedback = allow_answer_feedback;
    m_allow_answer_feedback_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_allow_answer_feedback_Set() const{
    return m_allow_answer_feedback_isSet;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_allow_answer_feedback_Valid() const{
    return m_allow_answer_feedback_isValid;
}

OAIGoogleCloudDialogflowCxV3Page OAIGoogleCloudDialogflowCxV3QueryResult::getCurrentPage() const {
    return m_current_page;
}
void OAIGoogleCloudDialogflowCxV3QueryResult::setCurrentPage(const OAIGoogleCloudDialogflowCxV3Page &current_page) {
    m_current_page = current_page;
    m_current_page_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_current_page_Set() const{
    return m_current_page_isSet;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_current_page_Valid() const{
    return m_current_page_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudDialogflowCxV3QueryResult::getDiagnosticInfo() const {
    return m_diagnostic_info;
}
void OAIGoogleCloudDialogflowCxV3QueryResult::setDiagnosticInfo(const QMap<QString, QJsonValue> &diagnostic_info) {
    m_diagnostic_info = diagnostic_info;
    m_diagnostic_info_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_diagnostic_info_Set() const{
    return m_diagnostic_info_isSet;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_diagnostic_info_Valid() const{
    return m_diagnostic_info_isValid;
}

OAIGoogleCloudDialogflowCxV3DtmfInput OAIGoogleCloudDialogflowCxV3QueryResult::getDtmf() const {
    return m_dtmf;
}
void OAIGoogleCloudDialogflowCxV3QueryResult::setDtmf(const OAIGoogleCloudDialogflowCxV3DtmfInput &dtmf) {
    m_dtmf = dtmf;
    m_dtmf_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_dtmf_Set() const{
    return m_dtmf_isSet;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_dtmf_Valid() const{
    return m_dtmf_isValid;
}

OAIGoogleCloudDialogflowCxV3Intent OAIGoogleCloudDialogflowCxV3QueryResult::getIntent() const {
    return m_intent;
}
void OAIGoogleCloudDialogflowCxV3QueryResult::setIntent(const OAIGoogleCloudDialogflowCxV3Intent &intent) {
    m_intent = intent;
    m_intent_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_intent_Set() const{
    return m_intent_isSet;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_intent_Valid() const{
    return m_intent_isValid;
}

float OAIGoogleCloudDialogflowCxV3QueryResult::getIntentDetectionConfidence() const {
    return m_intent_detection_confidence;
}
void OAIGoogleCloudDialogflowCxV3QueryResult::setIntentDetectionConfidence(const float &intent_detection_confidence) {
    m_intent_detection_confidence = intent_detection_confidence;
    m_intent_detection_confidence_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_intent_detection_confidence_Set() const{
    return m_intent_detection_confidence_isSet;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_intent_detection_confidence_Valid() const{
    return m_intent_detection_confidence_isValid;
}

QString OAIGoogleCloudDialogflowCxV3QueryResult::getLanguageCode() const {
    return m_language_code;
}
void OAIGoogleCloudDialogflowCxV3QueryResult::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_language_code_Valid() const{
    return m_language_code_isValid;
}

OAIGoogleCloudDialogflowCxV3Match OAIGoogleCloudDialogflowCxV3QueryResult::getMatch() const {
    return m_match;
}
void OAIGoogleCloudDialogflowCxV3QueryResult::setMatch(const OAIGoogleCloudDialogflowCxV3Match &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_match_Set() const{
    return m_match_isSet;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_match_Valid() const{
    return m_match_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudDialogflowCxV3QueryResult::getParameters() const {
    return m_parameters;
}
void OAIGoogleCloudDialogflowCxV3QueryResult::setParameters(const QMap<QString, QJsonValue> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QList<OAIGoogleCloudDialogflowCxV3ResponseMessage> OAIGoogleCloudDialogflowCxV3QueryResult::getResponseMessages() const {
    return m_response_messages;
}
void OAIGoogleCloudDialogflowCxV3QueryResult::setResponseMessages(const QList<OAIGoogleCloudDialogflowCxV3ResponseMessage> &response_messages) {
    m_response_messages = response_messages;
    m_response_messages_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_response_messages_Set() const{
    return m_response_messages_isSet;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_response_messages_Valid() const{
    return m_response_messages_isValid;
}

OAIGoogleCloudDialogflowCxV3SentimentAnalysisResult OAIGoogleCloudDialogflowCxV3QueryResult::getSentimentAnalysisResult() const {
    return m_sentiment_analysis_result;
}
void OAIGoogleCloudDialogflowCxV3QueryResult::setSentimentAnalysisResult(const OAIGoogleCloudDialogflowCxV3SentimentAnalysisResult &sentiment_analysis_result) {
    m_sentiment_analysis_result = sentiment_analysis_result;
    m_sentiment_analysis_result_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_sentiment_analysis_result_Set() const{
    return m_sentiment_analysis_result_isSet;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_sentiment_analysis_result_Valid() const{
    return m_sentiment_analysis_result_isValid;
}

QString OAIGoogleCloudDialogflowCxV3QueryResult::getText() const {
    return m_text;
}
void OAIGoogleCloudDialogflowCxV3QueryResult::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_text_Set() const{
    return m_text_isSet;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIGoogleCloudDialogflowCxV3QueryResult::getTranscript() const {
    return m_transcript;
}
void OAIGoogleCloudDialogflowCxV3QueryResult::setTranscript(const QString &transcript) {
    m_transcript = transcript;
    m_transcript_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_transcript_Set() const{
    return m_transcript_isSet;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_transcript_Valid() const{
    return m_transcript_isValid;
}

QString OAIGoogleCloudDialogflowCxV3QueryResult::getTriggerEvent() const {
    return m_trigger_event;
}
void OAIGoogleCloudDialogflowCxV3QueryResult::setTriggerEvent(const QString &trigger_event) {
    m_trigger_event = trigger_event;
    m_trigger_event_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_trigger_event_Set() const{
    return m_trigger_event_isSet;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_trigger_event_Valid() const{
    return m_trigger_event_isValid;
}

QString OAIGoogleCloudDialogflowCxV3QueryResult::getTriggerIntent() const {
    return m_trigger_intent;
}
void OAIGoogleCloudDialogflowCxV3QueryResult::setTriggerIntent(const QString &trigger_intent) {
    m_trigger_intent = trigger_intent;
    m_trigger_intent_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_trigger_intent_Set() const{
    return m_trigger_intent_isSet;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_trigger_intent_Valid() const{
    return m_trigger_intent_isValid;
}

QList<QMap<QString, QJsonValue>> OAIGoogleCloudDialogflowCxV3QueryResult::getWebhookPayloads() const {
    return m_webhook_payloads;
}
void OAIGoogleCloudDialogflowCxV3QueryResult::setWebhookPayloads(const QList<QMap<QString, QJsonValue>> &webhook_payloads) {
    m_webhook_payloads = webhook_payloads;
    m_webhook_payloads_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_webhook_payloads_Set() const{
    return m_webhook_payloads_isSet;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_webhook_payloads_Valid() const{
    return m_webhook_payloads_isValid;
}

QList<OAIGoogleRpcStatus> OAIGoogleCloudDialogflowCxV3QueryResult::getWebhookStatuses() const {
    return m_webhook_statuses;
}
void OAIGoogleCloudDialogflowCxV3QueryResult::setWebhookStatuses(const QList<OAIGoogleRpcStatus> &webhook_statuses) {
    m_webhook_statuses = webhook_statuses;
    m_webhook_statuses_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_webhook_statuses_Set() const{
    return m_webhook_statuses_isSet;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::is_webhook_statuses_Valid() const{
    return m_webhook_statuses_isValid;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advanced_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_answer_feedback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_page.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_diagnostic_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dtmf.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_detection_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_analysis_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcript_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_intent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_payloads.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3QueryResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
