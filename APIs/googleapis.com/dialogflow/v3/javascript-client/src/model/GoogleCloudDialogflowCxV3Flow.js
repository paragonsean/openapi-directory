/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDialogflowCxV3AdvancedSettings from './GoogleCloudDialogflowCxV3AdvancedSettings';
import GoogleCloudDialogflowCxV3EventHandler from './GoogleCloudDialogflowCxV3EventHandler';
import GoogleCloudDialogflowCxV3KnowledgeConnectorSettings from './GoogleCloudDialogflowCxV3KnowledgeConnectorSettings';
import GoogleCloudDialogflowCxV3NluSettings from './GoogleCloudDialogflowCxV3NluSettings';
import GoogleCloudDialogflowCxV3TransitionRoute from './GoogleCloudDialogflowCxV3TransitionRoute';

/**
 * The GoogleCloudDialogflowCxV3Flow model module.
 * @module model/GoogleCloudDialogflowCxV3Flow
 * @version v3
 */
class GoogleCloudDialogflowCxV3Flow {
    /**
     * Constructs a new <code>GoogleCloudDialogflowCxV3Flow</code>.
     * Flows represents the conversation flows when you build your chatbot agent. A flow consists of many pages connected by the transition routes. Conversations always start with the built-in Start Flow (with an all-0 ID). Transition routes can direct the conversation session from the current flow (parent flow) to another flow (sub flow). When the sub flow is finished, Dialogflow will bring the session back to the parent flow, where the sub flow is started. Usually, when a transition route is followed by a matched intent, the intent will be \&quot;consumed\&quot;. This means the intent won&#39;t activate more transition routes. However, when the followed transition route moves the conversation session into a different flow, the matched intent can be carried over and to be consumed in the target flow.
     * @alias module:model/GoogleCloudDialogflowCxV3Flow
     */
    constructor() { 
        
        GoogleCloudDialogflowCxV3Flow.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDialogflowCxV3Flow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDialogflowCxV3Flow} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDialogflowCxV3Flow} The populated <code>GoogleCloudDialogflowCxV3Flow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDialogflowCxV3Flow();

            if (data.hasOwnProperty('advancedSettings')) {
                obj['advancedSettings'] = GoogleCloudDialogflowCxV3AdvancedSettings.constructFromObject(data['advancedSettings']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('eventHandlers')) {
                obj['eventHandlers'] = ApiClient.convertToType(data['eventHandlers'], [GoogleCloudDialogflowCxV3EventHandler]);
            }
            if (data.hasOwnProperty('knowledgeConnectorSettings')) {
                obj['knowledgeConnectorSettings'] = GoogleCloudDialogflowCxV3KnowledgeConnectorSettings.constructFromObject(data['knowledgeConnectorSettings']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nluSettings')) {
                obj['nluSettings'] = GoogleCloudDialogflowCxV3NluSettings.constructFromObject(data['nluSettings']);
            }
            if (data.hasOwnProperty('transitionRouteGroups')) {
                obj['transitionRouteGroups'] = ApiClient.convertToType(data['transitionRouteGroups'], ['String']);
            }
            if (data.hasOwnProperty('transitionRoutes')) {
                obj['transitionRoutes'] = ApiClient.convertToType(data['transitionRoutes'], [GoogleCloudDialogflowCxV3TransitionRoute]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDialogflowCxV3Flow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDialogflowCxV3Flow</code>.
     */
    static validateJSON(data) {
        // validate the optional field `advancedSettings`
        if (data['advancedSettings']) { // data not null
          GoogleCloudDialogflowCxV3AdvancedSettings.validateJSON(data['advancedSettings']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['eventHandlers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['eventHandlers'])) {
                throw new Error("Expected the field `eventHandlers` to be an array in the JSON data but got " + data['eventHandlers']);
            }
            // validate the optional field `eventHandlers` (array)
            for (const item of data['eventHandlers']) {
                GoogleCloudDialogflowCxV3EventHandler.validateJSON(item);
            };
        }
        // validate the optional field `knowledgeConnectorSettings`
        if (data['knowledgeConnectorSettings']) { // data not null
          GoogleCloudDialogflowCxV3KnowledgeConnectorSettings.validateJSON(data['knowledgeConnectorSettings']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `nluSettings`
        if (data['nluSettings']) { // data not null
          GoogleCloudDialogflowCxV3NluSettings.validateJSON(data['nluSettings']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['transitionRouteGroups'])) {
            throw new Error("Expected the field `transitionRouteGroups` to be an array in the JSON data but got " + data['transitionRouteGroups']);
        }
        if (data['transitionRoutes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transitionRoutes'])) {
                throw new Error("Expected the field `transitionRoutes` to be an array in the JSON data but got " + data['transitionRoutes']);
            }
            // validate the optional field `transitionRoutes` (array)
            for (const item of data['transitionRoutes']) {
                GoogleCloudDialogflowCxV3TransitionRoute.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudDialogflowCxV3AdvancedSettings} advancedSettings
 */
GoogleCloudDialogflowCxV3Flow.prototype['advancedSettings'] = undefined;

/**
 * The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.
 * @member {String} description
 */
GoogleCloudDialogflowCxV3Flow.prototype['description'] = undefined;

/**
 * Required. The human-readable name of the flow.
 * @member {String} displayName
 */
GoogleCloudDialogflowCxV3Flow.prototype['displayName'] = undefined;

/**
 * A flow's event handlers serve two purposes: * They are responsible for handling events (e.g. no match, webhook errors) in the flow. * They are inherited by every page's event handlers, which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow. Unlike transition_routes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.
 * @member {Array.<module:model/GoogleCloudDialogflowCxV3EventHandler>} eventHandlers
 */
GoogleCloudDialogflowCxV3Flow.prototype['eventHandlers'] = undefined;

/**
 * @member {module:model/GoogleCloudDialogflowCxV3KnowledgeConnectorSettings} knowledgeConnectorSettings
 */
GoogleCloudDialogflowCxV3Flow.prototype['knowledgeConnectorSettings'] = undefined;

/**
 * The unique identifier of the flow. Format: `projects//locations//agents//flows/`.
 * @member {String} name
 */
GoogleCloudDialogflowCxV3Flow.prototype['name'] = undefined;

/**
 * @member {module:model/GoogleCloudDialogflowCxV3NluSettings} nluSettings
 */
GoogleCloudDialogflowCxV3Flow.prototype['nluSettings'] = undefined;

/**
 * A flow's transition route group serve two purposes: * They are responsible for matching the user's first utterances in the flow. * They are inherited by every page's transition route groups. Transition route groups defined in the page have higher priority than those defined in the flow. Format:`projects//locations//agents//flows//transitionRouteGroups/` or `projects//locations//agents//transitionRouteGroups/` for agent-level groups.
 * @member {Array.<String>} transitionRouteGroups
 */
GoogleCloudDialogflowCxV3Flow.prototype['transitionRouteGroups'] = undefined;

/**
 * A flow's transition routes serve two purposes: * They are responsible for matching the user's first utterances in the flow. * They are inherited by every page's transition routes and can support use cases such as the user saying \"help\" or \"can I talk to a human?\", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow. TransitionRoutes are evalauted in the following order: * TransitionRoutes with intent specified. * TransitionRoutes with only condition specified. TransitionRoutes with intent specified are inherited by pages in the flow.
 * @member {Array.<module:model/GoogleCloudDialogflowCxV3TransitionRoute>} transitionRoutes
 */
GoogleCloudDialogflowCxV3Flow.prototype['transitionRoutes'] = undefined;






export default GoogleCloudDialogflowCxV3Flow;

