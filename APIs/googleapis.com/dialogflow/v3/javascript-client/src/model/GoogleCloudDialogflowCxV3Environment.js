/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDialogflowCxV3EnvironmentTestCasesConfig from './GoogleCloudDialogflowCxV3EnvironmentTestCasesConfig';
import GoogleCloudDialogflowCxV3EnvironmentVersionConfig from './GoogleCloudDialogflowCxV3EnvironmentVersionConfig';
import GoogleCloudDialogflowCxV3EnvironmentWebhookConfig from './GoogleCloudDialogflowCxV3EnvironmentWebhookConfig';

/**
 * The GoogleCloudDialogflowCxV3Environment model module.
 * @module model/GoogleCloudDialogflowCxV3Environment
 * @version v3
 */
class GoogleCloudDialogflowCxV3Environment {
    /**
     * Constructs a new <code>GoogleCloudDialogflowCxV3Environment</code>.
     * Represents an environment for an agent. You can create multiple versions of your agent and publish them to separate environments. When you edit an agent, you are editing the draft agent. At any point, you can save the draft agent as an agent version, which is an immutable snapshot of your agent. When you save the draft agent, it is published to the default environment. When you create agent versions, you can publish them to custom environments. You can create a variety of custom environments for testing, development, production, etc.
     * @alias module:model/GoogleCloudDialogflowCxV3Environment
     */
    constructor() { 
        
        GoogleCloudDialogflowCxV3Environment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDialogflowCxV3Environment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDialogflowCxV3Environment} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDialogflowCxV3Environment} The populated <code>GoogleCloudDialogflowCxV3Environment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDialogflowCxV3Environment();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('testCasesConfig')) {
                obj['testCasesConfig'] = GoogleCloudDialogflowCxV3EnvironmentTestCasesConfig.constructFromObject(data['testCasesConfig']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('versionConfigs')) {
                obj['versionConfigs'] = ApiClient.convertToType(data['versionConfigs'], [GoogleCloudDialogflowCxV3EnvironmentVersionConfig]);
            }
            if (data.hasOwnProperty('webhookConfig')) {
                obj['webhookConfig'] = GoogleCloudDialogflowCxV3EnvironmentWebhookConfig.constructFromObject(data['webhookConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDialogflowCxV3Environment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDialogflowCxV3Environment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `testCasesConfig`
        if (data['testCasesConfig']) { // data not null
          GoogleCloudDialogflowCxV3EnvironmentTestCasesConfig.validateJSON(data['testCasesConfig']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        if (data['versionConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['versionConfigs'])) {
                throw new Error("Expected the field `versionConfigs` to be an array in the JSON data but got " + data['versionConfigs']);
            }
            // validate the optional field `versionConfigs` (array)
            for (const item of data['versionConfigs']) {
                GoogleCloudDialogflowCxV3EnvironmentVersionConfig.validateJSON(item);
            };
        }
        // validate the optional field `webhookConfig`
        if (data['webhookConfig']) { // data not null
          GoogleCloudDialogflowCxV3EnvironmentWebhookConfig.validateJSON(data['webhookConfig']);
        }

        return true;
    }


}



/**
 * The human-readable description of the environment. The maximum length is 500 characters. If exceeded, the request is rejected.
 * @member {String} description
 */
GoogleCloudDialogflowCxV3Environment.prototype['description'] = undefined;

/**
 * Required. The human-readable name of the environment (unique in an agent). Limit of 64 characters.
 * @member {String} displayName
 */
GoogleCloudDialogflowCxV3Environment.prototype['displayName'] = undefined;

/**
 * The name of the environment. Format: `projects//locations//agents//environments/`.
 * @member {String} name
 */
GoogleCloudDialogflowCxV3Environment.prototype['name'] = undefined;

/**
 * @member {module:model/GoogleCloudDialogflowCxV3EnvironmentTestCasesConfig} testCasesConfig
 */
GoogleCloudDialogflowCxV3Environment.prototype['testCasesConfig'] = undefined;

/**
 * Output only. Update time of this environment.
 * @member {String} updateTime
 */
GoogleCloudDialogflowCxV3Environment.prototype['updateTime'] = undefined;

/**
 * A list of configurations for flow versions. You should include version configs for all flows that are reachable from `Start Flow` in the agent. Otherwise, an error will be returned.
 * @member {Array.<module:model/GoogleCloudDialogflowCxV3EnvironmentVersionConfig>} versionConfigs
 */
GoogleCloudDialogflowCxV3Environment.prototype['versionConfigs'] = undefined;

/**
 * @member {module:model/GoogleCloudDialogflowCxV3EnvironmentWebhookConfig} webhookConfig
 */
GoogleCloudDialogflowCxV3Environment.prototype['webhookConfig'] = undefined;






export default GoogleCloudDialogflowCxV3Environment;

