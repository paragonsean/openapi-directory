/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDialogflowCxV3Intent from './GoogleCloudDialogflowCxV3Intent';

/**
 * The GoogleCloudDialogflowCxV3Match model module.
 * @module model/GoogleCloudDialogflowCxV3Match
 * @version v3
 */
class GoogleCloudDialogflowCxV3Match {
    /**
     * Constructs a new <code>GoogleCloudDialogflowCxV3Match</code>.
     * Represents one match result of MatchIntent.
     * @alias module:model/GoogleCloudDialogflowCxV3Match
     */
    constructor() { 
        
        GoogleCloudDialogflowCxV3Match.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDialogflowCxV3Match</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDialogflowCxV3Match} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDialogflowCxV3Match} The populated <code>GoogleCloudDialogflowCxV3Match</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDialogflowCxV3Match();

            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'Number');
            }
            if (data.hasOwnProperty('event')) {
                obj['event'] = ApiClient.convertToType(data['event'], 'String');
            }
            if (data.hasOwnProperty('intent')) {
                obj['intent'] = GoogleCloudDialogflowCxV3Intent.constructFromObject(data['intent']);
            }
            if (data.hasOwnProperty('matchType')) {
                obj['matchType'] = ApiClient.convertToType(data['matchType'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], {'String': Object});
            }
            if (data.hasOwnProperty('resolvedInput')) {
                obj['resolvedInput'] = ApiClient.convertToType(data['resolvedInput'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDialogflowCxV3Match</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDialogflowCxV3Match</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['event'] && !(typeof data['event'] === 'string' || data['event'] instanceof String)) {
            throw new Error("Expected the field `event` to be a primitive type in the JSON string but got " + data['event']);
        }
        // validate the optional field `intent`
        if (data['intent']) { // data not null
          GoogleCloudDialogflowCxV3Intent.validateJSON(data['intent']);
        }
        // ensure the json data is a string
        if (data['matchType'] && !(typeof data['matchType'] === 'string' || data['matchType'] instanceof String)) {
            throw new Error("Expected the field `matchType` to be a primitive type in the JSON string but got " + data['matchType']);
        }
        // ensure the json data is a string
        if (data['resolvedInput'] && !(typeof data['resolvedInput'] === 'string' || data['resolvedInput'] instanceof String)) {
            throw new Error("Expected the field `resolvedInput` to be a primitive type in the JSON string but got " + data['resolvedInput']);
        }

        return true;
    }


}



/**
 * The confidence of this match. Values range from 0.0 (completely uncertain) to 1.0 (completely certain). This value is for informational purpose only and is only used to help match the best intent within the classification threshold. This value may change for the same end-user expression at any time due to a model retraining or change in implementation.
 * @member {Number} confidence
 */
GoogleCloudDialogflowCxV3Match.prototype['confidence'] = undefined;

/**
 * The event that matched the query. Filled for `EVENT`, `NO_MATCH` and `NO_INPUT` match types.
 * @member {String} event
 */
GoogleCloudDialogflowCxV3Match.prototype['event'] = undefined;

/**
 * @member {module:model/GoogleCloudDialogflowCxV3Intent} intent
 */
GoogleCloudDialogflowCxV3Match.prototype['intent'] = undefined;

/**
 * Type of this Match.
 * @member {module:model/GoogleCloudDialogflowCxV3Match.MatchTypeEnum} matchType
 */
GoogleCloudDialogflowCxV3Match.prototype['matchType'] = undefined;

/**
 * The collection of parameters extracted from the query. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value.
 * @member {Object.<String, Object>} parameters
 */
GoogleCloudDialogflowCxV3Match.prototype['parameters'] = undefined;

/**
 * Final text input which was matched during MatchIntent. This value can be different from original input sent in request because of spelling correction or other processing.
 * @member {String} resolvedInput
 */
GoogleCloudDialogflowCxV3Match.prototype['resolvedInput'] = undefined;





/**
 * Allowed values for the <code>matchType</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDialogflowCxV3Match['MatchTypeEnum'] = {

    /**
     * value: "MATCH_TYPE_UNSPECIFIED"
     * @const
     */
    "MATCH_TYPE_UNSPECIFIED": "MATCH_TYPE_UNSPECIFIED",

    /**
     * value: "INTENT"
     * @const
     */
    "INTENT": "INTENT",

    /**
     * value: "DIRECT_INTENT"
     * @const
     */
    "DIRECT_INTENT": "DIRECT_INTENT",

    /**
     * value: "PARAMETER_FILLING"
     * @const
     */
    "PARAMETER_FILLING": "PARAMETER_FILLING",

    /**
     * value: "NO_MATCH"
     * @const
     */
    "NO_MATCH": "NO_MATCH",

    /**
     * value: "NO_INPUT"
     * @const
     */
    "NO_INPUT": "NO_INPUT",

    /**
     * value: "EVENT"
     * @const
     */
    "EVENT": "EVENT"
};



export default GoogleCloudDialogflowCxV3Match;

