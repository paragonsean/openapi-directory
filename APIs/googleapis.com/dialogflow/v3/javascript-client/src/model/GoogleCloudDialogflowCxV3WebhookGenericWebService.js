/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudDialogflowCxV3WebhookGenericWebService model module.
 * @module model/GoogleCloudDialogflowCxV3WebhookGenericWebService
 * @version v3
 */
class GoogleCloudDialogflowCxV3WebhookGenericWebService {
    /**
     * Constructs a new <code>GoogleCloudDialogflowCxV3WebhookGenericWebService</code>.
     * Represents configuration for a generic web service.
     * @alias module:model/GoogleCloudDialogflowCxV3WebhookGenericWebService
     */
    constructor() { 
        
        GoogleCloudDialogflowCxV3WebhookGenericWebService.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDialogflowCxV3WebhookGenericWebService</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDialogflowCxV3WebhookGenericWebService} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDialogflowCxV3WebhookGenericWebService} The populated <code>GoogleCloudDialogflowCxV3WebhookGenericWebService</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDialogflowCxV3WebhookGenericWebService();

            if (data.hasOwnProperty('allowedCaCerts')) {
                obj['allowedCaCerts'] = ApiClient.convertToType(data['allowedCaCerts'], ['Blob']);
            }
            if (data.hasOwnProperty('httpMethod')) {
                obj['httpMethod'] = ApiClient.convertToType(data['httpMethod'], 'String');
            }
            if (data.hasOwnProperty('parameterMapping')) {
                obj['parameterMapping'] = ApiClient.convertToType(data['parameterMapping'], {'String': 'String'});
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('requestBody')) {
                obj['requestBody'] = ApiClient.convertToType(data['requestBody'], 'String');
            }
            if (data.hasOwnProperty('requestHeaders')) {
                obj['requestHeaders'] = ApiClient.convertToType(data['requestHeaders'], {'String': 'String'});
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('webhookType')) {
                obj['webhookType'] = ApiClient.convertToType(data['webhookType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDialogflowCxV3WebhookGenericWebService</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDialogflowCxV3WebhookGenericWebService</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['allowedCaCerts'])) {
            throw new Error("Expected the field `allowedCaCerts` to be an array in the JSON data but got " + data['allowedCaCerts']);
        }
        // ensure the json data is a string
        if (data['httpMethod'] && !(typeof data['httpMethod'] === 'string' || data['httpMethod'] instanceof String)) {
            throw new Error("Expected the field `httpMethod` to be a primitive type in the JSON string but got " + data['httpMethod']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['requestBody'] && !(typeof data['requestBody'] === 'string' || data['requestBody'] instanceof String)) {
            throw new Error("Expected the field `requestBody` to be a primitive type in the JSON string but got " + data['requestBody']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['webhookType'] && !(typeof data['webhookType'] === 'string' || data['webhookType'] instanceof String)) {
            throw new Error("Expected the field `webhookType` to be a primitive type in the JSON string but got " + data['webhookType']);
        }

        return true;
    }


}



/**
 * Optional. Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification. This overrides the default SSL trust store. If this is empty or unspecified, Dialogflow will use Google's default trust store to verify certificates. N.B. Make sure the HTTPS server certificates are signed with \"subject alt name\". For instance a certificate can be self-signed using the following command, ``` openssl x509 -req -days 200 -in example.com.csr \\ -signkey example.com.key \\ -out example.com.crt \\ -extfile <(printf \"\\nsubjectAltName='DNS:www.example.com'\") ```
 * @member {Array.<Blob>} allowedCaCerts
 */
GoogleCloudDialogflowCxV3WebhookGenericWebService.prototype['allowedCaCerts'] = undefined;

/**
 * Optional. HTTP method for the flexible webhook calls. Standard webhook always uses POST.
 * @member {module:model/GoogleCloudDialogflowCxV3WebhookGenericWebService.HttpMethodEnum} httpMethod
 */
GoogleCloudDialogflowCxV3WebhookGenericWebService.prototype['httpMethod'] = undefined;

/**
 * Optional. Maps the values extracted from specific fields of the flexible webhook response into session parameters. - Key: session parameter name - Value: field path in the webhook response
 * @member {Object.<String, String>} parameterMapping
 */
GoogleCloudDialogflowCxV3WebhookGenericWebService.prototype['parameterMapping'] = undefined;

/**
 * The password for HTTP Basic authentication.
 * @member {String} password
 */
GoogleCloudDialogflowCxV3WebhookGenericWebService.prototype['password'] = undefined;

/**
 * Optional. Defines a custom JSON object as request body to send to flexible webhook.
 * @member {String} requestBody
 */
GoogleCloudDialogflowCxV3WebhookGenericWebService.prototype['requestBody'] = undefined;

/**
 * The HTTP request headers to send together with webhook requests.
 * @member {Object.<String, String>} requestHeaders
 */
GoogleCloudDialogflowCxV3WebhookGenericWebService.prototype['requestHeaders'] = undefined;

/**
 * Required. The webhook URI for receiving POST requests. It must use https protocol.
 * @member {String} uri
 */
GoogleCloudDialogflowCxV3WebhookGenericWebService.prototype['uri'] = undefined;

/**
 * The user name for HTTP Basic authentication.
 * @member {String} username
 */
GoogleCloudDialogflowCxV3WebhookGenericWebService.prototype['username'] = undefined;

/**
 * Optional. Type of the webhook.
 * @member {module:model/GoogleCloudDialogflowCxV3WebhookGenericWebService.WebhookTypeEnum} webhookType
 */
GoogleCloudDialogflowCxV3WebhookGenericWebService.prototype['webhookType'] = undefined;





/**
 * Allowed values for the <code>httpMethod</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDialogflowCxV3WebhookGenericWebService['HttpMethodEnum'] = {

    /**
     * value: "HTTP_METHOD_UNSPECIFIED"
     * @const
     */
    "HTTP_METHOD_UNSPECIFIED": "HTTP_METHOD_UNSPECIFIED",

    /**
     * value: "POST"
     * @const
     */
    "POST": "POST",

    /**
     * value: "GET"
     * @const
     */
    "GET": "GET",

    /**
     * value: "HEAD"
     * @const
     */
    "HEAD": "HEAD",

    /**
     * value: "PUT"
     * @const
     */
    "PUT": "PUT",

    /**
     * value: "DELETE"
     * @const
     */
    "DELETE": "DELETE",

    /**
     * value: "PATCH"
     * @const
     */
    "PATCH": "PATCH",

    /**
     * value: "OPTIONS"
     * @const
     */
    "OPTIONS": "OPTIONS"
};


/**
 * Allowed values for the <code>webhookType</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudDialogflowCxV3WebhookGenericWebService['WebhookTypeEnum'] = {

    /**
     * value: "WEBHOOK_TYPE_UNSPECIFIED"
     * @const
     */
    "WEBHOOK_TYPE_UNSPECIFIED": "WEBHOOK_TYPE_UNSPECIFIED",

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD",

    /**
     * value: "FLEXIBLE"
     * @const
     */
    "FLEXIBLE": "FLEXIBLE"
};



export default GoogleCloudDialogflowCxV3WebhookGenericWebService;

