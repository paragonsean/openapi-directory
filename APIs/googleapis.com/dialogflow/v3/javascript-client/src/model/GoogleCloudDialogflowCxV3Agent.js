/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDialogflowCxV3AdvancedSettings from './GoogleCloudDialogflowCxV3AdvancedSettings';
import GoogleCloudDialogflowCxV3AgentAnswerFeedbackSettings from './GoogleCloudDialogflowCxV3AgentAnswerFeedbackSettings';
import GoogleCloudDialogflowCxV3AgentGenAppBuilderSettings from './GoogleCloudDialogflowCxV3AgentGenAppBuilderSettings';
import GoogleCloudDialogflowCxV3AgentGitIntegrationSettings from './GoogleCloudDialogflowCxV3AgentGitIntegrationSettings';
import GoogleCloudDialogflowCxV3SpeechToTextSettings from './GoogleCloudDialogflowCxV3SpeechToTextSettings';
import GoogleCloudDialogflowCxV3TextToSpeechSettings from './GoogleCloudDialogflowCxV3TextToSpeechSettings';

/**
 * The GoogleCloudDialogflowCxV3Agent model module.
 * @module model/GoogleCloudDialogflowCxV3Agent
 * @version v3
 */
class GoogleCloudDialogflowCxV3Agent {
    /**
     * Constructs a new <code>GoogleCloudDialogflowCxV3Agent</code>.
     * Agents are best described as Natural Language Understanding (NLU) modules that transform user requests into actionable data. You can include agents in your app, product, or service to determine user intent and respond to the user in a natural way. After you create an agent, you can add Intents, Entity Types, Flows, Fulfillments, Webhooks, TransitionRouteGroups and so on to manage the conversation flows.
     * @alias module:model/GoogleCloudDialogflowCxV3Agent
     */
    constructor() { 
        
        GoogleCloudDialogflowCxV3Agent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDialogflowCxV3Agent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDialogflowCxV3Agent} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDialogflowCxV3Agent} The populated <code>GoogleCloudDialogflowCxV3Agent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDialogflowCxV3Agent();

            if (data.hasOwnProperty('advancedSettings')) {
                obj['advancedSettings'] = GoogleCloudDialogflowCxV3AdvancedSettings.constructFromObject(data['advancedSettings']);
            }
            if (data.hasOwnProperty('answerFeedbackSettings')) {
                obj['answerFeedbackSettings'] = GoogleCloudDialogflowCxV3AgentAnswerFeedbackSettings.constructFromObject(data['answerFeedbackSettings']);
            }
            if (data.hasOwnProperty('avatarUri')) {
                obj['avatarUri'] = ApiClient.convertToType(data['avatarUri'], 'String');
            }
            if (data.hasOwnProperty('defaultLanguageCode')) {
                obj['defaultLanguageCode'] = ApiClient.convertToType(data['defaultLanguageCode'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('enableSpellCorrection')) {
                obj['enableSpellCorrection'] = ApiClient.convertToType(data['enableSpellCorrection'], 'Boolean');
            }
            if (data.hasOwnProperty('enableStackdriverLogging')) {
                obj['enableStackdriverLogging'] = ApiClient.convertToType(data['enableStackdriverLogging'], 'Boolean');
            }
            if (data.hasOwnProperty('genAppBuilderSettings')) {
                obj['genAppBuilderSettings'] = GoogleCloudDialogflowCxV3AgentGenAppBuilderSettings.constructFromObject(data['genAppBuilderSettings']);
            }
            if (data.hasOwnProperty('gitIntegrationSettings')) {
                obj['gitIntegrationSettings'] = GoogleCloudDialogflowCxV3AgentGitIntegrationSettings.constructFromObject(data['gitIntegrationSettings']);
            }
            if (data.hasOwnProperty('locked')) {
                obj['locked'] = ApiClient.convertToType(data['locked'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('securitySettings')) {
                obj['securitySettings'] = ApiClient.convertToType(data['securitySettings'], 'String');
            }
            if (data.hasOwnProperty('speechToTextSettings')) {
                obj['speechToTextSettings'] = GoogleCloudDialogflowCxV3SpeechToTextSettings.constructFromObject(data['speechToTextSettings']);
            }
            if (data.hasOwnProperty('startFlow')) {
                obj['startFlow'] = ApiClient.convertToType(data['startFlow'], 'String');
            }
            if (data.hasOwnProperty('supportedLanguageCodes')) {
                obj['supportedLanguageCodes'] = ApiClient.convertToType(data['supportedLanguageCodes'], ['String']);
            }
            if (data.hasOwnProperty('textToSpeechSettings')) {
                obj['textToSpeechSettings'] = GoogleCloudDialogflowCxV3TextToSpeechSettings.constructFromObject(data['textToSpeechSettings']);
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDialogflowCxV3Agent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDialogflowCxV3Agent</code>.
     */
    static validateJSON(data) {
        // validate the optional field `advancedSettings`
        if (data['advancedSettings']) { // data not null
          GoogleCloudDialogflowCxV3AdvancedSettings.validateJSON(data['advancedSettings']);
        }
        // validate the optional field `answerFeedbackSettings`
        if (data['answerFeedbackSettings']) { // data not null
          GoogleCloudDialogflowCxV3AgentAnswerFeedbackSettings.validateJSON(data['answerFeedbackSettings']);
        }
        // ensure the json data is a string
        if (data['avatarUri'] && !(typeof data['avatarUri'] === 'string' || data['avatarUri'] instanceof String)) {
            throw new Error("Expected the field `avatarUri` to be a primitive type in the JSON string but got " + data['avatarUri']);
        }
        // ensure the json data is a string
        if (data['defaultLanguageCode'] && !(typeof data['defaultLanguageCode'] === 'string' || data['defaultLanguageCode'] instanceof String)) {
            throw new Error("Expected the field `defaultLanguageCode` to be a primitive type in the JSON string but got " + data['defaultLanguageCode']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `genAppBuilderSettings`
        if (data['genAppBuilderSettings']) { // data not null
          GoogleCloudDialogflowCxV3AgentGenAppBuilderSettings.validateJSON(data['genAppBuilderSettings']);
        }
        // validate the optional field `gitIntegrationSettings`
        if (data['gitIntegrationSettings']) { // data not null
          GoogleCloudDialogflowCxV3AgentGitIntegrationSettings.validateJSON(data['gitIntegrationSettings']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['securitySettings'] && !(typeof data['securitySettings'] === 'string' || data['securitySettings'] instanceof String)) {
            throw new Error("Expected the field `securitySettings` to be a primitive type in the JSON string but got " + data['securitySettings']);
        }
        // validate the optional field `speechToTextSettings`
        if (data['speechToTextSettings']) { // data not null
          GoogleCloudDialogflowCxV3SpeechToTextSettings.validateJSON(data['speechToTextSettings']);
        }
        // ensure the json data is a string
        if (data['startFlow'] && !(typeof data['startFlow'] === 'string' || data['startFlow'] instanceof String)) {
            throw new Error("Expected the field `startFlow` to be a primitive type in the JSON string but got " + data['startFlow']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedLanguageCodes'])) {
            throw new Error("Expected the field `supportedLanguageCodes` to be an array in the JSON data but got " + data['supportedLanguageCodes']);
        }
        // validate the optional field `textToSpeechSettings`
        if (data['textToSpeechSettings']) { // data not null
          GoogleCloudDialogflowCxV3TextToSpeechSettings.validateJSON(data['textToSpeechSettings']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudDialogflowCxV3AdvancedSettings} advancedSettings
 */
GoogleCloudDialogflowCxV3Agent.prototype['advancedSettings'] = undefined;

/**
 * @member {module:model/GoogleCloudDialogflowCxV3AgentAnswerFeedbackSettings} answerFeedbackSettings
 */
GoogleCloudDialogflowCxV3Agent.prototype['answerFeedbackSettings'] = undefined;

/**
 * The URI of the agent's avatar. Avatars are used throughout the Dialogflow console and in the self-hosted [Web Demo](https://cloud.google.com/dialogflow/docs/integrations/web-demo) integration.
 * @member {String} avatarUri
 */
GoogleCloudDialogflowCxV3Agent.prototype['avatarUri'] = undefined;

/**
 * Required. Immutable. The default language of the agent as a language tag. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes. This field cannot be set by the Agents.UpdateAgent method.
 * @member {String} defaultLanguageCode
 */
GoogleCloudDialogflowCxV3Agent.prototype['defaultLanguageCode'] = undefined;

/**
 * The description of the agent. The maximum length is 500 characters. If exceeded, the request is rejected.
 * @member {String} description
 */
GoogleCloudDialogflowCxV3Agent.prototype['description'] = undefined;

/**
 * Required. The human-readable name of the agent, unique within the location.
 * @member {String} displayName
 */
GoogleCloudDialogflowCxV3Agent.prototype['displayName'] = undefined;

/**
 * Indicates if automatic spell correction is enabled in detect intent requests.
 * @member {Boolean} enableSpellCorrection
 */
GoogleCloudDialogflowCxV3Agent.prototype['enableSpellCorrection'] = undefined;

/**
 * Indicates if stackdriver logging is enabled for the agent. Please use agent.advanced_settings instead.
 * @member {Boolean} enableStackdriverLogging
 */
GoogleCloudDialogflowCxV3Agent.prototype['enableStackdriverLogging'] = undefined;

/**
 * @member {module:model/GoogleCloudDialogflowCxV3AgentGenAppBuilderSettings} genAppBuilderSettings
 */
GoogleCloudDialogflowCxV3Agent.prototype['genAppBuilderSettings'] = undefined;

/**
 * @member {module:model/GoogleCloudDialogflowCxV3AgentGitIntegrationSettings} gitIntegrationSettings
 */
GoogleCloudDialogflowCxV3Agent.prototype['gitIntegrationSettings'] = undefined;

/**
 * Indicates whether the agent is locked for changes. If the agent is locked, modifications to the agent will be rejected except for RestoreAgent.
 * @member {Boolean} locked
 */
GoogleCloudDialogflowCxV3Agent.prototype['locked'] = undefined;

/**
 * The unique identifier of the agent. Required for the Agents.UpdateAgent method. Agents.CreateAgent populates the name automatically. Format: `projects//locations//agents/`.
 * @member {String} name
 */
GoogleCloudDialogflowCxV3Agent.prototype['name'] = undefined;

/**
 * Name of the SecuritySettings reference for the agent. Format: `projects//locations//securitySettings/`.
 * @member {String} securitySettings
 */
GoogleCloudDialogflowCxV3Agent.prototype['securitySettings'] = undefined;

/**
 * @member {module:model/GoogleCloudDialogflowCxV3SpeechToTextSettings} speechToTextSettings
 */
GoogleCloudDialogflowCxV3Agent.prototype['speechToTextSettings'] = undefined;

/**
 * Immutable. Name of the start flow in this agent. A start flow will be automatically created when the agent is created, and can only be deleted by deleting the agent. Format: `projects//locations//agents//flows/`.
 * @member {String} startFlow
 */
GoogleCloudDialogflowCxV3Agent.prototype['startFlow'] = undefined;

/**
 * The list of all languages supported by the agent (except for the `default_language_code`).
 * @member {Array.<String>} supportedLanguageCodes
 */
GoogleCloudDialogflowCxV3Agent.prototype['supportedLanguageCodes'] = undefined;

/**
 * @member {module:model/GoogleCloudDialogflowCxV3TextToSpeechSettings} textToSpeechSettings
 */
GoogleCloudDialogflowCxV3Agent.prototype['textToSpeechSettings'] = undefined;

/**
 * Required. The time zone of the agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris.
 * @member {String} timeZone
 */
GoogleCloudDialogflowCxV3Agent.prototype['timeZone'] = undefined;






export default GoogleCloudDialogflowCxV3Agent;

