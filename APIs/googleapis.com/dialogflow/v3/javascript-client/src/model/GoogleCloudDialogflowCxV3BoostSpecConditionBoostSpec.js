/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudDialogflowCxV3BoostSpecConditionBoostSpec model module.
 * @module model/GoogleCloudDialogflowCxV3BoostSpecConditionBoostSpec
 * @version v3
 */
class GoogleCloudDialogflowCxV3BoostSpecConditionBoostSpec {
    /**
     * Constructs a new <code>GoogleCloudDialogflowCxV3BoostSpecConditionBoostSpec</code>.
     * Boost applies to documents which match a condition.
     * @alias module:model/GoogleCloudDialogflowCxV3BoostSpecConditionBoostSpec
     */
    constructor() { 
        
        GoogleCloudDialogflowCxV3BoostSpecConditionBoostSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDialogflowCxV3BoostSpecConditionBoostSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDialogflowCxV3BoostSpecConditionBoostSpec} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDialogflowCxV3BoostSpecConditionBoostSpec} The populated <code>GoogleCloudDialogflowCxV3BoostSpecConditionBoostSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDialogflowCxV3BoostSpecConditionBoostSpec();

            if (data.hasOwnProperty('boost')) {
                obj['boost'] = ApiClient.convertToType(data['boost'], 'Number');
            }
            if (data.hasOwnProperty('condition')) {
                obj['condition'] = ApiClient.convertToType(data['condition'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDialogflowCxV3BoostSpecConditionBoostSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDialogflowCxV3BoostSpecConditionBoostSpec</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['condition'] && !(typeof data['condition'] === 'string' || data['condition'] instanceof String)) {
            throw new Error("Expected the field `condition` to be a primitive type in the JSON string but got " + data['condition']);
        }

        return true;
    }


}



/**
 * Optional. Strength of the condition boost, which should be in [-1, 1]. Negative boost means demotion. Default is 0.0. Setting to 1.0 gives the document a big promotion. However, it does not necessarily mean that the boosted document will be the top result at all times, nor that other documents will be excluded. Results could still be shown even when none of them matches the condition. And results that are significantly more relevant to the search query can still trump your heavily favored but irrelevant documents. Setting to -1.0 gives the document a big demotion. However, results that are deeply relevant might still be shown. The document will have an upstream battle to get a fairly high ranking, but it is not blocked out completely. Setting to 0.0 means no boost applied. The boosting condition is ignored.
 * @member {Number} boost
 */
GoogleCloudDialogflowCxV3BoostSpecConditionBoostSpec.prototype['boost'] = undefined;

/**
 * Optional. An expression which specifies a boost condition. The syntax and supported fields are the same as a filter expression. Examples: * To boost documents with document ID \"doc_1\" or \"doc_2\", and color \"Red\" or \"Blue\": * (id: ANY(\"doc_1\", \"doc_2\")) AND (color: ANY(\"Red\",\"Blue\"))
 * @member {String} condition
 */
GoogleCloudDialogflowCxV3BoostSpecConditionBoostSpec.prototype['condition'] = undefined;






export default GoogleCloudDialogflowCxV3BoostSpecConditionBoostSpec;

