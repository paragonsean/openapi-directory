# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dialogflow_cx_v3_version_variants_variant import GoogleCloudDialogflowCxV3VersionVariantsVariant
from openapi_server import util


class GoogleCloudDialogflowCxV3VersionVariants(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, variants: List[GoogleCloudDialogflowCxV3VersionVariantsVariant]=None):
        """GoogleCloudDialogflowCxV3VersionVariants - a model defined in OpenAPI

        :param variants: The variants of this GoogleCloudDialogflowCxV3VersionVariants.
        """
        self.openapi_types = {
            'variants': List[GoogleCloudDialogflowCxV3VersionVariantsVariant]
        }

        self.attribute_map = {
            'variants': 'variants'
        }

        self._variants = variants

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowCxV3VersionVariants':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowCxV3VersionVariants of this GoogleCloudDialogflowCxV3VersionVariants.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def variants(self):
        """Gets the variants of this GoogleCloudDialogflowCxV3VersionVariants.

        A list of flow version variants.

        :return: The variants of this GoogleCloudDialogflowCxV3VersionVariants.
        :rtype: List[GoogleCloudDialogflowCxV3VersionVariantsVariant]
        """
        return self._variants

    @variants.setter
    def variants(self, variants):
        """Sets the variants of this GoogleCloudDialogflowCxV3VersionVariants.

        A list of flow version variants.

        :param variants: The variants of this GoogleCloudDialogflowCxV3VersionVariants.
        :type variants: List[GoogleCloudDialogflowCxV3VersionVariantsVariant]
        """

        self._variants = variants
