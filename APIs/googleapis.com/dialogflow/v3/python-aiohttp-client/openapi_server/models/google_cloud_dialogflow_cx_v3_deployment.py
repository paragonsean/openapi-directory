# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dialogflow_cx_v3_deployment_result import GoogleCloudDialogflowCxV3DeploymentResult
from openapi_server import util


class GoogleCloudDialogflowCxV3Deployment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, flow_version: str=None, name: str=None, result: GoogleCloudDialogflowCxV3DeploymentResult=None, start_time: str=None, state: str=None):
        """GoogleCloudDialogflowCxV3Deployment - a model defined in OpenAPI

        :param end_time: The end_time of this GoogleCloudDialogflowCxV3Deployment.
        :param flow_version: The flow_version of this GoogleCloudDialogflowCxV3Deployment.
        :param name: The name of this GoogleCloudDialogflowCxV3Deployment.
        :param result: The result of this GoogleCloudDialogflowCxV3Deployment.
        :param start_time: The start_time of this GoogleCloudDialogflowCxV3Deployment.
        :param state: The state of this GoogleCloudDialogflowCxV3Deployment.
        """
        self.openapi_types = {
            'end_time': str,
            'flow_version': str,
            'name': str,
            'result': GoogleCloudDialogflowCxV3DeploymentResult,
            'start_time': str,
            'state': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'flow_version': 'flowVersion',
            'name': 'name',
            'result': 'result',
            'start_time': 'startTime',
            'state': 'state'
        }

        self._end_time = end_time
        self._flow_version = flow_version
        self._name = name
        self._result = result
        self._start_time = start_time
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowCxV3Deployment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowCxV3Deployment of this GoogleCloudDialogflowCxV3Deployment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this GoogleCloudDialogflowCxV3Deployment.

        End time of this deployment.

        :return: The end_time of this GoogleCloudDialogflowCxV3Deployment.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GoogleCloudDialogflowCxV3Deployment.

        End time of this deployment.

        :param end_time: The end_time of this GoogleCloudDialogflowCxV3Deployment.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def flow_version(self):
        """Gets the flow_version of this GoogleCloudDialogflowCxV3Deployment.

        The name of the flow version for this deployment. Format: projects//locations//agents//flows//versions/.

        :return: The flow_version of this GoogleCloudDialogflowCxV3Deployment.
        :rtype: str
        """
        return self._flow_version

    @flow_version.setter
    def flow_version(self, flow_version):
        """Sets the flow_version of this GoogleCloudDialogflowCxV3Deployment.

        The name of the flow version for this deployment. Format: projects//locations//agents//flows//versions/.

        :param flow_version: The flow_version of this GoogleCloudDialogflowCxV3Deployment.
        :type flow_version: str
        """

        self._flow_version = flow_version

    @property
    def name(self):
        """Gets the name of this GoogleCloudDialogflowCxV3Deployment.

        The name of the deployment. Format: projects//locations//agents//environments//deployments/.

        :return: The name of this GoogleCloudDialogflowCxV3Deployment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDialogflowCxV3Deployment.

        The name of the deployment. Format: projects//locations//agents//environments//deployments/.

        :param name: The name of this GoogleCloudDialogflowCxV3Deployment.
        :type name: str
        """

        self._name = name

    @property
    def result(self):
        """Gets the result of this GoogleCloudDialogflowCxV3Deployment.


        :return: The result of this GoogleCloudDialogflowCxV3Deployment.
        :rtype: GoogleCloudDialogflowCxV3DeploymentResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this GoogleCloudDialogflowCxV3Deployment.


        :param result: The result of this GoogleCloudDialogflowCxV3Deployment.
        :type result: GoogleCloudDialogflowCxV3DeploymentResult
        """

        self._result = result

    @property
    def start_time(self):
        """Gets the start_time of this GoogleCloudDialogflowCxV3Deployment.

        Start time of this deployment.

        :return: The start_time of this GoogleCloudDialogflowCxV3Deployment.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GoogleCloudDialogflowCxV3Deployment.

        Start time of this deployment.

        :param start_time: The start_time of this GoogleCloudDialogflowCxV3Deployment.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this GoogleCloudDialogflowCxV3Deployment.

        The current state of the deployment.

        :return: The state of this GoogleCloudDialogflowCxV3Deployment.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudDialogflowCxV3Deployment.

        The current state of the deployment.

        :param state: The state of this GoogleCloudDialogflowCxV3Deployment.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "RUNNING", "SUCCEEDED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
