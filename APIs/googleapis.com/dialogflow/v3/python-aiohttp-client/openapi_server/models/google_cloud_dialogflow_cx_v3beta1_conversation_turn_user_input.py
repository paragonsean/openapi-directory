# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dialogflow_cx_v3beta1_query_input import GoogleCloudDialogflowCxV3beta1QueryInput
from openapi_server import util


class GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_sentiment_analysis: bool=None, injected_parameters: Dict[str, object]=None, input: GoogleCloudDialogflowCxV3beta1QueryInput=None, is_webhook_enabled: bool=None):
        """GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput - a model defined in OpenAPI

        :param enable_sentiment_analysis: The enable_sentiment_analysis of this GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput.
        :param injected_parameters: The injected_parameters of this GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput.
        :param input: The input of this GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput.
        :param is_webhook_enabled: The is_webhook_enabled of this GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput.
        """
        self.openapi_types = {
            'enable_sentiment_analysis': bool,
            'injected_parameters': Dict[str, object],
            'input': GoogleCloudDialogflowCxV3beta1QueryInput,
            'is_webhook_enabled': bool
        }

        self.attribute_map = {
            'enable_sentiment_analysis': 'enableSentimentAnalysis',
            'injected_parameters': 'injectedParameters',
            'input': 'input',
            'is_webhook_enabled': 'isWebhookEnabled'
        }

        self._enable_sentiment_analysis = enable_sentiment_analysis
        self._injected_parameters = injected_parameters
        self._input = input
        self._is_webhook_enabled = is_webhook_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput of this GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_sentiment_analysis(self):
        """Gets the enable_sentiment_analysis of this GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput.

        Whether sentiment analysis is enabled.

        :return: The enable_sentiment_analysis of this GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput.
        :rtype: bool
        """
        return self._enable_sentiment_analysis

    @enable_sentiment_analysis.setter
    def enable_sentiment_analysis(self, enable_sentiment_analysis):
        """Sets the enable_sentiment_analysis of this GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput.

        Whether sentiment analysis is enabled.

        :param enable_sentiment_analysis: The enable_sentiment_analysis of this GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput.
        :type enable_sentiment_analysis: bool
        """

        self._enable_sentiment_analysis = enable_sentiment_analysis

    @property
    def injected_parameters(self):
        """Gets the injected_parameters of this GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput.

        Parameters that need to be injected into the conversation during intent detection.

        :return: The injected_parameters of this GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput.
        :rtype: Dict[str, object]
        """
        return self._injected_parameters

    @injected_parameters.setter
    def injected_parameters(self, injected_parameters):
        """Sets the injected_parameters of this GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput.

        Parameters that need to be injected into the conversation during intent detection.

        :param injected_parameters: The injected_parameters of this GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput.
        :type injected_parameters: Dict[str, object]
        """

        self._injected_parameters = injected_parameters

    @property
    def input(self):
        """Gets the input of this GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput.


        :return: The input of this GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput.
        :rtype: GoogleCloudDialogflowCxV3beta1QueryInput
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput.


        :param input: The input of this GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput.
        :type input: GoogleCloudDialogflowCxV3beta1QueryInput
        """

        self._input = input

    @property
    def is_webhook_enabled(self):
        """Gets the is_webhook_enabled of this GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput.

        If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled.

        :return: The is_webhook_enabled of this GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput.
        :rtype: bool
        """
        return self._is_webhook_enabled

    @is_webhook_enabled.setter
    def is_webhook_enabled(self, is_webhook_enabled):
        """Sets the is_webhook_enabled of this GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput.

        If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled.

        :param is_webhook_enabled: The is_webhook_enabled of this GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput.
        :type is_webhook_enabled: bool
        """

        self._is_webhook_enabled = is_webhook_enabled
