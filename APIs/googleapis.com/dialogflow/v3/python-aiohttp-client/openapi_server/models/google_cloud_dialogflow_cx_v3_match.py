# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dialogflow_cx_v3_intent import GoogleCloudDialogflowCxV3Intent
from openapi_server import util


class GoogleCloudDialogflowCxV3Match(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: float=None, event: str=None, intent: GoogleCloudDialogflowCxV3Intent=None, match_type: str=None, parameters: Dict[str, object]=None, resolved_input: str=None):
        """GoogleCloudDialogflowCxV3Match - a model defined in OpenAPI

        :param confidence: The confidence of this GoogleCloudDialogflowCxV3Match.
        :param event: The event of this GoogleCloudDialogflowCxV3Match.
        :param intent: The intent of this GoogleCloudDialogflowCxV3Match.
        :param match_type: The match_type of this GoogleCloudDialogflowCxV3Match.
        :param parameters: The parameters of this GoogleCloudDialogflowCxV3Match.
        :param resolved_input: The resolved_input of this GoogleCloudDialogflowCxV3Match.
        """
        self.openapi_types = {
            'confidence': float,
            'event': str,
            'intent': GoogleCloudDialogflowCxV3Intent,
            'match_type': str,
            'parameters': Dict[str, object],
            'resolved_input': str
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'event': 'event',
            'intent': 'intent',
            'match_type': 'matchType',
            'parameters': 'parameters',
            'resolved_input': 'resolvedInput'
        }

        self._confidence = confidence
        self._event = event
        self._intent = intent
        self._match_type = match_type
        self._parameters = parameters
        self._resolved_input = resolved_input

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowCxV3Match':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowCxV3Match of this GoogleCloudDialogflowCxV3Match.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this GoogleCloudDialogflowCxV3Match.

        The confidence of this match. Values range from 0.0 (completely uncertain) to 1.0 (completely certain). This value is for informational purpose only and is only used to help match the best intent within the classification threshold. This value may change for the same end-user expression at any time due to a model retraining or change in implementation.

        :return: The confidence of this GoogleCloudDialogflowCxV3Match.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this GoogleCloudDialogflowCxV3Match.

        The confidence of this match. Values range from 0.0 (completely uncertain) to 1.0 (completely certain). This value is for informational purpose only and is only used to help match the best intent within the classification threshold. This value may change for the same end-user expression at any time due to a model retraining or change in implementation.

        :param confidence: The confidence of this GoogleCloudDialogflowCxV3Match.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def event(self):
        """Gets the event of this GoogleCloudDialogflowCxV3Match.

        The event that matched the query. Filled for `EVENT`, `NO_MATCH` and `NO_INPUT` match types.

        :return: The event of this GoogleCloudDialogflowCxV3Match.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this GoogleCloudDialogflowCxV3Match.

        The event that matched the query. Filled for `EVENT`, `NO_MATCH` and `NO_INPUT` match types.

        :param event: The event of this GoogleCloudDialogflowCxV3Match.
        :type event: str
        """

        self._event = event

    @property
    def intent(self):
        """Gets the intent of this GoogleCloudDialogflowCxV3Match.


        :return: The intent of this GoogleCloudDialogflowCxV3Match.
        :rtype: GoogleCloudDialogflowCxV3Intent
        """
        return self._intent

    @intent.setter
    def intent(self, intent):
        """Sets the intent of this GoogleCloudDialogflowCxV3Match.


        :param intent: The intent of this GoogleCloudDialogflowCxV3Match.
        :type intent: GoogleCloudDialogflowCxV3Intent
        """

        self._intent = intent

    @property
    def match_type(self):
        """Gets the match_type of this GoogleCloudDialogflowCxV3Match.

        Type of this Match.

        :return: The match_type of this GoogleCloudDialogflowCxV3Match.
        :rtype: str
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this GoogleCloudDialogflowCxV3Match.

        Type of this Match.

        :param match_type: The match_type of this GoogleCloudDialogflowCxV3Match.
        :type match_type: str
        """
        allowed_values = ["MATCH_TYPE_UNSPECIFIED", "INTENT", "DIRECT_INTENT", "PARAMETER_FILLING", "NO_MATCH", "NO_INPUT", "EVENT"]  # noqa: E501
        if match_type not in allowed_values:
            raise ValueError(
                "Invalid value for `match_type` ({0}), must be one of {1}"
                .format(match_type, allowed_values)
            )

        self._match_type = match_type

    @property
    def parameters(self):
        """Gets the parameters of this GoogleCloudDialogflowCxV3Match.

        The collection of parameters extracted from the query. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value.

        :return: The parameters of this GoogleCloudDialogflowCxV3Match.
        :rtype: Dict[str, object]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this GoogleCloudDialogflowCxV3Match.

        The collection of parameters extracted from the query. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value.

        :param parameters: The parameters of this GoogleCloudDialogflowCxV3Match.
        :type parameters: Dict[str, object]
        """

        self._parameters = parameters

    @property
    def resolved_input(self):
        """Gets the resolved_input of this GoogleCloudDialogflowCxV3Match.

        Final text input which was matched during MatchIntent. This value can be different from original input sent in request because of spelling correction or other processing.

        :return: The resolved_input of this GoogleCloudDialogflowCxV3Match.
        :rtype: str
        """
        return self._resolved_input

    @resolved_input.setter
    def resolved_input(self, resolved_input):
        """Sets the resolved_input of this GoogleCloudDialogflowCxV3Match.

        Final text input which was matched during MatchIntent. This value can be different from original input sent in request because of spelling correction or other processing.

        :param resolved_input: The resolved_input of this GoogleCloudDialogflowCxV3Match.
        :type resolved_input: str
        """

        self._resolved_input = resolved_input
