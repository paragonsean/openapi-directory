# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dialogflow_cx_v3_fulfillment_conditional_cases_case_case_content import GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContent
from openapi_server import util


class GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, case_content: List[GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContent]=None, condition: str=None):
        """GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase - a model defined in OpenAPI

        :param case_content: The case_content of this GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase.
        :param condition: The condition of this GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase.
        """
        self.openapi_types = {
            'case_content': List[GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContent],
            'condition': str
        }

        self.attribute_map = {
            'case_content': 'caseContent',
            'condition': 'condition'
        }

        self._case_content = case_content
        self._condition = condition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase of this GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def case_content(self):
        """Gets the case_content of this GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase.

        A list of case content.

        :return: The case_content of this GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase.
        :rtype: List[GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContent]
        """
        return self._case_content

    @case_content.setter
    def case_content(self, case_content):
        """Sets the case_content of this GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase.

        A list of case content.

        :param case_content: The case_content of this GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase.
        :type case_content: List[GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContent]
        """

        self._case_content = case_content

    @property
    def condition(self):
        """Gets the condition of this GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase.

        The condition to activate and select this case. Empty means the condition is always true. The condition is evaluated against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).

        :return: The condition of this GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase.

        The condition to activate and select this case. Empty means the condition is always true. The condition is evaluated against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).

        :param condition: The condition of this GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase.
        :type condition: str
        """

        self._condition = condition
