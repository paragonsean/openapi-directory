# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dialogflow_cx_v3_advanced_settings import GoogleCloudDialogflowCxV3AdvancedSettings
from openapi_server.models.google_cloud_dialogflow_cx_v3_event_handler import GoogleCloudDialogflowCxV3EventHandler
from openapi_server.models.google_cloud_dialogflow_cx_v3_knowledge_connector_settings import GoogleCloudDialogflowCxV3KnowledgeConnectorSettings
from openapi_server.models.google_cloud_dialogflow_cx_v3_nlu_settings import GoogleCloudDialogflowCxV3NluSettings
from openapi_server.models.google_cloud_dialogflow_cx_v3_transition_route import GoogleCloudDialogflowCxV3TransitionRoute
from openapi_server import util


class GoogleCloudDialogflowCxV3Flow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advanced_settings: GoogleCloudDialogflowCxV3AdvancedSettings=None, description: str=None, display_name: str=None, event_handlers: List[GoogleCloudDialogflowCxV3EventHandler]=None, knowledge_connector_settings: GoogleCloudDialogflowCxV3KnowledgeConnectorSettings=None, name: str=None, nlu_settings: GoogleCloudDialogflowCxV3NluSettings=None, transition_route_groups: List[str]=None, transition_routes: List[GoogleCloudDialogflowCxV3TransitionRoute]=None):
        """GoogleCloudDialogflowCxV3Flow - a model defined in OpenAPI

        :param advanced_settings: The advanced_settings of this GoogleCloudDialogflowCxV3Flow.
        :param description: The description of this GoogleCloudDialogflowCxV3Flow.
        :param display_name: The display_name of this GoogleCloudDialogflowCxV3Flow.
        :param event_handlers: The event_handlers of this GoogleCloudDialogflowCxV3Flow.
        :param knowledge_connector_settings: The knowledge_connector_settings of this GoogleCloudDialogflowCxV3Flow.
        :param name: The name of this GoogleCloudDialogflowCxV3Flow.
        :param nlu_settings: The nlu_settings of this GoogleCloudDialogflowCxV3Flow.
        :param transition_route_groups: The transition_route_groups of this GoogleCloudDialogflowCxV3Flow.
        :param transition_routes: The transition_routes of this GoogleCloudDialogflowCxV3Flow.
        """
        self.openapi_types = {
            'advanced_settings': GoogleCloudDialogflowCxV3AdvancedSettings,
            'description': str,
            'display_name': str,
            'event_handlers': List[GoogleCloudDialogflowCxV3EventHandler],
            'knowledge_connector_settings': GoogleCloudDialogflowCxV3KnowledgeConnectorSettings,
            'name': str,
            'nlu_settings': GoogleCloudDialogflowCxV3NluSettings,
            'transition_route_groups': List[str],
            'transition_routes': List[GoogleCloudDialogflowCxV3TransitionRoute]
        }

        self.attribute_map = {
            'advanced_settings': 'advancedSettings',
            'description': 'description',
            'display_name': 'displayName',
            'event_handlers': 'eventHandlers',
            'knowledge_connector_settings': 'knowledgeConnectorSettings',
            'name': 'name',
            'nlu_settings': 'nluSettings',
            'transition_route_groups': 'transitionRouteGroups',
            'transition_routes': 'transitionRoutes'
        }

        self._advanced_settings = advanced_settings
        self._description = description
        self._display_name = display_name
        self._event_handlers = event_handlers
        self._knowledge_connector_settings = knowledge_connector_settings
        self._name = name
        self._nlu_settings = nlu_settings
        self._transition_route_groups = transition_route_groups
        self._transition_routes = transition_routes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowCxV3Flow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowCxV3Flow of this GoogleCloudDialogflowCxV3Flow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advanced_settings(self):
        """Gets the advanced_settings of this GoogleCloudDialogflowCxV3Flow.


        :return: The advanced_settings of this GoogleCloudDialogflowCxV3Flow.
        :rtype: GoogleCloudDialogflowCxV3AdvancedSettings
        """
        return self._advanced_settings

    @advanced_settings.setter
    def advanced_settings(self, advanced_settings):
        """Sets the advanced_settings of this GoogleCloudDialogflowCxV3Flow.


        :param advanced_settings: The advanced_settings of this GoogleCloudDialogflowCxV3Flow.
        :type advanced_settings: GoogleCloudDialogflowCxV3AdvancedSettings
        """

        self._advanced_settings = advanced_settings

    @property
    def description(self):
        """Gets the description of this GoogleCloudDialogflowCxV3Flow.

        The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.

        :return: The description of this GoogleCloudDialogflowCxV3Flow.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudDialogflowCxV3Flow.

        The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.

        :param description: The description of this GoogleCloudDialogflowCxV3Flow.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudDialogflowCxV3Flow.

        Required. The human-readable name of the flow.

        :return: The display_name of this GoogleCloudDialogflowCxV3Flow.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudDialogflowCxV3Flow.

        Required. The human-readable name of the flow.

        :param display_name: The display_name of this GoogleCloudDialogflowCxV3Flow.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def event_handlers(self):
        """Gets the event_handlers of this GoogleCloudDialogflowCxV3Flow.

        A flow's event handlers serve two purposes: * They are responsible for handling events (e.g. no match, webhook errors) in the flow. * They are inherited by every page's event handlers, which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow. Unlike transition_routes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.

        :return: The event_handlers of this GoogleCloudDialogflowCxV3Flow.
        :rtype: List[GoogleCloudDialogflowCxV3EventHandler]
        """
        return self._event_handlers

    @event_handlers.setter
    def event_handlers(self, event_handlers):
        """Sets the event_handlers of this GoogleCloudDialogflowCxV3Flow.

        A flow's event handlers serve two purposes: * They are responsible for handling events (e.g. no match, webhook errors) in the flow. * They are inherited by every page's event handlers, which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow. Unlike transition_routes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.

        :param event_handlers: The event_handlers of this GoogleCloudDialogflowCxV3Flow.
        :type event_handlers: List[GoogleCloudDialogflowCxV3EventHandler]
        """

        self._event_handlers = event_handlers

    @property
    def knowledge_connector_settings(self):
        """Gets the knowledge_connector_settings of this GoogleCloudDialogflowCxV3Flow.


        :return: The knowledge_connector_settings of this GoogleCloudDialogflowCxV3Flow.
        :rtype: GoogleCloudDialogflowCxV3KnowledgeConnectorSettings
        """
        return self._knowledge_connector_settings

    @knowledge_connector_settings.setter
    def knowledge_connector_settings(self, knowledge_connector_settings):
        """Sets the knowledge_connector_settings of this GoogleCloudDialogflowCxV3Flow.


        :param knowledge_connector_settings: The knowledge_connector_settings of this GoogleCloudDialogflowCxV3Flow.
        :type knowledge_connector_settings: GoogleCloudDialogflowCxV3KnowledgeConnectorSettings
        """

        self._knowledge_connector_settings = knowledge_connector_settings

    @property
    def name(self):
        """Gets the name of this GoogleCloudDialogflowCxV3Flow.

        The unique identifier of the flow. Format: `projects//locations//agents//flows/`.

        :return: The name of this GoogleCloudDialogflowCxV3Flow.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDialogflowCxV3Flow.

        The unique identifier of the flow. Format: `projects//locations//agents//flows/`.

        :param name: The name of this GoogleCloudDialogflowCxV3Flow.
        :type name: str
        """

        self._name = name

    @property
    def nlu_settings(self):
        """Gets the nlu_settings of this GoogleCloudDialogflowCxV3Flow.


        :return: The nlu_settings of this GoogleCloudDialogflowCxV3Flow.
        :rtype: GoogleCloudDialogflowCxV3NluSettings
        """
        return self._nlu_settings

    @nlu_settings.setter
    def nlu_settings(self, nlu_settings):
        """Sets the nlu_settings of this GoogleCloudDialogflowCxV3Flow.


        :param nlu_settings: The nlu_settings of this GoogleCloudDialogflowCxV3Flow.
        :type nlu_settings: GoogleCloudDialogflowCxV3NluSettings
        """

        self._nlu_settings = nlu_settings

    @property
    def transition_route_groups(self):
        """Gets the transition_route_groups of this GoogleCloudDialogflowCxV3Flow.

        A flow's transition route group serve two purposes: * They are responsible for matching the user's first utterances in the flow. * They are inherited by every page's transition route groups. Transition route groups defined in the page have higher priority than those defined in the flow. Format:`projects//locations//agents//flows//transitionRouteGroups/` or `projects//locations//agents//transitionRouteGroups/` for agent-level groups.

        :return: The transition_route_groups of this GoogleCloudDialogflowCxV3Flow.
        :rtype: List[str]
        """
        return self._transition_route_groups

    @transition_route_groups.setter
    def transition_route_groups(self, transition_route_groups):
        """Sets the transition_route_groups of this GoogleCloudDialogflowCxV3Flow.

        A flow's transition route group serve two purposes: * They are responsible for matching the user's first utterances in the flow. * They are inherited by every page's transition route groups. Transition route groups defined in the page have higher priority than those defined in the flow. Format:`projects//locations//agents//flows//transitionRouteGroups/` or `projects//locations//agents//transitionRouteGroups/` for agent-level groups.

        :param transition_route_groups: The transition_route_groups of this GoogleCloudDialogflowCxV3Flow.
        :type transition_route_groups: List[str]
        """

        self._transition_route_groups = transition_route_groups

    @property
    def transition_routes(self):
        """Gets the transition_routes of this GoogleCloudDialogflowCxV3Flow.

        A flow's transition routes serve two purposes: * They are responsible for matching the user's first utterances in the flow. * They are inherited by every page's transition routes and can support use cases such as the user saying \"help\" or \"can I talk to a human?\", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow. TransitionRoutes are evalauted in the following order: * TransitionRoutes with intent specified. * TransitionRoutes with only condition specified. TransitionRoutes with intent specified are inherited by pages in the flow.

        :return: The transition_routes of this GoogleCloudDialogflowCxV3Flow.
        :rtype: List[GoogleCloudDialogflowCxV3TransitionRoute]
        """
        return self._transition_routes

    @transition_routes.setter
    def transition_routes(self, transition_routes):
        """Sets the transition_routes of this GoogleCloudDialogflowCxV3Flow.

        A flow's transition routes serve two purposes: * They are responsible for matching the user's first utterances in the flow. * They are inherited by every page's transition routes and can support use cases such as the user saying \"help\" or \"can I talk to a human?\", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow. TransitionRoutes are evalauted in the following order: * TransitionRoutes with intent specified. * TransitionRoutes with only condition specified. TransitionRoutes with intent specified are inherited by pages in the flow.

        :param transition_routes: The transition_routes of this GoogleCloudDialogflowCxV3Flow.
        :type transition_routes: List[GoogleCloudDialogflowCxV3TransitionRoute]
        """

        self._transition_routes = transition_routes
