/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection::OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection::OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection::~OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection() {}

void OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection::initializeModel() {

    m_data_store_isSet = false;
    m_data_store_isValid = false;

    m_data_store_type_isSet = false;
    m_data_store_type_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection::fromJsonObject(QJsonObject json) {

    m_data_store_isValid = ::OpenAPI::fromJsonValue(m_data_store, json[QString("dataStore")]);
    m_data_store_isSet = !json[QString("dataStore")].isNull() && m_data_store_isValid;

    m_data_store_type_isValid = ::OpenAPI::fromJsonValue(m_data_store_type, json[QString("dataStoreType")]);
    m_data_store_type_isSet = !json[QString("dataStoreType")].isNull() && m_data_store_type_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_data_store_isSet) {
        obj.insert(QString("dataStore"), ::OpenAPI::toJsonValue(m_data_store));
    }
    if (m_data_store_type_isSet) {
        obj.insert(QString("dataStoreType"), ::OpenAPI::toJsonValue(m_data_store_type));
    }
    return obj;
}

QString OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection::getDataStore() const {
    return m_data_store;
}
void OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection::setDataStore(const QString &data_store) {
    m_data_store = data_store;
    m_data_store_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection::is_data_store_Set() const{
    return m_data_store_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection::is_data_store_Valid() const{
    return m_data_store_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection::getDataStoreType() const {
    return m_data_store_type;
}
void OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection::setDataStoreType(const QString &data_store_type) {
    m_data_store_type = data_store_type;
    m_data_store_type_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection::is_data_store_type_Set() const{
    return m_data_store_type_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection::is_data_store_type_Valid() const{
    return m_data_store_type_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_store_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3beta1DataStoreConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
