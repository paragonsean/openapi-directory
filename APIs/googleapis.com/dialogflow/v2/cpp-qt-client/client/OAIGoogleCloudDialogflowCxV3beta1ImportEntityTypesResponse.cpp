/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse::OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse::OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse::~OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse() {}

void OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse::initializeModel() {

    m_conflicting_resources_isSet = false;
    m_conflicting_resources_isValid = false;

    m_entity_types_isSet = false;
    m_entity_types_isValid = false;
}

void OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse::fromJsonObject(QJsonObject json) {

    m_conflicting_resources_isValid = ::OpenAPI::fromJsonValue(m_conflicting_resources, json[QString("conflictingResources")]);
    m_conflicting_resources_isSet = !json[QString("conflictingResources")].isNull() && m_conflicting_resources_isValid;

    m_entity_types_isValid = ::OpenAPI::fromJsonValue(m_entity_types, json[QString("entityTypes")]);
    m_entity_types_isSet = !json[QString("entityTypes")].isNull() && m_entity_types_isValid;
}

QString OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_conflicting_resources.isSet()) {
        obj.insert(QString("conflictingResources"), ::OpenAPI::toJsonValue(m_conflicting_resources));
    }
    if (m_entity_types.size() > 0) {
        obj.insert(QString("entityTypes"), ::OpenAPI::toJsonValue(m_entity_types));
    }
    return obj;
}

OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse::getConflictingResources() const {
    return m_conflicting_resources;
}
void OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse::setConflictingResources(const OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources &conflicting_resources) {
    m_conflicting_resources = conflicting_resources;
    m_conflicting_resources_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse::is_conflicting_resources_Set() const{
    return m_conflicting_resources_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse::is_conflicting_resources_Valid() const{
    return m_conflicting_resources_isValid;
}

QList<QString> OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse::getEntityTypes() const {
    return m_entity_types;
}
void OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse::setEntityTypes(const QList<QString> &entity_types) {
    m_entity_types = entity_types;
    m_entity_types_isSet = true;
}

bool OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse::is_entity_types_Set() const{
    return m_entity_types_isSet;
}

bool OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse::is_entity_types_Valid() const{
    return m_entity_types_isValid;
}

bool OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conflicting_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowCxV3beta1ImportEntityTypesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
