/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudDialogflowCxV3WebhookGenericWebService.h
 *
 * Represents configuration for a generic web service.
 */

#ifndef OAIGoogleCloudDialogflowCxV3WebhookGenericWebService_H
#define OAIGoogleCloudDialogflowCxV3WebhookGenericWebService_H

#include <QJsonObject>

#include <QByteArray>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleCloudDialogflowCxV3WebhookGenericWebService : public OAIObject {
public:
    OAIGoogleCloudDialogflowCxV3WebhookGenericWebService();
    OAIGoogleCloudDialogflowCxV3WebhookGenericWebService(QString json);
    ~OAIGoogleCloudDialogflowCxV3WebhookGenericWebService() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QByteArray> getAllowedCaCerts() const;
    void setAllowedCaCerts(const QList<QByteArray> &allowed_ca_certs);
    bool is_allowed_ca_certs_Set() const;
    bool is_allowed_ca_certs_Valid() const;

    QString getHttpMethod() const;
    void setHttpMethod(const QString &http_method);
    bool is_http_method_Set() const;
    bool is_http_method_Valid() const;

    QMap<QString, QString> getParameterMapping() const;
    void setParameterMapping(const QMap<QString, QString> &parameter_mapping);
    bool is_parameter_mapping_Set() const;
    bool is_parameter_mapping_Valid() const;

    Q_DECL_DEPRECATED QString getPassword() const;
    Q_DECL_DEPRECATED void setPassword(const QString &password);
    Q_DECL_DEPRECATED bool is_password_Set() const;
    Q_DECL_DEPRECATED bool is_password_Valid() const;

    QString getRequestBody() const;
    void setRequestBody(const QString &request_body);
    bool is_request_body_Set() const;
    bool is_request_body_Valid() const;

    QMap<QString, QString> getRequestHeaders() const;
    void setRequestHeaders(const QMap<QString, QString> &request_headers);
    bool is_request_headers_Set() const;
    bool is_request_headers_Valid() const;

    QString getUri() const;
    void setUri(const QString &uri);
    bool is_uri_Set() const;
    bool is_uri_Valid() const;

    Q_DECL_DEPRECATED QString getUsername() const;
    Q_DECL_DEPRECATED void setUsername(const QString &username);
    Q_DECL_DEPRECATED bool is_username_Set() const;
    Q_DECL_DEPRECATED bool is_username_Valid() const;

    QString getWebhookType() const;
    void setWebhookType(const QString &webhook_type);
    bool is_webhook_type_Set() const;
    bool is_webhook_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QByteArray> m_allowed_ca_certs;
    bool m_allowed_ca_certs_isSet;
    bool m_allowed_ca_certs_isValid;

    QString m_http_method;
    bool m_http_method_isSet;
    bool m_http_method_isValid;

    QMap<QString, QString> m_parameter_mapping;
    bool m_parameter_mapping_isSet;
    bool m_parameter_mapping_isValid;

    QString m_password;
    bool m_password_isSet;
    bool m_password_isValid;

    QString m_request_body;
    bool m_request_body_isSet;
    bool m_request_body_isValid;

    QMap<QString, QString> m_request_headers;
    bool m_request_headers_isSet;
    bool m_request_headers_isValid;

    QString m_uri;
    bool m_uri_isSet;
    bool m_uri_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;

    QString m_webhook_type;
    bool m_webhook_type_isSet;
    bool m_webhook_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudDialogflowCxV3WebhookGenericWebService)

#endif // OAIGoogleCloudDialogflowCxV3WebhookGenericWebService_H
