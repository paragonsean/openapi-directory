/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowV2QueryParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowV2QueryParameters::OAIGoogleCloudDialogflowV2QueryParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowV2QueryParameters::OAIGoogleCloudDialogflowV2QueryParameters() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowV2QueryParameters::~OAIGoogleCloudDialogflowV2QueryParameters() {}

void OAIGoogleCloudDialogflowV2QueryParameters::initializeModel() {

    m_contexts_isSet = false;
    m_contexts_isValid = false;

    m_geo_location_isSet = false;
    m_geo_location_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_reset_contexts_isSet = false;
    m_reset_contexts_isValid = false;

    m_sentiment_analysis_request_config_isSet = false;
    m_sentiment_analysis_request_config_isValid = false;

    m_session_entity_types_isSet = false;
    m_session_entity_types_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_webhook_headers_isSet = false;
    m_webhook_headers_isValid = false;
}

void OAIGoogleCloudDialogflowV2QueryParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowV2QueryParameters::fromJsonObject(QJsonObject json) {

    m_contexts_isValid = ::OpenAPI::fromJsonValue(m_contexts, json[QString("contexts")]);
    m_contexts_isSet = !json[QString("contexts")].isNull() && m_contexts_isValid;

    m_geo_location_isValid = ::OpenAPI::fromJsonValue(m_geo_location, json[QString("geoLocation")]);
    m_geo_location_isSet = !json[QString("geoLocation")].isNull() && m_geo_location_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_reset_contexts_isValid = ::OpenAPI::fromJsonValue(m_reset_contexts, json[QString("resetContexts")]);
    m_reset_contexts_isSet = !json[QString("resetContexts")].isNull() && m_reset_contexts_isValid;

    m_sentiment_analysis_request_config_isValid = ::OpenAPI::fromJsonValue(m_sentiment_analysis_request_config, json[QString("sentimentAnalysisRequestConfig")]);
    m_sentiment_analysis_request_config_isSet = !json[QString("sentimentAnalysisRequestConfig")].isNull() && m_sentiment_analysis_request_config_isValid;

    m_session_entity_types_isValid = ::OpenAPI::fromJsonValue(m_session_entity_types, json[QString("sessionEntityTypes")]);
    m_session_entity_types_isSet = !json[QString("sessionEntityTypes")].isNull() && m_session_entity_types_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_webhook_headers_isValid = ::OpenAPI::fromJsonValue(m_webhook_headers, json[QString("webhookHeaders")]);
    m_webhook_headers_isSet = !json[QString("webhookHeaders")].isNull() && m_webhook_headers_isValid;
}

QString OAIGoogleCloudDialogflowV2QueryParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowV2QueryParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_contexts.size() > 0) {
        obj.insert(QString("contexts"), ::OpenAPI::toJsonValue(m_contexts));
    }
    if (m_geo_location.isSet()) {
        obj.insert(QString("geoLocation"), ::OpenAPI::toJsonValue(m_geo_location));
    }
    if (m_payload.size() > 0) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_reset_contexts_isSet) {
        obj.insert(QString("resetContexts"), ::OpenAPI::toJsonValue(m_reset_contexts));
    }
    if (m_sentiment_analysis_request_config.isSet()) {
        obj.insert(QString("sentimentAnalysisRequestConfig"), ::OpenAPI::toJsonValue(m_sentiment_analysis_request_config));
    }
    if (m_session_entity_types.size() > 0) {
        obj.insert(QString("sessionEntityTypes"), ::OpenAPI::toJsonValue(m_session_entity_types));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_webhook_headers.size() > 0) {
        obj.insert(QString("webhookHeaders"), ::OpenAPI::toJsonValue(m_webhook_headers));
    }
    return obj;
}

QList<OAIGoogleCloudDialogflowV2Context> OAIGoogleCloudDialogflowV2QueryParameters::getContexts() const {
    return m_contexts;
}
void OAIGoogleCloudDialogflowV2QueryParameters::setContexts(const QList<OAIGoogleCloudDialogflowV2Context> &contexts) {
    m_contexts = contexts;
    m_contexts_isSet = true;
}

bool OAIGoogleCloudDialogflowV2QueryParameters::is_contexts_Set() const{
    return m_contexts_isSet;
}

bool OAIGoogleCloudDialogflowV2QueryParameters::is_contexts_Valid() const{
    return m_contexts_isValid;
}

OAIGoogleTypeLatLng OAIGoogleCloudDialogflowV2QueryParameters::getGeoLocation() const {
    return m_geo_location;
}
void OAIGoogleCloudDialogflowV2QueryParameters::setGeoLocation(const OAIGoogleTypeLatLng &geo_location) {
    m_geo_location = geo_location;
    m_geo_location_isSet = true;
}

bool OAIGoogleCloudDialogflowV2QueryParameters::is_geo_location_Set() const{
    return m_geo_location_isSet;
}

bool OAIGoogleCloudDialogflowV2QueryParameters::is_geo_location_Valid() const{
    return m_geo_location_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudDialogflowV2QueryParameters::getPayload() const {
    return m_payload;
}
void OAIGoogleCloudDialogflowV2QueryParameters::setPayload(const QMap<QString, QJsonValue> &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIGoogleCloudDialogflowV2QueryParameters::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIGoogleCloudDialogflowV2QueryParameters::is_payload_Valid() const{
    return m_payload_isValid;
}

QString OAIGoogleCloudDialogflowV2QueryParameters::getPlatform() const {
    return m_platform;
}
void OAIGoogleCloudDialogflowV2QueryParameters::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIGoogleCloudDialogflowV2QueryParameters::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIGoogleCloudDialogflowV2QueryParameters::is_platform_Valid() const{
    return m_platform_isValid;
}

bool OAIGoogleCloudDialogflowV2QueryParameters::isResetContexts() const {
    return m_reset_contexts;
}
void OAIGoogleCloudDialogflowV2QueryParameters::setResetContexts(const bool &reset_contexts) {
    m_reset_contexts = reset_contexts;
    m_reset_contexts_isSet = true;
}

bool OAIGoogleCloudDialogflowV2QueryParameters::is_reset_contexts_Set() const{
    return m_reset_contexts_isSet;
}

bool OAIGoogleCloudDialogflowV2QueryParameters::is_reset_contexts_Valid() const{
    return m_reset_contexts_isValid;
}

OAIGoogleCloudDialogflowV2SentimentAnalysisRequestConfig OAIGoogleCloudDialogflowV2QueryParameters::getSentimentAnalysisRequestConfig() const {
    return m_sentiment_analysis_request_config;
}
void OAIGoogleCloudDialogflowV2QueryParameters::setSentimentAnalysisRequestConfig(const OAIGoogleCloudDialogflowV2SentimentAnalysisRequestConfig &sentiment_analysis_request_config) {
    m_sentiment_analysis_request_config = sentiment_analysis_request_config;
    m_sentiment_analysis_request_config_isSet = true;
}

bool OAIGoogleCloudDialogflowV2QueryParameters::is_sentiment_analysis_request_config_Set() const{
    return m_sentiment_analysis_request_config_isSet;
}

bool OAIGoogleCloudDialogflowV2QueryParameters::is_sentiment_analysis_request_config_Valid() const{
    return m_sentiment_analysis_request_config_isValid;
}

QList<OAIGoogleCloudDialogflowV2SessionEntityType> OAIGoogleCloudDialogflowV2QueryParameters::getSessionEntityTypes() const {
    return m_session_entity_types;
}
void OAIGoogleCloudDialogflowV2QueryParameters::setSessionEntityTypes(const QList<OAIGoogleCloudDialogflowV2SessionEntityType> &session_entity_types) {
    m_session_entity_types = session_entity_types;
    m_session_entity_types_isSet = true;
}

bool OAIGoogleCloudDialogflowV2QueryParameters::is_session_entity_types_Set() const{
    return m_session_entity_types_isSet;
}

bool OAIGoogleCloudDialogflowV2QueryParameters::is_session_entity_types_Valid() const{
    return m_session_entity_types_isValid;
}

QString OAIGoogleCloudDialogflowV2QueryParameters::getTimeZone() const {
    return m_time_zone;
}
void OAIGoogleCloudDialogflowV2QueryParameters::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIGoogleCloudDialogflowV2QueryParameters::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIGoogleCloudDialogflowV2QueryParameters::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QMap<QString, QString> OAIGoogleCloudDialogflowV2QueryParameters::getWebhookHeaders() const {
    return m_webhook_headers;
}
void OAIGoogleCloudDialogflowV2QueryParameters::setWebhookHeaders(const QMap<QString, QString> &webhook_headers) {
    m_webhook_headers = webhook_headers;
    m_webhook_headers_isSet = true;
}

bool OAIGoogleCloudDialogflowV2QueryParameters::is_webhook_headers_Set() const{
    return m_webhook_headers_isSet;
}

bool OAIGoogleCloudDialogflowV2QueryParameters::is_webhook_headers_Valid() const{
    return m_webhook_headers_isValid;
}

bool OAIGoogleCloudDialogflowV2QueryParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contexts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_contexts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_analysis_request_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_entity_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowV2QueryParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
