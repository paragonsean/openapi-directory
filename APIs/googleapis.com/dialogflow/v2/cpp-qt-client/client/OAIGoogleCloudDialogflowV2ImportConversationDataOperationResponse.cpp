/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse::OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse::OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse::~OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse() {}

void OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse::initializeModel() {

    m_conversation_dataset_isSet = false;
    m_conversation_dataset_isValid = false;

    m_import_count_isSet = false;
    m_import_count_isValid = false;
}

void OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse::fromJsonObject(QJsonObject json) {

    m_conversation_dataset_isValid = ::OpenAPI::fromJsonValue(m_conversation_dataset, json[QString("conversationDataset")]);
    m_conversation_dataset_isSet = !json[QString("conversationDataset")].isNull() && m_conversation_dataset_isValid;

    m_import_count_isValid = ::OpenAPI::fromJsonValue(m_import_count, json[QString("importCount")]);
    m_import_count_isSet = !json[QString("importCount")].isNull() && m_import_count_isValid;
}

QString OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_conversation_dataset_isSet) {
        obj.insert(QString("conversationDataset"), ::OpenAPI::toJsonValue(m_conversation_dataset));
    }
    if (m_import_count_isSet) {
        obj.insert(QString("importCount"), ::OpenAPI::toJsonValue(m_import_count));
    }
    return obj;
}

QString OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse::getConversationDataset() const {
    return m_conversation_dataset;
}
void OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse::setConversationDataset(const QString &conversation_dataset) {
    m_conversation_dataset = conversation_dataset;
    m_conversation_dataset_isSet = true;
}

bool OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse::is_conversation_dataset_Set() const{
    return m_conversation_dataset_isSet;
}

bool OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse::is_conversation_dataset_Valid() const{
    return m_conversation_dataset_isValid;
}

qint32 OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse::getImportCount() const {
    return m_import_count;
}
void OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse::setImportCount(const qint32 &import_count) {
    m_import_count = import_count;
    m_import_count_isSet = true;
}

bool OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse::is_import_count_Set() const{
    return m_import_count_isSet;
}

bool OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse::is_import_count_Valid() const{
    return m_import_count_isValid;
}

bool OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conversation_dataset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowV2ImportConversationDataOperationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
