/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowV2SmartReplyMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowV2SmartReplyMetrics::OAIGoogleCloudDialogflowV2SmartReplyMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowV2SmartReplyMetrics::OAIGoogleCloudDialogflowV2SmartReplyMetrics() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowV2SmartReplyMetrics::~OAIGoogleCloudDialogflowV2SmartReplyMetrics() {}

void OAIGoogleCloudDialogflowV2SmartReplyMetrics::initializeModel() {

    m_allowlist_coverage_isSet = false;
    m_allowlist_coverage_isValid = false;

    m_conversation_count_isSet = false;
    m_conversation_count_isValid = false;

    m_top_n_metrics_isSet = false;
    m_top_n_metrics_isValid = false;
}

void OAIGoogleCloudDialogflowV2SmartReplyMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowV2SmartReplyMetrics::fromJsonObject(QJsonObject json) {

    m_allowlist_coverage_isValid = ::OpenAPI::fromJsonValue(m_allowlist_coverage, json[QString("allowlistCoverage")]);
    m_allowlist_coverage_isSet = !json[QString("allowlistCoverage")].isNull() && m_allowlist_coverage_isValid;

    m_conversation_count_isValid = ::OpenAPI::fromJsonValue(m_conversation_count, json[QString("conversationCount")]);
    m_conversation_count_isSet = !json[QString("conversationCount")].isNull() && m_conversation_count_isValid;

    m_top_n_metrics_isValid = ::OpenAPI::fromJsonValue(m_top_n_metrics, json[QString("topNMetrics")]);
    m_top_n_metrics_isSet = !json[QString("topNMetrics")].isNull() && m_top_n_metrics_isValid;
}

QString OAIGoogleCloudDialogflowV2SmartReplyMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowV2SmartReplyMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_allowlist_coverage_isSet) {
        obj.insert(QString("allowlistCoverage"), ::OpenAPI::toJsonValue(m_allowlist_coverage));
    }
    if (m_conversation_count_isSet) {
        obj.insert(QString("conversationCount"), ::OpenAPI::toJsonValue(m_conversation_count));
    }
    if (m_top_n_metrics.size() > 0) {
        obj.insert(QString("topNMetrics"), ::OpenAPI::toJsonValue(m_top_n_metrics));
    }
    return obj;
}

float OAIGoogleCloudDialogflowV2SmartReplyMetrics::getAllowlistCoverage() const {
    return m_allowlist_coverage;
}
void OAIGoogleCloudDialogflowV2SmartReplyMetrics::setAllowlistCoverage(const float &allowlist_coverage) {
    m_allowlist_coverage = allowlist_coverage;
    m_allowlist_coverage_isSet = true;
}

bool OAIGoogleCloudDialogflowV2SmartReplyMetrics::is_allowlist_coverage_Set() const{
    return m_allowlist_coverage_isSet;
}

bool OAIGoogleCloudDialogflowV2SmartReplyMetrics::is_allowlist_coverage_Valid() const{
    return m_allowlist_coverage_isValid;
}

QString OAIGoogleCloudDialogflowV2SmartReplyMetrics::getConversationCount() const {
    return m_conversation_count;
}
void OAIGoogleCloudDialogflowV2SmartReplyMetrics::setConversationCount(const QString &conversation_count) {
    m_conversation_count = conversation_count;
    m_conversation_count_isSet = true;
}

bool OAIGoogleCloudDialogflowV2SmartReplyMetrics::is_conversation_count_Set() const{
    return m_conversation_count_isSet;
}

bool OAIGoogleCloudDialogflowV2SmartReplyMetrics::is_conversation_count_Valid() const{
    return m_conversation_count_isValid;
}

QList<OAIGoogleCloudDialogflowV2SmartReplyMetricsTopNMetrics> OAIGoogleCloudDialogflowV2SmartReplyMetrics::getTopNMetrics() const {
    return m_top_n_metrics;
}
void OAIGoogleCloudDialogflowV2SmartReplyMetrics::setTopNMetrics(const QList<OAIGoogleCloudDialogflowV2SmartReplyMetricsTopNMetrics> &top_n_metrics) {
    m_top_n_metrics = top_n_metrics;
    m_top_n_metrics_isSet = true;
}

bool OAIGoogleCloudDialogflowV2SmartReplyMetrics::is_top_n_metrics_Set() const{
    return m_top_n_metrics_isSet;
}

bool OAIGoogleCloudDialogflowV2SmartReplyMetrics::is_top_n_metrics_Valid() const{
    return m_top_n_metrics_isValid;
}

bool OAIGoogleCloudDialogflowV2SmartReplyMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowlist_coverage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_n_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowV2SmartReplyMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
