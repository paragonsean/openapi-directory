/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::~OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig() {}

void OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::initializeModel() {

    m_effects_profile_id_isSet = false;
    m_effects_profile_id_isValid = false;

    m_pitch_isSet = false;
    m_pitch_isValid = false;

    m_speaking_rate_isSet = false;
    m_speaking_rate_isValid = false;

    m_voice_isSet = false;
    m_voice_isValid = false;

    m_volume_gain_db_isSet = false;
    m_volume_gain_db_isValid = false;
}

void OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::fromJsonObject(QJsonObject json) {

    m_effects_profile_id_isValid = ::OpenAPI::fromJsonValue(m_effects_profile_id, json[QString("effectsProfileId")]);
    m_effects_profile_id_isSet = !json[QString("effectsProfileId")].isNull() && m_effects_profile_id_isValid;

    m_pitch_isValid = ::OpenAPI::fromJsonValue(m_pitch, json[QString("pitch")]);
    m_pitch_isSet = !json[QString("pitch")].isNull() && m_pitch_isValid;

    m_speaking_rate_isValid = ::OpenAPI::fromJsonValue(m_speaking_rate, json[QString("speakingRate")]);
    m_speaking_rate_isSet = !json[QString("speakingRate")].isNull() && m_speaking_rate_isValid;

    m_voice_isValid = ::OpenAPI::fromJsonValue(m_voice, json[QString("voice")]);
    m_voice_isSet = !json[QString("voice")].isNull() && m_voice_isValid;

    m_volume_gain_db_isValid = ::OpenAPI::fromJsonValue(m_volume_gain_db, json[QString("volumeGainDb")]);
    m_volume_gain_db_isSet = !json[QString("volumeGainDb")].isNull() && m_volume_gain_db_isValid;
}

QString OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_effects_profile_id.size() > 0) {
        obj.insert(QString("effectsProfileId"), ::OpenAPI::toJsonValue(m_effects_profile_id));
    }
    if (m_pitch_isSet) {
        obj.insert(QString("pitch"), ::OpenAPI::toJsonValue(m_pitch));
    }
    if (m_speaking_rate_isSet) {
        obj.insert(QString("speakingRate"), ::OpenAPI::toJsonValue(m_speaking_rate));
    }
    if (m_voice.isSet()) {
        obj.insert(QString("voice"), ::OpenAPI::toJsonValue(m_voice));
    }
    if (m_volume_gain_db_isSet) {
        obj.insert(QString("volumeGainDb"), ::OpenAPI::toJsonValue(m_volume_gain_db));
    }
    return obj;
}

QList<QString> OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::getEffectsProfileId() const {
    return m_effects_profile_id;
}
void OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::setEffectsProfileId(const QList<QString> &effects_profile_id) {
    m_effects_profile_id = effects_profile_id;
    m_effects_profile_id_isSet = true;
}

bool OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::is_effects_profile_id_Set() const{
    return m_effects_profile_id_isSet;
}

bool OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::is_effects_profile_id_Valid() const{
    return m_effects_profile_id_isValid;
}

double OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::getPitch() const {
    return m_pitch;
}
void OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::setPitch(const double &pitch) {
    m_pitch = pitch;
    m_pitch_isSet = true;
}

bool OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::is_pitch_Set() const{
    return m_pitch_isSet;
}

bool OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::is_pitch_Valid() const{
    return m_pitch_isValid;
}

double OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::getSpeakingRate() const {
    return m_speaking_rate;
}
void OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::setSpeakingRate(const double &speaking_rate) {
    m_speaking_rate = speaking_rate;
    m_speaking_rate_isSet = true;
}

bool OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::is_speaking_rate_Set() const{
    return m_speaking_rate_isSet;
}

bool OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::is_speaking_rate_Valid() const{
    return m_speaking_rate_isValid;
}

OAIGoogleCloudDialogflowV2VoiceSelectionParams OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::getVoice() const {
    return m_voice;
}
void OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::setVoice(const OAIGoogleCloudDialogflowV2VoiceSelectionParams &voice) {
    m_voice = voice;
    m_voice_isSet = true;
}

bool OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::is_voice_Set() const{
    return m_voice_isSet;
}

bool OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::is_voice_Valid() const{
    return m_voice_isValid;
}

double OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::getVolumeGainDb() const {
    return m_volume_gain_db;
}
void OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::setVolumeGainDb(const double &volume_gain_db) {
    m_volume_gain_db = volume_gain_db;
    m_volume_gain_db_isSet = true;
}

bool OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::is_volume_gain_db_Set() const{
    return m_volume_gain_db_isSet;
}

bool OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::is_volume_gain_db_Valid() const{
    return m_volume_gain_db_isValid;
}

bool OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_effects_profile_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speaking_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_gain_db_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowV2SynthesizeSpeechConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
