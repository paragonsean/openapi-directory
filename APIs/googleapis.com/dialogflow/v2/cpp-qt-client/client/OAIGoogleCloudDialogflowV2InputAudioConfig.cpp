/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowV2InputAudioConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowV2InputAudioConfig::OAIGoogleCloudDialogflowV2InputAudioConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowV2InputAudioConfig::OAIGoogleCloudDialogflowV2InputAudioConfig() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowV2InputAudioConfig::~OAIGoogleCloudDialogflowV2InputAudioConfig() {}

void OAIGoogleCloudDialogflowV2InputAudioConfig::initializeModel() {

    m_audio_encoding_isSet = false;
    m_audio_encoding_isValid = false;

    m_disable_no_speech_recognized_event_isSet = false;
    m_disable_no_speech_recognized_event_isValid = false;

    m_enable_automatic_punctuation_isSet = false;
    m_enable_automatic_punctuation_isValid = false;

    m_enable_word_info_isSet = false;
    m_enable_word_info_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_model_variant_isSet = false;
    m_model_variant_isValid = false;

    m_opt_out_conformer_model_migration_isSet = false;
    m_opt_out_conformer_model_migration_isValid = false;

    m_phrase_hints_isSet = false;
    m_phrase_hints_isValid = false;

    m_sample_rate_hertz_isSet = false;
    m_sample_rate_hertz_isValid = false;

    m_single_utterance_isSet = false;
    m_single_utterance_isValid = false;

    m_speech_contexts_isSet = false;
    m_speech_contexts_isValid = false;
}

void OAIGoogleCloudDialogflowV2InputAudioConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowV2InputAudioConfig::fromJsonObject(QJsonObject json) {

    m_audio_encoding_isValid = ::OpenAPI::fromJsonValue(m_audio_encoding, json[QString("audioEncoding")]);
    m_audio_encoding_isSet = !json[QString("audioEncoding")].isNull() && m_audio_encoding_isValid;

    m_disable_no_speech_recognized_event_isValid = ::OpenAPI::fromJsonValue(m_disable_no_speech_recognized_event, json[QString("disableNoSpeechRecognizedEvent")]);
    m_disable_no_speech_recognized_event_isSet = !json[QString("disableNoSpeechRecognizedEvent")].isNull() && m_disable_no_speech_recognized_event_isValid;

    m_enable_automatic_punctuation_isValid = ::OpenAPI::fromJsonValue(m_enable_automatic_punctuation, json[QString("enableAutomaticPunctuation")]);
    m_enable_automatic_punctuation_isSet = !json[QString("enableAutomaticPunctuation")].isNull() && m_enable_automatic_punctuation_isValid;

    m_enable_word_info_isValid = ::OpenAPI::fromJsonValue(m_enable_word_info, json[QString("enableWordInfo")]);
    m_enable_word_info_isSet = !json[QString("enableWordInfo")].isNull() && m_enable_word_info_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_model_variant_isValid = ::OpenAPI::fromJsonValue(m_model_variant, json[QString("modelVariant")]);
    m_model_variant_isSet = !json[QString("modelVariant")].isNull() && m_model_variant_isValid;

    m_opt_out_conformer_model_migration_isValid = ::OpenAPI::fromJsonValue(m_opt_out_conformer_model_migration, json[QString("optOutConformerModelMigration")]);
    m_opt_out_conformer_model_migration_isSet = !json[QString("optOutConformerModelMigration")].isNull() && m_opt_out_conformer_model_migration_isValid;

    m_phrase_hints_isValid = ::OpenAPI::fromJsonValue(m_phrase_hints, json[QString("phraseHints")]);
    m_phrase_hints_isSet = !json[QString("phraseHints")].isNull() && m_phrase_hints_isValid;

    m_sample_rate_hertz_isValid = ::OpenAPI::fromJsonValue(m_sample_rate_hertz, json[QString("sampleRateHertz")]);
    m_sample_rate_hertz_isSet = !json[QString("sampleRateHertz")].isNull() && m_sample_rate_hertz_isValid;

    m_single_utterance_isValid = ::OpenAPI::fromJsonValue(m_single_utterance, json[QString("singleUtterance")]);
    m_single_utterance_isSet = !json[QString("singleUtterance")].isNull() && m_single_utterance_isValid;

    m_speech_contexts_isValid = ::OpenAPI::fromJsonValue(m_speech_contexts, json[QString("speechContexts")]);
    m_speech_contexts_isSet = !json[QString("speechContexts")].isNull() && m_speech_contexts_isValid;
}

QString OAIGoogleCloudDialogflowV2InputAudioConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowV2InputAudioConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_encoding_isSet) {
        obj.insert(QString("audioEncoding"), ::OpenAPI::toJsonValue(m_audio_encoding));
    }
    if (m_disable_no_speech_recognized_event_isSet) {
        obj.insert(QString("disableNoSpeechRecognizedEvent"), ::OpenAPI::toJsonValue(m_disable_no_speech_recognized_event));
    }
    if (m_enable_automatic_punctuation_isSet) {
        obj.insert(QString("enableAutomaticPunctuation"), ::OpenAPI::toJsonValue(m_enable_automatic_punctuation));
    }
    if (m_enable_word_info_isSet) {
        obj.insert(QString("enableWordInfo"), ::OpenAPI::toJsonValue(m_enable_word_info));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_model_variant_isSet) {
        obj.insert(QString("modelVariant"), ::OpenAPI::toJsonValue(m_model_variant));
    }
    if (m_opt_out_conformer_model_migration_isSet) {
        obj.insert(QString("optOutConformerModelMigration"), ::OpenAPI::toJsonValue(m_opt_out_conformer_model_migration));
    }
    if (m_phrase_hints.size() > 0) {
        obj.insert(QString("phraseHints"), ::OpenAPI::toJsonValue(m_phrase_hints));
    }
    if (m_sample_rate_hertz_isSet) {
        obj.insert(QString("sampleRateHertz"), ::OpenAPI::toJsonValue(m_sample_rate_hertz));
    }
    if (m_single_utterance_isSet) {
        obj.insert(QString("singleUtterance"), ::OpenAPI::toJsonValue(m_single_utterance));
    }
    if (m_speech_contexts.size() > 0) {
        obj.insert(QString("speechContexts"), ::OpenAPI::toJsonValue(m_speech_contexts));
    }
    return obj;
}

QString OAIGoogleCloudDialogflowV2InputAudioConfig::getAudioEncoding() const {
    return m_audio_encoding;
}
void OAIGoogleCloudDialogflowV2InputAudioConfig::setAudioEncoding(const QString &audio_encoding) {
    m_audio_encoding = audio_encoding;
    m_audio_encoding_isSet = true;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_audio_encoding_Set() const{
    return m_audio_encoding_isSet;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_audio_encoding_Valid() const{
    return m_audio_encoding_isValid;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::isDisableNoSpeechRecognizedEvent() const {
    return m_disable_no_speech_recognized_event;
}
void OAIGoogleCloudDialogflowV2InputAudioConfig::setDisableNoSpeechRecognizedEvent(const bool &disable_no_speech_recognized_event) {
    m_disable_no_speech_recognized_event = disable_no_speech_recognized_event;
    m_disable_no_speech_recognized_event_isSet = true;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_disable_no_speech_recognized_event_Set() const{
    return m_disable_no_speech_recognized_event_isSet;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_disable_no_speech_recognized_event_Valid() const{
    return m_disable_no_speech_recognized_event_isValid;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::isEnableAutomaticPunctuation() const {
    return m_enable_automatic_punctuation;
}
void OAIGoogleCloudDialogflowV2InputAudioConfig::setEnableAutomaticPunctuation(const bool &enable_automatic_punctuation) {
    m_enable_automatic_punctuation = enable_automatic_punctuation;
    m_enable_automatic_punctuation_isSet = true;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_enable_automatic_punctuation_Set() const{
    return m_enable_automatic_punctuation_isSet;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_enable_automatic_punctuation_Valid() const{
    return m_enable_automatic_punctuation_isValid;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::isEnableWordInfo() const {
    return m_enable_word_info;
}
void OAIGoogleCloudDialogflowV2InputAudioConfig::setEnableWordInfo(const bool &enable_word_info) {
    m_enable_word_info = enable_word_info;
    m_enable_word_info_isSet = true;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_enable_word_info_Set() const{
    return m_enable_word_info_isSet;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_enable_word_info_Valid() const{
    return m_enable_word_info_isValid;
}

QString OAIGoogleCloudDialogflowV2InputAudioConfig::getLanguageCode() const {
    return m_language_code;
}
void OAIGoogleCloudDialogflowV2InputAudioConfig::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIGoogleCloudDialogflowV2InputAudioConfig::getModel() const {
    return m_model;
}
void OAIGoogleCloudDialogflowV2InputAudioConfig::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_model_Set() const{
    return m_model_isSet;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIGoogleCloudDialogflowV2InputAudioConfig::getModelVariant() const {
    return m_model_variant;
}
void OAIGoogleCloudDialogflowV2InputAudioConfig::setModelVariant(const QString &model_variant) {
    m_model_variant = model_variant;
    m_model_variant_isSet = true;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_model_variant_Set() const{
    return m_model_variant_isSet;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_model_variant_Valid() const{
    return m_model_variant_isValid;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::isOptOutConformerModelMigration() const {
    return m_opt_out_conformer_model_migration;
}
void OAIGoogleCloudDialogflowV2InputAudioConfig::setOptOutConformerModelMigration(const bool &opt_out_conformer_model_migration) {
    m_opt_out_conformer_model_migration = opt_out_conformer_model_migration;
    m_opt_out_conformer_model_migration_isSet = true;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_opt_out_conformer_model_migration_Set() const{
    return m_opt_out_conformer_model_migration_isSet;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_opt_out_conformer_model_migration_Valid() const{
    return m_opt_out_conformer_model_migration_isValid;
}

QList<QString> OAIGoogleCloudDialogflowV2InputAudioConfig::getPhraseHints() const {
    return m_phrase_hints;
}
void OAIGoogleCloudDialogflowV2InputAudioConfig::setPhraseHints(const QList<QString> &phrase_hints) {
    m_phrase_hints = phrase_hints;
    m_phrase_hints_isSet = true;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_phrase_hints_Set() const{
    return m_phrase_hints_isSet;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_phrase_hints_Valid() const{
    return m_phrase_hints_isValid;
}

qint32 OAIGoogleCloudDialogflowV2InputAudioConfig::getSampleRateHertz() const {
    return m_sample_rate_hertz;
}
void OAIGoogleCloudDialogflowV2InputAudioConfig::setSampleRateHertz(const qint32 &sample_rate_hertz) {
    m_sample_rate_hertz = sample_rate_hertz;
    m_sample_rate_hertz_isSet = true;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_sample_rate_hertz_Set() const{
    return m_sample_rate_hertz_isSet;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_sample_rate_hertz_Valid() const{
    return m_sample_rate_hertz_isValid;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::isSingleUtterance() const {
    return m_single_utterance;
}
void OAIGoogleCloudDialogflowV2InputAudioConfig::setSingleUtterance(const bool &single_utterance) {
    m_single_utterance = single_utterance;
    m_single_utterance_isSet = true;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_single_utterance_Set() const{
    return m_single_utterance_isSet;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_single_utterance_Valid() const{
    return m_single_utterance_isValid;
}

QList<OAIGoogleCloudDialogflowV2SpeechContext> OAIGoogleCloudDialogflowV2InputAudioConfig::getSpeechContexts() const {
    return m_speech_contexts;
}
void OAIGoogleCloudDialogflowV2InputAudioConfig::setSpeechContexts(const QList<OAIGoogleCloudDialogflowV2SpeechContext> &speech_contexts) {
    m_speech_contexts = speech_contexts;
    m_speech_contexts_isSet = true;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_speech_contexts_Set() const{
    return m_speech_contexts_isSet;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::is_speech_contexts_Valid() const{
    return m_speech_contexts_isValid;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_no_speech_recognized_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_automatic_punctuation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_word_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_variant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_out_conformer_model_migration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phrase_hints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_rate_hertz_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_utterance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speech_contexts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowV2InputAudioConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
