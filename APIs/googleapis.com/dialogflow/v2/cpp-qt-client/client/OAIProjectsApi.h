/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleCloudDialogflowV2Agent.h"
#include "OAIGoogleCloudDialogflowV2AnalyzeContentRequest.h"
#include "OAIGoogleCloudDialogflowV2AnalyzeContentResponse.h"
#include "OAIGoogleCloudDialogflowV2BatchCreateEntitiesRequest.h"
#include "OAIGoogleCloudDialogflowV2BatchDeleteEntitiesRequest.h"
#include "OAIGoogleCloudDialogflowV2BatchDeleteEntityTypesRequest.h"
#include "OAIGoogleCloudDialogflowV2BatchDeleteIntentsRequest.h"
#include "OAIGoogleCloudDialogflowV2BatchUpdateEntitiesRequest.h"
#include "OAIGoogleCloudDialogflowV2BatchUpdateEntityTypesRequest.h"
#include "OAIGoogleCloudDialogflowV2BatchUpdateIntentsRequest.h"
#include "OAIGoogleCloudDialogflowV2ClearSuggestionFeatureConfigRequest.h"
#include "OAIGoogleCloudDialogflowV2Context.h"
#include "OAIGoogleCloudDialogflowV2Conversation.h"
#include "OAIGoogleCloudDialogflowV2ConversationDataset.h"
#include "OAIGoogleCloudDialogflowV2ConversationModel.h"
#include "OAIGoogleCloudDialogflowV2ConversationProfile.h"
#include "OAIGoogleCloudDialogflowV2CreateConversationModelEvaluationRequest.h"
#include "OAIGoogleCloudDialogflowV2DetectIntentRequest.h"
#include "OAIGoogleCloudDialogflowV2DetectIntentResponse.h"
#include "OAIGoogleCloudDialogflowV2Document.h"
#include "OAIGoogleCloudDialogflowV2Environment.h"
#include "OAIGoogleCloudDialogflowV2EnvironmentHistory.h"
#include "OAIGoogleCloudDialogflowV2ExportAgentRequest.h"
#include "OAIGoogleCloudDialogflowV2ExportDocumentRequest.h"
#include "OAIGoogleCloudDialogflowV2GenerateStatelessSummaryRequest.h"
#include "OAIGoogleCloudDialogflowV2GenerateStatelessSummaryResponse.h"
#include "OAIGoogleCloudDialogflowV2ImportAgentRequest.h"
#include "OAIGoogleCloudDialogflowV2ImportConversationDataRequest.h"
#include "OAIGoogleCloudDialogflowV2ImportDocumentsRequest.h"
#include "OAIGoogleCloudDialogflowV2Intent.h"
#include "OAIGoogleCloudDialogflowV2KnowledgeBase.h"
#include "OAIGoogleCloudDialogflowV2ListAnswerRecordsResponse.h"
#include "OAIGoogleCloudDialogflowV2ListContextsResponse.h"
#include "OAIGoogleCloudDialogflowV2ListConversationDatasetsResponse.h"
#include "OAIGoogleCloudDialogflowV2ListConversationModelEvaluationsResponse.h"
#include "OAIGoogleCloudDialogflowV2ListConversationModelsResponse.h"
#include "OAIGoogleCloudDialogflowV2ListConversationProfilesResponse.h"
#include "OAIGoogleCloudDialogflowV2ListConversationsResponse.h"
#include "OAIGoogleCloudDialogflowV2ListDocumentsResponse.h"
#include "OAIGoogleCloudDialogflowV2ListEnvironmentsResponse.h"
#include "OAIGoogleCloudDialogflowV2ListIntentsResponse.h"
#include "OAIGoogleCloudDialogflowV2ListKnowledgeBasesResponse.h"
#include "OAIGoogleCloudDialogflowV2ListMessagesResponse.h"
#include "OAIGoogleCloudDialogflowV2ListParticipantsResponse.h"
#include "OAIGoogleCloudDialogflowV2ListSessionEntityTypesResponse.h"
#include "OAIGoogleCloudDialogflowV2ListVersionsResponse.h"
#include "OAIGoogleCloudDialogflowV2Participant.h"
#include "OAIGoogleCloudDialogflowV2ReloadDocumentRequest.h"
#include "OAIGoogleCloudDialogflowV2RestoreAgentRequest.h"
#include "OAIGoogleCloudDialogflowV2SearchAgentsResponse.h"
#include "OAIGoogleCloudDialogflowV2SearchKnowledgeRequest.h"
#include "OAIGoogleCloudDialogflowV2SearchKnowledgeResponse.h"
#include "OAIGoogleCloudDialogflowV2SessionEntityType.h"
#include "OAIGoogleCloudDialogflowV2SetSuggestionFeatureConfigRequest.h"
#include "OAIGoogleCloudDialogflowV2SuggestArticlesRequest.h"
#include "OAIGoogleCloudDialogflowV2SuggestArticlesResponse.h"
#include "OAIGoogleCloudDialogflowV2SuggestConversationSummaryRequest.h"
#include "OAIGoogleCloudDialogflowV2SuggestConversationSummaryResponse.h"
#include "OAIGoogleCloudDialogflowV2SuggestFaqAnswersRequest.h"
#include "OAIGoogleCloudDialogflowV2SuggestFaqAnswersResponse.h"
#include "OAIGoogleCloudDialogflowV2SuggestSmartRepliesRequest.h"
#include "OAIGoogleCloudDialogflowV2SuggestSmartRepliesResponse.h"
#include "OAIGoogleCloudDialogflowV2ValidationResult.h"
#include "OAIGoogleCloudDialogflowV2Version.h"
#include "OAIGoogleCloudLocationListLocationsResponse.h"
#include "OAIGoogleLongrunningListOperationsResponse.h"
#include "OAIGoogleLongrunningOperation.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_batch_delete_entity_types_request OAIGoogleCloudDialogflowV2BatchDeleteEntityTypesRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_entityTypes_batchDelete(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2BatchDeleteEntityTypesRequest> &oai_google_cloud_dialogflow_v2_batch_delete_entity_types_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2BatchDeleteEntityTypesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_batch_update_entity_types_request OAIGoogleCloudDialogflowV2BatchUpdateEntityTypesRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_entityTypes_batchUpdate(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2BatchUpdateEntityTypesRequest> &oai_google_cloud_dialogflow_v2_batch_update_entity_types_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2BatchUpdateEntityTypesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_batch_create_entities_request OAIGoogleCloudDialogflowV2BatchCreateEntitiesRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_entityTypes_entities_batchCreate(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2BatchCreateEntitiesRequest> &oai_google_cloud_dialogflow_v2_batch_create_entities_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2BatchCreateEntitiesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_batch_delete_entities_request OAIGoogleCloudDialogflowV2BatchDeleteEntitiesRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_entityTypes_entities_batchDelete(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2BatchDeleteEntitiesRequest> &oai_google_cloud_dialogflow_v2_batch_delete_entities_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2BatchDeleteEntitiesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_batch_update_entities_request OAIGoogleCloudDialogflowV2BatchUpdateEntitiesRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_entityTypes_entities_batchUpdate(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2BatchUpdateEntitiesRequest> &oai_google_cloud_dialogflow_v2_batch_update_entities_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2BatchUpdateEntitiesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  environment_id QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_environment OAIGoogleCloudDialogflowV2Environment [optional]
    */
    virtual void dialogflow_projects_locations_agent_environments_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2Environment> &oai_google_cloud_dialogflow_v2_environment = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2Environment>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agent_environments_getHistory(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agent_environments_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_export_agent_request OAIGoogleCloudDialogflowV2ExportAgentRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_export(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2ExportAgentRequest> &oai_google_cloud_dialogflow_v2_export_agent_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2ExportAgentRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  language_code QString [optional]
    */
    virtual void dialogflow_projects_locations_agent_getValidationResult(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_import_agent_request OAIGoogleCloudDialogflowV2ImportAgentRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_import(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2ImportAgentRequest> &oai_google_cloud_dialogflow_v2_import_agent_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2ImportAgentRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_batch_delete_intents_request OAIGoogleCloudDialogflowV2BatchDeleteIntentsRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_intents_batchDelete(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2BatchDeleteIntentsRequest> &oai_google_cloud_dialogflow_v2_batch_delete_intents_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2BatchDeleteIntentsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_batch_update_intents_request OAIGoogleCloudDialogflowV2BatchUpdateIntentsRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_intents_batchUpdate(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2BatchUpdateIntentsRequest> &oai_google_cloud_dialogflow_v2_batch_update_intents_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2BatchUpdateIntentsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  intent_view QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_intent OAIGoogleCloudDialogflowV2Intent [optional]
    */
    virtual void dialogflow_projects_locations_agent_intents_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &intent_view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2Intent> &oai_google_cloud_dialogflow_v2_intent = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2Intent>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  intent_view QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agent_intents_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &intent_view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_restore_agent_request OAIGoogleCloudDialogflowV2RestoreAgentRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_restore(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2RestoreAgentRequest> &oai_google_cloud_dialogflow_v2_restore_agent_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2RestoreAgentRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agent_search(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_context OAIGoogleCloudDialogflowV2Context [optional]
    */
    virtual void dialogflow_projects_locations_agent_sessions_contexts_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2Context> &oai_google_cloud_dialogflow_v2_context = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2Context>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agent_sessions_contexts_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void dialogflow_projects_locations_agent_sessions_deleteContexts(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_detect_intent_request OAIGoogleCloudDialogflowV2DetectIntentRequest [optional]
    */
    virtual void dialogflow_projects_locations_agent_sessions_detectIntent(const QString &session, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2DetectIntentRequest> &oai_google_cloud_dialogflow_v2_detect_intent_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2DetectIntentRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_session_entity_type OAIGoogleCloudDialogflowV2SessionEntityType [optional]
    */
    virtual void dialogflow_projects_locations_agent_sessions_entityTypes_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2SessionEntityType> &oai_google_cloud_dialogflow_v2_session_entity_type = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2SessionEntityType>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agent_sessions_entityTypes_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void dialogflow_projects_locations_agent_train(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_version OAIGoogleCloudDialogflowV2Version [optional]
    */
    virtual void dialogflow_projects_locations_agent_versions_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2Version> &oai_google_cloud_dialogflow_v2_version = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2Version>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_agent_versions_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_answerRecords_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_conversation_dataset OAIGoogleCloudDialogflowV2ConversationDataset [optional]
    */
    virtual void dialogflow_projects_locations_conversationDatasets_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2ConversationDataset> &oai_google_cloud_dialogflow_v2_conversation_dataset = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2ConversationDataset>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_import_conversation_data_request OAIGoogleCloudDialogflowV2ImportConversationDataRequest [optional]
    */
    virtual void dialogflow_projects_locations_conversationDatasets_importConversationData(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2ImportConversationDataRequest> &oai_google_cloud_dialogflow_v2_import_conversation_data_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2ImportConversationDataRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_conversationDatasets_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_conversation_model OAIGoogleCloudDialogflowV2ConversationModel [optional]
    */
    virtual void dialogflow_projects_locations_conversationModels_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2ConversationModel> &oai_google_cloud_dialogflow_v2_conversation_model = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2ConversationModel>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void dialogflow_projects_locations_conversationModels_deploy(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_create_conversation_model_evaluation_request OAIGoogleCloudDialogflowV2CreateConversationModelEvaluationRequest [optional]
    */
    virtual void dialogflow_projects_locations_conversationModels_evaluations_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2CreateConversationModelEvaluationRequest> &oai_google_cloud_dialogflow_v2_create_conversation_model_evaluation_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2CreateConversationModelEvaluationRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_conversationModels_evaluations_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_conversationModels_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void dialogflow_projects_locations_conversationModels_undeploy(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  conversation_profile QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_clear_suggestion_feature_config_request OAIGoogleCloudDialogflowV2ClearSuggestionFeatureConfigRequest [optional]
    */
    virtual void dialogflow_projects_locations_conversationProfiles_clearSuggestionFeatureConfig(const QString &conversation_profile, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2ClearSuggestionFeatureConfigRequest> &oai_google_cloud_dialogflow_v2_clear_suggestion_feature_config_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2ClearSuggestionFeatureConfigRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_conversation_profile OAIGoogleCloudDialogflowV2ConversationProfile [optional]
    */
    virtual void dialogflow_projects_locations_conversationProfiles_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2ConversationProfile> &oai_google_cloud_dialogflow_v2_conversation_profile = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2ConversationProfile>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_conversationProfiles_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conversation_profile QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_set_suggestion_feature_config_request OAIGoogleCloudDialogflowV2SetSuggestionFeatureConfigRequest [optional]
    */
    virtual void dialogflow_projects_locations_conversationProfiles_setSuggestionFeatureConfig(const QString &conversation_profile, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2SetSuggestionFeatureConfigRequest> &oai_google_cloud_dialogflow_v2_set_suggestion_feature_config_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2SetSuggestionFeatureConfigRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void dialogflow_projects_locations_conversations_complete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  conversation_id QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_conversation OAIGoogleCloudDialogflowV2Conversation [optional]
    */
    virtual void dialogflow_projects_locations_conversations_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conversation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2Conversation> &oai_google_cloud_dialogflow_v2_conversation = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2Conversation>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_conversations_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_conversations_messages_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  participant QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_analyze_content_request OAIGoogleCloudDialogflowV2AnalyzeContentRequest [optional]
    */
    virtual void dialogflow_projects_locations_conversations_participants_analyzeContent(const QString &participant, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2AnalyzeContentRequest> &oai_google_cloud_dialogflow_v2_analyze_content_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2AnalyzeContentRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_participant OAIGoogleCloudDialogflowV2Participant [optional]
    */
    virtual void dialogflow_projects_locations_conversations_participants_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2Participant> &oai_google_cloud_dialogflow_v2_participant = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2Participant>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_conversations_participants_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_suggest_articles_request OAIGoogleCloudDialogflowV2SuggestArticlesRequest [optional]
    */
    virtual void dialogflow_projects_locations_conversations_participants_suggestions_suggestArticles(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2SuggestArticlesRequest> &oai_google_cloud_dialogflow_v2_suggest_articles_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2SuggestArticlesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_suggest_faq_answers_request OAIGoogleCloudDialogflowV2SuggestFaqAnswersRequest [optional]
    */
    virtual void dialogflow_projects_locations_conversations_participants_suggestions_suggestFaqAnswers(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2SuggestFaqAnswersRequest> &oai_google_cloud_dialogflow_v2_suggest_faq_answers_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2SuggestFaqAnswersRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_suggest_smart_replies_request OAIGoogleCloudDialogflowV2SuggestSmartRepliesRequest [optional]
    */
    virtual void dialogflow_projects_locations_conversations_participants_suggestions_suggestSmartReplies(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2SuggestSmartRepliesRequest> &oai_google_cloud_dialogflow_v2_suggest_smart_replies_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2SuggestSmartRepliesRequest>());

    /**
    * @param[in]  conversation QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_search_knowledge_request OAIGoogleCloudDialogflowV2SearchKnowledgeRequest [optional]
    */
    virtual void dialogflow_projects_locations_conversations_suggestions_searchKnowledge(const QString &conversation, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2SearchKnowledgeRequest> &oai_google_cloud_dialogflow_v2_search_knowledge_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2SearchKnowledgeRequest>());

    /**
    * @param[in]  conversation QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_suggest_conversation_summary_request OAIGoogleCloudDialogflowV2SuggestConversationSummaryRequest [optional]
    */
    virtual void dialogflow_projects_locations_conversations_suggestions_suggestConversationSummary(const QString &conversation, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2SuggestConversationSummaryRequest> &oai_google_cloud_dialogflow_v2_suggest_conversation_summary_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2SuggestConversationSummaryRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void dialogflow_projects_locations_deleteAgent(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void dialogflow_projects_locations_getAgent(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_knowledge_base OAIGoogleCloudDialogflowV2KnowledgeBase [optional]
    */
    virtual void dialogflow_projects_locations_knowledgeBases_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2KnowledgeBase> &oai_google_cloud_dialogflow_v2_knowledge_base = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2KnowledgeBase>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_document OAIGoogleCloudDialogflowV2Document [optional]
    */
    virtual void dialogflow_projects_locations_knowledgeBases_documents_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2Document> &oai_google_cloud_dialogflow_v2_document = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2Document>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  force bool [optional]
    */
    virtual void dialogflow_projects_locations_knowledgeBases_documents_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_export_document_request OAIGoogleCloudDialogflowV2ExportDocumentRequest [optional]
    */
    virtual void dialogflow_projects_locations_knowledgeBases_documents_export(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2ExportDocumentRequest> &oai_google_cloud_dialogflow_v2_export_document_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2ExportDocumentRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_import_documents_request OAIGoogleCloudDialogflowV2ImportDocumentsRequest [optional]
    */
    virtual void dialogflow_projects_locations_knowledgeBases_documents_import(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2ImportDocumentsRequest> &oai_google_cloud_dialogflow_v2_import_documents_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2ImportDocumentsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_knowledgeBases_documents_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_document OAIGoogleCloudDialogflowV2Document [optional]
    */
    virtual void dialogflow_projects_locations_knowledgeBases_documents_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2Document> &oai_google_cloud_dialogflow_v2_document = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2Document>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_reload_document_request OAIGoogleCloudDialogflowV2ReloadDocumentRequest [optional]
    */
    virtual void dialogflow_projects_locations_knowledgeBases_documents_reload(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2ReloadDocumentRequest> &oai_google_cloud_dialogflow_v2_reload_document_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2ReloadDocumentRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_knowledgeBases_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_locations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_agent OAIGoogleCloudDialogflowV2Agent [optional]
    */
    virtual void dialogflow_projects_locations_setAgent(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2Agent> &oai_google_cloud_dialogflow_v2_agent = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2Agent>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void dialogflow_projects_operations_cancel(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  intent_view QString [optional]
    * @param[in]  language_code QString [optional]
    */
    virtual void dialogflow_projects_operations_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &intent_view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void dialogflow_projects_operations_list(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_generate_stateless_summary_request OAIGoogleCloudDialogflowV2GenerateStatelessSummaryRequest [optional]
    */
    virtual void dialogflow_projects_suggestions_generateStatelessSummary(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2GenerateStatelessSummaryRequest> &oai_google_cloud_dialogflow_v2_generate_stateless_summary_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2GenerateStatelessSummaryRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_dialogflow_v2_search_knowledge_request OAIGoogleCloudDialogflowV2SearchKnowledgeRequest [optional]
    */
    virtual void dialogflow_projects_suggestions_searchKnowledge(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2SearchKnowledgeRequest> &oai_google_cloud_dialogflow_v2_search_knowledge_request = ::OpenAPI::OptionalParam<OAIGoogleCloudDialogflowV2SearchKnowledgeRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dialogflow_projects_locations_agent_entityTypes_batchDeleteCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_entityTypes_batchUpdateCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchCreateCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchDeleteCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchUpdateCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_environments_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_environments_getHistoryCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_environments_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_exportCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_getValidationResultCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_importCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_intents_batchDeleteCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_intents_batchUpdateCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_intents_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_intents_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_restoreCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_searchCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_sessions_contexts_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_sessions_contexts_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_sessions_deleteContextsCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_sessions_detectIntentCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_sessions_entityTypes_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_sessions_entityTypes_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_trainCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_versions_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_agent_versions_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_answerRecords_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversationDatasets_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversationDatasets_importConversationDataCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversationDatasets_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversationModels_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversationModels_deployCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversationModels_evaluations_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversationModels_evaluations_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversationModels_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversationModels_undeployCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversationProfiles_clearSuggestionFeatureConfigCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversationProfiles_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversationProfiles_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversationProfiles_setSuggestionFeatureConfigCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_completeCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_messages_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_participants_analyzeContentCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_participants_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_participants_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestArticlesCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestFaqAnswersCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestSmartRepliesCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_suggestions_searchKnowledgeCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_conversations_suggestions_suggestConversationSummaryCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_deleteAgentCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_getAgentCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_knowledgeBases_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_knowledgeBases_documents_createCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_knowledgeBases_documents_deleteCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_knowledgeBases_documents_exportCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_knowledgeBases_documents_importCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_knowledgeBases_documents_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_knowledgeBases_documents_patchCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_knowledgeBases_documents_reloadCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_knowledgeBases_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_locations_setAgentCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_operations_cancelCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_operations_getCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_operations_listCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_suggestions_generateStatelessSummaryCallback(OAIHttpRequestWorker *worker);
    void dialogflow_projects_suggestions_searchKnowledgeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dialogflow_projects_locations_agent_entityTypes_batchDeleteSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_entityTypes_batchUpdateSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchCreateSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchDeleteSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchUpdateSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_environments_createSignal(OAIGoogleCloudDialogflowV2Environment summary);
    void dialogflow_projects_locations_agent_environments_getHistorySignal(OAIGoogleCloudDialogflowV2EnvironmentHistory summary);
    void dialogflow_projects_locations_agent_environments_listSignal(OAIGoogleCloudDialogflowV2ListEnvironmentsResponse summary);
    void dialogflow_projects_locations_agent_exportSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_getValidationResultSignal(OAIGoogleCloudDialogflowV2ValidationResult summary);
    void dialogflow_projects_locations_agent_importSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_intents_batchDeleteSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_intents_batchUpdateSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_intents_createSignal(OAIGoogleCloudDialogflowV2Intent summary);
    void dialogflow_projects_locations_agent_intents_listSignal(OAIGoogleCloudDialogflowV2ListIntentsResponse summary);
    void dialogflow_projects_locations_agent_restoreSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_searchSignal(OAIGoogleCloudDialogflowV2SearchAgentsResponse summary);
    void dialogflow_projects_locations_agent_sessions_contexts_createSignal(OAIGoogleCloudDialogflowV2Context summary);
    void dialogflow_projects_locations_agent_sessions_contexts_listSignal(OAIGoogleCloudDialogflowV2ListContextsResponse summary);
    void dialogflow_projects_locations_agent_sessions_deleteContextsSignal(OAIObject summary);
    void dialogflow_projects_locations_agent_sessions_detectIntentSignal(OAIGoogleCloudDialogflowV2DetectIntentResponse summary);
    void dialogflow_projects_locations_agent_sessions_entityTypes_createSignal(OAIGoogleCloudDialogflowV2SessionEntityType summary);
    void dialogflow_projects_locations_agent_sessions_entityTypes_listSignal(OAIGoogleCloudDialogflowV2ListSessionEntityTypesResponse summary);
    void dialogflow_projects_locations_agent_trainSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_versions_createSignal(OAIGoogleCloudDialogflowV2Version summary);
    void dialogflow_projects_locations_agent_versions_listSignal(OAIGoogleCloudDialogflowV2ListVersionsResponse summary);
    void dialogflow_projects_locations_answerRecords_listSignal(OAIGoogleCloudDialogflowV2ListAnswerRecordsResponse summary);
    void dialogflow_projects_locations_conversationDatasets_createSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_conversationDatasets_importConversationDataSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_conversationDatasets_listSignal(OAIGoogleCloudDialogflowV2ListConversationDatasetsResponse summary);
    void dialogflow_projects_locations_conversationModels_createSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_conversationModels_deploySignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_conversationModels_evaluations_createSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_conversationModels_evaluations_listSignal(OAIGoogleCloudDialogflowV2ListConversationModelEvaluationsResponse summary);
    void dialogflow_projects_locations_conversationModels_listSignal(OAIGoogleCloudDialogflowV2ListConversationModelsResponse summary);
    void dialogflow_projects_locations_conversationModels_undeploySignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_conversationProfiles_clearSuggestionFeatureConfigSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_conversationProfiles_createSignal(OAIGoogleCloudDialogflowV2ConversationProfile summary);
    void dialogflow_projects_locations_conversationProfiles_listSignal(OAIGoogleCloudDialogflowV2ListConversationProfilesResponse summary);
    void dialogflow_projects_locations_conversationProfiles_setSuggestionFeatureConfigSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_conversations_completeSignal(OAIGoogleCloudDialogflowV2Conversation summary);
    void dialogflow_projects_locations_conversations_createSignal(OAIGoogleCloudDialogflowV2Conversation summary);
    void dialogflow_projects_locations_conversations_listSignal(OAIGoogleCloudDialogflowV2ListConversationsResponse summary);
    void dialogflow_projects_locations_conversations_messages_listSignal(OAIGoogleCloudDialogflowV2ListMessagesResponse summary);
    void dialogflow_projects_locations_conversations_participants_analyzeContentSignal(OAIGoogleCloudDialogflowV2AnalyzeContentResponse summary);
    void dialogflow_projects_locations_conversations_participants_createSignal(OAIGoogleCloudDialogflowV2Participant summary);
    void dialogflow_projects_locations_conversations_participants_listSignal(OAIGoogleCloudDialogflowV2ListParticipantsResponse summary);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestArticlesSignal(OAIGoogleCloudDialogflowV2SuggestArticlesResponse summary);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestFaqAnswersSignal(OAIGoogleCloudDialogflowV2SuggestFaqAnswersResponse summary);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestSmartRepliesSignal(OAIGoogleCloudDialogflowV2SuggestSmartRepliesResponse summary);
    void dialogflow_projects_locations_conversations_suggestions_searchKnowledgeSignal(OAIGoogleCloudDialogflowV2SearchKnowledgeResponse summary);
    void dialogflow_projects_locations_conversations_suggestions_suggestConversationSummarySignal(OAIGoogleCloudDialogflowV2SuggestConversationSummaryResponse summary);
    void dialogflow_projects_locations_deleteAgentSignal(OAIObject summary);
    void dialogflow_projects_locations_getAgentSignal(OAIGoogleCloudDialogflowV2Agent summary);
    void dialogflow_projects_locations_knowledgeBases_createSignal(OAIGoogleCloudDialogflowV2KnowledgeBase summary);
    void dialogflow_projects_locations_knowledgeBases_documents_createSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_documents_deleteSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_documents_exportSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_documents_importSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_documents_listSignal(OAIGoogleCloudDialogflowV2ListDocumentsResponse summary);
    void dialogflow_projects_locations_knowledgeBases_documents_patchSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_documents_reloadSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_listSignal(OAIGoogleCloudDialogflowV2ListKnowledgeBasesResponse summary);
    void dialogflow_projects_locations_listSignal(OAIGoogleCloudLocationListLocationsResponse summary);
    void dialogflow_projects_locations_setAgentSignal(OAIGoogleCloudDialogflowV2Agent summary);
    void dialogflow_projects_operations_cancelSignal(OAIObject summary);
    void dialogflow_projects_operations_getSignal(OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_operations_listSignal(OAIGoogleLongrunningListOperationsResponse summary);
    void dialogflow_projects_suggestions_generateStatelessSummarySignal(OAIGoogleCloudDialogflowV2GenerateStatelessSummaryResponse summary);
    void dialogflow_projects_suggestions_searchKnowledgeSignal(OAIGoogleCloudDialogflowV2SearchKnowledgeResponse summary);


    void dialogflow_projects_locations_agent_entityTypes_batchDeleteSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_entityTypes_batchUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchCreateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchDeleteSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_environments_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2Environment summary);
    void dialogflow_projects_locations_agent_environments_getHistorySignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2EnvironmentHistory summary);
    void dialogflow_projects_locations_agent_environments_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2ListEnvironmentsResponse summary);
    void dialogflow_projects_locations_agent_exportSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_getValidationResultSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2ValidationResult summary);
    void dialogflow_projects_locations_agent_importSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_intents_batchDeleteSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_intents_batchUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_intents_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2Intent summary);
    void dialogflow_projects_locations_agent_intents_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2ListIntentsResponse summary);
    void dialogflow_projects_locations_agent_restoreSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_searchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2SearchAgentsResponse summary);
    void dialogflow_projects_locations_agent_sessions_contexts_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2Context summary);
    void dialogflow_projects_locations_agent_sessions_contexts_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2ListContextsResponse summary);
    void dialogflow_projects_locations_agent_sessions_deleteContextsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void dialogflow_projects_locations_agent_sessions_detectIntentSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2DetectIntentResponse summary);
    void dialogflow_projects_locations_agent_sessions_entityTypes_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2SessionEntityType summary);
    void dialogflow_projects_locations_agent_sessions_entityTypes_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2ListSessionEntityTypesResponse summary);
    void dialogflow_projects_locations_agent_trainSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_agent_versions_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2Version summary);
    void dialogflow_projects_locations_agent_versions_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2ListVersionsResponse summary);
    void dialogflow_projects_locations_answerRecords_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2ListAnswerRecordsResponse summary);
    void dialogflow_projects_locations_conversationDatasets_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_conversationDatasets_importConversationDataSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_conversationDatasets_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2ListConversationDatasetsResponse summary);
    void dialogflow_projects_locations_conversationModels_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_conversationModels_deploySignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_conversationModels_evaluations_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_conversationModels_evaluations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2ListConversationModelEvaluationsResponse summary);
    void dialogflow_projects_locations_conversationModels_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2ListConversationModelsResponse summary);
    void dialogflow_projects_locations_conversationModels_undeploySignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_conversationProfiles_clearSuggestionFeatureConfigSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_conversationProfiles_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2ConversationProfile summary);
    void dialogflow_projects_locations_conversationProfiles_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2ListConversationProfilesResponse summary);
    void dialogflow_projects_locations_conversationProfiles_setSuggestionFeatureConfigSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_conversations_completeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2Conversation summary);
    void dialogflow_projects_locations_conversations_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2Conversation summary);
    void dialogflow_projects_locations_conversations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2ListConversationsResponse summary);
    void dialogflow_projects_locations_conversations_messages_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2ListMessagesResponse summary);
    void dialogflow_projects_locations_conversations_participants_analyzeContentSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2AnalyzeContentResponse summary);
    void dialogflow_projects_locations_conversations_participants_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2Participant summary);
    void dialogflow_projects_locations_conversations_participants_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2ListParticipantsResponse summary);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestArticlesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2SuggestArticlesResponse summary);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestFaqAnswersSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2SuggestFaqAnswersResponse summary);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestSmartRepliesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2SuggestSmartRepliesResponse summary);
    void dialogflow_projects_locations_conversations_suggestions_searchKnowledgeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2SearchKnowledgeResponse summary);
    void dialogflow_projects_locations_conversations_suggestions_suggestConversationSummarySignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2SuggestConversationSummaryResponse summary);
    void dialogflow_projects_locations_deleteAgentSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void dialogflow_projects_locations_getAgentSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2Agent summary);
    void dialogflow_projects_locations_knowledgeBases_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2KnowledgeBase summary);
    void dialogflow_projects_locations_knowledgeBases_documents_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_documents_deleteSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_documents_exportSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_documents_importSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_documents_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2ListDocumentsResponse summary);
    void dialogflow_projects_locations_knowledgeBases_documents_patchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_documents_reloadSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_locations_knowledgeBases_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2ListKnowledgeBasesResponse summary);
    void dialogflow_projects_locations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudLocationListLocationsResponse summary);
    void dialogflow_projects_locations_setAgentSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2Agent summary);
    void dialogflow_projects_operations_cancelSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void dialogflow_projects_operations_getSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void dialogflow_projects_operations_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningListOperationsResponse summary);
    void dialogflow_projects_suggestions_generateStatelessSummarySignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2GenerateStatelessSummaryResponse summary);
    void dialogflow_projects_suggestions_searchKnowledgeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudDialogflowV2SearchKnowledgeResponse summary);

    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_entityTypes_batchDeleteSignalError() instead")
    void dialogflow_projects_locations_agent_entityTypes_batchDeleteSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_entityTypes_batchDeleteSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_entityTypes_batchUpdateSignalError() instead")
    void dialogflow_projects_locations_agent_entityTypes_batchUpdateSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_entityTypes_batchUpdateSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_entityTypes_entities_batchCreateSignalError() instead")
    void dialogflow_projects_locations_agent_entityTypes_entities_batchCreateSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchCreateSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_entityTypes_entities_batchDeleteSignalError() instead")
    void dialogflow_projects_locations_agent_entityTypes_entities_batchDeleteSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchDeleteSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_entityTypes_entities_batchUpdateSignalError() instead")
    void dialogflow_projects_locations_agent_entityTypes_entities_batchUpdateSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchUpdateSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_environments_createSignalError() instead")
    void dialogflow_projects_locations_agent_environments_createSignalE(OAIGoogleCloudDialogflowV2Environment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_environments_createSignalError(OAIGoogleCloudDialogflowV2Environment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_environments_getHistorySignalError() instead")
    void dialogflow_projects_locations_agent_environments_getHistorySignalE(OAIGoogleCloudDialogflowV2EnvironmentHistory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_environments_getHistorySignalError(OAIGoogleCloudDialogflowV2EnvironmentHistory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_environments_listSignalError() instead")
    void dialogflow_projects_locations_agent_environments_listSignalE(OAIGoogleCloudDialogflowV2ListEnvironmentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_environments_listSignalError(OAIGoogleCloudDialogflowV2ListEnvironmentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_exportSignalError() instead")
    void dialogflow_projects_locations_agent_exportSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_exportSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_getValidationResultSignalError() instead")
    void dialogflow_projects_locations_agent_getValidationResultSignalE(OAIGoogleCloudDialogflowV2ValidationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_getValidationResultSignalError(OAIGoogleCloudDialogflowV2ValidationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_importSignalError() instead")
    void dialogflow_projects_locations_agent_importSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_importSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_intents_batchDeleteSignalError() instead")
    void dialogflow_projects_locations_agent_intents_batchDeleteSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_intents_batchDeleteSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_intents_batchUpdateSignalError() instead")
    void dialogflow_projects_locations_agent_intents_batchUpdateSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_intents_batchUpdateSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_intents_createSignalError() instead")
    void dialogflow_projects_locations_agent_intents_createSignalE(OAIGoogleCloudDialogflowV2Intent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_intents_createSignalError(OAIGoogleCloudDialogflowV2Intent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_intents_listSignalError() instead")
    void dialogflow_projects_locations_agent_intents_listSignalE(OAIGoogleCloudDialogflowV2ListIntentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_intents_listSignalError(OAIGoogleCloudDialogflowV2ListIntentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_restoreSignalError() instead")
    void dialogflow_projects_locations_agent_restoreSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_restoreSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_searchSignalError() instead")
    void dialogflow_projects_locations_agent_searchSignalE(OAIGoogleCloudDialogflowV2SearchAgentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_searchSignalError(OAIGoogleCloudDialogflowV2SearchAgentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_contexts_createSignalError() instead")
    void dialogflow_projects_locations_agent_sessions_contexts_createSignalE(OAIGoogleCloudDialogflowV2Context summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_contexts_createSignalError(OAIGoogleCloudDialogflowV2Context summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_contexts_listSignalError() instead")
    void dialogflow_projects_locations_agent_sessions_contexts_listSignalE(OAIGoogleCloudDialogflowV2ListContextsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_contexts_listSignalError(OAIGoogleCloudDialogflowV2ListContextsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_deleteContextsSignalError() instead")
    void dialogflow_projects_locations_agent_sessions_deleteContextsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_deleteContextsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_detectIntentSignalError() instead")
    void dialogflow_projects_locations_agent_sessions_detectIntentSignalE(OAIGoogleCloudDialogflowV2DetectIntentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_detectIntentSignalError(OAIGoogleCloudDialogflowV2DetectIntentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_entityTypes_createSignalError() instead")
    void dialogflow_projects_locations_agent_sessions_entityTypes_createSignalE(OAIGoogleCloudDialogflowV2SessionEntityType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_entityTypes_createSignalError(OAIGoogleCloudDialogflowV2SessionEntityType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_entityTypes_listSignalError() instead")
    void dialogflow_projects_locations_agent_sessions_entityTypes_listSignalE(OAIGoogleCloudDialogflowV2ListSessionEntityTypesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_entityTypes_listSignalError(OAIGoogleCloudDialogflowV2ListSessionEntityTypesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_trainSignalError() instead")
    void dialogflow_projects_locations_agent_trainSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_trainSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_versions_createSignalError() instead")
    void dialogflow_projects_locations_agent_versions_createSignalE(OAIGoogleCloudDialogflowV2Version summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_versions_createSignalError(OAIGoogleCloudDialogflowV2Version summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_versions_listSignalError() instead")
    void dialogflow_projects_locations_agent_versions_listSignalE(OAIGoogleCloudDialogflowV2ListVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_versions_listSignalError(OAIGoogleCloudDialogflowV2ListVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_answerRecords_listSignalError() instead")
    void dialogflow_projects_locations_answerRecords_listSignalE(OAIGoogleCloudDialogflowV2ListAnswerRecordsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_answerRecords_listSignalError(OAIGoogleCloudDialogflowV2ListAnswerRecordsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationDatasets_createSignalError() instead")
    void dialogflow_projects_locations_conversationDatasets_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationDatasets_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationDatasets_importConversationDataSignalError() instead")
    void dialogflow_projects_locations_conversationDatasets_importConversationDataSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationDatasets_importConversationDataSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationDatasets_listSignalError() instead")
    void dialogflow_projects_locations_conversationDatasets_listSignalE(OAIGoogleCloudDialogflowV2ListConversationDatasetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationDatasets_listSignalError(OAIGoogleCloudDialogflowV2ListConversationDatasetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationModels_createSignalError() instead")
    void dialogflow_projects_locations_conversationModels_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationModels_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationModels_deploySignalError() instead")
    void dialogflow_projects_locations_conversationModels_deploySignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationModels_deploySignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationModels_evaluations_createSignalError() instead")
    void dialogflow_projects_locations_conversationModels_evaluations_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationModels_evaluations_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationModels_evaluations_listSignalError() instead")
    void dialogflow_projects_locations_conversationModels_evaluations_listSignalE(OAIGoogleCloudDialogflowV2ListConversationModelEvaluationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationModels_evaluations_listSignalError(OAIGoogleCloudDialogflowV2ListConversationModelEvaluationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationModels_listSignalError() instead")
    void dialogflow_projects_locations_conversationModels_listSignalE(OAIGoogleCloudDialogflowV2ListConversationModelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationModels_listSignalError(OAIGoogleCloudDialogflowV2ListConversationModelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationModels_undeploySignalError() instead")
    void dialogflow_projects_locations_conversationModels_undeploySignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationModels_undeploySignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationProfiles_clearSuggestionFeatureConfigSignalError() instead")
    void dialogflow_projects_locations_conversationProfiles_clearSuggestionFeatureConfigSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationProfiles_clearSuggestionFeatureConfigSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationProfiles_createSignalError() instead")
    void dialogflow_projects_locations_conversationProfiles_createSignalE(OAIGoogleCloudDialogflowV2ConversationProfile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationProfiles_createSignalError(OAIGoogleCloudDialogflowV2ConversationProfile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationProfiles_listSignalError() instead")
    void dialogflow_projects_locations_conversationProfiles_listSignalE(OAIGoogleCloudDialogflowV2ListConversationProfilesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationProfiles_listSignalError(OAIGoogleCloudDialogflowV2ListConversationProfilesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationProfiles_setSuggestionFeatureConfigSignalError() instead")
    void dialogflow_projects_locations_conversationProfiles_setSuggestionFeatureConfigSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationProfiles_setSuggestionFeatureConfigSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_completeSignalError() instead")
    void dialogflow_projects_locations_conversations_completeSignalE(OAIGoogleCloudDialogflowV2Conversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_completeSignalError(OAIGoogleCloudDialogflowV2Conversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_createSignalError() instead")
    void dialogflow_projects_locations_conversations_createSignalE(OAIGoogleCloudDialogflowV2Conversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_createSignalError(OAIGoogleCloudDialogflowV2Conversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_listSignalError() instead")
    void dialogflow_projects_locations_conversations_listSignalE(OAIGoogleCloudDialogflowV2ListConversationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_listSignalError(OAIGoogleCloudDialogflowV2ListConversationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_messages_listSignalError() instead")
    void dialogflow_projects_locations_conversations_messages_listSignalE(OAIGoogleCloudDialogflowV2ListMessagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_messages_listSignalError(OAIGoogleCloudDialogflowV2ListMessagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_analyzeContentSignalError() instead")
    void dialogflow_projects_locations_conversations_participants_analyzeContentSignalE(OAIGoogleCloudDialogflowV2AnalyzeContentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_analyzeContentSignalError(OAIGoogleCloudDialogflowV2AnalyzeContentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_createSignalError() instead")
    void dialogflow_projects_locations_conversations_participants_createSignalE(OAIGoogleCloudDialogflowV2Participant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_createSignalError(OAIGoogleCloudDialogflowV2Participant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_listSignalError() instead")
    void dialogflow_projects_locations_conversations_participants_listSignalE(OAIGoogleCloudDialogflowV2ListParticipantsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_listSignalError(OAIGoogleCloudDialogflowV2ListParticipantsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_suggestions_suggestArticlesSignalError() instead")
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestArticlesSignalE(OAIGoogleCloudDialogflowV2SuggestArticlesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestArticlesSignalError(OAIGoogleCloudDialogflowV2SuggestArticlesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_suggestions_suggestFaqAnswersSignalError() instead")
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestFaqAnswersSignalE(OAIGoogleCloudDialogflowV2SuggestFaqAnswersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestFaqAnswersSignalError(OAIGoogleCloudDialogflowV2SuggestFaqAnswersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_suggestions_suggestSmartRepliesSignalError() instead")
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestSmartRepliesSignalE(OAIGoogleCloudDialogflowV2SuggestSmartRepliesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestSmartRepliesSignalError(OAIGoogleCloudDialogflowV2SuggestSmartRepliesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_suggestions_searchKnowledgeSignalError() instead")
    void dialogflow_projects_locations_conversations_suggestions_searchKnowledgeSignalE(OAIGoogleCloudDialogflowV2SearchKnowledgeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_suggestions_searchKnowledgeSignalError(OAIGoogleCloudDialogflowV2SearchKnowledgeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_suggestions_suggestConversationSummarySignalError() instead")
    void dialogflow_projects_locations_conversations_suggestions_suggestConversationSummarySignalE(OAIGoogleCloudDialogflowV2SuggestConversationSummaryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_suggestions_suggestConversationSummarySignalError(OAIGoogleCloudDialogflowV2SuggestConversationSummaryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_deleteAgentSignalError() instead")
    void dialogflow_projects_locations_deleteAgentSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_deleteAgentSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_getAgentSignalError() instead")
    void dialogflow_projects_locations_getAgentSignalE(OAIGoogleCloudDialogflowV2Agent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_getAgentSignalError(OAIGoogleCloudDialogflowV2Agent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_createSignalError() instead")
    void dialogflow_projects_locations_knowledgeBases_createSignalE(OAIGoogleCloudDialogflowV2KnowledgeBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_createSignalError(OAIGoogleCloudDialogflowV2KnowledgeBase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_createSignalError() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_deleteSignalError() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_deleteSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_deleteSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_exportSignalError() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_exportSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_exportSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_importSignalError() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_importSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_importSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_listSignalError() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_listSignalE(OAIGoogleCloudDialogflowV2ListDocumentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_listSignalError(OAIGoogleCloudDialogflowV2ListDocumentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_patchSignalError() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_patchSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_patchSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_reloadSignalError() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_reloadSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_reloadSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_listSignalError() instead")
    void dialogflow_projects_locations_knowledgeBases_listSignalE(OAIGoogleCloudDialogflowV2ListKnowledgeBasesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_listSignalError(OAIGoogleCloudDialogflowV2ListKnowledgeBasesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_listSignalError() instead")
    void dialogflow_projects_locations_listSignalE(OAIGoogleCloudLocationListLocationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_listSignalError(OAIGoogleCloudLocationListLocationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_setAgentSignalError() instead")
    void dialogflow_projects_locations_setAgentSignalE(OAIGoogleCloudDialogflowV2Agent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_setAgentSignalError(OAIGoogleCloudDialogflowV2Agent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_operations_cancelSignalError() instead")
    void dialogflow_projects_operations_cancelSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_operations_cancelSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_operations_getSignalError() instead")
    void dialogflow_projects_operations_getSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_operations_getSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_operations_listSignalError() instead")
    void dialogflow_projects_operations_listSignalE(OAIGoogleLongrunningListOperationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_operations_listSignalError(OAIGoogleLongrunningListOperationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_suggestions_generateStatelessSummarySignalError() instead")
    void dialogflow_projects_suggestions_generateStatelessSummarySignalE(OAIGoogleCloudDialogflowV2GenerateStatelessSummaryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_suggestions_generateStatelessSummarySignalError(OAIGoogleCloudDialogflowV2GenerateStatelessSummaryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_suggestions_searchKnowledgeSignalError() instead")
    void dialogflow_projects_suggestions_searchKnowledgeSignalE(OAIGoogleCloudDialogflowV2SearchKnowledgeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_suggestions_searchKnowledgeSignalError(OAIGoogleCloudDialogflowV2SearchKnowledgeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_entityTypes_batchDeleteSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_entityTypes_batchDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_entityTypes_batchDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_entityTypes_batchUpdateSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_entityTypes_batchUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_entityTypes_batchUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_entityTypes_entities_batchCreateSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_entityTypes_entities_batchCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_entityTypes_entities_batchDeleteSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_entityTypes_entities_batchDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_entityTypes_entities_batchUpdateSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_entityTypes_entities_batchUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_entityTypes_entities_batchUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_environments_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_environments_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_environments_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_environments_getHistorySignalErrorFull() instead")
    void dialogflow_projects_locations_agent_environments_getHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_environments_getHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_environments_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_environments_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_environments_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_exportSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_exportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_exportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_getValidationResultSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_getValidationResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_getValidationResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_importSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_intents_batchDeleteSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_intents_batchDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_intents_batchDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_intents_batchUpdateSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_intents_batchUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_intents_batchUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_intents_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_intents_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_intents_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_intents_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_intents_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_intents_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_restoreSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_restoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_restoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_searchSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_contexts_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_sessions_contexts_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_contexts_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_contexts_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_sessions_contexts_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_contexts_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_deleteContextsSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_sessions_deleteContextsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_deleteContextsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_detectIntentSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_sessions_detectIntentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_detectIntentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_entityTypes_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_sessions_entityTypes_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_entityTypes_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_sessions_entityTypes_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_sessions_entityTypes_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_sessions_entityTypes_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_trainSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_trainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_trainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_versions_createSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_versions_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_versions_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_agent_versions_listSignalErrorFull() instead")
    void dialogflow_projects_locations_agent_versions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_agent_versions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_answerRecords_listSignalErrorFull() instead")
    void dialogflow_projects_locations_answerRecords_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_answerRecords_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationDatasets_createSignalErrorFull() instead")
    void dialogflow_projects_locations_conversationDatasets_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationDatasets_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationDatasets_importConversationDataSignalErrorFull() instead")
    void dialogflow_projects_locations_conversationDatasets_importConversationDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationDatasets_importConversationDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationDatasets_listSignalErrorFull() instead")
    void dialogflow_projects_locations_conversationDatasets_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationDatasets_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationModels_createSignalErrorFull() instead")
    void dialogflow_projects_locations_conversationModels_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationModels_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationModels_deploySignalErrorFull() instead")
    void dialogflow_projects_locations_conversationModels_deploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationModels_deploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationModels_evaluations_createSignalErrorFull() instead")
    void dialogflow_projects_locations_conversationModels_evaluations_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationModels_evaluations_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationModels_evaluations_listSignalErrorFull() instead")
    void dialogflow_projects_locations_conversationModels_evaluations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationModels_evaluations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationModels_listSignalErrorFull() instead")
    void dialogflow_projects_locations_conversationModels_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationModels_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationModels_undeploySignalErrorFull() instead")
    void dialogflow_projects_locations_conversationModels_undeploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationModels_undeploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationProfiles_clearSuggestionFeatureConfigSignalErrorFull() instead")
    void dialogflow_projects_locations_conversationProfiles_clearSuggestionFeatureConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationProfiles_clearSuggestionFeatureConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationProfiles_createSignalErrorFull() instead")
    void dialogflow_projects_locations_conversationProfiles_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationProfiles_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationProfiles_listSignalErrorFull() instead")
    void dialogflow_projects_locations_conversationProfiles_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationProfiles_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversationProfiles_setSuggestionFeatureConfigSignalErrorFull() instead")
    void dialogflow_projects_locations_conversationProfiles_setSuggestionFeatureConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversationProfiles_setSuggestionFeatureConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_completeSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_completeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_completeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_createSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_listSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_messages_listSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_messages_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_messages_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_analyzeContentSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_participants_analyzeContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_analyzeContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_createSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_participants_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_listSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_participants_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_suggestions_suggestArticlesSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestArticlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestArticlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_suggestions_suggestFaqAnswersSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestFaqAnswersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestFaqAnswersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_participants_suggestions_suggestSmartRepliesSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestSmartRepliesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_participants_suggestions_suggestSmartRepliesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_suggestions_searchKnowledgeSignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_suggestions_searchKnowledgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_suggestions_searchKnowledgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_conversations_suggestions_suggestConversationSummarySignalErrorFull() instead")
    void dialogflow_projects_locations_conversations_suggestions_suggestConversationSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_conversations_suggestions_suggestConversationSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_deleteAgentSignalErrorFull() instead")
    void dialogflow_projects_locations_deleteAgentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_deleteAgentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_getAgentSignalErrorFull() instead")
    void dialogflow_projects_locations_getAgentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_getAgentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_createSignalErrorFull() instead")
    void dialogflow_projects_locations_knowledgeBases_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_createSignalErrorFull() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_deleteSignalErrorFull() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_exportSignalErrorFull() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_exportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_exportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_importSignalErrorFull() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_listSignalErrorFull() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_patchSignalErrorFull() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_documents_reloadSignalErrorFull() instead")
    void dialogflow_projects_locations_knowledgeBases_documents_reloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_documents_reloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_knowledgeBases_listSignalErrorFull() instead")
    void dialogflow_projects_locations_knowledgeBases_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_knowledgeBases_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_listSignalErrorFull() instead")
    void dialogflow_projects_locations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_locations_setAgentSignalErrorFull() instead")
    void dialogflow_projects_locations_setAgentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_locations_setAgentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_operations_cancelSignalErrorFull() instead")
    void dialogflow_projects_operations_cancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_operations_cancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_operations_getSignalErrorFull() instead")
    void dialogflow_projects_operations_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_operations_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_operations_listSignalErrorFull() instead")
    void dialogflow_projects_operations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_operations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_suggestions_generateStatelessSummarySignalErrorFull() instead")
    void dialogflow_projects_suggestions_generateStatelessSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_suggestions_generateStatelessSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dialogflow_projects_suggestions_searchKnowledgeSignalErrorFull() instead")
    void dialogflow_projects_suggestions_searchKnowledgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dialogflow_projects_suggestions_searchKnowledgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
