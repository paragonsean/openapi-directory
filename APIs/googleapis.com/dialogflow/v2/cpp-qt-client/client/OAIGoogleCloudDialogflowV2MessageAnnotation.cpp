/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudDialogflowV2MessageAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudDialogflowV2MessageAnnotation::OAIGoogleCloudDialogflowV2MessageAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudDialogflowV2MessageAnnotation::OAIGoogleCloudDialogflowV2MessageAnnotation() {
    this->initializeModel();
}

OAIGoogleCloudDialogflowV2MessageAnnotation::~OAIGoogleCloudDialogflowV2MessageAnnotation() {}

void OAIGoogleCloudDialogflowV2MessageAnnotation::initializeModel() {

    m_contain_entities_isSet = false;
    m_contain_entities_isValid = false;

    m_parts_isSet = false;
    m_parts_isValid = false;
}

void OAIGoogleCloudDialogflowV2MessageAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudDialogflowV2MessageAnnotation::fromJsonObject(QJsonObject json) {

    m_contain_entities_isValid = ::OpenAPI::fromJsonValue(m_contain_entities, json[QString("containEntities")]);
    m_contain_entities_isSet = !json[QString("containEntities")].isNull() && m_contain_entities_isValid;

    m_parts_isValid = ::OpenAPI::fromJsonValue(m_parts, json[QString("parts")]);
    m_parts_isSet = !json[QString("parts")].isNull() && m_parts_isValid;
}

QString OAIGoogleCloudDialogflowV2MessageAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudDialogflowV2MessageAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_contain_entities_isSet) {
        obj.insert(QString("containEntities"), ::OpenAPI::toJsonValue(m_contain_entities));
    }
    if (m_parts.size() > 0) {
        obj.insert(QString("parts"), ::OpenAPI::toJsonValue(m_parts));
    }
    return obj;
}

bool OAIGoogleCloudDialogflowV2MessageAnnotation::isContainEntities() const {
    return m_contain_entities;
}
void OAIGoogleCloudDialogflowV2MessageAnnotation::setContainEntities(const bool &contain_entities) {
    m_contain_entities = contain_entities;
    m_contain_entities_isSet = true;
}

bool OAIGoogleCloudDialogflowV2MessageAnnotation::is_contain_entities_Set() const{
    return m_contain_entities_isSet;
}

bool OAIGoogleCloudDialogflowV2MessageAnnotation::is_contain_entities_Valid() const{
    return m_contain_entities_isValid;
}

QList<OAIGoogleCloudDialogflowV2AnnotatedMessagePart> OAIGoogleCloudDialogflowV2MessageAnnotation::getParts() const {
    return m_parts;
}
void OAIGoogleCloudDialogflowV2MessageAnnotation::setParts(const QList<OAIGoogleCloudDialogflowV2AnnotatedMessagePart> &parts) {
    m_parts = parts;
    m_parts_isSet = true;
}

bool OAIGoogleCloudDialogflowV2MessageAnnotation::is_parts_Set() const{
    return m_parts_isSet;
}

bool OAIGoogleCloudDialogflowV2MessageAnnotation::is_parts_Valid() const{
    return m_parts_isValid;
}

bool OAIGoogleCloudDialogflowV2MessageAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contain_entities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudDialogflowV2MessageAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
