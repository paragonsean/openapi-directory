/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudDialogflowV2Agent.h
 *
 * A Dialogflow agent is a virtual agent that handles conversations with your end-users. It is a natural language understanding module that understands the nuances of human language. Dialogflow translates end-user text or audio during a conversation to structured data that your apps and services can understand. You design and build a Dialogflow agent to handle the types of conversations required for your system. For more information about agents, see the [Agent guide](https://cloud.google.com/dialogflow/docs/agents-overview). 
 */

#ifndef OAIGoogleCloudDialogflowV2Agent_H
#define OAIGoogleCloudDialogflowV2Agent_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleCloudDialogflowV2Agent : public OAIObject {
public:
    OAIGoogleCloudDialogflowV2Agent();
    OAIGoogleCloudDialogflowV2Agent(QString json);
    ~OAIGoogleCloudDialogflowV2Agent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApiVersion() const;
    void setApiVersion(const QString &api_version);
    bool is_api_version_Set() const;
    bool is_api_version_Valid() const;

    QString getAvatarUri() const;
    void setAvatarUri(const QString &avatar_uri);
    bool is_avatar_uri_Set() const;
    bool is_avatar_uri_Valid() const;

    float getClassificationThreshold() const;
    void setClassificationThreshold(const float &classification_threshold);
    bool is_classification_threshold_Set() const;
    bool is_classification_threshold_Valid() const;

    QString getDefaultLanguageCode() const;
    void setDefaultLanguageCode(const QString &default_language_code);
    bool is_default_language_code_Set() const;
    bool is_default_language_code_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    bool isEnableLogging() const;
    void setEnableLogging(const bool &enable_logging);
    bool is_enable_logging_Set() const;
    bool is_enable_logging_Valid() const;

    Q_DECL_DEPRECATED QString getMatchMode() const;
    Q_DECL_DEPRECATED void setMatchMode(const QString &match_mode);
    Q_DECL_DEPRECATED bool is_match_mode_Set() const;
    Q_DECL_DEPRECATED bool is_match_mode_Valid() const;

    QString getParent() const;
    void setParent(const QString &parent);
    bool is_parent_Set() const;
    bool is_parent_Valid() const;

    QList<QString> getSupportedLanguageCodes() const;
    void setSupportedLanguageCodes(const QList<QString> &supported_language_codes);
    bool is_supported_language_codes_Set() const;
    bool is_supported_language_codes_Valid() const;

    QString getTier() const;
    void setTier(const QString &tier);
    bool is_tier_Set() const;
    bool is_tier_Valid() const;

    QString getTimeZone() const;
    void setTimeZone(const QString &time_zone);
    bool is_time_zone_Set() const;
    bool is_time_zone_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_api_version;
    bool m_api_version_isSet;
    bool m_api_version_isValid;

    QString m_avatar_uri;
    bool m_avatar_uri_isSet;
    bool m_avatar_uri_isValid;

    float m_classification_threshold;
    bool m_classification_threshold_isSet;
    bool m_classification_threshold_isValid;

    QString m_default_language_code;
    bool m_default_language_code_isSet;
    bool m_default_language_code_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    bool m_enable_logging;
    bool m_enable_logging_isSet;
    bool m_enable_logging_isValid;

    QString m_match_mode;
    bool m_match_mode_isSet;
    bool m_match_mode_isValid;

    QString m_parent;
    bool m_parent_isSet;
    bool m_parent_isValid;

    QList<QString> m_supported_language_codes;
    bool m_supported_language_codes_isSet;
    bool m_supported_language_codes_isValid;

    QString m_tier;
    bool m_tier_isSet;
    bool m_tier_isValid;

    QString m_time_zone;
    bool m_time_zone_isSet;
    bool m_time_zone_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudDialogflowV2Agent)

#endif // OAIGoogleCloudDialogflowV2Agent_H
