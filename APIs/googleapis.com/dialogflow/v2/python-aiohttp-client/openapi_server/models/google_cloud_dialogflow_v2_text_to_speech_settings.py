# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dialogflow_v2_synthesize_speech_config import GoogleCloudDialogflowV2SynthesizeSpeechConfig
from openapi_server import util


class GoogleCloudDialogflowV2TextToSpeechSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_text_to_speech: bool=None, output_audio_encoding: str=None, sample_rate_hertz: int=None, synthesize_speech_configs: Dict[str, GoogleCloudDialogflowV2SynthesizeSpeechConfig]=None):
        """GoogleCloudDialogflowV2TextToSpeechSettings - a model defined in OpenAPI

        :param enable_text_to_speech: The enable_text_to_speech of this GoogleCloudDialogflowV2TextToSpeechSettings.
        :param output_audio_encoding: The output_audio_encoding of this GoogleCloudDialogflowV2TextToSpeechSettings.
        :param sample_rate_hertz: The sample_rate_hertz of this GoogleCloudDialogflowV2TextToSpeechSettings.
        :param synthesize_speech_configs: The synthesize_speech_configs of this GoogleCloudDialogflowV2TextToSpeechSettings.
        """
        self.openapi_types = {
            'enable_text_to_speech': bool,
            'output_audio_encoding': str,
            'sample_rate_hertz': int,
            'synthesize_speech_configs': Dict[str, GoogleCloudDialogflowV2SynthesizeSpeechConfig]
        }

        self.attribute_map = {
            'enable_text_to_speech': 'enableTextToSpeech',
            'output_audio_encoding': 'outputAudioEncoding',
            'sample_rate_hertz': 'sampleRateHertz',
            'synthesize_speech_configs': 'synthesizeSpeechConfigs'
        }

        self._enable_text_to_speech = enable_text_to_speech
        self._output_audio_encoding = output_audio_encoding
        self._sample_rate_hertz = sample_rate_hertz
        self._synthesize_speech_configs = synthesize_speech_configs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowV2TextToSpeechSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowV2TextToSpeechSettings of this GoogleCloudDialogflowV2TextToSpeechSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_text_to_speech(self):
        """Gets the enable_text_to_speech of this GoogleCloudDialogflowV2TextToSpeechSettings.

        Optional. Indicates whether text to speech is enabled. Even when this field is false, other settings in this proto are still retained.

        :return: The enable_text_to_speech of this GoogleCloudDialogflowV2TextToSpeechSettings.
        :rtype: bool
        """
        return self._enable_text_to_speech

    @enable_text_to_speech.setter
    def enable_text_to_speech(self, enable_text_to_speech):
        """Sets the enable_text_to_speech of this GoogleCloudDialogflowV2TextToSpeechSettings.

        Optional. Indicates whether text to speech is enabled. Even when this field is false, other settings in this proto are still retained.

        :param enable_text_to_speech: The enable_text_to_speech of this GoogleCloudDialogflowV2TextToSpeechSettings.
        :type enable_text_to_speech: bool
        """

        self._enable_text_to_speech = enable_text_to_speech

    @property
    def output_audio_encoding(self):
        """Gets the output_audio_encoding of this GoogleCloudDialogflowV2TextToSpeechSettings.

        Required. Audio encoding of the synthesized audio content.

        :return: The output_audio_encoding of this GoogleCloudDialogflowV2TextToSpeechSettings.
        :rtype: str
        """
        return self._output_audio_encoding

    @output_audio_encoding.setter
    def output_audio_encoding(self, output_audio_encoding):
        """Sets the output_audio_encoding of this GoogleCloudDialogflowV2TextToSpeechSettings.

        Required. Audio encoding of the synthesized audio content.

        :param output_audio_encoding: The output_audio_encoding of this GoogleCloudDialogflowV2TextToSpeechSettings.
        :type output_audio_encoding: str
        """
        allowed_values = ["OUTPUT_AUDIO_ENCODING_UNSPECIFIED", "OUTPUT_AUDIO_ENCODING_LINEAR_16", "OUTPUT_AUDIO_ENCODING_MP3", "OUTPUT_AUDIO_ENCODING_MP3_64_KBPS", "OUTPUT_AUDIO_ENCODING_OGG_OPUS", "OUTPUT_AUDIO_ENCODING_MULAW"]  # noqa: E501
        if output_audio_encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `output_audio_encoding` ({0}), must be one of {1}"
                .format(output_audio_encoding, allowed_values)
            )

        self._output_audio_encoding = output_audio_encoding

    @property
    def sample_rate_hertz(self):
        """Gets the sample_rate_hertz of this GoogleCloudDialogflowV2TextToSpeechSettings.

        Optional. The synthesis sample rate (in hertz) for this audio. If not provided, then the synthesizer will use the default sample rate based on the audio encoding. If this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality).

        :return: The sample_rate_hertz of this GoogleCloudDialogflowV2TextToSpeechSettings.
        :rtype: int
        """
        return self._sample_rate_hertz

    @sample_rate_hertz.setter
    def sample_rate_hertz(self, sample_rate_hertz):
        """Sets the sample_rate_hertz of this GoogleCloudDialogflowV2TextToSpeechSettings.

        Optional. The synthesis sample rate (in hertz) for this audio. If not provided, then the synthesizer will use the default sample rate based on the audio encoding. If this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality).

        :param sample_rate_hertz: The sample_rate_hertz of this GoogleCloudDialogflowV2TextToSpeechSettings.
        :type sample_rate_hertz: int
        """

        self._sample_rate_hertz = sample_rate_hertz

    @property
    def synthesize_speech_configs(self):
        """Gets the synthesize_speech_configs of this GoogleCloudDialogflowV2TextToSpeechSettings.

        Optional. Configuration of how speech should be synthesized, mapping from language (https://cloud.google.com/dialogflow/docs/reference/language) to SynthesizeSpeechConfig.

        :return: The synthesize_speech_configs of this GoogleCloudDialogflowV2TextToSpeechSettings.
        :rtype: Dict[str, GoogleCloudDialogflowV2SynthesizeSpeechConfig]
        """
        return self._synthesize_speech_configs

    @synthesize_speech_configs.setter
    def synthesize_speech_configs(self, synthesize_speech_configs):
        """Sets the synthesize_speech_configs of this GoogleCloudDialogflowV2TextToSpeechSettings.

        Optional. Configuration of how speech should be synthesized, mapping from language (https://cloud.google.com/dialogflow/docs/reference/language) to SynthesizeSpeechConfig.

        :param synthesize_speech_configs: The synthesize_speech_configs of this GoogleCloudDialogflowV2TextToSpeechSettings.
        :type synthesize_speech_configs: Dict[str, GoogleCloudDialogflowV2SynthesizeSpeechConfig]
        """

        self._synthesize_speech_configs = synthesize_speech_configs
