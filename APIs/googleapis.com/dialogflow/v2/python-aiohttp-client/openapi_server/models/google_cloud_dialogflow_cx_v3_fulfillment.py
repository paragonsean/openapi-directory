# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dialogflow_cx_v3_advanced_settings import GoogleCloudDialogflowCxV3AdvancedSettings
from openapi_server.models.google_cloud_dialogflow_cx_v3_fulfillment_conditional_cases import GoogleCloudDialogflowCxV3FulfillmentConditionalCases
from openapi_server.models.google_cloud_dialogflow_cx_v3_fulfillment_set_parameter_action import GoogleCloudDialogflowCxV3FulfillmentSetParameterAction
from openapi_server.models.google_cloud_dialogflow_cx_v3_response_message import GoogleCloudDialogflowCxV3ResponseMessage
from openapi_server import util


class GoogleCloudDialogflowCxV3Fulfillment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advanced_settings: GoogleCloudDialogflowCxV3AdvancedSettings=None, conditional_cases: List[GoogleCloudDialogflowCxV3FulfillmentConditionalCases]=None, enable_generative_fallback: bool=None, messages: List[GoogleCloudDialogflowCxV3ResponseMessage]=None, return_partial_responses: bool=None, set_parameter_actions: List[GoogleCloudDialogflowCxV3FulfillmentSetParameterAction]=None, tag: str=None, webhook: str=None):
        """GoogleCloudDialogflowCxV3Fulfillment - a model defined in OpenAPI

        :param advanced_settings: The advanced_settings of this GoogleCloudDialogflowCxV3Fulfillment.
        :param conditional_cases: The conditional_cases of this GoogleCloudDialogflowCxV3Fulfillment.
        :param enable_generative_fallback: The enable_generative_fallback of this GoogleCloudDialogflowCxV3Fulfillment.
        :param messages: The messages of this GoogleCloudDialogflowCxV3Fulfillment.
        :param return_partial_responses: The return_partial_responses of this GoogleCloudDialogflowCxV3Fulfillment.
        :param set_parameter_actions: The set_parameter_actions of this GoogleCloudDialogflowCxV3Fulfillment.
        :param tag: The tag of this GoogleCloudDialogflowCxV3Fulfillment.
        :param webhook: The webhook of this GoogleCloudDialogflowCxV3Fulfillment.
        """
        self.openapi_types = {
            'advanced_settings': GoogleCloudDialogflowCxV3AdvancedSettings,
            'conditional_cases': List[GoogleCloudDialogflowCxV3FulfillmentConditionalCases],
            'enable_generative_fallback': bool,
            'messages': List[GoogleCloudDialogflowCxV3ResponseMessage],
            'return_partial_responses': bool,
            'set_parameter_actions': List[GoogleCloudDialogflowCxV3FulfillmentSetParameterAction],
            'tag': str,
            'webhook': str
        }

        self.attribute_map = {
            'advanced_settings': 'advancedSettings',
            'conditional_cases': 'conditionalCases',
            'enable_generative_fallback': 'enableGenerativeFallback',
            'messages': 'messages',
            'return_partial_responses': 'returnPartialResponses',
            'set_parameter_actions': 'setParameterActions',
            'tag': 'tag',
            'webhook': 'webhook'
        }

        self._advanced_settings = advanced_settings
        self._conditional_cases = conditional_cases
        self._enable_generative_fallback = enable_generative_fallback
        self._messages = messages
        self._return_partial_responses = return_partial_responses
        self._set_parameter_actions = set_parameter_actions
        self._tag = tag
        self._webhook = webhook

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowCxV3Fulfillment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowCxV3Fulfillment of this GoogleCloudDialogflowCxV3Fulfillment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advanced_settings(self):
        """Gets the advanced_settings of this GoogleCloudDialogflowCxV3Fulfillment.


        :return: The advanced_settings of this GoogleCloudDialogflowCxV3Fulfillment.
        :rtype: GoogleCloudDialogflowCxV3AdvancedSettings
        """
        return self._advanced_settings

    @advanced_settings.setter
    def advanced_settings(self, advanced_settings):
        """Sets the advanced_settings of this GoogleCloudDialogflowCxV3Fulfillment.


        :param advanced_settings: The advanced_settings of this GoogleCloudDialogflowCxV3Fulfillment.
        :type advanced_settings: GoogleCloudDialogflowCxV3AdvancedSettings
        """

        self._advanced_settings = advanced_settings

    @property
    def conditional_cases(self):
        """Gets the conditional_cases of this GoogleCloudDialogflowCxV3Fulfillment.

        Conditional cases for this fulfillment.

        :return: The conditional_cases of this GoogleCloudDialogflowCxV3Fulfillment.
        :rtype: List[GoogleCloudDialogflowCxV3FulfillmentConditionalCases]
        """
        return self._conditional_cases

    @conditional_cases.setter
    def conditional_cases(self, conditional_cases):
        """Sets the conditional_cases of this GoogleCloudDialogflowCxV3Fulfillment.

        Conditional cases for this fulfillment.

        :param conditional_cases: The conditional_cases of this GoogleCloudDialogflowCxV3Fulfillment.
        :type conditional_cases: List[GoogleCloudDialogflowCxV3FulfillmentConditionalCases]
        """

        self._conditional_cases = conditional_cases

    @property
    def enable_generative_fallback(self):
        """Gets the enable_generative_fallback of this GoogleCloudDialogflowCxV3Fulfillment.

        If the flag is true, the agent will utilize LLM to generate a text response. If LLM generation fails, the defined responses in the fulfillment will be respected. This flag is only useful for fulfillments associated with no-match event handlers.

        :return: The enable_generative_fallback of this GoogleCloudDialogflowCxV3Fulfillment.
        :rtype: bool
        """
        return self._enable_generative_fallback

    @enable_generative_fallback.setter
    def enable_generative_fallback(self, enable_generative_fallback):
        """Sets the enable_generative_fallback of this GoogleCloudDialogflowCxV3Fulfillment.

        If the flag is true, the agent will utilize LLM to generate a text response. If LLM generation fails, the defined responses in the fulfillment will be respected. This flag is only useful for fulfillments associated with no-match event handlers.

        :param enable_generative_fallback: The enable_generative_fallback of this GoogleCloudDialogflowCxV3Fulfillment.
        :type enable_generative_fallback: bool
        """

        self._enable_generative_fallback = enable_generative_fallback

    @property
    def messages(self):
        """Gets the messages of this GoogleCloudDialogflowCxV3Fulfillment.

        The list of rich message responses to present to the user.

        :return: The messages of this GoogleCloudDialogflowCxV3Fulfillment.
        :rtype: List[GoogleCloudDialogflowCxV3ResponseMessage]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this GoogleCloudDialogflowCxV3Fulfillment.

        The list of rich message responses to present to the user.

        :param messages: The messages of this GoogleCloudDialogflowCxV3Fulfillment.
        :type messages: List[GoogleCloudDialogflowCxV3ResponseMessage]
        """

        self._messages = messages

    @property
    def return_partial_responses(self):
        """Gets the return_partial_responses of this GoogleCloudDialogflowCxV3Fulfillment.

        Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.

        :return: The return_partial_responses of this GoogleCloudDialogflowCxV3Fulfillment.
        :rtype: bool
        """
        return self._return_partial_responses

    @return_partial_responses.setter
    def return_partial_responses(self, return_partial_responses):
        """Sets the return_partial_responses of this GoogleCloudDialogflowCxV3Fulfillment.

        Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.

        :param return_partial_responses: The return_partial_responses of this GoogleCloudDialogflowCxV3Fulfillment.
        :type return_partial_responses: bool
        """

        self._return_partial_responses = return_partial_responses

    @property
    def set_parameter_actions(self):
        """Gets the set_parameter_actions of this GoogleCloudDialogflowCxV3Fulfillment.

        Set parameter values before executing the webhook.

        :return: The set_parameter_actions of this GoogleCloudDialogflowCxV3Fulfillment.
        :rtype: List[GoogleCloudDialogflowCxV3FulfillmentSetParameterAction]
        """
        return self._set_parameter_actions

    @set_parameter_actions.setter
    def set_parameter_actions(self, set_parameter_actions):
        """Sets the set_parameter_actions of this GoogleCloudDialogflowCxV3Fulfillment.

        Set parameter values before executing the webhook.

        :param set_parameter_actions: The set_parameter_actions of this GoogleCloudDialogflowCxV3Fulfillment.
        :type set_parameter_actions: List[GoogleCloudDialogflowCxV3FulfillmentSetParameterAction]
        """

        self._set_parameter_actions = set_parameter_actions

    @property
    def tag(self):
        """Gets the tag of this GoogleCloudDialogflowCxV3Fulfillment.

        The value of this field will be populated in the WebhookRequest `fulfillmentInfo.tag` field by Dialogflow when the associated webhook is called. The tag is typically used by the webhook service to identify which fulfillment is being called, but it could be used for other purposes. This field is required if `webhook` is specified.

        :return: The tag of this GoogleCloudDialogflowCxV3Fulfillment.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this GoogleCloudDialogflowCxV3Fulfillment.

        The value of this field will be populated in the WebhookRequest `fulfillmentInfo.tag` field by Dialogflow when the associated webhook is called. The tag is typically used by the webhook service to identify which fulfillment is being called, but it could be used for other purposes. This field is required if `webhook` is specified.

        :param tag: The tag of this GoogleCloudDialogflowCxV3Fulfillment.
        :type tag: str
        """

        self._tag = tag

    @property
    def webhook(self):
        """Gets the webhook of this GoogleCloudDialogflowCxV3Fulfillment.

        The webhook to call. Format: `projects//locations//agents//webhooks/`.

        :return: The webhook of this GoogleCloudDialogflowCxV3Fulfillment.
        :rtype: str
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this GoogleCloudDialogflowCxV3Fulfillment.

        The webhook to call. Format: `projects//locations//agents//webhooks/`.

        :param webhook: The webhook of this GoogleCloudDialogflowCxV3Fulfillment.
        :type webhook: str
        """

        self._webhook = webhook
