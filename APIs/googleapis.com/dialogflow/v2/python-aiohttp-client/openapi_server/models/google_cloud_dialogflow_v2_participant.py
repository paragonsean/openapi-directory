# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDialogflowV2Participant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, documents_metadata_filters: Dict[str, str]=None, name: str=None, obfuscated_external_user_id: str=None, role: str=None, sip_recording_media_label: str=None):
        """GoogleCloudDialogflowV2Participant - a model defined in OpenAPI

        :param documents_metadata_filters: The documents_metadata_filters of this GoogleCloudDialogflowV2Participant.
        :param name: The name of this GoogleCloudDialogflowV2Participant.
        :param obfuscated_external_user_id: The obfuscated_external_user_id of this GoogleCloudDialogflowV2Participant.
        :param role: The role of this GoogleCloudDialogflowV2Participant.
        :param sip_recording_media_label: The sip_recording_media_label of this GoogleCloudDialogflowV2Participant.
        """
        self.openapi_types = {
            'documents_metadata_filters': Dict[str, str],
            'name': str,
            'obfuscated_external_user_id': str,
            'role': str,
            'sip_recording_media_label': str
        }

        self.attribute_map = {
            'documents_metadata_filters': 'documentsMetadataFilters',
            'name': 'name',
            'obfuscated_external_user_id': 'obfuscatedExternalUserId',
            'role': 'role',
            'sip_recording_media_label': 'sipRecordingMediaLabel'
        }

        self._documents_metadata_filters = documents_metadata_filters
        self._name = name
        self._obfuscated_external_user_id = obfuscated_external_user_id
        self._role = role
        self._sip_recording_media_label = sip_recording_media_label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowV2Participant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowV2Participant of this GoogleCloudDialogflowV2Participant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def documents_metadata_filters(self):
        """Gets the documents_metadata_filters of this GoogleCloudDialogflowV2Participant.

        Optional. Key-value filters on the metadata of documents returned by article suggestion. If specified, article suggestion only returns suggested documents that match all filters in their Document.metadata. Multiple values for a metadata key should be concatenated by comma. For example, filters to match all documents that have 'US' or 'CA' in their market metadata values and 'agent' in their user metadata values will be ``` documents_metadata_filters { key: \"market\" value: \"US,CA\" } documents_metadata_filters { key: \"user\" value: \"agent\" } ```

        :return: The documents_metadata_filters of this GoogleCloudDialogflowV2Participant.
        :rtype: Dict[str, str]
        """
        return self._documents_metadata_filters

    @documents_metadata_filters.setter
    def documents_metadata_filters(self, documents_metadata_filters):
        """Sets the documents_metadata_filters of this GoogleCloudDialogflowV2Participant.

        Optional. Key-value filters on the metadata of documents returned by article suggestion. If specified, article suggestion only returns suggested documents that match all filters in their Document.metadata. Multiple values for a metadata key should be concatenated by comma. For example, filters to match all documents that have 'US' or 'CA' in their market metadata values and 'agent' in their user metadata values will be ``` documents_metadata_filters { key: \"market\" value: \"US,CA\" } documents_metadata_filters { key: \"user\" value: \"agent\" } ```

        :param documents_metadata_filters: The documents_metadata_filters of this GoogleCloudDialogflowV2Participant.
        :type documents_metadata_filters: Dict[str, str]
        """

        self._documents_metadata_filters = documents_metadata_filters

    @property
    def name(self):
        """Gets the name of this GoogleCloudDialogflowV2Participant.

        Optional. The unique identifier of this participant. Format: `projects//locations//conversations//participants/`.

        :return: The name of this GoogleCloudDialogflowV2Participant.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDialogflowV2Participant.

        Optional. The unique identifier of this participant. Format: `projects//locations//conversations//participants/`.

        :param name: The name of this GoogleCloudDialogflowV2Participant.
        :type name: str
        """

        self._name = name

    @property
    def obfuscated_external_user_id(self):
        """Gets the obfuscated_external_user_id of this GoogleCloudDialogflowV2Participant.

        Optional. Obfuscated user id that should be associated with the created participant. You can specify a user id as follows: 1. If you set this field in CreateParticipantRequest or UpdateParticipantRequest, Dialogflow adds the obfuscated user id with the participant. 2. If you set this field in AnalyzeContent or StreamingAnalyzeContent, Dialogflow will update Participant.obfuscated_external_user_id. Dialogflow returns an error if you try to add a user id for a non-END_USER participant. Dialogflow uses this user id for billing and measurement purposes. For example, Dialogflow determines whether a user in one conversation returned in a later conversation. Note: * Please never pass raw user ids to Dialogflow. Always obfuscate your user id first. * Dialogflow only accepts a UTF-8 encoded string, e.g., a hex digest of a hash function like SHA-512. * The length of the user id must be <= 256 characters.

        :return: The obfuscated_external_user_id of this GoogleCloudDialogflowV2Participant.
        :rtype: str
        """
        return self._obfuscated_external_user_id

    @obfuscated_external_user_id.setter
    def obfuscated_external_user_id(self, obfuscated_external_user_id):
        """Sets the obfuscated_external_user_id of this GoogleCloudDialogflowV2Participant.

        Optional. Obfuscated user id that should be associated with the created participant. You can specify a user id as follows: 1. If you set this field in CreateParticipantRequest or UpdateParticipantRequest, Dialogflow adds the obfuscated user id with the participant. 2. If you set this field in AnalyzeContent or StreamingAnalyzeContent, Dialogflow will update Participant.obfuscated_external_user_id. Dialogflow returns an error if you try to add a user id for a non-END_USER participant. Dialogflow uses this user id for billing and measurement purposes. For example, Dialogflow determines whether a user in one conversation returned in a later conversation. Note: * Please never pass raw user ids to Dialogflow. Always obfuscate your user id first. * Dialogflow only accepts a UTF-8 encoded string, e.g., a hex digest of a hash function like SHA-512. * The length of the user id must be <= 256 characters.

        :param obfuscated_external_user_id: The obfuscated_external_user_id of this GoogleCloudDialogflowV2Participant.
        :type obfuscated_external_user_id: str
        """

        self._obfuscated_external_user_id = obfuscated_external_user_id

    @property
    def role(self):
        """Gets the role of this GoogleCloudDialogflowV2Participant.

        Immutable. The role this participant plays in the conversation. This field must be set during participant creation and is then immutable.

        :return: The role of this GoogleCloudDialogflowV2Participant.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this GoogleCloudDialogflowV2Participant.

        Immutable. The role this participant plays in the conversation. This field must be set during participant creation and is then immutable.

        :param role: The role of this GoogleCloudDialogflowV2Participant.
        :type role: str
        """
        allowed_values = ["ROLE_UNSPECIFIED", "HUMAN_AGENT", "AUTOMATED_AGENT", "END_USER"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def sip_recording_media_label(self):
        """Gets the sip_recording_media_label of this GoogleCloudDialogflowV2Participant.

        Optional. Label applied to streams representing this participant in SIPREC XML metadata and SDP. This is used to assign transcriptions from that media stream to this participant. This field can be updated.

        :return: The sip_recording_media_label of this GoogleCloudDialogflowV2Participant.
        :rtype: str
        """
        return self._sip_recording_media_label

    @sip_recording_media_label.setter
    def sip_recording_media_label(self, sip_recording_media_label):
        """Sets the sip_recording_media_label of this GoogleCloudDialogflowV2Participant.

        Optional. Label applied to streams representing this participant in SIPREC XML metadata and SDP. This is used to assign transcriptions from that media stream to this participant. This field can be updated.

        :param sip_recording_media_label: The sip_recording_media_label of this GoogleCloudDialogflowV2Participant.
        :type sip_recording_media_label: str
        """

        self._sip_recording_media_label = sip_recording_media_label
