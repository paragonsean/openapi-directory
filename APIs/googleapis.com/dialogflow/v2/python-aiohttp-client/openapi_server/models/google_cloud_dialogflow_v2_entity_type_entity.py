# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDialogflowV2EntityTypeEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, synonyms: List[str]=None, value: str=None):
        """GoogleCloudDialogflowV2EntityTypeEntity - a model defined in OpenAPI

        :param synonyms: The synonyms of this GoogleCloudDialogflowV2EntityTypeEntity.
        :param value: The value of this GoogleCloudDialogflowV2EntityTypeEntity.
        """
        self.openapi_types = {
            'synonyms': List[str],
            'value': str
        }

        self.attribute_map = {
            'synonyms': 'synonyms',
            'value': 'value'
        }

        self._synonyms = synonyms
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowV2EntityTypeEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowV2EntityTypeEntity of this GoogleCloudDialogflowV2EntityTypeEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def synonyms(self):
        """Gets the synonyms of this GoogleCloudDialogflowV2EntityTypeEntity.

        Required. A collection of value synonyms. For example, if the entity type is *vegetable*, and `value` is *scallions*, a synonym could be *green onions*. For `KIND_LIST` entity types: * This collection must contain exactly one synonym equal to `value`.

        :return: The synonyms of this GoogleCloudDialogflowV2EntityTypeEntity.
        :rtype: List[str]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this GoogleCloudDialogflowV2EntityTypeEntity.

        Required. A collection of value synonyms. For example, if the entity type is *vegetable*, and `value` is *scallions*, a synonym could be *green onions*. For `KIND_LIST` entity types: * This collection must contain exactly one synonym equal to `value`.

        :param synonyms: The synonyms of this GoogleCloudDialogflowV2EntityTypeEntity.
        :type synonyms: List[str]
        """

        self._synonyms = synonyms

    @property
    def value(self):
        """Gets the value of this GoogleCloudDialogflowV2EntityTypeEntity.

        Required. The primary value associated with this entity entry. For example, if the entity type is *vegetable*, the value could be *scallions*. For `KIND_MAP` entity types: * A reference value to be used in place of synonyms. For `KIND_LIST` entity types: * A string that can contain references to other entity types (with or without aliases).

        :return: The value of this GoogleCloudDialogflowV2EntityTypeEntity.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GoogleCloudDialogflowV2EntityTypeEntity.

        Required. The primary value associated with this entity entry. For example, if the entity type is *vegetable*, the value could be *scallions*. For `KIND_MAP` entity types: * A reference value to be used in place of synonyms. For `KIND_LIST` entity types: * A string that can contain references to other entity types (with or without aliases).

        :param value: The value of this GoogleCloudDialogflowV2EntityTypeEntity.
        :type value: str
        """

        self._value = value
