# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_dialogflow_v2_conversation_info import GoogleCloudDialogflowV2ConversationInfo
from openapi_server.models.google_cloud_dialogflow_v2_input_config import GoogleCloudDialogflowV2InputConfig
from openapi_server import util


class GoogleCloudDialogflowV2ConversationDataset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conversation_count: str=None, conversation_info: GoogleCloudDialogflowV2ConversationInfo=None, create_time: str=None, description: str=None, display_name: str=None, input_config: GoogleCloudDialogflowV2InputConfig=None, name: str=None):
        """GoogleCloudDialogflowV2ConversationDataset - a model defined in OpenAPI

        :param conversation_count: The conversation_count of this GoogleCloudDialogflowV2ConversationDataset.
        :param conversation_info: The conversation_info of this GoogleCloudDialogflowV2ConversationDataset.
        :param create_time: The create_time of this GoogleCloudDialogflowV2ConversationDataset.
        :param description: The description of this GoogleCloudDialogflowV2ConversationDataset.
        :param display_name: The display_name of this GoogleCloudDialogflowV2ConversationDataset.
        :param input_config: The input_config of this GoogleCloudDialogflowV2ConversationDataset.
        :param name: The name of this GoogleCloudDialogflowV2ConversationDataset.
        """
        self.openapi_types = {
            'conversation_count': str,
            'conversation_info': GoogleCloudDialogflowV2ConversationInfo,
            'create_time': str,
            'description': str,
            'display_name': str,
            'input_config': GoogleCloudDialogflowV2InputConfig,
            'name': str
        }

        self.attribute_map = {
            'conversation_count': 'conversationCount',
            'conversation_info': 'conversationInfo',
            'create_time': 'createTime',
            'description': 'description',
            'display_name': 'displayName',
            'input_config': 'inputConfig',
            'name': 'name'
        }

        self._conversation_count = conversation_count
        self._conversation_info = conversation_info
        self._create_time = create_time
        self._description = description
        self._display_name = display_name
        self._input_config = input_config
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowV2ConversationDataset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowV2ConversationDataset of this GoogleCloudDialogflowV2ConversationDataset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conversation_count(self):
        """Gets the conversation_count of this GoogleCloudDialogflowV2ConversationDataset.

        Output only. The number of conversations this conversation dataset contains.

        :return: The conversation_count of this GoogleCloudDialogflowV2ConversationDataset.
        :rtype: str
        """
        return self._conversation_count

    @conversation_count.setter
    def conversation_count(self, conversation_count):
        """Sets the conversation_count of this GoogleCloudDialogflowV2ConversationDataset.

        Output only. The number of conversations this conversation dataset contains.

        :param conversation_count: The conversation_count of this GoogleCloudDialogflowV2ConversationDataset.
        :type conversation_count: str
        """

        self._conversation_count = conversation_count

    @property
    def conversation_info(self):
        """Gets the conversation_info of this GoogleCloudDialogflowV2ConversationDataset.


        :return: The conversation_info of this GoogleCloudDialogflowV2ConversationDataset.
        :rtype: GoogleCloudDialogflowV2ConversationInfo
        """
        return self._conversation_info

    @conversation_info.setter
    def conversation_info(self, conversation_info):
        """Sets the conversation_info of this GoogleCloudDialogflowV2ConversationDataset.


        :param conversation_info: The conversation_info of this GoogleCloudDialogflowV2ConversationDataset.
        :type conversation_info: GoogleCloudDialogflowV2ConversationInfo
        """

        self._conversation_info = conversation_info

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudDialogflowV2ConversationDataset.

        Output only. Creation time of this dataset.

        :return: The create_time of this GoogleCloudDialogflowV2ConversationDataset.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudDialogflowV2ConversationDataset.

        Output only. Creation time of this dataset.

        :param create_time: The create_time of this GoogleCloudDialogflowV2ConversationDataset.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this GoogleCloudDialogflowV2ConversationDataset.

        Optional. The description of the dataset. Maximum of 10000 bytes.

        :return: The description of this GoogleCloudDialogflowV2ConversationDataset.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudDialogflowV2ConversationDataset.

        Optional. The description of the dataset. Maximum of 10000 bytes.

        :param description: The description of this GoogleCloudDialogflowV2ConversationDataset.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudDialogflowV2ConversationDataset.

        Required. The display name of the dataset. Maximum of 64 bytes.

        :return: The display_name of this GoogleCloudDialogflowV2ConversationDataset.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudDialogflowV2ConversationDataset.

        Required. The display name of the dataset. Maximum of 64 bytes.

        :param display_name: The display_name of this GoogleCloudDialogflowV2ConversationDataset.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def input_config(self):
        """Gets the input_config of this GoogleCloudDialogflowV2ConversationDataset.


        :return: The input_config of this GoogleCloudDialogflowV2ConversationDataset.
        :rtype: GoogleCloudDialogflowV2InputConfig
        """
        return self._input_config

    @input_config.setter
    def input_config(self, input_config):
        """Sets the input_config of this GoogleCloudDialogflowV2ConversationDataset.


        :param input_config: The input_config of this GoogleCloudDialogflowV2ConversationDataset.
        :type input_config: GoogleCloudDialogflowV2InputConfig
        """

        self._input_config = input_config

    @property
    def name(self):
        """Gets the name of this GoogleCloudDialogflowV2ConversationDataset.

        Output only. ConversationDataset resource name. Format: `projects//locations//conversationDatasets/`

        :return: The name of this GoogleCloudDialogflowV2ConversationDataset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDialogflowV2ConversationDataset.

        Output only. ConversationDataset resource name. Format: `projects//locations//conversationDatasets/`

        :param name: The name of this GoogleCloudDialogflowV2ConversationDataset.
        :type name: str
        """

        self._name = name
