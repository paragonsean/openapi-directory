# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDialogflowV2NotificationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message_format: str=None, topic: str=None):
        """GoogleCloudDialogflowV2NotificationConfig - a model defined in OpenAPI

        :param message_format: The message_format of this GoogleCloudDialogflowV2NotificationConfig.
        :param topic: The topic of this GoogleCloudDialogflowV2NotificationConfig.
        """
        self.openapi_types = {
            'message_format': str,
            'topic': str
        }

        self.attribute_map = {
            'message_format': 'messageFormat',
            'topic': 'topic'
        }

        self._message_format = message_format
        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowV2NotificationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowV2NotificationConfig of this GoogleCloudDialogflowV2NotificationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message_format(self):
        """Gets the message_format of this GoogleCloudDialogflowV2NotificationConfig.

        Format of message.

        :return: The message_format of this GoogleCloudDialogflowV2NotificationConfig.
        :rtype: str
        """
        return self._message_format

    @message_format.setter
    def message_format(self, message_format):
        """Sets the message_format of this GoogleCloudDialogflowV2NotificationConfig.

        Format of message.

        :param message_format: The message_format of this GoogleCloudDialogflowV2NotificationConfig.
        :type message_format: str
        """
        allowed_values = ["MESSAGE_FORMAT_UNSPECIFIED", "PROTO", "JSON"]  # noqa: E501
        if message_format not in allowed_values:
            raise ValueError(
                "Invalid value for `message_format` ({0}), must be one of {1}"
                .format(message_format, allowed_values)
            )

        self._message_format = message_format

    @property
    def topic(self):
        """Gets the topic of this GoogleCloudDialogflowV2NotificationConfig.

        Name of the Pub/Sub topic to publish conversation events like CONVERSATION_STARTED as serialized ConversationEvent protos. For telephony integration to receive notification, make sure either this topic is in the same project as the conversation or you grant `service-@gcp-sa-dialogflow.iam.gserviceaccount.com` the `Dialogflow Service Agent` role in the topic project. For chat integration to receive notification, make sure API caller has been granted the `Dialogflow Service Agent` role for the topic. Format: `projects//locations//topics/`.

        :return: The topic of this GoogleCloudDialogflowV2NotificationConfig.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this GoogleCloudDialogflowV2NotificationConfig.

        Name of the Pub/Sub topic to publish conversation events like CONVERSATION_STARTED as serialized ConversationEvent protos. For telephony integration to receive notification, make sure either this topic is in the same project as the conversation or you grant `service-@gcp-sa-dialogflow.iam.gserviceaccount.com` the `Dialogflow Service Agent` role in the topic project. For chat integration to receive notification, make sure API caller has been granted the `Dialogflow Service Agent` role for the topic. Format: `projects//locations//topics/`.

        :param topic: The topic of this GoogleCloudDialogflowV2NotificationConfig.
        :type topic: str
        """

        self._topic = topic
