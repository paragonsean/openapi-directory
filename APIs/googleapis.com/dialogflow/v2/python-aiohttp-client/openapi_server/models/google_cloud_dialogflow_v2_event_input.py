# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDialogflowV2EventInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language_code: str=None, name: str=None, parameters: Dict[str, object]=None):
        """GoogleCloudDialogflowV2EventInput - a model defined in OpenAPI

        :param language_code: The language_code of this GoogleCloudDialogflowV2EventInput.
        :param name: The name of this GoogleCloudDialogflowV2EventInput.
        :param parameters: The parameters of this GoogleCloudDialogflowV2EventInput.
        """
        self.openapi_types = {
            'language_code': str,
            'name': str,
            'parameters': Dict[str, object]
        }

        self.attribute_map = {
            'language_code': 'languageCode',
            'name': 'name',
            'parameters': 'parameters'
        }

        self._language_code = language_code
        self._name = name
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowV2EventInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowV2EventInput of this GoogleCloudDialogflowV2EventInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language_code(self):
        """Gets the language_code of this GoogleCloudDialogflowV2EventInput.

        Required. The language of this query. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language. This field is ignored when used in the context of a WebhookResponse.followup_event_input field, because the language was already defined in the originating detect intent request.

        :return: The language_code of this GoogleCloudDialogflowV2EventInput.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this GoogleCloudDialogflowV2EventInput.

        Required. The language of this query. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language. This field is ignored when used in the context of a WebhookResponse.followup_event_input field, because the language was already defined in the originating detect intent request.

        :param language_code: The language_code of this GoogleCloudDialogflowV2EventInput.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def name(self):
        """Gets the name of this GoogleCloudDialogflowV2EventInput.

        Required. The unique identifier of the event.

        :return: The name of this GoogleCloudDialogflowV2EventInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudDialogflowV2EventInput.

        Required. The unique identifier of the event.

        :param name: The name of this GoogleCloudDialogflowV2EventInput.
        :type name: str
        """

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this GoogleCloudDialogflowV2EventInput.

        The collection of parameters associated with the event. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value.

        :return: The parameters of this GoogleCloudDialogflowV2EventInput.
        :rtype: Dict[str, object]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this GoogleCloudDialogflowV2EventInput.

        The collection of parameters associated with the event. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value.

        :param parameters: The parameters of this GoogleCloudDialogflowV2EventInput.
        :type parameters: Dict[str, object]
        """

        self._parameters = parameters
