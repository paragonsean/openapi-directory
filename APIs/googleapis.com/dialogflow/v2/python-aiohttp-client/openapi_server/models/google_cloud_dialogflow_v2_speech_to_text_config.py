# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudDialogflowV2SpeechToTextConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model: str=None, speech_model_variant: str=None, use_timeout_based_endpointing: bool=None):
        """GoogleCloudDialogflowV2SpeechToTextConfig - a model defined in OpenAPI

        :param model: The model of this GoogleCloudDialogflowV2SpeechToTextConfig.
        :param speech_model_variant: The speech_model_variant of this GoogleCloudDialogflowV2SpeechToTextConfig.
        :param use_timeout_based_endpointing: The use_timeout_based_endpointing of this GoogleCloudDialogflowV2SpeechToTextConfig.
        """
        self.openapi_types = {
            'model': str,
            'speech_model_variant': str,
            'use_timeout_based_endpointing': bool
        }

        self.attribute_map = {
            'model': 'model',
            'speech_model_variant': 'speechModelVariant',
            'use_timeout_based_endpointing': 'useTimeoutBasedEndpointing'
        }

        self._model = model
        self._speech_model_variant = speech_model_variant
        self._use_timeout_based_endpointing = use_timeout_based_endpointing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudDialogflowV2SpeechToTextConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudDialogflowV2SpeechToTextConfig of this GoogleCloudDialogflowV2SpeechToTextConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model(self):
        """Gets the model of this GoogleCloudDialogflowV2SpeechToTextConfig.

        Which Speech model to select. Select the model best suited to your domain to get best results. If a model is not explicitly specified, then Dialogflow auto-selects a model based on other parameters in the SpeechToTextConfig and Agent settings. If enhanced speech model is enabled for the agent and an enhanced version of the specified model for the language does not exist, then the speech is recognized using the standard version of the specified model. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics#select-model) for more details. If you specify a model, the following models typically have the best performance: - phone_call (best for Agent Assist and telephony) - latest_short (best for Dialogflow non-telephony) - command_and_search Leave this field unspecified to use [Agent Speech settings](https://cloud.google.com/dialogflow/cx/docs/concept/agent#settings-speech) for model selection.

        :return: The model of this GoogleCloudDialogflowV2SpeechToTextConfig.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this GoogleCloudDialogflowV2SpeechToTextConfig.

        Which Speech model to select. Select the model best suited to your domain to get best results. If a model is not explicitly specified, then Dialogflow auto-selects a model based on other parameters in the SpeechToTextConfig and Agent settings. If enhanced speech model is enabled for the agent and an enhanced version of the specified model for the language does not exist, then the speech is recognized using the standard version of the specified model. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics#select-model) for more details. If you specify a model, the following models typically have the best performance: - phone_call (best for Agent Assist and telephony) - latest_short (best for Dialogflow non-telephony) - command_and_search Leave this field unspecified to use [Agent Speech settings](https://cloud.google.com/dialogflow/cx/docs/concept/agent#settings-speech) for model selection.

        :param model: The model of this GoogleCloudDialogflowV2SpeechToTextConfig.
        :type model: str
        """

        self._model = model

    @property
    def speech_model_variant(self):
        """Gets the speech_model_variant of this GoogleCloudDialogflowV2SpeechToTextConfig.

        The speech model used in speech to text. `SPEECH_MODEL_VARIANT_UNSPECIFIED`, `USE_BEST_AVAILABLE` will be treated as `USE_ENHANCED`. It can be overridden in AnalyzeContentRequest and StreamingAnalyzeContentRequest request. If enhanced model variant is specified and an enhanced version of the specified model for the language does not exist, then it would emit an error.

        :return: The speech_model_variant of this GoogleCloudDialogflowV2SpeechToTextConfig.
        :rtype: str
        """
        return self._speech_model_variant

    @speech_model_variant.setter
    def speech_model_variant(self, speech_model_variant):
        """Sets the speech_model_variant of this GoogleCloudDialogflowV2SpeechToTextConfig.

        The speech model used in speech to text. `SPEECH_MODEL_VARIANT_UNSPECIFIED`, `USE_BEST_AVAILABLE` will be treated as `USE_ENHANCED`. It can be overridden in AnalyzeContentRequest and StreamingAnalyzeContentRequest request. If enhanced model variant is specified and an enhanced version of the specified model for the language does not exist, then it would emit an error.

        :param speech_model_variant: The speech_model_variant of this GoogleCloudDialogflowV2SpeechToTextConfig.
        :type speech_model_variant: str
        """
        allowed_values = ["SPEECH_MODEL_VARIANT_UNSPECIFIED", "USE_BEST_AVAILABLE", "USE_STANDARD", "USE_ENHANCED"]  # noqa: E501
        if speech_model_variant not in allowed_values:
            raise ValueError(
                "Invalid value for `speech_model_variant` ({0}), must be one of {1}"
                .format(speech_model_variant, allowed_values)
            )

        self._speech_model_variant = speech_model_variant

    @property
    def use_timeout_based_endpointing(self):
        """Gets the use_timeout_based_endpointing of this GoogleCloudDialogflowV2SpeechToTextConfig.

        Use timeout based endpointing, interpreting endpointer sensitivy as seconds of timeout value.

        :return: The use_timeout_based_endpointing of this GoogleCloudDialogflowV2SpeechToTextConfig.
        :rtype: bool
        """
        return self._use_timeout_based_endpointing

    @use_timeout_based_endpointing.setter
    def use_timeout_based_endpointing(self, use_timeout_based_endpointing):
        """Sets the use_timeout_based_endpointing of this GoogleCloudDialogflowV2SpeechToTextConfig.

        Use timeout based endpointing, interpreting endpointer sensitivy as seconds of timeout value.

        :param use_timeout_based_endpointing: The use_timeout_based_endpointing of this GoogleCloudDialogflowV2SpeechToTextConfig.
        :type use_timeout_based_endpointing: bool
        """

        self._use_timeout_based_endpointing = use_timeout_based_endpointing
