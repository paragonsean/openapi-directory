/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDialogflowCxV3ConversationTurn from './GoogleCloudDialogflowCxV3ConversationTurn';
import GoogleCloudDialogflowCxV3TestCaseResult from './GoogleCloudDialogflowCxV3TestCaseResult';
import GoogleCloudDialogflowCxV3TestConfig from './GoogleCloudDialogflowCxV3TestConfig';

/**
 * The GoogleCloudDialogflowCxV3TestCase model module.
 * @module model/GoogleCloudDialogflowCxV3TestCase
 * @version v2
 */
class GoogleCloudDialogflowCxV3TestCase {
    /**
     * Constructs a new <code>GoogleCloudDialogflowCxV3TestCase</code>.
     * Represents a test case.
     * @alias module:model/GoogleCloudDialogflowCxV3TestCase
     */
    constructor() { 
        
        GoogleCloudDialogflowCxV3TestCase.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDialogflowCxV3TestCase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDialogflowCxV3TestCase} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDialogflowCxV3TestCase} The populated <code>GoogleCloudDialogflowCxV3TestCase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDialogflowCxV3TestCase();

            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('lastTestResult')) {
                obj['lastTestResult'] = GoogleCloudDialogflowCxV3TestCaseResult.constructFromObject(data['lastTestResult']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('testCaseConversationTurns')) {
                obj['testCaseConversationTurns'] = ApiClient.convertToType(data['testCaseConversationTurns'], [GoogleCloudDialogflowCxV3ConversationTurn]);
            }
            if (data.hasOwnProperty('testConfig')) {
                obj['testConfig'] = GoogleCloudDialogflowCxV3TestConfig.constructFromObject(data['testConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDialogflowCxV3TestCase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDialogflowCxV3TestCase</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['creationTime'] && !(typeof data['creationTime'] === 'string' || data['creationTime'] instanceof String)) {
            throw new Error("Expected the field `creationTime` to be a primitive type in the JSON string but got " + data['creationTime']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `lastTestResult`
        if (data['lastTestResult']) { // data not null
          GoogleCloudDialogflowCxV3TestCaseResult.validateJSON(data['lastTestResult']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        if (data['testCaseConversationTurns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['testCaseConversationTurns'])) {
                throw new Error("Expected the field `testCaseConversationTurns` to be an array in the JSON data but got " + data['testCaseConversationTurns']);
            }
            // validate the optional field `testCaseConversationTurns` (array)
            for (const item of data['testCaseConversationTurns']) {
                GoogleCloudDialogflowCxV3ConversationTurn.validateJSON(item);
            };
        }
        // validate the optional field `testConfig`
        if (data['testConfig']) { // data not null
          GoogleCloudDialogflowCxV3TestConfig.validateJSON(data['testConfig']);
        }

        return true;
    }


}



/**
 * Output only. When the test was created.
 * @member {String} creationTime
 */
GoogleCloudDialogflowCxV3TestCase.prototype['creationTime'] = undefined;

/**
 * Required. The human-readable name of the test case, unique within the agent. Limit of 200 characters.
 * @member {String} displayName
 */
GoogleCloudDialogflowCxV3TestCase.prototype['displayName'] = undefined;

/**
 * @member {module:model/GoogleCloudDialogflowCxV3TestCaseResult} lastTestResult
 */
GoogleCloudDialogflowCxV3TestCase.prototype['lastTestResult'] = undefined;

/**
 * The unique identifier of the test case. TestCases.CreateTestCase will populate the name automatically. Otherwise use format: `projects//locations//agents/ /testCases/`.
 * @member {String} name
 */
GoogleCloudDialogflowCxV3TestCase.prototype['name'] = undefined;

/**
 * Additional freeform notes about the test case. Limit of 400 characters.
 * @member {String} notes
 */
GoogleCloudDialogflowCxV3TestCase.prototype['notes'] = undefined;

/**
 * Tags are short descriptions that users may apply to test cases for organizational and filtering purposes. Each tag should start with \"#\" and has a limit of 30 characters.
 * @member {Array.<String>} tags
 */
GoogleCloudDialogflowCxV3TestCase.prototype['tags'] = undefined;

/**
 * The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
 * @member {Array.<module:model/GoogleCloudDialogflowCxV3ConversationTurn>} testCaseConversationTurns
 */
GoogleCloudDialogflowCxV3TestCase.prototype['testCaseConversationTurns'] = undefined;

/**
 * @member {module:model/GoogleCloudDialogflowCxV3TestConfig} testConfig
 */
GoogleCloudDialogflowCxV3TestCase.prototype['testConfig'] = undefined;






export default GoogleCloudDialogflowCxV3TestCase;

