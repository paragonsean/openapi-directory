/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDialogflowV2AgentAssistantRecord from './GoogleCloudDialogflowV2AgentAssistantRecord';
import GoogleCloudDialogflowV2AnswerFeedback from './GoogleCloudDialogflowV2AnswerFeedback';

/**
 * The GoogleCloudDialogflowV2AnswerRecord model module.
 * @module model/GoogleCloudDialogflowV2AnswerRecord
 * @version v2
 */
class GoogleCloudDialogflowV2AnswerRecord {
    /**
     * Constructs a new <code>GoogleCloudDialogflowV2AnswerRecord</code>.
     * Answer records are records to manage answer history and feedbacks for Dialogflow. Currently, answer record includes: - human agent assistant article suggestion - human agent assistant faq article It doesn&#39;t include: - &#x60;DetectIntent&#x60; intent matching - &#x60;DetectIntent&#x60; knowledge Answer records are not related to the conversation history in the Dialogflow Console. A Record is generated even when the end-user disables conversation history in the console. Records are created when there&#39;s a human agent assistant suggestion generated. A typical workflow for customers provide feedback to an answer is: 1. For human agent assistant, customers get suggestion via ListSuggestions API. Together with the answers, AnswerRecord.name are returned to the customers. 2. The customer uses the AnswerRecord.name to call the UpdateAnswerRecord method to send feedback about a specific answer that they believe is wrong.
     * @alias module:model/GoogleCloudDialogflowV2AnswerRecord
     */
    constructor() { 
        
        GoogleCloudDialogflowV2AnswerRecord.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDialogflowV2AnswerRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDialogflowV2AnswerRecord} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDialogflowV2AnswerRecord} The populated <code>GoogleCloudDialogflowV2AnswerRecord</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDialogflowV2AnswerRecord();

            if (data.hasOwnProperty('agentAssistantRecord')) {
                obj['agentAssistantRecord'] = GoogleCloudDialogflowV2AgentAssistantRecord.constructFromObject(data['agentAssistantRecord']);
            }
            if (data.hasOwnProperty('answerFeedback')) {
                obj['answerFeedback'] = GoogleCloudDialogflowV2AnswerFeedback.constructFromObject(data['answerFeedback']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDialogflowV2AnswerRecord</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDialogflowV2AnswerRecord</code>.
     */
    static validateJSON(data) {
        // validate the optional field `agentAssistantRecord`
        if (data['agentAssistantRecord']) { // data not null
          GoogleCloudDialogflowV2AgentAssistantRecord.validateJSON(data['agentAssistantRecord']);
        }
        // validate the optional field `answerFeedback`
        if (data['answerFeedback']) { // data not null
          GoogleCloudDialogflowV2AnswerFeedback.validateJSON(data['answerFeedback']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudDialogflowV2AgentAssistantRecord} agentAssistantRecord
 */
GoogleCloudDialogflowV2AnswerRecord.prototype['agentAssistantRecord'] = undefined;

/**
 * @member {module:model/GoogleCloudDialogflowV2AnswerFeedback} answerFeedback
 */
GoogleCloudDialogflowV2AnswerRecord.prototype['answerFeedback'] = undefined;

/**
 * The unique identifier of this answer record. Format: `projects//locations//answerRecords/`.
 * @member {String} name
 */
GoogleCloudDialogflowV2AnswerRecord.prototype['name'] = undefined;






export default GoogleCloudDialogflowV2AnswerRecord;

