/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDialogflowCxV3beta1AdvancedSettings from './GoogleCloudDialogflowCxV3beta1AdvancedSettings';
import GoogleCloudDialogflowCxV3beta1EventHandler from './GoogleCloudDialogflowCxV3beta1EventHandler';
import GoogleCloudDialogflowCxV3beta1Form from './GoogleCloudDialogflowCxV3beta1Form';
import GoogleCloudDialogflowCxV3beta1Fulfillment from './GoogleCloudDialogflowCxV3beta1Fulfillment';
import GoogleCloudDialogflowCxV3beta1KnowledgeConnectorSettings from './GoogleCloudDialogflowCxV3beta1KnowledgeConnectorSettings';
import GoogleCloudDialogflowCxV3beta1TransitionRoute from './GoogleCloudDialogflowCxV3beta1TransitionRoute';

/**
 * The GoogleCloudDialogflowCxV3beta1Page model module.
 * @module model/GoogleCloudDialogflowCxV3beta1Page
 * @version v2
 */
class GoogleCloudDialogflowCxV3beta1Page {
    /**
     * Constructs a new <code>GoogleCloudDialogflowCxV3beta1Page</code>.
     * A Dialogflow CX conversation (session) can be described and visualized as a state machine. The states of a CX session are represented by pages. For each flow, you define many pages, where your combined pages can handle a complete conversation on the topics the flow is designed for. At any given moment, exactly one page is the current page, the current page is considered active, and the flow associated with that page is considered active. Every flow has a special start page. When a flow initially becomes active, the start page page becomes the current page. For each conversational turn, the current page will either stay the same or transition to another page. You configure each page to collect information from the end-user that is relevant for the conversational state represented by the page. For more information, see the [Page guide](https://cloud.google.com/dialogflow/cx/docs/concept/page).
     * @alias module:model/GoogleCloudDialogflowCxV3beta1Page
     */
    constructor() { 
        
        GoogleCloudDialogflowCxV3beta1Page.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDialogflowCxV3beta1Page</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDialogflowCxV3beta1Page} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDialogflowCxV3beta1Page} The populated <code>GoogleCloudDialogflowCxV3beta1Page</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDialogflowCxV3beta1Page();

            if (data.hasOwnProperty('advancedSettings')) {
                obj['advancedSettings'] = GoogleCloudDialogflowCxV3beta1AdvancedSettings.constructFromObject(data['advancedSettings']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('entryFulfillment')) {
                obj['entryFulfillment'] = GoogleCloudDialogflowCxV3beta1Fulfillment.constructFromObject(data['entryFulfillment']);
            }
            if (data.hasOwnProperty('eventHandlers')) {
                obj['eventHandlers'] = ApiClient.convertToType(data['eventHandlers'], [GoogleCloudDialogflowCxV3beta1EventHandler]);
            }
            if (data.hasOwnProperty('form')) {
                obj['form'] = GoogleCloudDialogflowCxV3beta1Form.constructFromObject(data['form']);
            }
            if (data.hasOwnProperty('knowledgeConnectorSettings')) {
                obj['knowledgeConnectorSettings'] = GoogleCloudDialogflowCxV3beta1KnowledgeConnectorSettings.constructFromObject(data['knowledgeConnectorSettings']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('transitionRouteGroups')) {
                obj['transitionRouteGroups'] = ApiClient.convertToType(data['transitionRouteGroups'], ['String']);
            }
            if (data.hasOwnProperty('transitionRoutes')) {
                obj['transitionRoutes'] = ApiClient.convertToType(data['transitionRoutes'], [GoogleCloudDialogflowCxV3beta1TransitionRoute]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDialogflowCxV3beta1Page</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDialogflowCxV3beta1Page</code>.
     */
    static validateJSON(data) {
        // validate the optional field `advancedSettings`
        if (data['advancedSettings']) { // data not null
          GoogleCloudDialogflowCxV3beta1AdvancedSettings.validateJSON(data['advancedSettings']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `entryFulfillment`
        if (data['entryFulfillment']) { // data not null
          GoogleCloudDialogflowCxV3beta1Fulfillment.validateJSON(data['entryFulfillment']);
        }
        if (data['eventHandlers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['eventHandlers'])) {
                throw new Error("Expected the field `eventHandlers` to be an array in the JSON data but got " + data['eventHandlers']);
            }
            // validate the optional field `eventHandlers` (array)
            for (const item of data['eventHandlers']) {
                GoogleCloudDialogflowCxV3beta1EventHandler.validateJSON(item);
            };
        }
        // validate the optional field `form`
        if (data['form']) { // data not null
          GoogleCloudDialogflowCxV3beta1Form.validateJSON(data['form']);
        }
        // validate the optional field `knowledgeConnectorSettings`
        if (data['knowledgeConnectorSettings']) { // data not null
          GoogleCloudDialogflowCxV3beta1KnowledgeConnectorSettings.validateJSON(data['knowledgeConnectorSettings']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['transitionRouteGroups'])) {
            throw new Error("Expected the field `transitionRouteGroups` to be an array in the JSON data but got " + data['transitionRouteGroups']);
        }
        if (data['transitionRoutes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transitionRoutes'])) {
                throw new Error("Expected the field `transitionRoutes` to be an array in the JSON data but got " + data['transitionRoutes']);
            }
            // validate the optional field `transitionRoutes` (array)
            for (const item of data['transitionRoutes']) {
                GoogleCloudDialogflowCxV3beta1TransitionRoute.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudDialogflowCxV3beta1AdvancedSettings} advancedSettings
 */
GoogleCloudDialogflowCxV3beta1Page.prototype['advancedSettings'] = undefined;

/**
 * The description of the page. The maximum length is 500 characters.
 * @member {String} description
 */
GoogleCloudDialogflowCxV3beta1Page.prototype['description'] = undefined;

/**
 * Required. The human-readable name of the page, unique within the flow.
 * @member {String} displayName
 */
GoogleCloudDialogflowCxV3beta1Page.prototype['displayName'] = undefined;

/**
 * @member {module:model/GoogleCloudDialogflowCxV3beta1Fulfillment} entryFulfillment
 */
GoogleCloudDialogflowCxV3beta1Page.prototype['entryFulfillment'] = undefined;

/**
 * Handlers associated with the page to handle events such as webhook errors, no match or no input.
 * @member {Array.<module:model/GoogleCloudDialogflowCxV3beta1EventHandler>} eventHandlers
 */
GoogleCloudDialogflowCxV3beta1Page.prototype['eventHandlers'] = undefined;

/**
 * @member {module:model/GoogleCloudDialogflowCxV3beta1Form} form
 */
GoogleCloudDialogflowCxV3beta1Page.prototype['form'] = undefined;

/**
 * @member {module:model/GoogleCloudDialogflowCxV3beta1KnowledgeConnectorSettings} knowledgeConnectorSettings
 */
GoogleCloudDialogflowCxV3beta1Page.prototype['knowledgeConnectorSettings'] = undefined;

/**
 * The unique identifier of the page. Required for the Pages.UpdatePage method. Pages.CreatePage populates the name automatically. Format: `projects//locations//agents//flows//pages/`.
 * @member {String} name
 */
GoogleCloudDialogflowCxV3beta1Page.prototype['name'] = undefined;

/**
 * Ordered list of `TransitionRouteGroups` added to the page. Transition route groups must be unique within a page. If the page links both flow-level transition route groups and agent-level transition route groups, the flow-level ones will have higher priority and will be put before the agent-level ones. * If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route -> page's transition route group -> flow's transition routes. * If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence. Format:`projects//locations//agents//flows//transitionRouteGroups/` or `projects//locations//agents//transitionRouteGroups/` for agent-level groups.
 * @member {Array.<String>} transitionRouteGroups
 */
GoogleCloudDialogflowCxV3beta1Page.prototype['transitionRouteGroups'] = undefined;

/**
 * A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow. When we are in a certain page, the TransitionRoutes are evalauted in the following order: * TransitionRoutes defined in the page with intent specified. * TransitionRoutes defined in the transition route groups with intent specified. * TransitionRoutes defined in flow with intent specified. * TransitionRoutes defined in the transition route groups with intent specified. * TransitionRoutes defined in the page with only condition specified. * TransitionRoutes defined in the transition route groups with only condition specified.
 * @member {Array.<module:model/GoogleCloudDialogflowCxV3beta1TransitionRoute>} transitionRoutes
 */
GoogleCloudDialogflowCxV3beta1Page.prototype['transitionRoutes'] = undefined;






export default GoogleCloudDialogflowCxV3beta1Page;

