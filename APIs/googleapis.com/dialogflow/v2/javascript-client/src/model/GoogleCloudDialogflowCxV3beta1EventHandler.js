/**
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudDialogflowCxV3beta1Fulfillment from './GoogleCloudDialogflowCxV3beta1Fulfillment';

/**
 * The GoogleCloudDialogflowCxV3beta1EventHandler model module.
 * @module model/GoogleCloudDialogflowCxV3beta1EventHandler
 * @version v2
 */
class GoogleCloudDialogflowCxV3beta1EventHandler {
    /**
     * Constructs a new <code>GoogleCloudDialogflowCxV3beta1EventHandler</code>.
     * An event handler specifies an event that can be handled during a session. When the specified event happens, the following actions are taken in order: * If there is a &#x60;trigger_fulfillment&#x60; associated with the event, it will be called. * If there is a &#x60;target_page&#x60; associated with the event, the session will transition into the specified page. * If there is a &#x60;target_flow&#x60; associated with the event, the session will transition into the specified flow.
     * @alias module:model/GoogleCloudDialogflowCxV3beta1EventHandler
     */
    constructor() { 
        
        GoogleCloudDialogflowCxV3beta1EventHandler.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudDialogflowCxV3beta1EventHandler</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudDialogflowCxV3beta1EventHandler} obj Optional instance to populate.
     * @return {module:model/GoogleCloudDialogflowCxV3beta1EventHandler} The populated <code>GoogleCloudDialogflowCxV3beta1EventHandler</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudDialogflowCxV3beta1EventHandler();

            if (data.hasOwnProperty('event')) {
                obj['event'] = ApiClient.convertToType(data['event'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('targetFlow')) {
                obj['targetFlow'] = ApiClient.convertToType(data['targetFlow'], 'String');
            }
            if (data.hasOwnProperty('targetPage')) {
                obj['targetPage'] = ApiClient.convertToType(data['targetPage'], 'String');
            }
            if (data.hasOwnProperty('triggerFulfillment')) {
                obj['triggerFulfillment'] = GoogleCloudDialogflowCxV3beta1Fulfillment.constructFromObject(data['triggerFulfillment']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudDialogflowCxV3beta1EventHandler</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudDialogflowCxV3beta1EventHandler</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['event'] && !(typeof data['event'] === 'string' || data['event'] instanceof String)) {
            throw new Error("Expected the field `event` to be a primitive type in the JSON string but got " + data['event']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['targetFlow'] && !(typeof data['targetFlow'] === 'string' || data['targetFlow'] instanceof String)) {
            throw new Error("Expected the field `targetFlow` to be a primitive type in the JSON string but got " + data['targetFlow']);
        }
        // ensure the json data is a string
        if (data['targetPage'] && !(typeof data['targetPage'] === 'string' || data['targetPage'] instanceof String)) {
            throw new Error("Expected the field `targetPage` to be a primitive type in the JSON string but got " + data['targetPage']);
        }
        // validate the optional field `triggerFulfillment`
        if (data['triggerFulfillment']) { // data not null
          GoogleCloudDialogflowCxV3beta1Fulfillment.validateJSON(data['triggerFulfillment']);
        }

        return true;
    }


}



/**
 * Required. The name of the event to handle.
 * @member {String} event
 */
GoogleCloudDialogflowCxV3beta1EventHandler.prototype['event'] = undefined;

/**
 * Output only. The unique identifier of this event handler.
 * @member {String} name
 */
GoogleCloudDialogflowCxV3beta1EventHandler.prototype['name'] = undefined;

/**
 * The target flow to transition to. Format: `projects//locations//agents//flows/`.
 * @member {String} targetFlow
 */
GoogleCloudDialogflowCxV3beta1EventHandler.prototype['targetFlow'] = undefined;

/**
 * The target page to transition to. Format: `projects//locations//agents//flows//pages/`.
 * @member {String} targetPage
 */
GoogleCloudDialogflowCxV3beta1EventHandler.prototype['targetPage'] = undefined;

/**
 * @member {module:model/GoogleCloudDialogflowCxV3beta1Fulfillment} triggerFulfillment
 */
GoogleCloudDialogflowCxV3beta1EventHandler.prototype['triggerFulfillment'] = undefined;






export default GoogleCloudDialogflowCxV3beta1EventHandler;

