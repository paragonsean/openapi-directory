/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudDialogflowV2Context;
import org.openapitools.client.model.GoogleCloudDialogflowV2SentimentAnalysisRequestConfig;
import org.openapitools.client.model.GoogleCloudDialogflowV2SessionEntityType;
import org.openapitools.client.model.GoogleTypeLatLng;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for GoogleCloudDialogflowV2QueryParameters
 */
public class GoogleCloudDialogflowV2QueryParametersTest {
    private final GoogleCloudDialogflowV2QueryParameters model = new GoogleCloudDialogflowV2QueryParameters();

    /**
     * Model tests for GoogleCloudDialogflowV2QueryParameters
     */
    @Test
    public void testGoogleCloudDialogflowV2QueryParameters() {
        // TODO: test GoogleCloudDialogflowV2QueryParameters
    }

    /**
     * Test the property 'contexts'
     */
    @Test
    public void contextsTest() {
        // TODO: test contexts
    }

    /**
     * Test the property 'geoLocation'
     */
    @Test
    public void geoLocationTest() {
        // TODO: test geoLocation
    }

    /**
     * Test the property 'payload'
     */
    @Test
    public void payloadTest() {
        // TODO: test payload
    }

    /**
     * Test the property 'platform'
     */
    @Test
    public void platformTest() {
        // TODO: test platform
    }

    /**
     * Test the property 'resetContexts'
     */
    @Test
    public void resetContextsTest() {
        // TODO: test resetContexts
    }

    /**
     * Test the property 'sentimentAnalysisRequestConfig'
     */
    @Test
    public void sentimentAnalysisRequestConfigTest() {
        // TODO: test sentimentAnalysisRequestConfig
    }

    /**
     * Test the property 'sessionEntityTypes'
     */
    @Test
    public void sessionEntityTypesTest() {
        // TODO: test sessionEntityTypes
    }

    /**
     * Test the property 'timeZone'
     */
    @Test
    public void timeZoneTest() {
        // TODO: test timeZone
    }

    /**
     * Test the property 'webhookHeaders'
     */
    @Test
    public void webhookHeadersTest() {
        // TODO: test webhookHeaders
    }

}
