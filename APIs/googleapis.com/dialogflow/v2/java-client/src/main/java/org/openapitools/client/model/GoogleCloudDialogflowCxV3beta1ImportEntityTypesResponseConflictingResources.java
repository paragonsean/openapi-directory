/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Conflicting resources detected during the import process. Only filled when REPORT_CONFLICT is set in the request and there are conflicts in the display names.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:05.098863-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources {
  public static final String SERIALIZED_NAME_ENTITY_DISPLAY_NAMES = "entityDisplayNames";
  @SerializedName(SERIALIZED_NAME_ENTITY_DISPLAY_NAMES)
  private List<String> entityDisplayNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTITY_TYPE_DISPLAY_NAMES = "entityTypeDisplayNames";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE_DISPLAY_NAMES)
  private List<String> entityTypeDisplayNames = new ArrayList<>();

  public GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources() {
  }

  public GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources entityDisplayNames(List<String> entityDisplayNames) {
    this.entityDisplayNames = entityDisplayNames;
    return this;
  }

  public GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources addEntityDisplayNamesItem(String entityDisplayNamesItem) {
    if (this.entityDisplayNames == null) {
      this.entityDisplayNames = new ArrayList<>();
    }
    this.entityDisplayNames.add(entityDisplayNamesItem);
    return this;
  }

  /**
   * Display names of conflicting entities.
   * @return entityDisplayNames
   */
  @javax.annotation.Nullable
  public List<String> getEntityDisplayNames() {
    return entityDisplayNames;
  }

  public void setEntityDisplayNames(List<String> entityDisplayNames) {
    this.entityDisplayNames = entityDisplayNames;
  }


  public GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources entityTypeDisplayNames(List<String> entityTypeDisplayNames) {
    this.entityTypeDisplayNames = entityTypeDisplayNames;
    return this;
  }

  public GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources addEntityTypeDisplayNamesItem(String entityTypeDisplayNamesItem) {
    if (this.entityTypeDisplayNames == null) {
      this.entityTypeDisplayNames = new ArrayList<>();
    }
    this.entityTypeDisplayNames.add(entityTypeDisplayNamesItem);
    return this;
  }

  /**
   * Display names of conflicting entity types.
   * @return entityTypeDisplayNames
   */
  @javax.annotation.Nullable
  public List<String> getEntityTypeDisplayNames() {
    return entityTypeDisplayNames;
  }

  public void setEntityTypeDisplayNames(List<String> entityTypeDisplayNames) {
    this.entityTypeDisplayNames = entityTypeDisplayNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources googleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources = (GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources) o;
    return Objects.equals(this.entityDisplayNames, googleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources.entityDisplayNames) &&
        Objects.equals(this.entityTypeDisplayNames, googleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources.entityTypeDisplayNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityDisplayNames, entityTypeDisplayNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources {\n");
    sb.append("    entityDisplayNames: ").append(toIndentedString(entityDisplayNames)).append("\n");
    sb.append("    entityTypeDisplayNames: ").append(toIndentedString(entityTypeDisplayNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entityDisplayNames");
    openapiFields.add("entityTypeDisplayNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources is not found in the empty JSON string", GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("entityDisplayNames") != null && !jsonObj.get("entityDisplayNames").isJsonNull() && !jsonObj.get("entityDisplayNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityDisplayNames` to be an array in the JSON string but got `%s`", jsonObj.get("entityDisplayNames").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("entityTypeDisplayNames") != null && !jsonObj.get("entityTypeDisplayNames").isJsonNull() && !jsonObj.get("entityTypeDisplayNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityTypeDisplayNames` to be an array in the JSON string but got `%s`", jsonObj.get("entityTypeDisplayNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources
   */
  public static GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3beta1ImportEntityTypesResponseConflictingResources to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

