/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a conversation participant (human agent, virtual agent, end-user).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:05.098863-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowV2Participant {
  public static final String SERIALIZED_NAME_DOCUMENTS_METADATA_FILTERS = "documentsMetadataFilters";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS_METADATA_FILTERS)
  private Map<String, String> documentsMetadataFilters = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OBFUSCATED_EXTERNAL_USER_ID = "obfuscatedExternalUserId";
  @SerializedName(SERIALIZED_NAME_OBFUSCATED_EXTERNAL_USER_ID)
  private String obfuscatedExternalUserId;

  /**
   * Immutable. The role this participant plays in the conversation. This field must be set during participant creation and is then immutable.
   */
  @JsonAdapter(RoleEnum.Adapter.class)
  public enum RoleEnum {
    ROLE_UNSPECIFIED("ROLE_UNSPECIFIED"),
    
    HUMAN_AGENT("HUMAN_AGENT"),
    
    AUTOMATED_AGENT("AUTOMATED_AGENT"),
    
    END_USER("END_USER");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private RoleEnum role;

  public static final String SERIALIZED_NAME_SIP_RECORDING_MEDIA_LABEL = "sipRecordingMediaLabel";
  @SerializedName(SERIALIZED_NAME_SIP_RECORDING_MEDIA_LABEL)
  private String sipRecordingMediaLabel;

  public GoogleCloudDialogflowV2Participant() {
  }

  public GoogleCloudDialogflowV2Participant documentsMetadataFilters(Map<String, String> documentsMetadataFilters) {
    this.documentsMetadataFilters = documentsMetadataFilters;
    return this;
  }

  public GoogleCloudDialogflowV2Participant putDocumentsMetadataFiltersItem(String key, String documentsMetadataFiltersItem) {
    if (this.documentsMetadataFilters == null) {
      this.documentsMetadataFilters = new HashMap<>();
    }
    this.documentsMetadataFilters.put(key, documentsMetadataFiltersItem);
    return this;
  }

  /**
   * Optional. Key-value filters on the metadata of documents returned by article suggestion. If specified, article suggestion only returns suggested documents that match all filters in their Document.metadata. Multiple values for a metadata key should be concatenated by comma. For example, filters to match all documents that have &#39;US&#39; or &#39;CA&#39; in their market metadata values and &#39;agent&#39; in their user metadata values will be &#x60;&#x60;&#x60; documents_metadata_filters { key: \&quot;market\&quot; value: \&quot;US,CA\&quot; } documents_metadata_filters { key: \&quot;user\&quot; value: \&quot;agent\&quot; } &#x60;&#x60;&#x60;
   * @return documentsMetadataFilters
   */
  @javax.annotation.Nullable
  public Map<String, String> getDocumentsMetadataFilters() {
    return documentsMetadataFilters;
  }

  public void setDocumentsMetadataFilters(Map<String, String> documentsMetadataFilters) {
    this.documentsMetadataFilters = documentsMetadataFilters;
  }


  public GoogleCloudDialogflowV2Participant name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. The unique identifier of this participant. Format: &#x60;projects//locations//conversations//participants/&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudDialogflowV2Participant obfuscatedExternalUserId(String obfuscatedExternalUserId) {
    this.obfuscatedExternalUserId = obfuscatedExternalUserId;
    return this;
  }

  /**
   * Optional. Obfuscated user id that should be associated with the created participant. You can specify a user id as follows: 1. If you set this field in CreateParticipantRequest or UpdateParticipantRequest, Dialogflow adds the obfuscated user id with the participant. 2. If you set this field in AnalyzeContent or StreamingAnalyzeContent, Dialogflow will update Participant.obfuscated_external_user_id. Dialogflow returns an error if you try to add a user id for a non-END_USER participant. Dialogflow uses this user id for billing and measurement purposes. For example, Dialogflow determines whether a user in one conversation returned in a later conversation. Note: * Please never pass raw user ids to Dialogflow. Always obfuscate your user id first. * Dialogflow only accepts a UTF-8 encoded string, e.g., a hex digest of a hash function like SHA-512. * The length of the user id must be &lt;&#x3D; 256 characters.
   * @return obfuscatedExternalUserId
   */
  @javax.annotation.Nullable
  public String getObfuscatedExternalUserId() {
    return obfuscatedExternalUserId;
  }

  public void setObfuscatedExternalUserId(String obfuscatedExternalUserId) {
    this.obfuscatedExternalUserId = obfuscatedExternalUserId;
  }


  public GoogleCloudDialogflowV2Participant role(RoleEnum role) {
    this.role = role;
    return this;
  }

  /**
   * Immutable. The role this participant plays in the conversation. This field must be set during participant creation and is then immutable.
   * @return role
   */
  @javax.annotation.Nullable
  public RoleEnum getRole() {
    return role;
  }

  public void setRole(RoleEnum role) {
    this.role = role;
  }


  public GoogleCloudDialogflowV2Participant sipRecordingMediaLabel(String sipRecordingMediaLabel) {
    this.sipRecordingMediaLabel = sipRecordingMediaLabel;
    return this;
  }

  /**
   * Optional. Label applied to streams representing this participant in SIPREC XML metadata and SDP. This is used to assign transcriptions from that media stream to this participant. This field can be updated.
   * @return sipRecordingMediaLabel
   */
  @javax.annotation.Nullable
  public String getSipRecordingMediaLabel() {
    return sipRecordingMediaLabel;
  }

  public void setSipRecordingMediaLabel(String sipRecordingMediaLabel) {
    this.sipRecordingMediaLabel = sipRecordingMediaLabel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowV2Participant googleCloudDialogflowV2Participant = (GoogleCloudDialogflowV2Participant) o;
    return Objects.equals(this.documentsMetadataFilters, googleCloudDialogflowV2Participant.documentsMetadataFilters) &&
        Objects.equals(this.name, googleCloudDialogflowV2Participant.name) &&
        Objects.equals(this.obfuscatedExternalUserId, googleCloudDialogflowV2Participant.obfuscatedExternalUserId) &&
        Objects.equals(this.role, googleCloudDialogflowV2Participant.role) &&
        Objects.equals(this.sipRecordingMediaLabel, googleCloudDialogflowV2Participant.sipRecordingMediaLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentsMetadataFilters, name, obfuscatedExternalUserId, role, sipRecordingMediaLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowV2Participant {\n");
    sb.append("    documentsMetadataFilters: ").append(toIndentedString(documentsMetadataFilters)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    obfuscatedExternalUserId: ").append(toIndentedString(obfuscatedExternalUserId)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    sipRecordingMediaLabel: ").append(toIndentedString(sipRecordingMediaLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentsMetadataFilters");
    openapiFields.add("name");
    openapiFields.add("obfuscatedExternalUserId");
    openapiFields.add("role");
    openapiFields.add("sipRecordingMediaLabel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowV2Participant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowV2Participant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowV2Participant is not found in the empty JSON string", GoogleCloudDialogflowV2Participant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowV2Participant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowV2Participant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("obfuscatedExternalUserId") != null && !jsonObj.get("obfuscatedExternalUserId").isJsonNull()) && !jsonObj.get("obfuscatedExternalUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `obfuscatedExternalUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("obfuscatedExternalUserId").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // validate the optional field `role`
      if (jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) {
        RoleEnum.validateJsonElement(jsonObj.get("role"));
      }
      if ((jsonObj.get("sipRecordingMediaLabel") != null && !jsonObj.get("sipRecordingMediaLabel").isJsonNull()) && !jsonObj.get("sipRecordingMediaLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sipRecordingMediaLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sipRecordingMediaLabel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowV2Participant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowV2Participant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowV2Participant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowV2Participant.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowV2Participant>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowV2Participant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowV2Participant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowV2Participant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowV2Participant
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowV2Participant
   */
  public static GoogleCloudDialogflowV2Participant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowV2Participant.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowV2Participant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

