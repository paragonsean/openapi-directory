/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3beta1Fulfillment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An event handler specifies an event that can be handled during a session. When the specified event happens, the following actions are taken in order: * If there is a &#x60;trigger_fulfillment&#x60; associated with the event, it will be called. * If there is a &#x60;target_page&#x60; associated with the event, the session will transition into the specified page. * If there is a &#x60;target_flow&#x60; associated with the event, the session will transition into the specified flow.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:05.098863-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3beta1EventHandler {
  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private String event;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TARGET_FLOW = "targetFlow";
  @SerializedName(SERIALIZED_NAME_TARGET_FLOW)
  private String targetFlow;

  public static final String SERIALIZED_NAME_TARGET_PAGE = "targetPage";
  @SerializedName(SERIALIZED_NAME_TARGET_PAGE)
  private String targetPage;

  public static final String SERIALIZED_NAME_TRIGGER_FULFILLMENT = "triggerFulfillment";
  @SerializedName(SERIALIZED_NAME_TRIGGER_FULFILLMENT)
  private GoogleCloudDialogflowCxV3beta1Fulfillment triggerFulfillment;

  public GoogleCloudDialogflowCxV3beta1EventHandler() {
  }

  public GoogleCloudDialogflowCxV3beta1EventHandler(
     String name
  ) {
    this();
    this.name = name;
  }

  public GoogleCloudDialogflowCxV3beta1EventHandler event(String event) {
    this.event = event;
    return this;
  }

  /**
   * Required. The name of the event to handle.
   * @return event
   */
  @javax.annotation.Nullable
  public String getEvent() {
    return event;
  }

  public void setEvent(String event) {
    this.event = event;
  }


  /**
   * Output only. The unique identifier of this event handler.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public GoogleCloudDialogflowCxV3beta1EventHandler targetFlow(String targetFlow) {
    this.targetFlow = targetFlow;
    return this;
  }

  /**
   * The target flow to transition to. Format: &#x60;projects//locations//agents//flows/&#x60;.
   * @return targetFlow
   */
  @javax.annotation.Nullable
  public String getTargetFlow() {
    return targetFlow;
  }

  public void setTargetFlow(String targetFlow) {
    this.targetFlow = targetFlow;
  }


  public GoogleCloudDialogflowCxV3beta1EventHandler targetPage(String targetPage) {
    this.targetPage = targetPage;
    return this;
  }

  /**
   * The target page to transition to. Format: &#x60;projects//locations//agents//flows//pages/&#x60;.
   * @return targetPage
   */
  @javax.annotation.Nullable
  public String getTargetPage() {
    return targetPage;
  }

  public void setTargetPage(String targetPage) {
    this.targetPage = targetPage;
  }


  public GoogleCloudDialogflowCxV3beta1EventHandler triggerFulfillment(GoogleCloudDialogflowCxV3beta1Fulfillment triggerFulfillment) {
    this.triggerFulfillment = triggerFulfillment;
    return this;
  }

  /**
   * Get triggerFulfillment
   * @return triggerFulfillment
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowCxV3beta1Fulfillment getTriggerFulfillment() {
    return triggerFulfillment;
  }

  public void setTriggerFulfillment(GoogleCloudDialogflowCxV3beta1Fulfillment triggerFulfillment) {
    this.triggerFulfillment = triggerFulfillment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3beta1EventHandler googleCloudDialogflowCxV3beta1EventHandler = (GoogleCloudDialogflowCxV3beta1EventHandler) o;
    return Objects.equals(this.event, googleCloudDialogflowCxV3beta1EventHandler.event) &&
        Objects.equals(this.name, googleCloudDialogflowCxV3beta1EventHandler.name) &&
        Objects.equals(this.targetFlow, googleCloudDialogflowCxV3beta1EventHandler.targetFlow) &&
        Objects.equals(this.targetPage, googleCloudDialogflowCxV3beta1EventHandler.targetPage) &&
        Objects.equals(this.triggerFulfillment, googleCloudDialogflowCxV3beta1EventHandler.triggerFulfillment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(event, name, targetFlow, targetPage, triggerFulfillment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3beta1EventHandler {\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    targetFlow: ").append(toIndentedString(targetFlow)).append("\n");
    sb.append("    targetPage: ").append(toIndentedString(targetPage)).append("\n");
    sb.append("    triggerFulfillment: ").append(toIndentedString(triggerFulfillment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("event");
    openapiFields.add("name");
    openapiFields.add("targetFlow");
    openapiFields.add("targetPage");
    openapiFields.add("triggerFulfillment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3beta1EventHandler
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3beta1EventHandler.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3beta1EventHandler is not found in the empty JSON string", GoogleCloudDialogflowCxV3beta1EventHandler.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3beta1EventHandler.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3beta1EventHandler` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("event") != null && !jsonObj.get("event").isJsonNull()) && !jsonObj.get("event").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("targetFlow") != null && !jsonObj.get("targetFlow").isJsonNull()) && !jsonObj.get("targetFlow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetFlow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetFlow").toString()));
      }
      if ((jsonObj.get("targetPage") != null && !jsonObj.get("targetPage").isJsonNull()) && !jsonObj.get("targetPage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetPage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetPage").toString()));
      }
      // validate the optional field `triggerFulfillment`
      if (jsonObj.get("triggerFulfillment") != null && !jsonObj.get("triggerFulfillment").isJsonNull()) {
        GoogleCloudDialogflowCxV3beta1Fulfillment.validateJsonElement(jsonObj.get("triggerFulfillment"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3beta1EventHandler.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3beta1EventHandler' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3beta1EventHandler> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3beta1EventHandler.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3beta1EventHandler>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3beta1EventHandler value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3beta1EventHandler read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3beta1EventHandler given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3beta1EventHandler
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3beta1EventHandler
   */
  public static GoogleCloudDialogflowCxV3beta1EventHandler fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3beta1EventHandler.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3beta1EventHandler to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

