/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDialogflowV2ConversationPhoneNumber;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a conversation. A conversation is an interaction between an agent, including live agents and Dialogflow agents, and a support customer. Conversations can include phone calls and text-based chat sessions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:05.098863-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowV2Conversation {
  public static final String SERIALIZED_NAME_CONVERSATION_PROFILE = "conversationProfile";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_PROFILE)
  private String conversationProfile;

  /**
   * The stage of a conversation. It indicates whether the virtual agent or a human agent is handling the conversation. If the conversation is created with the conversation profile that has Dialogflow config set, defaults to ConversationStage.VIRTUAL_AGENT_STAGE; Otherwise, defaults to ConversationStage.HUMAN_ASSIST_STAGE. If the conversation is created with the conversation profile that has Dialogflow config set but explicitly sets conversation_stage to ConversationStage.HUMAN_ASSIST_STAGE, it skips ConversationStage.VIRTUAL_AGENT_STAGE stage and directly goes to ConversationStage.HUMAN_ASSIST_STAGE.
   */
  @JsonAdapter(ConversationStageEnum.Adapter.class)
  public enum ConversationStageEnum {
    CONVERSATION_STAGE_UNSPECIFIED("CONVERSATION_STAGE_UNSPECIFIED"),
    
    VIRTUAL_AGENT_STAGE("VIRTUAL_AGENT_STAGE"),
    
    HUMAN_ASSIST_STAGE("HUMAN_ASSIST_STAGE");

    private String value;

    ConversationStageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConversationStageEnum fromValue(String value) {
      for (ConversationStageEnum b : ConversationStageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConversationStageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConversationStageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConversationStageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConversationStageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConversationStageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONVERSATION_STAGE = "conversationStage";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_STAGE)
  private ConversationStageEnum conversationStage;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  /**
   * Output only. The current state of the Conversation.
   */
  @JsonAdapter(LifecycleStateEnum.Adapter.class)
  public enum LifecycleStateEnum {
    LIFECYCLE_STATE_UNSPECIFIED("LIFECYCLE_STATE_UNSPECIFIED"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    COMPLETED("COMPLETED");

    private String value;

    LifecycleStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LifecycleStateEnum fromValue(String value) {
      for (LifecycleStateEnum b : LifecycleStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LifecycleStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LifecycleStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LifecycleStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LifecycleStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LifecycleStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LIFECYCLE_STATE = "lifecycleState";
  @SerializedName(SERIALIZED_NAME_LIFECYCLE_STATE)
  private LifecycleStateEnum lifecycleState;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private GoogleCloudDialogflowV2ConversationPhoneNumber phoneNumber;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public GoogleCloudDialogflowV2Conversation() {
  }

  public GoogleCloudDialogflowV2Conversation(
     String endTime, 
     LifecycleStateEnum lifecycleState, 
     String name, 
     String startTime
  ) {
    this();
    this.endTime = endTime;
    this.lifecycleState = lifecycleState;
    this.name = name;
    this.startTime = startTime;
  }

  public GoogleCloudDialogflowV2Conversation conversationProfile(String conversationProfile) {
    this.conversationProfile = conversationProfile;
    return this;
  }

  /**
   * Required. The Conversation Profile to be used to configure this Conversation. This field cannot be updated. Format: &#x60;projects//locations//conversationProfiles/&#x60;.
   * @return conversationProfile
   */
  @javax.annotation.Nullable
  public String getConversationProfile() {
    return conversationProfile;
  }

  public void setConversationProfile(String conversationProfile) {
    this.conversationProfile = conversationProfile;
  }


  public GoogleCloudDialogflowV2Conversation conversationStage(ConversationStageEnum conversationStage) {
    this.conversationStage = conversationStage;
    return this;
  }

  /**
   * The stage of a conversation. It indicates whether the virtual agent or a human agent is handling the conversation. If the conversation is created with the conversation profile that has Dialogflow config set, defaults to ConversationStage.VIRTUAL_AGENT_STAGE; Otherwise, defaults to ConversationStage.HUMAN_ASSIST_STAGE. If the conversation is created with the conversation profile that has Dialogflow config set but explicitly sets conversation_stage to ConversationStage.HUMAN_ASSIST_STAGE, it skips ConversationStage.VIRTUAL_AGENT_STAGE stage and directly goes to ConversationStage.HUMAN_ASSIST_STAGE.
   * @return conversationStage
   */
  @javax.annotation.Nullable
  public ConversationStageEnum getConversationStage() {
    return conversationStage;
  }

  public void setConversationStage(ConversationStageEnum conversationStage) {
    this.conversationStage = conversationStage;
  }


  /**
   * Output only. The time the conversation was finished.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }



  /**
   * Output only. The current state of the Conversation.
   * @return lifecycleState
   */
  @javax.annotation.Nullable
  public LifecycleStateEnum getLifecycleState() {
    return lifecycleState;
  }



  /**
   * Output only. The unique identifier of this conversation. Format: &#x60;projects//locations//conversations/&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public GoogleCloudDialogflowV2Conversation phoneNumber(GoogleCloudDialogflowV2ConversationPhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowV2ConversationPhoneNumber getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(GoogleCloudDialogflowV2ConversationPhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  /**
   * Output only. The time the conversation was started.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowV2Conversation googleCloudDialogflowV2Conversation = (GoogleCloudDialogflowV2Conversation) o;
    return Objects.equals(this.conversationProfile, googleCloudDialogflowV2Conversation.conversationProfile) &&
        Objects.equals(this.conversationStage, googleCloudDialogflowV2Conversation.conversationStage) &&
        Objects.equals(this.endTime, googleCloudDialogflowV2Conversation.endTime) &&
        Objects.equals(this.lifecycleState, googleCloudDialogflowV2Conversation.lifecycleState) &&
        Objects.equals(this.name, googleCloudDialogflowV2Conversation.name) &&
        Objects.equals(this.phoneNumber, googleCloudDialogflowV2Conversation.phoneNumber) &&
        Objects.equals(this.startTime, googleCloudDialogflowV2Conversation.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conversationProfile, conversationStage, endTime, lifecycleState, name, phoneNumber, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowV2Conversation {\n");
    sb.append("    conversationProfile: ").append(toIndentedString(conversationProfile)).append("\n");
    sb.append("    conversationStage: ").append(toIndentedString(conversationStage)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    lifecycleState: ").append(toIndentedString(lifecycleState)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conversationProfile");
    openapiFields.add("conversationStage");
    openapiFields.add("endTime");
    openapiFields.add("lifecycleState");
    openapiFields.add("name");
    openapiFields.add("phoneNumber");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowV2Conversation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowV2Conversation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowV2Conversation is not found in the empty JSON string", GoogleCloudDialogflowV2Conversation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowV2Conversation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowV2Conversation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("conversationProfile") != null && !jsonObj.get("conversationProfile").isJsonNull()) && !jsonObj.get("conversationProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversationProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversationProfile").toString()));
      }
      if ((jsonObj.get("conversationStage") != null && !jsonObj.get("conversationStage").isJsonNull()) && !jsonObj.get("conversationStage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversationStage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversationStage").toString()));
      }
      // validate the optional field `conversationStage`
      if (jsonObj.get("conversationStage") != null && !jsonObj.get("conversationStage").isJsonNull()) {
        ConversationStageEnum.validateJsonElement(jsonObj.get("conversationStage"));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("lifecycleState") != null && !jsonObj.get("lifecycleState").isJsonNull()) && !jsonObj.get("lifecycleState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lifecycleState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lifecycleState").toString()));
      }
      // validate the optional field `lifecycleState`
      if (jsonObj.get("lifecycleState") != null && !jsonObj.get("lifecycleState").isJsonNull()) {
        LifecycleStateEnum.validateJsonElement(jsonObj.get("lifecycleState"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `phoneNumber`
      if (jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) {
        GoogleCloudDialogflowV2ConversationPhoneNumber.validateJsonElement(jsonObj.get("phoneNumber"));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowV2Conversation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowV2Conversation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowV2Conversation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowV2Conversation.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowV2Conversation>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowV2Conversation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowV2Conversation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowV2Conversation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowV2Conversation
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowV2Conversation
   */
  public static GoogleCloudDialogflowV2Conversation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowV2Conversation.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowV2Conversation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

