/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents configuration for a generic web service. Dialogflow supports two mechanisms for authentications: - Basic authentication with username and password. - Authentication with additional authentication headers. More information could be found at: https://cloud.google.com/dialogflow/docs/fulfillment-configure.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:05.098863-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowV2FulfillmentGenericWebService {
  public static final String SERIALIZED_NAME_IS_CLOUD_FUNCTION = "isCloudFunction";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_IS_CLOUD_FUNCTION)
  private Boolean isCloudFunction;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_REQUEST_HEADERS = "requestHeaders";
  @SerializedName(SERIALIZED_NAME_REQUEST_HEADERS)
  private Map<String, String> requestHeaders = new HashMap<>();

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public GoogleCloudDialogflowV2FulfillmentGenericWebService() {
  }

  @Deprecated
  public GoogleCloudDialogflowV2FulfillmentGenericWebService isCloudFunction(Boolean isCloudFunction) {
    this.isCloudFunction = isCloudFunction;
    return this;
  }

  /**
   * Optional. Indicates if generic web service is created through Cloud Functions integration. Defaults to false. is_cloud_function is deprecated. Cloud functions can be configured by its uri as a regular web service now.
   * @return isCloudFunction
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getIsCloudFunction() {
    return isCloudFunction;
  }

  @Deprecated
  public void setIsCloudFunction(Boolean isCloudFunction) {
    this.isCloudFunction = isCloudFunction;
  }


  public GoogleCloudDialogflowV2FulfillmentGenericWebService password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Optional. The password for HTTP Basic authentication.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public GoogleCloudDialogflowV2FulfillmentGenericWebService requestHeaders(Map<String, String> requestHeaders) {
    this.requestHeaders = requestHeaders;
    return this;
  }

  public GoogleCloudDialogflowV2FulfillmentGenericWebService putRequestHeadersItem(String key, String requestHeadersItem) {
    if (this.requestHeaders == null) {
      this.requestHeaders = new HashMap<>();
    }
    this.requestHeaders.put(key, requestHeadersItem);
    return this;
  }

  /**
   * Optional. The HTTP request headers to send together with fulfillment requests.
   * @return requestHeaders
   */
  @javax.annotation.Nullable
  public Map<String, String> getRequestHeaders() {
    return requestHeaders;
  }

  public void setRequestHeaders(Map<String, String> requestHeaders) {
    this.requestHeaders = requestHeaders;
  }


  public GoogleCloudDialogflowV2FulfillmentGenericWebService uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Required. The fulfillment URI for receiving POST requests. It must use https protocol.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  public GoogleCloudDialogflowV2FulfillmentGenericWebService username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Optional. The user name for HTTP Basic authentication.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowV2FulfillmentGenericWebService googleCloudDialogflowV2FulfillmentGenericWebService = (GoogleCloudDialogflowV2FulfillmentGenericWebService) o;
    return Objects.equals(this.isCloudFunction, googleCloudDialogflowV2FulfillmentGenericWebService.isCloudFunction) &&
        Objects.equals(this.password, googleCloudDialogflowV2FulfillmentGenericWebService.password) &&
        Objects.equals(this.requestHeaders, googleCloudDialogflowV2FulfillmentGenericWebService.requestHeaders) &&
        Objects.equals(this.uri, googleCloudDialogflowV2FulfillmentGenericWebService.uri) &&
        Objects.equals(this.username, googleCloudDialogflowV2FulfillmentGenericWebService.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isCloudFunction, password, requestHeaders, uri, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowV2FulfillmentGenericWebService {\n");
    sb.append("    isCloudFunction: ").append(toIndentedString(isCloudFunction)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    requestHeaders: ").append(toIndentedString(requestHeaders)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isCloudFunction");
    openapiFields.add("password");
    openapiFields.add("requestHeaders");
    openapiFields.add("uri");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowV2FulfillmentGenericWebService
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowV2FulfillmentGenericWebService.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowV2FulfillmentGenericWebService is not found in the empty JSON string", GoogleCloudDialogflowV2FulfillmentGenericWebService.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowV2FulfillmentGenericWebService.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowV2FulfillmentGenericWebService` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowV2FulfillmentGenericWebService.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowV2FulfillmentGenericWebService' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowV2FulfillmentGenericWebService> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowV2FulfillmentGenericWebService.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowV2FulfillmentGenericWebService>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowV2FulfillmentGenericWebService value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowV2FulfillmentGenericWebService read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowV2FulfillmentGenericWebService given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowV2FulfillmentGenericWebService
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowV2FulfillmentGenericWebService
   */
  public static GoogleCloudDialogflowV2FulfillmentGenericWebService fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowV2FulfillmentGenericWebService.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowV2FulfillmentGenericWebService to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

