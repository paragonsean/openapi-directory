/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudDialogflowV2SynthesizeSpeechConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Instructs the speech synthesizer on how to generate the output audio content.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:05.098863-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowV2TextToSpeechSettings {
  public static final String SERIALIZED_NAME_ENABLE_TEXT_TO_SPEECH = "enableTextToSpeech";
  @SerializedName(SERIALIZED_NAME_ENABLE_TEXT_TO_SPEECH)
  private Boolean enableTextToSpeech;

  /**
   * Required. Audio encoding of the synthesized audio content.
   */
  @JsonAdapter(OutputAudioEncodingEnum.Adapter.class)
  public enum OutputAudioEncodingEnum {
    UNSPECIFIED("OUTPUT_AUDIO_ENCODING_UNSPECIFIED"),
    
    LINEAR_16("OUTPUT_AUDIO_ENCODING_LINEAR_16"),
    
    MP3("OUTPUT_AUDIO_ENCODING_MP3"),
    
    MP3_64_KBPS("OUTPUT_AUDIO_ENCODING_MP3_64_KBPS"),
    
    OGG_OPUS("OUTPUT_AUDIO_ENCODING_OGG_OPUS"),
    
    MULAW("OUTPUT_AUDIO_ENCODING_MULAW");

    private String value;

    OutputAudioEncodingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OutputAudioEncodingEnum fromValue(String value) {
      for (OutputAudioEncodingEnum b : OutputAudioEncodingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OutputAudioEncodingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OutputAudioEncodingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OutputAudioEncodingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OutputAudioEncodingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OutputAudioEncodingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OUTPUT_AUDIO_ENCODING = "outputAudioEncoding";
  @SerializedName(SERIALIZED_NAME_OUTPUT_AUDIO_ENCODING)
  private OutputAudioEncodingEnum outputAudioEncoding;

  public static final String SERIALIZED_NAME_SAMPLE_RATE_HERTZ = "sampleRateHertz";
  @SerializedName(SERIALIZED_NAME_SAMPLE_RATE_HERTZ)
  private Integer sampleRateHertz;

  public static final String SERIALIZED_NAME_SYNTHESIZE_SPEECH_CONFIGS = "synthesizeSpeechConfigs";
  @SerializedName(SERIALIZED_NAME_SYNTHESIZE_SPEECH_CONFIGS)
  private Map<String, GoogleCloudDialogflowV2SynthesizeSpeechConfig> synthesizeSpeechConfigs = new HashMap<>();

  public GoogleCloudDialogflowV2TextToSpeechSettings() {
  }

  public GoogleCloudDialogflowV2TextToSpeechSettings enableTextToSpeech(Boolean enableTextToSpeech) {
    this.enableTextToSpeech = enableTextToSpeech;
    return this;
  }

  /**
   * Optional. Indicates whether text to speech is enabled. Even when this field is false, other settings in this proto are still retained.
   * @return enableTextToSpeech
   */
  @javax.annotation.Nullable
  public Boolean getEnableTextToSpeech() {
    return enableTextToSpeech;
  }

  public void setEnableTextToSpeech(Boolean enableTextToSpeech) {
    this.enableTextToSpeech = enableTextToSpeech;
  }


  public GoogleCloudDialogflowV2TextToSpeechSettings outputAudioEncoding(OutputAudioEncodingEnum outputAudioEncoding) {
    this.outputAudioEncoding = outputAudioEncoding;
    return this;
  }

  /**
   * Required. Audio encoding of the synthesized audio content.
   * @return outputAudioEncoding
   */
  @javax.annotation.Nullable
  public OutputAudioEncodingEnum getOutputAudioEncoding() {
    return outputAudioEncoding;
  }

  public void setOutputAudioEncoding(OutputAudioEncodingEnum outputAudioEncoding) {
    this.outputAudioEncoding = outputAudioEncoding;
  }


  public GoogleCloudDialogflowV2TextToSpeechSettings sampleRateHertz(Integer sampleRateHertz) {
    this.sampleRateHertz = sampleRateHertz;
    return this;
  }

  /**
   * Optional. The synthesis sample rate (in hertz) for this audio. If not provided, then the synthesizer will use the default sample rate based on the audio encoding. If this is different from the voice&#39;s natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality).
   * @return sampleRateHertz
   */
  @javax.annotation.Nullable
  public Integer getSampleRateHertz() {
    return sampleRateHertz;
  }

  public void setSampleRateHertz(Integer sampleRateHertz) {
    this.sampleRateHertz = sampleRateHertz;
  }


  public GoogleCloudDialogflowV2TextToSpeechSettings synthesizeSpeechConfigs(Map<String, GoogleCloudDialogflowV2SynthesizeSpeechConfig> synthesizeSpeechConfigs) {
    this.synthesizeSpeechConfigs = synthesizeSpeechConfigs;
    return this;
  }

  public GoogleCloudDialogflowV2TextToSpeechSettings putSynthesizeSpeechConfigsItem(String key, GoogleCloudDialogflowV2SynthesizeSpeechConfig synthesizeSpeechConfigsItem) {
    if (this.synthesizeSpeechConfigs == null) {
      this.synthesizeSpeechConfigs = new HashMap<>();
    }
    this.synthesizeSpeechConfigs.put(key, synthesizeSpeechConfigsItem);
    return this;
  }

  /**
   * Optional. Configuration of how speech should be synthesized, mapping from language (https://cloud.google.com/dialogflow/docs/reference/language) to SynthesizeSpeechConfig.
   * @return synthesizeSpeechConfigs
   */
  @javax.annotation.Nullable
  public Map<String, GoogleCloudDialogflowV2SynthesizeSpeechConfig> getSynthesizeSpeechConfigs() {
    return synthesizeSpeechConfigs;
  }

  public void setSynthesizeSpeechConfigs(Map<String, GoogleCloudDialogflowV2SynthesizeSpeechConfig> synthesizeSpeechConfigs) {
    this.synthesizeSpeechConfigs = synthesizeSpeechConfigs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowV2TextToSpeechSettings googleCloudDialogflowV2TextToSpeechSettings = (GoogleCloudDialogflowV2TextToSpeechSettings) o;
    return Objects.equals(this.enableTextToSpeech, googleCloudDialogflowV2TextToSpeechSettings.enableTextToSpeech) &&
        Objects.equals(this.outputAudioEncoding, googleCloudDialogflowV2TextToSpeechSettings.outputAudioEncoding) &&
        Objects.equals(this.sampleRateHertz, googleCloudDialogflowV2TextToSpeechSettings.sampleRateHertz) &&
        Objects.equals(this.synthesizeSpeechConfigs, googleCloudDialogflowV2TextToSpeechSettings.synthesizeSpeechConfigs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableTextToSpeech, outputAudioEncoding, sampleRateHertz, synthesizeSpeechConfigs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowV2TextToSpeechSettings {\n");
    sb.append("    enableTextToSpeech: ").append(toIndentedString(enableTextToSpeech)).append("\n");
    sb.append("    outputAudioEncoding: ").append(toIndentedString(outputAudioEncoding)).append("\n");
    sb.append("    sampleRateHertz: ").append(toIndentedString(sampleRateHertz)).append("\n");
    sb.append("    synthesizeSpeechConfigs: ").append(toIndentedString(synthesizeSpeechConfigs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enableTextToSpeech");
    openapiFields.add("outputAudioEncoding");
    openapiFields.add("sampleRateHertz");
    openapiFields.add("synthesizeSpeechConfigs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowV2TextToSpeechSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowV2TextToSpeechSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowV2TextToSpeechSettings is not found in the empty JSON string", GoogleCloudDialogflowV2TextToSpeechSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowV2TextToSpeechSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowV2TextToSpeechSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("outputAudioEncoding") != null && !jsonObj.get("outputAudioEncoding").isJsonNull()) && !jsonObj.get("outputAudioEncoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputAudioEncoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputAudioEncoding").toString()));
      }
      // validate the optional field `outputAudioEncoding`
      if (jsonObj.get("outputAudioEncoding") != null && !jsonObj.get("outputAudioEncoding").isJsonNull()) {
        OutputAudioEncodingEnum.validateJsonElement(jsonObj.get("outputAudioEncoding"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowV2TextToSpeechSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowV2TextToSpeechSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowV2TextToSpeechSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowV2TextToSpeechSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowV2TextToSpeechSettings>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowV2TextToSpeechSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowV2TextToSpeechSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowV2TextToSpeechSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowV2TextToSpeechSettings
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowV2TextToSpeechSettings
   */
  public static GoogleCloudDialogflowV2TextToSpeechSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowV2TextToSpeechSettings.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowV2TextToSpeechSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

