/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDialogflowCxV3ConversationTurn;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a result from running a test case in an agent environment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:05.098863-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowCxV3TestCaseResult {
  public static final String SERIALIZED_NAME_CONVERSATION_TURNS = "conversationTurns";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_TURNS)
  private List<GoogleCloudDialogflowCxV3ConversationTurn> conversationTurns = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private String environment;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Whether the test case passed in the agent environment.
   */
  @JsonAdapter(TestResultEnum.Adapter.class)
  public enum TestResultEnum {
    TEST_RESULT_UNSPECIFIED("TEST_RESULT_UNSPECIFIED"),
    
    PASSED("PASSED"),
    
    FAILED("FAILED");

    private String value;

    TestResultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TestResultEnum fromValue(String value) {
      for (TestResultEnum b : TestResultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TestResultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TestResultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TestResultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TestResultEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TestResultEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEST_RESULT = "testResult";
  @SerializedName(SERIALIZED_NAME_TEST_RESULT)
  private TestResultEnum testResult;

  public static final String SERIALIZED_NAME_TEST_TIME = "testTime";
  @SerializedName(SERIALIZED_NAME_TEST_TIME)
  private String testTime;

  public GoogleCloudDialogflowCxV3TestCaseResult() {
  }

  public GoogleCloudDialogflowCxV3TestCaseResult conversationTurns(List<GoogleCloudDialogflowCxV3ConversationTurn> conversationTurns) {
    this.conversationTurns = conversationTurns;
    return this;
  }

  public GoogleCloudDialogflowCxV3TestCaseResult addConversationTurnsItem(GoogleCloudDialogflowCxV3ConversationTurn conversationTurnsItem) {
    if (this.conversationTurns == null) {
      this.conversationTurns = new ArrayList<>();
    }
    this.conversationTurns.add(conversationTurnsItem);
    return this;
  }

  /**
   * The conversation turns uttered during the test case replay in chronological order.
   * @return conversationTurns
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDialogflowCxV3ConversationTurn> getConversationTurns() {
    return conversationTurns;
  }

  public void setConversationTurns(List<GoogleCloudDialogflowCxV3ConversationTurn> conversationTurns) {
    this.conversationTurns = conversationTurns;
  }


  public GoogleCloudDialogflowCxV3TestCaseResult environment(String environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Environment where the test was run. If not set, it indicates the draft environment.
   * @return environment
   */
  @javax.annotation.Nullable
  public String getEnvironment() {
    return environment;
  }

  public void setEnvironment(String environment) {
    this.environment = environment;
  }


  public GoogleCloudDialogflowCxV3TestCaseResult name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name for the test case result. Format: &#x60;projects//locations//agents//testCases/ /results/&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudDialogflowCxV3TestCaseResult testResult(TestResultEnum testResult) {
    this.testResult = testResult;
    return this;
  }

  /**
   * Whether the test case passed in the agent environment.
   * @return testResult
   */
  @javax.annotation.Nullable
  public TestResultEnum getTestResult() {
    return testResult;
  }

  public void setTestResult(TestResultEnum testResult) {
    this.testResult = testResult;
  }


  public GoogleCloudDialogflowCxV3TestCaseResult testTime(String testTime) {
    this.testTime = testTime;
    return this;
  }

  /**
   * The time that the test was run.
   * @return testTime
   */
  @javax.annotation.Nullable
  public String getTestTime() {
    return testTime;
  }

  public void setTestTime(String testTime) {
    this.testTime = testTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowCxV3TestCaseResult googleCloudDialogflowCxV3TestCaseResult = (GoogleCloudDialogflowCxV3TestCaseResult) o;
    return Objects.equals(this.conversationTurns, googleCloudDialogflowCxV3TestCaseResult.conversationTurns) &&
        Objects.equals(this.environment, googleCloudDialogflowCxV3TestCaseResult.environment) &&
        Objects.equals(this.name, googleCloudDialogflowCxV3TestCaseResult.name) &&
        Objects.equals(this.testResult, googleCloudDialogflowCxV3TestCaseResult.testResult) &&
        Objects.equals(this.testTime, googleCloudDialogflowCxV3TestCaseResult.testTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conversationTurns, environment, name, testResult, testTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowCxV3TestCaseResult {\n");
    sb.append("    conversationTurns: ").append(toIndentedString(conversationTurns)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    testResult: ").append(toIndentedString(testResult)).append("\n");
    sb.append("    testTime: ").append(toIndentedString(testTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conversationTurns");
    openapiFields.add("environment");
    openapiFields.add("name");
    openapiFields.add("testResult");
    openapiFields.add("testTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowCxV3TestCaseResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowCxV3TestCaseResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowCxV3TestCaseResult is not found in the empty JSON string", GoogleCloudDialogflowCxV3TestCaseResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowCxV3TestCaseResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowCxV3TestCaseResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("conversationTurns") != null && !jsonObj.get("conversationTurns").isJsonNull()) {
        JsonArray jsonArrayconversationTurns = jsonObj.getAsJsonArray("conversationTurns");
        if (jsonArrayconversationTurns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conversationTurns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conversationTurns` to be an array in the JSON string but got `%s`", jsonObj.get("conversationTurns").toString()));
          }

          // validate the optional field `conversationTurns` (array)
          for (int i = 0; i < jsonArrayconversationTurns.size(); i++) {
            GoogleCloudDialogflowCxV3ConversationTurn.validateJsonElement(jsonArrayconversationTurns.get(i));
          };
        }
      }
      if ((jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull()) && !jsonObj.get("environment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environment").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("testResult") != null && !jsonObj.get("testResult").isJsonNull()) && !jsonObj.get("testResult").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testResult` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testResult").toString()));
      }
      // validate the optional field `testResult`
      if (jsonObj.get("testResult") != null && !jsonObj.get("testResult").isJsonNull()) {
        TestResultEnum.validateJsonElement(jsonObj.get("testResult"));
      }
      if ((jsonObj.get("testTime") != null && !jsonObj.get("testTime").isJsonNull()) && !jsonObj.get("testTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowCxV3TestCaseResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowCxV3TestCaseResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowCxV3TestCaseResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowCxV3TestCaseResult.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowCxV3TestCaseResult>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowCxV3TestCaseResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowCxV3TestCaseResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowCxV3TestCaseResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowCxV3TestCaseResult
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowCxV3TestCaseResult
   */
  public static GoogleCloudDialogflowCxV3TestCaseResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowCxV3TestCaseResult.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowCxV3TestCaseResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

