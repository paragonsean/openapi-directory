/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration specific to Salesforce Live Agent.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:05.098863-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig {
  public static final String SERIALIZED_NAME_BUTTON_ID = "buttonId";
  @SerializedName(SERIALIZED_NAME_BUTTON_ID)
  private String buttonId;

  public static final String SERIALIZED_NAME_DEPLOYMENT_ID = "deploymentId";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_ID)
  private String deploymentId;

  public static final String SERIALIZED_NAME_ENDPOINT_DOMAIN = "endpointDomain";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_DOMAIN)
  private String endpointDomain;

  public static final String SERIALIZED_NAME_ORGANIZATION_ID = "organizationId";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ID)
  private String organizationId;

  public GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig() {
  }

  public GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig buttonId(String buttonId) {
    this.buttonId = buttonId;
    return this;
  }

  /**
   * Required. Live Agent chat button ID.
   * @return buttonId
   */
  @javax.annotation.Nullable
  public String getButtonId() {
    return buttonId;
  }

  public void setButtonId(String buttonId) {
    this.buttonId = buttonId;
  }


  public GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig deploymentId(String deploymentId) {
    this.deploymentId = deploymentId;
    return this;
  }

  /**
   * Required. Live Agent deployment ID.
   * @return deploymentId
   */
  @javax.annotation.Nullable
  public String getDeploymentId() {
    return deploymentId;
  }

  public void setDeploymentId(String deploymentId) {
    this.deploymentId = deploymentId;
  }


  public GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig endpointDomain(String endpointDomain) {
    this.endpointDomain = endpointDomain;
    return this;
  }

  /**
   * Required. Domain of the Live Agent endpoint for this agent. You can find the endpoint URL in the &#x60;Live Agent settings&#x60; page. For example if URL has the form https://d.la4-c2-phx.salesforceliveagent.com/..., you should fill in d.la4-c2-phx.salesforceliveagent.com.
   * @return endpointDomain
   */
  @javax.annotation.Nullable
  public String getEndpointDomain() {
    return endpointDomain;
  }

  public void setEndpointDomain(String endpointDomain) {
    this.endpointDomain = endpointDomain;
  }


  public GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig organizationId(String organizationId) {
    this.organizationId = organizationId;
    return this;
  }

  /**
   * Required. The organization ID of the Salesforce account.
   * @return organizationId
   */
  @javax.annotation.Nullable
  public String getOrganizationId() {
    return organizationId;
  }

  public void setOrganizationId(String organizationId) {
    this.organizationId = organizationId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig googleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig = (GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig) o;
    return Objects.equals(this.buttonId, googleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig.buttonId) &&
        Objects.equals(this.deploymentId, googleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig.deploymentId) &&
        Objects.equals(this.endpointDomain, googleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig.endpointDomain) &&
        Objects.equals(this.organizationId, googleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig.organizationId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buttonId, deploymentId, endpointDomain, organizationId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig {\n");
    sb.append("    buttonId: ").append(toIndentedString(buttonId)).append("\n");
    sb.append("    deploymentId: ").append(toIndentedString(deploymentId)).append("\n");
    sb.append("    endpointDomain: ").append(toIndentedString(endpointDomain)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buttonId");
    openapiFields.add("deploymentId");
    openapiFields.add("endpointDomain");
    openapiFields.add("organizationId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig is not found in the empty JSON string", GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("buttonId") != null && !jsonObj.get("buttonId").isJsonNull()) && !jsonObj.get("buttonId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buttonId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buttonId").toString()));
      }
      if ((jsonObj.get("deploymentId") != null && !jsonObj.get("deploymentId").isJsonNull()) && !jsonObj.get("deploymentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploymentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deploymentId").toString()));
      }
      if ((jsonObj.get("endpointDomain") != null && !jsonObj.get("endpointDomain").isJsonNull()) && !jsonObj.get("endpointDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointDomain").toString()));
      }
      if ((jsonObj.get("organizationId") != null && !jsonObj.get("organizationId").isJsonNull()) && !jsonObj.get("organizationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizationId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig
   */
  public static GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowV2HumanAgentHandoffConfigSalesforceLiveAgentConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

