/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDialogflowV2SearchKnowledgeAnswerAnswerSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a SearchKnowledge answer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:05.098863-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowV2SearchKnowledgeAnswer {
  public static final String SERIALIZED_NAME_ANSWER = "answer";
  @SerializedName(SERIALIZED_NAME_ANSWER)
  private String answer;

  public static final String SERIALIZED_NAME_ANSWER_RECORD = "answerRecord";
  @SerializedName(SERIALIZED_NAME_ANSWER_RECORD)
  private String answerRecord;

  public static final String SERIALIZED_NAME_ANSWER_SOURCES = "answerSources";
  @SerializedName(SERIALIZED_NAME_ANSWER_SOURCES)
  private List<GoogleCloudDialogflowV2SearchKnowledgeAnswerAnswerSource> answerSources = new ArrayList<>();

  /**
   * The type of the answer.
   */
  @JsonAdapter(AnswerTypeEnum.Adapter.class)
  public enum AnswerTypeEnum {
    ANSWER_TYPE_UNSPECIFIED("ANSWER_TYPE_UNSPECIFIED"),
    
    FAQ("FAQ"),
    
    GENERATIVE("GENERATIVE"),
    
    INTENT("INTENT");

    private String value;

    AnswerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnswerTypeEnum fromValue(String value) {
      for (AnswerTypeEnum b : AnswerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnswerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnswerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnswerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnswerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnswerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANSWER_TYPE = "answerType";
  @SerializedName(SERIALIZED_NAME_ANSWER_TYPE)
  private AnswerTypeEnum answerType;

  public GoogleCloudDialogflowV2SearchKnowledgeAnswer() {
  }

  public GoogleCloudDialogflowV2SearchKnowledgeAnswer answer(String answer) {
    this.answer = answer;
    return this;
  }

  /**
   * The piece of text from the knowledge base documents that answers the search query
   * @return answer
   */
  @javax.annotation.Nullable
  public String getAnswer() {
    return answer;
  }

  public void setAnswer(String answer) {
    this.answer = answer;
  }


  public GoogleCloudDialogflowV2SearchKnowledgeAnswer answerRecord(String answerRecord) {
    this.answerRecord = answerRecord;
    return this;
  }

  /**
   * The name of the answer record. Format: &#x60;projects//locations//answer Records/&#x60;
   * @return answerRecord
   */
  @javax.annotation.Nullable
  public String getAnswerRecord() {
    return answerRecord;
  }

  public void setAnswerRecord(String answerRecord) {
    this.answerRecord = answerRecord;
  }


  public GoogleCloudDialogflowV2SearchKnowledgeAnswer answerSources(List<GoogleCloudDialogflowV2SearchKnowledgeAnswerAnswerSource> answerSources) {
    this.answerSources = answerSources;
    return this;
  }

  public GoogleCloudDialogflowV2SearchKnowledgeAnswer addAnswerSourcesItem(GoogleCloudDialogflowV2SearchKnowledgeAnswerAnswerSource answerSourcesItem) {
    if (this.answerSources == null) {
      this.answerSources = new ArrayList<>();
    }
    this.answerSources.add(answerSourcesItem);
    return this;
  }

  /**
   * All sources used to generate the answer.
   * @return answerSources
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDialogflowV2SearchKnowledgeAnswerAnswerSource> getAnswerSources() {
    return answerSources;
  }

  public void setAnswerSources(List<GoogleCloudDialogflowV2SearchKnowledgeAnswerAnswerSource> answerSources) {
    this.answerSources = answerSources;
  }


  public GoogleCloudDialogflowV2SearchKnowledgeAnswer answerType(AnswerTypeEnum answerType) {
    this.answerType = answerType;
    return this;
  }

  /**
   * The type of the answer.
   * @return answerType
   */
  @javax.annotation.Nullable
  public AnswerTypeEnum getAnswerType() {
    return answerType;
  }

  public void setAnswerType(AnswerTypeEnum answerType) {
    this.answerType = answerType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowV2SearchKnowledgeAnswer googleCloudDialogflowV2SearchKnowledgeAnswer = (GoogleCloudDialogflowV2SearchKnowledgeAnswer) o;
    return Objects.equals(this.answer, googleCloudDialogflowV2SearchKnowledgeAnswer.answer) &&
        Objects.equals(this.answerRecord, googleCloudDialogflowV2SearchKnowledgeAnswer.answerRecord) &&
        Objects.equals(this.answerSources, googleCloudDialogflowV2SearchKnowledgeAnswer.answerSources) &&
        Objects.equals(this.answerType, googleCloudDialogflowV2SearchKnowledgeAnswer.answerType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answer, answerRecord, answerSources, answerType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowV2SearchKnowledgeAnswer {\n");
    sb.append("    answer: ").append(toIndentedString(answer)).append("\n");
    sb.append("    answerRecord: ").append(toIndentedString(answerRecord)).append("\n");
    sb.append("    answerSources: ").append(toIndentedString(answerSources)).append("\n");
    sb.append("    answerType: ").append(toIndentedString(answerType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("answer");
    openapiFields.add("answerRecord");
    openapiFields.add("answerSources");
    openapiFields.add("answerType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowV2SearchKnowledgeAnswer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowV2SearchKnowledgeAnswer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowV2SearchKnowledgeAnswer is not found in the empty JSON string", GoogleCloudDialogflowV2SearchKnowledgeAnswer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowV2SearchKnowledgeAnswer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowV2SearchKnowledgeAnswer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("answer") != null && !jsonObj.get("answer").isJsonNull()) && !jsonObj.get("answer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `answer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("answer").toString()));
      }
      if ((jsonObj.get("answerRecord") != null && !jsonObj.get("answerRecord").isJsonNull()) && !jsonObj.get("answerRecord").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `answerRecord` to be a primitive type in the JSON string but got `%s`", jsonObj.get("answerRecord").toString()));
      }
      if (jsonObj.get("answerSources") != null && !jsonObj.get("answerSources").isJsonNull()) {
        JsonArray jsonArrayanswerSources = jsonObj.getAsJsonArray("answerSources");
        if (jsonArrayanswerSources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("answerSources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `answerSources` to be an array in the JSON string but got `%s`", jsonObj.get("answerSources").toString()));
          }

          // validate the optional field `answerSources` (array)
          for (int i = 0; i < jsonArrayanswerSources.size(); i++) {
            GoogleCloudDialogflowV2SearchKnowledgeAnswerAnswerSource.validateJsonElement(jsonArrayanswerSources.get(i));
          };
        }
      }
      if ((jsonObj.get("answerType") != null && !jsonObj.get("answerType").isJsonNull()) && !jsonObj.get("answerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `answerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("answerType").toString()));
      }
      // validate the optional field `answerType`
      if (jsonObj.get("answerType") != null && !jsonObj.get("answerType").isJsonNull()) {
        AnswerTypeEnum.validateJsonElement(jsonObj.get("answerType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowV2SearchKnowledgeAnswer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowV2SearchKnowledgeAnswer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowV2SearchKnowledgeAnswer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowV2SearchKnowledgeAnswer.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowV2SearchKnowledgeAnswer>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowV2SearchKnowledgeAnswer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowV2SearchKnowledgeAnswer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowV2SearchKnowledgeAnswer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowV2SearchKnowledgeAnswer
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowV2SearchKnowledgeAnswer
   */
  public static GoogleCloudDialogflowV2SearchKnowledgeAnswer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowV2SearchKnowledgeAnswer.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowV2SearchKnowledgeAnswer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

