/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudDialogflowV2beta1IntentMessageRbmCardContent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Carousel Rich Business Messaging (RBM) rich card. Rich cards allow you to respond to users with more vivid content, e.g. with media and suggestions. If you want to show a single card with more control over the layout, please use RbmStandaloneCard instead.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:05.098863-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard {
  public static final String SERIALIZED_NAME_CARD_CONTENTS = "cardContents";
  @SerializedName(SERIALIZED_NAME_CARD_CONTENTS)
  private List<GoogleCloudDialogflowV2beta1IntentMessageRbmCardContent> cardContents = new ArrayList<>();

  /**
   * Required. The width of the cards in the carousel.
   */
  @JsonAdapter(CardWidthEnum.Adapter.class)
  public enum CardWidthEnum {
    CARD_WIDTH_UNSPECIFIED("CARD_WIDTH_UNSPECIFIED"),
    
    SMALL("SMALL"),
    
    MEDIUM("MEDIUM");

    private String value;

    CardWidthEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CardWidthEnum fromValue(String value) {
      for (CardWidthEnum b : CardWidthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CardWidthEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CardWidthEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CardWidthEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CardWidthEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CardWidthEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CARD_WIDTH = "cardWidth";
  @SerializedName(SERIALIZED_NAME_CARD_WIDTH)
  private CardWidthEnum cardWidth;

  public GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard() {
  }

  public GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard cardContents(List<GoogleCloudDialogflowV2beta1IntentMessageRbmCardContent> cardContents) {
    this.cardContents = cardContents;
    return this;
  }

  public GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard addCardContentsItem(GoogleCloudDialogflowV2beta1IntentMessageRbmCardContent cardContentsItem) {
    if (this.cardContents == null) {
      this.cardContents = new ArrayList<>();
    }
    this.cardContents.add(cardContentsItem);
    return this;
  }

  /**
   * Required. The cards in the carousel. A carousel must have at least 2 cards and at most 10.
   * @return cardContents
   */
  @javax.annotation.Nullable
  public List<GoogleCloudDialogflowV2beta1IntentMessageRbmCardContent> getCardContents() {
    return cardContents;
  }

  public void setCardContents(List<GoogleCloudDialogflowV2beta1IntentMessageRbmCardContent> cardContents) {
    this.cardContents = cardContents;
  }


  public GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard cardWidth(CardWidthEnum cardWidth) {
    this.cardWidth = cardWidth;
    return this;
  }

  /**
   * Required. The width of the cards in the carousel.
   * @return cardWidth
   */
  @javax.annotation.Nullable
  public CardWidthEnum getCardWidth() {
    return cardWidth;
  }

  public void setCardWidth(CardWidthEnum cardWidth) {
    this.cardWidth = cardWidth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard googleCloudDialogflowV2beta1IntentMessageRbmCarouselCard = (GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard) o;
    return Objects.equals(this.cardContents, googleCloudDialogflowV2beta1IntentMessageRbmCarouselCard.cardContents) &&
        Objects.equals(this.cardWidth, googleCloudDialogflowV2beta1IntentMessageRbmCarouselCard.cardWidth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardContents, cardWidth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard {\n");
    sb.append("    cardContents: ").append(toIndentedString(cardContents)).append("\n");
    sb.append("    cardWidth: ").append(toIndentedString(cardWidth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cardContents");
    openapiFields.add("cardWidth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard is not found in the empty JSON string", GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("cardContents") != null && !jsonObj.get("cardContents").isJsonNull()) {
        JsonArray jsonArraycardContents = jsonObj.getAsJsonArray("cardContents");
        if (jsonArraycardContents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cardContents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cardContents` to be an array in the JSON string but got `%s`", jsonObj.get("cardContents").toString()));
          }

          // validate the optional field `cardContents` (array)
          for (int i = 0; i < jsonArraycardContents.size(); i++) {
            GoogleCloudDialogflowV2beta1IntentMessageRbmCardContent.validateJsonElement(jsonArraycardContents.get(i));
          };
        }
      }
      if ((jsonObj.get("cardWidth") != null && !jsonObj.get("cardWidth").isJsonNull()) && !jsonObj.get("cardWidth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardWidth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardWidth").toString()));
      }
      // validate the optional field `cardWidth`
      if (jsonObj.get("cardWidth") != null && !jsonObj.get("cardWidth").isJsonNull()) {
        CardWidthEnum.validateJsonElement(jsonObj.get("cardWidth"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard
   */
  public static GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowV2beta1IntentMessageRbmCarouselCard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

