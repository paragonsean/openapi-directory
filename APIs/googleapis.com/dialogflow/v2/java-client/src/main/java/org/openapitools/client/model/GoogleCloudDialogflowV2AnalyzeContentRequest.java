/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudDialogflowV2AssistQueryParameters;
import org.openapitools.client.model.GoogleCloudDialogflowV2EventInput;
import org.openapitools.client.model.GoogleCloudDialogflowV2OutputAudioConfig;
import org.openapitools.client.model.GoogleCloudDialogflowV2QueryParameters;
import org.openapitools.client.model.GoogleCloudDialogflowV2SuggestionInput;
import org.openapitools.client.model.GoogleCloudDialogflowV2TextInput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request message for Participants.AnalyzeContent.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:05.098863-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowV2AnalyzeContentRequest {
  public static final String SERIALIZED_NAME_ASSIST_QUERY_PARAMS = "assistQueryParams";
  @SerializedName(SERIALIZED_NAME_ASSIST_QUERY_PARAMS)
  private GoogleCloudDialogflowV2AssistQueryParameters assistQueryParams;

  public static final String SERIALIZED_NAME_CX_PARAMETERS = "cxParameters";
  @SerializedName(SERIALIZED_NAME_CX_PARAMETERS)
  private Map<String, Object> cxParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_EVENT_INPUT = "eventInput";
  @SerializedName(SERIALIZED_NAME_EVENT_INPUT)
  private GoogleCloudDialogflowV2EventInput eventInput;

  public static final String SERIALIZED_NAME_QUERY_PARAMS = "queryParams";
  @SerializedName(SERIALIZED_NAME_QUERY_PARAMS)
  private GoogleCloudDialogflowV2QueryParameters queryParams;

  public static final String SERIALIZED_NAME_REPLY_AUDIO_CONFIG = "replyAudioConfig";
  @SerializedName(SERIALIZED_NAME_REPLY_AUDIO_CONFIG)
  private GoogleCloudDialogflowV2OutputAudioConfig replyAudioConfig;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_SUGGESTION_INPUT = "suggestionInput";
  @SerializedName(SERIALIZED_NAME_SUGGESTION_INPUT)
  private GoogleCloudDialogflowV2SuggestionInput suggestionInput;

  public static final String SERIALIZED_NAME_TEXT_INPUT = "textInput";
  @SerializedName(SERIALIZED_NAME_TEXT_INPUT)
  private GoogleCloudDialogflowV2TextInput textInput;

  public GoogleCloudDialogflowV2AnalyzeContentRequest() {
  }

  public GoogleCloudDialogflowV2AnalyzeContentRequest assistQueryParams(GoogleCloudDialogflowV2AssistQueryParameters assistQueryParams) {
    this.assistQueryParams = assistQueryParams;
    return this;
  }

  /**
   * Get assistQueryParams
   * @return assistQueryParams
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowV2AssistQueryParameters getAssistQueryParams() {
    return assistQueryParams;
  }

  public void setAssistQueryParams(GoogleCloudDialogflowV2AssistQueryParameters assistQueryParams) {
    this.assistQueryParams = assistQueryParams;
  }


  public GoogleCloudDialogflowV2AnalyzeContentRequest cxParameters(Map<String, Object> cxParameters) {
    this.cxParameters = cxParameters;
    return this;
  }

  public GoogleCloudDialogflowV2AnalyzeContentRequest putCxParametersItem(String key, Object cxParametersItem) {
    if (this.cxParameters == null) {
      this.cxParameters = new HashMap<>();
    }
    this.cxParameters.put(key, cxParametersItem);
    return this;
  }

  /**
   * Additional parameters to be put into Dialogflow CX session parameters. To remove a parameter from the session, clients should explicitly set the parameter value to null. Note: this field should only be used if you are connecting to a Dialogflow CX agent.
   * @return cxParameters
   */
  @javax.annotation.Nullable
  public Map<String, Object> getCxParameters() {
    return cxParameters;
  }

  public void setCxParameters(Map<String, Object> cxParameters) {
    this.cxParameters = cxParameters;
  }


  public GoogleCloudDialogflowV2AnalyzeContentRequest eventInput(GoogleCloudDialogflowV2EventInput eventInput) {
    this.eventInput = eventInput;
    return this;
  }

  /**
   * Get eventInput
   * @return eventInput
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowV2EventInput getEventInput() {
    return eventInput;
  }

  public void setEventInput(GoogleCloudDialogflowV2EventInput eventInput) {
    this.eventInput = eventInput;
  }


  public GoogleCloudDialogflowV2AnalyzeContentRequest queryParams(GoogleCloudDialogflowV2QueryParameters queryParams) {
    this.queryParams = queryParams;
    return this;
  }

  /**
   * Get queryParams
   * @return queryParams
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowV2QueryParameters getQueryParams() {
    return queryParams;
  }

  public void setQueryParams(GoogleCloudDialogflowV2QueryParameters queryParams) {
    this.queryParams = queryParams;
  }


  public GoogleCloudDialogflowV2AnalyzeContentRequest replyAudioConfig(GoogleCloudDialogflowV2OutputAudioConfig replyAudioConfig) {
    this.replyAudioConfig = replyAudioConfig;
    return this;
  }

  /**
   * Get replyAudioConfig
   * @return replyAudioConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowV2OutputAudioConfig getReplyAudioConfig() {
    return replyAudioConfig;
  }

  public void setReplyAudioConfig(GoogleCloudDialogflowV2OutputAudioConfig replyAudioConfig) {
    this.replyAudioConfig = replyAudioConfig;
  }


  public GoogleCloudDialogflowV2AnalyzeContentRequest requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * A unique identifier for this request. Restricted to 36 ASCII characters. A random UUID is recommended. This request is only idempotent if a &#x60;request_id&#x60; is provided.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public GoogleCloudDialogflowV2AnalyzeContentRequest suggestionInput(GoogleCloudDialogflowV2SuggestionInput suggestionInput) {
    this.suggestionInput = suggestionInput;
    return this;
  }

  /**
   * Get suggestionInput
   * @return suggestionInput
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowV2SuggestionInput getSuggestionInput() {
    return suggestionInput;
  }

  public void setSuggestionInput(GoogleCloudDialogflowV2SuggestionInput suggestionInput) {
    this.suggestionInput = suggestionInput;
  }


  public GoogleCloudDialogflowV2AnalyzeContentRequest textInput(GoogleCloudDialogflowV2TextInput textInput) {
    this.textInput = textInput;
    return this;
  }

  /**
   * Get textInput
   * @return textInput
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowV2TextInput getTextInput() {
    return textInput;
  }

  public void setTextInput(GoogleCloudDialogflowV2TextInput textInput) {
    this.textInput = textInput;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowV2AnalyzeContentRequest googleCloudDialogflowV2AnalyzeContentRequest = (GoogleCloudDialogflowV2AnalyzeContentRequest) o;
    return Objects.equals(this.assistQueryParams, googleCloudDialogflowV2AnalyzeContentRequest.assistQueryParams) &&
        Objects.equals(this.cxParameters, googleCloudDialogflowV2AnalyzeContentRequest.cxParameters) &&
        Objects.equals(this.eventInput, googleCloudDialogflowV2AnalyzeContentRequest.eventInput) &&
        Objects.equals(this.queryParams, googleCloudDialogflowV2AnalyzeContentRequest.queryParams) &&
        Objects.equals(this.replyAudioConfig, googleCloudDialogflowV2AnalyzeContentRequest.replyAudioConfig) &&
        Objects.equals(this.requestId, googleCloudDialogflowV2AnalyzeContentRequest.requestId) &&
        Objects.equals(this.suggestionInput, googleCloudDialogflowV2AnalyzeContentRequest.suggestionInput) &&
        Objects.equals(this.textInput, googleCloudDialogflowV2AnalyzeContentRequest.textInput);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assistQueryParams, cxParameters, eventInput, queryParams, replyAudioConfig, requestId, suggestionInput, textInput);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowV2AnalyzeContentRequest {\n");
    sb.append("    assistQueryParams: ").append(toIndentedString(assistQueryParams)).append("\n");
    sb.append("    cxParameters: ").append(toIndentedString(cxParameters)).append("\n");
    sb.append("    eventInput: ").append(toIndentedString(eventInput)).append("\n");
    sb.append("    queryParams: ").append(toIndentedString(queryParams)).append("\n");
    sb.append("    replyAudioConfig: ").append(toIndentedString(replyAudioConfig)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    suggestionInput: ").append(toIndentedString(suggestionInput)).append("\n");
    sb.append("    textInput: ").append(toIndentedString(textInput)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assistQueryParams");
    openapiFields.add("cxParameters");
    openapiFields.add("eventInput");
    openapiFields.add("queryParams");
    openapiFields.add("replyAudioConfig");
    openapiFields.add("requestId");
    openapiFields.add("suggestionInput");
    openapiFields.add("textInput");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowV2AnalyzeContentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowV2AnalyzeContentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowV2AnalyzeContentRequest is not found in the empty JSON string", GoogleCloudDialogflowV2AnalyzeContentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowV2AnalyzeContentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowV2AnalyzeContentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `assistQueryParams`
      if (jsonObj.get("assistQueryParams") != null && !jsonObj.get("assistQueryParams").isJsonNull()) {
        GoogleCloudDialogflowV2AssistQueryParameters.validateJsonElement(jsonObj.get("assistQueryParams"));
      }
      // validate the optional field `eventInput`
      if (jsonObj.get("eventInput") != null && !jsonObj.get("eventInput").isJsonNull()) {
        GoogleCloudDialogflowV2EventInput.validateJsonElement(jsonObj.get("eventInput"));
      }
      // validate the optional field `queryParams`
      if (jsonObj.get("queryParams") != null && !jsonObj.get("queryParams").isJsonNull()) {
        GoogleCloudDialogflowV2QueryParameters.validateJsonElement(jsonObj.get("queryParams"));
      }
      // validate the optional field `replyAudioConfig`
      if (jsonObj.get("replyAudioConfig") != null && !jsonObj.get("replyAudioConfig").isJsonNull()) {
        GoogleCloudDialogflowV2OutputAudioConfig.validateJsonElement(jsonObj.get("replyAudioConfig"));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      // validate the optional field `suggestionInput`
      if (jsonObj.get("suggestionInput") != null && !jsonObj.get("suggestionInput").isJsonNull()) {
        GoogleCloudDialogflowV2SuggestionInput.validateJsonElement(jsonObj.get("suggestionInput"));
      }
      // validate the optional field `textInput`
      if (jsonObj.get("textInput") != null && !jsonObj.get("textInput").isJsonNull()) {
        GoogleCloudDialogflowV2TextInput.validateJsonElement(jsonObj.get("textInput"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowV2AnalyzeContentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowV2AnalyzeContentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowV2AnalyzeContentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowV2AnalyzeContentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowV2AnalyzeContentRequest>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowV2AnalyzeContentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowV2AnalyzeContentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowV2AnalyzeContentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowV2AnalyzeContentRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowV2AnalyzeContentRequest
   */
  public static GoogleCloudDialogflowV2AnalyzeContentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowV2AnalyzeContentRequest.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowV2AnalyzeContentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

