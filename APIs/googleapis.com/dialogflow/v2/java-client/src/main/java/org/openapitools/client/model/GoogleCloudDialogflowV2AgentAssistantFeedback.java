/*
 * Dialogflow API
 * Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudDialogflowV2AgentAssistantFeedbackKnowledgeSearchFeedback;
import org.openapitools.client.model.GoogleCloudDialogflowV2AgentAssistantFeedbackSummarizationFeedback;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Detail feedback of Agent Assist result.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:05.098863-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudDialogflowV2AgentAssistantFeedback {
  /**
   * Optional. Whether or not the suggested answer is relevant. For example: * Query: \&quot;Can I change my mailing address?\&quot; * Suggested document says: \&quot;Items must be returned/exchanged within 60 days of the purchase date.\&quot; * answer_relevance: AnswerRelevance.IRRELEVANT
   */
  @JsonAdapter(AnswerRelevanceEnum.Adapter.class)
  public enum AnswerRelevanceEnum {
    ANSWER_RELEVANCE_UNSPECIFIED("ANSWER_RELEVANCE_UNSPECIFIED"),
    
    IRRELEVANT("IRRELEVANT"),
    
    RELEVANT("RELEVANT");

    private String value;

    AnswerRelevanceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnswerRelevanceEnum fromValue(String value) {
      for (AnswerRelevanceEnum b : AnswerRelevanceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnswerRelevanceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnswerRelevanceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnswerRelevanceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnswerRelevanceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnswerRelevanceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANSWER_RELEVANCE = "answerRelevance";
  @SerializedName(SERIALIZED_NAME_ANSWER_RELEVANCE)
  private AnswerRelevanceEnum answerRelevance;

  /**
   * Optional. Whether or not the information in the document is correct. For example: * Query: \&quot;Can I return the package in 2 days once received?\&quot; * Suggested document says: \&quot;Items must be returned/exchanged within 60 days of the purchase date.\&quot; * Ground truth: \&quot;No return or exchange is allowed.\&quot; * [document_correctness]: INCORRECT
   */
  @JsonAdapter(DocumentCorrectnessEnum.Adapter.class)
  public enum DocumentCorrectnessEnum {
    DOCUMENT_CORRECTNESS_UNSPECIFIED("DOCUMENT_CORRECTNESS_UNSPECIFIED"),
    
    INCORRECT("INCORRECT"),
    
    CORRECT("CORRECT");

    private String value;

    DocumentCorrectnessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentCorrectnessEnum fromValue(String value) {
      for (DocumentCorrectnessEnum b : DocumentCorrectnessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentCorrectnessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentCorrectnessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentCorrectnessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocumentCorrectnessEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DocumentCorrectnessEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_CORRECTNESS = "documentCorrectness";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_CORRECTNESS)
  private DocumentCorrectnessEnum documentCorrectness;

  /**
   * Optional. Whether or not the suggested document is efficient. For example, if the document is poorly written, hard to understand, hard to use or too long to find useful information, document_efficiency is DocumentEfficiency.INEFFICIENT.
   */
  @JsonAdapter(DocumentEfficiencyEnum.Adapter.class)
  public enum DocumentEfficiencyEnum {
    DOCUMENT_EFFICIENCY_UNSPECIFIED("DOCUMENT_EFFICIENCY_UNSPECIFIED"),
    
    INEFFICIENT("INEFFICIENT"),
    
    EFFICIENT("EFFICIENT");

    private String value;

    DocumentEfficiencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentEfficiencyEnum fromValue(String value) {
      for (DocumentEfficiencyEnum b : DocumentEfficiencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentEfficiencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentEfficiencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentEfficiencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocumentEfficiencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DocumentEfficiencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_EFFICIENCY = "documentEfficiency";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_EFFICIENCY)
  private DocumentEfficiencyEnum documentEfficiency;

  public static final String SERIALIZED_NAME_KNOWLEDGE_SEARCH_FEEDBACK = "knowledgeSearchFeedback";
  @SerializedName(SERIALIZED_NAME_KNOWLEDGE_SEARCH_FEEDBACK)
  private GoogleCloudDialogflowV2AgentAssistantFeedbackKnowledgeSearchFeedback knowledgeSearchFeedback;

  public static final String SERIALIZED_NAME_SUMMARIZATION_FEEDBACK = "summarizationFeedback";
  @SerializedName(SERIALIZED_NAME_SUMMARIZATION_FEEDBACK)
  private GoogleCloudDialogflowV2AgentAssistantFeedbackSummarizationFeedback summarizationFeedback;

  public GoogleCloudDialogflowV2AgentAssistantFeedback() {
  }

  public GoogleCloudDialogflowV2AgentAssistantFeedback answerRelevance(AnswerRelevanceEnum answerRelevance) {
    this.answerRelevance = answerRelevance;
    return this;
  }

  /**
   * Optional. Whether or not the suggested answer is relevant. For example: * Query: \&quot;Can I change my mailing address?\&quot; * Suggested document says: \&quot;Items must be returned/exchanged within 60 days of the purchase date.\&quot; * answer_relevance: AnswerRelevance.IRRELEVANT
   * @return answerRelevance
   */
  @javax.annotation.Nullable
  public AnswerRelevanceEnum getAnswerRelevance() {
    return answerRelevance;
  }

  public void setAnswerRelevance(AnswerRelevanceEnum answerRelevance) {
    this.answerRelevance = answerRelevance;
  }


  public GoogleCloudDialogflowV2AgentAssistantFeedback documentCorrectness(DocumentCorrectnessEnum documentCorrectness) {
    this.documentCorrectness = documentCorrectness;
    return this;
  }

  /**
   * Optional. Whether or not the information in the document is correct. For example: * Query: \&quot;Can I return the package in 2 days once received?\&quot; * Suggested document says: \&quot;Items must be returned/exchanged within 60 days of the purchase date.\&quot; * Ground truth: \&quot;No return or exchange is allowed.\&quot; * [document_correctness]: INCORRECT
   * @return documentCorrectness
   */
  @javax.annotation.Nullable
  public DocumentCorrectnessEnum getDocumentCorrectness() {
    return documentCorrectness;
  }

  public void setDocumentCorrectness(DocumentCorrectnessEnum documentCorrectness) {
    this.documentCorrectness = documentCorrectness;
  }


  public GoogleCloudDialogflowV2AgentAssistantFeedback documentEfficiency(DocumentEfficiencyEnum documentEfficiency) {
    this.documentEfficiency = documentEfficiency;
    return this;
  }

  /**
   * Optional. Whether or not the suggested document is efficient. For example, if the document is poorly written, hard to understand, hard to use or too long to find useful information, document_efficiency is DocumentEfficiency.INEFFICIENT.
   * @return documentEfficiency
   */
  @javax.annotation.Nullable
  public DocumentEfficiencyEnum getDocumentEfficiency() {
    return documentEfficiency;
  }

  public void setDocumentEfficiency(DocumentEfficiencyEnum documentEfficiency) {
    this.documentEfficiency = documentEfficiency;
  }


  public GoogleCloudDialogflowV2AgentAssistantFeedback knowledgeSearchFeedback(GoogleCloudDialogflowV2AgentAssistantFeedbackKnowledgeSearchFeedback knowledgeSearchFeedback) {
    this.knowledgeSearchFeedback = knowledgeSearchFeedback;
    return this;
  }

  /**
   * Get knowledgeSearchFeedback
   * @return knowledgeSearchFeedback
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowV2AgentAssistantFeedbackKnowledgeSearchFeedback getKnowledgeSearchFeedback() {
    return knowledgeSearchFeedback;
  }

  public void setKnowledgeSearchFeedback(GoogleCloudDialogflowV2AgentAssistantFeedbackKnowledgeSearchFeedback knowledgeSearchFeedback) {
    this.knowledgeSearchFeedback = knowledgeSearchFeedback;
  }


  public GoogleCloudDialogflowV2AgentAssistantFeedback summarizationFeedback(GoogleCloudDialogflowV2AgentAssistantFeedbackSummarizationFeedback summarizationFeedback) {
    this.summarizationFeedback = summarizationFeedback;
    return this;
  }

  /**
   * Get summarizationFeedback
   * @return summarizationFeedback
   */
  @javax.annotation.Nullable
  public GoogleCloudDialogflowV2AgentAssistantFeedbackSummarizationFeedback getSummarizationFeedback() {
    return summarizationFeedback;
  }

  public void setSummarizationFeedback(GoogleCloudDialogflowV2AgentAssistantFeedbackSummarizationFeedback summarizationFeedback) {
    this.summarizationFeedback = summarizationFeedback;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudDialogflowV2AgentAssistantFeedback googleCloudDialogflowV2AgentAssistantFeedback = (GoogleCloudDialogflowV2AgentAssistantFeedback) o;
    return Objects.equals(this.answerRelevance, googleCloudDialogflowV2AgentAssistantFeedback.answerRelevance) &&
        Objects.equals(this.documentCorrectness, googleCloudDialogflowV2AgentAssistantFeedback.documentCorrectness) &&
        Objects.equals(this.documentEfficiency, googleCloudDialogflowV2AgentAssistantFeedback.documentEfficiency) &&
        Objects.equals(this.knowledgeSearchFeedback, googleCloudDialogflowV2AgentAssistantFeedback.knowledgeSearchFeedback) &&
        Objects.equals(this.summarizationFeedback, googleCloudDialogflowV2AgentAssistantFeedback.summarizationFeedback);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answerRelevance, documentCorrectness, documentEfficiency, knowledgeSearchFeedback, summarizationFeedback);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudDialogflowV2AgentAssistantFeedback {\n");
    sb.append("    answerRelevance: ").append(toIndentedString(answerRelevance)).append("\n");
    sb.append("    documentCorrectness: ").append(toIndentedString(documentCorrectness)).append("\n");
    sb.append("    documentEfficiency: ").append(toIndentedString(documentEfficiency)).append("\n");
    sb.append("    knowledgeSearchFeedback: ").append(toIndentedString(knowledgeSearchFeedback)).append("\n");
    sb.append("    summarizationFeedback: ").append(toIndentedString(summarizationFeedback)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("answerRelevance");
    openapiFields.add("documentCorrectness");
    openapiFields.add("documentEfficiency");
    openapiFields.add("knowledgeSearchFeedback");
    openapiFields.add("summarizationFeedback");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudDialogflowV2AgentAssistantFeedback
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudDialogflowV2AgentAssistantFeedback.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudDialogflowV2AgentAssistantFeedback is not found in the empty JSON string", GoogleCloudDialogflowV2AgentAssistantFeedback.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudDialogflowV2AgentAssistantFeedback.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudDialogflowV2AgentAssistantFeedback` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("answerRelevance") != null && !jsonObj.get("answerRelevance").isJsonNull()) && !jsonObj.get("answerRelevance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `answerRelevance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("answerRelevance").toString()));
      }
      // validate the optional field `answerRelevance`
      if (jsonObj.get("answerRelevance") != null && !jsonObj.get("answerRelevance").isJsonNull()) {
        AnswerRelevanceEnum.validateJsonElement(jsonObj.get("answerRelevance"));
      }
      if ((jsonObj.get("documentCorrectness") != null && !jsonObj.get("documentCorrectness").isJsonNull()) && !jsonObj.get("documentCorrectness").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentCorrectness` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentCorrectness").toString()));
      }
      // validate the optional field `documentCorrectness`
      if (jsonObj.get("documentCorrectness") != null && !jsonObj.get("documentCorrectness").isJsonNull()) {
        DocumentCorrectnessEnum.validateJsonElement(jsonObj.get("documentCorrectness"));
      }
      if ((jsonObj.get("documentEfficiency") != null && !jsonObj.get("documentEfficiency").isJsonNull()) && !jsonObj.get("documentEfficiency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentEfficiency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentEfficiency").toString()));
      }
      // validate the optional field `documentEfficiency`
      if (jsonObj.get("documentEfficiency") != null && !jsonObj.get("documentEfficiency").isJsonNull()) {
        DocumentEfficiencyEnum.validateJsonElement(jsonObj.get("documentEfficiency"));
      }
      // validate the optional field `knowledgeSearchFeedback`
      if (jsonObj.get("knowledgeSearchFeedback") != null && !jsonObj.get("knowledgeSearchFeedback").isJsonNull()) {
        GoogleCloudDialogflowV2AgentAssistantFeedbackKnowledgeSearchFeedback.validateJsonElement(jsonObj.get("knowledgeSearchFeedback"));
      }
      // validate the optional field `summarizationFeedback`
      if (jsonObj.get("summarizationFeedback") != null && !jsonObj.get("summarizationFeedback").isJsonNull()) {
        GoogleCloudDialogflowV2AgentAssistantFeedbackSummarizationFeedback.validateJsonElement(jsonObj.get("summarizationFeedback"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudDialogflowV2AgentAssistantFeedback.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudDialogflowV2AgentAssistantFeedback' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudDialogflowV2AgentAssistantFeedback> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudDialogflowV2AgentAssistantFeedback.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudDialogflowV2AgentAssistantFeedback>() {
           @Override
           public void write(JsonWriter out, GoogleCloudDialogflowV2AgentAssistantFeedback value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudDialogflowV2AgentAssistantFeedback read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudDialogflowV2AgentAssistantFeedback given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudDialogflowV2AgentAssistantFeedback
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudDialogflowV2AgentAssistantFeedback
   */
  public static GoogleCloudDialogflowV2AgentAssistantFeedback fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudDialogflowV2AgentAssistantFeedback.class);
  }

  /**
   * Convert an instance of GoogleCloudDialogflowV2AgentAssistantFeedback to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

