/**
 * Google Play Developer Reporting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness::OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness::OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness() {
    this->initializeModel();
}

OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness::~OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness() {}

void OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness::initializeModel() {

    m_aggregation_period_isSet = false;
    m_aggregation_period_isValid = false;

    m_latest_end_time_isSet = false;
    m_latest_end_time_isValid = false;
}

void OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness::fromJsonObject(QJsonObject json) {

    m_aggregation_period_isValid = ::OpenAPI::fromJsonValue(m_aggregation_period, json[QString("aggregationPeriod")]);
    m_aggregation_period_isSet = !json[QString("aggregationPeriod")].isNull() && m_aggregation_period_isValid;

    m_latest_end_time_isValid = ::OpenAPI::fromJsonValue(m_latest_end_time, json[QString("latestEndTime")]);
    m_latest_end_time_isSet = !json[QString("latestEndTime")].isNull() && m_latest_end_time_isValid;
}

QString OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_period_isSet) {
        obj.insert(QString("aggregationPeriod"), ::OpenAPI::toJsonValue(m_aggregation_period));
    }
    if (m_latest_end_time.isSet()) {
        obj.insert(QString("latestEndTime"), ::OpenAPI::toJsonValue(m_latest_end_time));
    }
    return obj;
}

QString OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness::getAggregationPeriod() const {
    return m_aggregation_period;
}
void OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness::setAggregationPeriod(const QString &aggregation_period) {
    m_aggregation_period = aggregation_period;
    m_aggregation_period_isSet = true;
}

bool OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness::is_aggregation_period_Set() const{
    return m_aggregation_period_isSet;
}

bool OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness::is_aggregation_period_Valid() const{
    return m_aggregation_period_isValid;
}

OAIGoogleTypeDateTime OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness::getLatestEndTime() const {
    return m_latest_end_time;
}
void OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness::setLatestEndTime(const OAIGoogleTypeDateTime &latest_end_time) {
    m_latest_end_time = latest_end_time;
    m_latest_end_time_isSet = true;
}

bool OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness::is_latest_end_time_Set() const{
    return m_latest_end_time_isSet;
}

bool OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness::is_latest_end_time_Valid() const{
    return m_latest_end_time_isValid;
}

bool OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_end_time.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGooglePlayDeveloperReportingV1alpha1FreshnessInfoFreshness::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
