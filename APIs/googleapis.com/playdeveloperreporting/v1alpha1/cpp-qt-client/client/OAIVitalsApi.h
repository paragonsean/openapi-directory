/**
 * Google Play Developer Reporting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVitalsApi_H
#define OAI_OAIVitalsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest.h"
#include "OAIGooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetResponse.h"
#include "OAIGooglePlayDeveloperReportingV1alpha1SearchErrorIssuesResponse.h"
#include "OAIGooglePlayDeveloperReportingV1alpha1SearchErrorReportsResponse.h"
#include "OAIGooglePlayDeveloperReportingV1alpha1StuckBackgroundWakelockRateMetricSet.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVitalsApi : public QObject {
    Q_OBJECT

public:
    OAIVitalsApi(const int timeOut = 0);
    ~OAIVitalsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  interval_end_time_day qint32 [optional]
    * @param[in]  interval_end_time_hours qint32 [optional]
    * @param[in]  interval_end_time_minutes qint32 [optional]
    * @param[in]  interval_end_time_month qint32 [optional]
    * @param[in]  interval_end_time_nanos qint32 [optional]
    * @param[in]  interval_end_time_seconds qint32 [optional]
    * @param[in]  interval_end_time_time_zone_id QString [optional]
    * @param[in]  interval_end_time_time_zone_version QString [optional]
    * @param[in]  interval_end_time_utc_offset QString [optional]
    * @param[in]  interval_end_time_year qint32 [optional]
    * @param[in]  interval_start_time_day qint32 [optional]
    * @param[in]  interval_start_time_hours qint32 [optional]
    * @param[in]  interval_start_time_minutes qint32 [optional]
    * @param[in]  interval_start_time_month qint32 [optional]
    * @param[in]  interval_start_time_nanos qint32 [optional]
    * @param[in]  interval_start_time_seconds qint32 [optional]
    * @param[in]  interval_start_time_time_zone_id QString [optional]
    * @param[in]  interval_start_time_time_zone_version QString [optional]
    * @param[in]  interval_start_time_utc_offset QString [optional]
    * @param[in]  interval_start_time_year qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void playdeveloperreporting_vitals_errors_issues_search(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &interval_end_time_day = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_end_time_hours = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_end_time_minutes = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_end_time_month = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_end_time_nanos = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_end_time_seconds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &interval_end_time_time_zone_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interval_end_time_time_zone_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interval_end_time_utc_offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &interval_end_time_year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_start_time_day = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_start_time_hours = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_start_time_minutes = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_start_time_month = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_start_time_nanos = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_start_time_seconds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &interval_start_time_time_zone_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interval_start_time_time_zone_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interval_start_time_utc_offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &interval_start_time_year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  interval_end_time_day qint32 [optional]
    * @param[in]  interval_end_time_hours qint32 [optional]
    * @param[in]  interval_end_time_minutes qint32 [optional]
    * @param[in]  interval_end_time_month qint32 [optional]
    * @param[in]  interval_end_time_nanos qint32 [optional]
    * @param[in]  interval_end_time_seconds qint32 [optional]
    * @param[in]  interval_end_time_time_zone_id QString [optional]
    * @param[in]  interval_end_time_time_zone_version QString [optional]
    * @param[in]  interval_end_time_utc_offset QString [optional]
    * @param[in]  interval_end_time_year qint32 [optional]
    * @param[in]  interval_start_time_day qint32 [optional]
    * @param[in]  interval_start_time_hours qint32 [optional]
    * @param[in]  interval_start_time_minutes qint32 [optional]
    * @param[in]  interval_start_time_month qint32 [optional]
    * @param[in]  interval_start_time_nanos qint32 [optional]
    * @param[in]  interval_start_time_seconds qint32 [optional]
    * @param[in]  interval_start_time_time_zone_id QString [optional]
    * @param[in]  interval_start_time_time_zone_version QString [optional]
    * @param[in]  interval_start_time_utc_offset QString [optional]
    * @param[in]  interval_start_time_year qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void playdeveloperreporting_vitals_errors_reports_search(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &interval_end_time_day = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_end_time_hours = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_end_time_minutes = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_end_time_month = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_end_time_nanos = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_end_time_seconds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &interval_end_time_time_zone_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interval_end_time_time_zone_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interval_end_time_utc_offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &interval_end_time_year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_start_time_day = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_start_time_hours = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_start_time_minutes = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_start_time_month = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_start_time_nanos = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &interval_start_time_seconds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &interval_start_time_time_zone_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interval_start_time_time_zone_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interval_start_time_utc_offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &interval_start_time_year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void playdeveloperreporting_vitals_stuckbackgroundwakelockrate_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_play_developer_reporting_v1alpha1_query_stuck_background_wakelock_rate_metric_set_request OAIGooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest [optional]
    */
    virtual void playdeveloperreporting_vitals_stuckbackgroundwakelockrate_query(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest> &oai_google_play_developer_reporting_v1alpha1_query_stuck_background_wakelock_rate_metric_set_request = ::OpenAPI::OptionalParam<OAIGooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void playdeveloperreporting_vitals_errors_issues_searchCallback(OAIHttpRequestWorker *worker);
    void playdeveloperreporting_vitals_errors_reports_searchCallback(OAIHttpRequestWorker *worker);
    void playdeveloperreporting_vitals_stuckbackgroundwakelockrate_getCallback(OAIHttpRequestWorker *worker);
    void playdeveloperreporting_vitals_stuckbackgroundwakelockrate_queryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void playdeveloperreporting_vitals_errors_issues_searchSignal(OAIGooglePlayDeveloperReportingV1alpha1SearchErrorIssuesResponse summary);
    void playdeveloperreporting_vitals_errors_reports_searchSignal(OAIGooglePlayDeveloperReportingV1alpha1SearchErrorReportsResponse summary);
    void playdeveloperreporting_vitals_stuckbackgroundwakelockrate_getSignal(OAIGooglePlayDeveloperReportingV1alpha1StuckBackgroundWakelockRateMetricSet summary);
    void playdeveloperreporting_vitals_stuckbackgroundwakelockrate_querySignal(OAIGooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetResponse summary);


    void playdeveloperreporting_vitals_errors_issues_searchSignalFull(OAIHttpRequestWorker *worker, OAIGooglePlayDeveloperReportingV1alpha1SearchErrorIssuesResponse summary);
    void playdeveloperreporting_vitals_errors_reports_searchSignalFull(OAIHttpRequestWorker *worker, OAIGooglePlayDeveloperReportingV1alpha1SearchErrorReportsResponse summary);
    void playdeveloperreporting_vitals_stuckbackgroundwakelockrate_getSignalFull(OAIHttpRequestWorker *worker, OAIGooglePlayDeveloperReportingV1alpha1StuckBackgroundWakelockRateMetricSet summary);
    void playdeveloperreporting_vitals_stuckbackgroundwakelockrate_querySignalFull(OAIHttpRequestWorker *worker, OAIGooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetResponse summary);

    Q_DECL_DEPRECATED_X("Use playdeveloperreporting_vitals_errors_issues_searchSignalError() instead")
    void playdeveloperreporting_vitals_errors_issues_searchSignalE(OAIGooglePlayDeveloperReportingV1alpha1SearchErrorIssuesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playdeveloperreporting_vitals_errors_issues_searchSignalError(OAIGooglePlayDeveloperReportingV1alpha1SearchErrorIssuesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playdeveloperreporting_vitals_errors_reports_searchSignalError() instead")
    void playdeveloperreporting_vitals_errors_reports_searchSignalE(OAIGooglePlayDeveloperReportingV1alpha1SearchErrorReportsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playdeveloperreporting_vitals_errors_reports_searchSignalError(OAIGooglePlayDeveloperReportingV1alpha1SearchErrorReportsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playdeveloperreporting_vitals_stuckbackgroundwakelockrate_getSignalError() instead")
    void playdeveloperreporting_vitals_stuckbackgroundwakelockrate_getSignalE(OAIGooglePlayDeveloperReportingV1alpha1StuckBackgroundWakelockRateMetricSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playdeveloperreporting_vitals_stuckbackgroundwakelockrate_getSignalError(OAIGooglePlayDeveloperReportingV1alpha1StuckBackgroundWakelockRateMetricSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playdeveloperreporting_vitals_stuckbackgroundwakelockrate_querySignalError() instead")
    void playdeveloperreporting_vitals_stuckbackgroundwakelockrate_querySignalE(OAIGooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void playdeveloperreporting_vitals_stuckbackgroundwakelockrate_querySignalError(OAIGooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use playdeveloperreporting_vitals_errors_issues_searchSignalErrorFull() instead")
    void playdeveloperreporting_vitals_errors_issues_searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playdeveloperreporting_vitals_errors_issues_searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playdeveloperreporting_vitals_errors_reports_searchSignalErrorFull() instead")
    void playdeveloperreporting_vitals_errors_reports_searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playdeveloperreporting_vitals_errors_reports_searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playdeveloperreporting_vitals_stuckbackgroundwakelockrate_getSignalErrorFull() instead")
    void playdeveloperreporting_vitals_stuckbackgroundwakelockrate_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playdeveloperreporting_vitals_stuckbackgroundwakelockrate_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playdeveloperreporting_vitals_stuckbackgroundwakelockrate_querySignalErrorFull() instead")
    void playdeveloperreporting_vitals_stuckbackgroundwakelockrate_querySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playdeveloperreporting_vitals_stuckbackgroundwakelockrate_querySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
