/**
 * Google Play Developer Reporting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleTypeDateTime from './GoogleTypeDateTime';

/**
 * The GooglePlayDeveloperReportingV1alpha1TimelineSpec model module.
 * @module model/GooglePlayDeveloperReportingV1alpha1TimelineSpec
 * @version v1alpha1
 */
class GooglePlayDeveloperReportingV1alpha1TimelineSpec {
    /**
     * Constructs a new <code>GooglePlayDeveloperReportingV1alpha1TimelineSpec</code>.
     * Specification of the time-related aggregation parameters of a timeline. Timelines have an aggregation period (&#x60;DAILY&#x60;, &#x60;HOURLY&#x60;, etc) which defines how events are aggregated in metrics. The points in a timeline are defined by the starting DateTime of the aggregation period. The duration is implicit in the AggregationPeriod. Hourly aggregation periods, when supported by a metric set, are always specified in UTC to avoid ambiguities around daylight saving time transitions, where an hour is skipped when adopting DST, and repeated when abandoning DST. For example, the timestamp &#39;2021-11-07 01:00:00 America/Los_Angeles&#39; is ambiguous since it can correspond to &#39;2021-11-07 08:00:00 UTC&#39; or &#39;2021-11-07 09:00:00 UTC&#39;. Daily aggregation periods require specifying a timezone which will determine the precise instants of the start and the end of the day. Not all metric sets support all timezones, so make sure to check which timezones are supported by the metric set you want to query.
     * @alias module:model/GooglePlayDeveloperReportingV1alpha1TimelineSpec
     */
    constructor() { 
        
        GooglePlayDeveloperReportingV1alpha1TimelineSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GooglePlayDeveloperReportingV1alpha1TimelineSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GooglePlayDeveloperReportingV1alpha1TimelineSpec} obj Optional instance to populate.
     * @return {module:model/GooglePlayDeveloperReportingV1alpha1TimelineSpec} The populated <code>GooglePlayDeveloperReportingV1alpha1TimelineSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GooglePlayDeveloperReportingV1alpha1TimelineSpec();

            if (data.hasOwnProperty('aggregationPeriod')) {
                obj['aggregationPeriod'] = ApiClient.convertToType(data['aggregationPeriod'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = GoogleTypeDateTime.constructFromObject(data['endTime']);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = GoogleTypeDateTime.constructFromObject(data['startTime']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GooglePlayDeveloperReportingV1alpha1TimelineSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GooglePlayDeveloperReportingV1alpha1TimelineSpec</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aggregationPeriod'] && !(typeof data['aggregationPeriod'] === 'string' || data['aggregationPeriod'] instanceof String)) {
            throw new Error("Expected the field `aggregationPeriod` to be a primitive type in the JSON string but got " + data['aggregationPeriod']);
        }
        // validate the optional field `endTime`
        if (data['endTime']) { // data not null
          GoogleTypeDateTime.validateJSON(data['endTime']);
        }
        // validate the optional field `startTime`
        if (data['startTime']) { // data not null
          GoogleTypeDateTime.validateJSON(data['startTime']);
        }

        return true;
    }


}



/**
 * Type of the aggregation period of the datapoints in the timeline. Intervals are identified by the date and time at the start of the interval.
 * @member {module:model/GooglePlayDeveloperReportingV1alpha1TimelineSpec.AggregationPeriodEnum} aggregationPeriod
 */
GooglePlayDeveloperReportingV1alpha1TimelineSpec.prototype['aggregationPeriod'] = undefined;

/**
 * @member {module:model/GoogleTypeDateTime} endTime
 */
GooglePlayDeveloperReportingV1alpha1TimelineSpec.prototype['endTime'] = undefined;

/**
 * @member {module:model/GoogleTypeDateTime} startTime
 */
GooglePlayDeveloperReportingV1alpha1TimelineSpec.prototype['startTime'] = undefined;





/**
 * Allowed values for the <code>aggregationPeriod</code> property.
 * @enum {String}
 * @readonly
 */
GooglePlayDeveloperReportingV1alpha1TimelineSpec['AggregationPeriodEnum'] = {

    /**
     * value: "AGGREGATION_PERIOD_UNSPECIFIED"
     * @const
     */
    "AGGREGATION_PERIOD_UNSPECIFIED": "AGGREGATION_PERIOD_UNSPECIFIED",

    /**
     * value: "HOURLY"
     * @const
     */
    "HOURLY": "HOURLY",

    /**
     * value: "DAILY"
     * @const
     */
    "DAILY": "DAILY",

    /**
     * value: "FULL_RANGE"
     * @const
     */
    "FULL_RANGE": "FULL_RANGE"
};



export default GooglePlayDeveloperReportingV1alpha1TimelineSpec;

