/*
 * Google Play Developer Reporting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest;
import org.openapitools.client.model.GooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetResponse;
import org.openapitools.client.model.GooglePlayDeveloperReportingV1alpha1SearchErrorIssuesResponse;
import org.openapitools.client.model.GooglePlayDeveloperReportingV1alpha1SearchErrorReportsResponse;
import org.openapitools.client.model.GooglePlayDeveloperReportingV1alpha1StuckBackgroundWakelockRateMetricSet;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VitalsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VitalsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VitalsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for playdeveloperreportingVitalsErrorsIssuesSearch
     * @param parent Required. Parent resource of the error issues, indicating the application for which they were received. Format: apps/{app} (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param filter A selection predicate to retrieve only a subset of the issues. Counts in the returned error issues will only reflect occurrences that matched the filter. For filtering basics, please check [AIP-160](https://google.aip.dev/160). ** Supported field names:** * &#x60;apiLevel&#x60;: Matches error issues that occurred in the requested Android versions (specified as the numeric API level) only. Example: &#x60;apiLevel &#x3D; 28 OR apiLevel &#x3D; 29&#x60;. * &#x60;versionCode&#x60;: Matches error issues that occurred in the requested app version codes only. Example: &#x60;versionCode &#x3D; 123 OR versionCode &#x3D; 456&#x60;. * &#x60;deviceModel&#x60;: Matches error issues that occurred in the requested devices. Example: &#x60;deviceModel &#x3D; \&quot;google/walleye\&quot; OR deviceModel &#x3D; \&quot;google/marlin\&quot;&#x60;. * &#x60;deviceBrand&#x60;: Matches error issues that occurred in the requested device brands. Example: &#x60;deviceBrand &#x3D; \&quot;Google\&quot;. * &#x60;deviceType&#x60;: Matches error issues that occurred in the requested device types. Example: &#x60;deviceType &#x3D; \&quot;PHONE\&quot;&#x60;. * &#x60;errorIssueType&#x60;: Matches error issues of the requested types only. Valid candidates: &#x60;CRASH&#x60;, &#x60;ANR&#x60;. Example: &#x60;errorIssueType &#x3D; CRASH OR errorIssueType &#x3D; ANR&#x60;. * &#x60;appProcessState&#x60;: Matches error issues on the process state of an app, indicating whether an app runs in the foreground (user-visible) or background. Valid candidates: &#x60;FOREGROUND&#x60;, &#x60;BACKGROUND&#x60;. Example: &#x60;appProcessState &#x3D; FOREGROUND&#x60;. * &#x60;isUserPerceived&#x60;: Matches error issues that are user-perceived. It is not accompanied by any operators. Example: &#x60;isUserPerceived&#x60;. ** Supported operators:** * Comparison operators: The only supported comparison operator is equality. The filtered field must appear on the left hand side of the comparison. * Logical Operators: Logical operators &#x60;AND&#x60; and &#x60;OR&#x60; can be used to build complex filters following a conjunctive normal form (CNF), i.e., conjunctions of disjunctions. The &#x60;OR&#x60; operator takes precedence over &#x60;AND&#x60; so the use of parenthesis is not necessary when building CNF. The &#x60;OR&#x60; operator is only supported to build disjunctions that apply to the same field, e.g., &#x60;versionCode &#x3D; 123 OR errorIssueType &#x3D; ANR&#x60; is not a valid filter. ** Examples ** Some valid filtering expressions: * &#x60;versionCode &#x3D; 123 AND errorIssueType &#x3D; ANR&#x60; * &#x60;versionCode &#x3D; 123 AND errorIssueType &#x3D; OR errorIssueType &#x3D; CRASH&#x60; * &#x60;versionCode &#x3D; 123 AND (errorIssueType &#x3D; OR errorIssueType &#x3D; CRASH)&#x60; (optional)
     * @param intervalEndTimeDay Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day. (optional)
     * @param intervalEndTimeHours Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \&quot;24:00:00\&quot; for scenarios like business closing time. (optional)
     * @param intervalEndTimeMinutes Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0. (optional)
     * @param intervalEndTimeMonth Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month. (optional)
     * @param intervalEndTimeNanos Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0. (optional)
     * @param intervalEndTimeSeconds Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds. (optional)
     * @param intervalEndTimeTimeZoneId IANA Time Zone Database time zone, e.g. \&quot;America/New_York\&quot;. (optional)
     * @param intervalEndTimeTimeZoneVersion Optional. IANA Time Zone Database version number, e.g. \&quot;2019a\&quot;. (optional)
     * @param intervalEndTimeUtcOffset UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }. (optional)
     * @param intervalEndTimeYear Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year. (optional)
     * @param intervalStartTimeDay Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day. (optional)
     * @param intervalStartTimeHours Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \&quot;24:00:00\&quot; for scenarios like business closing time. (optional)
     * @param intervalStartTimeMinutes Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0. (optional)
     * @param intervalStartTimeMonth Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month. (optional)
     * @param intervalStartTimeNanos Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0. (optional)
     * @param intervalStartTimeSeconds Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds. (optional)
     * @param intervalStartTimeTimeZoneId IANA Time Zone Database time zone, e.g. \&quot;America/New_York\&quot;. (optional)
     * @param intervalStartTimeTimeZoneVersion Optional. IANA Time Zone Database version number, e.g. \&quot;2019a\&quot;. (optional)
     * @param intervalStartTimeUtcOffset UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }. (optional)
     * @param intervalStartTimeYear Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year. (optional)
     * @param orderBy Specifies a field that will be used to order the results. ** Supported dimensions:** * &#x60;errorReportCount&#x60;: Orders issues by number of error reports. * &#x60;distinctUsers&#x60;: Orders issues by number of unique affected users. ** Supported operations:** * &#x60;asc&#x60; for ascending order. * &#x60;desc&#x60; for descending order. Format: A field and an operation, e.g., &#x60;errorReportCount desc&#x60; *Note:* currently only one field is supported at a time. (optional)
     * @param pageSize The maximum number of error issues to return. The service may return fewer than this value. If unspecified, at most 50 error issues will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to the request must match the call that provided the page token. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playdeveloperreportingVitalsErrorsIssuesSearchCall(String parent, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String filter, Integer intervalEndTimeDay, Integer intervalEndTimeHours, Integer intervalEndTimeMinutes, Integer intervalEndTimeMonth, Integer intervalEndTimeNanos, Integer intervalEndTimeSeconds, String intervalEndTimeTimeZoneId, String intervalEndTimeTimeZoneVersion, String intervalEndTimeUtcOffset, Integer intervalEndTimeYear, Integer intervalStartTimeDay, Integer intervalStartTimeHours, Integer intervalStartTimeMinutes, Integer intervalStartTimeMonth, Integer intervalStartTimeNanos, Integer intervalStartTimeSeconds, String intervalStartTimeTimeZoneId, String intervalStartTimeTimeZoneVersion, String intervalStartTimeUtcOffset, Integer intervalStartTimeYear, String orderBy, Integer pageSize, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1alpha1/{parent}/errorIssues:search"
            .replace("{" + "parent" + "}", localVarApiClient.escapeString(parent.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (intervalEndTimeDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.endTime.day", intervalEndTimeDay));
        }

        if (intervalEndTimeHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.endTime.hours", intervalEndTimeHours));
        }

        if (intervalEndTimeMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.endTime.minutes", intervalEndTimeMinutes));
        }

        if (intervalEndTimeMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.endTime.month", intervalEndTimeMonth));
        }

        if (intervalEndTimeNanos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.endTime.nanos", intervalEndTimeNanos));
        }

        if (intervalEndTimeSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.endTime.seconds", intervalEndTimeSeconds));
        }

        if (intervalEndTimeTimeZoneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.endTime.timeZone.id", intervalEndTimeTimeZoneId));
        }

        if (intervalEndTimeTimeZoneVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.endTime.timeZone.version", intervalEndTimeTimeZoneVersion));
        }

        if (intervalEndTimeUtcOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.endTime.utcOffset", intervalEndTimeUtcOffset));
        }

        if (intervalEndTimeYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.endTime.year", intervalEndTimeYear));
        }

        if (intervalStartTimeDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.startTime.day", intervalStartTimeDay));
        }

        if (intervalStartTimeHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.startTime.hours", intervalStartTimeHours));
        }

        if (intervalStartTimeMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.startTime.minutes", intervalStartTimeMinutes));
        }

        if (intervalStartTimeMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.startTime.month", intervalStartTimeMonth));
        }

        if (intervalStartTimeNanos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.startTime.nanos", intervalStartTimeNanos));
        }

        if (intervalStartTimeSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.startTime.seconds", intervalStartTimeSeconds));
        }

        if (intervalStartTimeTimeZoneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.startTime.timeZone.id", intervalStartTimeTimeZoneId));
        }

        if (intervalStartTimeTimeZoneVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.startTime.timeZone.version", intervalStartTimeTimeZoneVersion));
        }

        if (intervalStartTimeUtcOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.startTime.utcOffset", intervalStartTimeUtcOffset));
        }

        if (intervalStartTimeYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.startTime.year", intervalStartTimeYear));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playdeveloperreportingVitalsErrorsIssuesSearchValidateBeforeCall(String parent, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String filter, Integer intervalEndTimeDay, Integer intervalEndTimeHours, Integer intervalEndTimeMinutes, Integer intervalEndTimeMonth, Integer intervalEndTimeNanos, Integer intervalEndTimeSeconds, String intervalEndTimeTimeZoneId, String intervalEndTimeTimeZoneVersion, String intervalEndTimeUtcOffset, Integer intervalEndTimeYear, Integer intervalStartTimeDay, Integer intervalStartTimeHours, Integer intervalStartTimeMinutes, Integer intervalStartTimeMonth, Integer intervalStartTimeNanos, Integer intervalStartTimeSeconds, String intervalStartTimeTimeZoneId, String intervalStartTimeTimeZoneVersion, String intervalStartTimeUtcOffset, Integer intervalStartTimeYear, String orderBy, Integer pageSize, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'parent' is set
        if (parent == null) {
            throw new ApiException("Missing the required parameter 'parent' when calling playdeveloperreportingVitalsErrorsIssuesSearch(Async)");
        }

        return playdeveloperreportingVitalsErrorsIssuesSearchCall(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, intervalEndTimeDay, intervalEndTimeHours, intervalEndTimeMinutes, intervalEndTimeMonth, intervalEndTimeNanos, intervalEndTimeSeconds, intervalEndTimeTimeZoneId, intervalEndTimeTimeZoneVersion, intervalEndTimeUtcOffset, intervalEndTimeYear, intervalStartTimeDay, intervalStartTimeHours, intervalStartTimeMinutes, intervalStartTimeMonth, intervalStartTimeNanos, intervalStartTimeSeconds, intervalStartTimeTimeZoneId, intervalStartTimeTimeZoneVersion, intervalStartTimeUtcOffset, intervalStartTimeYear, orderBy, pageSize, pageToken, _callback);

    }

    /**
     * 
     * Searches all error issues in which reports have been grouped.
     * @param parent Required. Parent resource of the error issues, indicating the application for which they were received. Format: apps/{app} (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param filter A selection predicate to retrieve only a subset of the issues. Counts in the returned error issues will only reflect occurrences that matched the filter. For filtering basics, please check [AIP-160](https://google.aip.dev/160). ** Supported field names:** * &#x60;apiLevel&#x60;: Matches error issues that occurred in the requested Android versions (specified as the numeric API level) only. Example: &#x60;apiLevel &#x3D; 28 OR apiLevel &#x3D; 29&#x60;. * &#x60;versionCode&#x60;: Matches error issues that occurred in the requested app version codes only. Example: &#x60;versionCode &#x3D; 123 OR versionCode &#x3D; 456&#x60;. * &#x60;deviceModel&#x60;: Matches error issues that occurred in the requested devices. Example: &#x60;deviceModel &#x3D; \&quot;google/walleye\&quot; OR deviceModel &#x3D; \&quot;google/marlin\&quot;&#x60;. * &#x60;deviceBrand&#x60;: Matches error issues that occurred in the requested device brands. Example: &#x60;deviceBrand &#x3D; \&quot;Google\&quot;. * &#x60;deviceType&#x60;: Matches error issues that occurred in the requested device types. Example: &#x60;deviceType &#x3D; \&quot;PHONE\&quot;&#x60;. * &#x60;errorIssueType&#x60;: Matches error issues of the requested types only. Valid candidates: &#x60;CRASH&#x60;, &#x60;ANR&#x60;. Example: &#x60;errorIssueType &#x3D; CRASH OR errorIssueType &#x3D; ANR&#x60;. * &#x60;appProcessState&#x60;: Matches error issues on the process state of an app, indicating whether an app runs in the foreground (user-visible) or background. Valid candidates: &#x60;FOREGROUND&#x60;, &#x60;BACKGROUND&#x60;. Example: &#x60;appProcessState &#x3D; FOREGROUND&#x60;. * &#x60;isUserPerceived&#x60;: Matches error issues that are user-perceived. It is not accompanied by any operators. Example: &#x60;isUserPerceived&#x60;. ** Supported operators:** * Comparison operators: The only supported comparison operator is equality. The filtered field must appear on the left hand side of the comparison. * Logical Operators: Logical operators &#x60;AND&#x60; and &#x60;OR&#x60; can be used to build complex filters following a conjunctive normal form (CNF), i.e., conjunctions of disjunctions. The &#x60;OR&#x60; operator takes precedence over &#x60;AND&#x60; so the use of parenthesis is not necessary when building CNF. The &#x60;OR&#x60; operator is only supported to build disjunctions that apply to the same field, e.g., &#x60;versionCode &#x3D; 123 OR errorIssueType &#x3D; ANR&#x60; is not a valid filter. ** Examples ** Some valid filtering expressions: * &#x60;versionCode &#x3D; 123 AND errorIssueType &#x3D; ANR&#x60; * &#x60;versionCode &#x3D; 123 AND errorIssueType &#x3D; OR errorIssueType &#x3D; CRASH&#x60; * &#x60;versionCode &#x3D; 123 AND (errorIssueType &#x3D; OR errorIssueType &#x3D; CRASH)&#x60; (optional)
     * @param intervalEndTimeDay Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day. (optional)
     * @param intervalEndTimeHours Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \&quot;24:00:00\&quot; for scenarios like business closing time. (optional)
     * @param intervalEndTimeMinutes Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0. (optional)
     * @param intervalEndTimeMonth Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month. (optional)
     * @param intervalEndTimeNanos Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0. (optional)
     * @param intervalEndTimeSeconds Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds. (optional)
     * @param intervalEndTimeTimeZoneId IANA Time Zone Database time zone, e.g. \&quot;America/New_York\&quot;. (optional)
     * @param intervalEndTimeTimeZoneVersion Optional. IANA Time Zone Database version number, e.g. \&quot;2019a\&quot;. (optional)
     * @param intervalEndTimeUtcOffset UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }. (optional)
     * @param intervalEndTimeYear Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year. (optional)
     * @param intervalStartTimeDay Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day. (optional)
     * @param intervalStartTimeHours Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \&quot;24:00:00\&quot; for scenarios like business closing time. (optional)
     * @param intervalStartTimeMinutes Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0. (optional)
     * @param intervalStartTimeMonth Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month. (optional)
     * @param intervalStartTimeNanos Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0. (optional)
     * @param intervalStartTimeSeconds Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds. (optional)
     * @param intervalStartTimeTimeZoneId IANA Time Zone Database time zone, e.g. \&quot;America/New_York\&quot;. (optional)
     * @param intervalStartTimeTimeZoneVersion Optional. IANA Time Zone Database version number, e.g. \&quot;2019a\&quot;. (optional)
     * @param intervalStartTimeUtcOffset UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }. (optional)
     * @param intervalStartTimeYear Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year. (optional)
     * @param orderBy Specifies a field that will be used to order the results. ** Supported dimensions:** * &#x60;errorReportCount&#x60;: Orders issues by number of error reports. * &#x60;distinctUsers&#x60;: Orders issues by number of unique affected users. ** Supported operations:** * &#x60;asc&#x60; for ascending order. * &#x60;desc&#x60; for descending order. Format: A field and an operation, e.g., &#x60;errorReportCount desc&#x60; *Note:* currently only one field is supported at a time. (optional)
     * @param pageSize The maximum number of error issues to return. The service may return fewer than this value. If unspecified, at most 50 error issues will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to the request must match the call that provided the page token. (optional)
     * @return GooglePlayDeveloperReportingV1alpha1SearchErrorIssuesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GooglePlayDeveloperReportingV1alpha1SearchErrorIssuesResponse playdeveloperreportingVitalsErrorsIssuesSearch(String parent, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String filter, Integer intervalEndTimeDay, Integer intervalEndTimeHours, Integer intervalEndTimeMinutes, Integer intervalEndTimeMonth, Integer intervalEndTimeNanos, Integer intervalEndTimeSeconds, String intervalEndTimeTimeZoneId, String intervalEndTimeTimeZoneVersion, String intervalEndTimeUtcOffset, Integer intervalEndTimeYear, Integer intervalStartTimeDay, Integer intervalStartTimeHours, Integer intervalStartTimeMinutes, Integer intervalStartTimeMonth, Integer intervalStartTimeNanos, Integer intervalStartTimeSeconds, String intervalStartTimeTimeZoneId, String intervalStartTimeTimeZoneVersion, String intervalStartTimeUtcOffset, Integer intervalStartTimeYear, String orderBy, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<GooglePlayDeveloperReportingV1alpha1SearchErrorIssuesResponse> localVarResp = playdeveloperreportingVitalsErrorsIssuesSearchWithHttpInfo(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, intervalEndTimeDay, intervalEndTimeHours, intervalEndTimeMinutes, intervalEndTimeMonth, intervalEndTimeNanos, intervalEndTimeSeconds, intervalEndTimeTimeZoneId, intervalEndTimeTimeZoneVersion, intervalEndTimeUtcOffset, intervalEndTimeYear, intervalStartTimeDay, intervalStartTimeHours, intervalStartTimeMinutes, intervalStartTimeMonth, intervalStartTimeNanos, intervalStartTimeSeconds, intervalStartTimeTimeZoneId, intervalStartTimeTimeZoneVersion, intervalStartTimeUtcOffset, intervalStartTimeYear, orderBy, pageSize, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Searches all error issues in which reports have been grouped.
     * @param parent Required. Parent resource of the error issues, indicating the application for which they were received. Format: apps/{app} (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param filter A selection predicate to retrieve only a subset of the issues. Counts in the returned error issues will only reflect occurrences that matched the filter. For filtering basics, please check [AIP-160](https://google.aip.dev/160). ** Supported field names:** * &#x60;apiLevel&#x60;: Matches error issues that occurred in the requested Android versions (specified as the numeric API level) only. Example: &#x60;apiLevel &#x3D; 28 OR apiLevel &#x3D; 29&#x60;. * &#x60;versionCode&#x60;: Matches error issues that occurred in the requested app version codes only. Example: &#x60;versionCode &#x3D; 123 OR versionCode &#x3D; 456&#x60;. * &#x60;deviceModel&#x60;: Matches error issues that occurred in the requested devices. Example: &#x60;deviceModel &#x3D; \&quot;google/walleye\&quot; OR deviceModel &#x3D; \&quot;google/marlin\&quot;&#x60;. * &#x60;deviceBrand&#x60;: Matches error issues that occurred in the requested device brands. Example: &#x60;deviceBrand &#x3D; \&quot;Google\&quot;. * &#x60;deviceType&#x60;: Matches error issues that occurred in the requested device types. Example: &#x60;deviceType &#x3D; \&quot;PHONE\&quot;&#x60;. * &#x60;errorIssueType&#x60;: Matches error issues of the requested types only. Valid candidates: &#x60;CRASH&#x60;, &#x60;ANR&#x60;. Example: &#x60;errorIssueType &#x3D; CRASH OR errorIssueType &#x3D; ANR&#x60;. * &#x60;appProcessState&#x60;: Matches error issues on the process state of an app, indicating whether an app runs in the foreground (user-visible) or background. Valid candidates: &#x60;FOREGROUND&#x60;, &#x60;BACKGROUND&#x60;. Example: &#x60;appProcessState &#x3D; FOREGROUND&#x60;. * &#x60;isUserPerceived&#x60;: Matches error issues that are user-perceived. It is not accompanied by any operators. Example: &#x60;isUserPerceived&#x60;. ** Supported operators:** * Comparison operators: The only supported comparison operator is equality. The filtered field must appear on the left hand side of the comparison. * Logical Operators: Logical operators &#x60;AND&#x60; and &#x60;OR&#x60; can be used to build complex filters following a conjunctive normal form (CNF), i.e., conjunctions of disjunctions. The &#x60;OR&#x60; operator takes precedence over &#x60;AND&#x60; so the use of parenthesis is not necessary when building CNF. The &#x60;OR&#x60; operator is only supported to build disjunctions that apply to the same field, e.g., &#x60;versionCode &#x3D; 123 OR errorIssueType &#x3D; ANR&#x60; is not a valid filter. ** Examples ** Some valid filtering expressions: * &#x60;versionCode &#x3D; 123 AND errorIssueType &#x3D; ANR&#x60; * &#x60;versionCode &#x3D; 123 AND errorIssueType &#x3D; OR errorIssueType &#x3D; CRASH&#x60; * &#x60;versionCode &#x3D; 123 AND (errorIssueType &#x3D; OR errorIssueType &#x3D; CRASH)&#x60; (optional)
     * @param intervalEndTimeDay Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day. (optional)
     * @param intervalEndTimeHours Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \&quot;24:00:00\&quot; for scenarios like business closing time. (optional)
     * @param intervalEndTimeMinutes Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0. (optional)
     * @param intervalEndTimeMonth Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month. (optional)
     * @param intervalEndTimeNanos Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0. (optional)
     * @param intervalEndTimeSeconds Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds. (optional)
     * @param intervalEndTimeTimeZoneId IANA Time Zone Database time zone, e.g. \&quot;America/New_York\&quot;. (optional)
     * @param intervalEndTimeTimeZoneVersion Optional. IANA Time Zone Database version number, e.g. \&quot;2019a\&quot;. (optional)
     * @param intervalEndTimeUtcOffset UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }. (optional)
     * @param intervalEndTimeYear Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year. (optional)
     * @param intervalStartTimeDay Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day. (optional)
     * @param intervalStartTimeHours Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \&quot;24:00:00\&quot; for scenarios like business closing time. (optional)
     * @param intervalStartTimeMinutes Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0. (optional)
     * @param intervalStartTimeMonth Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month. (optional)
     * @param intervalStartTimeNanos Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0. (optional)
     * @param intervalStartTimeSeconds Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds. (optional)
     * @param intervalStartTimeTimeZoneId IANA Time Zone Database time zone, e.g. \&quot;America/New_York\&quot;. (optional)
     * @param intervalStartTimeTimeZoneVersion Optional. IANA Time Zone Database version number, e.g. \&quot;2019a\&quot;. (optional)
     * @param intervalStartTimeUtcOffset UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }. (optional)
     * @param intervalStartTimeYear Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year. (optional)
     * @param orderBy Specifies a field that will be used to order the results. ** Supported dimensions:** * &#x60;errorReportCount&#x60;: Orders issues by number of error reports. * &#x60;distinctUsers&#x60;: Orders issues by number of unique affected users. ** Supported operations:** * &#x60;asc&#x60; for ascending order. * &#x60;desc&#x60; for descending order. Format: A field and an operation, e.g., &#x60;errorReportCount desc&#x60; *Note:* currently only one field is supported at a time. (optional)
     * @param pageSize The maximum number of error issues to return. The service may return fewer than this value. If unspecified, at most 50 error issues will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to the request must match the call that provided the page token. (optional)
     * @return ApiResponse&lt;GooglePlayDeveloperReportingV1alpha1SearchErrorIssuesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GooglePlayDeveloperReportingV1alpha1SearchErrorIssuesResponse> playdeveloperreportingVitalsErrorsIssuesSearchWithHttpInfo(String parent, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String filter, Integer intervalEndTimeDay, Integer intervalEndTimeHours, Integer intervalEndTimeMinutes, Integer intervalEndTimeMonth, Integer intervalEndTimeNanos, Integer intervalEndTimeSeconds, String intervalEndTimeTimeZoneId, String intervalEndTimeTimeZoneVersion, String intervalEndTimeUtcOffset, Integer intervalEndTimeYear, Integer intervalStartTimeDay, Integer intervalStartTimeHours, Integer intervalStartTimeMinutes, Integer intervalStartTimeMonth, Integer intervalStartTimeNanos, Integer intervalStartTimeSeconds, String intervalStartTimeTimeZoneId, String intervalStartTimeTimeZoneVersion, String intervalStartTimeUtcOffset, Integer intervalStartTimeYear, String orderBy, Integer pageSize, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = playdeveloperreportingVitalsErrorsIssuesSearchValidateBeforeCall(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, intervalEndTimeDay, intervalEndTimeHours, intervalEndTimeMinutes, intervalEndTimeMonth, intervalEndTimeNanos, intervalEndTimeSeconds, intervalEndTimeTimeZoneId, intervalEndTimeTimeZoneVersion, intervalEndTimeUtcOffset, intervalEndTimeYear, intervalStartTimeDay, intervalStartTimeHours, intervalStartTimeMinutes, intervalStartTimeMonth, intervalStartTimeNanos, intervalStartTimeSeconds, intervalStartTimeTimeZoneId, intervalStartTimeTimeZoneVersion, intervalStartTimeUtcOffset, intervalStartTimeYear, orderBy, pageSize, pageToken, null);
        Type localVarReturnType = new TypeToken<GooglePlayDeveloperReportingV1alpha1SearchErrorIssuesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Searches all error issues in which reports have been grouped.
     * @param parent Required. Parent resource of the error issues, indicating the application for which they were received. Format: apps/{app} (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param filter A selection predicate to retrieve only a subset of the issues. Counts in the returned error issues will only reflect occurrences that matched the filter. For filtering basics, please check [AIP-160](https://google.aip.dev/160). ** Supported field names:** * &#x60;apiLevel&#x60;: Matches error issues that occurred in the requested Android versions (specified as the numeric API level) only. Example: &#x60;apiLevel &#x3D; 28 OR apiLevel &#x3D; 29&#x60;. * &#x60;versionCode&#x60;: Matches error issues that occurred in the requested app version codes only. Example: &#x60;versionCode &#x3D; 123 OR versionCode &#x3D; 456&#x60;. * &#x60;deviceModel&#x60;: Matches error issues that occurred in the requested devices. Example: &#x60;deviceModel &#x3D; \&quot;google/walleye\&quot; OR deviceModel &#x3D; \&quot;google/marlin\&quot;&#x60;. * &#x60;deviceBrand&#x60;: Matches error issues that occurred in the requested device brands. Example: &#x60;deviceBrand &#x3D; \&quot;Google\&quot;. * &#x60;deviceType&#x60;: Matches error issues that occurred in the requested device types. Example: &#x60;deviceType &#x3D; \&quot;PHONE\&quot;&#x60;. * &#x60;errorIssueType&#x60;: Matches error issues of the requested types only. Valid candidates: &#x60;CRASH&#x60;, &#x60;ANR&#x60;. Example: &#x60;errorIssueType &#x3D; CRASH OR errorIssueType &#x3D; ANR&#x60;. * &#x60;appProcessState&#x60;: Matches error issues on the process state of an app, indicating whether an app runs in the foreground (user-visible) or background. Valid candidates: &#x60;FOREGROUND&#x60;, &#x60;BACKGROUND&#x60;. Example: &#x60;appProcessState &#x3D; FOREGROUND&#x60;. * &#x60;isUserPerceived&#x60;: Matches error issues that are user-perceived. It is not accompanied by any operators. Example: &#x60;isUserPerceived&#x60;. ** Supported operators:** * Comparison operators: The only supported comparison operator is equality. The filtered field must appear on the left hand side of the comparison. * Logical Operators: Logical operators &#x60;AND&#x60; and &#x60;OR&#x60; can be used to build complex filters following a conjunctive normal form (CNF), i.e., conjunctions of disjunctions. The &#x60;OR&#x60; operator takes precedence over &#x60;AND&#x60; so the use of parenthesis is not necessary when building CNF. The &#x60;OR&#x60; operator is only supported to build disjunctions that apply to the same field, e.g., &#x60;versionCode &#x3D; 123 OR errorIssueType &#x3D; ANR&#x60; is not a valid filter. ** Examples ** Some valid filtering expressions: * &#x60;versionCode &#x3D; 123 AND errorIssueType &#x3D; ANR&#x60; * &#x60;versionCode &#x3D; 123 AND errorIssueType &#x3D; OR errorIssueType &#x3D; CRASH&#x60; * &#x60;versionCode &#x3D; 123 AND (errorIssueType &#x3D; OR errorIssueType &#x3D; CRASH)&#x60; (optional)
     * @param intervalEndTimeDay Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day. (optional)
     * @param intervalEndTimeHours Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \&quot;24:00:00\&quot; for scenarios like business closing time. (optional)
     * @param intervalEndTimeMinutes Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0. (optional)
     * @param intervalEndTimeMonth Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month. (optional)
     * @param intervalEndTimeNanos Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0. (optional)
     * @param intervalEndTimeSeconds Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds. (optional)
     * @param intervalEndTimeTimeZoneId IANA Time Zone Database time zone, e.g. \&quot;America/New_York\&quot;. (optional)
     * @param intervalEndTimeTimeZoneVersion Optional. IANA Time Zone Database version number, e.g. \&quot;2019a\&quot;. (optional)
     * @param intervalEndTimeUtcOffset UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }. (optional)
     * @param intervalEndTimeYear Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year. (optional)
     * @param intervalStartTimeDay Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day. (optional)
     * @param intervalStartTimeHours Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \&quot;24:00:00\&quot; for scenarios like business closing time. (optional)
     * @param intervalStartTimeMinutes Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0. (optional)
     * @param intervalStartTimeMonth Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month. (optional)
     * @param intervalStartTimeNanos Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0. (optional)
     * @param intervalStartTimeSeconds Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds. (optional)
     * @param intervalStartTimeTimeZoneId IANA Time Zone Database time zone, e.g. \&quot;America/New_York\&quot;. (optional)
     * @param intervalStartTimeTimeZoneVersion Optional. IANA Time Zone Database version number, e.g. \&quot;2019a\&quot;. (optional)
     * @param intervalStartTimeUtcOffset UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }. (optional)
     * @param intervalStartTimeYear Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year. (optional)
     * @param orderBy Specifies a field that will be used to order the results. ** Supported dimensions:** * &#x60;errorReportCount&#x60;: Orders issues by number of error reports. * &#x60;distinctUsers&#x60;: Orders issues by number of unique affected users. ** Supported operations:** * &#x60;asc&#x60; for ascending order. * &#x60;desc&#x60; for descending order. Format: A field and an operation, e.g., &#x60;errorReportCount desc&#x60; *Note:* currently only one field is supported at a time. (optional)
     * @param pageSize The maximum number of error issues to return. The service may return fewer than this value. If unspecified, at most 50 error issues will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000. (optional)
     * @param pageToken A page token, received from a previous call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to the request must match the call that provided the page token. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playdeveloperreportingVitalsErrorsIssuesSearchAsync(String parent, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String filter, Integer intervalEndTimeDay, Integer intervalEndTimeHours, Integer intervalEndTimeMinutes, Integer intervalEndTimeMonth, Integer intervalEndTimeNanos, Integer intervalEndTimeSeconds, String intervalEndTimeTimeZoneId, String intervalEndTimeTimeZoneVersion, String intervalEndTimeUtcOffset, Integer intervalEndTimeYear, Integer intervalStartTimeDay, Integer intervalStartTimeHours, Integer intervalStartTimeMinutes, Integer intervalStartTimeMonth, Integer intervalStartTimeNanos, Integer intervalStartTimeSeconds, String intervalStartTimeTimeZoneId, String intervalStartTimeTimeZoneVersion, String intervalStartTimeUtcOffset, Integer intervalStartTimeYear, String orderBy, Integer pageSize, String pageToken, final ApiCallback<GooglePlayDeveloperReportingV1alpha1SearchErrorIssuesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = playdeveloperreportingVitalsErrorsIssuesSearchValidateBeforeCall(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, intervalEndTimeDay, intervalEndTimeHours, intervalEndTimeMinutes, intervalEndTimeMonth, intervalEndTimeNanos, intervalEndTimeSeconds, intervalEndTimeTimeZoneId, intervalEndTimeTimeZoneVersion, intervalEndTimeUtcOffset, intervalEndTimeYear, intervalStartTimeDay, intervalStartTimeHours, intervalStartTimeMinutes, intervalStartTimeMonth, intervalStartTimeNanos, intervalStartTimeSeconds, intervalStartTimeTimeZoneId, intervalStartTimeTimeZoneVersion, intervalStartTimeUtcOffset, intervalStartTimeYear, orderBy, pageSize, pageToken, _callback);
        Type localVarReturnType = new TypeToken<GooglePlayDeveloperReportingV1alpha1SearchErrorIssuesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for playdeveloperreportingVitalsErrorsReportsSearch
     * @param parent Required. Parent resource of the reports, indicating the application for which they were received. Format: apps/{app} (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param filter A selection predicate to retrieve only a subset of the reports. For filtering basics, please check [AIP-160](https://google.aip.dev/160). ** Supported field names:** * &#x60;apiLevel&#x60;: Matches error reports that occurred in the requested Android versions (specified as the numeric API level) only. Example: &#x60;apiLevel &#x3D; 28 OR apiLevel &#x3D; 29&#x60;. * &#x60;versionCode&#x60;: Matches error reports that occurred in the requested app version codes only. Example: &#x60;versionCode &#x3D; 123 OR versionCode &#x3D; 456&#x60;. * &#x60;deviceModel&#x60;: Matches error issues that occurred in the requested devices. Example: &#x60;deviceModel &#x3D; \&quot;google/walleye\&quot; OR deviceModel &#x3D; \&quot;google/marlin\&quot;&#x60;. * &#x60;deviceBrand&#x60;: Matches error issues that occurred in the requested device brands. Example: &#x60;deviceBrand &#x3D; \&quot;Google\&quot;. * &#x60;deviceType&#x60;: Matches error reports that occurred in the requested device types. Example: &#x60;deviceType &#x3D; \&quot;PHONE\&quot;&#x60;. * &#x60;errorIssueType&#x60;: Matches error reports of the requested types only. Valid candidates: &#x60;JAVA_CRASH&#x60;, &#x60;NATIVE_CRASH&#x60;, &#x60;ANR&#x60;. Example: &#x60;errorIssueType &#x3D; JAVA_CRASH OR errorIssueType &#x3D; NATIVE_CRASH&#x60;. * &#x60;errorIssueId&#x60;: Matches error reports belonging to the requested error issue ids only. Example: &#x60;errorIssueId &#x3D; 1234 OR errorIssueId &#x3D; 4567&#x60;. * &#x60;appProcessState&#x60;: Matches error reports on the process state of an app, indicating whether an app runs in the foreground (user-visible) or background. Valid candidates: &#x60;FOREGROUND&#x60;, &#x60;BACKGROUND&#x60;. Example: &#x60;appProcessState &#x3D; FOREGROUND&#x60;. * &#x60;isUserPerceived&#x60;: Matches error reports that are user-perceived. It is not accompanied by any operators. Example: &#x60;isUserPerceived&#x60;. ** Supported operators:** * Comparison operators: The only supported comparison operator is equality. The filtered field must appear on the left hand side of the comparison. * Logical Operators: Logical operators &#x60;AND&#x60; and &#x60;OR&#x60; can be used to build complex filters following a conjunctive normal form (CNF), i.e., conjunctions of disjunctions. The &#x60;OR&#x60; operator takes precedence over &#x60;AND&#x60; so the use of parenthesis is not necessary when building CNF. The &#x60;OR&#x60; operator is only supported to build disjunctions that apply to the same field, e.g., &#x60;versionCode &#x3D; 123 OR versionCode &#x3D; ANR&#x60;. The filter expression &#x60;versionCode &#x3D; 123 OR errorIssueType &#x3D; ANR&#x60; is not valid. ** Examples ** Some valid filtering expressions: * &#x60;versionCode &#x3D; 123 AND errorIssueType &#x3D; ANR&#x60; * &#x60;versionCode &#x3D; 123 AND errorIssueType &#x3D; OR errorIssueType &#x3D; CRASH&#x60; * &#x60;versionCode &#x3D; 123 AND (errorIssueType &#x3D; OR errorIssueType &#x3D; CRASH)&#x60; (optional)
     * @param intervalEndTimeDay Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day. (optional)
     * @param intervalEndTimeHours Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \&quot;24:00:00\&quot; for scenarios like business closing time. (optional)
     * @param intervalEndTimeMinutes Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0. (optional)
     * @param intervalEndTimeMonth Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month. (optional)
     * @param intervalEndTimeNanos Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0. (optional)
     * @param intervalEndTimeSeconds Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds. (optional)
     * @param intervalEndTimeTimeZoneId IANA Time Zone Database time zone, e.g. \&quot;America/New_York\&quot;. (optional)
     * @param intervalEndTimeTimeZoneVersion Optional. IANA Time Zone Database version number, e.g. \&quot;2019a\&quot;. (optional)
     * @param intervalEndTimeUtcOffset UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }. (optional)
     * @param intervalEndTimeYear Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year. (optional)
     * @param intervalStartTimeDay Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day. (optional)
     * @param intervalStartTimeHours Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \&quot;24:00:00\&quot; for scenarios like business closing time. (optional)
     * @param intervalStartTimeMinutes Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0. (optional)
     * @param intervalStartTimeMonth Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month. (optional)
     * @param intervalStartTimeNanos Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0. (optional)
     * @param intervalStartTimeSeconds Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds. (optional)
     * @param intervalStartTimeTimeZoneId IANA Time Zone Database time zone, e.g. \&quot;America/New_York\&quot;. (optional)
     * @param intervalStartTimeTimeZoneVersion Optional. IANA Time Zone Database version number, e.g. \&quot;2019a\&quot;. (optional)
     * @param intervalStartTimeUtcOffset UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }. (optional)
     * @param intervalStartTimeYear Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year. (optional)
     * @param pageSize The maximum number of reports to return. The service may return fewer than this value. If unspecified, at most 50 reports will be returned. The maximum value is 100; values above 100 will be coerced to 100. (optional)
     * @param pageToken A page token, received from a previous &#x60;SearchErrorReports&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;SearchErrorReports&#x60; must match the call that provided the page token. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playdeveloperreportingVitalsErrorsReportsSearchCall(String parent, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String filter, Integer intervalEndTimeDay, Integer intervalEndTimeHours, Integer intervalEndTimeMinutes, Integer intervalEndTimeMonth, Integer intervalEndTimeNanos, Integer intervalEndTimeSeconds, String intervalEndTimeTimeZoneId, String intervalEndTimeTimeZoneVersion, String intervalEndTimeUtcOffset, Integer intervalEndTimeYear, Integer intervalStartTimeDay, Integer intervalStartTimeHours, Integer intervalStartTimeMinutes, Integer intervalStartTimeMonth, Integer intervalStartTimeNanos, Integer intervalStartTimeSeconds, String intervalStartTimeTimeZoneId, String intervalStartTimeTimeZoneVersion, String intervalStartTimeUtcOffset, Integer intervalStartTimeYear, Integer pageSize, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1alpha1/{parent}/errorReports:search"
            .replace("{" + "parent" + "}", localVarApiClient.escapeString(parent.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (intervalEndTimeDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.endTime.day", intervalEndTimeDay));
        }

        if (intervalEndTimeHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.endTime.hours", intervalEndTimeHours));
        }

        if (intervalEndTimeMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.endTime.minutes", intervalEndTimeMinutes));
        }

        if (intervalEndTimeMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.endTime.month", intervalEndTimeMonth));
        }

        if (intervalEndTimeNanos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.endTime.nanos", intervalEndTimeNanos));
        }

        if (intervalEndTimeSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.endTime.seconds", intervalEndTimeSeconds));
        }

        if (intervalEndTimeTimeZoneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.endTime.timeZone.id", intervalEndTimeTimeZoneId));
        }

        if (intervalEndTimeTimeZoneVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.endTime.timeZone.version", intervalEndTimeTimeZoneVersion));
        }

        if (intervalEndTimeUtcOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.endTime.utcOffset", intervalEndTimeUtcOffset));
        }

        if (intervalEndTimeYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.endTime.year", intervalEndTimeYear));
        }

        if (intervalStartTimeDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.startTime.day", intervalStartTimeDay));
        }

        if (intervalStartTimeHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.startTime.hours", intervalStartTimeHours));
        }

        if (intervalStartTimeMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.startTime.minutes", intervalStartTimeMinutes));
        }

        if (intervalStartTimeMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.startTime.month", intervalStartTimeMonth));
        }

        if (intervalStartTimeNanos != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.startTime.nanos", intervalStartTimeNanos));
        }

        if (intervalStartTimeSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.startTime.seconds", intervalStartTimeSeconds));
        }

        if (intervalStartTimeTimeZoneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.startTime.timeZone.id", intervalStartTimeTimeZoneId));
        }

        if (intervalStartTimeTimeZoneVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.startTime.timeZone.version", intervalStartTimeTimeZoneVersion));
        }

        if (intervalStartTimeUtcOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.startTime.utcOffset", intervalStartTimeUtcOffset));
        }

        if (intervalStartTimeYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval.startTime.year", intervalStartTimeYear));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playdeveloperreportingVitalsErrorsReportsSearchValidateBeforeCall(String parent, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String filter, Integer intervalEndTimeDay, Integer intervalEndTimeHours, Integer intervalEndTimeMinutes, Integer intervalEndTimeMonth, Integer intervalEndTimeNanos, Integer intervalEndTimeSeconds, String intervalEndTimeTimeZoneId, String intervalEndTimeTimeZoneVersion, String intervalEndTimeUtcOffset, Integer intervalEndTimeYear, Integer intervalStartTimeDay, Integer intervalStartTimeHours, Integer intervalStartTimeMinutes, Integer intervalStartTimeMonth, Integer intervalStartTimeNanos, Integer intervalStartTimeSeconds, String intervalStartTimeTimeZoneId, String intervalStartTimeTimeZoneVersion, String intervalStartTimeUtcOffset, Integer intervalStartTimeYear, Integer pageSize, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'parent' is set
        if (parent == null) {
            throw new ApiException("Missing the required parameter 'parent' when calling playdeveloperreportingVitalsErrorsReportsSearch(Async)");
        }

        return playdeveloperreportingVitalsErrorsReportsSearchCall(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, intervalEndTimeDay, intervalEndTimeHours, intervalEndTimeMinutes, intervalEndTimeMonth, intervalEndTimeNanos, intervalEndTimeSeconds, intervalEndTimeTimeZoneId, intervalEndTimeTimeZoneVersion, intervalEndTimeUtcOffset, intervalEndTimeYear, intervalStartTimeDay, intervalStartTimeHours, intervalStartTimeMinutes, intervalStartTimeMonth, intervalStartTimeNanos, intervalStartTimeSeconds, intervalStartTimeTimeZoneId, intervalStartTimeTimeZoneVersion, intervalStartTimeUtcOffset, intervalStartTimeYear, pageSize, pageToken, _callback);

    }

    /**
     * 
     * Searches all error reports received for an app.
     * @param parent Required. Parent resource of the reports, indicating the application for which they were received. Format: apps/{app} (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param filter A selection predicate to retrieve only a subset of the reports. For filtering basics, please check [AIP-160](https://google.aip.dev/160). ** Supported field names:** * &#x60;apiLevel&#x60;: Matches error reports that occurred in the requested Android versions (specified as the numeric API level) only. Example: &#x60;apiLevel &#x3D; 28 OR apiLevel &#x3D; 29&#x60;. * &#x60;versionCode&#x60;: Matches error reports that occurred in the requested app version codes only. Example: &#x60;versionCode &#x3D; 123 OR versionCode &#x3D; 456&#x60;. * &#x60;deviceModel&#x60;: Matches error issues that occurred in the requested devices. Example: &#x60;deviceModel &#x3D; \&quot;google/walleye\&quot; OR deviceModel &#x3D; \&quot;google/marlin\&quot;&#x60;. * &#x60;deviceBrand&#x60;: Matches error issues that occurred in the requested device brands. Example: &#x60;deviceBrand &#x3D; \&quot;Google\&quot;. * &#x60;deviceType&#x60;: Matches error reports that occurred in the requested device types. Example: &#x60;deviceType &#x3D; \&quot;PHONE\&quot;&#x60;. * &#x60;errorIssueType&#x60;: Matches error reports of the requested types only. Valid candidates: &#x60;JAVA_CRASH&#x60;, &#x60;NATIVE_CRASH&#x60;, &#x60;ANR&#x60;. Example: &#x60;errorIssueType &#x3D; JAVA_CRASH OR errorIssueType &#x3D; NATIVE_CRASH&#x60;. * &#x60;errorIssueId&#x60;: Matches error reports belonging to the requested error issue ids only. Example: &#x60;errorIssueId &#x3D; 1234 OR errorIssueId &#x3D; 4567&#x60;. * &#x60;appProcessState&#x60;: Matches error reports on the process state of an app, indicating whether an app runs in the foreground (user-visible) or background. Valid candidates: &#x60;FOREGROUND&#x60;, &#x60;BACKGROUND&#x60;. Example: &#x60;appProcessState &#x3D; FOREGROUND&#x60;. * &#x60;isUserPerceived&#x60;: Matches error reports that are user-perceived. It is not accompanied by any operators. Example: &#x60;isUserPerceived&#x60;. ** Supported operators:** * Comparison operators: The only supported comparison operator is equality. The filtered field must appear on the left hand side of the comparison. * Logical Operators: Logical operators &#x60;AND&#x60; and &#x60;OR&#x60; can be used to build complex filters following a conjunctive normal form (CNF), i.e., conjunctions of disjunctions. The &#x60;OR&#x60; operator takes precedence over &#x60;AND&#x60; so the use of parenthesis is not necessary when building CNF. The &#x60;OR&#x60; operator is only supported to build disjunctions that apply to the same field, e.g., &#x60;versionCode &#x3D; 123 OR versionCode &#x3D; ANR&#x60;. The filter expression &#x60;versionCode &#x3D; 123 OR errorIssueType &#x3D; ANR&#x60; is not valid. ** Examples ** Some valid filtering expressions: * &#x60;versionCode &#x3D; 123 AND errorIssueType &#x3D; ANR&#x60; * &#x60;versionCode &#x3D; 123 AND errorIssueType &#x3D; OR errorIssueType &#x3D; CRASH&#x60; * &#x60;versionCode &#x3D; 123 AND (errorIssueType &#x3D; OR errorIssueType &#x3D; CRASH)&#x60; (optional)
     * @param intervalEndTimeDay Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day. (optional)
     * @param intervalEndTimeHours Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \&quot;24:00:00\&quot; for scenarios like business closing time. (optional)
     * @param intervalEndTimeMinutes Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0. (optional)
     * @param intervalEndTimeMonth Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month. (optional)
     * @param intervalEndTimeNanos Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0. (optional)
     * @param intervalEndTimeSeconds Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds. (optional)
     * @param intervalEndTimeTimeZoneId IANA Time Zone Database time zone, e.g. \&quot;America/New_York\&quot;. (optional)
     * @param intervalEndTimeTimeZoneVersion Optional. IANA Time Zone Database version number, e.g. \&quot;2019a\&quot;. (optional)
     * @param intervalEndTimeUtcOffset UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }. (optional)
     * @param intervalEndTimeYear Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year. (optional)
     * @param intervalStartTimeDay Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day. (optional)
     * @param intervalStartTimeHours Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \&quot;24:00:00\&quot; for scenarios like business closing time. (optional)
     * @param intervalStartTimeMinutes Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0. (optional)
     * @param intervalStartTimeMonth Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month. (optional)
     * @param intervalStartTimeNanos Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0. (optional)
     * @param intervalStartTimeSeconds Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds. (optional)
     * @param intervalStartTimeTimeZoneId IANA Time Zone Database time zone, e.g. \&quot;America/New_York\&quot;. (optional)
     * @param intervalStartTimeTimeZoneVersion Optional. IANA Time Zone Database version number, e.g. \&quot;2019a\&quot;. (optional)
     * @param intervalStartTimeUtcOffset UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }. (optional)
     * @param intervalStartTimeYear Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year. (optional)
     * @param pageSize The maximum number of reports to return. The service may return fewer than this value. If unspecified, at most 50 reports will be returned. The maximum value is 100; values above 100 will be coerced to 100. (optional)
     * @param pageToken A page token, received from a previous &#x60;SearchErrorReports&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;SearchErrorReports&#x60; must match the call that provided the page token. (optional)
     * @return GooglePlayDeveloperReportingV1alpha1SearchErrorReportsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GooglePlayDeveloperReportingV1alpha1SearchErrorReportsResponse playdeveloperreportingVitalsErrorsReportsSearch(String parent, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String filter, Integer intervalEndTimeDay, Integer intervalEndTimeHours, Integer intervalEndTimeMinutes, Integer intervalEndTimeMonth, Integer intervalEndTimeNanos, Integer intervalEndTimeSeconds, String intervalEndTimeTimeZoneId, String intervalEndTimeTimeZoneVersion, String intervalEndTimeUtcOffset, Integer intervalEndTimeYear, Integer intervalStartTimeDay, Integer intervalStartTimeHours, Integer intervalStartTimeMinutes, Integer intervalStartTimeMonth, Integer intervalStartTimeNanos, Integer intervalStartTimeSeconds, String intervalStartTimeTimeZoneId, String intervalStartTimeTimeZoneVersion, String intervalStartTimeUtcOffset, Integer intervalStartTimeYear, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<GooglePlayDeveloperReportingV1alpha1SearchErrorReportsResponse> localVarResp = playdeveloperreportingVitalsErrorsReportsSearchWithHttpInfo(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, intervalEndTimeDay, intervalEndTimeHours, intervalEndTimeMinutes, intervalEndTimeMonth, intervalEndTimeNanos, intervalEndTimeSeconds, intervalEndTimeTimeZoneId, intervalEndTimeTimeZoneVersion, intervalEndTimeUtcOffset, intervalEndTimeYear, intervalStartTimeDay, intervalStartTimeHours, intervalStartTimeMinutes, intervalStartTimeMonth, intervalStartTimeNanos, intervalStartTimeSeconds, intervalStartTimeTimeZoneId, intervalStartTimeTimeZoneVersion, intervalStartTimeUtcOffset, intervalStartTimeYear, pageSize, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Searches all error reports received for an app.
     * @param parent Required. Parent resource of the reports, indicating the application for which they were received. Format: apps/{app} (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param filter A selection predicate to retrieve only a subset of the reports. For filtering basics, please check [AIP-160](https://google.aip.dev/160). ** Supported field names:** * &#x60;apiLevel&#x60;: Matches error reports that occurred in the requested Android versions (specified as the numeric API level) only. Example: &#x60;apiLevel &#x3D; 28 OR apiLevel &#x3D; 29&#x60;. * &#x60;versionCode&#x60;: Matches error reports that occurred in the requested app version codes only. Example: &#x60;versionCode &#x3D; 123 OR versionCode &#x3D; 456&#x60;. * &#x60;deviceModel&#x60;: Matches error issues that occurred in the requested devices. Example: &#x60;deviceModel &#x3D; \&quot;google/walleye\&quot; OR deviceModel &#x3D; \&quot;google/marlin\&quot;&#x60;. * &#x60;deviceBrand&#x60;: Matches error issues that occurred in the requested device brands. Example: &#x60;deviceBrand &#x3D; \&quot;Google\&quot;. * &#x60;deviceType&#x60;: Matches error reports that occurred in the requested device types. Example: &#x60;deviceType &#x3D; \&quot;PHONE\&quot;&#x60;. * &#x60;errorIssueType&#x60;: Matches error reports of the requested types only. Valid candidates: &#x60;JAVA_CRASH&#x60;, &#x60;NATIVE_CRASH&#x60;, &#x60;ANR&#x60;. Example: &#x60;errorIssueType &#x3D; JAVA_CRASH OR errorIssueType &#x3D; NATIVE_CRASH&#x60;. * &#x60;errorIssueId&#x60;: Matches error reports belonging to the requested error issue ids only. Example: &#x60;errorIssueId &#x3D; 1234 OR errorIssueId &#x3D; 4567&#x60;. * &#x60;appProcessState&#x60;: Matches error reports on the process state of an app, indicating whether an app runs in the foreground (user-visible) or background. Valid candidates: &#x60;FOREGROUND&#x60;, &#x60;BACKGROUND&#x60;. Example: &#x60;appProcessState &#x3D; FOREGROUND&#x60;. * &#x60;isUserPerceived&#x60;: Matches error reports that are user-perceived. It is not accompanied by any operators. Example: &#x60;isUserPerceived&#x60;. ** Supported operators:** * Comparison operators: The only supported comparison operator is equality. The filtered field must appear on the left hand side of the comparison. * Logical Operators: Logical operators &#x60;AND&#x60; and &#x60;OR&#x60; can be used to build complex filters following a conjunctive normal form (CNF), i.e., conjunctions of disjunctions. The &#x60;OR&#x60; operator takes precedence over &#x60;AND&#x60; so the use of parenthesis is not necessary when building CNF. The &#x60;OR&#x60; operator is only supported to build disjunctions that apply to the same field, e.g., &#x60;versionCode &#x3D; 123 OR versionCode &#x3D; ANR&#x60;. The filter expression &#x60;versionCode &#x3D; 123 OR errorIssueType &#x3D; ANR&#x60; is not valid. ** Examples ** Some valid filtering expressions: * &#x60;versionCode &#x3D; 123 AND errorIssueType &#x3D; ANR&#x60; * &#x60;versionCode &#x3D; 123 AND errorIssueType &#x3D; OR errorIssueType &#x3D; CRASH&#x60; * &#x60;versionCode &#x3D; 123 AND (errorIssueType &#x3D; OR errorIssueType &#x3D; CRASH)&#x60; (optional)
     * @param intervalEndTimeDay Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day. (optional)
     * @param intervalEndTimeHours Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \&quot;24:00:00\&quot; for scenarios like business closing time. (optional)
     * @param intervalEndTimeMinutes Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0. (optional)
     * @param intervalEndTimeMonth Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month. (optional)
     * @param intervalEndTimeNanos Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0. (optional)
     * @param intervalEndTimeSeconds Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds. (optional)
     * @param intervalEndTimeTimeZoneId IANA Time Zone Database time zone, e.g. \&quot;America/New_York\&quot;. (optional)
     * @param intervalEndTimeTimeZoneVersion Optional. IANA Time Zone Database version number, e.g. \&quot;2019a\&quot;. (optional)
     * @param intervalEndTimeUtcOffset UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }. (optional)
     * @param intervalEndTimeYear Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year. (optional)
     * @param intervalStartTimeDay Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day. (optional)
     * @param intervalStartTimeHours Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \&quot;24:00:00\&quot; for scenarios like business closing time. (optional)
     * @param intervalStartTimeMinutes Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0. (optional)
     * @param intervalStartTimeMonth Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month. (optional)
     * @param intervalStartTimeNanos Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0. (optional)
     * @param intervalStartTimeSeconds Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds. (optional)
     * @param intervalStartTimeTimeZoneId IANA Time Zone Database time zone, e.g. \&quot;America/New_York\&quot;. (optional)
     * @param intervalStartTimeTimeZoneVersion Optional. IANA Time Zone Database version number, e.g. \&quot;2019a\&quot;. (optional)
     * @param intervalStartTimeUtcOffset UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }. (optional)
     * @param intervalStartTimeYear Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year. (optional)
     * @param pageSize The maximum number of reports to return. The service may return fewer than this value. If unspecified, at most 50 reports will be returned. The maximum value is 100; values above 100 will be coerced to 100. (optional)
     * @param pageToken A page token, received from a previous &#x60;SearchErrorReports&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;SearchErrorReports&#x60; must match the call that provided the page token. (optional)
     * @return ApiResponse&lt;GooglePlayDeveloperReportingV1alpha1SearchErrorReportsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GooglePlayDeveloperReportingV1alpha1SearchErrorReportsResponse> playdeveloperreportingVitalsErrorsReportsSearchWithHttpInfo(String parent, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String filter, Integer intervalEndTimeDay, Integer intervalEndTimeHours, Integer intervalEndTimeMinutes, Integer intervalEndTimeMonth, Integer intervalEndTimeNanos, Integer intervalEndTimeSeconds, String intervalEndTimeTimeZoneId, String intervalEndTimeTimeZoneVersion, String intervalEndTimeUtcOffset, Integer intervalEndTimeYear, Integer intervalStartTimeDay, Integer intervalStartTimeHours, Integer intervalStartTimeMinutes, Integer intervalStartTimeMonth, Integer intervalStartTimeNanos, Integer intervalStartTimeSeconds, String intervalStartTimeTimeZoneId, String intervalStartTimeTimeZoneVersion, String intervalStartTimeUtcOffset, Integer intervalStartTimeYear, Integer pageSize, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = playdeveloperreportingVitalsErrorsReportsSearchValidateBeforeCall(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, intervalEndTimeDay, intervalEndTimeHours, intervalEndTimeMinutes, intervalEndTimeMonth, intervalEndTimeNanos, intervalEndTimeSeconds, intervalEndTimeTimeZoneId, intervalEndTimeTimeZoneVersion, intervalEndTimeUtcOffset, intervalEndTimeYear, intervalStartTimeDay, intervalStartTimeHours, intervalStartTimeMinutes, intervalStartTimeMonth, intervalStartTimeNanos, intervalStartTimeSeconds, intervalStartTimeTimeZoneId, intervalStartTimeTimeZoneVersion, intervalStartTimeUtcOffset, intervalStartTimeYear, pageSize, pageToken, null);
        Type localVarReturnType = new TypeToken<GooglePlayDeveloperReportingV1alpha1SearchErrorReportsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Searches all error reports received for an app.
     * @param parent Required. Parent resource of the reports, indicating the application for which they were received. Format: apps/{app} (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param filter A selection predicate to retrieve only a subset of the reports. For filtering basics, please check [AIP-160](https://google.aip.dev/160). ** Supported field names:** * &#x60;apiLevel&#x60;: Matches error reports that occurred in the requested Android versions (specified as the numeric API level) only. Example: &#x60;apiLevel &#x3D; 28 OR apiLevel &#x3D; 29&#x60;. * &#x60;versionCode&#x60;: Matches error reports that occurred in the requested app version codes only. Example: &#x60;versionCode &#x3D; 123 OR versionCode &#x3D; 456&#x60;. * &#x60;deviceModel&#x60;: Matches error issues that occurred in the requested devices. Example: &#x60;deviceModel &#x3D; \&quot;google/walleye\&quot; OR deviceModel &#x3D; \&quot;google/marlin\&quot;&#x60;. * &#x60;deviceBrand&#x60;: Matches error issues that occurred in the requested device brands. Example: &#x60;deviceBrand &#x3D; \&quot;Google\&quot;. * &#x60;deviceType&#x60;: Matches error reports that occurred in the requested device types. Example: &#x60;deviceType &#x3D; \&quot;PHONE\&quot;&#x60;. * &#x60;errorIssueType&#x60;: Matches error reports of the requested types only. Valid candidates: &#x60;JAVA_CRASH&#x60;, &#x60;NATIVE_CRASH&#x60;, &#x60;ANR&#x60;. Example: &#x60;errorIssueType &#x3D; JAVA_CRASH OR errorIssueType &#x3D; NATIVE_CRASH&#x60;. * &#x60;errorIssueId&#x60;: Matches error reports belonging to the requested error issue ids only. Example: &#x60;errorIssueId &#x3D; 1234 OR errorIssueId &#x3D; 4567&#x60;. * &#x60;appProcessState&#x60;: Matches error reports on the process state of an app, indicating whether an app runs in the foreground (user-visible) or background. Valid candidates: &#x60;FOREGROUND&#x60;, &#x60;BACKGROUND&#x60;. Example: &#x60;appProcessState &#x3D; FOREGROUND&#x60;. * &#x60;isUserPerceived&#x60;: Matches error reports that are user-perceived. It is not accompanied by any operators. Example: &#x60;isUserPerceived&#x60;. ** Supported operators:** * Comparison operators: The only supported comparison operator is equality. The filtered field must appear on the left hand side of the comparison. * Logical Operators: Logical operators &#x60;AND&#x60; and &#x60;OR&#x60; can be used to build complex filters following a conjunctive normal form (CNF), i.e., conjunctions of disjunctions. The &#x60;OR&#x60; operator takes precedence over &#x60;AND&#x60; so the use of parenthesis is not necessary when building CNF. The &#x60;OR&#x60; operator is only supported to build disjunctions that apply to the same field, e.g., &#x60;versionCode &#x3D; 123 OR versionCode &#x3D; ANR&#x60;. The filter expression &#x60;versionCode &#x3D; 123 OR errorIssueType &#x3D; ANR&#x60; is not valid. ** Examples ** Some valid filtering expressions: * &#x60;versionCode &#x3D; 123 AND errorIssueType &#x3D; ANR&#x60; * &#x60;versionCode &#x3D; 123 AND errorIssueType &#x3D; OR errorIssueType &#x3D; CRASH&#x60; * &#x60;versionCode &#x3D; 123 AND (errorIssueType &#x3D; OR errorIssueType &#x3D; CRASH)&#x60; (optional)
     * @param intervalEndTimeDay Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day. (optional)
     * @param intervalEndTimeHours Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \&quot;24:00:00\&quot; for scenarios like business closing time. (optional)
     * @param intervalEndTimeMinutes Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0. (optional)
     * @param intervalEndTimeMonth Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month. (optional)
     * @param intervalEndTimeNanos Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0. (optional)
     * @param intervalEndTimeSeconds Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds. (optional)
     * @param intervalEndTimeTimeZoneId IANA Time Zone Database time zone, e.g. \&quot;America/New_York\&quot;. (optional)
     * @param intervalEndTimeTimeZoneVersion Optional. IANA Time Zone Database version number, e.g. \&quot;2019a\&quot;. (optional)
     * @param intervalEndTimeUtcOffset UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }. (optional)
     * @param intervalEndTimeYear Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year. (optional)
     * @param intervalStartTimeDay Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day. (optional)
     * @param intervalStartTimeHours Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \&quot;24:00:00\&quot; for scenarios like business closing time. (optional)
     * @param intervalStartTimeMinutes Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0. (optional)
     * @param intervalStartTimeMonth Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month. (optional)
     * @param intervalStartTimeNanos Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0. (optional)
     * @param intervalStartTimeSeconds Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds. (optional)
     * @param intervalStartTimeTimeZoneId IANA Time Zone Database time zone, e.g. \&quot;America/New_York\&quot;. (optional)
     * @param intervalStartTimeTimeZoneVersion Optional. IANA Time Zone Database version number, e.g. \&quot;2019a\&quot;. (optional)
     * @param intervalStartTimeUtcOffset UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }. (optional)
     * @param intervalStartTimeYear Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year. (optional)
     * @param pageSize The maximum number of reports to return. The service may return fewer than this value. If unspecified, at most 50 reports will be returned. The maximum value is 100; values above 100 will be coerced to 100. (optional)
     * @param pageToken A page token, received from a previous &#x60;SearchErrorReports&#x60; call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to &#x60;SearchErrorReports&#x60; must match the call that provided the page token. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playdeveloperreportingVitalsErrorsReportsSearchAsync(String parent, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, String filter, Integer intervalEndTimeDay, Integer intervalEndTimeHours, Integer intervalEndTimeMinutes, Integer intervalEndTimeMonth, Integer intervalEndTimeNanos, Integer intervalEndTimeSeconds, String intervalEndTimeTimeZoneId, String intervalEndTimeTimeZoneVersion, String intervalEndTimeUtcOffset, Integer intervalEndTimeYear, Integer intervalStartTimeDay, Integer intervalStartTimeHours, Integer intervalStartTimeMinutes, Integer intervalStartTimeMonth, Integer intervalStartTimeNanos, Integer intervalStartTimeSeconds, String intervalStartTimeTimeZoneId, String intervalStartTimeTimeZoneVersion, String intervalStartTimeUtcOffset, Integer intervalStartTimeYear, Integer pageSize, String pageToken, final ApiCallback<GooglePlayDeveloperReportingV1alpha1SearchErrorReportsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = playdeveloperreportingVitalsErrorsReportsSearchValidateBeforeCall(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, intervalEndTimeDay, intervalEndTimeHours, intervalEndTimeMinutes, intervalEndTimeMonth, intervalEndTimeNanos, intervalEndTimeSeconds, intervalEndTimeTimeZoneId, intervalEndTimeTimeZoneVersion, intervalEndTimeUtcOffset, intervalEndTimeYear, intervalStartTimeDay, intervalStartTimeHours, intervalStartTimeMinutes, intervalStartTimeMonth, intervalStartTimeNanos, intervalStartTimeSeconds, intervalStartTimeTimeZoneId, intervalStartTimeTimeZoneVersion, intervalStartTimeUtcOffset, intervalStartTimeYear, pageSize, pageToken, _callback);
        Type localVarReturnType = new TypeToken<GooglePlayDeveloperReportingV1alpha1SearchErrorReportsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for playdeveloperreportingVitalsStuckbackgroundwakelockrateGet
     * @param name Required. The resource name. Format: apps/{app}/stuckBackgroundWakelockRateMetricSet (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playdeveloperreportingVitalsStuckbackgroundwakelockrateGetCall(String name, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1alpha1/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playdeveloperreportingVitalsStuckbackgroundwakelockrateGetValidateBeforeCall(String name, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling playdeveloperreportingVitalsStuckbackgroundwakelockrateGet(Async)");
        }

        return playdeveloperreportingVitalsStuckbackgroundwakelockrateGetCall(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, _callback);

    }

    /**
     * 
     * Describes the properties of the metric set.
     * @param name Required. The resource name. Format: apps/{app}/stuckBackgroundWakelockRateMetricSet (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @return GooglePlayDeveloperReportingV1alpha1StuckBackgroundWakelockRateMetricSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GooglePlayDeveloperReportingV1alpha1StuckBackgroundWakelockRateMetricSet playdeveloperreportingVitalsStuckbackgroundwakelockrateGet(String name, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType) throws ApiException {
        ApiResponse<GooglePlayDeveloperReportingV1alpha1StuckBackgroundWakelockRateMetricSet> localVarResp = playdeveloperreportingVitalsStuckbackgroundwakelockrateGetWithHttpInfo(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the properties of the metric set.
     * @param name Required. The resource name. Format: apps/{app}/stuckBackgroundWakelockRateMetricSet (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @return ApiResponse&lt;GooglePlayDeveloperReportingV1alpha1StuckBackgroundWakelockRateMetricSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GooglePlayDeveloperReportingV1alpha1StuckBackgroundWakelockRateMetricSet> playdeveloperreportingVitalsStuckbackgroundwakelockrateGetWithHttpInfo(String name, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType) throws ApiException {
        okhttp3.Call localVarCall = playdeveloperreportingVitalsStuckbackgroundwakelockrateGetValidateBeforeCall(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, null);
        Type localVarReturnType = new TypeToken<GooglePlayDeveloperReportingV1alpha1StuckBackgroundWakelockRateMetricSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the properties of the metric set.
     * @param name Required. The resource name. Format: apps/{app}/stuckBackgroundWakelockRateMetricSet (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playdeveloperreportingVitalsStuckbackgroundwakelockrateGetAsync(String name, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, final ApiCallback<GooglePlayDeveloperReportingV1alpha1StuckBackgroundWakelockRateMetricSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = playdeveloperreportingVitalsStuckbackgroundwakelockrateGetValidateBeforeCall(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, _callback);
        Type localVarReturnType = new TypeToken<GooglePlayDeveloperReportingV1alpha1StuckBackgroundWakelockRateMetricSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for playdeveloperreportingVitalsStuckbackgroundwakelockrateQuery
     * @param name Required. The resource name. Format: apps/{app}/stuckBackgroundWakelockRateMetricSet (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param googlePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playdeveloperreportingVitalsStuckbackgroundwakelockrateQueryCall(String name, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, GooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest googlePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = googlePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest;

        // create path and map variables
        String localVarPath = "/v1alpha1/{name}:query"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playdeveloperreportingVitalsStuckbackgroundwakelockrateQueryValidateBeforeCall(String name, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, GooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest googlePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling playdeveloperreportingVitalsStuckbackgroundwakelockrateQuery(Async)");
        }

        return playdeveloperreportingVitalsStuckbackgroundwakelockrateQueryCall(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googlePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest, _callback);

    }

    /**
     * 
     * Queries the metrics in the metric set.
     * @param name Required. The resource name. Format: apps/{app}/stuckBackgroundWakelockRateMetricSet (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param googlePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest  (optional)
     * @return GooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetResponse playdeveloperreportingVitalsStuckbackgroundwakelockrateQuery(String name, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, GooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest googlePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest) throws ApiException {
        ApiResponse<GooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetResponse> localVarResp = playdeveloperreportingVitalsStuckbackgroundwakelockrateQueryWithHttpInfo(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googlePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Queries the metrics in the metric set.
     * @param name Required. The resource name. Format: apps/{app}/stuckBackgroundWakelockRateMetricSet (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param googlePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest  (optional)
     * @return ApiResponse&lt;GooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetResponse> playdeveloperreportingVitalsStuckbackgroundwakelockrateQueryWithHttpInfo(String name, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, GooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest googlePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest) throws ApiException {
        okhttp3.Call localVarCall = playdeveloperreportingVitalsStuckbackgroundwakelockrateQueryValidateBeforeCall(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googlePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest, null);
        Type localVarReturnType = new TypeToken<GooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Queries the metrics in the metric set.
     * @param name Required. The resource name. Format: apps/{app}/stuckBackgroundWakelockRateMetricSet (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param googlePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playdeveloperreportingVitalsStuckbackgroundwakelockrateQueryAsync(String name, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, GooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest googlePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest, final ApiCallback<GooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = playdeveloperreportingVitalsStuckbackgroundwakelockrateQueryValidateBeforeCall(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googlePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetRequest, _callback);
        Type localVarReturnType = new TypeToken<GooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
