/*
 * Google Play Developer Reporting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GooglePlayDeveloperReportingV1alpha1AppVersion;
import org.openapitools.client.model.GooglePlayDeveloperReportingV1alpha1DeviceModelSummary;
import org.openapitools.client.model.GooglePlayDeveloperReportingV1alpha1OsVersion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An error report received for an app. There reports are produced by the Android platform code when a (potentially fatal) error condition is detected. Identical reports from many users will be deduplicated and coalesced into a single ErrorReport. **Required permissions**: to access this resource, the calling user needs the _View app information (read-only)_ permission for the app.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:15.855761-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePlayDeveloperReportingV1alpha1ErrorReport {
  public static final String SERIALIZED_NAME_APP_VERSION = "appVersion";
  @SerializedName(SERIALIZED_NAME_APP_VERSION)
  private GooglePlayDeveloperReportingV1alpha1AppVersion appVersion;

  public static final String SERIALIZED_NAME_DEVICE_MODEL = "deviceModel";
  @SerializedName(SERIALIZED_NAME_DEVICE_MODEL)
  private GooglePlayDeveloperReportingV1alpha1DeviceModelSummary deviceModel;

  public static final String SERIALIZED_NAME_EVENT_TIME = "eventTime";
  @SerializedName(SERIALIZED_NAME_EVENT_TIME)
  private String eventTime;

  public static final String SERIALIZED_NAME_ISSUE = "issue";
  @SerializedName(SERIALIZED_NAME_ISSUE)
  private String issue;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OS_VERSION = "osVersion";
  @SerializedName(SERIALIZED_NAME_OS_VERSION)
  private GooglePlayDeveloperReportingV1alpha1OsVersion osVersion;

  public static final String SERIALIZED_NAME_REPORT_TEXT = "reportText";
  @SerializedName(SERIALIZED_NAME_REPORT_TEXT)
  private String reportText;

  /**
   * Type of the error for which this report was generated.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ERROR_TYPE_UNSPECIFIED("ERROR_TYPE_UNSPECIFIED"),
    
    APPLICATION_NOT_RESPONDING("APPLICATION_NOT_RESPONDING"),
    
    CRASH("CRASH");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VCS_INFORMATION = "vcsInformation";
  @SerializedName(SERIALIZED_NAME_VCS_INFORMATION)
  private String vcsInformation;

  public GooglePlayDeveloperReportingV1alpha1ErrorReport() {
  }

  public GooglePlayDeveloperReportingV1alpha1ErrorReport appVersion(GooglePlayDeveloperReportingV1alpha1AppVersion appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  /**
   * Get appVersion
   * @return appVersion
   */
  @javax.annotation.Nullable
  public GooglePlayDeveloperReportingV1alpha1AppVersion getAppVersion() {
    return appVersion;
  }

  public void setAppVersion(GooglePlayDeveloperReportingV1alpha1AppVersion appVersion) {
    this.appVersion = appVersion;
  }


  public GooglePlayDeveloperReportingV1alpha1ErrorReport deviceModel(GooglePlayDeveloperReportingV1alpha1DeviceModelSummary deviceModel) {
    this.deviceModel = deviceModel;
    return this;
  }

  /**
   * Get deviceModel
   * @return deviceModel
   */
  @javax.annotation.Nullable
  public GooglePlayDeveloperReportingV1alpha1DeviceModelSummary getDeviceModel() {
    return deviceModel;
  }

  public void setDeviceModel(GooglePlayDeveloperReportingV1alpha1DeviceModelSummary deviceModel) {
    this.deviceModel = deviceModel;
  }


  public GooglePlayDeveloperReportingV1alpha1ErrorReport eventTime(String eventTime) {
    this.eventTime = eventTime;
    return this;
  }

  /**
   * Start of the hour during which the latest event in this error report occurred.
   * @return eventTime
   */
  @javax.annotation.Nullable
  public String getEventTime() {
    return eventTime;
  }

  public void setEventTime(String eventTime) {
    this.eventTime = eventTime;
  }


  public GooglePlayDeveloperReportingV1alpha1ErrorReport issue(String issue) {
    this.issue = issue;
    return this;
  }

  /**
   * The issue this report was associated with. **Please note:** this resource is currently in Alpha. There could be changes to the issue grouping that would result in similar but more recent error reports being assigned to a different issue.
   * @return issue
   */
  @javax.annotation.Nullable
  public String getIssue() {
    return issue;
  }

  public void setIssue(String issue) {
    this.issue = issue;
  }


  public GooglePlayDeveloperReportingV1alpha1ErrorReport name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the report. Format: apps/{app}/{report}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GooglePlayDeveloperReportingV1alpha1ErrorReport osVersion(GooglePlayDeveloperReportingV1alpha1OsVersion osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  /**
   * Get osVersion
   * @return osVersion
   */
  @javax.annotation.Nullable
  public GooglePlayDeveloperReportingV1alpha1OsVersion getOsVersion() {
    return osVersion;
  }

  public void setOsVersion(GooglePlayDeveloperReportingV1alpha1OsVersion osVersion) {
    this.osVersion = osVersion;
  }


  public GooglePlayDeveloperReportingV1alpha1ErrorReport reportText(String reportText) {
    this.reportText = reportText;
    return this;
  }

  /**
   * Textual representation of the error report. These textual reports are produced by the platform. The reports are then sanitized and filtered to remove any potentially sensitive information. Although their format is fairly stable, they are not entirely meant for machine consumption and we cannot guarantee that there won&#39;t be subtle changes to the formatting that may break systems trying to parse information out of the reports.
   * @return reportText
   */
  @javax.annotation.Nullable
  public String getReportText() {
    return reportText;
  }

  public void setReportText(String reportText) {
    this.reportText = reportText;
  }


  public GooglePlayDeveloperReportingV1alpha1ErrorReport type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the error for which this report was generated.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public GooglePlayDeveloperReportingV1alpha1ErrorReport vcsInformation(String vcsInformation) {
    this.vcsInformation = vcsInformation;
    return this;
  }

  /**
   * Version control system information from BUNDLE-METADATA/version-control-info.textproto or META-INF/version-control-info.textproto of the app bundle or APK, respectively.
   * @return vcsInformation
   */
  @javax.annotation.Nullable
  public String getVcsInformation() {
    return vcsInformation;
  }

  public void setVcsInformation(String vcsInformation) {
    this.vcsInformation = vcsInformation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePlayDeveloperReportingV1alpha1ErrorReport googlePlayDeveloperReportingV1alpha1ErrorReport = (GooglePlayDeveloperReportingV1alpha1ErrorReport) o;
    return Objects.equals(this.appVersion, googlePlayDeveloperReportingV1alpha1ErrorReport.appVersion) &&
        Objects.equals(this.deviceModel, googlePlayDeveloperReportingV1alpha1ErrorReport.deviceModel) &&
        Objects.equals(this.eventTime, googlePlayDeveloperReportingV1alpha1ErrorReport.eventTime) &&
        Objects.equals(this.issue, googlePlayDeveloperReportingV1alpha1ErrorReport.issue) &&
        Objects.equals(this.name, googlePlayDeveloperReportingV1alpha1ErrorReport.name) &&
        Objects.equals(this.osVersion, googlePlayDeveloperReportingV1alpha1ErrorReport.osVersion) &&
        Objects.equals(this.reportText, googlePlayDeveloperReportingV1alpha1ErrorReport.reportText) &&
        Objects.equals(this.type, googlePlayDeveloperReportingV1alpha1ErrorReport.type) &&
        Objects.equals(this.vcsInformation, googlePlayDeveloperReportingV1alpha1ErrorReport.vcsInformation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appVersion, deviceModel, eventTime, issue, name, osVersion, reportText, type, vcsInformation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePlayDeveloperReportingV1alpha1ErrorReport {\n");
    sb.append("    appVersion: ").append(toIndentedString(appVersion)).append("\n");
    sb.append("    deviceModel: ").append(toIndentedString(deviceModel)).append("\n");
    sb.append("    eventTime: ").append(toIndentedString(eventTime)).append("\n");
    sb.append("    issue: ").append(toIndentedString(issue)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    reportText: ").append(toIndentedString(reportText)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vcsInformation: ").append(toIndentedString(vcsInformation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appVersion");
    openapiFields.add("deviceModel");
    openapiFields.add("eventTime");
    openapiFields.add("issue");
    openapiFields.add("name");
    openapiFields.add("osVersion");
    openapiFields.add("reportText");
    openapiFields.add("type");
    openapiFields.add("vcsInformation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePlayDeveloperReportingV1alpha1ErrorReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePlayDeveloperReportingV1alpha1ErrorReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePlayDeveloperReportingV1alpha1ErrorReport is not found in the empty JSON string", GooglePlayDeveloperReportingV1alpha1ErrorReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePlayDeveloperReportingV1alpha1ErrorReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePlayDeveloperReportingV1alpha1ErrorReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appVersion`
      if (jsonObj.get("appVersion") != null && !jsonObj.get("appVersion").isJsonNull()) {
        GooglePlayDeveloperReportingV1alpha1AppVersion.validateJsonElement(jsonObj.get("appVersion"));
      }
      // validate the optional field `deviceModel`
      if (jsonObj.get("deviceModel") != null && !jsonObj.get("deviceModel").isJsonNull()) {
        GooglePlayDeveloperReportingV1alpha1DeviceModelSummary.validateJsonElement(jsonObj.get("deviceModel"));
      }
      if ((jsonObj.get("eventTime") != null && !jsonObj.get("eventTime").isJsonNull()) && !jsonObj.get("eventTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventTime").toString()));
      }
      if ((jsonObj.get("issue") != null && !jsonObj.get("issue").isJsonNull()) && !jsonObj.get("issue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `osVersion`
      if (jsonObj.get("osVersion") != null && !jsonObj.get("osVersion").isJsonNull()) {
        GooglePlayDeveloperReportingV1alpha1OsVersion.validateJsonElement(jsonObj.get("osVersion"));
      }
      if ((jsonObj.get("reportText") != null && !jsonObj.get("reportText").isJsonNull()) && !jsonObj.get("reportText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportText").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("vcsInformation") != null && !jsonObj.get("vcsInformation").isJsonNull()) && !jsonObj.get("vcsInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vcsInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vcsInformation").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePlayDeveloperReportingV1alpha1ErrorReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePlayDeveloperReportingV1alpha1ErrorReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePlayDeveloperReportingV1alpha1ErrorReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePlayDeveloperReportingV1alpha1ErrorReport.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePlayDeveloperReportingV1alpha1ErrorReport>() {
           @Override
           public void write(JsonWriter out, GooglePlayDeveloperReportingV1alpha1ErrorReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePlayDeveloperReportingV1alpha1ErrorReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePlayDeveloperReportingV1alpha1ErrorReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePlayDeveloperReportingV1alpha1ErrorReport
   * @throws IOException if the JSON string is invalid with respect to GooglePlayDeveloperReportingV1alpha1ErrorReport
   */
  public static GooglePlayDeveloperReportingV1alpha1ErrorReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePlayDeveloperReportingV1alpha1ErrorReport.class);
  }

  /**
   * Convert an instance of GooglePlayDeveloperReportingV1alpha1ErrorReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

