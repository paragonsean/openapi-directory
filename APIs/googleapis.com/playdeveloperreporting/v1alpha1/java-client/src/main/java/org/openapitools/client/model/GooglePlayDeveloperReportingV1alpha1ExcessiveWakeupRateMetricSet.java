/*
 * Google Play Developer Reporting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GooglePlayDeveloperReportingV1alpha1FreshnessInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Singleton resource representing the set of Excessive Weakeups metrics. This metric set contains AlarmManager wakeup counts data combined with process state data to produce a normalized metric independent of user counts. **Supported aggregation periods:** * DAILY: metrics are aggregated in calendar date intervals. Due to historical constraints, the only supported timezone is &#x60;America/Los_Angeles&#x60;. **Supported metrics:** * &#x60;excessiveWakeupRate&#x60; (&#x60;google.type.Decimal&#x60;): Percentage of distinct users in the aggregation period that had more than 10 wakeups per hour. * &#x60;excessiveWakeupRate7dUserWeighted&#x60; (&#x60;google.type.Decimal&#x60;): Rolling average value of &#x60;excessiveWakeupRate&#x60; in the last 7 days. The daily values are weighted by the count of distinct users for the day. * &#x60;excessiveWakeupRate28dUserWeighted&#x60; (&#x60;google.type.Decimal&#x60;): Rolling average value of &#x60;excessiveWakeupRate&#x60; in the last 28 days. The daily values are weighted by the count of distinct users for the day. * &#x60;distinctUsers&#x60; (&#x60;google.type.Decimal&#x60;): Count of distinct users in the aggregation period that were used as normalization value for the &#x60;excessiveWakeupRate&#x60; metric. A user is counted in this metric if they app was doing any work on the device, i.e., not just active foreground usage but also background work. Care must be taken not to aggregate this count further, as it may result in users being counted multiple times. The value is rounded to the nearest multiple of 10, 100, 1,000 or 1,000,000, depending on the magnitude of the value. **Supported dimensions:** * &#x60;apiLevel&#x60; (string): the API level of Android that was running on the user&#39;s device, e.g., 26. * &#x60;versionCode&#x60; (int64): version of the app that was running on the user&#39;s device. * &#x60;deviceModel&#x60; (string): unique identifier of the user&#39;s device model. The form of the identifier is &#39;deviceBrand/device&#39;, where deviceBrand corresponds to Build.BRAND and device corresponds to Build.DEVICE, e.g., google/coral. * &#x60;deviceBrand&#x60; (string): unique identifier of the user&#39;s device brand, e.g., google. * &#x60;deviceType&#x60; (string): the type (also known as form factor) of the user&#39;s device, e.g., PHONE. * &#x60;countryCode&#x60; (string): the country or region of the user&#39;s device based on their IP address, represented as a 2-letter ISO-3166 code (e.g. US for the United States). * &#x60;deviceRamBucket&#x60; (int64): RAM of the device, in MB, in buckets (3GB, 4GB, etc.). * &#x60;deviceSocMake&#x60; (string): Make of the device&#39;s primary system-on-chip, e.g., Samsung. [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER) * &#x60;deviceSocModel&#x60; (string): Model of the device&#39;s primary system-on-chip, e.g., \&quot;Exynos 2100\&quot;. [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL) * &#x60;deviceCpuMake&#x60; (string): Make of the device&#39;s CPU, e.g., Qualcomm. * &#x60;deviceCpuModel&#x60; (string): Model of the device&#39;s CPU, e.g., \&quot;Kryo 240\&quot;. * &#x60;deviceGpuMake&#x60; (string): Make of the device&#39;s GPU, e.g., ARM. * &#x60;deviceGpuModel&#x60; (string): Model of the device&#39;s GPU, e.g., Mali. * &#x60;deviceGpuVersion&#x60; (string): Version of the device&#39;s GPU, e.g., T750. * &#x60;deviceVulkanVersion&#x60; (string): Vulkan version of the device, e.g., \&quot;4198400\&quot;. * &#x60;deviceGlEsVersion&#x60; (string): OpenGL ES version of the device, e.g., \&quot;196610\&quot;. * &#x60;deviceScreenSize&#x60; (string): Screen size of the device, e.g., NORMAL, LARGE. * &#x60;deviceScreenDpi&#x60; (string): Screen density of the device, e.g., mdpi, hdpi. **Required permissions**: to access this resource, the calling user needs the _View app information (read-only)_ permission for the app.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:15.855761-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet {
  public static final String SERIALIZED_NAME_FRESHNESS_INFO = "freshnessInfo";
  @SerializedName(SERIALIZED_NAME_FRESHNESS_INFO)
  private GooglePlayDeveloperReportingV1alpha1FreshnessInfo freshnessInfo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet() {
  }

  public GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet freshnessInfo(GooglePlayDeveloperReportingV1alpha1FreshnessInfo freshnessInfo) {
    this.freshnessInfo = freshnessInfo;
    return this;
  }

  /**
   * Get freshnessInfo
   * @return freshnessInfo
   */
  @javax.annotation.Nullable
  public GooglePlayDeveloperReportingV1alpha1FreshnessInfo getFreshnessInfo() {
    return freshnessInfo;
  }

  public void setFreshnessInfo(GooglePlayDeveloperReportingV1alpha1FreshnessInfo freshnessInfo) {
    this.freshnessInfo = freshnessInfo;
  }


  public GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Identifier. The resource name. Format: apps/{app}/excessiveWakeupRateMetricSet
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet googlePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet = (GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet) o;
    return Objects.equals(this.freshnessInfo, googlePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet.freshnessInfo) &&
        Objects.equals(this.name, googlePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(freshnessInfo, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet {\n");
    sb.append("    freshnessInfo: ").append(toIndentedString(freshnessInfo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("freshnessInfo");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet is not found in the empty JSON string", GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `freshnessInfo`
      if (jsonObj.get("freshnessInfo") != null && !jsonObj.get("freshnessInfo").isJsonNull()) {
        GooglePlayDeveloperReportingV1alpha1FreshnessInfo.validateJsonElement(jsonObj.get("freshnessInfo"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet>() {
           @Override
           public void write(JsonWriter out, GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet
   * @throws IOException if the JSON string is invalid with respect to GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet
   */
  public static GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet.class);
  }

  /**
   * Convert an instance of GooglePlayDeveloperReportingV1alpha1ExcessiveWakeupRateMetricSet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

