/*
 * Google Play Developer Reporting API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GooglePlayDeveloperReportingV1alpha1TimelineSpec;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for QueryErrorCountMetricSet.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:15.855761-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest {
  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<String> dimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<String> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_PAGE_TOKEN = "pageToken";
  @SerializedName(SERIALIZED_NAME_PAGE_TOKEN)
  private String pageToken;

  public static final String SERIALIZED_NAME_TIMELINE_SPEC = "timelineSpec";
  @SerializedName(SERIALIZED_NAME_TIMELINE_SPEC)
  private GooglePlayDeveloperReportingV1alpha1TimelineSpec timelineSpec;

  public GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest() {
  }

  public GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest dimensions(List<String> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest addDimensionsItem(String dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

  /**
   * Dimensions to slice the data by. **Supported dimensions:** * &#x60;apiLevel&#x60; (string): the API level of Android that was running on the user&#39;s device, e.g., 26. * &#x60;versionCode&#x60; (int64): unique identifier of the user&#39;s device model. The form of the identifier is &#39;deviceBrand/device&#39;, where deviceBrand corresponds to Build.BRAND and device corresponds to Build.DEVICE, e.g., google/coral. * &#x60;deviceModel&#x60; (string): unique identifier of the user&#39;s device model. * &#x60;deviceType&#x60; (string): identifier of the device&#39;s form factor, e.g., PHONE. * &#x60;reportType&#x60; (string): the type of error. The value should correspond to one of the possible values in ErrorType. * &#x60;isUserPerceived&#x60; (string): denotes whether error is user perceived or not, USER_PERCEIVED or NOT_USER_PERCEIVED. * &#x60;issueId&#x60; (string): the id an error was assigned to. The value should correspond to the &#x60;{issue}&#x60; component of the issue name. * &#x60;deviceRamBucket&#x60; (int64): RAM of the device, in MB, in buckets (3GB, 4GB, etc.). * &#x60;deviceSocMake&#x60; (string): Make of the device&#39;s primary system-on-chip, e.g., Samsung. [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER) * &#x60;deviceSocModel&#x60; (string): Model of the device&#39;s primary system-on-chip, e.g., \&quot;Exynos 2100\&quot;. [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL) * &#x60;deviceCpuMake&#x60; (string): Make of the device&#39;s CPU, e.g., Qualcomm. * &#x60;deviceCpuModel&#x60; (string): Model of the device&#39;s CPU, e.g., \&quot;Kryo 240\&quot;. * &#x60;deviceGpuMake&#x60; (string): Make of the device&#39;s GPU, e.g., ARM. * &#x60;deviceGpuModel&#x60; (string): Model of the device&#39;s GPU, e.g., Mali. * &#x60;deviceGpuVersion&#x60; (string): Version of the device&#39;s GPU, e.g., T750. * &#x60;deviceVulkanVersion&#x60; (string): Vulkan version of the device, e.g., \&quot;4198400\&quot;. * &#x60;deviceGlEsVersion&#x60; (string): OpenGL ES version of the device, e.g., \&quot;196610\&quot;. * &#x60;deviceScreenSize&#x60; (string): Screen size of the device, e.g., NORMAL, LARGE. * &#x60;deviceScreenDpi&#x60; (string): Screen density of the device, e.g., mdpi, hdpi.
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List<String> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<String> dimensions) {
    this.dimensions = dimensions;
  }


  public GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest filter(String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Filters to apply to data. The filtering expression follows [AIP-160](https://google.aip.dev/160) standard and supports filtering by equality of all breakdown dimensions.
   * @return filter
   */
  @javax.annotation.Nullable
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }


  public GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest metrics(List<String> metrics) {
    this.metrics = metrics;
    return this;
  }

  public GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest addMetricsItem(String metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * Metrics to aggregate. **Supported metrics:** * &#x60;errorReportCount&#x60; (&#x60;google.type.Decimal&#x60;): Absolute count of individual error reports that have been received for an app. * &#x60;distinctUsers&#x60; (&#x60;google.type.Decimal&#x60;): Count of distinct users for which reports have been received. Care must be taken not to aggregate this count further, as it may result in users being counted multiple times. This value is not rounded, however it may be an approximation.
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<String> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<String> metrics) {
    this.metrics = metrics;
  }


  public GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Maximum size of the returned data. If unspecified, at most 1000 rows will be returned. The maximum value is 100000; values above 100000 will be coerced to 100000.
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest pageToken(String pageToken) {
    this.pageToken = pageToken;
    return this;
  }

  /**
   * A page token, received from a previous call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to the request must match the call that provided the page token.
   * @return pageToken
   */
  @javax.annotation.Nullable
  public String getPageToken() {
    return pageToken;
  }

  public void setPageToken(String pageToken) {
    this.pageToken = pageToken;
  }


  public GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest timelineSpec(GooglePlayDeveloperReportingV1alpha1TimelineSpec timelineSpec) {
    this.timelineSpec = timelineSpec;
    return this;
  }

  /**
   * Get timelineSpec
   * @return timelineSpec
   */
  @javax.annotation.Nullable
  public GooglePlayDeveloperReportingV1alpha1TimelineSpec getTimelineSpec() {
    return timelineSpec;
  }

  public void setTimelineSpec(GooglePlayDeveloperReportingV1alpha1TimelineSpec timelineSpec) {
    this.timelineSpec = timelineSpec;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest googlePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest = (GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest) o;
    return Objects.equals(this.dimensions, googlePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest.dimensions) &&
        Objects.equals(this.filter, googlePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest.filter) &&
        Objects.equals(this.metrics, googlePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest.metrics) &&
        Objects.equals(this.pageSize, googlePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest.pageSize) &&
        Objects.equals(this.pageToken, googlePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest.pageToken) &&
        Objects.equals(this.timelineSpec, googlePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest.timelineSpec);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimensions, filter, metrics, pageSize, pageToken, timelineSpec);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest {\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    pageToken: ").append(toIndentedString(pageToken)).append("\n");
    sb.append("    timelineSpec: ").append(toIndentedString(timelineSpec)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dimensions");
    openapiFields.add("filter");
    openapiFields.add("metrics");
    openapiFields.add("pageSize");
    openapiFields.add("pageToken");
    openapiFields.add("timelineSpec");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest is not found in the empty JSON string", GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull() && !jsonObj.get("dimensions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull() && !jsonObj.get("metrics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
      }
      if ((jsonObj.get("pageToken") != null && !jsonObj.get("pageToken").isJsonNull()) && !jsonObj.get("pageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageToken").toString()));
      }
      // validate the optional field `timelineSpec`
      if (jsonObj.get("timelineSpec") != null && !jsonObj.get("timelineSpec").isJsonNull()) {
        GooglePlayDeveloperReportingV1alpha1TimelineSpec.validateJsonElement(jsonObj.get("timelineSpec"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest>() {
           @Override
           public void write(JsonWriter out, GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest
   * @throws IOException if the JSON string is invalid with respect to GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest
   */
  public static GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest.class);
  }

  /**
   * Convert an instance of GooglePlayDeveloperReportingV1alpha1QueryErrorCountMetricSetRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

