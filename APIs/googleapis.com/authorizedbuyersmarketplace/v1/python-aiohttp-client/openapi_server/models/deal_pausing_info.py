# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DealPausingInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pause_reason: str=None, pause_role: str=None, pausing_consented: bool=None):
        """DealPausingInfo - a model defined in OpenAPI

        :param pause_reason: The pause_reason of this DealPausingInfo.
        :param pause_role: The pause_role of this DealPausingInfo.
        :param pausing_consented: The pausing_consented of this DealPausingInfo.
        """
        self.openapi_types = {
            'pause_reason': str,
            'pause_role': str,
            'pausing_consented': bool
        }

        self.attribute_map = {
            'pause_reason': 'pauseReason',
            'pause_role': 'pauseRole',
            'pausing_consented': 'pausingConsented'
        }

        self._pause_reason = pause_reason
        self._pause_role = pause_role
        self._pausing_consented = pausing_consented

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DealPausingInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DealPausingInfo of this DealPausingInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pause_reason(self):
        """Gets the pause_reason of this DealPausingInfo.

        The reason for the pausing of the deal; empty for active deals.

        :return: The pause_reason of this DealPausingInfo.
        :rtype: str
        """
        return self._pause_reason

    @pause_reason.setter
    def pause_reason(self, pause_reason):
        """Sets the pause_reason of this DealPausingInfo.

        The reason for the pausing of the deal; empty for active deals.

        :param pause_reason: The pause_reason of this DealPausingInfo.
        :type pause_reason: str
        """

        self._pause_reason = pause_reason

    @property
    def pause_role(self):
        """Gets the pause_role of this DealPausingInfo.

        The party that first paused the deal; unspecified for active deals.

        :return: The pause_role of this DealPausingInfo.
        :rtype: str
        """
        return self._pause_role

    @pause_role.setter
    def pause_role(self, pause_role):
        """Sets the pause_role of this DealPausingInfo.

        The party that first paused the deal; unspecified for active deals.

        :param pause_role: The pause_role of this DealPausingInfo.
        :type pause_role: str
        """
        allowed_values = ["BUYER_SELLER_ROLE_UNSPECIFIED", "BUYER", "SELLER"]  # noqa: E501
        if pause_role not in allowed_values:
            raise ValueError(
                "Invalid value for `pause_role` ({0}), must be one of {1}"
                .format(pause_role, allowed_values)
            )

        self._pause_role = pause_role

    @property
    def pausing_consented(self):
        """Gets the pausing_consented of this DealPausingInfo.

        Whether pausing is consented between buyer and seller for the deal.

        :return: The pausing_consented of this DealPausingInfo.
        :rtype: bool
        """
        return self._pausing_consented

    @pausing_consented.setter
    def pausing_consented(self, pausing_consented):
        """Sets the pausing_consented of this DealPausingInfo.

        Whether pausing is consented between buyer and seller for the deal.

        :param pausing_consented: The pausing_consented of this DealPausingInfo.
        :type pausing_consented: bool
        """

        self._pausing_consented = pausing_consented
