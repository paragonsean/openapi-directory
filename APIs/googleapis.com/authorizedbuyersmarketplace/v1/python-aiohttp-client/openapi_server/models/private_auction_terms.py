# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price import Price
from openapi_server import util


class PrivateAuctionTerms(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, floor_price: Price=None, open_auction_allowed: bool=None):
        """PrivateAuctionTerms - a model defined in OpenAPI

        :param floor_price: The floor_price of this PrivateAuctionTerms.
        :param open_auction_allowed: The open_auction_allowed of this PrivateAuctionTerms.
        """
        self.openapi_types = {
            'floor_price': Price,
            'open_auction_allowed': bool
        }

        self.attribute_map = {
            'floor_price': 'floorPrice',
            'open_auction_allowed': 'openAuctionAllowed'
        }

        self._floor_price = floor_price
        self._open_auction_allowed = open_auction_allowed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateAuctionTerms':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateAuctionTerms of this PrivateAuctionTerms.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def floor_price(self):
        """Gets the floor_price of this PrivateAuctionTerms.


        :return: The floor_price of this PrivateAuctionTerms.
        :rtype: Price
        """
        return self._floor_price

    @floor_price.setter
    def floor_price(self, floor_price):
        """Sets the floor_price of this PrivateAuctionTerms.


        :param floor_price: The floor_price of this PrivateAuctionTerms.
        :type floor_price: Price
        """

        self._floor_price = floor_price

    @property
    def open_auction_allowed(self):
        """Gets the open_auction_allowed of this PrivateAuctionTerms.

        Output only. True if open auction buyers are allowed to compete with invited buyers in this private auction.

        :return: The open_auction_allowed of this PrivateAuctionTerms.
        :rtype: bool
        """
        return self._open_auction_allowed

    @open_auction_allowed.setter
    def open_auction_allowed(self, open_auction_allowed):
        """Sets the open_auction_allowed of this PrivateAuctionTerms.

        Output only. True if open auction buyers are allowed to compete with invited buyers in this private auction.

        :param open_auction_allowed: The open_auction_allowed of this PrivateAuctionTerms.
        :type open_auction_allowed: bool
        """

        self._open_auction_allowed = open_auction_allowed
