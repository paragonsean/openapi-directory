# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Client(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, name: str=None, partner_client_id: str=None, role: str=None, seller_visible: bool=None, state: str=None):
        """Client - a model defined in OpenAPI

        :param display_name: The display_name of this Client.
        :param name: The name of this Client.
        :param partner_client_id: The partner_client_id of this Client.
        :param role: The role of this Client.
        :param seller_visible: The seller_visible of this Client.
        :param state: The state of this Client.
        """
        self.openapi_types = {
            'display_name': str,
            'name': str,
            'partner_client_id': str,
            'role': str,
            'seller_visible': bool,
            'state': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'name': 'name',
            'partner_client_id': 'partnerClientId',
            'role': 'role',
            'seller_visible': 'sellerVisible',
            'state': 'state'
        }

        self._display_name = display_name
        self._name = name
        self._partner_client_id = partner_client_id
        self._role = role
        self._seller_visible = seller_visible
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Client':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Client of this Client.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this Client.

        Required. Display name shown to publishers. Must be unique for clients without partnerClientId specified. Maximum length of 255 characters is allowed.

        :return: The display_name of this Client.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Client.

        Required. Display name shown to publishers. Must be unique for clients without partnerClientId specified. Maximum length of 255 characters is allowed.

        :param display_name: The display_name of this Client.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this Client.

        Output only. The resource name of the client. Format: `buyers/{accountId}/clients/{clientAccountId}`

        :return: The name of this Client.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Client.

        Output only. The resource name of the client. Format: `buyers/{accountId}/clients/{clientAccountId}`

        :param name: The name of this Client.
        :type name: str
        """

        self._name = name

    @property
    def partner_client_id(self):
        """Gets the partner_client_id of this Client.

        Arbitrary unique identifier provided by the buyer. This field can be used to associate a client with an identifier in the namespace of the buyer, lookup clients by that identifier and verify whether an Authorized Buyers account of the client already exists. If present, must be unique across all the clients.

        :return: The partner_client_id of this Client.
        :rtype: str
        """
        return self._partner_client_id

    @partner_client_id.setter
    def partner_client_id(self, partner_client_id):
        """Sets the partner_client_id of this Client.

        Arbitrary unique identifier provided by the buyer. This field can be used to associate a client with an identifier in the namespace of the buyer, lookup clients by that identifier and verify whether an Authorized Buyers account of the client already exists. If present, must be unique across all the clients.

        :param partner_client_id: The partner_client_id of this Client.
        :type partner_client_id: str
        """

        self._partner_client_id = partner_client_id

    @property
    def role(self):
        """Gets the role of this Client.

        Required. The role assigned to the client. Each role implies a set of permissions granted to the client.

        :return: The role of this Client.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Client.

        Required. The role assigned to the client. Each role implies a set of permissions granted to the client.

        :param role: The role of this Client.
        :type role: str
        """
        allowed_values = ["CLIENT_ROLE_UNSPECIFIED", "CLIENT_DEAL_VIEWER", "CLIENT_DEAL_NEGOTIATOR", "CLIENT_DEAL_APPROVER"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def seller_visible(self):
        """Gets the seller_visible of this Client.

        Whether the client will be visible to sellers.

        :return: The seller_visible of this Client.
        :rtype: bool
        """
        return self._seller_visible

    @seller_visible.setter
    def seller_visible(self, seller_visible):
        """Sets the seller_visible of this Client.

        Whether the client will be visible to sellers.

        :param seller_visible: The seller_visible of this Client.
        :type seller_visible: bool
        """

        self._seller_visible = seller_visible

    @property
    def state(self):
        """Gets the state of this Client.

        Output only. The state of the client.

        :return: The state of this Client.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Client.

        Output only. The state of the client.

        :param state: The state of this Client.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "INACTIVE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
