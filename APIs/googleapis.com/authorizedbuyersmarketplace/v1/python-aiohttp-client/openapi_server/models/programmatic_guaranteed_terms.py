# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price import Price
from openapi_server import util


class ProgrammaticGuaranteedTerms(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fixed_price: Price=None, guaranteed_looks: str=None, impression_cap: str=None, minimum_daily_looks: str=None, percent_share_of_voice: str=None, reservation_type: str=None):
        """ProgrammaticGuaranteedTerms - a model defined in OpenAPI

        :param fixed_price: The fixed_price of this ProgrammaticGuaranteedTerms.
        :param guaranteed_looks: The guaranteed_looks of this ProgrammaticGuaranteedTerms.
        :param impression_cap: The impression_cap of this ProgrammaticGuaranteedTerms.
        :param minimum_daily_looks: The minimum_daily_looks of this ProgrammaticGuaranteedTerms.
        :param percent_share_of_voice: The percent_share_of_voice of this ProgrammaticGuaranteedTerms.
        :param reservation_type: The reservation_type of this ProgrammaticGuaranteedTerms.
        """
        self.openapi_types = {
            'fixed_price': Price,
            'guaranteed_looks': str,
            'impression_cap': str,
            'minimum_daily_looks': str,
            'percent_share_of_voice': str,
            'reservation_type': str
        }

        self.attribute_map = {
            'fixed_price': 'fixedPrice',
            'guaranteed_looks': 'guaranteedLooks',
            'impression_cap': 'impressionCap',
            'minimum_daily_looks': 'minimumDailyLooks',
            'percent_share_of_voice': 'percentShareOfVoice',
            'reservation_type': 'reservationType'
        }

        self._fixed_price = fixed_price
        self._guaranteed_looks = guaranteed_looks
        self._impression_cap = impression_cap
        self._minimum_daily_looks = minimum_daily_looks
        self._percent_share_of_voice = percent_share_of_voice
        self._reservation_type = reservation_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProgrammaticGuaranteedTerms':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProgrammaticGuaranteedTerms of this ProgrammaticGuaranteedTerms.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fixed_price(self):
        """Gets the fixed_price of this ProgrammaticGuaranteedTerms.


        :return: The fixed_price of this ProgrammaticGuaranteedTerms.
        :rtype: Price
        """
        return self._fixed_price

    @fixed_price.setter
    def fixed_price(self, fixed_price):
        """Sets the fixed_price of this ProgrammaticGuaranteedTerms.


        :param fixed_price: The fixed_price of this ProgrammaticGuaranteedTerms.
        :type fixed_price: Price
        """

        self._fixed_price = fixed_price

    @property
    def guaranteed_looks(self):
        """Gets the guaranteed_looks of this ProgrammaticGuaranteedTerms.

        Count of guaranteed looks. For CPD deals, buyer changes to guaranteed_looks will be ignored.

        :return: The guaranteed_looks of this ProgrammaticGuaranteedTerms.
        :rtype: str
        """
        return self._guaranteed_looks

    @guaranteed_looks.setter
    def guaranteed_looks(self, guaranteed_looks):
        """Sets the guaranteed_looks of this ProgrammaticGuaranteedTerms.

        Count of guaranteed looks. For CPD deals, buyer changes to guaranteed_looks will be ignored.

        :param guaranteed_looks: The guaranteed_looks of this ProgrammaticGuaranteedTerms.
        :type guaranteed_looks: str
        """

        self._guaranteed_looks = guaranteed_looks

    @property
    def impression_cap(self):
        """Gets the impression_cap of this ProgrammaticGuaranteedTerms.

        The lifetime impression cap for CPM Sponsorship deals. Deal will stop serving when cap is reached.

        :return: The impression_cap of this ProgrammaticGuaranteedTerms.
        :rtype: str
        """
        return self._impression_cap

    @impression_cap.setter
    def impression_cap(self, impression_cap):
        """Sets the impression_cap of this ProgrammaticGuaranteedTerms.

        The lifetime impression cap for CPM Sponsorship deals. Deal will stop serving when cap is reached.

        :param impression_cap: The impression_cap of this ProgrammaticGuaranteedTerms.
        :type impression_cap: str
        """

        self._impression_cap = impression_cap

    @property
    def minimum_daily_looks(self):
        """Gets the minimum_daily_looks of this ProgrammaticGuaranteedTerms.

        Daily minimum looks for CPD deal types. For CPD deals, buyer should negotiate on this field instead of guaranteed_looks.

        :return: The minimum_daily_looks of this ProgrammaticGuaranteedTerms.
        :rtype: str
        """
        return self._minimum_daily_looks

    @minimum_daily_looks.setter
    def minimum_daily_looks(self, minimum_daily_looks):
        """Sets the minimum_daily_looks of this ProgrammaticGuaranteedTerms.

        Daily minimum looks for CPD deal types. For CPD deals, buyer should negotiate on this field instead of guaranteed_looks.

        :param minimum_daily_looks: The minimum_daily_looks of this ProgrammaticGuaranteedTerms.
        :type minimum_daily_looks: str
        """

        self._minimum_daily_looks = minimum_daily_looks

    @property
    def percent_share_of_voice(self):
        """Gets the percent_share_of_voice of this ProgrammaticGuaranteedTerms.

        For sponsorship deals, this is the percentage of the seller's eligible impressions that the deal will serve until the cap is reached. Valid value is within range 0~100.

        :return: The percent_share_of_voice of this ProgrammaticGuaranteedTerms.
        :rtype: str
        """
        return self._percent_share_of_voice

    @percent_share_of_voice.setter
    def percent_share_of_voice(self, percent_share_of_voice):
        """Sets the percent_share_of_voice of this ProgrammaticGuaranteedTerms.

        For sponsorship deals, this is the percentage of the seller's eligible impressions that the deal will serve until the cap is reached. Valid value is within range 0~100.

        :param percent_share_of_voice: The percent_share_of_voice of this ProgrammaticGuaranteedTerms.
        :type percent_share_of_voice: str
        """

        self._percent_share_of_voice = percent_share_of_voice

    @property
    def reservation_type(self):
        """Gets the reservation_type of this ProgrammaticGuaranteedTerms.

        The reservation type for a Programmatic Guaranteed deal. This indicates whether the number of impressions is fixed, or a percent of available impressions. If not specified, the default reservation type is STANDARD.

        :return: The reservation_type of this ProgrammaticGuaranteedTerms.
        :rtype: str
        """
        return self._reservation_type

    @reservation_type.setter
    def reservation_type(self, reservation_type):
        """Sets the reservation_type of this ProgrammaticGuaranteedTerms.

        The reservation type for a Programmatic Guaranteed deal. This indicates whether the number of impressions is fixed, or a percent of available impressions. If not specified, the default reservation type is STANDARD.

        :param reservation_type: The reservation_type of this ProgrammaticGuaranteedTerms.
        :type reservation_type: str
        """
        allowed_values = ["RESERVATION_TYPE_UNSPECIFIED", "STANDARD", "SPONSORSHIP"]  # noqa: E501
        if reservation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `reservation_type` ({0}), must be one of {1}"
                .format(reservation_type, allowed_values)
            )

        self._reservation_type = reservation_type
