# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.frequency_cap import FrequencyCap
from openapi_server import util


class DeliveryControl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, companion_delivery_type: str=None, creative_rotation_type: str=None, delivery_rate_type: str=None, frequency_cap: List[FrequencyCap]=None, roadblocking_type: str=None):
        """DeliveryControl - a model defined in OpenAPI

        :param companion_delivery_type: The companion_delivery_type of this DeliveryControl.
        :param creative_rotation_type: The creative_rotation_type of this DeliveryControl.
        :param delivery_rate_type: The delivery_rate_type of this DeliveryControl.
        :param frequency_cap: The frequency_cap of this DeliveryControl.
        :param roadblocking_type: The roadblocking_type of this DeliveryControl.
        """
        self.openapi_types = {
            'companion_delivery_type': str,
            'creative_rotation_type': str,
            'delivery_rate_type': str,
            'frequency_cap': List[FrequencyCap],
            'roadblocking_type': str
        }

        self.attribute_map = {
            'companion_delivery_type': 'companionDeliveryType',
            'creative_rotation_type': 'creativeRotationType',
            'delivery_rate_type': 'deliveryRateType',
            'frequency_cap': 'frequencyCap',
            'roadblocking_type': 'roadblockingType'
        }

        self._companion_delivery_type = companion_delivery_type
        self._creative_rotation_type = creative_rotation_type
        self._delivery_rate_type = delivery_rate_type
        self._frequency_cap = frequency_cap
        self._roadblocking_type = roadblocking_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeliveryControl':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeliveryControl of this DeliveryControl.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def companion_delivery_type(self):
        """Gets the companion_delivery_type of this DeliveryControl.

        Output only. Specifies roadblocking in a main companion lineitem.

        :return: The companion_delivery_type of this DeliveryControl.
        :rtype: str
        """
        return self._companion_delivery_type

    @companion_delivery_type.setter
    def companion_delivery_type(self, companion_delivery_type):
        """Sets the companion_delivery_type of this DeliveryControl.

        Output only. Specifies roadblocking in a main companion lineitem.

        :param companion_delivery_type: The companion_delivery_type of this DeliveryControl.
        :type companion_delivery_type: str
        """
        allowed_values = ["COMPANION_DELIVERY_TYPE_UNSPECIFIED", "DELIVERY_OPTIONAL", "DELIVERY_AT_LEAST_ONE", "DELIVERY_ALL"]  # noqa: E501
        if companion_delivery_type not in allowed_values:
            raise ValueError(
                "Invalid value for `companion_delivery_type` ({0}), must be one of {1}"
                .format(companion_delivery_type, allowed_values)
            )

        self._companion_delivery_type = companion_delivery_type

    @property
    def creative_rotation_type(self):
        """Gets the creative_rotation_type of this DeliveryControl.

        Output only. Specifies strategy to use for selecting a creative when multiple creatives of the same size are available.

        :return: The creative_rotation_type of this DeliveryControl.
        :rtype: str
        """
        return self._creative_rotation_type

    @creative_rotation_type.setter
    def creative_rotation_type(self, creative_rotation_type):
        """Sets the creative_rotation_type of this DeliveryControl.

        Output only. Specifies strategy to use for selecting a creative when multiple creatives of the same size are available.

        :param creative_rotation_type: The creative_rotation_type of this DeliveryControl.
        :type creative_rotation_type: str
        """
        allowed_values = ["CREATIVE_ROTATION_TYPE_UNSPECIFIED", "ROTATION_EVEN", "ROTATION_OPTIMIZED", "ROTATION_MANUAL", "ROTATION_SEQUENTIAL"]  # noqa: E501
        if creative_rotation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `creative_rotation_type` ({0}), must be one of {1}"
                .format(creative_rotation_type, allowed_values)
            )

        self._creative_rotation_type = creative_rotation_type

    @property
    def delivery_rate_type(self):
        """Gets the delivery_rate_type of this DeliveryControl.

        Output only. Specifies how the impression delivery will be paced.

        :return: The delivery_rate_type of this DeliveryControl.
        :rtype: str
        """
        return self._delivery_rate_type

    @delivery_rate_type.setter
    def delivery_rate_type(self, delivery_rate_type):
        """Sets the delivery_rate_type of this DeliveryControl.

        Output only. Specifies how the impression delivery will be paced.

        :param delivery_rate_type: The delivery_rate_type of this DeliveryControl.
        :type delivery_rate_type: str
        """
        allowed_values = ["DELIVERY_RATE_TYPE_UNSPECIFIED", "EVENLY", "FRONT_LOADED", "AS_FAST_AS_POSSIBLE"]  # noqa: E501
        if delivery_rate_type not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_rate_type` ({0}), must be one of {1}"
                .format(delivery_rate_type, allowed_values)
            )

        self._delivery_rate_type = delivery_rate_type

    @property
    def frequency_cap(self):
        """Gets the frequency_cap of this DeliveryControl.

        Output only. Specifies any frequency caps. Cannot be filtered within ListDealsRequest.

        :return: The frequency_cap of this DeliveryControl.
        :rtype: List[FrequencyCap]
        """
        return self._frequency_cap

    @frequency_cap.setter
    def frequency_cap(self, frequency_cap):
        """Sets the frequency_cap of this DeliveryControl.

        Output only. Specifies any frequency caps. Cannot be filtered within ListDealsRequest.

        :param frequency_cap: The frequency_cap of this DeliveryControl.
        :type frequency_cap: List[FrequencyCap]
        """

        self._frequency_cap = frequency_cap

    @property
    def roadblocking_type(self):
        """Gets the roadblocking_type of this DeliveryControl.

        Output only. Specifies the roadblocking type in display creatives.

        :return: The roadblocking_type of this DeliveryControl.
        :rtype: str
        """
        return self._roadblocking_type

    @roadblocking_type.setter
    def roadblocking_type(self, roadblocking_type):
        """Sets the roadblocking_type of this DeliveryControl.

        Output only. Specifies the roadblocking type in display creatives.

        :param roadblocking_type: The roadblocking_type of this DeliveryControl.
        :type roadblocking_type: str
        """
        allowed_values = ["ROADBLOCKING_TYPE_UNSPECIFIED", "ONLY_ONE", "ONE_OR_MORE", "AS_MANY_AS_POSSIBLE", "ALL_ROADBLOCK", "CREATIVE_SET"]  # noqa: E501
        if roadblocking_type not in allowed_values:
            raise ValueError(
                "Invalid value for `roadblocking_type` ({0}), must be one of {1}"
                .format(roadblocking_type, allowed_values)
            )

        self._roadblocking_type = roadblocking_type
