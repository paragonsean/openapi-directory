# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublisherProfileMobileApplication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_store: str=None, external_app_id: str=None, name: str=None):
        """PublisherProfileMobileApplication - a model defined in OpenAPI

        :param app_store: The app_store of this PublisherProfileMobileApplication.
        :param external_app_id: The external_app_id of this PublisherProfileMobileApplication.
        :param name: The name of this PublisherProfileMobileApplication.
        """
        self.openapi_types = {
            'app_store': str,
            'external_app_id': str,
            'name': str
        }

        self.attribute_map = {
            'app_store': 'appStore',
            'external_app_id': 'externalAppId',
            'name': 'name'
        }

        self._app_store = app_store
        self._external_app_id = external_app_id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublisherProfileMobileApplication':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublisherProfileMobileApplication of this PublisherProfileMobileApplication.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_store(self):
        """Gets the app_store of this PublisherProfileMobileApplication.

        The app store the app belongs to. Can be used to filter the response of the publisherProfiles.list method.

        :return: The app_store of this PublisherProfileMobileApplication.
        :rtype: str
        """
        return self._app_store

    @app_store.setter
    def app_store(self, app_store):
        """Sets the app_store of this PublisherProfileMobileApplication.

        The app store the app belongs to. Can be used to filter the response of the publisherProfiles.list method.

        :param app_store: The app_store of this PublisherProfileMobileApplication.
        :type app_store: str
        """
        allowed_values = ["APP_STORE_TYPE_UNSPECIFIED", "APPLE_ITUNES", "GOOGLE_PLAY", "ROKU", "AMAZON_FIRE_TV", "PLAYSTATION", "XBOX", "SAMSUNG_TV", "AMAZON", "OPPO", "SAMSUNG", "VIVO", "XIAOMI", "LG_TV"]  # noqa: E501
        if app_store not in allowed_values:
            raise ValueError(
                "Invalid value for `app_store` ({0}), must be one of {1}"
                .format(app_store, allowed_values)
            )

        self._app_store = app_store

    @property
    def external_app_id(self):
        """Gets the external_app_id of this PublisherProfileMobileApplication.

        The external ID for the app from its app store. Can be used to filter the response of the publisherProfiles.list method.

        :return: The external_app_id of this PublisherProfileMobileApplication.
        :rtype: str
        """
        return self._external_app_id

    @external_app_id.setter
    def external_app_id(self, external_app_id):
        """Sets the external_app_id of this PublisherProfileMobileApplication.

        The external ID for the app from its app store. Can be used to filter the response of the publisherProfiles.list method.

        :param external_app_id: The external_app_id of this PublisherProfileMobileApplication.
        :type external_app_id: str
        """

        self._external_app_id = external_app_id

    @property
    def name(self):
        """Gets the name of this PublisherProfileMobileApplication.

        The name of the app.

        :return: The name of this PublisherProfileMobileApplication.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublisherProfileMobileApplication.

        The name of the app.

        :param name: The name of this PublisherProfileMobileApplication.
        :type name: str
        """

        self._name = name
