# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuctionPackage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, creator: str=None, description: str=None, display_name: str=None, name: str=None, subscribed_clients: List[str]=None, update_time: str=None):
        """AuctionPackage - a model defined in OpenAPI

        :param create_time: The create_time of this AuctionPackage.
        :param creator: The creator of this AuctionPackage.
        :param description: The description of this AuctionPackage.
        :param display_name: The display_name of this AuctionPackage.
        :param name: The name of this AuctionPackage.
        :param subscribed_clients: The subscribed_clients of this AuctionPackage.
        :param update_time: The update_time of this AuctionPackage.
        """
        self.openapi_types = {
            'create_time': str,
            'creator': str,
            'description': str,
            'display_name': str,
            'name': str,
            'subscribed_clients': List[str],
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'creator': 'creator',
            'description': 'description',
            'display_name': 'displayName',
            'name': 'name',
            'subscribed_clients': 'subscribedClients',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._creator = creator
        self._description = description
        self._display_name = display_name
        self._name = name
        self._subscribed_clients = subscribed_clients
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuctionPackage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuctionPackage of this AuctionPackage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this AuctionPackage.

        Output only. Time the auction package was created.

        :return: The create_time of this AuctionPackage.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this AuctionPackage.

        Output only. Time the auction package was created.

        :param create_time: The create_time of this AuctionPackage.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def creator(self):
        """Gets the creator of this AuctionPackage.

        Output only. The buyer that created this auction package. Format: `buyers/{buyerAccountId}`

        :return: The creator of this AuctionPackage.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this AuctionPackage.

        Output only. The buyer that created this auction package. Format: `buyers/{buyerAccountId}`

        :param creator: The creator of this AuctionPackage.
        :type creator: str
        """

        self._creator = creator

    @property
    def description(self):
        """Gets the description of this AuctionPackage.

        Output only. A description of the auction package.

        :return: The description of this AuctionPackage.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AuctionPackage.

        Output only. A description of the auction package.

        :param description: The description of this AuctionPackage.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this AuctionPackage.

        The display_name assigned to the auction package.

        :return: The display_name of this AuctionPackage.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AuctionPackage.

        The display_name assigned to the auction package.

        :param display_name: The display_name of this AuctionPackage.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this AuctionPackage.

        Immutable. The unique identifier for the auction package. Format: `buyers/{accountId}/auctionPackages/{auctionPackageId}` The auction_package_id part of name is sent in the BidRequest to all RTB bidders and is returned as deal_id by the bidder in the BidResponse.

        :return: The name of this AuctionPackage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuctionPackage.

        Immutable. The unique identifier for the auction package. Format: `buyers/{accountId}/auctionPackages/{auctionPackageId}` The auction_package_id part of name is sent in the BidRequest to all RTB bidders and is returned as deal_id by the bidder in the BidResponse.

        :param name: The name of this AuctionPackage.
        :type name: str
        """

        self._name = name

    @property
    def subscribed_clients(self):
        """Gets the subscribed_clients of this AuctionPackage.

        Output only. The list of clients of the current buyer that are subscribed to the AuctionPackage. Format: `buyers/{buyerAccountId}/clients/{clientAccountId}`

        :return: The subscribed_clients of this AuctionPackage.
        :rtype: List[str]
        """
        return self._subscribed_clients

    @subscribed_clients.setter
    def subscribed_clients(self, subscribed_clients):
        """Sets the subscribed_clients of this AuctionPackage.

        Output only. The list of clients of the current buyer that are subscribed to the AuctionPackage. Format: `buyers/{buyerAccountId}/clients/{clientAccountId}`

        :param subscribed_clients: The subscribed_clients of this AuctionPackage.
        :type subscribed_clients: List[str]
        """

        self._subscribed_clients = subscribed_clients

    @property
    def update_time(self):
        """Gets the update_time of this AuctionPackage.

        Output only. Time the auction package was last updated. This value is only increased when this auction package is updated but never when a buyer subscribed.

        :return: The update_time of this AuctionPackage.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this AuctionPackage.

        Output only. Time the auction package was last updated. This value is only increased when this auction package is updated but never when a buyer subscribed.

        :param update_time: The update_time of this AuctionPackage.
        :type update_time: str
        """

        self._update_time = update_time
