# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deal import Deal
from openapi_server.models.deal_pausing_info import DealPausingInfo
from openapi_server.models.rtb_metrics import RtbMetrics
from openapi_server import util


class FinalizedDeal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deal: Deal=None, deal_pausing_info: DealPausingInfo=None, deal_serving_status: str=None, name: str=None, ready_to_serve: bool=None, rtb_metrics: RtbMetrics=None):
        """FinalizedDeal - a model defined in OpenAPI

        :param deal: The deal of this FinalizedDeal.
        :param deal_pausing_info: The deal_pausing_info of this FinalizedDeal.
        :param deal_serving_status: The deal_serving_status of this FinalizedDeal.
        :param name: The name of this FinalizedDeal.
        :param ready_to_serve: The ready_to_serve of this FinalizedDeal.
        :param rtb_metrics: The rtb_metrics of this FinalizedDeal.
        """
        self.openapi_types = {
            'deal': Deal,
            'deal_pausing_info': DealPausingInfo,
            'deal_serving_status': str,
            'name': str,
            'ready_to_serve': bool,
            'rtb_metrics': RtbMetrics
        }

        self.attribute_map = {
            'deal': 'deal',
            'deal_pausing_info': 'dealPausingInfo',
            'deal_serving_status': 'dealServingStatus',
            'name': 'name',
            'ready_to_serve': 'readyToServe',
            'rtb_metrics': 'rtbMetrics'
        }

        self._deal = deal
        self._deal_pausing_info = deal_pausing_info
        self._deal_serving_status = deal_serving_status
        self._name = name
        self._ready_to_serve = ready_to_serve
        self._rtb_metrics = rtb_metrics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FinalizedDeal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FinalizedDeal of this FinalizedDeal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deal(self):
        """Gets the deal of this FinalizedDeal.


        :return: The deal of this FinalizedDeal.
        :rtype: Deal
        """
        return self._deal

    @deal.setter
    def deal(self, deal):
        """Sets the deal of this FinalizedDeal.


        :param deal: The deal of this FinalizedDeal.
        :type deal: Deal
        """

        self._deal = deal

    @property
    def deal_pausing_info(self):
        """Gets the deal_pausing_info of this FinalizedDeal.


        :return: The deal_pausing_info of this FinalizedDeal.
        :rtype: DealPausingInfo
        """
        return self._deal_pausing_info

    @deal_pausing_info.setter
    def deal_pausing_info(self, deal_pausing_info):
        """Sets the deal_pausing_info of this FinalizedDeal.


        :param deal_pausing_info: The deal_pausing_info of this FinalizedDeal.
        :type deal_pausing_info: DealPausingInfo
        """

        self._deal_pausing_info = deal_pausing_info

    @property
    def deal_serving_status(self):
        """Gets the deal_serving_status of this FinalizedDeal.

        Serving status of the deal.

        :return: The deal_serving_status of this FinalizedDeal.
        :rtype: str
        """
        return self._deal_serving_status

    @deal_serving_status.setter
    def deal_serving_status(self, deal_serving_status):
        """Sets the deal_serving_status of this FinalizedDeal.

        Serving status of the deal.

        :param deal_serving_status: The deal_serving_status of this FinalizedDeal.
        :type deal_serving_status: str
        """
        allowed_values = ["DEAL_SERVING_STATUS_UNSPECIFIED", "ACTIVE", "ENDED", "PAUSED_BY_BUYER", "PAUSED_BY_SELLER"]  # noqa: E501
        if deal_serving_status not in allowed_values:
            raise ValueError(
                "Invalid value for `deal_serving_status` ({0}), must be one of {1}"
                .format(deal_serving_status, allowed_values)
            )

        self._deal_serving_status = deal_serving_status

    @property
    def name(self):
        """Gets the name of this FinalizedDeal.

        The resource name of the finalized deal. Format: `buyers/{accountId}/finalizedDeals/{finalizedDealId}`

        :return: The name of this FinalizedDeal.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FinalizedDeal.

        The resource name of the finalized deal. Format: `buyers/{accountId}/finalizedDeals/{finalizedDealId}`

        :param name: The name of this FinalizedDeal.
        :type name: str
        """

        self._name = name

    @property
    def ready_to_serve(self):
        """Gets the ready_to_serve of this FinalizedDeal.

        Whether the Programmatic Guaranteed deal is ready for serving.

        :return: The ready_to_serve of this FinalizedDeal.
        :rtype: bool
        """
        return self._ready_to_serve

    @ready_to_serve.setter
    def ready_to_serve(self, ready_to_serve):
        """Sets the ready_to_serve of this FinalizedDeal.

        Whether the Programmatic Guaranteed deal is ready for serving.

        :param ready_to_serve: The ready_to_serve of this FinalizedDeal.
        :type ready_to_serve: bool
        """

        self._ready_to_serve = ready_to_serve

    @property
    def rtb_metrics(self):
        """Gets the rtb_metrics of this FinalizedDeal.


        :return: The rtb_metrics of this FinalizedDeal.
        :rtype: RtbMetrics
        """
        return self._rtb_metrics

    @rtb_metrics.setter
    def rtb_metrics(self, rtb_metrics):
        """Sets the rtb_metrics of this FinalizedDeal.


        :param rtb_metrics: The rtb_metrics of this FinalizedDeal.
        :type rtb_metrics: RtbMetrics
        """

        self._rtb_metrics = rtb_metrics
