# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimeZone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, version: str=None):
        """TimeZone - a model defined in OpenAPI

        :param id: The id of this TimeZone.
        :param version: The version of this TimeZone.
        """
        self.openapi_types = {
            'id': str,
            'version': str
        }

        self.attribute_map = {
            'id': 'id',
            'version': 'version'
        }

        self._id = id
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeZone':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeZone of this TimeZone.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this TimeZone.

        IANA Time Zone Database time zone, e.g. \"America/New_York\".

        :return: The id of this TimeZone.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TimeZone.

        IANA Time Zone Database time zone, e.g. \"America/New_York\".

        :param id: The id of this TimeZone.
        :type id: str
        """

        self._id = id

    @property
    def version(self):
        """Gets the version of this TimeZone.

        Optional. IANA Time Zone Database version number, e.g. \"2019a\".

        :return: The version of this TimeZone.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TimeZone.

        Optional. IANA Time Zone Database version number, e.g. \"2019a\".

        :param version: The version of this TimeZone.
        :type version: str
        """

        self._version = version
