# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FrequencyCap(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_impressions: int=None, time_unit_type: str=None, time_units_count: int=None):
        """FrequencyCap - a model defined in OpenAPI

        :param max_impressions: The max_impressions of this FrequencyCap.
        :param time_unit_type: The time_unit_type of this FrequencyCap.
        :param time_units_count: The time_units_count of this FrequencyCap.
        """
        self.openapi_types = {
            'max_impressions': int,
            'time_unit_type': str,
            'time_units_count': int
        }

        self.attribute_map = {
            'max_impressions': 'maxImpressions',
            'time_unit_type': 'timeUnitType',
            'time_units_count': 'timeUnitsCount'
        }

        self._max_impressions = max_impressions
        self._time_unit_type = time_unit_type
        self._time_units_count = time_units_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FrequencyCap':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FrequencyCap of this FrequencyCap.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_impressions(self):
        """Gets the max_impressions of this FrequencyCap.

        The maximum number of impressions that can be served to a user within the specified time period.

        :return: The max_impressions of this FrequencyCap.
        :rtype: int
        """
        return self._max_impressions

    @max_impressions.setter
    def max_impressions(self, max_impressions):
        """Sets the max_impressions of this FrequencyCap.

        The maximum number of impressions that can be served to a user within the specified time period.

        :param max_impressions: The max_impressions of this FrequencyCap.
        :type max_impressions: int
        """

        self._max_impressions = max_impressions

    @property
    def time_unit_type(self):
        """Gets the time_unit_type of this FrequencyCap.

        The time unit. Along with num_time_units defines the amount of time over which impressions per user are counted and capped.

        :return: The time_unit_type of this FrequencyCap.
        :rtype: str
        """
        return self._time_unit_type

    @time_unit_type.setter
    def time_unit_type(self, time_unit_type):
        """Sets the time_unit_type of this FrequencyCap.

        The time unit. Along with num_time_units defines the amount of time over which impressions per user are counted and capped.

        :param time_unit_type: The time_unit_type of this FrequencyCap.
        :type time_unit_type: str
        """
        allowed_values = ["TIME_UNIT_TYPE_UNSPECIFIED", "MINUTE", "HOUR", "DAY", "WEEK", "MONTH", "LIFETIME", "POD", "STREAM"]  # noqa: E501
        if time_unit_type not in allowed_values:
            raise ValueError(
                "Invalid value for `time_unit_type` ({0}), must be one of {1}"
                .format(time_unit_type, allowed_values)
            )

        self._time_unit_type = time_unit_type

    @property
    def time_units_count(self):
        """Gets the time_units_count of this FrequencyCap.

        The amount of time, in the units specified by time_unit_type. Defines the amount of time over which impressions per user are counted and capped.

        :return: The time_units_count of this FrequencyCap.
        :rtype: int
        """
        return self._time_units_count

    @time_units_count.setter
    def time_units_count(self, time_units_count):
        """Sets the time_units_count of this FrequencyCap.

        The amount of time, in the units specified by time_unit_type. Defines the amount of time over which impressions per user are counted and capped.

        :param time_units_count: The time_units_count of this FrequencyCap.
        :type time_units_count: int
        """

        self._time_units_count = time_units_count
