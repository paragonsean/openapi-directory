# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Note(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, creator_role: str=None, note: str=None):
        """Note - a model defined in OpenAPI

        :param create_time: The create_time of this Note.
        :param creator_role: The creator_role of this Note.
        :param note: The note of this Note.
        """
        self.openapi_types = {
            'create_time': str,
            'creator_role': str,
            'note': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'creator_role': 'creatorRole',
            'note': 'note'
        }

        self._create_time = create_time
        self._creator_role = creator_role
        self._note = note

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Note':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Note of this Note.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Note.

        Output only. When this note was created.

        :return: The create_time of this Note.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Note.

        Output only. When this note was created.

        :param create_time: The create_time of this Note.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def creator_role(self):
        """Gets the creator_role of this Note.

        Output only. The role who created the note.

        :return: The creator_role of this Note.
        :rtype: str
        """
        return self._creator_role

    @creator_role.setter
    def creator_role(self, creator_role):
        """Sets the creator_role of this Note.

        Output only. The role who created the note.

        :param creator_role: The creator_role of this Note.
        :type creator_role: str
        """
        allowed_values = ["BUYER_SELLER_ROLE_UNSPECIFIED", "BUYER", "SELLER"]  # noqa: E501
        if creator_role not in allowed_values:
            raise ValueError(
                "Invalid value for `creator_role` ({0}), must be one of {1}"
                .format(creator_role, allowed_values)
            )

        self._creator_role = creator_role

    @property
    def note(self):
        """Gets the note of this Note.

        The text of the note. Maximum length is 1024 characters.

        :return: The note of this Note.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Note.

        The text of the note. Maximum length is 1024 characters.

        :param note: The note of this Note.
        :type note: str
        """

        self._note = note
