# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.creative_requirements import CreativeRequirements
from openapi_server.models.delivery_control import DeliveryControl
from openapi_server.models.marketplace_targeting import MarketplaceTargeting
from openapi_server.models.money import Money
from openapi_server.models.preferred_deal_terms import PreferredDealTerms
from openapi_server.models.private_auction_terms import PrivateAuctionTerms
from openapi_server.models.programmatic_guaranteed_terms import ProgrammaticGuaranteedTerms
from openapi_server.models.time_zone import TimeZone
from openapi_server import util


class Deal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billed_buyer: str=None, buyer: str=None, client: str=None, create_time: str=None, creative_requirements: CreativeRequirements=None, deal_type: str=None, delivery_control: DeliveryControl=None, description: str=None, display_name: str=None, estimated_gross_spend: Money=None, flight_end_time: str=None, flight_start_time: str=None, name: str=None, preferred_deal_terms: PreferredDealTerms=None, private_auction_terms: PrivateAuctionTerms=None, programmatic_guaranteed_terms: ProgrammaticGuaranteedTerms=None, proposal_revision: str=None, publisher_profile: str=None, seller_time_zone: TimeZone=None, targeting: MarketplaceTargeting=None, update_time: str=None):
        """Deal - a model defined in OpenAPI

        :param billed_buyer: The billed_buyer of this Deal.
        :param buyer: The buyer of this Deal.
        :param client: The client of this Deal.
        :param create_time: The create_time of this Deal.
        :param creative_requirements: The creative_requirements of this Deal.
        :param deal_type: The deal_type of this Deal.
        :param delivery_control: The delivery_control of this Deal.
        :param description: The description of this Deal.
        :param display_name: The display_name of this Deal.
        :param estimated_gross_spend: The estimated_gross_spend of this Deal.
        :param flight_end_time: The flight_end_time of this Deal.
        :param flight_start_time: The flight_start_time of this Deal.
        :param name: The name of this Deal.
        :param preferred_deal_terms: The preferred_deal_terms of this Deal.
        :param private_auction_terms: The private_auction_terms of this Deal.
        :param programmatic_guaranteed_terms: The programmatic_guaranteed_terms of this Deal.
        :param proposal_revision: The proposal_revision of this Deal.
        :param publisher_profile: The publisher_profile of this Deal.
        :param seller_time_zone: The seller_time_zone of this Deal.
        :param targeting: The targeting of this Deal.
        :param update_time: The update_time of this Deal.
        """
        self.openapi_types = {
            'billed_buyer': str,
            'buyer': str,
            'client': str,
            'create_time': str,
            'creative_requirements': CreativeRequirements,
            'deal_type': str,
            'delivery_control': DeliveryControl,
            'description': str,
            'display_name': str,
            'estimated_gross_spend': Money,
            'flight_end_time': str,
            'flight_start_time': str,
            'name': str,
            'preferred_deal_terms': PreferredDealTerms,
            'private_auction_terms': PrivateAuctionTerms,
            'programmatic_guaranteed_terms': ProgrammaticGuaranteedTerms,
            'proposal_revision': str,
            'publisher_profile': str,
            'seller_time_zone': TimeZone,
            'targeting': MarketplaceTargeting,
            'update_time': str
        }

        self.attribute_map = {
            'billed_buyer': 'billedBuyer',
            'buyer': 'buyer',
            'client': 'client',
            'create_time': 'createTime',
            'creative_requirements': 'creativeRequirements',
            'deal_type': 'dealType',
            'delivery_control': 'deliveryControl',
            'description': 'description',
            'display_name': 'displayName',
            'estimated_gross_spend': 'estimatedGrossSpend',
            'flight_end_time': 'flightEndTime',
            'flight_start_time': 'flightStartTime',
            'name': 'name',
            'preferred_deal_terms': 'preferredDealTerms',
            'private_auction_terms': 'privateAuctionTerms',
            'programmatic_guaranteed_terms': 'programmaticGuaranteedTerms',
            'proposal_revision': 'proposalRevision',
            'publisher_profile': 'publisherProfile',
            'seller_time_zone': 'sellerTimeZone',
            'targeting': 'targeting',
            'update_time': 'updateTime'
        }

        self._billed_buyer = billed_buyer
        self._buyer = buyer
        self._client = client
        self._create_time = create_time
        self._creative_requirements = creative_requirements
        self._deal_type = deal_type
        self._delivery_control = delivery_control
        self._description = description
        self._display_name = display_name
        self._estimated_gross_spend = estimated_gross_spend
        self._flight_end_time = flight_end_time
        self._flight_start_time = flight_start_time
        self._name = name
        self._preferred_deal_terms = preferred_deal_terms
        self._private_auction_terms = private_auction_terms
        self._programmatic_guaranteed_terms = programmatic_guaranteed_terms
        self._proposal_revision = proposal_revision
        self._publisher_profile = publisher_profile
        self._seller_time_zone = seller_time_zone
        self._targeting = targeting
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Deal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Deal of this Deal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billed_buyer(self):
        """Gets the billed_buyer of this Deal.

        Output only. When the client field is populated, this field refers to the buyer who creates and manages the client buyer and gets billed on behalf of the client buyer; when the buyer field is populated, this field is the same value as buyer. Format : `buyers/{buyerAccountId}`

        :return: The billed_buyer of this Deal.
        :rtype: str
        """
        return self._billed_buyer

    @billed_buyer.setter
    def billed_buyer(self, billed_buyer):
        """Sets the billed_buyer of this Deal.

        Output only. When the client field is populated, this field refers to the buyer who creates and manages the client buyer and gets billed on behalf of the client buyer; when the buyer field is populated, this field is the same value as buyer. Format : `buyers/{buyerAccountId}`

        :param billed_buyer: The billed_buyer of this Deal.
        :type billed_buyer: str
        """

        self._billed_buyer = billed_buyer

    @property
    def buyer(self):
        """Gets the buyer of this Deal.

        Output only. Refers to a buyer in The Realtime-bidding API. Format: `buyers/{buyerAccountId}`

        :return: The buyer of this Deal.
        :rtype: str
        """
        return self._buyer

    @buyer.setter
    def buyer(self, buyer):
        """Sets the buyer of this Deal.

        Output only. Refers to a buyer in The Realtime-bidding API. Format: `buyers/{buyerAccountId}`

        :param buyer: The buyer of this Deal.
        :type buyer: str
        """

        self._buyer = buyer

    @property
    def client(self):
        """Gets the client of this Deal.

        Output only. Refers to a Client. Format: `buyers/{buyerAccountId}/clients/{clientAccountid}`

        :return: The client of this Deal.
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this Deal.

        Output only. Refers to a Client. Format: `buyers/{buyerAccountId}/clients/{clientAccountid}`

        :param client: The client of this Deal.
        :type client: str
        """

        self._client = client

    @property
    def create_time(self):
        """Gets the create_time of this Deal.

        Output only. The time of the deal creation.

        :return: The create_time of this Deal.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Deal.

        Output only. The time of the deal creation.

        :param create_time: The create_time of this Deal.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def creative_requirements(self):
        """Gets the creative_requirements of this Deal.


        :return: The creative_requirements of this Deal.
        :rtype: CreativeRequirements
        """
        return self._creative_requirements

    @creative_requirements.setter
    def creative_requirements(self, creative_requirements):
        """Sets the creative_requirements of this Deal.


        :param creative_requirements: The creative_requirements of this Deal.
        :type creative_requirements: CreativeRequirements
        """

        self._creative_requirements = creative_requirements

    @property
    def deal_type(self):
        """Gets the deal_type of this Deal.

        Output only. Type of deal.

        :return: The deal_type of this Deal.
        :rtype: str
        """
        return self._deal_type

    @deal_type.setter
    def deal_type(self, deal_type):
        """Sets the deal_type of this Deal.

        Output only. Type of deal.

        :param deal_type: The deal_type of this Deal.
        :type deal_type: str
        """
        allowed_values = ["DEAL_TYPE_UNSPECIFIED", "PREFERRED_DEAL", "PRIVATE_AUCTION", "PROGRAMMATIC_GUARANTEED"]  # noqa: E501
        if deal_type not in allowed_values:
            raise ValueError(
                "Invalid value for `deal_type` ({0}), must be one of {1}"
                .format(deal_type, allowed_values)
            )

        self._deal_type = deal_type

    @property
    def delivery_control(self):
        """Gets the delivery_control of this Deal.


        :return: The delivery_control of this Deal.
        :rtype: DeliveryControl
        """
        return self._delivery_control

    @delivery_control.setter
    def delivery_control(self, delivery_control):
        """Sets the delivery_control of this Deal.


        :param delivery_control: The delivery_control of this Deal.
        :type delivery_control: DeliveryControl
        """

        self._delivery_control = delivery_control

    @property
    def description(self):
        """Gets the description of this Deal.

        Output only. Free text description for the deal terms.

        :return: The description of this Deal.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Deal.

        Output only. Free text description for the deal terms.

        :param description: The description of this Deal.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Deal.

        Output only. The name of the deal. Maximum length of 255 unicode characters is allowed. Control characters are not allowed. Buyers cannot update this field. Note: Not to be confused with name, which is a unique identifier of the deal.

        :return: The display_name of this Deal.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Deal.

        Output only. The name of the deal. Maximum length of 255 unicode characters is allowed. Control characters are not allowed. Buyers cannot update this field. Note: Not to be confused with name, which is a unique identifier of the deal.

        :param display_name: The display_name of this Deal.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def estimated_gross_spend(self):
        """Gets the estimated_gross_spend of this Deal.


        :return: The estimated_gross_spend of this Deal.
        :rtype: Money
        """
        return self._estimated_gross_spend

    @estimated_gross_spend.setter
    def estimated_gross_spend(self, estimated_gross_spend):
        """Sets the estimated_gross_spend of this Deal.


        :param estimated_gross_spend: The estimated_gross_spend of this Deal.
        :type estimated_gross_spend: Money
        """

        self._estimated_gross_spend = estimated_gross_spend

    @property
    def flight_end_time(self):
        """Gets the flight_end_time of this Deal.

        Proposed flight end time of the deal. This will generally be stored in a granularity of a second. A value is not necessary for Private Auction deals.

        :return: The flight_end_time of this Deal.
        :rtype: str
        """
        return self._flight_end_time

    @flight_end_time.setter
    def flight_end_time(self, flight_end_time):
        """Sets the flight_end_time of this Deal.

        Proposed flight end time of the deal. This will generally be stored in a granularity of a second. A value is not necessary for Private Auction deals.

        :param flight_end_time: The flight_end_time of this Deal.
        :type flight_end_time: str
        """

        self._flight_end_time = flight_end_time

    @property
    def flight_start_time(self):
        """Gets the flight_start_time of this Deal.

        Proposed flight start time of the deal. This will generally be stored in the granularity of one second since deal serving starts at seconds boundary. Any time specified with more granularity (for example, in milliseconds) will be truncated towards the start of time in seconds.

        :return: The flight_start_time of this Deal.
        :rtype: str
        """
        return self._flight_start_time

    @flight_start_time.setter
    def flight_start_time(self, flight_start_time):
        """Sets the flight_start_time of this Deal.

        Proposed flight start time of the deal. This will generally be stored in the granularity of one second since deal serving starts at seconds boundary. Any time specified with more granularity (for example, in milliseconds) will be truncated towards the start of time in seconds.

        :param flight_start_time: The flight_start_time of this Deal.
        :type flight_start_time: str
        """

        self._flight_start_time = flight_start_time

    @property
    def name(self):
        """Gets the name of this Deal.

        Immutable. The unique identifier of the deal. Auto-generated by the server when a deal is created. Format: buyers/{accountId}/proposals/{proposalId}/deals/{dealId}

        :return: The name of this Deal.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Deal.

        Immutable. The unique identifier of the deal. Auto-generated by the server when a deal is created. Format: buyers/{accountId}/proposals/{proposalId}/deals/{dealId}

        :param name: The name of this Deal.
        :type name: str
        """

        self._name = name

    @property
    def preferred_deal_terms(self):
        """Gets the preferred_deal_terms of this Deal.


        :return: The preferred_deal_terms of this Deal.
        :rtype: PreferredDealTerms
        """
        return self._preferred_deal_terms

    @preferred_deal_terms.setter
    def preferred_deal_terms(self, preferred_deal_terms):
        """Sets the preferred_deal_terms of this Deal.


        :param preferred_deal_terms: The preferred_deal_terms of this Deal.
        :type preferred_deal_terms: PreferredDealTerms
        """

        self._preferred_deal_terms = preferred_deal_terms

    @property
    def private_auction_terms(self):
        """Gets the private_auction_terms of this Deal.


        :return: The private_auction_terms of this Deal.
        :rtype: PrivateAuctionTerms
        """
        return self._private_auction_terms

    @private_auction_terms.setter
    def private_auction_terms(self, private_auction_terms):
        """Sets the private_auction_terms of this Deal.


        :param private_auction_terms: The private_auction_terms of this Deal.
        :type private_auction_terms: PrivateAuctionTerms
        """

        self._private_auction_terms = private_auction_terms

    @property
    def programmatic_guaranteed_terms(self):
        """Gets the programmatic_guaranteed_terms of this Deal.


        :return: The programmatic_guaranteed_terms of this Deal.
        :rtype: ProgrammaticGuaranteedTerms
        """
        return self._programmatic_guaranteed_terms

    @programmatic_guaranteed_terms.setter
    def programmatic_guaranteed_terms(self, programmatic_guaranteed_terms):
        """Sets the programmatic_guaranteed_terms of this Deal.


        :param programmatic_guaranteed_terms: The programmatic_guaranteed_terms of this Deal.
        :type programmatic_guaranteed_terms: ProgrammaticGuaranteedTerms
        """

        self._programmatic_guaranteed_terms = programmatic_guaranteed_terms

    @property
    def proposal_revision(self):
        """Gets the proposal_revision of this Deal.

        Output only. The revision number for the proposal and is the same value as proposal.proposal_revision. Each update to deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.

        :return: The proposal_revision of this Deal.
        :rtype: str
        """
        return self._proposal_revision

    @proposal_revision.setter
    def proposal_revision(self, proposal_revision):
        """Sets the proposal_revision of this Deal.

        Output only. The revision number for the proposal and is the same value as proposal.proposal_revision. Each update to deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.

        :param proposal_revision: The proposal_revision of this Deal.
        :type proposal_revision: str
        """

        self._proposal_revision = proposal_revision

    @property
    def publisher_profile(self):
        """Gets the publisher_profile of this Deal.

        Immutable. Reference to the seller on the deal. Format: `buyers/{buyerAccountId}/publisherProfiles/{publisherProfileId}`

        :return: The publisher_profile of this Deal.
        :rtype: str
        """
        return self._publisher_profile

    @publisher_profile.setter
    def publisher_profile(self, publisher_profile):
        """Sets the publisher_profile of this Deal.

        Immutable. Reference to the seller on the deal. Format: `buyers/{buyerAccountId}/publisherProfiles/{publisherProfileId}`

        :param publisher_profile: The publisher_profile of this Deal.
        :type publisher_profile: str
        """

        self._publisher_profile = publisher_profile

    @property
    def seller_time_zone(self):
        """Gets the seller_time_zone of this Deal.


        :return: The seller_time_zone of this Deal.
        :rtype: TimeZone
        """
        return self._seller_time_zone

    @seller_time_zone.setter
    def seller_time_zone(self, seller_time_zone):
        """Sets the seller_time_zone of this Deal.


        :param seller_time_zone: The seller_time_zone of this Deal.
        :type seller_time_zone: TimeZone
        """

        self._seller_time_zone = seller_time_zone

    @property
    def targeting(self):
        """Gets the targeting of this Deal.


        :return: The targeting of this Deal.
        :rtype: MarketplaceTargeting
        """
        return self._targeting

    @targeting.setter
    def targeting(self, targeting):
        """Sets the targeting of this Deal.


        :param targeting: The targeting of this Deal.
        :type targeting: MarketplaceTargeting
        """

        self._targeting = targeting

    @property
    def update_time(self):
        """Gets the update_time of this Deal.

        Output only. The time when the deal was last updated.

        :return: The update_time of this Deal.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Deal.

        Output only. The time when the deal was last updated.

        :param update_time: The update_time of this Deal.
        :type update_time: str
        """

        self._update_time = update_time
