# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact import Contact
from openapi_server.models.note import Note
from openapi_server.models.private_data import PrivateData
from openapi_server import util


class Proposal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billed_buyer: str=None, buyer: str=None, buyer_contacts: List[Contact]=None, buyer_private_data: PrivateData=None, client: str=None, deal_type: str=None, display_name: str=None, is_renegotiating: bool=None, last_updater_or_commentor_role: str=None, name: str=None, notes: List[Note]=None, originator_role: str=None, pausing_consented: bool=None, proposal_revision: str=None, publisher_profile: str=None, seller_contacts: List[Contact]=None, state: str=None, terms_and_conditions: str=None, update_time: str=None):
        """Proposal - a model defined in OpenAPI

        :param billed_buyer: The billed_buyer of this Proposal.
        :param buyer: The buyer of this Proposal.
        :param buyer_contacts: The buyer_contacts of this Proposal.
        :param buyer_private_data: The buyer_private_data of this Proposal.
        :param client: The client of this Proposal.
        :param deal_type: The deal_type of this Proposal.
        :param display_name: The display_name of this Proposal.
        :param is_renegotiating: The is_renegotiating of this Proposal.
        :param last_updater_or_commentor_role: The last_updater_or_commentor_role of this Proposal.
        :param name: The name of this Proposal.
        :param notes: The notes of this Proposal.
        :param originator_role: The originator_role of this Proposal.
        :param pausing_consented: The pausing_consented of this Proposal.
        :param proposal_revision: The proposal_revision of this Proposal.
        :param publisher_profile: The publisher_profile of this Proposal.
        :param seller_contacts: The seller_contacts of this Proposal.
        :param state: The state of this Proposal.
        :param terms_and_conditions: The terms_and_conditions of this Proposal.
        :param update_time: The update_time of this Proposal.
        """
        self.openapi_types = {
            'billed_buyer': str,
            'buyer': str,
            'buyer_contacts': List[Contact],
            'buyer_private_data': PrivateData,
            'client': str,
            'deal_type': str,
            'display_name': str,
            'is_renegotiating': bool,
            'last_updater_or_commentor_role': str,
            'name': str,
            'notes': List[Note],
            'originator_role': str,
            'pausing_consented': bool,
            'proposal_revision': str,
            'publisher_profile': str,
            'seller_contacts': List[Contact],
            'state': str,
            'terms_and_conditions': str,
            'update_time': str
        }

        self.attribute_map = {
            'billed_buyer': 'billedBuyer',
            'buyer': 'buyer',
            'buyer_contacts': 'buyerContacts',
            'buyer_private_data': 'buyerPrivateData',
            'client': 'client',
            'deal_type': 'dealType',
            'display_name': 'displayName',
            'is_renegotiating': 'isRenegotiating',
            'last_updater_or_commentor_role': 'lastUpdaterOrCommentorRole',
            'name': 'name',
            'notes': 'notes',
            'originator_role': 'originatorRole',
            'pausing_consented': 'pausingConsented',
            'proposal_revision': 'proposalRevision',
            'publisher_profile': 'publisherProfile',
            'seller_contacts': 'sellerContacts',
            'state': 'state',
            'terms_and_conditions': 'termsAndConditions',
            'update_time': 'updateTime'
        }

        self._billed_buyer = billed_buyer
        self._buyer = buyer
        self._buyer_contacts = buyer_contacts
        self._buyer_private_data = buyer_private_data
        self._client = client
        self._deal_type = deal_type
        self._display_name = display_name
        self._is_renegotiating = is_renegotiating
        self._last_updater_or_commentor_role = last_updater_or_commentor_role
        self._name = name
        self._notes = notes
        self._originator_role = originator_role
        self._pausing_consented = pausing_consented
        self._proposal_revision = proposal_revision
        self._publisher_profile = publisher_profile
        self._seller_contacts = seller_contacts
        self._state = state
        self._terms_and_conditions = terms_and_conditions
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Proposal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Proposal of this Proposal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billed_buyer(self):
        """Gets the billed_buyer of this Proposal.

        Output only. When the client field is populated, this field refers to the buyer who creates and manages the client buyer and gets billed on behalf of the client buyer; when the buyer field is populated, this field is the same value as buyer. Format : `buyers/{buyerAccountId}`

        :return: The billed_buyer of this Proposal.
        :rtype: str
        """
        return self._billed_buyer

    @billed_buyer.setter
    def billed_buyer(self, billed_buyer):
        """Sets the billed_buyer of this Proposal.

        Output only. When the client field is populated, this field refers to the buyer who creates and manages the client buyer and gets billed on behalf of the client buyer; when the buyer field is populated, this field is the same value as buyer. Format : `buyers/{buyerAccountId}`

        :param billed_buyer: The billed_buyer of this Proposal.
        :type billed_buyer: str
        """

        self._billed_buyer = billed_buyer

    @property
    def buyer(self):
        """Gets the buyer of this Proposal.

        Output only. Refers to a buyer in The Realtime-bidding API. Format: `buyers/{buyerAccountId}`

        :return: The buyer of this Proposal.
        :rtype: str
        """
        return self._buyer

    @buyer.setter
    def buyer(self, buyer):
        """Sets the buyer of this Proposal.

        Output only. Refers to a buyer in The Realtime-bidding API. Format: `buyers/{buyerAccountId}`

        :param buyer: The buyer of this Proposal.
        :type buyer: str
        """

        self._buyer = buyer

    @property
    def buyer_contacts(self):
        """Gets the buyer_contacts of this Proposal.

        Contact information for the buyer.

        :return: The buyer_contacts of this Proposal.
        :rtype: List[Contact]
        """
        return self._buyer_contacts

    @buyer_contacts.setter
    def buyer_contacts(self, buyer_contacts):
        """Sets the buyer_contacts of this Proposal.

        Contact information for the buyer.

        :param buyer_contacts: The buyer_contacts of this Proposal.
        :type buyer_contacts: List[Contact]
        """

        self._buyer_contacts = buyer_contacts

    @property
    def buyer_private_data(self):
        """Gets the buyer_private_data of this Proposal.


        :return: The buyer_private_data of this Proposal.
        :rtype: PrivateData
        """
        return self._buyer_private_data

    @buyer_private_data.setter
    def buyer_private_data(self, buyer_private_data):
        """Sets the buyer_private_data of this Proposal.


        :param buyer_private_data: The buyer_private_data of this Proposal.
        :type buyer_private_data: PrivateData
        """

        self._buyer_private_data = buyer_private_data

    @property
    def client(self):
        """Gets the client of this Proposal.

        Output only. Refers to a Client. Format: `buyers/{buyerAccountId}/clients/{clientAccountid}`

        :return: The client of this Proposal.
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this Proposal.

        Output only. Refers to a Client. Format: `buyers/{buyerAccountId}/clients/{clientAccountid}`

        :param client: The client of this Proposal.
        :type client: str
        """

        self._client = client

    @property
    def deal_type(self):
        """Gets the deal_type of this Proposal.

        Output only. Type of deal the proposal contains.

        :return: The deal_type of this Proposal.
        :rtype: str
        """
        return self._deal_type

    @deal_type.setter
    def deal_type(self, deal_type):
        """Sets the deal_type of this Proposal.

        Output only. Type of deal the proposal contains.

        :param deal_type: The deal_type of this Proposal.
        :type deal_type: str
        """
        allowed_values = ["DEAL_TYPE_UNSPECIFIED", "PREFERRED_DEAL", "PRIVATE_AUCTION", "PROGRAMMATIC_GUARANTEED"]  # noqa: E501
        if deal_type not in allowed_values:
            raise ValueError(
                "Invalid value for `deal_type` ({0}), must be one of {1}"
                .format(deal_type, allowed_values)
            )

        self._deal_type = deal_type

    @property
    def display_name(self):
        """Gets the display_name of this Proposal.

        Output only. The descriptive name for the proposal. Maximum length of 255 unicode characters is allowed. Control characters are not allowed. Buyers cannot update this field. Note: Not to be confused with name, which is a unique identifier of the proposal.

        :return: The display_name of this Proposal.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Proposal.

        Output only. The descriptive name for the proposal. Maximum length of 255 unicode characters is allowed. Control characters are not allowed. Buyers cannot update this field. Note: Not to be confused with name, which is a unique identifier of the proposal.

        :param display_name: The display_name of this Proposal.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def is_renegotiating(self):
        """Gets the is_renegotiating of this Proposal.

        Output only. True if the proposal was previously finalized and is now being renegotiated.

        :return: The is_renegotiating of this Proposal.
        :rtype: bool
        """
        return self._is_renegotiating

    @is_renegotiating.setter
    def is_renegotiating(self, is_renegotiating):
        """Sets the is_renegotiating of this Proposal.

        Output only. True if the proposal was previously finalized and is now being renegotiated.

        :param is_renegotiating: The is_renegotiating of this Proposal.
        :type is_renegotiating: bool
        """

        self._is_renegotiating = is_renegotiating

    @property
    def last_updater_or_commentor_role(self):
        """Gets the last_updater_or_commentor_role of this Proposal.

        Output only. The role of the last user that either updated the proposal or left a comment.

        :return: The last_updater_or_commentor_role of this Proposal.
        :rtype: str
        """
        return self._last_updater_or_commentor_role

    @last_updater_or_commentor_role.setter
    def last_updater_or_commentor_role(self, last_updater_or_commentor_role):
        """Sets the last_updater_or_commentor_role of this Proposal.

        Output only. The role of the last user that either updated the proposal or left a comment.

        :param last_updater_or_commentor_role: The last_updater_or_commentor_role of this Proposal.
        :type last_updater_or_commentor_role: str
        """
        allowed_values = ["BUYER_SELLER_ROLE_UNSPECIFIED", "BUYER", "SELLER"]  # noqa: E501
        if last_updater_or_commentor_role not in allowed_values:
            raise ValueError(
                "Invalid value for `last_updater_or_commentor_role` ({0}), must be one of {1}"
                .format(last_updater_or_commentor_role, allowed_values)
            )

        self._last_updater_or_commentor_role = last_updater_or_commentor_role

    @property
    def name(self):
        """Gets the name of this Proposal.

        Immutable. The name of the proposal serving as a unique identifier. Format: buyers/{accountId}/proposals/{proposalId}

        :return: The name of this Proposal.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Proposal.

        Immutable. The name of the proposal serving as a unique identifier. Format: buyers/{accountId}/proposals/{proposalId}

        :param name: The name of this Proposal.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this Proposal.

        A list of notes from the buyer and the seller attached to this proposal.

        :return: The notes of this Proposal.
        :rtype: List[Note]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Proposal.

        A list of notes from the buyer and the seller attached to this proposal.

        :param notes: The notes of this Proposal.
        :type notes: List[Note]
        """

        self._notes = notes

    @property
    def originator_role(self):
        """Gets the originator_role of this Proposal.

        Output only. Indicates whether the buyer/seller created the proposal.

        :return: The originator_role of this Proposal.
        :rtype: str
        """
        return self._originator_role

    @originator_role.setter
    def originator_role(self, originator_role):
        """Sets the originator_role of this Proposal.

        Output only. Indicates whether the buyer/seller created the proposal.

        :param originator_role: The originator_role of this Proposal.
        :type originator_role: str
        """
        allowed_values = ["BUYER_SELLER_ROLE_UNSPECIFIED", "BUYER", "SELLER"]  # noqa: E501
        if originator_role not in allowed_values:
            raise ValueError(
                "Invalid value for `originator_role` ({0}), must be one of {1}"
                .format(originator_role, allowed_values)
            )

        self._originator_role = originator_role

    @property
    def pausing_consented(self):
        """Gets the pausing_consented of this Proposal.

        Whether pausing is allowed for the proposal. This is a negotiable term between buyers and publishers.

        :return: The pausing_consented of this Proposal.
        :rtype: bool
        """
        return self._pausing_consented

    @pausing_consented.setter
    def pausing_consented(self, pausing_consented):
        """Sets the pausing_consented of this Proposal.

        Whether pausing is allowed for the proposal. This is a negotiable term between buyers and publishers.

        :param pausing_consented: The pausing_consented of this Proposal.
        :type pausing_consented: bool
        """

        self._pausing_consented = pausing_consented

    @property
    def proposal_revision(self):
        """Gets the proposal_revision of this Proposal.

        Output only. The revision number for the proposal. Each update to the proposal or deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.

        :return: The proposal_revision of this Proposal.
        :rtype: str
        """
        return self._proposal_revision

    @proposal_revision.setter
    def proposal_revision(self, proposal_revision):
        """Sets the proposal_revision of this Proposal.

        Output only. The revision number for the proposal. Each update to the proposal or deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.

        :param proposal_revision: The proposal_revision of this Proposal.
        :type proposal_revision: str
        """

        self._proposal_revision = proposal_revision

    @property
    def publisher_profile(self):
        """Gets the publisher_profile of this Proposal.

        Immutable. Reference to the seller on the proposal. Format: `buyers/{buyerAccountId}/publisherProfiles/{publisherProfileId}` Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.

        :return: The publisher_profile of this Proposal.
        :rtype: str
        """
        return self._publisher_profile

    @publisher_profile.setter
    def publisher_profile(self, publisher_profile):
        """Sets the publisher_profile of this Proposal.

        Immutable. Reference to the seller on the proposal. Format: `buyers/{buyerAccountId}/publisherProfiles/{publisherProfileId}` Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.

        :param publisher_profile: The publisher_profile of this Proposal.
        :type publisher_profile: str
        """

        self._publisher_profile = publisher_profile

    @property
    def seller_contacts(self):
        """Gets the seller_contacts of this Proposal.

        Output only. Contact information for the seller.

        :return: The seller_contacts of this Proposal.
        :rtype: List[Contact]
        """
        return self._seller_contacts

    @seller_contacts.setter
    def seller_contacts(self, seller_contacts):
        """Sets the seller_contacts of this Proposal.

        Output only. Contact information for the seller.

        :param seller_contacts: The seller_contacts of this Proposal.
        :type seller_contacts: List[Contact]
        """

        self._seller_contacts = seller_contacts

    @property
    def state(self):
        """Gets the state of this Proposal.

        Output only. Indicates the state of the proposal.

        :return: The state of this Proposal.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Proposal.

        Output only. Indicates the state of the proposal.

        :param state: The state of this Proposal.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "BUYER_REVIEW_REQUESTED", "SELLER_REVIEW_REQUESTED", "BUYER_ACCEPTANCE_REQUESTED", "FINALIZED", "TERMINATED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def terms_and_conditions(self):
        """Gets the terms_and_conditions of this Proposal.

        Output only. The terms and conditions associated with this proposal. Accepting a proposal implies acceptance of this field. This is created by the seller, the buyer can only view it.

        :return: The terms_and_conditions of this Proposal.
        :rtype: str
        """
        return self._terms_and_conditions

    @terms_and_conditions.setter
    def terms_and_conditions(self, terms_and_conditions):
        """Sets the terms_and_conditions of this Proposal.

        Output only. The terms and conditions associated with this proposal. Accepting a proposal implies acceptance of this field. This is created by the seller, the buyer can only view it.

        :param terms_and_conditions: The terms_and_conditions of this Proposal.
        :type terms_and_conditions: str
        """

        self._terms_and_conditions = terms_and_conditions

    @property
    def update_time(self):
        """Gets the update_time of this Proposal.

        Output only. The time when the proposal was last revised.

        :return: The update_time of this Proposal.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Proposal.

        Output only. The time when the proposal was last revised.

        :param update_time: The update_time of this Proposal.
        :type update_time: str
        """

        self._update_time = update_time
