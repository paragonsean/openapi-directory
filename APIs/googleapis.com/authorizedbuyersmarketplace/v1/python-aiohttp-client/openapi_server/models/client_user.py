# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClientUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, name: str=None, state: str=None):
        """ClientUser - a model defined in OpenAPI

        :param email: The email of this ClientUser.
        :param name: The name of this ClientUser.
        :param state: The state of this ClientUser.
        """
        self.openapi_types = {
            'email': str,
            'name': str,
            'state': str
        }

        self.attribute_map = {
            'email': 'email',
            'name': 'name',
            'state': 'state'
        }

        self._email = email
        self._name = name
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientUser of this ClientUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this ClientUser.

        Required. The client user's email address that has to be unique across all users for the same client.

        :return: The email of this ClientUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ClientUser.

        Required. The client user's email address that has to be unique across all users for the same client.

        :param email: The email of this ClientUser.
        :type email: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this ClientUser.

        Output only. The resource name of the client user. Format: `buyers/{accountId}/clients/{clientAccountId}/users/{userId}`

        :return: The name of this ClientUser.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClientUser.

        Output only. The resource name of the client user. Format: `buyers/{accountId}/clients/{clientAccountId}/users/{userId}`

        :param name: The name of this ClientUser.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this ClientUser.

        Output only. The state of the client user.

        :return: The state of this ClientUser.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ClientUser.

        Output only. The state of the client user.

        :param state: The state of this ClientUser.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "INVITED", "ACTIVE", "INACTIVE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
