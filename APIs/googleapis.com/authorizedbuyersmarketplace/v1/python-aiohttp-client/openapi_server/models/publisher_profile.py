# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.publisher_profile_mobile_application import PublisherProfileMobileApplication
from openapi_server import util


class PublisherProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audience_description: str=None, direct_deals_contact: str=None, display_name: str=None, domains: List[str]=None, is_parent: bool=None, logo_url: str=None, media_kit_url: str=None, mobile_apps: List[PublisherProfileMobileApplication]=None, name: str=None, overview: str=None, pitch_statement: str=None, programmatic_deals_contact: str=None, publisher_code: str=None, sample_page_url: str=None, top_headlines: List[str]=None):
        """PublisherProfile - a model defined in OpenAPI

        :param audience_description: The audience_description of this PublisherProfile.
        :param direct_deals_contact: The direct_deals_contact of this PublisherProfile.
        :param display_name: The display_name of this PublisherProfile.
        :param domains: The domains of this PublisherProfile.
        :param is_parent: The is_parent of this PublisherProfile.
        :param logo_url: The logo_url of this PublisherProfile.
        :param media_kit_url: The media_kit_url of this PublisherProfile.
        :param mobile_apps: The mobile_apps of this PublisherProfile.
        :param name: The name of this PublisherProfile.
        :param overview: The overview of this PublisherProfile.
        :param pitch_statement: The pitch_statement of this PublisherProfile.
        :param programmatic_deals_contact: The programmatic_deals_contact of this PublisherProfile.
        :param publisher_code: The publisher_code of this PublisherProfile.
        :param sample_page_url: The sample_page_url of this PublisherProfile.
        :param top_headlines: The top_headlines of this PublisherProfile.
        """
        self.openapi_types = {
            'audience_description': str,
            'direct_deals_contact': str,
            'display_name': str,
            'domains': List[str],
            'is_parent': bool,
            'logo_url': str,
            'media_kit_url': str,
            'mobile_apps': List[PublisherProfileMobileApplication],
            'name': str,
            'overview': str,
            'pitch_statement': str,
            'programmatic_deals_contact': str,
            'publisher_code': str,
            'sample_page_url': str,
            'top_headlines': List[str]
        }

        self.attribute_map = {
            'audience_description': 'audienceDescription',
            'direct_deals_contact': 'directDealsContact',
            'display_name': 'displayName',
            'domains': 'domains',
            'is_parent': 'isParent',
            'logo_url': 'logoUrl',
            'media_kit_url': 'mediaKitUrl',
            'mobile_apps': 'mobileApps',
            'name': 'name',
            'overview': 'overview',
            'pitch_statement': 'pitchStatement',
            'programmatic_deals_contact': 'programmaticDealsContact',
            'publisher_code': 'publisherCode',
            'sample_page_url': 'samplePageUrl',
            'top_headlines': 'topHeadlines'
        }

        self._audience_description = audience_description
        self._direct_deals_contact = direct_deals_contact
        self._display_name = display_name
        self._domains = domains
        self._is_parent = is_parent
        self._logo_url = logo_url
        self._media_kit_url = media_kit_url
        self._mobile_apps = mobile_apps
        self._name = name
        self._overview = overview
        self._pitch_statement = pitch_statement
        self._programmatic_deals_contact = programmatic_deals_contact
        self._publisher_code = publisher_code
        self._sample_page_url = sample_page_url
        self._top_headlines = top_headlines

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublisherProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublisherProfile of this PublisherProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audience_description(self):
        """Gets the audience_description of this PublisherProfile.

        Description on the publisher's audience.

        :return: The audience_description of this PublisherProfile.
        :rtype: str
        """
        return self._audience_description

    @audience_description.setter
    def audience_description(self, audience_description):
        """Sets the audience_description of this PublisherProfile.

        Description on the publisher's audience.

        :param audience_description: The audience_description of this PublisherProfile.
        :type audience_description: str
        """

        self._audience_description = audience_description

    @property
    def direct_deals_contact(self):
        """Gets the direct_deals_contact of this PublisherProfile.

        Contact information for direct reservation deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.

        :return: The direct_deals_contact of this PublisherProfile.
        :rtype: str
        """
        return self._direct_deals_contact

    @direct_deals_contact.setter
    def direct_deals_contact(self, direct_deals_contact):
        """Sets the direct_deals_contact of this PublisherProfile.

        Contact information for direct reservation deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.

        :param direct_deals_contact: The direct_deals_contact of this PublisherProfile.
        :type direct_deals_contact: str
        """

        self._direct_deals_contact = direct_deals_contact

    @property
    def display_name(self):
        """Gets the display_name of this PublisherProfile.

        Display name of the publisher profile. Can be used to filter the response of the publisherProfiles.list method.

        :return: The display_name of this PublisherProfile.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PublisherProfile.

        Display name of the publisher profile. Can be used to filter the response of the publisherProfiles.list method.

        :param display_name: The display_name of this PublisherProfile.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def domains(self):
        """Gets the domains of this PublisherProfile.

        The list of domains represented in this publisher profile. Empty if this is a parent profile. These are top private domains, meaning that these will not contain a string like \"photos.google.co.uk/123\", but will instead contain \"google.co.uk\". Can be used to filter the response of the publisherProfiles.list method.

        :return: The domains of this PublisherProfile.
        :rtype: List[str]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this PublisherProfile.

        The list of domains represented in this publisher profile. Empty if this is a parent profile. These are top private domains, meaning that these will not contain a string like \"photos.google.co.uk/123\", but will instead contain \"google.co.uk\". Can be used to filter the response of the publisherProfiles.list method.

        :param domains: The domains of this PublisherProfile.
        :type domains: List[str]
        """

        self._domains = domains

    @property
    def is_parent(self):
        """Gets the is_parent of this PublisherProfile.

        Indicates if this profile is the parent profile of the seller. A parent profile represents all the inventory from the seller, as opposed to child profile that is created to brand a portion of inventory. One seller has only one parent publisher profile, and can have multiple child profiles. See https://support.google.com/admanager/answer/6035806 for details. Can be used to filter the response of the publisherProfiles.list method by setting the filter to \"is_parent: true\".

        :return: The is_parent of this PublisherProfile.
        :rtype: bool
        """
        return self._is_parent

    @is_parent.setter
    def is_parent(self, is_parent):
        """Sets the is_parent of this PublisherProfile.

        Indicates if this profile is the parent profile of the seller. A parent profile represents all the inventory from the seller, as opposed to child profile that is created to brand a portion of inventory. One seller has only one parent publisher profile, and can have multiple child profiles. See https://support.google.com/admanager/answer/6035806 for details. Can be used to filter the response of the publisherProfiles.list method by setting the filter to \"is_parent: true\".

        :param is_parent: The is_parent of this PublisherProfile.
        :type is_parent: bool
        """

        self._is_parent = is_parent

    @property
    def logo_url(self):
        """Gets the logo_url of this PublisherProfile.

        A Google public URL to the logo for this publisher profile. The logo is stored as a PNG, JPG, or GIF image.

        :return: The logo_url of this PublisherProfile.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this PublisherProfile.

        A Google public URL to the logo for this publisher profile. The logo is stored as a PNG, JPG, or GIF image.

        :param logo_url: The logo_url of this PublisherProfile.
        :type logo_url: str
        """

        self._logo_url = logo_url

    @property
    def media_kit_url(self):
        """Gets the media_kit_url of this PublisherProfile.

        URL to additional marketing and sales materials.

        :return: The media_kit_url of this PublisherProfile.
        :rtype: str
        """
        return self._media_kit_url

    @media_kit_url.setter
    def media_kit_url(self, media_kit_url):
        """Sets the media_kit_url of this PublisherProfile.

        URL to additional marketing and sales materials.

        :param media_kit_url: The media_kit_url of this PublisherProfile.
        :type media_kit_url: str
        """

        self._media_kit_url = media_kit_url

    @property
    def mobile_apps(self):
        """Gets the mobile_apps of this PublisherProfile.

        The list of apps represented in this publisher profile. Empty if this is a parent profile.

        :return: The mobile_apps of this PublisherProfile.
        :rtype: List[PublisherProfileMobileApplication]
        """
        return self._mobile_apps

    @mobile_apps.setter
    def mobile_apps(self, mobile_apps):
        """Sets the mobile_apps of this PublisherProfile.

        The list of apps represented in this publisher profile. Empty if this is a parent profile.

        :param mobile_apps: The mobile_apps of this PublisherProfile.
        :type mobile_apps: List[PublisherProfileMobileApplication]
        """

        self._mobile_apps = mobile_apps

    @property
    def name(self):
        """Gets the name of this PublisherProfile.

        Name of the publisher profile. Format: `buyers/{buyer}/publisherProfiles/{publisher_profile}`

        :return: The name of this PublisherProfile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublisherProfile.

        Name of the publisher profile. Format: `buyers/{buyer}/publisherProfiles/{publisher_profile}`

        :param name: The name of this PublisherProfile.
        :type name: str
        """

        self._name = name

    @property
    def overview(self):
        """Gets the overview of this PublisherProfile.

        Overview of the publisher.

        :return: The overview of this PublisherProfile.
        :rtype: str
        """
        return self._overview

    @overview.setter
    def overview(self, overview):
        """Sets the overview of this PublisherProfile.

        Overview of the publisher.

        :param overview: The overview of this PublisherProfile.
        :type overview: str
        """

        self._overview = overview

    @property
    def pitch_statement(self):
        """Gets the pitch_statement of this PublisherProfile.

        Statement explaining what's unique about publisher's business, and why buyers should partner with the publisher.

        :return: The pitch_statement of this PublisherProfile.
        :rtype: str
        """
        return self._pitch_statement

    @pitch_statement.setter
    def pitch_statement(self, pitch_statement):
        """Sets the pitch_statement of this PublisherProfile.

        Statement explaining what's unique about publisher's business, and why buyers should partner with the publisher.

        :param pitch_statement: The pitch_statement of this PublisherProfile.
        :type pitch_statement: str
        """

        self._pitch_statement = pitch_statement

    @property
    def programmatic_deals_contact(self):
        """Gets the programmatic_deals_contact of this PublisherProfile.

        Contact information for programmatic deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.

        :return: The programmatic_deals_contact of this PublisherProfile.
        :rtype: str
        """
        return self._programmatic_deals_contact

    @programmatic_deals_contact.setter
    def programmatic_deals_contact(self, programmatic_deals_contact):
        """Sets the programmatic_deals_contact of this PublisherProfile.

        Contact information for programmatic deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.

        :param programmatic_deals_contact: The programmatic_deals_contact of this PublisherProfile.
        :type programmatic_deals_contact: str
        """

        self._programmatic_deals_contact = programmatic_deals_contact

    @property
    def publisher_code(self):
        """Gets the publisher_code of this PublisherProfile.

        A unique identifying code for the seller. This value is the same for all of the seller's parent and child publisher profiles. Can be used to filter the response of the publisherProfiles.list method.

        :return: The publisher_code of this PublisherProfile.
        :rtype: str
        """
        return self._publisher_code

    @publisher_code.setter
    def publisher_code(self, publisher_code):
        """Sets the publisher_code of this PublisherProfile.

        A unique identifying code for the seller. This value is the same for all of the seller's parent and child publisher profiles. Can be used to filter the response of the publisherProfiles.list method.

        :param publisher_code: The publisher_code of this PublisherProfile.
        :type publisher_code: str
        """

        self._publisher_code = publisher_code

    @property
    def sample_page_url(self):
        """Gets the sample_page_url of this PublisherProfile.

        URL to a sample content page.

        :return: The sample_page_url of this PublisherProfile.
        :rtype: str
        """
        return self._sample_page_url

    @sample_page_url.setter
    def sample_page_url(self, sample_page_url):
        """Sets the sample_page_url of this PublisherProfile.

        URL to a sample content page.

        :param sample_page_url: The sample_page_url of this PublisherProfile.
        :type sample_page_url: str
        """

        self._sample_page_url = sample_page_url

    @property
    def top_headlines(self):
        """Gets the top_headlines of this PublisherProfile.

        Up to three key metrics and rankings. For example, \"#1 Mobile News Site for 20 Straight Months\".

        :return: The top_headlines of this PublisherProfile.
        :rtype: List[str]
        """
        return self._top_headlines

    @top_headlines.setter
    def top_headlines(self, top_headlines):
        """Sets the top_headlines of this PublisherProfile.

        Up to three key metrics and rankings. For example, \"#1 Mobile News Site for 20 Straight Months\".

        :param top_headlines: The top_headlines of this PublisherProfile.
        :type top_headlines: List[str]
        """

        self._top_headlines = top_headlines
