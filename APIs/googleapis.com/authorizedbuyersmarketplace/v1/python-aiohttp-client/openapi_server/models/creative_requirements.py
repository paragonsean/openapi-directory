# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreativeRequirements(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creative_format: str=None, creative_pre_approval_policy: str=None, creative_safe_frame_compatibility: str=None, max_ad_duration_ms: str=None, programmatic_creative_source: str=None, skippable_ad_type: str=None):
        """CreativeRequirements - a model defined in OpenAPI

        :param creative_format: The creative_format of this CreativeRequirements.
        :param creative_pre_approval_policy: The creative_pre_approval_policy of this CreativeRequirements.
        :param creative_safe_frame_compatibility: The creative_safe_frame_compatibility of this CreativeRequirements.
        :param max_ad_duration_ms: The max_ad_duration_ms of this CreativeRequirements.
        :param programmatic_creative_source: The programmatic_creative_source of this CreativeRequirements.
        :param skippable_ad_type: The skippable_ad_type of this CreativeRequirements.
        """
        self.openapi_types = {
            'creative_format': str,
            'creative_pre_approval_policy': str,
            'creative_safe_frame_compatibility': str,
            'max_ad_duration_ms': str,
            'programmatic_creative_source': str,
            'skippable_ad_type': str
        }

        self.attribute_map = {
            'creative_format': 'creativeFormat',
            'creative_pre_approval_policy': 'creativePreApprovalPolicy',
            'creative_safe_frame_compatibility': 'creativeSafeFrameCompatibility',
            'max_ad_duration_ms': 'maxAdDurationMs',
            'programmatic_creative_source': 'programmaticCreativeSource',
            'skippable_ad_type': 'skippableAdType'
        }

        self._creative_format = creative_format
        self._creative_pre_approval_policy = creative_pre_approval_policy
        self._creative_safe_frame_compatibility = creative_safe_frame_compatibility
        self._max_ad_duration_ms = max_ad_duration_ms
        self._programmatic_creative_source = programmatic_creative_source
        self._skippable_ad_type = skippable_ad_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreativeRequirements':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreativeRequirements of this CreativeRequirements.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creative_format(self):
        """Gets the creative_format of this CreativeRequirements.

        Output only. The format of the creative, only applicable for programmatic guaranteed and preferred deals.

        :return: The creative_format of this CreativeRequirements.
        :rtype: str
        """
        return self._creative_format

    @creative_format.setter
    def creative_format(self, creative_format):
        """Sets the creative_format of this CreativeRequirements.

        Output only. The format of the creative, only applicable for programmatic guaranteed and preferred deals.

        :param creative_format: The creative_format of this CreativeRequirements.
        :type creative_format: str
        """
        allowed_values = ["CREATIVE_FORMAT_UNSPECIFIED", "DISPLAY", "VIDEO", "AUDIO"]  # noqa: E501
        if creative_format not in allowed_values:
            raise ValueError(
                "Invalid value for `creative_format` ({0}), must be one of {1}"
                .format(creative_format, allowed_values)
            )

        self._creative_format = creative_format

    @property
    def creative_pre_approval_policy(self):
        """Gets the creative_pre_approval_policy of this CreativeRequirements.

        Output only. Specifies the creative pre-approval policy.

        :return: The creative_pre_approval_policy of this CreativeRequirements.
        :rtype: str
        """
        return self._creative_pre_approval_policy

    @creative_pre_approval_policy.setter
    def creative_pre_approval_policy(self, creative_pre_approval_policy):
        """Sets the creative_pre_approval_policy of this CreativeRequirements.

        Output only. Specifies the creative pre-approval policy.

        :param creative_pre_approval_policy: The creative_pre_approval_policy of this CreativeRequirements.
        :type creative_pre_approval_policy: str
        """
        allowed_values = ["CREATIVE_PRE_APPROVAL_POLICY_UNSPECIFIED", "SELLER_PRE_APPROVAL_REQUIRED", "SELLER_PRE_APPROVAL_NOT_REQUIRED"]  # noqa: E501
        if creative_pre_approval_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `creative_pre_approval_policy` ({0}), must be one of {1}"
                .format(creative_pre_approval_policy, allowed_values)
            )

        self._creative_pre_approval_policy = creative_pre_approval_policy

    @property
    def creative_safe_frame_compatibility(self):
        """Gets the creative_safe_frame_compatibility of this CreativeRequirements.

        Output only. Specifies whether the creative is safeFrame compatible.

        :return: The creative_safe_frame_compatibility of this CreativeRequirements.
        :rtype: str
        """
        return self._creative_safe_frame_compatibility

    @creative_safe_frame_compatibility.setter
    def creative_safe_frame_compatibility(self, creative_safe_frame_compatibility):
        """Sets the creative_safe_frame_compatibility of this CreativeRequirements.

        Output only. Specifies whether the creative is safeFrame compatible.

        :param creative_safe_frame_compatibility: The creative_safe_frame_compatibility of this CreativeRequirements.
        :type creative_safe_frame_compatibility: str
        """
        allowed_values = ["CREATIVE_SAFE_FRAME_COMPATIBILITY_UNSPECIFIED", "COMPATIBLE", "INCOMPATIBLE"]  # noqa: E501
        if creative_safe_frame_compatibility not in allowed_values:
            raise ValueError(
                "Invalid value for `creative_safe_frame_compatibility` ({0}), must be one of {1}"
                .format(creative_safe_frame_compatibility, allowed_values)
            )

        self._creative_safe_frame_compatibility = creative_safe_frame_compatibility

    @property
    def max_ad_duration_ms(self):
        """Gets the max_ad_duration_ms of this CreativeRequirements.

        Output only. The max duration of the video creative in milliseconds. only applicable for deals with video creatives.

        :return: The max_ad_duration_ms of this CreativeRequirements.
        :rtype: str
        """
        return self._max_ad_duration_ms

    @max_ad_duration_ms.setter
    def max_ad_duration_ms(self, max_ad_duration_ms):
        """Sets the max_ad_duration_ms of this CreativeRequirements.

        Output only. The max duration of the video creative in milliseconds. only applicable for deals with video creatives.

        :param max_ad_duration_ms: The max_ad_duration_ms of this CreativeRequirements.
        :type max_ad_duration_ms: str
        """

        self._max_ad_duration_ms = max_ad_duration_ms

    @property
    def programmatic_creative_source(self):
        """Gets the programmatic_creative_source of this CreativeRequirements.

        Output only. Specifies the creative source for programmatic deals. PUBLISHER means creative is provided by seller and ADVERTISER means creative is provided by the buyer.

        :return: The programmatic_creative_source of this CreativeRequirements.
        :rtype: str
        """
        return self._programmatic_creative_source

    @programmatic_creative_source.setter
    def programmatic_creative_source(self, programmatic_creative_source):
        """Sets the programmatic_creative_source of this CreativeRequirements.

        Output only. Specifies the creative source for programmatic deals. PUBLISHER means creative is provided by seller and ADVERTISER means creative is provided by the buyer.

        :param programmatic_creative_source: The programmatic_creative_source of this CreativeRequirements.
        :type programmatic_creative_source: str
        """
        allowed_values = ["PROGRAMMATIC_CREATIVE_SOURCE_UNSPECIFIED", "ADVERTISER", "PUBLISHER"]  # noqa: E501
        if programmatic_creative_source not in allowed_values:
            raise ValueError(
                "Invalid value for `programmatic_creative_source` ({0}), must be one of {1}"
                .format(programmatic_creative_source, allowed_values)
            )

        self._programmatic_creative_source = programmatic_creative_source

    @property
    def skippable_ad_type(self):
        """Gets the skippable_ad_type of this CreativeRequirements.

        Output only. Skippable video ads allow viewers to skip ads after 5 seconds. Only applicable for deals with video creatives.

        :return: The skippable_ad_type of this CreativeRequirements.
        :rtype: str
        """
        return self._skippable_ad_type

    @skippable_ad_type.setter
    def skippable_ad_type(self, skippable_ad_type):
        """Sets the skippable_ad_type of this CreativeRequirements.

        Output only. Skippable video ads allow viewers to skip ads after 5 seconds. Only applicable for deals with video creatives.

        :param skippable_ad_type: The skippable_ad_type of this CreativeRequirements.
        :type skippable_ad_type: str
        """
        allowed_values = ["SKIPPABLE_AD_TYPE_UNSPECIFIED", "SKIPPABLE", "INSTREAM_SELECT", "NOT_SKIPPABLE", "ANY"]  # noqa: E501
        if skippable_ad_type not in allowed_values:
            raise ValueError(
                "Invalid value for `skippable_ad_type` ({0}), must be one of {1}"
                .format(skippable_ad_type, allowed_values)
            )

        self._skippable_ad_type = skippable_ad_type
