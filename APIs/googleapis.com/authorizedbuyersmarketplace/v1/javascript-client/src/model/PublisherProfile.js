/**
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PublisherProfileMobileApplication from './PublisherProfileMobileApplication';

/**
 * The PublisherProfile model module.
 * @module model/PublisherProfile
 * @version v1
 */
class PublisherProfile {
    /**
     * Constructs a new <code>PublisherProfile</code>.
     * The values in the publisher profile are supplied by the publisher. All fields are not filterable unless stated otherwise.
     * @alias module:model/PublisherProfile
     */
    constructor() { 
        
        PublisherProfile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PublisherProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublisherProfile} obj Optional instance to populate.
     * @return {module:model/PublisherProfile} The populated <code>PublisherProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublisherProfile();

            if (data.hasOwnProperty('audienceDescription')) {
                obj['audienceDescription'] = ApiClient.convertToType(data['audienceDescription'], 'String');
            }
            if (data.hasOwnProperty('directDealsContact')) {
                obj['directDealsContact'] = ApiClient.convertToType(data['directDealsContact'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('domains')) {
                obj['domains'] = ApiClient.convertToType(data['domains'], ['String']);
            }
            if (data.hasOwnProperty('isParent')) {
                obj['isParent'] = ApiClient.convertToType(data['isParent'], 'Boolean');
            }
            if (data.hasOwnProperty('logoUrl')) {
                obj['logoUrl'] = ApiClient.convertToType(data['logoUrl'], 'String');
            }
            if (data.hasOwnProperty('mediaKitUrl')) {
                obj['mediaKitUrl'] = ApiClient.convertToType(data['mediaKitUrl'], 'String');
            }
            if (data.hasOwnProperty('mobileApps')) {
                obj['mobileApps'] = ApiClient.convertToType(data['mobileApps'], [PublisherProfileMobileApplication]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('overview')) {
                obj['overview'] = ApiClient.convertToType(data['overview'], 'String');
            }
            if (data.hasOwnProperty('pitchStatement')) {
                obj['pitchStatement'] = ApiClient.convertToType(data['pitchStatement'], 'String');
            }
            if (data.hasOwnProperty('programmaticDealsContact')) {
                obj['programmaticDealsContact'] = ApiClient.convertToType(data['programmaticDealsContact'], 'String');
            }
            if (data.hasOwnProperty('publisherCode')) {
                obj['publisherCode'] = ApiClient.convertToType(data['publisherCode'], 'String');
            }
            if (data.hasOwnProperty('samplePageUrl')) {
                obj['samplePageUrl'] = ApiClient.convertToType(data['samplePageUrl'], 'String');
            }
            if (data.hasOwnProperty('topHeadlines')) {
                obj['topHeadlines'] = ApiClient.convertToType(data['topHeadlines'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublisherProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublisherProfile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['audienceDescription'] && !(typeof data['audienceDescription'] === 'string' || data['audienceDescription'] instanceof String)) {
            throw new Error("Expected the field `audienceDescription` to be a primitive type in the JSON string but got " + data['audienceDescription']);
        }
        // ensure the json data is a string
        if (data['directDealsContact'] && !(typeof data['directDealsContact'] === 'string' || data['directDealsContact'] instanceof String)) {
            throw new Error("Expected the field `directDealsContact` to be a primitive type in the JSON string but got " + data['directDealsContact']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['domains'])) {
            throw new Error("Expected the field `domains` to be an array in the JSON data but got " + data['domains']);
        }
        // ensure the json data is a string
        if (data['logoUrl'] && !(typeof data['logoUrl'] === 'string' || data['logoUrl'] instanceof String)) {
            throw new Error("Expected the field `logoUrl` to be a primitive type in the JSON string but got " + data['logoUrl']);
        }
        // ensure the json data is a string
        if (data['mediaKitUrl'] && !(typeof data['mediaKitUrl'] === 'string' || data['mediaKitUrl'] instanceof String)) {
            throw new Error("Expected the field `mediaKitUrl` to be a primitive type in the JSON string but got " + data['mediaKitUrl']);
        }
        if (data['mobileApps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mobileApps'])) {
                throw new Error("Expected the field `mobileApps` to be an array in the JSON data but got " + data['mobileApps']);
            }
            // validate the optional field `mobileApps` (array)
            for (const item of data['mobileApps']) {
                PublisherProfileMobileApplication.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['overview'] && !(typeof data['overview'] === 'string' || data['overview'] instanceof String)) {
            throw new Error("Expected the field `overview` to be a primitive type in the JSON string but got " + data['overview']);
        }
        // ensure the json data is a string
        if (data['pitchStatement'] && !(typeof data['pitchStatement'] === 'string' || data['pitchStatement'] instanceof String)) {
            throw new Error("Expected the field `pitchStatement` to be a primitive type in the JSON string but got " + data['pitchStatement']);
        }
        // ensure the json data is a string
        if (data['programmaticDealsContact'] && !(typeof data['programmaticDealsContact'] === 'string' || data['programmaticDealsContact'] instanceof String)) {
            throw new Error("Expected the field `programmaticDealsContact` to be a primitive type in the JSON string but got " + data['programmaticDealsContact']);
        }
        // ensure the json data is a string
        if (data['publisherCode'] && !(typeof data['publisherCode'] === 'string' || data['publisherCode'] instanceof String)) {
            throw new Error("Expected the field `publisherCode` to be a primitive type in the JSON string but got " + data['publisherCode']);
        }
        // ensure the json data is a string
        if (data['samplePageUrl'] && !(typeof data['samplePageUrl'] === 'string' || data['samplePageUrl'] instanceof String)) {
            throw new Error("Expected the field `samplePageUrl` to be a primitive type in the JSON string but got " + data['samplePageUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['topHeadlines'])) {
            throw new Error("Expected the field `topHeadlines` to be an array in the JSON data but got " + data['topHeadlines']);
        }

        return true;
    }


}



/**
 * Description on the publisher's audience.
 * @member {String} audienceDescription
 */
PublisherProfile.prototype['audienceDescription'] = undefined;

/**
 * Contact information for direct reservation deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.
 * @member {String} directDealsContact
 */
PublisherProfile.prototype['directDealsContact'] = undefined;

/**
 * Display name of the publisher profile. Can be used to filter the response of the publisherProfiles.list method.
 * @member {String} displayName
 */
PublisherProfile.prototype['displayName'] = undefined;

/**
 * The list of domains represented in this publisher profile. Empty if this is a parent profile. These are top private domains, meaning that these will not contain a string like \"photos.google.co.uk/123\", but will instead contain \"google.co.uk\". Can be used to filter the response of the publisherProfiles.list method.
 * @member {Array.<String>} domains
 */
PublisherProfile.prototype['domains'] = undefined;

/**
 * Indicates if this profile is the parent profile of the seller. A parent profile represents all the inventory from the seller, as opposed to child profile that is created to brand a portion of inventory. One seller has only one parent publisher profile, and can have multiple child profiles. See https://support.google.com/admanager/answer/6035806 for details. Can be used to filter the response of the publisherProfiles.list method by setting the filter to \"is_parent: true\".
 * @member {Boolean} isParent
 */
PublisherProfile.prototype['isParent'] = undefined;

/**
 * A Google public URL to the logo for this publisher profile. The logo is stored as a PNG, JPG, or GIF image.
 * @member {String} logoUrl
 */
PublisherProfile.prototype['logoUrl'] = undefined;

/**
 * URL to additional marketing and sales materials.
 * @member {String} mediaKitUrl
 */
PublisherProfile.prototype['mediaKitUrl'] = undefined;

/**
 * The list of apps represented in this publisher profile. Empty if this is a parent profile.
 * @member {Array.<module:model/PublisherProfileMobileApplication>} mobileApps
 */
PublisherProfile.prototype['mobileApps'] = undefined;

/**
 * Name of the publisher profile. Format: `buyers/{buyer}/publisherProfiles/{publisher_profile}`
 * @member {String} name
 */
PublisherProfile.prototype['name'] = undefined;

/**
 * Overview of the publisher.
 * @member {String} overview
 */
PublisherProfile.prototype['overview'] = undefined;

/**
 * Statement explaining what's unique about publisher's business, and why buyers should partner with the publisher.
 * @member {String} pitchStatement
 */
PublisherProfile.prototype['pitchStatement'] = undefined;

/**
 * Contact information for programmatic deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.
 * @member {String} programmaticDealsContact
 */
PublisherProfile.prototype['programmaticDealsContact'] = undefined;

/**
 * A unique identifying code for the seller. This value is the same for all of the seller's parent and child publisher profiles. Can be used to filter the response of the publisherProfiles.list method.
 * @member {String} publisherCode
 */
PublisherProfile.prototype['publisherCode'] = undefined;

/**
 * URL to a sample content page.
 * @member {String} samplePageUrl
 */
PublisherProfile.prototype['samplePageUrl'] = undefined;

/**
 * Up to three key metrics and rankings. For example, \"#1 Mobile News Site for 20 Straight Months\".
 * @member {Array.<String>} topHeadlines
 */
PublisherProfile.prototype['topHeadlines'] = undefined;






export default PublisherProfile;

