/**
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Contact from './Contact';
import Note from './Note';
import PrivateData from './PrivateData';

/**
 * The Proposal model module.
 * @module model/Proposal
 * @version v1
 */
class Proposal {
    /**
     * Constructs a new <code>Proposal</code>.
     * Represents a proposal in the Marketplace. A proposal is the unit of negotiation between a seller and a buyer.
     * @alias module:model/Proposal
     */
    constructor() { 
        
        Proposal.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Proposal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Proposal} obj Optional instance to populate.
     * @return {module:model/Proposal} The populated <code>Proposal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Proposal();

            if (data.hasOwnProperty('billedBuyer')) {
                obj['billedBuyer'] = ApiClient.convertToType(data['billedBuyer'], 'String');
            }
            if (data.hasOwnProperty('buyer')) {
                obj['buyer'] = ApiClient.convertToType(data['buyer'], 'String');
            }
            if (data.hasOwnProperty('buyerContacts')) {
                obj['buyerContacts'] = ApiClient.convertToType(data['buyerContacts'], [Contact]);
            }
            if (data.hasOwnProperty('buyerPrivateData')) {
                obj['buyerPrivateData'] = PrivateData.constructFromObject(data['buyerPrivateData']);
            }
            if (data.hasOwnProperty('client')) {
                obj['client'] = ApiClient.convertToType(data['client'], 'String');
            }
            if (data.hasOwnProperty('dealType')) {
                obj['dealType'] = ApiClient.convertToType(data['dealType'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('isRenegotiating')) {
                obj['isRenegotiating'] = ApiClient.convertToType(data['isRenegotiating'], 'Boolean');
            }
            if (data.hasOwnProperty('lastUpdaterOrCommentorRole')) {
                obj['lastUpdaterOrCommentorRole'] = ApiClient.convertToType(data['lastUpdaterOrCommentorRole'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], [Note]);
            }
            if (data.hasOwnProperty('originatorRole')) {
                obj['originatorRole'] = ApiClient.convertToType(data['originatorRole'], 'String');
            }
            if (data.hasOwnProperty('pausingConsented')) {
                obj['pausingConsented'] = ApiClient.convertToType(data['pausingConsented'], 'Boolean');
            }
            if (data.hasOwnProperty('proposalRevision')) {
                obj['proposalRevision'] = ApiClient.convertToType(data['proposalRevision'], 'String');
            }
            if (data.hasOwnProperty('publisherProfile')) {
                obj['publisherProfile'] = ApiClient.convertToType(data['publisherProfile'], 'String');
            }
            if (data.hasOwnProperty('sellerContacts')) {
                obj['sellerContacts'] = ApiClient.convertToType(data['sellerContacts'], [Contact]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('termsAndConditions')) {
                obj['termsAndConditions'] = ApiClient.convertToType(data['termsAndConditions'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Proposal</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Proposal</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['billedBuyer'] && !(typeof data['billedBuyer'] === 'string' || data['billedBuyer'] instanceof String)) {
            throw new Error("Expected the field `billedBuyer` to be a primitive type in the JSON string but got " + data['billedBuyer']);
        }
        // ensure the json data is a string
        if (data['buyer'] && !(typeof data['buyer'] === 'string' || data['buyer'] instanceof String)) {
            throw new Error("Expected the field `buyer` to be a primitive type in the JSON string but got " + data['buyer']);
        }
        if (data['buyerContacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['buyerContacts'])) {
                throw new Error("Expected the field `buyerContacts` to be an array in the JSON data but got " + data['buyerContacts']);
            }
            // validate the optional field `buyerContacts` (array)
            for (const item of data['buyerContacts']) {
                Contact.validateJSON(item);
            };
        }
        // validate the optional field `buyerPrivateData`
        if (data['buyerPrivateData']) { // data not null
          PrivateData.validateJSON(data['buyerPrivateData']);
        }
        // ensure the json data is a string
        if (data['client'] && !(typeof data['client'] === 'string' || data['client'] instanceof String)) {
            throw new Error("Expected the field `client` to be a primitive type in the JSON string but got " + data['client']);
        }
        // ensure the json data is a string
        if (data['dealType'] && !(typeof data['dealType'] === 'string' || data['dealType'] instanceof String)) {
            throw new Error("Expected the field `dealType` to be a primitive type in the JSON string but got " + data['dealType']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['lastUpdaterOrCommentorRole'] && !(typeof data['lastUpdaterOrCommentorRole'] === 'string' || data['lastUpdaterOrCommentorRole'] instanceof String)) {
            throw new Error("Expected the field `lastUpdaterOrCommentorRole` to be a primitive type in the JSON string but got " + data['lastUpdaterOrCommentorRole']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['notes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['notes'])) {
                throw new Error("Expected the field `notes` to be an array in the JSON data but got " + data['notes']);
            }
            // validate the optional field `notes` (array)
            for (const item of data['notes']) {
                Note.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['originatorRole'] && !(typeof data['originatorRole'] === 'string' || data['originatorRole'] instanceof String)) {
            throw new Error("Expected the field `originatorRole` to be a primitive type in the JSON string but got " + data['originatorRole']);
        }
        // ensure the json data is a string
        if (data['proposalRevision'] && !(typeof data['proposalRevision'] === 'string' || data['proposalRevision'] instanceof String)) {
            throw new Error("Expected the field `proposalRevision` to be a primitive type in the JSON string but got " + data['proposalRevision']);
        }
        // ensure the json data is a string
        if (data['publisherProfile'] && !(typeof data['publisherProfile'] === 'string' || data['publisherProfile'] instanceof String)) {
            throw new Error("Expected the field `publisherProfile` to be a primitive type in the JSON string but got " + data['publisherProfile']);
        }
        if (data['sellerContacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sellerContacts'])) {
                throw new Error("Expected the field `sellerContacts` to be an array in the JSON data but got " + data['sellerContacts']);
            }
            // validate the optional field `sellerContacts` (array)
            for (const item of data['sellerContacts']) {
                Contact.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['termsAndConditions'] && !(typeof data['termsAndConditions'] === 'string' || data['termsAndConditions'] instanceof String)) {
            throw new Error("Expected the field `termsAndConditions` to be a primitive type in the JSON string but got " + data['termsAndConditions']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. When the client field is populated, this field refers to the buyer who creates and manages the client buyer and gets billed on behalf of the client buyer; when the buyer field is populated, this field is the same value as buyer. Format : `buyers/{buyerAccountId}`
 * @member {String} billedBuyer
 */
Proposal.prototype['billedBuyer'] = undefined;

/**
 * Output only. Refers to a buyer in The Realtime-bidding API. Format: `buyers/{buyerAccountId}`
 * @member {String} buyer
 */
Proposal.prototype['buyer'] = undefined;

/**
 * Contact information for the buyer.
 * @member {Array.<module:model/Contact>} buyerContacts
 */
Proposal.prototype['buyerContacts'] = undefined;

/**
 * @member {module:model/PrivateData} buyerPrivateData
 */
Proposal.prototype['buyerPrivateData'] = undefined;

/**
 * Output only. Refers to a Client. Format: `buyers/{buyerAccountId}/clients/{clientAccountid}`
 * @member {String} client
 */
Proposal.prototype['client'] = undefined;

/**
 * Output only. Type of deal the proposal contains.
 * @member {module:model/Proposal.DealTypeEnum} dealType
 */
Proposal.prototype['dealType'] = undefined;

/**
 * Output only. The descriptive name for the proposal. Maximum length of 255 unicode characters is allowed. Control characters are not allowed. Buyers cannot update this field. Note: Not to be confused with name, which is a unique identifier of the proposal.
 * @member {String} displayName
 */
Proposal.prototype['displayName'] = undefined;

/**
 * Output only. True if the proposal was previously finalized and is now being renegotiated.
 * @member {Boolean} isRenegotiating
 */
Proposal.prototype['isRenegotiating'] = undefined;

/**
 * Output only. The role of the last user that either updated the proposal or left a comment.
 * @member {module:model/Proposal.LastUpdaterOrCommentorRoleEnum} lastUpdaterOrCommentorRole
 */
Proposal.prototype['lastUpdaterOrCommentorRole'] = undefined;

/**
 * Immutable. The name of the proposal serving as a unique identifier. Format: buyers/{accountId}/proposals/{proposalId}
 * @member {String} name
 */
Proposal.prototype['name'] = undefined;

/**
 * A list of notes from the buyer and the seller attached to this proposal.
 * @member {Array.<module:model/Note>} notes
 */
Proposal.prototype['notes'] = undefined;

/**
 * Output only. Indicates whether the buyer/seller created the proposal.
 * @member {module:model/Proposal.OriginatorRoleEnum} originatorRole
 */
Proposal.prototype['originatorRole'] = undefined;

/**
 * Whether pausing is allowed for the proposal. This is a negotiable term between buyers and publishers.
 * @member {Boolean} pausingConsented
 */
Proposal.prototype['pausingConsented'] = undefined;

/**
 * Output only. The revision number for the proposal. Each update to the proposal or deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.
 * @member {String} proposalRevision
 */
Proposal.prototype['proposalRevision'] = undefined;

/**
 * Immutable. Reference to the seller on the proposal. Format: `buyers/{buyerAccountId}/publisherProfiles/{publisherProfileId}` Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.
 * @member {String} publisherProfile
 */
Proposal.prototype['publisherProfile'] = undefined;

/**
 * Output only. Contact information for the seller.
 * @member {Array.<module:model/Contact>} sellerContacts
 */
Proposal.prototype['sellerContacts'] = undefined;

/**
 * Output only. Indicates the state of the proposal.
 * @member {module:model/Proposal.StateEnum} state
 */
Proposal.prototype['state'] = undefined;

/**
 * Output only. The terms and conditions associated with this proposal. Accepting a proposal implies acceptance of this field. This is created by the seller, the buyer can only view it.
 * @member {String} termsAndConditions
 */
Proposal.prototype['termsAndConditions'] = undefined;

/**
 * Output only. The time when the proposal was last revised.
 * @member {String} updateTime
 */
Proposal.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>dealType</code> property.
 * @enum {String}
 * @readonly
 */
Proposal['DealTypeEnum'] = {

    /**
     * value: "DEAL_TYPE_UNSPECIFIED"
     * @const
     */
    "DEAL_TYPE_UNSPECIFIED": "DEAL_TYPE_UNSPECIFIED",

    /**
     * value: "PREFERRED_DEAL"
     * @const
     */
    "PREFERRED_DEAL": "PREFERRED_DEAL",

    /**
     * value: "PRIVATE_AUCTION"
     * @const
     */
    "PRIVATE_AUCTION": "PRIVATE_AUCTION",

    /**
     * value: "PROGRAMMATIC_GUARANTEED"
     * @const
     */
    "PROGRAMMATIC_GUARANTEED": "PROGRAMMATIC_GUARANTEED"
};


/**
 * Allowed values for the <code>lastUpdaterOrCommentorRole</code> property.
 * @enum {String}
 * @readonly
 */
Proposal['LastUpdaterOrCommentorRoleEnum'] = {

    /**
     * value: "BUYER_SELLER_ROLE_UNSPECIFIED"
     * @const
     */
    "BUYER_SELLER_ROLE_UNSPECIFIED": "BUYER_SELLER_ROLE_UNSPECIFIED",

    /**
     * value: "BUYER"
     * @const
     */
    "BUYER": "BUYER",

    /**
     * value: "SELLER"
     * @const
     */
    "SELLER": "SELLER"
};


/**
 * Allowed values for the <code>originatorRole</code> property.
 * @enum {String}
 * @readonly
 */
Proposal['OriginatorRoleEnum'] = {

    /**
     * value: "BUYER_SELLER_ROLE_UNSPECIFIED"
     * @const
     */
    "BUYER_SELLER_ROLE_UNSPECIFIED": "BUYER_SELLER_ROLE_UNSPECIFIED",

    /**
     * value: "BUYER"
     * @const
     */
    "BUYER": "BUYER",

    /**
     * value: "SELLER"
     * @const
     */
    "SELLER": "SELLER"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Proposal['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "BUYER_REVIEW_REQUESTED"
     * @const
     */
    "BUYER_REVIEW_REQUESTED": "BUYER_REVIEW_REQUESTED",

    /**
     * value: "SELLER_REVIEW_REQUESTED"
     * @const
     */
    "SELLER_REVIEW_REQUESTED": "SELLER_REVIEW_REQUESTED",

    /**
     * value: "BUYER_ACCEPTANCE_REQUESTED"
     * @const
     */
    "BUYER_ACCEPTANCE_REQUESTED": "BUYER_ACCEPTANCE_REQUESTED",

    /**
     * value: "FINALIZED"
     * @const
     */
    "FINALIZED": "FINALIZED",

    /**
     * value: "TERMINATED"
     * @const
     */
    "TERMINATED": "TERMINATED"
};



export default Proposal;

