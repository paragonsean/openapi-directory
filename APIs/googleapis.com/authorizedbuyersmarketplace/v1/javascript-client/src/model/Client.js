/**
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Client model module.
 * @module model/Client
 * @version v1
 */
class Client {
    /**
     * Constructs a new <code>Client</code>.
     * A client represents an agency, a brand, or an advertiser customer of the buyer. Based on the client&#39;s role, its client users will have varying levels of restricted access to the Marketplace and certain other sections of the Authorized Buyers UI.
     * @alias module:model/Client
     */
    constructor() { 
        
        Client.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Client</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Client} obj Optional instance to populate.
     * @return {module:model/Client} The populated <code>Client</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Client();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('partnerClientId')) {
                obj['partnerClientId'] = ApiClient.convertToType(data['partnerClientId'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('sellerVisible')) {
                obj['sellerVisible'] = ApiClient.convertToType(data['sellerVisible'], 'Boolean');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Client</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Client</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['partnerClientId'] && !(typeof data['partnerClientId'] === 'string' || data['partnerClientId'] instanceof String)) {
            throw new Error("Expected the field `partnerClientId` to be a primitive type in the JSON string but got " + data['partnerClientId']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Required. Display name shown to publishers. Must be unique for clients without partnerClientId specified. Maximum length of 255 characters is allowed.
 * @member {String} displayName
 */
Client.prototype['displayName'] = undefined;

/**
 * Output only. The resource name of the client. Format: `buyers/{accountId}/clients/{clientAccountId}`
 * @member {String} name
 */
Client.prototype['name'] = undefined;

/**
 * Arbitrary unique identifier provided by the buyer. This field can be used to associate a client with an identifier in the namespace of the buyer, lookup clients by that identifier and verify whether an Authorized Buyers account of the client already exists. If present, must be unique across all the clients.
 * @member {String} partnerClientId
 */
Client.prototype['partnerClientId'] = undefined;

/**
 * Required. The role assigned to the client. Each role implies a set of permissions granted to the client.
 * @member {module:model/Client.RoleEnum} role
 */
Client.prototype['role'] = undefined;

/**
 * Whether the client will be visible to sellers.
 * @member {Boolean} sellerVisible
 */
Client.prototype['sellerVisible'] = undefined;

/**
 * Output only. The state of the client.
 * @member {module:model/Client.StateEnum} state
 */
Client.prototype['state'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
Client['RoleEnum'] = {

    /**
     * value: "CLIENT_ROLE_UNSPECIFIED"
     * @const
     */
    "ROLE_UNSPECIFIED": "CLIENT_ROLE_UNSPECIFIED",

    /**
     * value: "CLIENT_DEAL_VIEWER"
     * @const
     */
    "DEAL_VIEWER": "CLIENT_DEAL_VIEWER",

    /**
     * value: "CLIENT_DEAL_NEGOTIATOR"
     * @const
     */
    "DEAL_NEGOTIATOR": "CLIENT_DEAL_NEGOTIATOR",

    /**
     * value: "CLIENT_DEAL_APPROVER"
     * @const
     */
    "DEAL_APPROVER": "CLIENT_DEAL_APPROVER"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Client['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "INACTIVE"
     * @const
     */
    "INACTIVE": "INACTIVE"
};



export default Client;

