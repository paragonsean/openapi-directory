/**
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AuctionPackage model module.
 * @module model/AuctionPackage
 * @version v1
 */
class AuctionPackage {
    /**
     * Constructs a new <code>AuctionPackage</code>.
     * Defines a segment of inventory that buyer wants to buy. It&#39;s created by buyer and could be shared with multiple buyers.
     * @alias module:model/AuctionPackage
     */
    constructor() { 
        
        AuctionPackage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuctionPackage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuctionPackage} obj Optional instance to populate.
     * @return {module:model/AuctionPackage} The populated <code>AuctionPackage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuctionPackage();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('creator')) {
                obj['creator'] = ApiClient.convertToType(data['creator'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('subscribedClients')) {
                obj['subscribedClients'] = ApiClient.convertToType(data['subscribedClients'], ['String']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuctionPackage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuctionPackage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['creator'] && !(typeof data['creator'] === 'string' || data['creator'] instanceof String)) {
            throw new Error("Expected the field `creator` to be a primitive type in the JSON string but got " + data['creator']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['subscribedClients'])) {
            throw new Error("Expected the field `subscribedClients` to be an array in the JSON data but got " + data['subscribedClients']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. Time the auction package was created.
 * @member {String} createTime
 */
AuctionPackage.prototype['createTime'] = undefined;

/**
 * Output only. The buyer that created this auction package. Format: `buyers/{buyerAccountId}`
 * @member {String} creator
 */
AuctionPackage.prototype['creator'] = undefined;

/**
 * Output only. A description of the auction package.
 * @member {String} description
 */
AuctionPackage.prototype['description'] = undefined;

/**
 * The display_name assigned to the auction package.
 * @member {String} displayName
 */
AuctionPackage.prototype['displayName'] = undefined;

/**
 * Immutable. The unique identifier for the auction package. Format: `buyers/{accountId}/auctionPackages/{auctionPackageId}` The auction_package_id part of name is sent in the BidRequest to all RTB bidders and is returned as deal_id by the bidder in the BidResponse.
 * @member {String} name
 */
AuctionPackage.prototype['name'] = undefined;

/**
 * Output only. The list of clients of the current buyer that are subscribed to the AuctionPackage. Format: `buyers/{buyerAccountId}/clients/{clientAccountId}`
 * @member {Array.<String>} subscribedClients
 */
AuctionPackage.prototype['subscribedClients'] = undefined;

/**
 * Output only. Time the auction package was last updated. This value is only increased when this auction package is updated but never when a buyer subscribed.
 * @member {String} updateTime
 */
AuctionPackage.prototype['updateTime'] = undefined;






export default AuctionPackage;

