/**
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlacementTargeting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlacementTargeting::OAIPlacementTargeting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlacementTargeting::OAIPlacementTargeting() {
    this->initializeModel();
}

OAIPlacementTargeting::~OAIPlacementTargeting() {}

void OAIPlacementTargeting::initializeModel() {

    m_mobile_application_targeting_isSet = false;
    m_mobile_application_targeting_isValid = false;

    m_uri_targeting_isSet = false;
    m_uri_targeting_isValid = false;
}

void OAIPlacementTargeting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlacementTargeting::fromJsonObject(QJsonObject json) {

    m_mobile_application_targeting_isValid = ::OpenAPI::fromJsonValue(m_mobile_application_targeting, json[QString("mobileApplicationTargeting")]);
    m_mobile_application_targeting_isSet = !json[QString("mobileApplicationTargeting")].isNull() && m_mobile_application_targeting_isValid;

    m_uri_targeting_isValid = ::OpenAPI::fromJsonValue(m_uri_targeting, json[QString("uriTargeting")]);
    m_uri_targeting_isSet = !json[QString("uriTargeting")].isNull() && m_uri_targeting_isValid;
}

QString OAIPlacementTargeting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlacementTargeting::asJsonObject() const {
    QJsonObject obj;
    if (m_mobile_application_targeting.isSet()) {
        obj.insert(QString("mobileApplicationTargeting"), ::OpenAPI::toJsonValue(m_mobile_application_targeting));
    }
    if (m_uri_targeting.isSet()) {
        obj.insert(QString("uriTargeting"), ::OpenAPI::toJsonValue(m_uri_targeting));
    }
    return obj;
}

OAIMobileApplicationTargeting OAIPlacementTargeting::getMobileApplicationTargeting() const {
    return m_mobile_application_targeting;
}
void OAIPlacementTargeting::setMobileApplicationTargeting(const OAIMobileApplicationTargeting &mobile_application_targeting) {
    m_mobile_application_targeting = mobile_application_targeting;
    m_mobile_application_targeting_isSet = true;
}

bool OAIPlacementTargeting::is_mobile_application_targeting_Set() const{
    return m_mobile_application_targeting_isSet;
}

bool OAIPlacementTargeting::is_mobile_application_targeting_Valid() const{
    return m_mobile_application_targeting_isValid;
}

OAIUriTargeting OAIPlacementTargeting::getUriTargeting() const {
    return m_uri_targeting;
}
void OAIPlacementTargeting::setUriTargeting(const OAIUriTargeting &uri_targeting) {
    m_uri_targeting = uri_targeting;
    m_uri_targeting_isSet = true;
}

bool OAIPlacementTargeting::is_uri_targeting_Set() const{
    return m_uri_targeting_isSet;
}

bool OAIPlacementTargeting::is_uri_targeting_Valid() const{
    return m_uri_targeting_isValid;
}

bool OAIPlacementTargeting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mobile_application_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlacementTargeting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
