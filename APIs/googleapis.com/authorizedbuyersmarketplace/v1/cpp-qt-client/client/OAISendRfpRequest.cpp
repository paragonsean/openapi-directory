/**
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendRfpRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendRfpRequest::OAISendRfpRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendRfpRequest::OAISendRfpRequest() {
    this->initializeModel();
}

OAISendRfpRequest::~OAISendRfpRequest() {}

void OAISendRfpRequest::initializeModel() {

    m_buyer_contacts_isSet = false;
    m_buyer_contacts_isValid = false;

    m_client_isSet = false;
    m_client_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_estimated_gross_spend_isSet = false;
    m_estimated_gross_spend_isValid = false;

    m_flight_end_time_isSet = false;
    m_flight_end_time_isValid = false;

    m_flight_start_time_isSet = false;
    m_flight_start_time_isValid = false;

    m_geo_targeting_isSet = false;
    m_geo_targeting_isValid = false;

    m_inventory_size_targeting_isSet = false;
    m_inventory_size_targeting_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_preferred_deal_terms_isSet = false;
    m_preferred_deal_terms_isValid = false;

    m_programmatic_guaranteed_terms_isSet = false;
    m_programmatic_guaranteed_terms_isValid = false;

    m_publisher_profile_isSet = false;
    m_publisher_profile_isValid = false;
}

void OAISendRfpRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendRfpRequest::fromJsonObject(QJsonObject json) {

    m_buyer_contacts_isValid = ::OpenAPI::fromJsonValue(m_buyer_contacts, json[QString("buyerContacts")]);
    m_buyer_contacts_isSet = !json[QString("buyerContacts")].isNull() && m_buyer_contacts_isValid;

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_estimated_gross_spend_isValid = ::OpenAPI::fromJsonValue(m_estimated_gross_spend, json[QString("estimatedGrossSpend")]);
    m_estimated_gross_spend_isSet = !json[QString("estimatedGrossSpend")].isNull() && m_estimated_gross_spend_isValid;

    m_flight_end_time_isValid = ::OpenAPI::fromJsonValue(m_flight_end_time, json[QString("flightEndTime")]);
    m_flight_end_time_isSet = !json[QString("flightEndTime")].isNull() && m_flight_end_time_isValid;

    m_flight_start_time_isValid = ::OpenAPI::fromJsonValue(m_flight_start_time, json[QString("flightStartTime")]);
    m_flight_start_time_isSet = !json[QString("flightStartTime")].isNull() && m_flight_start_time_isValid;

    m_geo_targeting_isValid = ::OpenAPI::fromJsonValue(m_geo_targeting, json[QString("geoTargeting")]);
    m_geo_targeting_isSet = !json[QString("geoTargeting")].isNull() && m_geo_targeting_isValid;

    m_inventory_size_targeting_isValid = ::OpenAPI::fromJsonValue(m_inventory_size_targeting, json[QString("inventorySizeTargeting")]);
    m_inventory_size_targeting_isSet = !json[QString("inventorySizeTargeting")].isNull() && m_inventory_size_targeting_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_preferred_deal_terms_isValid = ::OpenAPI::fromJsonValue(m_preferred_deal_terms, json[QString("preferredDealTerms")]);
    m_preferred_deal_terms_isSet = !json[QString("preferredDealTerms")].isNull() && m_preferred_deal_terms_isValid;

    m_programmatic_guaranteed_terms_isValid = ::OpenAPI::fromJsonValue(m_programmatic_guaranteed_terms, json[QString("programmaticGuaranteedTerms")]);
    m_programmatic_guaranteed_terms_isSet = !json[QString("programmaticGuaranteedTerms")].isNull() && m_programmatic_guaranteed_terms_isValid;

    m_publisher_profile_isValid = ::OpenAPI::fromJsonValue(m_publisher_profile, json[QString("publisherProfile")]);
    m_publisher_profile_isSet = !json[QString("publisherProfile")].isNull() && m_publisher_profile_isValid;
}

QString OAISendRfpRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendRfpRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_buyer_contacts.size() > 0) {
        obj.insert(QString("buyerContacts"), ::OpenAPI::toJsonValue(m_buyer_contacts));
    }
    if (m_client_isSet) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_estimated_gross_spend.isSet()) {
        obj.insert(QString("estimatedGrossSpend"), ::OpenAPI::toJsonValue(m_estimated_gross_spend));
    }
    if (m_flight_end_time_isSet) {
        obj.insert(QString("flightEndTime"), ::OpenAPI::toJsonValue(m_flight_end_time));
    }
    if (m_flight_start_time_isSet) {
        obj.insert(QString("flightStartTime"), ::OpenAPI::toJsonValue(m_flight_start_time));
    }
    if (m_geo_targeting.isSet()) {
        obj.insert(QString("geoTargeting"), ::OpenAPI::toJsonValue(m_geo_targeting));
    }
    if (m_inventory_size_targeting.isSet()) {
        obj.insert(QString("inventorySizeTargeting"), ::OpenAPI::toJsonValue(m_inventory_size_targeting));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_preferred_deal_terms.isSet()) {
        obj.insert(QString("preferredDealTerms"), ::OpenAPI::toJsonValue(m_preferred_deal_terms));
    }
    if (m_programmatic_guaranteed_terms.isSet()) {
        obj.insert(QString("programmaticGuaranteedTerms"), ::OpenAPI::toJsonValue(m_programmatic_guaranteed_terms));
    }
    if (m_publisher_profile_isSet) {
        obj.insert(QString("publisherProfile"), ::OpenAPI::toJsonValue(m_publisher_profile));
    }
    return obj;
}

QList<OAIContact> OAISendRfpRequest::getBuyerContacts() const {
    return m_buyer_contacts;
}
void OAISendRfpRequest::setBuyerContacts(const QList<OAIContact> &buyer_contacts) {
    m_buyer_contacts = buyer_contacts;
    m_buyer_contacts_isSet = true;
}

bool OAISendRfpRequest::is_buyer_contacts_Set() const{
    return m_buyer_contacts_isSet;
}

bool OAISendRfpRequest::is_buyer_contacts_Valid() const{
    return m_buyer_contacts_isValid;
}

QString OAISendRfpRequest::getClient() const {
    return m_client;
}
void OAISendRfpRequest::setClient(const QString &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAISendRfpRequest::is_client_Set() const{
    return m_client_isSet;
}

bool OAISendRfpRequest::is_client_Valid() const{
    return m_client_isValid;
}

QString OAISendRfpRequest::getDisplayName() const {
    return m_display_name;
}
void OAISendRfpRequest::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISendRfpRequest::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISendRfpRequest::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIMoney OAISendRfpRequest::getEstimatedGrossSpend() const {
    return m_estimated_gross_spend;
}
void OAISendRfpRequest::setEstimatedGrossSpend(const OAIMoney &estimated_gross_spend) {
    m_estimated_gross_spend = estimated_gross_spend;
    m_estimated_gross_spend_isSet = true;
}

bool OAISendRfpRequest::is_estimated_gross_spend_Set() const{
    return m_estimated_gross_spend_isSet;
}

bool OAISendRfpRequest::is_estimated_gross_spend_Valid() const{
    return m_estimated_gross_spend_isValid;
}

QString OAISendRfpRequest::getFlightEndTime() const {
    return m_flight_end_time;
}
void OAISendRfpRequest::setFlightEndTime(const QString &flight_end_time) {
    m_flight_end_time = flight_end_time;
    m_flight_end_time_isSet = true;
}

bool OAISendRfpRequest::is_flight_end_time_Set() const{
    return m_flight_end_time_isSet;
}

bool OAISendRfpRequest::is_flight_end_time_Valid() const{
    return m_flight_end_time_isValid;
}

QString OAISendRfpRequest::getFlightStartTime() const {
    return m_flight_start_time;
}
void OAISendRfpRequest::setFlightStartTime(const QString &flight_start_time) {
    m_flight_start_time = flight_start_time;
    m_flight_start_time_isSet = true;
}

bool OAISendRfpRequest::is_flight_start_time_Set() const{
    return m_flight_start_time_isSet;
}

bool OAISendRfpRequest::is_flight_start_time_Valid() const{
    return m_flight_start_time_isValid;
}

OAICriteriaTargeting OAISendRfpRequest::getGeoTargeting() const {
    return m_geo_targeting;
}
void OAISendRfpRequest::setGeoTargeting(const OAICriteriaTargeting &geo_targeting) {
    m_geo_targeting = geo_targeting;
    m_geo_targeting_isSet = true;
}

bool OAISendRfpRequest::is_geo_targeting_Set() const{
    return m_geo_targeting_isSet;
}

bool OAISendRfpRequest::is_geo_targeting_Valid() const{
    return m_geo_targeting_isValid;
}

OAIInventorySizeTargeting OAISendRfpRequest::getInventorySizeTargeting() const {
    return m_inventory_size_targeting;
}
void OAISendRfpRequest::setInventorySizeTargeting(const OAIInventorySizeTargeting &inventory_size_targeting) {
    m_inventory_size_targeting = inventory_size_targeting;
    m_inventory_size_targeting_isSet = true;
}

bool OAISendRfpRequest::is_inventory_size_targeting_Set() const{
    return m_inventory_size_targeting_isSet;
}

bool OAISendRfpRequest::is_inventory_size_targeting_Valid() const{
    return m_inventory_size_targeting_isValid;
}

QString OAISendRfpRequest::getNote() const {
    return m_note;
}
void OAISendRfpRequest::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAISendRfpRequest::is_note_Set() const{
    return m_note_isSet;
}

bool OAISendRfpRequest::is_note_Valid() const{
    return m_note_isValid;
}

OAIPreferredDealTerms OAISendRfpRequest::getPreferredDealTerms() const {
    return m_preferred_deal_terms;
}
void OAISendRfpRequest::setPreferredDealTerms(const OAIPreferredDealTerms &preferred_deal_terms) {
    m_preferred_deal_terms = preferred_deal_terms;
    m_preferred_deal_terms_isSet = true;
}

bool OAISendRfpRequest::is_preferred_deal_terms_Set() const{
    return m_preferred_deal_terms_isSet;
}

bool OAISendRfpRequest::is_preferred_deal_terms_Valid() const{
    return m_preferred_deal_terms_isValid;
}

OAIProgrammaticGuaranteedTerms OAISendRfpRequest::getProgrammaticGuaranteedTerms() const {
    return m_programmatic_guaranteed_terms;
}
void OAISendRfpRequest::setProgrammaticGuaranteedTerms(const OAIProgrammaticGuaranteedTerms &programmatic_guaranteed_terms) {
    m_programmatic_guaranteed_terms = programmatic_guaranteed_terms;
    m_programmatic_guaranteed_terms_isSet = true;
}

bool OAISendRfpRequest::is_programmatic_guaranteed_terms_Set() const{
    return m_programmatic_guaranteed_terms_isSet;
}

bool OAISendRfpRequest::is_programmatic_guaranteed_terms_Valid() const{
    return m_programmatic_guaranteed_terms_isValid;
}

QString OAISendRfpRequest::getPublisherProfile() const {
    return m_publisher_profile;
}
void OAISendRfpRequest::setPublisherProfile(const QString &publisher_profile) {
    m_publisher_profile = publisher_profile;
    m_publisher_profile_isSet = true;
}

bool OAISendRfpRequest::is_publisher_profile_Set() const{
    return m_publisher_profile_isSet;
}

bool OAISendRfpRequest::is_publisher_profile_Valid() const{
    return m_publisher_profile_isValid;
}

bool OAISendRfpRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buyer_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_gross_spend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_size_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_deal_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_programmatic_guaranteed_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_profile_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendRfpRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
