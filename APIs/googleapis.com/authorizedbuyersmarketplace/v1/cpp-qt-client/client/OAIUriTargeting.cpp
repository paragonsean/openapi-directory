/**
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUriTargeting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUriTargeting::OAIUriTargeting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUriTargeting::OAIUriTargeting() {
    this->initializeModel();
}

OAIUriTargeting::~OAIUriTargeting() {}

void OAIUriTargeting::initializeModel() {

    m_excluded_uris_isSet = false;
    m_excluded_uris_isValid = false;

    m_targeted_uris_isSet = false;
    m_targeted_uris_isValid = false;
}

void OAIUriTargeting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUriTargeting::fromJsonObject(QJsonObject json) {

    m_excluded_uris_isValid = ::OpenAPI::fromJsonValue(m_excluded_uris, json[QString("excludedUris")]);
    m_excluded_uris_isSet = !json[QString("excludedUris")].isNull() && m_excluded_uris_isValid;

    m_targeted_uris_isValid = ::OpenAPI::fromJsonValue(m_targeted_uris, json[QString("targetedUris")]);
    m_targeted_uris_isSet = !json[QString("targetedUris")].isNull() && m_targeted_uris_isValid;
}

QString OAIUriTargeting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUriTargeting::asJsonObject() const {
    QJsonObject obj;
    if (m_excluded_uris.size() > 0) {
        obj.insert(QString("excludedUris"), ::OpenAPI::toJsonValue(m_excluded_uris));
    }
    if (m_targeted_uris.size() > 0) {
        obj.insert(QString("targetedUris"), ::OpenAPI::toJsonValue(m_targeted_uris));
    }
    return obj;
}

QList<QString> OAIUriTargeting::getExcludedUris() const {
    return m_excluded_uris;
}
void OAIUriTargeting::setExcludedUris(const QList<QString> &excluded_uris) {
    m_excluded_uris = excluded_uris;
    m_excluded_uris_isSet = true;
}

bool OAIUriTargeting::is_excluded_uris_Set() const{
    return m_excluded_uris_isSet;
}

bool OAIUriTargeting::is_excluded_uris_Valid() const{
    return m_excluded_uris_isValid;
}

QList<QString> OAIUriTargeting::getTargetedUris() const {
    return m_targeted_uris;
}
void OAIUriTargeting::setTargetedUris(const QList<QString> &targeted_uris) {
    m_targeted_uris = targeted_uris;
    m_targeted_uris_isSet = true;
}

bool OAIUriTargeting::is_targeted_uris_Set() const{
    return m_targeted_uris_isSet;
}

bool OAIUriTargeting::is_targeted_uris_Valid() const{
    return m_targeted_uris_isValid;
}

bool OAIUriTargeting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_excluded_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeted_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUriTargeting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
