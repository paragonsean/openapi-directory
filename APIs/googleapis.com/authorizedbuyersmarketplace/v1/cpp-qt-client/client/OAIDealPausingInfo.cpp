/**
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDealPausingInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDealPausingInfo::OAIDealPausingInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDealPausingInfo::OAIDealPausingInfo() {
    this->initializeModel();
}

OAIDealPausingInfo::~OAIDealPausingInfo() {}

void OAIDealPausingInfo::initializeModel() {

    m_pause_reason_isSet = false;
    m_pause_reason_isValid = false;

    m_pause_role_isSet = false;
    m_pause_role_isValid = false;

    m_pausing_consented_isSet = false;
    m_pausing_consented_isValid = false;
}

void OAIDealPausingInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDealPausingInfo::fromJsonObject(QJsonObject json) {

    m_pause_reason_isValid = ::OpenAPI::fromJsonValue(m_pause_reason, json[QString("pauseReason")]);
    m_pause_reason_isSet = !json[QString("pauseReason")].isNull() && m_pause_reason_isValid;

    m_pause_role_isValid = ::OpenAPI::fromJsonValue(m_pause_role, json[QString("pauseRole")]);
    m_pause_role_isSet = !json[QString("pauseRole")].isNull() && m_pause_role_isValid;

    m_pausing_consented_isValid = ::OpenAPI::fromJsonValue(m_pausing_consented, json[QString("pausingConsented")]);
    m_pausing_consented_isSet = !json[QString("pausingConsented")].isNull() && m_pausing_consented_isValid;
}

QString OAIDealPausingInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDealPausingInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_pause_reason_isSet) {
        obj.insert(QString("pauseReason"), ::OpenAPI::toJsonValue(m_pause_reason));
    }
    if (m_pause_role_isSet) {
        obj.insert(QString("pauseRole"), ::OpenAPI::toJsonValue(m_pause_role));
    }
    if (m_pausing_consented_isSet) {
        obj.insert(QString("pausingConsented"), ::OpenAPI::toJsonValue(m_pausing_consented));
    }
    return obj;
}

QString OAIDealPausingInfo::getPauseReason() const {
    return m_pause_reason;
}
void OAIDealPausingInfo::setPauseReason(const QString &pause_reason) {
    m_pause_reason = pause_reason;
    m_pause_reason_isSet = true;
}

bool OAIDealPausingInfo::is_pause_reason_Set() const{
    return m_pause_reason_isSet;
}

bool OAIDealPausingInfo::is_pause_reason_Valid() const{
    return m_pause_reason_isValid;
}

QString OAIDealPausingInfo::getPauseRole() const {
    return m_pause_role;
}
void OAIDealPausingInfo::setPauseRole(const QString &pause_role) {
    m_pause_role = pause_role;
    m_pause_role_isSet = true;
}

bool OAIDealPausingInfo::is_pause_role_Set() const{
    return m_pause_role_isSet;
}

bool OAIDealPausingInfo::is_pause_role_Valid() const{
    return m_pause_role_isValid;
}

bool OAIDealPausingInfo::isPausingConsented() const {
    return m_pausing_consented;
}
void OAIDealPausingInfo::setPausingConsented(const bool &pausing_consented) {
    m_pausing_consented = pausing_consented;
    m_pausing_consented_isSet = true;
}

bool OAIDealPausingInfo::is_pausing_consented_Set() const{
    return m_pausing_consented_isSet;
}

bool OAIDealPausingInfo::is_pausing_consented_Valid() const{
    return m_pausing_consented_isValid;
}

bool OAIDealPausingInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pause_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pause_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pausing_consented_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDealPausingInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
