/**
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeliveryControl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeliveryControl::OAIDeliveryControl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeliveryControl::OAIDeliveryControl() {
    this->initializeModel();
}

OAIDeliveryControl::~OAIDeliveryControl() {}

void OAIDeliveryControl::initializeModel() {

    m_companion_delivery_type_isSet = false;
    m_companion_delivery_type_isValid = false;

    m_creative_rotation_type_isSet = false;
    m_creative_rotation_type_isValid = false;

    m_delivery_rate_type_isSet = false;
    m_delivery_rate_type_isValid = false;

    m_frequency_cap_isSet = false;
    m_frequency_cap_isValid = false;

    m_roadblocking_type_isSet = false;
    m_roadblocking_type_isValid = false;
}

void OAIDeliveryControl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeliveryControl::fromJsonObject(QJsonObject json) {

    m_companion_delivery_type_isValid = ::OpenAPI::fromJsonValue(m_companion_delivery_type, json[QString("companionDeliveryType")]);
    m_companion_delivery_type_isSet = !json[QString("companionDeliveryType")].isNull() && m_companion_delivery_type_isValid;

    m_creative_rotation_type_isValid = ::OpenAPI::fromJsonValue(m_creative_rotation_type, json[QString("creativeRotationType")]);
    m_creative_rotation_type_isSet = !json[QString("creativeRotationType")].isNull() && m_creative_rotation_type_isValid;

    m_delivery_rate_type_isValid = ::OpenAPI::fromJsonValue(m_delivery_rate_type, json[QString("deliveryRateType")]);
    m_delivery_rate_type_isSet = !json[QString("deliveryRateType")].isNull() && m_delivery_rate_type_isValid;

    m_frequency_cap_isValid = ::OpenAPI::fromJsonValue(m_frequency_cap, json[QString("frequencyCap")]);
    m_frequency_cap_isSet = !json[QString("frequencyCap")].isNull() && m_frequency_cap_isValid;

    m_roadblocking_type_isValid = ::OpenAPI::fromJsonValue(m_roadblocking_type, json[QString("roadblockingType")]);
    m_roadblocking_type_isSet = !json[QString("roadblockingType")].isNull() && m_roadblocking_type_isValid;
}

QString OAIDeliveryControl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeliveryControl::asJsonObject() const {
    QJsonObject obj;
    if (m_companion_delivery_type_isSet) {
        obj.insert(QString("companionDeliveryType"), ::OpenAPI::toJsonValue(m_companion_delivery_type));
    }
    if (m_creative_rotation_type_isSet) {
        obj.insert(QString("creativeRotationType"), ::OpenAPI::toJsonValue(m_creative_rotation_type));
    }
    if (m_delivery_rate_type_isSet) {
        obj.insert(QString("deliveryRateType"), ::OpenAPI::toJsonValue(m_delivery_rate_type));
    }
    if (m_frequency_cap.size() > 0) {
        obj.insert(QString("frequencyCap"), ::OpenAPI::toJsonValue(m_frequency_cap));
    }
    if (m_roadblocking_type_isSet) {
        obj.insert(QString("roadblockingType"), ::OpenAPI::toJsonValue(m_roadblocking_type));
    }
    return obj;
}

QString OAIDeliveryControl::getCompanionDeliveryType() const {
    return m_companion_delivery_type;
}
void OAIDeliveryControl::setCompanionDeliveryType(const QString &companion_delivery_type) {
    m_companion_delivery_type = companion_delivery_type;
    m_companion_delivery_type_isSet = true;
}

bool OAIDeliveryControl::is_companion_delivery_type_Set() const{
    return m_companion_delivery_type_isSet;
}

bool OAIDeliveryControl::is_companion_delivery_type_Valid() const{
    return m_companion_delivery_type_isValid;
}

QString OAIDeliveryControl::getCreativeRotationType() const {
    return m_creative_rotation_type;
}
void OAIDeliveryControl::setCreativeRotationType(const QString &creative_rotation_type) {
    m_creative_rotation_type = creative_rotation_type;
    m_creative_rotation_type_isSet = true;
}

bool OAIDeliveryControl::is_creative_rotation_type_Set() const{
    return m_creative_rotation_type_isSet;
}

bool OAIDeliveryControl::is_creative_rotation_type_Valid() const{
    return m_creative_rotation_type_isValid;
}

QString OAIDeliveryControl::getDeliveryRateType() const {
    return m_delivery_rate_type;
}
void OAIDeliveryControl::setDeliveryRateType(const QString &delivery_rate_type) {
    m_delivery_rate_type = delivery_rate_type;
    m_delivery_rate_type_isSet = true;
}

bool OAIDeliveryControl::is_delivery_rate_type_Set() const{
    return m_delivery_rate_type_isSet;
}

bool OAIDeliveryControl::is_delivery_rate_type_Valid() const{
    return m_delivery_rate_type_isValid;
}

QList<OAIFrequencyCap> OAIDeliveryControl::getFrequencyCap() const {
    return m_frequency_cap;
}
void OAIDeliveryControl::setFrequencyCap(const QList<OAIFrequencyCap> &frequency_cap) {
    m_frequency_cap = frequency_cap;
    m_frequency_cap_isSet = true;
}

bool OAIDeliveryControl::is_frequency_cap_Set() const{
    return m_frequency_cap_isSet;
}

bool OAIDeliveryControl::is_frequency_cap_Valid() const{
    return m_frequency_cap_isValid;
}

QString OAIDeliveryControl::getRoadblockingType() const {
    return m_roadblocking_type;
}
void OAIDeliveryControl::setRoadblockingType(const QString &roadblocking_type) {
    m_roadblocking_type = roadblocking_type;
    m_roadblocking_type_isSet = true;
}

bool OAIDeliveryControl::is_roadblocking_type_Set() const{
    return m_roadblocking_type_isSet;
}

bool OAIDeliveryControl::is_roadblocking_type_Valid() const{
    return m_roadblocking_type_isValid;
}

bool OAIDeliveryControl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_companion_delivery_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_rotation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_rate_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_cap.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_roadblocking_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeliveryControl::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
