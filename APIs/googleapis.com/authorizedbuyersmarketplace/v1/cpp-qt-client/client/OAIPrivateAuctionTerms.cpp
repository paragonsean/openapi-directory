/**
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateAuctionTerms.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateAuctionTerms::OAIPrivateAuctionTerms(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateAuctionTerms::OAIPrivateAuctionTerms() {
    this->initializeModel();
}

OAIPrivateAuctionTerms::~OAIPrivateAuctionTerms() {}

void OAIPrivateAuctionTerms::initializeModel() {

    m_floor_price_isSet = false;
    m_floor_price_isValid = false;

    m_open_auction_allowed_isSet = false;
    m_open_auction_allowed_isValid = false;
}

void OAIPrivateAuctionTerms::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateAuctionTerms::fromJsonObject(QJsonObject json) {

    m_floor_price_isValid = ::OpenAPI::fromJsonValue(m_floor_price, json[QString("floorPrice")]);
    m_floor_price_isSet = !json[QString("floorPrice")].isNull() && m_floor_price_isValid;

    m_open_auction_allowed_isValid = ::OpenAPI::fromJsonValue(m_open_auction_allowed, json[QString("openAuctionAllowed")]);
    m_open_auction_allowed_isSet = !json[QString("openAuctionAllowed")].isNull() && m_open_auction_allowed_isValid;
}

QString OAIPrivateAuctionTerms::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateAuctionTerms::asJsonObject() const {
    QJsonObject obj;
    if (m_floor_price.isSet()) {
        obj.insert(QString("floorPrice"), ::OpenAPI::toJsonValue(m_floor_price));
    }
    if (m_open_auction_allowed_isSet) {
        obj.insert(QString("openAuctionAllowed"), ::OpenAPI::toJsonValue(m_open_auction_allowed));
    }
    return obj;
}

OAIPrice OAIPrivateAuctionTerms::getFloorPrice() const {
    return m_floor_price;
}
void OAIPrivateAuctionTerms::setFloorPrice(const OAIPrice &floor_price) {
    m_floor_price = floor_price;
    m_floor_price_isSet = true;
}

bool OAIPrivateAuctionTerms::is_floor_price_Set() const{
    return m_floor_price_isSet;
}

bool OAIPrivateAuctionTerms::is_floor_price_Valid() const{
    return m_floor_price_isValid;
}

bool OAIPrivateAuctionTerms::isOpenAuctionAllowed() const {
    return m_open_auction_allowed;
}
void OAIPrivateAuctionTerms::setOpenAuctionAllowed(const bool &open_auction_allowed) {
    m_open_auction_allowed = open_auction_allowed;
    m_open_auction_allowed_isSet = true;
}

bool OAIPrivateAuctionTerms::is_open_auction_allowed_Set() const{
    return m_open_auction_allowed_isSet;
}

bool OAIPrivateAuctionTerms::is_open_auction_allowed_Valid() const{
    return m_open_auction_allowed_isValid;
}

bool OAIPrivateAuctionTerms::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_floor_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_auction_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateAuctionTerms::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
