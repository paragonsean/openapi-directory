/**
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventorySizeTargeting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventorySizeTargeting::OAIInventorySizeTargeting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventorySizeTargeting::OAIInventorySizeTargeting() {
    this->initializeModel();
}

OAIInventorySizeTargeting::~OAIInventorySizeTargeting() {}

void OAIInventorySizeTargeting::initializeModel() {

    m_excluded_inventory_sizes_isSet = false;
    m_excluded_inventory_sizes_isValid = false;

    m_targeted_inventory_sizes_isSet = false;
    m_targeted_inventory_sizes_isValid = false;
}

void OAIInventorySizeTargeting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventorySizeTargeting::fromJsonObject(QJsonObject json) {

    m_excluded_inventory_sizes_isValid = ::OpenAPI::fromJsonValue(m_excluded_inventory_sizes, json[QString("excludedInventorySizes")]);
    m_excluded_inventory_sizes_isSet = !json[QString("excludedInventorySizes")].isNull() && m_excluded_inventory_sizes_isValid;

    m_targeted_inventory_sizes_isValid = ::OpenAPI::fromJsonValue(m_targeted_inventory_sizes, json[QString("targetedInventorySizes")]);
    m_targeted_inventory_sizes_isSet = !json[QString("targetedInventorySizes")].isNull() && m_targeted_inventory_sizes_isValid;
}

QString OAIInventorySizeTargeting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventorySizeTargeting::asJsonObject() const {
    QJsonObject obj;
    if (m_excluded_inventory_sizes.size() > 0) {
        obj.insert(QString("excludedInventorySizes"), ::OpenAPI::toJsonValue(m_excluded_inventory_sizes));
    }
    if (m_targeted_inventory_sizes.size() > 0) {
        obj.insert(QString("targetedInventorySizes"), ::OpenAPI::toJsonValue(m_targeted_inventory_sizes));
    }
    return obj;
}

QList<OAIAdSize> OAIInventorySizeTargeting::getExcludedInventorySizes() const {
    return m_excluded_inventory_sizes;
}
void OAIInventorySizeTargeting::setExcludedInventorySizes(const QList<OAIAdSize> &excluded_inventory_sizes) {
    m_excluded_inventory_sizes = excluded_inventory_sizes;
    m_excluded_inventory_sizes_isSet = true;
}

bool OAIInventorySizeTargeting::is_excluded_inventory_sizes_Set() const{
    return m_excluded_inventory_sizes_isSet;
}

bool OAIInventorySizeTargeting::is_excluded_inventory_sizes_Valid() const{
    return m_excluded_inventory_sizes_isValid;
}

QList<OAIAdSize> OAIInventorySizeTargeting::getTargetedInventorySizes() const {
    return m_targeted_inventory_sizes;
}
void OAIInventorySizeTargeting::setTargetedInventorySizes(const QList<OAIAdSize> &targeted_inventory_sizes) {
    m_targeted_inventory_sizes = targeted_inventory_sizes;
    m_targeted_inventory_sizes_isSet = true;
}

bool OAIInventorySizeTargeting::is_targeted_inventory_sizes_Set() const{
    return m_targeted_inventory_sizes_isSet;
}

bool OAIInventorySizeTargeting::is_targeted_inventory_sizes_Valid() const{
    return m_targeted_inventory_sizes_isValid;
}

bool OAIInventorySizeTargeting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_excluded_inventory_sizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeted_inventory_sizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventorySizeTargeting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
