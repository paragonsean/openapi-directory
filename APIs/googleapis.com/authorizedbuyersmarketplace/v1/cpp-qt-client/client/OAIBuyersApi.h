/**
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBuyersApi_H
#define OAI_OAIBuyersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAcceptProposalRequest.h"
#include "OAIAddCreativeRequest.h"
#include "OAIAddNoteRequest.h"
#include "OAIAuctionPackage.h"
#include "OAIBatchUpdateDealsRequest.h"
#include "OAIBatchUpdateDealsResponse.h"
#include "OAIClient.h"
#include "OAIClientUser.h"
#include "OAIDeal.h"
#include "OAIFinalizedDeal.h"
#include "OAIListAuctionPackagesResponse.h"
#include "OAIListClientUsersResponse.h"
#include "OAIListClientsResponse.h"
#include "OAIListDealsResponse.h"
#include "OAIListFinalizedDealsResponse.h"
#include "OAIListProposalsResponse.h"
#include "OAIListPublisherProfilesResponse.h"
#include "OAIObject.h"
#include "OAIPauseFinalizedDealRequest.h"
#include "OAIProposal.h"
#include "OAIPublisherProfile.h"
#include "OAISendRfpRequest.h"
#include "OAISubscribeClientsRequest.h"
#include "OAIUnsubscribeClientsRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBuyersApi : public QObject {
    Q_OBJECT

public:
    OAIBuyersApi(const int timeOut = 0);
    ~OAIBuyersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_auctionPackages_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_auctionPackages_subscribe(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  auction_package QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_subscribe_clients_request OAISubscribeClientsRequest [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_auctionPackages_subscribeClients(const QString &auction_package, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISubscribeClientsRequest> &oai_subscribe_clients_request = ::OpenAPI::OptionalParam<OAISubscribeClientsRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribe(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  auction_package QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_unsubscribe_clients_request OAIUnsubscribeClientsRequest [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeClients(const QString &auction_package, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUnsubscribeClientsRequest> &oai_unsubscribe_clients_request = ::OpenAPI::OptionalParam<OAIUnsubscribeClientsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_client OAIClient [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_clients_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIClient> &oai_client = ::OpenAPI::OptionalParam<OAIClient>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_clients_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_clients_users_activate(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_client_user OAIClientUser [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_clients_users_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIClientUser> &oai_client_user = ::OpenAPI::OptionalParam<OAIClientUser>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_clients_users_deactivate(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_clients_users_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_clients_users_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  deal QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_add_creative_request OAIAddCreativeRequest [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_finalizedDeals_addCreative(const QString &deal, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAddCreativeRequest> &oai_add_creative_request = ::OpenAPI::OptionalParam<OAIAddCreativeRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_finalizedDeals_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_pause_finalized_deal_request OAIPauseFinalizedDealRequest [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_finalizedDeals_pause(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPauseFinalizedDealRequest> &oai_pause_finalized_deal_request = ::OpenAPI::OptionalParam<OAIPauseFinalizedDealRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_finalizedDeals_resume(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  deal QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_finalizedDeals_setReadyToServe(const QString &deal, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_accept_proposal_request OAIAcceptProposalRequest [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_proposals_accept(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAcceptProposalRequest> &oai_accept_proposal_request = ::OpenAPI::OptionalParam<OAIAcceptProposalRequest>());

    /**
    * @param[in]  proposal QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_add_note_request OAIAddNoteRequest [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_proposals_addNote(const QString &proposal, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAddNoteRequest> &oai_add_note_request = ::OpenAPI::OptionalParam<OAIAddNoteRequest>());

    /**
    * @param[in]  proposal QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_proposals_cancelNegotiation(const QString &proposal, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_batch_update_deals_request OAIBatchUpdateDealsRequest [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_proposals_deals_batchUpdate(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBatchUpdateDealsRequest> &oai_batch_update_deals_request = ::OpenAPI::OptionalParam<OAIBatchUpdateDealsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_proposals_deals_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_deal OAIDeal [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_proposals_deals_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeal> &oai_deal = ::OpenAPI::OptionalParam<OAIDeal>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_proposals_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  buyer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_send_rfp_request OAISendRfpRequest [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_proposals_sendRfp(const QString &buyer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISendRfpRequest> &oai_send_rfp_request = ::OpenAPI::OptionalParam<OAISendRfpRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_publisherProfiles_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void authorizedbuyersmarketplace_buyers_publisherProfiles_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void authorizedbuyersmarketplace_buyers_auctionPackages_listCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_auctionPackages_subscribeCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_auctionPackages_subscribeClientsCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeClientsCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_clients_createCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_clients_listCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_clients_users_activateCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_clients_users_createCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_clients_users_deactivateCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_clients_users_deleteCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_clients_users_listCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_addCreativeCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_listCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_pauseCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_resumeCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_setReadyToServeCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_proposals_acceptCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_proposals_addNoteCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_proposals_cancelNegotiationCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_proposals_deals_batchUpdateCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_proposals_deals_listCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_proposals_deals_patchCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_proposals_listCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_proposals_sendRfpCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_publisherProfiles_getCallback(OAIHttpRequestWorker *worker);
    void authorizedbuyersmarketplace_buyers_publisherProfiles_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void authorizedbuyersmarketplace_buyers_auctionPackages_listSignal(OAIListAuctionPackagesResponse summary);
    void authorizedbuyersmarketplace_buyers_auctionPackages_subscribeSignal(OAIAuctionPackage summary);
    void authorizedbuyersmarketplace_buyers_auctionPackages_subscribeClientsSignal(OAIAuctionPackage summary);
    void authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeSignal(OAIAuctionPackage summary);
    void authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeClientsSignal(OAIAuctionPackage summary);
    void authorizedbuyersmarketplace_buyers_clients_createSignal(OAIClient summary);
    void authorizedbuyersmarketplace_buyers_clients_listSignal(OAIListClientsResponse summary);
    void authorizedbuyersmarketplace_buyers_clients_users_activateSignal(OAIClientUser summary);
    void authorizedbuyersmarketplace_buyers_clients_users_createSignal(OAIClientUser summary);
    void authorizedbuyersmarketplace_buyers_clients_users_deactivateSignal(OAIClientUser summary);
    void authorizedbuyersmarketplace_buyers_clients_users_deleteSignal(OAIObject summary);
    void authorizedbuyersmarketplace_buyers_clients_users_listSignal(OAIListClientUsersResponse summary);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_addCreativeSignal(OAIFinalizedDeal summary);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_listSignal(OAIListFinalizedDealsResponse summary);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_pauseSignal(OAIFinalizedDeal summary);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_resumeSignal(OAIFinalizedDeal summary);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_setReadyToServeSignal(OAIFinalizedDeal summary);
    void authorizedbuyersmarketplace_buyers_proposals_acceptSignal(OAIProposal summary);
    void authorizedbuyersmarketplace_buyers_proposals_addNoteSignal(OAIProposal summary);
    void authorizedbuyersmarketplace_buyers_proposals_cancelNegotiationSignal(OAIProposal summary);
    void authorizedbuyersmarketplace_buyers_proposals_deals_batchUpdateSignal(OAIBatchUpdateDealsResponse summary);
    void authorizedbuyersmarketplace_buyers_proposals_deals_listSignal(OAIListDealsResponse summary);
    void authorizedbuyersmarketplace_buyers_proposals_deals_patchSignal(OAIDeal summary);
    void authorizedbuyersmarketplace_buyers_proposals_listSignal(OAIListProposalsResponse summary);
    void authorizedbuyersmarketplace_buyers_proposals_sendRfpSignal(OAIProposal summary);
    void authorizedbuyersmarketplace_buyers_publisherProfiles_getSignal(OAIPublisherProfile summary);
    void authorizedbuyersmarketplace_buyers_publisherProfiles_listSignal(OAIListPublisherProfilesResponse summary);


    void authorizedbuyersmarketplace_buyers_auctionPackages_listSignalFull(OAIHttpRequestWorker *worker, OAIListAuctionPackagesResponse summary);
    void authorizedbuyersmarketplace_buyers_auctionPackages_subscribeSignalFull(OAIHttpRequestWorker *worker, OAIAuctionPackage summary);
    void authorizedbuyersmarketplace_buyers_auctionPackages_subscribeClientsSignalFull(OAIHttpRequestWorker *worker, OAIAuctionPackage summary);
    void authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeSignalFull(OAIHttpRequestWorker *worker, OAIAuctionPackage summary);
    void authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeClientsSignalFull(OAIHttpRequestWorker *worker, OAIAuctionPackage summary);
    void authorizedbuyersmarketplace_buyers_clients_createSignalFull(OAIHttpRequestWorker *worker, OAIClient summary);
    void authorizedbuyersmarketplace_buyers_clients_listSignalFull(OAIHttpRequestWorker *worker, OAIListClientsResponse summary);
    void authorizedbuyersmarketplace_buyers_clients_users_activateSignalFull(OAIHttpRequestWorker *worker, OAIClientUser summary);
    void authorizedbuyersmarketplace_buyers_clients_users_createSignalFull(OAIHttpRequestWorker *worker, OAIClientUser summary);
    void authorizedbuyersmarketplace_buyers_clients_users_deactivateSignalFull(OAIHttpRequestWorker *worker, OAIClientUser summary);
    void authorizedbuyersmarketplace_buyers_clients_users_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void authorizedbuyersmarketplace_buyers_clients_users_listSignalFull(OAIHttpRequestWorker *worker, OAIListClientUsersResponse summary);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_addCreativeSignalFull(OAIHttpRequestWorker *worker, OAIFinalizedDeal summary);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_listSignalFull(OAIHttpRequestWorker *worker, OAIListFinalizedDealsResponse summary);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_pauseSignalFull(OAIHttpRequestWorker *worker, OAIFinalizedDeal summary);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_resumeSignalFull(OAIHttpRequestWorker *worker, OAIFinalizedDeal summary);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_setReadyToServeSignalFull(OAIHttpRequestWorker *worker, OAIFinalizedDeal summary);
    void authorizedbuyersmarketplace_buyers_proposals_acceptSignalFull(OAIHttpRequestWorker *worker, OAIProposal summary);
    void authorizedbuyersmarketplace_buyers_proposals_addNoteSignalFull(OAIHttpRequestWorker *worker, OAIProposal summary);
    void authorizedbuyersmarketplace_buyers_proposals_cancelNegotiationSignalFull(OAIHttpRequestWorker *worker, OAIProposal summary);
    void authorizedbuyersmarketplace_buyers_proposals_deals_batchUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBatchUpdateDealsResponse summary);
    void authorizedbuyersmarketplace_buyers_proposals_deals_listSignalFull(OAIHttpRequestWorker *worker, OAIListDealsResponse summary);
    void authorizedbuyersmarketplace_buyers_proposals_deals_patchSignalFull(OAIHttpRequestWorker *worker, OAIDeal summary);
    void authorizedbuyersmarketplace_buyers_proposals_listSignalFull(OAIHttpRequestWorker *worker, OAIListProposalsResponse summary);
    void authorizedbuyersmarketplace_buyers_proposals_sendRfpSignalFull(OAIHttpRequestWorker *worker, OAIProposal summary);
    void authorizedbuyersmarketplace_buyers_publisherProfiles_getSignalFull(OAIHttpRequestWorker *worker, OAIPublisherProfile summary);
    void authorizedbuyersmarketplace_buyers_publisherProfiles_listSignalFull(OAIHttpRequestWorker *worker, OAIListPublisherProfilesResponse summary);

    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_auctionPackages_listSignalError() instead")
    void authorizedbuyersmarketplace_buyers_auctionPackages_listSignalE(OAIListAuctionPackagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_auctionPackages_listSignalError(OAIListAuctionPackagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_auctionPackages_subscribeSignalError() instead")
    void authorizedbuyersmarketplace_buyers_auctionPackages_subscribeSignalE(OAIAuctionPackage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_auctionPackages_subscribeSignalError(OAIAuctionPackage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_auctionPackages_subscribeClientsSignalError() instead")
    void authorizedbuyersmarketplace_buyers_auctionPackages_subscribeClientsSignalE(OAIAuctionPackage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_auctionPackages_subscribeClientsSignalError(OAIAuctionPackage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeSignalError() instead")
    void authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeSignalE(OAIAuctionPackage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeSignalError(OAIAuctionPackage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeClientsSignalError() instead")
    void authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeClientsSignalE(OAIAuctionPackage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeClientsSignalError(OAIAuctionPackage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_clients_createSignalError() instead")
    void authorizedbuyersmarketplace_buyers_clients_createSignalE(OAIClient summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_clients_createSignalError(OAIClient summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_clients_listSignalError() instead")
    void authorizedbuyersmarketplace_buyers_clients_listSignalE(OAIListClientsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_clients_listSignalError(OAIListClientsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_clients_users_activateSignalError() instead")
    void authorizedbuyersmarketplace_buyers_clients_users_activateSignalE(OAIClientUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_clients_users_activateSignalError(OAIClientUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_clients_users_createSignalError() instead")
    void authorizedbuyersmarketplace_buyers_clients_users_createSignalE(OAIClientUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_clients_users_createSignalError(OAIClientUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_clients_users_deactivateSignalError() instead")
    void authorizedbuyersmarketplace_buyers_clients_users_deactivateSignalE(OAIClientUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_clients_users_deactivateSignalError(OAIClientUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_clients_users_deleteSignalError() instead")
    void authorizedbuyersmarketplace_buyers_clients_users_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_clients_users_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_clients_users_listSignalError() instead")
    void authorizedbuyersmarketplace_buyers_clients_users_listSignalE(OAIListClientUsersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_clients_users_listSignalError(OAIListClientUsersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_finalizedDeals_addCreativeSignalError() instead")
    void authorizedbuyersmarketplace_buyers_finalizedDeals_addCreativeSignalE(OAIFinalizedDeal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_addCreativeSignalError(OAIFinalizedDeal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_finalizedDeals_listSignalError() instead")
    void authorizedbuyersmarketplace_buyers_finalizedDeals_listSignalE(OAIListFinalizedDealsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_listSignalError(OAIListFinalizedDealsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_finalizedDeals_pauseSignalError() instead")
    void authorizedbuyersmarketplace_buyers_finalizedDeals_pauseSignalE(OAIFinalizedDeal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_pauseSignalError(OAIFinalizedDeal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_finalizedDeals_resumeSignalError() instead")
    void authorizedbuyersmarketplace_buyers_finalizedDeals_resumeSignalE(OAIFinalizedDeal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_resumeSignalError(OAIFinalizedDeal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_finalizedDeals_setReadyToServeSignalError() instead")
    void authorizedbuyersmarketplace_buyers_finalizedDeals_setReadyToServeSignalE(OAIFinalizedDeal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_setReadyToServeSignalError(OAIFinalizedDeal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_proposals_acceptSignalError() instead")
    void authorizedbuyersmarketplace_buyers_proposals_acceptSignalE(OAIProposal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_proposals_acceptSignalError(OAIProposal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_proposals_addNoteSignalError() instead")
    void authorizedbuyersmarketplace_buyers_proposals_addNoteSignalE(OAIProposal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_proposals_addNoteSignalError(OAIProposal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_proposals_cancelNegotiationSignalError() instead")
    void authorizedbuyersmarketplace_buyers_proposals_cancelNegotiationSignalE(OAIProposal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_proposals_cancelNegotiationSignalError(OAIProposal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_proposals_deals_batchUpdateSignalError() instead")
    void authorizedbuyersmarketplace_buyers_proposals_deals_batchUpdateSignalE(OAIBatchUpdateDealsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_proposals_deals_batchUpdateSignalError(OAIBatchUpdateDealsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_proposals_deals_listSignalError() instead")
    void authorizedbuyersmarketplace_buyers_proposals_deals_listSignalE(OAIListDealsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_proposals_deals_listSignalError(OAIListDealsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_proposals_deals_patchSignalError() instead")
    void authorizedbuyersmarketplace_buyers_proposals_deals_patchSignalE(OAIDeal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_proposals_deals_patchSignalError(OAIDeal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_proposals_listSignalError() instead")
    void authorizedbuyersmarketplace_buyers_proposals_listSignalE(OAIListProposalsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_proposals_listSignalError(OAIListProposalsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_proposals_sendRfpSignalError() instead")
    void authorizedbuyersmarketplace_buyers_proposals_sendRfpSignalE(OAIProposal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_proposals_sendRfpSignalError(OAIProposal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_publisherProfiles_getSignalError() instead")
    void authorizedbuyersmarketplace_buyers_publisherProfiles_getSignalE(OAIPublisherProfile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_publisherProfiles_getSignalError(OAIPublisherProfile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_publisherProfiles_listSignalError() instead")
    void authorizedbuyersmarketplace_buyers_publisherProfiles_listSignalE(OAIListPublisherProfilesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_publisherProfiles_listSignalError(OAIListPublisherProfilesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_auctionPackages_listSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_auctionPackages_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_auctionPackages_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_auctionPackages_subscribeSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_auctionPackages_subscribeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_auctionPackages_subscribeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_auctionPackages_subscribeClientsSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_auctionPackages_subscribeClientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_auctionPackages_subscribeClientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeClientsSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeClientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_auctionPackages_unsubscribeClientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_clients_createSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_clients_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_clients_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_clients_listSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_clients_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_clients_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_clients_users_activateSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_clients_users_activateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_clients_users_activateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_clients_users_createSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_clients_users_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_clients_users_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_clients_users_deactivateSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_clients_users_deactivateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_clients_users_deactivateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_clients_users_deleteSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_clients_users_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_clients_users_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_clients_users_listSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_clients_users_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_clients_users_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_finalizedDeals_addCreativeSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_finalizedDeals_addCreativeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_addCreativeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_finalizedDeals_listSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_finalizedDeals_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_finalizedDeals_pauseSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_finalizedDeals_pauseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_pauseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_finalizedDeals_resumeSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_finalizedDeals_resumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_resumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_finalizedDeals_setReadyToServeSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_finalizedDeals_setReadyToServeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_finalizedDeals_setReadyToServeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_proposals_acceptSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_proposals_acceptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_proposals_acceptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_proposals_addNoteSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_proposals_addNoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_proposals_addNoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_proposals_cancelNegotiationSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_proposals_cancelNegotiationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_proposals_cancelNegotiationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_proposals_deals_batchUpdateSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_proposals_deals_batchUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_proposals_deals_batchUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_proposals_deals_listSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_proposals_deals_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_proposals_deals_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_proposals_deals_patchSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_proposals_deals_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_proposals_deals_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_proposals_listSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_proposals_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_proposals_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_proposals_sendRfpSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_proposals_sendRfpSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_proposals_sendRfpSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_publisherProfiles_getSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_publisherProfiles_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_publisherProfiles_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizedbuyersmarketplace_buyers_publisherProfiles_listSignalErrorFull() instead")
    void authorizedbuyersmarketplace_buyers_publisherProfiles_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizedbuyersmarketplace_buyers_publisherProfiles_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
