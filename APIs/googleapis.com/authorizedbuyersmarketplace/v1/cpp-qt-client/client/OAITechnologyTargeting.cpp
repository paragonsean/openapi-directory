/**
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITechnologyTargeting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITechnologyTargeting::OAITechnologyTargeting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITechnologyTargeting::OAITechnologyTargeting() {
    this->initializeModel();
}

OAITechnologyTargeting::~OAITechnologyTargeting() {}

void OAITechnologyTargeting::initializeModel() {

    m_device_capability_targeting_isSet = false;
    m_device_capability_targeting_isValid = false;

    m_device_category_targeting_isSet = false;
    m_device_category_targeting_isValid = false;

    m_operating_system_targeting_isSet = false;
    m_operating_system_targeting_isValid = false;
}

void OAITechnologyTargeting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITechnologyTargeting::fromJsonObject(QJsonObject json) {

    m_device_capability_targeting_isValid = ::OpenAPI::fromJsonValue(m_device_capability_targeting, json[QString("deviceCapabilityTargeting")]);
    m_device_capability_targeting_isSet = !json[QString("deviceCapabilityTargeting")].isNull() && m_device_capability_targeting_isValid;

    m_device_category_targeting_isValid = ::OpenAPI::fromJsonValue(m_device_category_targeting, json[QString("deviceCategoryTargeting")]);
    m_device_category_targeting_isSet = !json[QString("deviceCategoryTargeting")].isNull() && m_device_category_targeting_isValid;

    m_operating_system_targeting_isValid = ::OpenAPI::fromJsonValue(m_operating_system_targeting, json[QString("operatingSystemTargeting")]);
    m_operating_system_targeting_isSet = !json[QString("operatingSystemTargeting")].isNull() && m_operating_system_targeting_isValid;
}

QString OAITechnologyTargeting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITechnologyTargeting::asJsonObject() const {
    QJsonObject obj;
    if (m_device_capability_targeting.isSet()) {
        obj.insert(QString("deviceCapabilityTargeting"), ::OpenAPI::toJsonValue(m_device_capability_targeting));
    }
    if (m_device_category_targeting.isSet()) {
        obj.insert(QString("deviceCategoryTargeting"), ::OpenAPI::toJsonValue(m_device_category_targeting));
    }
    if (m_operating_system_targeting.isSet()) {
        obj.insert(QString("operatingSystemTargeting"), ::OpenAPI::toJsonValue(m_operating_system_targeting));
    }
    return obj;
}

OAICriteriaTargeting OAITechnologyTargeting::getDeviceCapabilityTargeting() const {
    return m_device_capability_targeting;
}
void OAITechnologyTargeting::setDeviceCapabilityTargeting(const OAICriteriaTargeting &device_capability_targeting) {
    m_device_capability_targeting = device_capability_targeting;
    m_device_capability_targeting_isSet = true;
}

bool OAITechnologyTargeting::is_device_capability_targeting_Set() const{
    return m_device_capability_targeting_isSet;
}

bool OAITechnologyTargeting::is_device_capability_targeting_Valid() const{
    return m_device_capability_targeting_isValid;
}

OAICriteriaTargeting OAITechnologyTargeting::getDeviceCategoryTargeting() const {
    return m_device_category_targeting;
}
void OAITechnologyTargeting::setDeviceCategoryTargeting(const OAICriteriaTargeting &device_category_targeting) {
    m_device_category_targeting = device_category_targeting;
    m_device_category_targeting_isSet = true;
}

bool OAITechnologyTargeting::is_device_category_targeting_Set() const{
    return m_device_category_targeting_isSet;
}

bool OAITechnologyTargeting::is_device_category_targeting_Valid() const{
    return m_device_category_targeting_isValid;
}

OAIOperatingSystemTargeting OAITechnologyTargeting::getOperatingSystemTargeting() const {
    return m_operating_system_targeting;
}
void OAITechnologyTargeting::setOperatingSystemTargeting(const OAIOperatingSystemTargeting &operating_system_targeting) {
    m_operating_system_targeting = operating_system_targeting;
    m_operating_system_targeting_isSet = true;
}

bool OAITechnologyTargeting::is_operating_system_targeting_Set() const{
    return m_operating_system_targeting_isSet;
}

bool OAITechnologyTargeting::is_operating_system_targeting_Valid() const{
    return m_operating_system_targeting_isValid;
}

bool OAITechnologyTargeting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_capability_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_category_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITechnologyTargeting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
