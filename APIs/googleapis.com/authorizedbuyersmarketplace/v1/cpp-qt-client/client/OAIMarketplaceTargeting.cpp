/**
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketplaceTargeting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketplaceTargeting::OAIMarketplaceTargeting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketplaceTargeting::OAIMarketplaceTargeting() {
    this->initializeModel();
}

OAIMarketplaceTargeting::~OAIMarketplaceTargeting() {}

void OAIMarketplaceTargeting::initializeModel() {

    m_daypart_targeting_isSet = false;
    m_daypart_targeting_isValid = false;

    m_geo_targeting_isSet = false;
    m_geo_targeting_isValid = false;

    m_inventory_size_targeting_isSet = false;
    m_inventory_size_targeting_isValid = false;

    m_inventory_type_targeting_isSet = false;
    m_inventory_type_targeting_isValid = false;

    m_placement_targeting_isSet = false;
    m_placement_targeting_isValid = false;

    m_technology_targeting_isSet = false;
    m_technology_targeting_isValid = false;

    m_user_list_targeting_isSet = false;
    m_user_list_targeting_isValid = false;

    m_video_targeting_isSet = false;
    m_video_targeting_isValid = false;
}

void OAIMarketplaceTargeting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketplaceTargeting::fromJsonObject(QJsonObject json) {

    m_daypart_targeting_isValid = ::OpenAPI::fromJsonValue(m_daypart_targeting, json[QString("daypartTargeting")]);
    m_daypart_targeting_isSet = !json[QString("daypartTargeting")].isNull() && m_daypart_targeting_isValid;

    m_geo_targeting_isValid = ::OpenAPI::fromJsonValue(m_geo_targeting, json[QString("geoTargeting")]);
    m_geo_targeting_isSet = !json[QString("geoTargeting")].isNull() && m_geo_targeting_isValid;

    m_inventory_size_targeting_isValid = ::OpenAPI::fromJsonValue(m_inventory_size_targeting, json[QString("inventorySizeTargeting")]);
    m_inventory_size_targeting_isSet = !json[QString("inventorySizeTargeting")].isNull() && m_inventory_size_targeting_isValid;

    m_inventory_type_targeting_isValid = ::OpenAPI::fromJsonValue(m_inventory_type_targeting, json[QString("inventoryTypeTargeting")]);
    m_inventory_type_targeting_isSet = !json[QString("inventoryTypeTargeting")].isNull() && m_inventory_type_targeting_isValid;

    m_placement_targeting_isValid = ::OpenAPI::fromJsonValue(m_placement_targeting, json[QString("placementTargeting")]);
    m_placement_targeting_isSet = !json[QString("placementTargeting")].isNull() && m_placement_targeting_isValid;

    m_technology_targeting_isValid = ::OpenAPI::fromJsonValue(m_technology_targeting, json[QString("technologyTargeting")]);
    m_technology_targeting_isSet = !json[QString("technologyTargeting")].isNull() && m_technology_targeting_isValid;

    m_user_list_targeting_isValid = ::OpenAPI::fromJsonValue(m_user_list_targeting, json[QString("userListTargeting")]);
    m_user_list_targeting_isSet = !json[QString("userListTargeting")].isNull() && m_user_list_targeting_isValid;

    m_video_targeting_isValid = ::OpenAPI::fromJsonValue(m_video_targeting, json[QString("videoTargeting")]);
    m_video_targeting_isSet = !json[QString("videoTargeting")].isNull() && m_video_targeting_isValid;
}

QString OAIMarketplaceTargeting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketplaceTargeting::asJsonObject() const {
    QJsonObject obj;
    if (m_daypart_targeting.isSet()) {
        obj.insert(QString("daypartTargeting"), ::OpenAPI::toJsonValue(m_daypart_targeting));
    }
    if (m_geo_targeting.isSet()) {
        obj.insert(QString("geoTargeting"), ::OpenAPI::toJsonValue(m_geo_targeting));
    }
    if (m_inventory_size_targeting.isSet()) {
        obj.insert(QString("inventorySizeTargeting"), ::OpenAPI::toJsonValue(m_inventory_size_targeting));
    }
    if (m_inventory_type_targeting.isSet()) {
        obj.insert(QString("inventoryTypeTargeting"), ::OpenAPI::toJsonValue(m_inventory_type_targeting));
    }
    if (m_placement_targeting.isSet()) {
        obj.insert(QString("placementTargeting"), ::OpenAPI::toJsonValue(m_placement_targeting));
    }
    if (m_technology_targeting.isSet()) {
        obj.insert(QString("technologyTargeting"), ::OpenAPI::toJsonValue(m_technology_targeting));
    }
    if (m_user_list_targeting.isSet()) {
        obj.insert(QString("userListTargeting"), ::OpenAPI::toJsonValue(m_user_list_targeting));
    }
    if (m_video_targeting.isSet()) {
        obj.insert(QString("videoTargeting"), ::OpenAPI::toJsonValue(m_video_targeting));
    }
    return obj;
}

OAIDayPartTargeting OAIMarketplaceTargeting::getDaypartTargeting() const {
    return m_daypart_targeting;
}
void OAIMarketplaceTargeting::setDaypartTargeting(const OAIDayPartTargeting &daypart_targeting) {
    m_daypart_targeting = daypart_targeting;
    m_daypart_targeting_isSet = true;
}

bool OAIMarketplaceTargeting::is_daypart_targeting_Set() const{
    return m_daypart_targeting_isSet;
}

bool OAIMarketplaceTargeting::is_daypart_targeting_Valid() const{
    return m_daypart_targeting_isValid;
}

OAICriteriaTargeting OAIMarketplaceTargeting::getGeoTargeting() const {
    return m_geo_targeting;
}
void OAIMarketplaceTargeting::setGeoTargeting(const OAICriteriaTargeting &geo_targeting) {
    m_geo_targeting = geo_targeting;
    m_geo_targeting_isSet = true;
}

bool OAIMarketplaceTargeting::is_geo_targeting_Set() const{
    return m_geo_targeting_isSet;
}

bool OAIMarketplaceTargeting::is_geo_targeting_Valid() const{
    return m_geo_targeting_isValid;
}

OAIInventorySizeTargeting OAIMarketplaceTargeting::getInventorySizeTargeting() const {
    return m_inventory_size_targeting;
}
void OAIMarketplaceTargeting::setInventorySizeTargeting(const OAIInventorySizeTargeting &inventory_size_targeting) {
    m_inventory_size_targeting = inventory_size_targeting;
    m_inventory_size_targeting_isSet = true;
}

bool OAIMarketplaceTargeting::is_inventory_size_targeting_Set() const{
    return m_inventory_size_targeting_isSet;
}

bool OAIMarketplaceTargeting::is_inventory_size_targeting_Valid() const{
    return m_inventory_size_targeting_isValid;
}

OAIInventoryTypeTargeting OAIMarketplaceTargeting::getInventoryTypeTargeting() const {
    return m_inventory_type_targeting;
}
void OAIMarketplaceTargeting::setInventoryTypeTargeting(const OAIInventoryTypeTargeting &inventory_type_targeting) {
    m_inventory_type_targeting = inventory_type_targeting;
    m_inventory_type_targeting_isSet = true;
}

bool OAIMarketplaceTargeting::is_inventory_type_targeting_Set() const{
    return m_inventory_type_targeting_isSet;
}

bool OAIMarketplaceTargeting::is_inventory_type_targeting_Valid() const{
    return m_inventory_type_targeting_isValid;
}

OAIPlacementTargeting OAIMarketplaceTargeting::getPlacementTargeting() const {
    return m_placement_targeting;
}
void OAIMarketplaceTargeting::setPlacementTargeting(const OAIPlacementTargeting &placement_targeting) {
    m_placement_targeting = placement_targeting;
    m_placement_targeting_isSet = true;
}

bool OAIMarketplaceTargeting::is_placement_targeting_Set() const{
    return m_placement_targeting_isSet;
}

bool OAIMarketplaceTargeting::is_placement_targeting_Valid() const{
    return m_placement_targeting_isValid;
}

OAITechnologyTargeting OAIMarketplaceTargeting::getTechnologyTargeting() const {
    return m_technology_targeting;
}
void OAIMarketplaceTargeting::setTechnologyTargeting(const OAITechnologyTargeting &technology_targeting) {
    m_technology_targeting = technology_targeting;
    m_technology_targeting_isSet = true;
}

bool OAIMarketplaceTargeting::is_technology_targeting_Set() const{
    return m_technology_targeting_isSet;
}

bool OAIMarketplaceTargeting::is_technology_targeting_Valid() const{
    return m_technology_targeting_isValid;
}

OAICriteriaTargeting OAIMarketplaceTargeting::getUserListTargeting() const {
    return m_user_list_targeting;
}
void OAIMarketplaceTargeting::setUserListTargeting(const OAICriteriaTargeting &user_list_targeting) {
    m_user_list_targeting = user_list_targeting;
    m_user_list_targeting_isSet = true;
}

bool OAIMarketplaceTargeting::is_user_list_targeting_Set() const{
    return m_user_list_targeting_isSet;
}

bool OAIMarketplaceTargeting::is_user_list_targeting_Valid() const{
    return m_user_list_targeting_isValid;
}

OAIVideoTargeting OAIMarketplaceTargeting::getVideoTargeting() const {
    return m_video_targeting;
}
void OAIMarketplaceTargeting::setVideoTargeting(const OAIVideoTargeting &video_targeting) {
    m_video_targeting = video_targeting;
    m_video_targeting_isSet = true;
}

bool OAIMarketplaceTargeting::is_video_targeting_Set() const{
    return m_video_targeting_isSet;
}

bool OAIMarketplaceTargeting::is_video_targeting_Valid() const{
    return m_video_targeting_isValid;
}

bool OAIMarketplaceTargeting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_daypart_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_size_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_type_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_technology_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_list_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketplaceTargeting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
