/**
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFinalizedDeal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFinalizedDeal::OAIFinalizedDeal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFinalizedDeal::OAIFinalizedDeal() {
    this->initializeModel();
}

OAIFinalizedDeal::~OAIFinalizedDeal() {}

void OAIFinalizedDeal::initializeModel() {

    m_deal_isSet = false;
    m_deal_isValid = false;

    m_deal_pausing_info_isSet = false;
    m_deal_pausing_info_isValid = false;

    m_deal_serving_status_isSet = false;
    m_deal_serving_status_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ready_to_serve_isSet = false;
    m_ready_to_serve_isValid = false;

    m_rtb_metrics_isSet = false;
    m_rtb_metrics_isValid = false;
}

void OAIFinalizedDeal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFinalizedDeal::fromJsonObject(QJsonObject json) {

    m_deal_isValid = ::OpenAPI::fromJsonValue(m_deal, json[QString("deal")]);
    m_deal_isSet = !json[QString("deal")].isNull() && m_deal_isValid;

    m_deal_pausing_info_isValid = ::OpenAPI::fromJsonValue(m_deal_pausing_info, json[QString("dealPausingInfo")]);
    m_deal_pausing_info_isSet = !json[QString("dealPausingInfo")].isNull() && m_deal_pausing_info_isValid;

    m_deal_serving_status_isValid = ::OpenAPI::fromJsonValue(m_deal_serving_status, json[QString("dealServingStatus")]);
    m_deal_serving_status_isSet = !json[QString("dealServingStatus")].isNull() && m_deal_serving_status_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ready_to_serve_isValid = ::OpenAPI::fromJsonValue(m_ready_to_serve, json[QString("readyToServe")]);
    m_ready_to_serve_isSet = !json[QString("readyToServe")].isNull() && m_ready_to_serve_isValid;

    m_rtb_metrics_isValid = ::OpenAPI::fromJsonValue(m_rtb_metrics, json[QString("rtbMetrics")]);
    m_rtb_metrics_isSet = !json[QString("rtbMetrics")].isNull() && m_rtb_metrics_isValid;
}

QString OAIFinalizedDeal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFinalizedDeal::asJsonObject() const {
    QJsonObject obj;
    if (m_deal.isSet()) {
        obj.insert(QString("deal"), ::OpenAPI::toJsonValue(m_deal));
    }
    if (m_deal_pausing_info.isSet()) {
        obj.insert(QString("dealPausingInfo"), ::OpenAPI::toJsonValue(m_deal_pausing_info));
    }
    if (m_deal_serving_status_isSet) {
        obj.insert(QString("dealServingStatus"), ::OpenAPI::toJsonValue(m_deal_serving_status));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ready_to_serve_isSet) {
        obj.insert(QString("readyToServe"), ::OpenAPI::toJsonValue(m_ready_to_serve));
    }
    if (m_rtb_metrics.isSet()) {
        obj.insert(QString("rtbMetrics"), ::OpenAPI::toJsonValue(m_rtb_metrics));
    }
    return obj;
}

OAIDeal OAIFinalizedDeal::getDeal() const {
    return m_deal;
}
void OAIFinalizedDeal::setDeal(const OAIDeal &deal) {
    m_deal = deal;
    m_deal_isSet = true;
}

bool OAIFinalizedDeal::is_deal_Set() const{
    return m_deal_isSet;
}

bool OAIFinalizedDeal::is_deal_Valid() const{
    return m_deal_isValid;
}

OAIDealPausingInfo OAIFinalizedDeal::getDealPausingInfo() const {
    return m_deal_pausing_info;
}
void OAIFinalizedDeal::setDealPausingInfo(const OAIDealPausingInfo &deal_pausing_info) {
    m_deal_pausing_info = deal_pausing_info;
    m_deal_pausing_info_isSet = true;
}

bool OAIFinalizedDeal::is_deal_pausing_info_Set() const{
    return m_deal_pausing_info_isSet;
}

bool OAIFinalizedDeal::is_deal_pausing_info_Valid() const{
    return m_deal_pausing_info_isValid;
}

QString OAIFinalizedDeal::getDealServingStatus() const {
    return m_deal_serving_status;
}
void OAIFinalizedDeal::setDealServingStatus(const QString &deal_serving_status) {
    m_deal_serving_status = deal_serving_status;
    m_deal_serving_status_isSet = true;
}

bool OAIFinalizedDeal::is_deal_serving_status_Set() const{
    return m_deal_serving_status_isSet;
}

bool OAIFinalizedDeal::is_deal_serving_status_Valid() const{
    return m_deal_serving_status_isValid;
}

QString OAIFinalizedDeal::getName() const {
    return m_name;
}
void OAIFinalizedDeal::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFinalizedDeal::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFinalizedDeal::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIFinalizedDeal::isReadyToServe() const {
    return m_ready_to_serve;
}
void OAIFinalizedDeal::setReadyToServe(const bool &ready_to_serve) {
    m_ready_to_serve = ready_to_serve;
    m_ready_to_serve_isSet = true;
}

bool OAIFinalizedDeal::is_ready_to_serve_Set() const{
    return m_ready_to_serve_isSet;
}

bool OAIFinalizedDeal::is_ready_to_serve_Valid() const{
    return m_ready_to_serve_isValid;
}

OAIRtbMetrics OAIFinalizedDeal::getRtbMetrics() const {
    return m_rtb_metrics;
}
void OAIFinalizedDeal::setRtbMetrics(const OAIRtbMetrics &rtb_metrics) {
    m_rtb_metrics = rtb_metrics;
    m_rtb_metrics_isSet = true;
}

bool OAIFinalizedDeal::is_rtb_metrics_Set() const{
    return m_rtb_metrics_isSet;
}

bool OAIFinalizedDeal::is_rtb_metrics_Valid() const{
    return m_rtb_metrics_isValid;
}

bool OAIFinalizedDeal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deal_pausing_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deal_serving_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ready_to_serve_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rtb_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFinalizedDeal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
