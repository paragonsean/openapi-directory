/**
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINote::OAINote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINote::OAINote() {
    this->initializeModel();
}

OAINote::~OAINote() {}

void OAINote::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_creator_role_isSet = false;
    m_creator_role_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;
}

void OAINote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINote::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_creator_role_isValid = ::OpenAPI::fromJsonValue(m_creator_role, json[QString("creatorRole")]);
    m_creator_role_isSet = !json[QString("creatorRole")].isNull() && m_creator_role_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;
}

QString OAINote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINote::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_creator_role_isSet) {
        obj.insert(QString("creatorRole"), ::OpenAPI::toJsonValue(m_creator_role));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    return obj;
}

QString OAINote::getCreateTime() const {
    return m_create_time;
}
void OAINote::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAINote::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAINote::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAINote::getCreatorRole() const {
    return m_creator_role;
}
void OAINote::setCreatorRole(const QString &creator_role) {
    m_creator_role = creator_role;
    m_creator_role_isSet = true;
}

bool OAINote::is_creator_role_Set() const{
    return m_creator_role_isSet;
}

bool OAINote::is_creator_role_Valid() const{
    return m_creator_role_isValid;
}

QString OAINote::getNote() const {
    return m_note;
}
void OAINote::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAINote::is_note_Set() const{
    return m_note_isSet;
}

bool OAINote::is_note_Valid() const{
    return m_note_isValid;
}

bool OAINote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
