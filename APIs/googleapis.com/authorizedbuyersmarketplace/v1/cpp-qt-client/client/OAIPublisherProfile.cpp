/**
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublisherProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublisherProfile::OAIPublisherProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublisherProfile::OAIPublisherProfile() {
    this->initializeModel();
}

OAIPublisherProfile::~OAIPublisherProfile() {}

void OAIPublisherProfile::initializeModel() {

    m_audience_description_isSet = false;
    m_audience_description_isValid = false;

    m_direct_deals_contact_isSet = false;
    m_direct_deals_contact_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_domains_isSet = false;
    m_domains_isValid = false;

    m_is_parent_isSet = false;
    m_is_parent_isValid = false;

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_media_kit_url_isSet = false;
    m_media_kit_url_isValid = false;

    m_mobile_apps_isSet = false;
    m_mobile_apps_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_overview_isSet = false;
    m_overview_isValid = false;

    m_pitch_statement_isSet = false;
    m_pitch_statement_isValid = false;

    m_programmatic_deals_contact_isSet = false;
    m_programmatic_deals_contact_isValid = false;

    m_publisher_code_isSet = false;
    m_publisher_code_isValid = false;

    m_sample_page_url_isSet = false;
    m_sample_page_url_isValid = false;

    m_top_headlines_isSet = false;
    m_top_headlines_isValid = false;
}

void OAIPublisherProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublisherProfile::fromJsonObject(QJsonObject json) {

    m_audience_description_isValid = ::OpenAPI::fromJsonValue(m_audience_description, json[QString("audienceDescription")]);
    m_audience_description_isSet = !json[QString("audienceDescription")].isNull() && m_audience_description_isValid;

    m_direct_deals_contact_isValid = ::OpenAPI::fromJsonValue(m_direct_deals_contact, json[QString("directDealsContact")]);
    m_direct_deals_contact_isSet = !json[QString("directDealsContact")].isNull() && m_direct_deals_contact_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_domains_isValid = ::OpenAPI::fromJsonValue(m_domains, json[QString("domains")]);
    m_domains_isSet = !json[QString("domains")].isNull() && m_domains_isValid;

    m_is_parent_isValid = ::OpenAPI::fromJsonValue(m_is_parent, json[QString("isParent")]);
    m_is_parent_isSet = !json[QString("isParent")].isNull() && m_is_parent_isValid;

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("logoUrl")]);
    m_logo_url_isSet = !json[QString("logoUrl")].isNull() && m_logo_url_isValid;

    m_media_kit_url_isValid = ::OpenAPI::fromJsonValue(m_media_kit_url, json[QString("mediaKitUrl")]);
    m_media_kit_url_isSet = !json[QString("mediaKitUrl")].isNull() && m_media_kit_url_isValid;

    m_mobile_apps_isValid = ::OpenAPI::fromJsonValue(m_mobile_apps, json[QString("mobileApps")]);
    m_mobile_apps_isSet = !json[QString("mobileApps")].isNull() && m_mobile_apps_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_overview_isValid = ::OpenAPI::fromJsonValue(m_overview, json[QString("overview")]);
    m_overview_isSet = !json[QString("overview")].isNull() && m_overview_isValid;

    m_pitch_statement_isValid = ::OpenAPI::fromJsonValue(m_pitch_statement, json[QString("pitchStatement")]);
    m_pitch_statement_isSet = !json[QString("pitchStatement")].isNull() && m_pitch_statement_isValid;

    m_programmatic_deals_contact_isValid = ::OpenAPI::fromJsonValue(m_programmatic_deals_contact, json[QString("programmaticDealsContact")]);
    m_programmatic_deals_contact_isSet = !json[QString("programmaticDealsContact")].isNull() && m_programmatic_deals_contact_isValid;

    m_publisher_code_isValid = ::OpenAPI::fromJsonValue(m_publisher_code, json[QString("publisherCode")]);
    m_publisher_code_isSet = !json[QString("publisherCode")].isNull() && m_publisher_code_isValid;

    m_sample_page_url_isValid = ::OpenAPI::fromJsonValue(m_sample_page_url, json[QString("samplePageUrl")]);
    m_sample_page_url_isSet = !json[QString("samplePageUrl")].isNull() && m_sample_page_url_isValid;

    m_top_headlines_isValid = ::OpenAPI::fromJsonValue(m_top_headlines, json[QString("topHeadlines")]);
    m_top_headlines_isSet = !json[QString("topHeadlines")].isNull() && m_top_headlines_isValid;
}

QString OAIPublisherProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublisherProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_audience_description_isSet) {
        obj.insert(QString("audienceDescription"), ::OpenAPI::toJsonValue(m_audience_description));
    }
    if (m_direct_deals_contact_isSet) {
        obj.insert(QString("directDealsContact"), ::OpenAPI::toJsonValue(m_direct_deals_contact));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_domains.size() > 0) {
        obj.insert(QString("domains"), ::OpenAPI::toJsonValue(m_domains));
    }
    if (m_is_parent_isSet) {
        obj.insert(QString("isParent"), ::OpenAPI::toJsonValue(m_is_parent));
    }
    if (m_logo_url_isSet) {
        obj.insert(QString("logoUrl"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_media_kit_url_isSet) {
        obj.insert(QString("mediaKitUrl"), ::OpenAPI::toJsonValue(m_media_kit_url));
    }
    if (m_mobile_apps.size() > 0) {
        obj.insert(QString("mobileApps"), ::OpenAPI::toJsonValue(m_mobile_apps));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_overview_isSet) {
        obj.insert(QString("overview"), ::OpenAPI::toJsonValue(m_overview));
    }
    if (m_pitch_statement_isSet) {
        obj.insert(QString("pitchStatement"), ::OpenAPI::toJsonValue(m_pitch_statement));
    }
    if (m_programmatic_deals_contact_isSet) {
        obj.insert(QString("programmaticDealsContact"), ::OpenAPI::toJsonValue(m_programmatic_deals_contact));
    }
    if (m_publisher_code_isSet) {
        obj.insert(QString("publisherCode"), ::OpenAPI::toJsonValue(m_publisher_code));
    }
    if (m_sample_page_url_isSet) {
        obj.insert(QString("samplePageUrl"), ::OpenAPI::toJsonValue(m_sample_page_url));
    }
    if (m_top_headlines.size() > 0) {
        obj.insert(QString("topHeadlines"), ::OpenAPI::toJsonValue(m_top_headlines));
    }
    return obj;
}

QString OAIPublisherProfile::getAudienceDescription() const {
    return m_audience_description;
}
void OAIPublisherProfile::setAudienceDescription(const QString &audience_description) {
    m_audience_description = audience_description;
    m_audience_description_isSet = true;
}

bool OAIPublisherProfile::is_audience_description_Set() const{
    return m_audience_description_isSet;
}

bool OAIPublisherProfile::is_audience_description_Valid() const{
    return m_audience_description_isValid;
}

QString OAIPublisherProfile::getDirectDealsContact() const {
    return m_direct_deals_contact;
}
void OAIPublisherProfile::setDirectDealsContact(const QString &direct_deals_contact) {
    m_direct_deals_contact = direct_deals_contact;
    m_direct_deals_contact_isSet = true;
}

bool OAIPublisherProfile::is_direct_deals_contact_Set() const{
    return m_direct_deals_contact_isSet;
}

bool OAIPublisherProfile::is_direct_deals_contact_Valid() const{
    return m_direct_deals_contact_isValid;
}

QString OAIPublisherProfile::getDisplayName() const {
    return m_display_name;
}
void OAIPublisherProfile::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPublisherProfile::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPublisherProfile::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<QString> OAIPublisherProfile::getDomains() const {
    return m_domains;
}
void OAIPublisherProfile::setDomains(const QList<QString> &domains) {
    m_domains = domains;
    m_domains_isSet = true;
}

bool OAIPublisherProfile::is_domains_Set() const{
    return m_domains_isSet;
}

bool OAIPublisherProfile::is_domains_Valid() const{
    return m_domains_isValid;
}

bool OAIPublisherProfile::isIsParent() const {
    return m_is_parent;
}
void OAIPublisherProfile::setIsParent(const bool &is_parent) {
    m_is_parent = is_parent;
    m_is_parent_isSet = true;
}

bool OAIPublisherProfile::is_is_parent_Set() const{
    return m_is_parent_isSet;
}

bool OAIPublisherProfile::is_is_parent_Valid() const{
    return m_is_parent_isValid;
}

QString OAIPublisherProfile::getLogoUrl() const {
    return m_logo_url;
}
void OAIPublisherProfile::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAIPublisherProfile::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAIPublisherProfile::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

QString OAIPublisherProfile::getMediaKitUrl() const {
    return m_media_kit_url;
}
void OAIPublisherProfile::setMediaKitUrl(const QString &media_kit_url) {
    m_media_kit_url = media_kit_url;
    m_media_kit_url_isSet = true;
}

bool OAIPublisherProfile::is_media_kit_url_Set() const{
    return m_media_kit_url_isSet;
}

bool OAIPublisherProfile::is_media_kit_url_Valid() const{
    return m_media_kit_url_isValid;
}

QList<OAIPublisherProfileMobileApplication> OAIPublisherProfile::getMobileApps() const {
    return m_mobile_apps;
}
void OAIPublisherProfile::setMobileApps(const QList<OAIPublisherProfileMobileApplication> &mobile_apps) {
    m_mobile_apps = mobile_apps;
    m_mobile_apps_isSet = true;
}

bool OAIPublisherProfile::is_mobile_apps_Set() const{
    return m_mobile_apps_isSet;
}

bool OAIPublisherProfile::is_mobile_apps_Valid() const{
    return m_mobile_apps_isValid;
}

QString OAIPublisherProfile::getName() const {
    return m_name;
}
void OAIPublisherProfile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPublisherProfile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPublisherProfile::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPublisherProfile::getOverview() const {
    return m_overview;
}
void OAIPublisherProfile::setOverview(const QString &overview) {
    m_overview = overview;
    m_overview_isSet = true;
}

bool OAIPublisherProfile::is_overview_Set() const{
    return m_overview_isSet;
}

bool OAIPublisherProfile::is_overview_Valid() const{
    return m_overview_isValid;
}

QString OAIPublisherProfile::getPitchStatement() const {
    return m_pitch_statement;
}
void OAIPublisherProfile::setPitchStatement(const QString &pitch_statement) {
    m_pitch_statement = pitch_statement;
    m_pitch_statement_isSet = true;
}

bool OAIPublisherProfile::is_pitch_statement_Set() const{
    return m_pitch_statement_isSet;
}

bool OAIPublisherProfile::is_pitch_statement_Valid() const{
    return m_pitch_statement_isValid;
}

QString OAIPublisherProfile::getProgrammaticDealsContact() const {
    return m_programmatic_deals_contact;
}
void OAIPublisherProfile::setProgrammaticDealsContact(const QString &programmatic_deals_contact) {
    m_programmatic_deals_contact = programmatic_deals_contact;
    m_programmatic_deals_contact_isSet = true;
}

bool OAIPublisherProfile::is_programmatic_deals_contact_Set() const{
    return m_programmatic_deals_contact_isSet;
}

bool OAIPublisherProfile::is_programmatic_deals_contact_Valid() const{
    return m_programmatic_deals_contact_isValid;
}

QString OAIPublisherProfile::getPublisherCode() const {
    return m_publisher_code;
}
void OAIPublisherProfile::setPublisherCode(const QString &publisher_code) {
    m_publisher_code = publisher_code;
    m_publisher_code_isSet = true;
}

bool OAIPublisherProfile::is_publisher_code_Set() const{
    return m_publisher_code_isSet;
}

bool OAIPublisherProfile::is_publisher_code_Valid() const{
    return m_publisher_code_isValid;
}

QString OAIPublisherProfile::getSamplePageUrl() const {
    return m_sample_page_url;
}
void OAIPublisherProfile::setSamplePageUrl(const QString &sample_page_url) {
    m_sample_page_url = sample_page_url;
    m_sample_page_url_isSet = true;
}

bool OAIPublisherProfile::is_sample_page_url_Set() const{
    return m_sample_page_url_isSet;
}

bool OAIPublisherProfile::is_sample_page_url_Valid() const{
    return m_sample_page_url_isValid;
}

QList<QString> OAIPublisherProfile::getTopHeadlines() const {
    return m_top_headlines;
}
void OAIPublisherProfile::setTopHeadlines(const QList<QString> &top_headlines) {
    m_top_headlines = top_headlines;
    m_top_headlines_isSet = true;
}

bool OAIPublisherProfile::is_top_headlines_Set() const{
    return m_top_headlines_isSet;
}

bool OAIPublisherProfile::is_top_headlines_Valid() const{
    return m_top_headlines_isValid;
}

bool OAIPublisherProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audience_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_deals_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_kit_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_apps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitch_statement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_programmatic_deals_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_page_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_headlines.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublisherProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
