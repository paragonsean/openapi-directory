/**
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeal::OAIDeal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeal::OAIDeal() {
    this->initializeModel();
}

OAIDeal::~OAIDeal() {}

void OAIDeal::initializeModel() {

    m_billed_buyer_isSet = false;
    m_billed_buyer_isValid = false;

    m_buyer_isSet = false;
    m_buyer_isValid = false;

    m_client_isSet = false;
    m_client_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_creative_requirements_isSet = false;
    m_creative_requirements_isValid = false;

    m_deal_type_isSet = false;
    m_deal_type_isValid = false;

    m_delivery_control_isSet = false;
    m_delivery_control_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_estimated_gross_spend_isSet = false;
    m_estimated_gross_spend_isValid = false;

    m_flight_end_time_isSet = false;
    m_flight_end_time_isValid = false;

    m_flight_start_time_isSet = false;
    m_flight_start_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_preferred_deal_terms_isSet = false;
    m_preferred_deal_terms_isValid = false;

    m_private_auction_terms_isSet = false;
    m_private_auction_terms_isValid = false;

    m_programmatic_guaranteed_terms_isSet = false;
    m_programmatic_guaranteed_terms_isValid = false;

    m_proposal_revision_isSet = false;
    m_proposal_revision_isValid = false;

    m_publisher_profile_isSet = false;
    m_publisher_profile_isValid = false;

    m_seller_time_zone_isSet = false;
    m_seller_time_zone_isValid = false;

    m_targeting_isSet = false;
    m_targeting_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIDeal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeal::fromJsonObject(QJsonObject json) {

    m_billed_buyer_isValid = ::OpenAPI::fromJsonValue(m_billed_buyer, json[QString("billedBuyer")]);
    m_billed_buyer_isSet = !json[QString("billedBuyer")].isNull() && m_billed_buyer_isValid;

    m_buyer_isValid = ::OpenAPI::fromJsonValue(m_buyer, json[QString("buyer")]);
    m_buyer_isSet = !json[QString("buyer")].isNull() && m_buyer_isValid;

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_creative_requirements_isValid = ::OpenAPI::fromJsonValue(m_creative_requirements, json[QString("creativeRequirements")]);
    m_creative_requirements_isSet = !json[QString("creativeRequirements")].isNull() && m_creative_requirements_isValid;

    m_deal_type_isValid = ::OpenAPI::fromJsonValue(m_deal_type, json[QString("dealType")]);
    m_deal_type_isSet = !json[QString("dealType")].isNull() && m_deal_type_isValid;

    m_delivery_control_isValid = ::OpenAPI::fromJsonValue(m_delivery_control, json[QString("deliveryControl")]);
    m_delivery_control_isSet = !json[QString("deliveryControl")].isNull() && m_delivery_control_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_estimated_gross_spend_isValid = ::OpenAPI::fromJsonValue(m_estimated_gross_spend, json[QString("estimatedGrossSpend")]);
    m_estimated_gross_spend_isSet = !json[QString("estimatedGrossSpend")].isNull() && m_estimated_gross_spend_isValid;

    m_flight_end_time_isValid = ::OpenAPI::fromJsonValue(m_flight_end_time, json[QString("flightEndTime")]);
    m_flight_end_time_isSet = !json[QString("flightEndTime")].isNull() && m_flight_end_time_isValid;

    m_flight_start_time_isValid = ::OpenAPI::fromJsonValue(m_flight_start_time, json[QString("flightStartTime")]);
    m_flight_start_time_isSet = !json[QString("flightStartTime")].isNull() && m_flight_start_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_preferred_deal_terms_isValid = ::OpenAPI::fromJsonValue(m_preferred_deal_terms, json[QString("preferredDealTerms")]);
    m_preferred_deal_terms_isSet = !json[QString("preferredDealTerms")].isNull() && m_preferred_deal_terms_isValid;

    m_private_auction_terms_isValid = ::OpenAPI::fromJsonValue(m_private_auction_terms, json[QString("privateAuctionTerms")]);
    m_private_auction_terms_isSet = !json[QString("privateAuctionTerms")].isNull() && m_private_auction_terms_isValid;

    m_programmatic_guaranteed_terms_isValid = ::OpenAPI::fromJsonValue(m_programmatic_guaranteed_terms, json[QString("programmaticGuaranteedTerms")]);
    m_programmatic_guaranteed_terms_isSet = !json[QString("programmaticGuaranteedTerms")].isNull() && m_programmatic_guaranteed_terms_isValid;

    m_proposal_revision_isValid = ::OpenAPI::fromJsonValue(m_proposal_revision, json[QString("proposalRevision")]);
    m_proposal_revision_isSet = !json[QString("proposalRevision")].isNull() && m_proposal_revision_isValid;

    m_publisher_profile_isValid = ::OpenAPI::fromJsonValue(m_publisher_profile, json[QString("publisherProfile")]);
    m_publisher_profile_isSet = !json[QString("publisherProfile")].isNull() && m_publisher_profile_isValid;

    m_seller_time_zone_isValid = ::OpenAPI::fromJsonValue(m_seller_time_zone, json[QString("sellerTimeZone")]);
    m_seller_time_zone_isSet = !json[QString("sellerTimeZone")].isNull() && m_seller_time_zone_isValid;

    m_targeting_isValid = ::OpenAPI::fromJsonValue(m_targeting, json[QString("targeting")]);
    m_targeting_isSet = !json[QString("targeting")].isNull() && m_targeting_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIDeal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeal::asJsonObject() const {
    QJsonObject obj;
    if (m_billed_buyer_isSet) {
        obj.insert(QString("billedBuyer"), ::OpenAPI::toJsonValue(m_billed_buyer));
    }
    if (m_buyer_isSet) {
        obj.insert(QString("buyer"), ::OpenAPI::toJsonValue(m_buyer));
    }
    if (m_client_isSet) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_creative_requirements.isSet()) {
        obj.insert(QString("creativeRequirements"), ::OpenAPI::toJsonValue(m_creative_requirements));
    }
    if (m_deal_type_isSet) {
        obj.insert(QString("dealType"), ::OpenAPI::toJsonValue(m_deal_type));
    }
    if (m_delivery_control.isSet()) {
        obj.insert(QString("deliveryControl"), ::OpenAPI::toJsonValue(m_delivery_control));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_estimated_gross_spend.isSet()) {
        obj.insert(QString("estimatedGrossSpend"), ::OpenAPI::toJsonValue(m_estimated_gross_spend));
    }
    if (m_flight_end_time_isSet) {
        obj.insert(QString("flightEndTime"), ::OpenAPI::toJsonValue(m_flight_end_time));
    }
    if (m_flight_start_time_isSet) {
        obj.insert(QString("flightStartTime"), ::OpenAPI::toJsonValue(m_flight_start_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_preferred_deal_terms.isSet()) {
        obj.insert(QString("preferredDealTerms"), ::OpenAPI::toJsonValue(m_preferred_deal_terms));
    }
    if (m_private_auction_terms.isSet()) {
        obj.insert(QString("privateAuctionTerms"), ::OpenAPI::toJsonValue(m_private_auction_terms));
    }
    if (m_programmatic_guaranteed_terms.isSet()) {
        obj.insert(QString("programmaticGuaranteedTerms"), ::OpenAPI::toJsonValue(m_programmatic_guaranteed_terms));
    }
    if (m_proposal_revision_isSet) {
        obj.insert(QString("proposalRevision"), ::OpenAPI::toJsonValue(m_proposal_revision));
    }
    if (m_publisher_profile_isSet) {
        obj.insert(QString("publisherProfile"), ::OpenAPI::toJsonValue(m_publisher_profile));
    }
    if (m_seller_time_zone.isSet()) {
        obj.insert(QString("sellerTimeZone"), ::OpenAPI::toJsonValue(m_seller_time_zone));
    }
    if (m_targeting.isSet()) {
        obj.insert(QString("targeting"), ::OpenAPI::toJsonValue(m_targeting));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIDeal::getBilledBuyer() const {
    return m_billed_buyer;
}
void OAIDeal::setBilledBuyer(const QString &billed_buyer) {
    m_billed_buyer = billed_buyer;
    m_billed_buyer_isSet = true;
}

bool OAIDeal::is_billed_buyer_Set() const{
    return m_billed_buyer_isSet;
}

bool OAIDeal::is_billed_buyer_Valid() const{
    return m_billed_buyer_isValid;
}

QString OAIDeal::getBuyer() const {
    return m_buyer;
}
void OAIDeal::setBuyer(const QString &buyer) {
    m_buyer = buyer;
    m_buyer_isSet = true;
}

bool OAIDeal::is_buyer_Set() const{
    return m_buyer_isSet;
}

bool OAIDeal::is_buyer_Valid() const{
    return m_buyer_isValid;
}

QString OAIDeal::getClient() const {
    return m_client;
}
void OAIDeal::setClient(const QString &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIDeal::is_client_Set() const{
    return m_client_isSet;
}

bool OAIDeal::is_client_Valid() const{
    return m_client_isValid;
}

QString OAIDeal::getCreateTime() const {
    return m_create_time;
}
void OAIDeal::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIDeal::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIDeal::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAICreativeRequirements OAIDeal::getCreativeRequirements() const {
    return m_creative_requirements;
}
void OAIDeal::setCreativeRequirements(const OAICreativeRequirements &creative_requirements) {
    m_creative_requirements = creative_requirements;
    m_creative_requirements_isSet = true;
}

bool OAIDeal::is_creative_requirements_Set() const{
    return m_creative_requirements_isSet;
}

bool OAIDeal::is_creative_requirements_Valid() const{
    return m_creative_requirements_isValid;
}

QString OAIDeal::getDealType() const {
    return m_deal_type;
}
void OAIDeal::setDealType(const QString &deal_type) {
    m_deal_type = deal_type;
    m_deal_type_isSet = true;
}

bool OAIDeal::is_deal_type_Set() const{
    return m_deal_type_isSet;
}

bool OAIDeal::is_deal_type_Valid() const{
    return m_deal_type_isValid;
}

OAIDeliveryControl OAIDeal::getDeliveryControl() const {
    return m_delivery_control;
}
void OAIDeal::setDeliveryControl(const OAIDeliveryControl &delivery_control) {
    m_delivery_control = delivery_control;
    m_delivery_control_isSet = true;
}

bool OAIDeal::is_delivery_control_Set() const{
    return m_delivery_control_isSet;
}

bool OAIDeal::is_delivery_control_Valid() const{
    return m_delivery_control_isValid;
}

QString OAIDeal::getDescription() const {
    return m_description;
}
void OAIDeal::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDeal::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDeal::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDeal::getDisplayName() const {
    return m_display_name;
}
void OAIDeal::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDeal::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDeal::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIMoney OAIDeal::getEstimatedGrossSpend() const {
    return m_estimated_gross_spend;
}
void OAIDeal::setEstimatedGrossSpend(const OAIMoney &estimated_gross_spend) {
    m_estimated_gross_spend = estimated_gross_spend;
    m_estimated_gross_spend_isSet = true;
}

bool OAIDeal::is_estimated_gross_spend_Set() const{
    return m_estimated_gross_spend_isSet;
}

bool OAIDeal::is_estimated_gross_spend_Valid() const{
    return m_estimated_gross_spend_isValid;
}

QString OAIDeal::getFlightEndTime() const {
    return m_flight_end_time;
}
void OAIDeal::setFlightEndTime(const QString &flight_end_time) {
    m_flight_end_time = flight_end_time;
    m_flight_end_time_isSet = true;
}

bool OAIDeal::is_flight_end_time_Set() const{
    return m_flight_end_time_isSet;
}

bool OAIDeal::is_flight_end_time_Valid() const{
    return m_flight_end_time_isValid;
}

QString OAIDeal::getFlightStartTime() const {
    return m_flight_start_time;
}
void OAIDeal::setFlightStartTime(const QString &flight_start_time) {
    m_flight_start_time = flight_start_time;
    m_flight_start_time_isSet = true;
}

bool OAIDeal::is_flight_start_time_Set() const{
    return m_flight_start_time_isSet;
}

bool OAIDeal::is_flight_start_time_Valid() const{
    return m_flight_start_time_isValid;
}

QString OAIDeal::getName() const {
    return m_name;
}
void OAIDeal::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeal::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeal::is_name_Valid() const{
    return m_name_isValid;
}

OAIPreferredDealTerms OAIDeal::getPreferredDealTerms() const {
    return m_preferred_deal_terms;
}
void OAIDeal::setPreferredDealTerms(const OAIPreferredDealTerms &preferred_deal_terms) {
    m_preferred_deal_terms = preferred_deal_terms;
    m_preferred_deal_terms_isSet = true;
}

bool OAIDeal::is_preferred_deal_terms_Set() const{
    return m_preferred_deal_terms_isSet;
}

bool OAIDeal::is_preferred_deal_terms_Valid() const{
    return m_preferred_deal_terms_isValid;
}

OAIPrivateAuctionTerms OAIDeal::getPrivateAuctionTerms() const {
    return m_private_auction_terms;
}
void OAIDeal::setPrivateAuctionTerms(const OAIPrivateAuctionTerms &private_auction_terms) {
    m_private_auction_terms = private_auction_terms;
    m_private_auction_terms_isSet = true;
}

bool OAIDeal::is_private_auction_terms_Set() const{
    return m_private_auction_terms_isSet;
}

bool OAIDeal::is_private_auction_terms_Valid() const{
    return m_private_auction_terms_isValid;
}

OAIProgrammaticGuaranteedTerms OAIDeal::getProgrammaticGuaranteedTerms() const {
    return m_programmatic_guaranteed_terms;
}
void OAIDeal::setProgrammaticGuaranteedTerms(const OAIProgrammaticGuaranteedTerms &programmatic_guaranteed_terms) {
    m_programmatic_guaranteed_terms = programmatic_guaranteed_terms;
    m_programmatic_guaranteed_terms_isSet = true;
}

bool OAIDeal::is_programmatic_guaranteed_terms_Set() const{
    return m_programmatic_guaranteed_terms_isSet;
}

bool OAIDeal::is_programmatic_guaranteed_terms_Valid() const{
    return m_programmatic_guaranteed_terms_isValid;
}

QString OAIDeal::getProposalRevision() const {
    return m_proposal_revision;
}
void OAIDeal::setProposalRevision(const QString &proposal_revision) {
    m_proposal_revision = proposal_revision;
    m_proposal_revision_isSet = true;
}

bool OAIDeal::is_proposal_revision_Set() const{
    return m_proposal_revision_isSet;
}

bool OAIDeal::is_proposal_revision_Valid() const{
    return m_proposal_revision_isValid;
}

QString OAIDeal::getPublisherProfile() const {
    return m_publisher_profile;
}
void OAIDeal::setPublisherProfile(const QString &publisher_profile) {
    m_publisher_profile = publisher_profile;
    m_publisher_profile_isSet = true;
}

bool OAIDeal::is_publisher_profile_Set() const{
    return m_publisher_profile_isSet;
}

bool OAIDeal::is_publisher_profile_Valid() const{
    return m_publisher_profile_isValid;
}

OAITimeZone OAIDeal::getSellerTimeZone() const {
    return m_seller_time_zone;
}
void OAIDeal::setSellerTimeZone(const OAITimeZone &seller_time_zone) {
    m_seller_time_zone = seller_time_zone;
    m_seller_time_zone_isSet = true;
}

bool OAIDeal::is_seller_time_zone_Set() const{
    return m_seller_time_zone_isSet;
}

bool OAIDeal::is_seller_time_zone_Valid() const{
    return m_seller_time_zone_isValid;
}

OAIMarketplaceTargeting OAIDeal::getTargeting() const {
    return m_targeting;
}
void OAIDeal::setTargeting(const OAIMarketplaceTargeting &targeting) {
    m_targeting = targeting;
    m_targeting_isSet = true;
}

bool OAIDeal::is_targeting_Set() const{
    return m_targeting_isSet;
}

bool OAIDeal::is_targeting_Valid() const{
    return m_targeting_isValid;
}

QString OAIDeal::getUpdateTime() const {
    return m_update_time;
}
void OAIDeal::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIDeal::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIDeal::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIDeal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billed_buyer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_requirements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deal_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_gross_spend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_deal_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_auction_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_programmatic_guaranteed_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposal_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_time_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
