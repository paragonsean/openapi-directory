/**
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRtbMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRtbMetrics::OAIRtbMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRtbMetrics::OAIRtbMetrics() {
    this->initializeModel();
}

OAIRtbMetrics::~OAIRtbMetrics() {}

void OAIRtbMetrics::initializeModel() {

    m_ad_impressions7_days_isSet = false;
    m_ad_impressions7_days_isValid = false;

    m_bid_rate7_days_isSet = false;
    m_bid_rate7_days_isValid = false;

    m_bid_requests7_days_isSet = false;
    m_bid_requests7_days_isValid = false;

    m_bids7_days_isSet = false;
    m_bids7_days_isValid = false;

    m_filtered_bid_rate7_days_isSet = false;
    m_filtered_bid_rate7_days_isValid = false;

    m_must_bid_rate_current_month_isSet = false;
    m_must_bid_rate_current_month_isValid = false;
}

void OAIRtbMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRtbMetrics::fromJsonObject(QJsonObject json) {

    m_ad_impressions7_days_isValid = ::OpenAPI::fromJsonValue(m_ad_impressions7_days, json[QString("adImpressions7Days")]);
    m_ad_impressions7_days_isSet = !json[QString("adImpressions7Days")].isNull() && m_ad_impressions7_days_isValid;

    m_bid_rate7_days_isValid = ::OpenAPI::fromJsonValue(m_bid_rate7_days, json[QString("bidRate7Days")]);
    m_bid_rate7_days_isSet = !json[QString("bidRate7Days")].isNull() && m_bid_rate7_days_isValid;

    m_bid_requests7_days_isValid = ::OpenAPI::fromJsonValue(m_bid_requests7_days, json[QString("bidRequests7Days")]);
    m_bid_requests7_days_isSet = !json[QString("bidRequests7Days")].isNull() && m_bid_requests7_days_isValid;

    m_bids7_days_isValid = ::OpenAPI::fromJsonValue(m_bids7_days, json[QString("bids7Days")]);
    m_bids7_days_isSet = !json[QString("bids7Days")].isNull() && m_bids7_days_isValid;

    m_filtered_bid_rate7_days_isValid = ::OpenAPI::fromJsonValue(m_filtered_bid_rate7_days, json[QString("filteredBidRate7Days")]);
    m_filtered_bid_rate7_days_isSet = !json[QString("filteredBidRate7Days")].isNull() && m_filtered_bid_rate7_days_isValid;

    m_must_bid_rate_current_month_isValid = ::OpenAPI::fromJsonValue(m_must_bid_rate_current_month, json[QString("mustBidRateCurrentMonth")]);
    m_must_bid_rate_current_month_isSet = !json[QString("mustBidRateCurrentMonth")].isNull() && m_must_bid_rate_current_month_isValid;
}

QString OAIRtbMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRtbMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_impressions7_days_isSet) {
        obj.insert(QString("adImpressions7Days"), ::OpenAPI::toJsonValue(m_ad_impressions7_days));
    }
    if (m_bid_rate7_days_isSet) {
        obj.insert(QString("bidRate7Days"), ::OpenAPI::toJsonValue(m_bid_rate7_days));
    }
    if (m_bid_requests7_days_isSet) {
        obj.insert(QString("bidRequests7Days"), ::OpenAPI::toJsonValue(m_bid_requests7_days));
    }
    if (m_bids7_days_isSet) {
        obj.insert(QString("bids7Days"), ::OpenAPI::toJsonValue(m_bids7_days));
    }
    if (m_filtered_bid_rate7_days_isSet) {
        obj.insert(QString("filteredBidRate7Days"), ::OpenAPI::toJsonValue(m_filtered_bid_rate7_days));
    }
    if (m_must_bid_rate_current_month_isSet) {
        obj.insert(QString("mustBidRateCurrentMonth"), ::OpenAPI::toJsonValue(m_must_bid_rate_current_month));
    }
    return obj;
}

QString OAIRtbMetrics::getAdImpressions7Days() const {
    return m_ad_impressions7_days;
}
void OAIRtbMetrics::setAdImpressions7Days(const QString &ad_impressions7_days) {
    m_ad_impressions7_days = ad_impressions7_days;
    m_ad_impressions7_days_isSet = true;
}

bool OAIRtbMetrics::is_ad_impressions7_days_Set() const{
    return m_ad_impressions7_days_isSet;
}

bool OAIRtbMetrics::is_ad_impressions7_days_Valid() const{
    return m_ad_impressions7_days_isValid;
}

double OAIRtbMetrics::getBidRate7Days() const {
    return m_bid_rate7_days;
}
void OAIRtbMetrics::setBidRate7Days(const double &bid_rate7_days) {
    m_bid_rate7_days = bid_rate7_days;
    m_bid_rate7_days_isSet = true;
}

bool OAIRtbMetrics::is_bid_rate7_days_Set() const{
    return m_bid_rate7_days_isSet;
}

bool OAIRtbMetrics::is_bid_rate7_days_Valid() const{
    return m_bid_rate7_days_isValid;
}

QString OAIRtbMetrics::getBidRequests7Days() const {
    return m_bid_requests7_days;
}
void OAIRtbMetrics::setBidRequests7Days(const QString &bid_requests7_days) {
    m_bid_requests7_days = bid_requests7_days;
    m_bid_requests7_days_isSet = true;
}

bool OAIRtbMetrics::is_bid_requests7_days_Set() const{
    return m_bid_requests7_days_isSet;
}

bool OAIRtbMetrics::is_bid_requests7_days_Valid() const{
    return m_bid_requests7_days_isValid;
}

QString OAIRtbMetrics::getBids7Days() const {
    return m_bids7_days;
}
void OAIRtbMetrics::setBids7Days(const QString &bids7_days) {
    m_bids7_days = bids7_days;
    m_bids7_days_isSet = true;
}

bool OAIRtbMetrics::is_bids7_days_Set() const{
    return m_bids7_days_isSet;
}

bool OAIRtbMetrics::is_bids7_days_Valid() const{
    return m_bids7_days_isValid;
}

double OAIRtbMetrics::getFilteredBidRate7Days() const {
    return m_filtered_bid_rate7_days;
}
void OAIRtbMetrics::setFilteredBidRate7Days(const double &filtered_bid_rate7_days) {
    m_filtered_bid_rate7_days = filtered_bid_rate7_days;
    m_filtered_bid_rate7_days_isSet = true;
}

bool OAIRtbMetrics::is_filtered_bid_rate7_days_Set() const{
    return m_filtered_bid_rate7_days_isSet;
}

bool OAIRtbMetrics::is_filtered_bid_rate7_days_Valid() const{
    return m_filtered_bid_rate7_days_isValid;
}

double OAIRtbMetrics::getMustBidRateCurrentMonth() const {
    return m_must_bid_rate_current_month;
}
void OAIRtbMetrics::setMustBidRateCurrentMonth(const double &must_bid_rate_current_month) {
    m_must_bid_rate_current_month = must_bid_rate_current_month;
    m_must_bid_rate_current_month_isSet = true;
}

bool OAIRtbMetrics::is_must_bid_rate_current_month_Set() const{
    return m_must_bid_rate_current_month_isSet;
}

bool OAIRtbMetrics::is_must_bid_rate_current_month_Valid() const{
    return m_must_bid_rate_current_month_isValid;
}

bool OAIRtbMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_impressions7_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bid_rate7_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bid_requests7_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bids7_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filtered_bid_rate7_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_must_bid_rate_current_month_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRtbMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
