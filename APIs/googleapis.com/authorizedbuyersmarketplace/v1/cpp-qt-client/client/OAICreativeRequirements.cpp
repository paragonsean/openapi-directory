/**
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreativeRequirements.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreativeRequirements::OAICreativeRequirements(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreativeRequirements::OAICreativeRequirements() {
    this->initializeModel();
}

OAICreativeRequirements::~OAICreativeRequirements() {}

void OAICreativeRequirements::initializeModel() {

    m_creative_format_isSet = false;
    m_creative_format_isValid = false;

    m_creative_pre_approval_policy_isSet = false;
    m_creative_pre_approval_policy_isValid = false;

    m_creative_safe_frame_compatibility_isSet = false;
    m_creative_safe_frame_compatibility_isValid = false;

    m_max_ad_duration_ms_isSet = false;
    m_max_ad_duration_ms_isValid = false;

    m_programmatic_creative_source_isSet = false;
    m_programmatic_creative_source_isValid = false;

    m_skippable_ad_type_isSet = false;
    m_skippable_ad_type_isValid = false;
}

void OAICreativeRequirements::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreativeRequirements::fromJsonObject(QJsonObject json) {

    m_creative_format_isValid = ::OpenAPI::fromJsonValue(m_creative_format, json[QString("creativeFormat")]);
    m_creative_format_isSet = !json[QString("creativeFormat")].isNull() && m_creative_format_isValid;

    m_creative_pre_approval_policy_isValid = ::OpenAPI::fromJsonValue(m_creative_pre_approval_policy, json[QString("creativePreApprovalPolicy")]);
    m_creative_pre_approval_policy_isSet = !json[QString("creativePreApprovalPolicy")].isNull() && m_creative_pre_approval_policy_isValid;

    m_creative_safe_frame_compatibility_isValid = ::OpenAPI::fromJsonValue(m_creative_safe_frame_compatibility, json[QString("creativeSafeFrameCompatibility")]);
    m_creative_safe_frame_compatibility_isSet = !json[QString("creativeSafeFrameCompatibility")].isNull() && m_creative_safe_frame_compatibility_isValid;

    m_max_ad_duration_ms_isValid = ::OpenAPI::fromJsonValue(m_max_ad_duration_ms, json[QString("maxAdDurationMs")]);
    m_max_ad_duration_ms_isSet = !json[QString("maxAdDurationMs")].isNull() && m_max_ad_duration_ms_isValid;

    m_programmatic_creative_source_isValid = ::OpenAPI::fromJsonValue(m_programmatic_creative_source, json[QString("programmaticCreativeSource")]);
    m_programmatic_creative_source_isSet = !json[QString("programmaticCreativeSource")].isNull() && m_programmatic_creative_source_isValid;

    m_skippable_ad_type_isValid = ::OpenAPI::fromJsonValue(m_skippable_ad_type, json[QString("skippableAdType")]);
    m_skippable_ad_type_isSet = !json[QString("skippableAdType")].isNull() && m_skippable_ad_type_isValid;
}

QString OAICreativeRequirements::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreativeRequirements::asJsonObject() const {
    QJsonObject obj;
    if (m_creative_format_isSet) {
        obj.insert(QString("creativeFormat"), ::OpenAPI::toJsonValue(m_creative_format));
    }
    if (m_creative_pre_approval_policy_isSet) {
        obj.insert(QString("creativePreApprovalPolicy"), ::OpenAPI::toJsonValue(m_creative_pre_approval_policy));
    }
    if (m_creative_safe_frame_compatibility_isSet) {
        obj.insert(QString("creativeSafeFrameCompatibility"), ::OpenAPI::toJsonValue(m_creative_safe_frame_compatibility));
    }
    if (m_max_ad_duration_ms_isSet) {
        obj.insert(QString("maxAdDurationMs"), ::OpenAPI::toJsonValue(m_max_ad_duration_ms));
    }
    if (m_programmatic_creative_source_isSet) {
        obj.insert(QString("programmaticCreativeSource"), ::OpenAPI::toJsonValue(m_programmatic_creative_source));
    }
    if (m_skippable_ad_type_isSet) {
        obj.insert(QString("skippableAdType"), ::OpenAPI::toJsonValue(m_skippable_ad_type));
    }
    return obj;
}

QString OAICreativeRequirements::getCreativeFormat() const {
    return m_creative_format;
}
void OAICreativeRequirements::setCreativeFormat(const QString &creative_format) {
    m_creative_format = creative_format;
    m_creative_format_isSet = true;
}

bool OAICreativeRequirements::is_creative_format_Set() const{
    return m_creative_format_isSet;
}

bool OAICreativeRequirements::is_creative_format_Valid() const{
    return m_creative_format_isValid;
}

QString OAICreativeRequirements::getCreativePreApprovalPolicy() const {
    return m_creative_pre_approval_policy;
}
void OAICreativeRequirements::setCreativePreApprovalPolicy(const QString &creative_pre_approval_policy) {
    m_creative_pre_approval_policy = creative_pre_approval_policy;
    m_creative_pre_approval_policy_isSet = true;
}

bool OAICreativeRequirements::is_creative_pre_approval_policy_Set() const{
    return m_creative_pre_approval_policy_isSet;
}

bool OAICreativeRequirements::is_creative_pre_approval_policy_Valid() const{
    return m_creative_pre_approval_policy_isValid;
}

QString OAICreativeRequirements::getCreativeSafeFrameCompatibility() const {
    return m_creative_safe_frame_compatibility;
}
void OAICreativeRequirements::setCreativeSafeFrameCompatibility(const QString &creative_safe_frame_compatibility) {
    m_creative_safe_frame_compatibility = creative_safe_frame_compatibility;
    m_creative_safe_frame_compatibility_isSet = true;
}

bool OAICreativeRequirements::is_creative_safe_frame_compatibility_Set() const{
    return m_creative_safe_frame_compatibility_isSet;
}

bool OAICreativeRequirements::is_creative_safe_frame_compatibility_Valid() const{
    return m_creative_safe_frame_compatibility_isValid;
}

QString OAICreativeRequirements::getMaxAdDurationMs() const {
    return m_max_ad_duration_ms;
}
void OAICreativeRequirements::setMaxAdDurationMs(const QString &max_ad_duration_ms) {
    m_max_ad_duration_ms = max_ad_duration_ms;
    m_max_ad_duration_ms_isSet = true;
}

bool OAICreativeRequirements::is_max_ad_duration_ms_Set() const{
    return m_max_ad_duration_ms_isSet;
}

bool OAICreativeRequirements::is_max_ad_duration_ms_Valid() const{
    return m_max_ad_duration_ms_isValid;
}

QString OAICreativeRequirements::getProgrammaticCreativeSource() const {
    return m_programmatic_creative_source;
}
void OAICreativeRequirements::setProgrammaticCreativeSource(const QString &programmatic_creative_source) {
    m_programmatic_creative_source = programmatic_creative_source;
    m_programmatic_creative_source_isSet = true;
}

bool OAICreativeRequirements::is_programmatic_creative_source_Set() const{
    return m_programmatic_creative_source_isSet;
}

bool OAICreativeRequirements::is_programmatic_creative_source_Valid() const{
    return m_programmatic_creative_source_isValid;
}

QString OAICreativeRequirements::getSkippableAdType() const {
    return m_skippable_ad_type;
}
void OAICreativeRequirements::setSkippableAdType(const QString &skippable_ad_type) {
    m_skippable_ad_type = skippable_ad_type;
    m_skippable_ad_type_isSet = true;
}

bool OAICreativeRequirements::is_skippable_ad_type_Set() const{
    return m_skippable_ad_type_isSet;
}

bool OAICreativeRequirements::is_skippable_ad_type_Valid() const{
    return m_skippable_ad_type_isValid;
}

bool OAICreativeRequirements::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creative_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_pre_approval_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_safe_frame_compatibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_ad_duration_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_programmatic_creative_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skippable_ad_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreativeRequirements::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
