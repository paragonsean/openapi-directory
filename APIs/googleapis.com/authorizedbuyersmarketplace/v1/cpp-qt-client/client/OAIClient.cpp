/**
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClient::OAIClient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClient::OAIClient() {
    this->initializeModel();
}

OAIClient::~OAIClient() {}

void OAIClient::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_partner_client_id_isSet = false;
    m_partner_client_id_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_seller_visible_isSet = false;
    m_seller_visible_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIClient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClient::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_partner_client_id_isValid = ::OpenAPI::fromJsonValue(m_partner_client_id, json[QString("partnerClientId")]);
    m_partner_client_id_isSet = !json[QString("partnerClientId")].isNull() && m_partner_client_id_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_seller_visible_isValid = ::OpenAPI::fromJsonValue(m_seller_visible, json[QString("sellerVisible")]);
    m_seller_visible_isSet = !json[QString("sellerVisible")].isNull() && m_seller_visible_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIClient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClient::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_partner_client_id_isSet) {
        obj.insert(QString("partnerClientId"), ::OpenAPI::toJsonValue(m_partner_client_id));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_seller_visible_isSet) {
        obj.insert(QString("sellerVisible"), ::OpenAPI::toJsonValue(m_seller_visible));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIClient::getDisplayName() const {
    return m_display_name;
}
void OAIClient::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIClient::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIClient::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIClient::getName() const {
    return m_name;
}
void OAIClient::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIClient::is_name_Set() const{
    return m_name_isSet;
}

bool OAIClient::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIClient::getPartnerClientId() const {
    return m_partner_client_id;
}
void OAIClient::setPartnerClientId(const QString &partner_client_id) {
    m_partner_client_id = partner_client_id;
    m_partner_client_id_isSet = true;
}

bool OAIClient::is_partner_client_id_Set() const{
    return m_partner_client_id_isSet;
}

bool OAIClient::is_partner_client_id_Valid() const{
    return m_partner_client_id_isValid;
}

QString OAIClient::getRole() const {
    return m_role;
}
void OAIClient::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIClient::is_role_Set() const{
    return m_role_isSet;
}

bool OAIClient::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIClient::isSellerVisible() const {
    return m_seller_visible;
}
void OAIClient::setSellerVisible(const bool &seller_visible) {
    m_seller_visible = seller_visible;
    m_seller_visible_isSet = true;
}

bool OAIClient::is_seller_visible_Set() const{
    return m_seller_visible_isSet;
}

bool OAIClient::is_seller_visible_Valid() const{
    return m_seller_visible_isValid;
}

QString OAIClient::getState() const {
    return m_state;
}
void OAIClient::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIClient::is_state_Set() const{
    return m_state_isSet;
}

bool OAIClient::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIClient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_visible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClient::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
