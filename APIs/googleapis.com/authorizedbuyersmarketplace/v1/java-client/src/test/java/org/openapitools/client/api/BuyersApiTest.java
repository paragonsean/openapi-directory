/*
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AcceptProposalRequest;
import org.openapitools.client.model.AddCreativeRequest;
import org.openapitools.client.model.AddNoteRequest;
import org.openapitools.client.model.AuctionPackage;
import org.openapitools.client.model.BatchUpdateDealsRequest;
import org.openapitools.client.model.BatchUpdateDealsResponse;
import org.openapitools.client.model.Client;
import org.openapitools.client.model.ClientUser;
import org.openapitools.client.model.Deal;
import org.openapitools.client.model.FinalizedDeal;
import org.openapitools.client.model.ListAuctionPackagesResponse;
import org.openapitools.client.model.ListClientUsersResponse;
import org.openapitools.client.model.ListClientsResponse;
import org.openapitools.client.model.ListDealsResponse;
import org.openapitools.client.model.ListFinalizedDealsResponse;
import org.openapitools.client.model.ListProposalsResponse;
import org.openapitools.client.model.ListPublisherProfilesResponse;
import org.openapitools.client.model.PauseFinalizedDealRequest;
import org.openapitools.client.model.Proposal;
import org.openapitools.client.model.PublisherProfile;
import org.openapitools.client.model.SendRfpRequest;
import org.openapitools.client.model.SubscribeClientsRequest;
import org.openapitools.client.model.UnsubscribeClientsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BuyersApi
 */
@Disabled
public class BuyersApiTest {

    private final BuyersApi api = new BuyersApi();

    /**
     * List the auction packages subscribed by a buyer and its clients.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersAuctionPackagesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAuctionPackagesResponse response = api.authorizedbuyersmarketplaceBuyersAuctionPackagesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Subscribe to the auction package for the specified buyer. Once subscribed, the bidder will receive a call out for inventory matching the auction package targeting criteria with the auction package deal ID and the specified buyer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersAuctionPackagesSubscribeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        AuctionPackage response = api.authorizedbuyersmarketplaceBuyersAuctionPackagesSubscribe(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Subscribe the specified clients of the buyer to the auction package. If a client in the list does not belong to the buyer, an error response will be returned, and all of the following clients in the list will not be subscribed. Subscribing an already subscribed client will have no effect.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersAuctionPackagesSubscribeClientsTest() throws ApiException {
        String auctionPackage = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SubscribeClientsRequest subscribeClientsRequest = null;
        AuctionPackage response = api.authorizedbuyersmarketplaceBuyersAuctionPackagesSubscribeClients(auctionPackage, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, subscribeClientsRequest);
        // TODO: test validations
    }

    /**
     * Unsubscribe from the auction package for the specified buyer. Once unsubscribed, the bidder will no longer receive a call out for the auction package deal ID and the specified buyer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersAuctionPackagesUnsubscribeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        AuctionPackage response = api.authorizedbuyersmarketplaceBuyersAuctionPackagesUnsubscribe(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Unsubscribe from the auction package for the specified clients of the buyer. Unsubscribing a client that is not subscribed will have no effect.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersAuctionPackagesUnsubscribeClientsTest() throws ApiException {
        String auctionPackage = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UnsubscribeClientsRequest unsubscribeClientsRequest = null;
        AuctionPackage response = api.authorizedbuyersmarketplaceBuyersAuctionPackagesUnsubscribeClients(auctionPackage, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, unsubscribeClientsRequest);
        // TODO: test validations
    }

    /**
     * Creates a new client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersClientsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Client client = null;
        Client response = api.authorizedbuyersmarketplaceBuyersClientsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, client);
        // TODO: test validations
    }

    /**
     * Lists all the clients for the current buyer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersClientsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListClientsResponse response = api.authorizedbuyersmarketplaceBuyersClientsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Activates an existing client user. The state of the client user will be updated from \&quot;INACTIVE\&quot; to \&quot;ACTIVE\&quot;. This method has no effect if the client user is already in \&quot;ACTIVE\&quot; state. An error will be returned if the client user to activate is still in \&quot;INVITED\&quot; state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersClientsUsersActivateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        ClientUser response = api.authorizedbuyersmarketplaceBuyersClientsUsersActivate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Creates a new client user in \&quot;INVITED\&quot; state. An email invitation will be sent to the new user, once accepted the user will become active.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersClientsUsersCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ClientUser clientUser = null;
        ClientUser response = api.authorizedbuyersmarketplaceBuyersClientsUsersCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clientUser);
        // TODO: test validations
    }

    /**
     * Deactivates an existing client user. The state of the client user will be updated from \&quot;ACTIVE\&quot; to \&quot;INACTIVE\&quot;. This method has no effect if the client user is already in \&quot;INACTIVE\&quot; state. An error will be returned if the client user to deactivate is still in \&quot;INVITED\&quot; state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersClientsUsersDeactivateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        ClientUser response = api.authorizedbuyersmarketplaceBuyersClientsUsersDeactivate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Deletes an existing client user. The client user will lose access to the Authorized Buyers UI. Note that if a client user is deleted, the user&#39;s access to the UI can&#39;t be restored unless a new client user is created and activated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersClientsUsersDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.authorizedbuyersmarketplaceBuyersClientsUsersDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all client users for a specified client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersClientsUsersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListClientUsersResponse response = api.authorizedbuyersmarketplaceBuyersClientsUsersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Add creative to be used in the bidding process for a finalized deal. For programmatic guaranteed deals, it&#39;s recommended that you associate at least one approved creative with the deal before calling SetReadyToServe, to help reduce the number of bid responses filtered because they don&#39;t contain approved creatives. Creatives successfully added to a deal can be found in the Realtime-bidding Creatives API creative.deal_ids. This method only applies to programmatic guaranteed deals. Maximum number of 1000 creatives can be added to a finalized deal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersFinalizedDealsAddCreativeTest() throws ApiException {
        String deal = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AddCreativeRequest addCreativeRequest = null;
        FinalizedDeal response = api.authorizedbuyersmarketplaceBuyersFinalizedDealsAddCreative(deal, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addCreativeRequest);
        // TODO: test validations
    }

    /**
     * Lists finalized deals. Use the URL path \&quot;/v1/buyers/{accountId}/finalizedDeals\&quot; to list finalized deals for the current buyer and its clients. Bidders can use the URL path \&quot;/v1/bidders/{accountId}/finalizedDeals\&quot; to list finalized deals for the bidder, its buyers and all their clients.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersFinalizedDealsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListFinalizedDealsResponse response = api.authorizedbuyersmarketplaceBuyersFinalizedDealsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Pauses serving of the given finalized deal. This call only pauses the serving status, and does not affect other fields of the finalized deal. Calling this method for an already paused deal has no effect. This method only applies to programmatic guaranteed deals.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersFinalizedDealsPauseTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PauseFinalizedDealRequest pauseFinalizedDealRequest = null;
        FinalizedDeal response = api.authorizedbuyersmarketplaceBuyersFinalizedDealsPause(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pauseFinalizedDealRequest);
        // TODO: test validations
    }

    /**
     * Resumes serving of the given finalized deal. Calling this method for an running deal has no effect. If a deal is initially paused by the seller, calling this method will not resume serving of the deal until the seller also resumes the deal. This method only applies to programmatic guaranteed deals.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersFinalizedDealsResumeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        FinalizedDeal response = api.authorizedbuyersmarketplaceBuyersFinalizedDealsResume(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Sets the given finalized deal as ready to serve. By default, deals are set as ready to serve as soon as they&#39;re finalized. If you want to opt out of the default behavior, and manually indicate that deals are ready to serve, ask your Technical Account Manager to add you to the allowlist. If you choose to use this method, finalized deals belonging to the bidder and its child seats don&#39;t start serving until after you call &#x60;setReadyToServe&#x60;, and after the deals become active. For example, you can use this method to delay receiving bid requests until your creative is ready. This method only applies to programmatic guaranteed deals.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersFinalizedDealsSetReadyToServeTest() throws ApiException {
        String deal = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        FinalizedDeal response = api.authorizedbuyersmarketplaceBuyersFinalizedDealsSetReadyToServe(deal, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Accepts the proposal at the given revision number. If the revision number in the request is behind the latest from the server, an error message will be returned. This call updates the Proposal.state from &#x60;BUYER_ACCEPTANCE_REQUESTED&#x60; to &#x60;FINALIZED&#x60;; it has no side effect if the Proposal.state is already &#x60;FINALIZED&#x60; and throws exception if the Proposal.state is not either &#x60;BUYER_ACCEPTANCE_REQUESTED&#x60; or &#x60;FINALIZED&#x60;. Accepting a proposal means the buyer understands and accepts the Proposal.terms_and_conditions proposed by the seller.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersProposalsAcceptTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AcceptProposalRequest acceptProposalRequest = null;
        Proposal response = api.authorizedbuyersmarketplaceBuyersProposalsAccept(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, acceptProposalRequest);
        // TODO: test validations
    }

    /**
     * Creates a note for this proposal and sends to the seller.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersProposalsAddNoteTest() throws ApiException {
        String proposal = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AddNoteRequest addNoteRequest = null;
        Proposal response = api.authorizedbuyersmarketplaceBuyersProposalsAddNote(proposal, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addNoteRequest);
        // TODO: test validations
    }

    /**
     * Cancels an ongoing negotiation on a proposal. This does not cancel or end serving for the deals if the proposal has been finalized. If the proposal has not been finalized before, calling this method will set the Proposal.state to &#x60;TERMINATED&#x60; and increment the Proposal.proposal_revision. If the proposal has been finalized before and is under renegotiation now, calling this method will reset the Proposal.state to &#x60;FINALIZED&#x60; and increment the Proposal.proposal_revision. This method does not support private auction proposals whose Proposal.deal_type is &#39;PRIVATE_AUCTION&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersProposalsCancelNegotiationTest() throws ApiException {
        String proposal = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Proposal response = api.authorizedbuyersmarketplaceBuyersProposalsCancelNegotiation(proposal, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Batch updates multiple deals in the same proposal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersProposalsDealsBatchUpdateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchUpdateDealsRequest batchUpdateDealsRequest = null;
        BatchUpdateDealsResponse response = api.authorizedbuyersmarketplaceBuyersProposalsDealsBatchUpdate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchUpdateDealsRequest);
        // TODO: test validations
    }

    /**
     * Lists all deals in a proposal. To retrieve only the finalized revision deals regardless if a deal is being renegotiated, see the FinalizedDeals resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersProposalsDealsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListDealsResponse response = api.authorizedbuyersmarketplaceBuyersProposalsDealsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates the given deal at the buyer known revision number. If the server revision has advanced since the passed-in proposal.proposal_revision an ABORTED error message will be returned. The revision number is incremented by the server whenever the proposal or its constituent deals are updated. Note: The revision number is kept at a proposal level. The buyer of the API is expected to keep track of the revision number after the last update operation and send it in as part of the next update request. This way, if there are further changes on the server (for example, seller making new updates), then the server can detect conflicts and reject the proposed changes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersProposalsDealsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        Deal deal = null;
        Deal response = api.authorizedbuyersmarketplaceBuyersProposalsDealsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, deal);
        // TODO: test validations
    }

    /**
     * Lists proposals. A filter expression using [Cloud API list filtering syntax](https://developers.google.com/authorized-buyers/apis/guides/list-filters) may be specified to filter the results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersProposalsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListProposalsResponse response = api.authorizedbuyersmarketplaceBuyersProposalsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Sends a request for proposal (RFP) to a publisher to initiate the negotiation regarding certain inventory. In the RFP, buyers can specify the deal type, deal terms, start and end dates, targeting, and a message to the publisher. Once the RFP is sent, a proposal in &#x60;SELLER_REVIEW_REQUESTED&#x60; state will be created and returned in the response. The publisher may review your request and respond with detailed deals in the proposal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersProposalsSendRfpTest() throws ApiException {
        String buyer = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SendRfpRequest sendRfpRequest = null;
        Proposal response = api.authorizedbuyersmarketplaceBuyersProposalsSendRfp(buyer, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sendRfpRequest);
        // TODO: test validations
    }

    /**
     * Gets the requested publisher profile by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersPublisherProfilesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PublisherProfile response = api.authorizedbuyersmarketplaceBuyersPublisherProfilesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists publisher profiles. The returned publisher profiles aren&#39;t in any defined order. The order of the results might change. A new publisher profile can appear in any place in the list of returned results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizedbuyersmarketplaceBuyersPublisherProfilesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListPublisherProfilesResponse response = api.authorizedbuyersmarketplaceBuyersPublisherProfilesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

}
