/*
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Price;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Pricing terms for Programmatic Guaranteed Deals.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:11.931533-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProgrammaticGuaranteedTerms {
  public static final String SERIALIZED_NAME_FIXED_PRICE = "fixedPrice";
  @SerializedName(SERIALIZED_NAME_FIXED_PRICE)
  private Price fixedPrice;

  public static final String SERIALIZED_NAME_GUARANTEED_LOOKS = "guaranteedLooks";
  @SerializedName(SERIALIZED_NAME_GUARANTEED_LOOKS)
  private String guaranteedLooks;

  public static final String SERIALIZED_NAME_IMPRESSION_CAP = "impressionCap";
  @SerializedName(SERIALIZED_NAME_IMPRESSION_CAP)
  private String impressionCap;

  public static final String SERIALIZED_NAME_MINIMUM_DAILY_LOOKS = "minimumDailyLooks";
  @SerializedName(SERIALIZED_NAME_MINIMUM_DAILY_LOOKS)
  private String minimumDailyLooks;

  public static final String SERIALIZED_NAME_PERCENT_SHARE_OF_VOICE = "percentShareOfVoice";
  @SerializedName(SERIALIZED_NAME_PERCENT_SHARE_OF_VOICE)
  private String percentShareOfVoice;

  /**
   * The reservation type for a Programmatic Guaranteed deal. This indicates whether the number of impressions is fixed, or a percent of available impressions. If not specified, the default reservation type is STANDARD.
   */
  @JsonAdapter(ReservationTypeEnum.Adapter.class)
  public enum ReservationTypeEnum {
    RESERVATION_TYPE_UNSPECIFIED("RESERVATION_TYPE_UNSPECIFIED"),
    
    STANDARD("STANDARD"),
    
    SPONSORSHIP("SPONSORSHIP");

    private String value;

    ReservationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReservationTypeEnum fromValue(String value) {
      for (ReservationTypeEnum b : ReservationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReservationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReservationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReservationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReservationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReservationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESERVATION_TYPE = "reservationType";
  @SerializedName(SERIALIZED_NAME_RESERVATION_TYPE)
  private ReservationTypeEnum reservationType;

  public ProgrammaticGuaranteedTerms() {
  }

  public ProgrammaticGuaranteedTerms fixedPrice(Price fixedPrice) {
    this.fixedPrice = fixedPrice;
    return this;
  }

  /**
   * Get fixedPrice
   * @return fixedPrice
   */
  @javax.annotation.Nullable
  public Price getFixedPrice() {
    return fixedPrice;
  }

  public void setFixedPrice(Price fixedPrice) {
    this.fixedPrice = fixedPrice;
  }


  public ProgrammaticGuaranteedTerms guaranteedLooks(String guaranteedLooks) {
    this.guaranteedLooks = guaranteedLooks;
    return this;
  }

  /**
   * Count of guaranteed looks. For CPD deals, buyer changes to guaranteed_looks will be ignored.
   * @return guaranteedLooks
   */
  @javax.annotation.Nullable
  public String getGuaranteedLooks() {
    return guaranteedLooks;
  }

  public void setGuaranteedLooks(String guaranteedLooks) {
    this.guaranteedLooks = guaranteedLooks;
  }


  public ProgrammaticGuaranteedTerms impressionCap(String impressionCap) {
    this.impressionCap = impressionCap;
    return this;
  }

  /**
   * The lifetime impression cap for CPM Sponsorship deals. Deal will stop serving when cap is reached.
   * @return impressionCap
   */
  @javax.annotation.Nullable
  public String getImpressionCap() {
    return impressionCap;
  }

  public void setImpressionCap(String impressionCap) {
    this.impressionCap = impressionCap;
  }


  public ProgrammaticGuaranteedTerms minimumDailyLooks(String minimumDailyLooks) {
    this.minimumDailyLooks = minimumDailyLooks;
    return this;
  }

  /**
   * Daily minimum looks for CPD deal types. For CPD deals, buyer should negotiate on this field instead of guaranteed_looks.
   * @return minimumDailyLooks
   */
  @javax.annotation.Nullable
  public String getMinimumDailyLooks() {
    return minimumDailyLooks;
  }

  public void setMinimumDailyLooks(String minimumDailyLooks) {
    this.minimumDailyLooks = minimumDailyLooks;
  }


  public ProgrammaticGuaranteedTerms percentShareOfVoice(String percentShareOfVoice) {
    this.percentShareOfVoice = percentShareOfVoice;
    return this;
  }

  /**
   * For sponsorship deals, this is the percentage of the seller&#39;s eligible impressions that the deal will serve until the cap is reached. Valid value is within range 0~100.
   * @return percentShareOfVoice
   */
  @javax.annotation.Nullable
  public String getPercentShareOfVoice() {
    return percentShareOfVoice;
  }

  public void setPercentShareOfVoice(String percentShareOfVoice) {
    this.percentShareOfVoice = percentShareOfVoice;
  }


  public ProgrammaticGuaranteedTerms reservationType(ReservationTypeEnum reservationType) {
    this.reservationType = reservationType;
    return this;
  }

  /**
   * The reservation type for a Programmatic Guaranteed deal. This indicates whether the number of impressions is fixed, or a percent of available impressions. If not specified, the default reservation type is STANDARD.
   * @return reservationType
   */
  @javax.annotation.Nullable
  public ReservationTypeEnum getReservationType() {
    return reservationType;
  }

  public void setReservationType(ReservationTypeEnum reservationType) {
    this.reservationType = reservationType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProgrammaticGuaranteedTerms programmaticGuaranteedTerms = (ProgrammaticGuaranteedTerms) o;
    return Objects.equals(this.fixedPrice, programmaticGuaranteedTerms.fixedPrice) &&
        Objects.equals(this.guaranteedLooks, programmaticGuaranteedTerms.guaranteedLooks) &&
        Objects.equals(this.impressionCap, programmaticGuaranteedTerms.impressionCap) &&
        Objects.equals(this.minimumDailyLooks, programmaticGuaranteedTerms.minimumDailyLooks) &&
        Objects.equals(this.percentShareOfVoice, programmaticGuaranteedTerms.percentShareOfVoice) &&
        Objects.equals(this.reservationType, programmaticGuaranteedTerms.reservationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fixedPrice, guaranteedLooks, impressionCap, minimumDailyLooks, percentShareOfVoice, reservationType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProgrammaticGuaranteedTerms {\n");
    sb.append("    fixedPrice: ").append(toIndentedString(fixedPrice)).append("\n");
    sb.append("    guaranteedLooks: ").append(toIndentedString(guaranteedLooks)).append("\n");
    sb.append("    impressionCap: ").append(toIndentedString(impressionCap)).append("\n");
    sb.append("    minimumDailyLooks: ").append(toIndentedString(minimumDailyLooks)).append("\n");
    sb.append("    percentShareOfVoice: ").append(toIndentedString(percentShareOfVoice)).append("\n");
    sb.append("    reservationType: ").append(toIndentedString(reservationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fixedPrice");
    openapiFields.add("guaranteedLooks");
    openapiFields.add("impressionCap");
    openapiFields.add("minimumDailyLooks");
    openapiFields.add("percentShareOfVoice");
    openapiFields.add("reservationType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProgrammaticGuaranteedTerms
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProgrammaticGuaranteedTerms.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProgrammaticGuaranteedTerms is not found in the empty JSON string", ProgrammaticGuaranteedTerms.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProgrammaticGuaranteedTerms.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProgrammaticGuaranteedTerms` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `fixedPrice`
      if (jsonObj.get("fixedPrice") != null && !jsonObj.get("fixedPrice").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("fixedPrice"));
      }
      if ((jsonObj.get("guaranteedLooks") != null && !jsonObj.get("guaranteedLooks").isJsonNull()) && !jsonObj.get("guaranteedLooks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guaranteedLooks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guaranteedLooks").toString()));
      }
      if ((jsonObj.get("impressionCap") != null && !jsonObj.get("impressionCap").isJsonNull()) && !jsonObj.get("impressionCap").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `impressionCap` to be a primitive type in the JSON string but got `%s`", jsonObj.get("impressionCap").toString()));
      }
      if ((jsonObj.get("minimumDailyLooks") != null && !jsonObj.get("minimumDailyLooks").isJsonNull()) && !jsonObj.get("minimumDailyLooks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimumDailyLooks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimumDailyLooks").toString()));
      }
      if ((jsonObj.get("percentShareOfVoice") != null && !jsonObj.get("percentShareOfVoice").isJsonNull()) && !jsonObj.get("percentShareOfVoice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `percentShareOfVoice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("percentShareOfVoice").toString()));
      }
      if ((jsonObj.get("reservationType") != null && !jsonObj.get("reservationType").isJsonNull()) && !jsonObj.get("reservationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservationType").toString()));
      }
      // validate the optional field `reservationType`
      if (jsonObj.get("reservationType") != null && !jsonObj.get("reservationType").isJsonNull()) {
        ReservationTypeEnum.validateJsonElement(jsonObj.get("reservationType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProgrammaticGuaranteedTerms.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProgrammaticGuaranteedTerms' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProgrammaticGuaranteedTerms> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProgrammaticGuaranteedTerms.class));

       return (TypeAdapter<T>) new TypeAdapter<ProgrammaticGuaranteedTerms>() {
           @Override
           public void write(JsonWriter out, ProgrammaticGuaranteedTerms value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProgrammaticGuaranteedTerms read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProgrammaticGuaranteedTerms given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProgrammaticGuaranteedTerms
   * @throws IOException if the JSON string is invalid with respect to ProgrammaticGuaranteedTerms
   */
  public static ProgrammaticGuaranteedTerms fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProgrammaticGuaranteedTerms.class);
  }

  /**
   * Convert an instance of ProgrammaticGuaranteedTerms to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

