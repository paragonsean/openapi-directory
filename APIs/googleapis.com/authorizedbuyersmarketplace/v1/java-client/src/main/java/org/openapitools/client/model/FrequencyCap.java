/*
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message contains details about publisher-set frequency caps of the delivery.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:11.931533-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FrequencyCap {
  public static final String SERIALIZED_NAME_MAX_IMPRESSIONS = "maxImpressions";
  @SerializedName(SERIALIZED_NAME_MAX_IMPRESSIONS)
  private Integer maxImpressions;

  /**
   * The time unit. Along with num_time_units defines the amount of time over which impressions per user are counted and capped.
   */
  @JsonAdapter(TimeUnitTypeEnum.Adapter.class)
  public enum TimeUnitTypeEnum {
    TIME_UNIT_TYPE_UNSPECIFIED("TIME_UNIT_TYPE_UNSPECIFIED"),
    
    MINUTE("MINUTE"),
    
    HOUR("HOUR"),
    
    DAY("DAY"),
    
    WEEK("WEEK"),
    
    MONTH("MONTH"),
    
    LIFETIME("LIFETIME"),
    
    POD("POD"),
    
    STREAM("STREAM");

    private String value;

    TimeUnitTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TimeUnitTypeEnum fromValue(String value) {
      for (TimeUnitTypeEnum b : TimeUnitTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TimeUnitTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimeUnitTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TimeUnitTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TimeUnitTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TimeUnitTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIME_UNIT_TYPE = "timeUnitType";
  @SerializedName(SERIALIZED_NAME_TIME_UNIT_TYPE)
  private TimeUnitTypeEnum timeUnitType;

  public static final String SERIALIZED_NAME_TIME_UNITS_COUNT = "timeUnitsCount";
  @SerializedName(SERIALIZED_NAME_TIME_UNITS_COUNT)
  private Integer timeUnitsCount;

  public FrequencyCap() {
  }

  public FrequencyCap maxImpressions(Integer maxImpressions) {
    this.maxImpressions = maxImpressions;
    return this;
  }

  /**
   * The maximum number of impressions that can be served to a user within the specified time period.
   * @return maxImpressions
   */
  @javax.annotation.Nullable
  public Integer getMaxImpressions() {
    return maxImpressions;
  }

  public void setMaxImpressions(Integer maxImpressions) {
    this.maxImpressions = maxImpressions;
  }


  public FrequencyCap timeUnitType(TimeUnitTypeEnum timeUnitType) {
    this.timeUnitType = timeUnitType;
    return this;
  }

  /**
   * The time unit. Along with num_time_units defines the amount of time over which impressions per user are counted and capped.
   * @return timeUnitType
   */
  @javax.annotation.Nullable
  public TimeUnitTypeEnum getTimeUnitType() {
    return timeUnitType;
  }

  public void setTimeUnitType(TimeUnitTypeEnum timeUnitType) {
    this.timeUnitType = timeUnitType;
  }


  public FrequencyCap timeUnitsCount(Integer timeUnitsCount) {
    this.timeUnitsCount = timeUnitsCount;
    return this;
  }

  /**
   * The amount of time, in the units specified by time_unit_type. Defines the amount of time over which impressions per user are counted and capped.
   * @return timeUnitsCount
   */
  @javax.annotation.Nullable
  public Integer getTimeUnitsCount() {
    return timeUnitsCount;
  }

  public void setTimeUnitsCount(Integer timeUnitsCount) {
    this.timeUnitsCount = timeUnitsCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FrequencyCap frequencyCap = (FrequencyCap) o;
    return Objects.equals(this.maxImpressions, frequencyCap.maxImpressions) &&
        Objects.equals(this.timeUnitType, frequencyCap.timeUnitType) &&
        Objects.equals(this.timeUnitsCount, frequencyCap.timeUnitsCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxImpressions, timeUnitType, timeUnitsCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FrequencyCap {\n");
    sb.append("    maxImpressions: ").append(toIndentedString(maxImpressions)).append("\n");
    sb.append("    timeUnitType: ").append(toIndentedString(timeUnitType)).append("\n");
    sb.append("    timeUnitsCount: ").append(toIndentedString(timeUnitsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxImpressions");
    openapiFields.add("timeUnitType");
    openapiFields.add("timeUnitsCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FrequencyCap
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FrequencyCap.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FrequencyCap is not found in the empty JSON string", FrequencyCap.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FrequencyCap.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FrequencyCap` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("timeUnitType") != null && !jsonObj.get("timeUnitType").isJsonNull()) && !jsonObj.get("timeUnitType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeUnitType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeUnitType").toString()));
      }
      // validate the optional field `timeUnitType`
      if (jsonObj.get("timeUnitType") != null && !jsonObj.get("timeUnitType").isJsonNull()) {
        TimeUnitTypeEnum.validateJsonElement(jsonObj.get("timeUnitType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FrequencyCap.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FrequencyCap' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FrequencyCap> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FrequencyCap.class));

       return (TypeAdapter<T>) new TypeAdapter<FrequencyCap>() {
           @Override
           public void write(JsonWriter out, FrequencyCap value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FrequencyCap read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FrequencyCap given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FrequencyCap
   * @throws IOException if the JSON string is invalid with respect to FrequencyCap
   */
  public static FrequencyCap fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FrequencyCap.class);
  }

  /**
   * Convert an instance of FrequencyCap to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

