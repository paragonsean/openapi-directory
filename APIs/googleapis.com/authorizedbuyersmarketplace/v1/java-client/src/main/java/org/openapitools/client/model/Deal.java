/*
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreativeRequirements;
import org.openapitools.client.model.DeliveryControl;
import org.openapitools.client.model.MarketplaceTargeting;
import org.openapitools.client.model.Money;
import org.openapitools.client.model.PreferredDealTerms;
import org.openapitools.client.model.PrivateAuctionTerms;
import org.openapitools.client.model.ProgrammaticGuaranteedTerms;
import org.openapitools.client.model.TimeZone;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A deal represents a segment of inventory for displaying ads that contains the terms and targeting information that is used for serving as well as the deal stats and status. Note: A proposal may contain multiple deals.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:11.931533-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Deal {
  public static final String SERIALIZED_NAME_BILLED_BUYER = "billedBuyer";
  @SerializedName(SERIALIZED_NAME_BILLED_BUYER)
  private String billedBuyer;

  public static final String SERIALIZED_NAME_BUYER = "buyer";
  @SerializedName(SERIALIZED_NAME_BUYER)
  private String buyer;

  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private String client;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CREATIVE_REQUIREMENTS = "creativeRequirements";
  @SerializedName(SERIALIZED_NAME_CREATIVE_REQUIREMENTS)
  private CreativeRequirements creativeRequirements;

  /**
   * Output only. Type of deal.
   */
  @JsonAdapter(DealTypeEnum.Adapter.class)
  public enum DealTypeEnum {
    DEAL_TYPE_UNSPECIFIED("DEAL_TYPE_UNSPECIFIED"),
    
    PREFERRED_DEAL("PREFERRED_DEAL"),
    
    PRIVATE_AUCTION("PRIVATE_AUCTION"),
    
    PROGRAMMATIC_GUARANTEED("PROGRAMMATIC_GUARANTEED");

    private String value;

    DealTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DealTypeEnum fromValue(String value) {
      for (DealTypeEnum b : DealTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DealTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DealTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DealTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DealTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DealTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEAL_TYPE = "dealType";
  @SerializedName(SERIALIZED_NAME_DEAL_TYPE)
  private DealTypeEnum dealType;

  public static final String SERIALIZED_NAME_DELIVERY_CONTROL = "deliveryControl";
  @SerializedName(SERIALIZED_NAME_DELIVERY_CONTROL)
  private DeliveryControl deliveryControl;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ESTIMATED_GROSS_SPEND = "estimatedGrossSpend";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_GROSS_SPEND)
  private Money estimatedGrossSpend;

  public static final String SERIALIZED_NAME_FLIGHT_END_TIME = "flightEndTime";
  @SerializedName(SERIALIZED_NAME_FLIGHT_END_TIME)
  private String flightEndTime;

  public static final String SERIALIZED_NAME_FLIGHT_START_TIME = "flightStartTime";
  @SerializedName(SERIALIZED_NAME_FLIGHT_START_TIME)
  private String flightStartTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREFERRED_DEAL_TERMS = "preferredDealTerms";
  @SerializedName(SERIALIZED_NAME_PREFERRED_DEAL_TERMS)
  private PreferredDealTerms preferredDealTerms;

  public static final String SERIALIZED_NAME_PRIVATE_AUCTION_TERMS = "privateAuctionTerms";
  @SerializedName(SERIALIZED_NAME_PRIVATE_AUCTION_TERMS)
  private PrivateAuctionTerms privateAuctionTerms;

  public static final String SERIALIZED_NAME_PROGRAMMATIC_GUARANTEED_TERMS = "programmaticGuaranteedTerms";
  @SerializedName(SERIALIZED_NAME_PROGRAMMATIC_GUARANTEED_TERMS)
  private ProgrammaticGuaranteedTerms programmaticGuaranteedTerms;

  public static final String SERIALIZED_NAME_PROPOSAL_REVISION = "proposalRevision";
  @SerializedName(SERIALIZED_NAME_PROPOSAL_REVISION)
  private String proposalRevision;

  public static final String SERIALIZED_NAME_PUBLISHER_PROFILE = "publisherProfile";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_PROFILE)
  private String publisherProfile;

  public static final String SERIALIZED_NAME_SELLER_TIME_ZONE = "sellerTimeZone";
  @SerializedName(SERIALIZED_NAME_SELLER_TIME_ZONE)
  private TimeZone sellerTimeZone;

  public static final String SERIALIZED_NAME_TARGETING = "targeting";
  @SerializedName(SERIALIZED_NAME_TARGETING)
  private MarketplaceTargeting targeting;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Deal() {
  }

  public Deal(
     String billedBuyer, 
     String buyer, 
     String client, 
     String createTime, 
     DealTypeEnum dealType, 
     String description, 
     String displayName, 
     String proposalRevision, 
     String updateTime
  ) {
    this();
    this.billedBuyer = billedBuyer;
    this.buyer = buyer;
    this.client = client;
    this.createTime = createTime;
    this.dealType = dealType;
    this.description = description;
    this.displayName = displayName;
    this.proposalRevision = proposalRevision;
    this.updateTime = updateTime;
  }

  /**
   * Output only. When the client field is populated, this field refers to the buyer who creates and manages the client buyer and gets billed on behalf of the client buyer; when the buyer field is populated, this field is the same value as buyer. Format : &#x60;buyers/{buyerAccountId}&#x60;
   * @return billedBuyer
   */
  @javax.annotation.Nullable
  public String getBilledBuyer() {
    return billedBuyer;
  }



  /**
   * Output only. Refers to a buyer in The Realtime-bidding API. Format: &#x60;buyers/{buyerAccountId}&#x60;
   * @return buyer
   */
  @javax.annotation.Nullable
  public String getBuyer() {
    return buyer;
  }



  /**
   * Output only. Refers to a Client. Format: &#x60;buyers/{buyerAccountId}/clients/{clientAccountid}&#x60;
   * @return client
   */
  @javax.annotation.Nullable
  public String getClient() {
    return client;
  }



  /**
   * Output only. The time of the deal creation.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Deal creativeRequirements(CreativeRequirements creativeRequirements) {
    this.creativeRequirements = creativeRequirements;
    return this;
  }

  /**
   * Get creativeRequirements
   * @return creativeRequirements
   */
  @javax.annotation.Nullable
  public CreativeRequirements getCreativeRequirements() {
    return creativeRequirements;
  }

  public void setCreativeRequirements(CreativeRequirements creativeRequirements) {
    this.creativeRequirements = creativeRequirements;
  }


  /**
   * Output only. Type of deal.
   * @return dealType
   */
  @javax.annotation.Nullable
  public DealTypeEnum getDealType() {
    return dealType;
  }



  public Deal deliveryControl(DeliveryControl deliveryControl) {
    this.deliveryControl = deliveryControl;
    return this;
  }

  /**
   * Get deliveryControl
   * @return deliveryControl
   */
  @javax.annotation.Nullable
  public DeliveryControl getDeliveryControl() {
    return deliveryControl;
  }

  public void setDeliveryControl(DeliveryControl deliveryControl) {
    this.deliveryControl = deliveryControl;
  }


  /**
   * Output only. Free text description for the deal terms.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Output only. The name of the deal. Maximum length of 255 unicode characters is allowed. Control characters are not allowed. Buyers cannot update this field. Note: Not to be confused with name, which is a unique identifier of the deal.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  public Deal estimatedGrossSpend(Money estimatedGrossSpend) {
    this.estimatedGrossSpend = estimatedGrossSpend;
    return this;
  }

  /**
   * Get estimatedGrossSpend
   * @return estimatedGrossSpend
   */
  @javax.annotation.Nullable
  public Money getEstimatedGrossSpend() {
    return estimatedGrossSpend;
  }

  public void setEstimatedGrossSpend(Money estimatedGrossSpend) {
    this.estimatedGrossSpend = estimatedGrossSpend;
  }


  public Deal flightEndTime(String flightEndTime) {
    this.flightEndTime = flightEndTime;
    return this;
  }

  /**
   * Proposed flight end time of the deal. This will generally be stored in a granularity of a second. A value is not necessary for Private Auction deals.
   * @return flightEndTime
   */
  @javax.annotation.Nullable
  public String getFlightEndTime() {
    return flightEndTime;
  }

  public void setFlightEndTime(String flightEndTime) {
    this.flightEndTime = flightEndTime;
  }


  public Deal flightStartTime(String flightStartTime) {
    this.flightStartTime = flightStartTime;
    return this;
  }

  /**
   * Proposed flight start time of the deal. This will generally be stored in the granularity of one second since deal serving starts at seconds boundary. Any time specified with more granularity (for example, in milliseconds) will be truncated towards the start of time in seconds.
   * @return flightStartTime
   */
  @javax.annotation.Nullable
  public String getFlightStartTime() {
    return flightStartTime;
  }

  public void setFlightStartTime(String flightStartTime) {
    this.flightStartTime = flightStartTime;
  }


  public Deal name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. The unique identifier of the deal. Auto-generated by the server when a deal is created. Format: buyers/{accountId}/proposals/{proposalId}/deals/{dealId}
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Deal preferredDealTerms(PreferredDealTerms preferredDealTerms) {
    this.preferredDealTerms = preferredDealTerms;
    return this;
  }

  /**
   * Get preferredDealTerms
   * @return preferredDealTerms
   */
  @javax.annotation.Nullable
  public PreferredDealTerms getPreferredDealTerms() {
    return preferredDealTerms;
  }

  public void setPreferredDealTerms(PreferredDealTerms preferredDealTerms) {
    this.preferredDealTerms = preferredDealTerms;
  }


  public Deal privateAuctionTerms(PrivateAuctionTerms privateAuctionTerms) {
    this.privateAuctionTerms = privateAuctionTerms;
    return this;
  }

  /**
   * Get privateAuctionTerms
   * @return privateAuctionTerms
   */
  @javax.annotation.Nullable
  public PrivateAuctionTerms getPrivateAuctionTerms() {
    return privateAuctionTerms;
  }

  public void setPrivateAuctionTerms(PrivateAuctionTerms privateAuctionTerms) {
    this.privateAuctionTerms = privateAuctionTerms;
  }


  public Deal programmaticGuaranteedTerms(ProgrammaticGuaranteedTerms programmaticGuaranteedTerms) {
    this.programmaticGuaranteedTerms = programmaticGuaranteedTerms;
    return this;
  }

  /**
   * Get programmaticGuaranteedTerms
   * @return programmaticGuaranteedTerms
   */
  @javax.annotation.Nullable
  public ProgrammaticGuaranteedTerms getProgrammaticGuaranteedTerms() {
    return programmaticGuaranteedTerms;
  }

  public void setProgrammaticGuaranteedTerms(ProgrammaticGuaranteedTerms programmaticGuaranteedTerms) {
    this.programmaticGuaranteedTerms = programmaticGuaranteedTerms;
  }


  /**
   * Output only. The revision number for the proposal and is the same value as proposal.proposal_revision. Each update to deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.
   * @return proposalRevision
   */
  @javax.annotation.Nullable
  public String getProposalRevision() {
    return proposalRevision;
  }



  public Deal publisherProfile(String publisherProfile) {
    this.publisherProfile = publisherProfile;
    return this;
  }

  /**
   * Immutable. Reference to the seller on the deal. Format: &#x60;buyers/{buyerAccountId}/publisherProfiles/{publisherProfileId}&#x60;
   * @return publisherProfile
   */
  @javax.annotation.Nullable
  public String getPublisherProfile() {
    return publisherProfile;
  }

  public void setPublisherProfile(String publisherProfile) {
    this.publisherProfile = publisherProfile;
  }


  public Deal sellerTimeZone(TimeZone sellerTimeZone) {
    this.sellerTimeZone = sellerTimeZone;
    return this;
  }

  /**
   * Get sellerTimeZone
   * @return sellerTimeZone
   */
  @javax.annotation.Nullable
  public TimeZone getSellerTimeZone() {
    return sellerTimeZone;
  }

  public void setSellerTimeZone(TimeZone sellerTimeZone) {
    this.sellerTimeZone = sellerTimeZone;
  }


  public Deal targeting(MarketplaceTargeting targeting) {
    this.targeting = targeting;
    return this;
  }

  /**
   * Get targeting
   * @return targeting
   */
  @javax.annotation.Nullable
  public MarketplaceTargeting getTargeting() {
    return targeting;
  }

  public void setTargeting(MarketplaceTargeting targeting) {
    this.targeting = targeting;
  }


  /**
   * Output only. The time when the deal was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Deal deal = (Deal) o;
    return Objects.equals(this.billedBuyer, deal.billedBuyer) &&
        Objects.equals(this.buyer, deal.buyer) &&
        Objects.equals(this.client, deal.client) &&
        Objects.equals(this.createTime, deal.createTime) &&
        Objects.equals(this.creativeRequirements, deal.creativeRequirements) &&
        Objects.equals(this.dealType, deal.dealType) &&
        Objects.equals(this.deliveryControl, deal.deliveryControl) &&
        Objects.equals(this.description, deal.description) &&
        Objects.equals(this.displayName, deal.displayName) &&
        Objects.equals(this.estimatedGrossSpend, deal.estimatedGrossSpend) &&
        Objects.equals(this.flightEndTime, deal.flightEndTime) &&
        Objects.equals(this.flightStartTime, deal.flightStartTime) &&
        Objects.equals(this.name, deal.name) &&
        Objects.equals(this.preferredDealTerms, deal.preferredDealTerms) &&
        Objects.equals(this.privateAuctionTerms, deal.privateAuctionTerms) &&
        Objects.equals(this.programmaticGuaranteedTerms, deal.programmaticGuaranteedTerms) &&
        Objects.equals(this.proposalRevision, deal.proposalRevision) &&
        Objects.equals(this.publisherProfile, deal.publisherProfile) &&
        Objects.equals(this.sellerTimeZone, deal.sellerTimeZone) &&
        Objects.equals(this.targeting, deal.targeting) &&
        Objects.equals(this.updateTime, deal.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billedBuyer, buyer, client, createTime, creativeRequirements, dealType, deliveryControl, description, displayName, estimatedGrossSpend, flightEndTime, flightStartTime, name, preferredDealTerms, privateAuctionTerms, programmaticGuaranteedTerms, proposalRevision, publisherProfile, sellerTimeZone, targeting, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Deal {\n");
    sb.append("    billedBuyer: ").append(toIndentedString(billedBuyer)).append("\n");
    sb.append("    buyer: ").append(toIndentedString(buyer)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    creativeRequirements: ").append(toIndentedString(creativeRequirements)).append("\n");
    sb.append("    dealType: ").append(toIndentedString(dealType)).append("\n");
    sb.append("    deliveryControl: ").append(toIndentedString(deliveryControl)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    estimatedGrossSpend: ").append(toIndentedString(estimatedGrossSpend)).append("\n");
    sb.append("    flightEndTime: ").append(toIndentedString(flightEndTime)).append("\n");
    sb.append("    flightStartTime: ").append(toIndentedString(flightStartTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    preferredDealTerms: ").append(toIndentedString(preferredDealTerms)).append("\n");
    sb.append("    privateAuctionTerms: ").append(toIndentedString(privateAuctionTerms)).append("\n");
    sb.append("    programmaticGuaranteedTerms: ").append(toIndentedString(programmaticGuaranteedTerms)).append("\n");
    sb.append("    proposalRevision: ").append(toIndentedString(proposalRevision)).append("\n");
    sb.append("    publisherProfile: ").append(toIndentedString(publisherProfile)).append("\n");
    sb.append("    sellerTimeZone: ").append(toIndentedString(sellerTimeZone)).append("\n");
    sb.append("    targeting: ").append(toIndentedString(targeting)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billedBuyer");
    openapiFields.add("buyer");
    openapiFields.add("client");
    openapiFields.add("createTime");
    openapiFields.add("creativeRequirements");
    openapiFields.add("dealType");
    openapiFields.add("deliveryControl");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("estimatedGrossSpend");
    openapiFields.add("flightEndTime");
    openapiFields.add("flightStartTime");
    openapiFields.add("name");
    openapiFields.add("preferredDealTerms");
    openapiFields.add("privateAuctionTerms");
    openapiFields.add("programmaticGuaranteedTerms");
    openapiFields.add("proposalRevision");
    openapiFields.add("publisherProfile");
    openapiFields.add("sellerTimeZone");
    openapiFields.add("targeting");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Deal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Deal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Deal is not found in the empty JSON string", Deal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Deal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Deal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billedBuyer") != null && !jsonObj.get("billedBuyer").isJsonNull()) && !jsonObj.get("billedBuyer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billedBuyer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billedBuyer").toString()));
      }
      if ((jsonObj.get("buyer") != null && !jsonObj.get("buyer").isJsonNull()) && !jsonObj.get("buyer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer").toString()));
      }
      if ((jsonObj.get("client") != null && !jsonObj.get("client").isJsonNull()) && !jsonObj.get("client").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `creativeRequirements`
      if (jsonObj.get("creativeRequirements") != null && !jsonObj.get("creativeRequirements").isJsonNull()) {
        CreativeRequirements.validateJsonElement(jsonObj.get("creativeRequirements"));
      }
      if ((jsonObj.get("dealType") != null && !jsonObj.get("dealType").isJsonNull()) && !jsonObj.get("dealType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dealType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dealType").toString()));
      }
      // validate the optional field `dealType`
      if (jsonObj.get("dealType") != null && !jsonObj.get("dealType").isJsonNull()) {
        DealTypeEnum.validateJsonElement(jsonObj.get("dealType"));
      }
      // validate the optional field `deliveryControl`
      if (jsonObj.get("deliveryControl") != null && !jsonObj.get("deliveryControl").isJsonNull()) {
        DeliveryControl.validateJsonElement(jsonObj.get("deliveryControl"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `estimatedGrossSpend`
      if (jsonObj.get("estimatedGrossSpend") != null && !jsonObj.get("estimatedGrossSpend").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("estimatedGrossSpend"));
      }
      if ((jsonObj.get("flightEndTime") != null && !jsonObj.get("flightEndTime").isJsonNull()) && !jsonObj.get("flightEndTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flightEndTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flightEndTime").toString()));
      }
      if ((jsonObj.get("flightStartTime") != null && !jsonObj.get("flightStartTime").isJsonNull()) && !jsonObj.get("flightStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flightStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flightStartTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `preferredDealTerms`
      if (jsonObj.get("preferredDealTerms") != null && !jsonObj.get("preferredDealTerms").isJsonNull()) {
        PreferredDealTerms.validateJsonElement(jsonObj.get("preferredDealTerms"));
      }
      // validate the optional field `privateAuctionTerms`
      if (jsonObj.get("privateAuctionTerms") != null && !jsonObj.get("privateAuctionTerms").isJsonNull()) {
        PrivateAuctionTerms.validateJsonElement(jsonObj.get("privateAuctionTerms"));
      }
      // validate the optional field `programmaticGuaranteedTerms`
      if (jsonObj.get("programmaticGuaranteedTerms") != null && !jsonObj.get("programmaticGuaranteedTerms").isJsonNull()) {
        ProgrammaticGuaranteedTerms.validateJsonElement(jsonObj.get("programmaticGuaranteedTerms"));
      }
      if ((jsonObj.get("proposalRevision") != null && !jsonObj.get("proposalRevision").isJsonNull()) && !jsonObj.get("proposalRevision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proposalRevision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proposalRevision").toString()));
      }
      if ((jsonObj.get("publisherProfile") != null && !jsonObj.get("publisherProfile").isJsonNull()) && !jsonObj.get("publisherProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherProfile").toString()));
      }
      // validate the optional field `sellerTimeZone`
      if (jsonObj.get("sellerTimeZone") != null && !jsonObj.get("sellerTimeZone").isJsonNull()) {
        TimeZone.validateJsonElement(jsonObj.get("sellerTimeZone"));
      }
      // validate the optional field `targeting`
      if (jsonObj.get("targeting") != null && !jsonObj.get("targeting").isJsonNull()) {
        MarketplaceTargeting.validateJsonElement(jsonObj.get("targeting"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Deal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Deal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Deal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Deal.class));

       return (TypeAdapter<T>) new TypeAdapter<Deal>() {
           @Override
           public void write(JsonWriter out, Deal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Deal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Deal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Deal
   * @throws IOException if the JSON string is invalid with respect to Deal
   */
  public static Deal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Deal.class);
  }

  /**
   * Convert an instance of Deal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

