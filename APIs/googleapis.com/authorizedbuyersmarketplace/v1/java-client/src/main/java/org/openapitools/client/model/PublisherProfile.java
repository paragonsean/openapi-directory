/*
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PublisherProfileMobileApplication;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The values in the publisher profile are supplied by the publisher. All fields are not filterable unless stated otherwise.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:11.931533-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublisherProfile {
  public static final String SERIALIZED_NAME_AUDIENCE_DESCRIPTION = "audienceDescription";
  @SerializedName(SERIALIZED_NAME_AUDIENCE_DESCRIPTION)
  private String audienceDescription;

  public static final String SERIALIZED_NAME_DIRECT_DEALS_CONTACT = "directDealsContact";
  @SerializedName(SERIALIZED_NAME_DIRECT_DEALS_CONTACT)
  private String directDealsContact;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DOMAINS = "domains";
  @SerializedName(SERIALIZED_NAME_DOMAINS)
  private List<String> domains = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_PARENT = "isParent";
  @SerializedName(SERIALIZED_NAME_IS_PARENT)
  private Boolean isParent;

  public static final String SERIALIZED_NAME_LOGO_URL = "logoUrl";
  @SerializedName(SERIALIZED_NAME_LOGO_URL)
  private String logoUrl;

  public static final String SERIALIZED_NAME_MEDIA_KIT_URL = "mediaKitUrl";
  @SerializedName(SERIALIZED_NAME_MEDIA_KIT_URL)
  private String mediaKitUrl;

  public static final String SERIALIZED_NAME_MOBILE_APPS = "mobileApps";
  @SerializedName(SERIALIZED_NAME_MOBILE_APPS)
  private List<PublisherProfileMobileApplication> mobileApps = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OVERVIEW = "overview";
  @SerializedName(SERIALIZED_NAME_OVERVIEW)
  private String overview;

  public static final String SERIALIZED_NAME_PITCH_STATEMENT = "pitchStatement";
  @SerializedName(SERIALIZED_NAME_PITCH_STATEMENT)
  private String pitchStatement;

  public static final String SERIALIZED_NAME_PROGRAMMATIC_DEALS_CONTACT = "programmaticDealsContact";
  @SerializedName(SERIALIZED_NAME_PROGRAMMATIC_DEALS_CONTACT)
  private String programmaticDealsContact;

  public static final String SERIALIZED_NAME_PUBLISHER_CODE = "publisherCode";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_CODE)
  private String publisherCode;

  public static final String SERIALIZED_NAME_SAMPLE_PAGE_URL = "samplePageUrl";
  @SerializedName(SERIALIZED_NAME_SAMPLE_PAGE_URL)
  private String samplePageUrl;

  public static final String SERIALIZED_NAME_TOP_HEADLINES = "topHeadlines";
  @SerializedName(SERIALIZED_NAME_TOP_HEADLINES)
  private List<String> topHeadlines = new ArrayList<>();

  public PublisherProfile() {
  }

  public PublisherProfile audienceDescription(String audienceDescription) {
    this.audienceDescription = audienceDescription;
    return this;
  }

  /**
   * Description on the publisher&#39;s audience.
   * @return audienceDescription
   */
  @javax.annotation.Nullable
  public String getAudienceDescription() {
    return audienceDescription;
  }

  public void setAudienceDescription(String audienceDescription) {
    this.audienceDescription = audienceDescription;
  }


  public PublisherProfile directDealsContact(String directDealsContact) {
    this.directDealsContact = directDealsContact;
    return this;
  }

  /**
   * Contact information for direct reservation deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.
   * @return directDealsContact
   */
  @javax.annotation.Nullable
  public String getDirectDealsContact() {
    return directDealsContact;
  }

  public void setDirectDealsContact(String directDealsContact) {
    this.directDealsContact = directDealsContact;
  }


  public PublisherProfile displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name of the publisher profile. Can be used to filter the response of the publisherProfiles.list method.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public PublisherProfile domains(List<String> domains) {
    this.domains = domains;
    return this;
  }

  public PublisherProfile addDomainsItem(String domainsItem) {
    if (this.domains == null) {
      this.domains = new ArrayList<>();
    }
    this.domains.add(domainsItem);
    return this;
  }

  /**
   * The list of domains represented in this publisher profile. Empty if this is a parent profile. These are top private domains, meaning that these will not contain a string like \&quot;photos.google.co.uk/123\&quot;, but will instead contain \&quot;google.co.uk\&quot;. Can be used to filter the response of the publisherProfiles.list method.
   * @return domains
   */
  @javax.annotation.Nullable
  public List<String> getDomains() {
    return domains;
  }

  public void setDomains(List<String> domains) {
    this.domains = domains;
  }


  public PublisherProfile isParent(Boolean isParent) {
    this.isParent = isParent;
    return this;
  }

  /**
   * Indicates if this profile is the parent profile of the seller. A parent profile represents all the inventory from the seller, as opposed to child profile that is created to brand a portion of inventory. One seller has only one parent publisher profile, and can have multiple child profiles. See https://support.google.com/admanager/answer/6035806 for details. Can be used to filter the response of the publisherProfiles.list method by setting the filter to \&quot;is_parent: true\&quot;.
   * @return isParent
   */
  @javax.annotation.Nullable
  public Boolean getIsParent() {
    return isParent;
  }

  public void setIsParent(Boolean isParent) {
    this.isParent = isParent;
  }


  public PublisherProfile logoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
    return this;
  }

  /**
   * A Google public URL to the logo for this publisher profile. The logo is stored as a PNG, JPG, or GIF image.
   * @return logoUrl
   */
  @javax.annotation.Nullable
  public String getLogoUrl() {
    return logoUrl;
  }

  public void setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
  }


  public PublisherProfile mediaKitUrl(String mediaKitUrl) {
    this.mediaKitUrl = mediaKitUrl;
    return this;
  }

  /**
   * URL to additional marketing and sales materials.
   * @return mediaKitUrl
   */
  @javax.annotation.Nullable
  public String getMediaKitUrl() {
    return mediaKitUrl;
  }

  public void setMediaKitUrl(String mediaKitUrl) {
    this.mediaKitUrl = mediaKitUrl;
  }


  public PublisherProfile mobileApps(List<PublisherProfileMobileApplication> mobileApps) {
    this.mobileApps = mobileApps;
    return this;
  }

  public PublisherProfile addMobileAppsItem(PublisherProfileMobileApplication mobileAppsItem) {
    if (this.mobileApps == null) {
      this.mobileApps = new ArrayList<>();
    }
    this.mobileApps.add(mobileAppsItem);
    return this;
  }

  /**
   * The list of apps represented in this publisher profile. Empty if this is a parent profile.
   * @return mobileApps
   */
  @javax.annotation.Nullable
  public List<PublisherProfileMobileApplication> getMobileApps() {
    return mobileApps;
  }

  public void setMobileApps(List<PublisherProfileMobileApplication> mobileApps) {
    this.mobileApps = mobileApps;
  }


  public PublisherProfile name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the publisher profile. Format: &#x60;buyers/{buyer}/publisherProfiles/{publisher_profile}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PublisherProfile overview(String overview) {
    this.overview = overview;
    return this;
  }

  /**
   * Overview of the publisher.
   * @return overview
   */
  @javax.annotation.Nullable
  public String getOverview() {
    return overview;
  }

  public void setOverview(String overview) {
    this.overview = overview;
  }


  public PublisherProfile pitchStatement(String pitchStatement) {
    this.pitchStatement = pitchStatement;
    return this;
  }

  /**
   * Statement explaining what&#39;s unique about publisher&#39;s business, and why buyers should partner with the publisher.
   * @return pitchStatement
   */
  @javax.annotation.Nullable
  public String getPitchStatement() {
    return pitchStatement;
  }

  public void setPitchStatement(String pitchStatement) {
    this.pitchStatement = pitchStatement;
  }


  public PublisherProfile programmaticDealsContact(String programmaticDealsContact) {
    this.programmaticDealsContact = programmaticDealsContact;
    return this;
  }

  /**
   * Contact information for programmatic deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.
   * @return programmaticDealsContact
   */
  @javax.annotation.Nullable
  public String getProgrammaticDealsContact() {
    return programmaticDealsContact;
  }

  public void setProgrammaticDealsContact(String programmaticDealsContact) {
    this.programmaticDealsContact = programmaticDealsContact;
  }


  public PublisherProfile publisherCode(String publisherCode) {
    this.publisherCode = publisherCode;
    return this;
  }

  /**
   * A unique identifying code for the seller. This value is the same for all of the seller&#39;s parent and child publisher profiles. Can be used to filter the response of the publisherProfiles.list method.
   * @return publisherCode
   */
  @javax.annotation.Nullable
  public String getPublisherCode() {
    return publisherCode;
  }

  public void setPublisherCode(String publisherCode) {
    this.publisherCode = publisherCode;
  }


  public PublisherProfile samplePageUrl(String samplePageUrl) {
    this.samplePageUrl = samplePageUrl;
    return this;
  }

  /**
   * URL to a sample content page.
   * @return samplePageUrl
   */
  @javax.annotation.Nullable
  public String getSamplePageUrl() {
    return samplePageUrl;
  }

  public void setSamplePageUrl(String samplePageUrl) {
    this.samplePageUrl = samplePageUrl;
  }


  public PublisherProfile topHeadlines(List<String> topHeadlines) {
    this.topHeadlines = topHeadlines;
    return this;
  }

  public PublisherProfile addTopHeadlinesItem(String topHeadlinesItem) {
    if (this.topHeadlines == null) {
      this.topHeadlines = new ArrayList<>();
    }
    this.topHeadlines.add(topHeadlinesItem);
    return this;
  }

  /**
   * Up to three key metrics and rankings. For example, \&quot;#1 Mobile News Site for 20 Straight Months\&quot;.
   * @return topHeadlines
   */
  @javax.annotation.Nullable
  public List<String> getTopHeadlines() {
    return topHeadlines;
  }

  public void setTopHeadlines(List<String> topHeadlines) {
    this.topHeadlines = topHeadlines;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublisherProfile publisherProfile = (PublisherProfile) o;
    return Objects.equals(this.audienceDescription, publisherProfile.audienceDescription) &&
        Objects.equals(this.directDealsContact, publisherProfile.directDealsContact) &&
        Objects.equals(this.displayName, publisherProfile.displayName) &&
        Objects.equals(this.domains, publisherProfile.domains) &&
        Objects.equals(this.isParent, publisherProfile.isParent) &&
        Objects.equals(this.logoUrl, publisherProfile.logoUrl) &&
        Objects.equals(this.mediaKitUrl, publisherProfile.mediaKitUrl) &&
        Objects.equals(this.mobileApps, publisherProfile.mobileApps) &&
        Objects.equals(this.name, publisherProfile.name) &&
        Objects.equals(this.overview, publisherProfile.overview) &&
        Objects.equals(this.pitchStatement, publisherProfile.pitchStatement) &&
        Objects.equals(this.programmaticDealsContact, publisherProfile.programmaticDealsContact) &&
        Objects.equals(this.publisherCode, publisherProfile.publisherCode) &&
        Objects.equals(this.samplePageUrl, publisherProfile.samplePageUrl) &&
        Objects.equals(this.topHeadlines, publisherProfile.topHeadlines);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audienceDescription, directDealsContact, displayName, domains, isParent, logoUrl, mediaKitUrl, mobileApps, name, overview, pitchStatement, programmaticDealsContact, publisherCode, samplePageUrl, topHeadlines);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublisherProfile {\n");
    sb.append("    audienceDescription: ").append(toIndentedString(audienceDescription)).append("\n");
    sb.append("    directDealsContact: ").append(toIndentedString(directDealsContact)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    isParent: ").append(toIndentedString(isParent)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("    mediaKitUrl: ").append(toIndentedString(mediaKitUrl)).append("\n");
    sb.append("    mobileApps: ").append(toIndentedString(mobileApps)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    overview: ").append(toIndentedString(overview)).append("\n");
    sb.append("    pitchStatement: ").append(toIndentedString(pitchStatement)).append("\n");
    sb.append("    programmaticDealsContact: ").append(toIndentedString(programmaticDealsContact)).append("\n");
    sb.append("    publisherCode: ").append(toIndentedString(publisherCode)).append("\n");
    sb.append("    samplePageUrl: ").append(toIndentedString(samplePageUrl)).append("\n");
    sb.append("    topHeadlines: ").append(toIndentedString(topHeadlines)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audienceDescription");
    openapiFields.add("directDealsContact");
    openapiFields.add("displayName");
    openapiFields.add("domains");
    openapiFields.add("isParent");
    openapiFields.add("logoUrl");
    openapiFields.add("mediaKitUrl");
    openapiFields.add("mobileApps");
    openapiFields.add("name");
    openapiFields.add("overview");
    openapiFields.add("pitchStatement");
    openapiFields.add("programmaticDealsContact");
    openapiFields.add("publisherCode");
    openapiFields.add("samplePageUrl");
    openapiFields.add("topHeadlines");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublisherProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublisherProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublisherProfile is not found in the empty JSON string", PublisherProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublisherProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublisherProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("audienceDescription") != null && !jsonObj.get("audienceDescription").isJsonNull()) && !jsonObj.get("audienceDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audienceDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audienceDescription").toString()));
      }
      if ((jsonObj.get("directDealsContact") != null && !jsonObj.get("directDealsContact").isJsonNull()) && !jsonObj.get("directDealsContact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directDealsContact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directDealsContact").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("domains") != null && !jsonObj.get("domains").isJsonNull() && !jsonObj.get("domains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `domains` to be an array in the JSON string but got `%s`", jsonObj.get("domains").toString()));
      }
      if ((jsonObj.get("logoUrl") != null && !jsonObj.get("logoUrl").isJsonNull()) && !jsonObj.get("logoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logoUrl").toString()));
      }
      if ((jsonObj.get("mediaKitUrl") != null && !jsonObj.get("mediaKitUrl").isJsonNull()) && !jsonObj.get("mediaKitUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediaKitUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediaKitUrl").toString()));
      }
      if (jsonObj.get("mobileApps") != null && !jsonObj.get("mobileApps").isJsonNull()) {
        JsonArray jsonArraymobileApps = jsonObj.getAsJsonArray("mobileApps");
        if (jsonArraymobileApps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mobileApps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mobileApps` to be an array in the JSON string but got `%s`", jsonObj.get("mobileApps").toString()));
          }

          // validate the optional field `mobileApps` (array)
          for (int i = 0; i < jsonArraymobileApps.size(); i++) {
            PublisherProfileMobileApplication.validateJsonElement(jsonArraymobileApps.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("overview") != null && !jsonObj.get("overview").isJsonNull()) && !jsonObj.get("overview").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overview` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overview").toString()));
      }
      if ((jsonObj.get("pitchStatement") != null && !jsonObj.get("pitchStatement").isJsonNull()) && !jsonObj.get("pitchStatement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pitchStatement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pitchStatement").toString()));
      }
      if ((jsonObj.get("programmaticDealsContact") != null && !jsonObj.get("programmaticDealsContact").isJsonNull()) && !jsonObj.get("programmaticDealsContact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `programmaticDealsContact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("programmaticDealsContact").toString()));
      }
      if ((jsonObj.get("publisherCode") != null && !jsonObj.get("publisherCode").isJsonNull()) && !jsonObj.get("publisherCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherCode").toString()));
      }
      if ((jsonObj.get("samplePageUrl") != null && !jsonObj.get("samplePageUrl").isJsonNull()) && !jsonObj.get("samplePageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `samplePageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("samplePageUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("topHeadlines") != null && !jsonObj.get("topHeadlines").isJsonNull() && !jsonObj.get("topHeadlines").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `topHeadlines` to be an array in the JSON string but got `%s`", jsonObj.get("topHeadlines").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublisherProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublisherProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublisherProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublisherProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<PublisherProfile>() {
           @Override
           public void write(JsonWriter out, PublisherProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublisherProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublisherProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublisherProfile
   * @throws IOException if the JSON string is invalid with respect to PublisherProfile
   */
  public static PublisherProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublisherProfile.class);
  }

  /**
   * Convert an instance of PublisherProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

