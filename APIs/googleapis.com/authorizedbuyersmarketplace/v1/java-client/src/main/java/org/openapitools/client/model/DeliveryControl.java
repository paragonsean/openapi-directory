/*
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FrequencyCap;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message contains details about how the deal will be paced.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:11.931533-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeliveryControl {
  /**
   * Output only. Specifies roadblocking in a main companion lineitem.
   */
  @JsonAdapter(CompanionDeliveryTypeEnum.Adapter.class)
  public enum CompanionDeliveryTypeEnum {
    COMPANION_DELIVERY_TYPE_UNSPECIFIED("COMPANION_DELIVERY_TYPE_UNSPECIFIED"),
    
    DELIVERY_OPTIONAL("DELIVERY_OPTIONAL"),
    
    DELIVERY_AT_LEAST_ONE("DELIVERY_AT_LEAST_ONE"),
    
    DELIVERY_ALL("DELIVERY_ALL");

    private String value;

    CompanionDeliveryTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompanionDeliveryTypeEnum fromValue(String value) {
      for (CompanionDeliveryTypeEnum b : CompanionDeliveryTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CompanionDeliveryTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompanionDeliveryTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompanionDeliveryTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CompanionDeliveryTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CompanionDeliveryTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPANION_DELIVERY_TYPE = "companionDeliveryType";
  @SerializedName(SERIALIZED_NAME_COMPANION_DELIVERY_TYPE)
  private CompanionDeliveryTypeEnum companionDeliveryType;

  /**
   * Output only. Specifies strategy to use for selecting a creative when multiple creatives of the same size are available.
   */
  @JsonAdapter(CreativeRotationTypeEnum.Adapter.class)
  public enum CreativeRotationTypeEnum {
    CREATIVE_ROTATION_TYPE_UNSPECIFIED("CREATIVE_ROTATION_TYPE_UNSPECIFIED"),
    
    ROTATION_EVEN("ROTATION_EVEN"),
    
    ROTATION_OPTIMIZED("ROTATION_OPTIMIZED"),
    
    ROTATION_MANUAL("ROTATION_MANUAL"),
    
    ROTATION_SEQUENTIAL("ROTATION_SEQUENTIAL");

    private String value;

    CreativeRotationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreativeRotationTypeEnum fromValue(String value) {
      for (CreativeRotationTypeEnum b : CreativeRotationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreativeRotationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreativeRotationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreativeRotationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreativeRotationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreativeRotationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATIVE_ROTATION_TYPE = "creativeRotationType";
  @SerializedName(SERIALIZED_NAME_CREATIVE_ROTATION_TYPE)
  private CreativeRotationTypeEnum creativeRotationType;

  /**
   * Output only. Specifies how the impression delivery will be paced.
   */
  @JsonAdapter(DeliveryRateTypeEnum.Adapter.class)
  public enum DeliveryRateTypeEnum {
    DELIVERY_RATE_TYPE_UNSPECIFIED("DELIVERY_RATE_TYPE_UNSPECIFIED"),
    
    EVENLY("EVENLY"),
    
    FRONT_LOADED("FRONT_LOADED"),
    
    AS_FAST_AS_POSSIBLE("AS_FAST_AS_POSSIBLE");

    private String value;

    DeliveryRateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryRateTypeEnum fromValue(String value) {
      for (DeliveryRateTypeEnum b : DeliveryRateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeliveryRateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryRateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryRateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeliveryRateTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeliveryRateTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DELIVERY_RATE_TYPE = "deliveryRateType";
  @SerializedName(SERIALIZED_NAME_DELIVERY_RATE_TYPE)
  private DeliveryRateTypeEnum deliveryRateType;

  public static final String SERIALIZED_NAME_FREQUENCY_CAP = "frequencyCap";
  @SerializedName(SERIALIZED_NAME_FREQUENCY_CAP)
  private List<FrequencyCap> frequencyCap = new ArrayList<>();

  /**
   * Output only. Specifies the roadblocking type in display creatives.
   */
  @JsonAdapter(RoadblockingTypeEnum.Adapter.class)
  public enum RoadblockingTypeEnum {
    ROADBLOCKING_TYPE_UNSPECIFIED("ROADBLOCKING_TYPE_UNSPECIFIED"),
    
    ONLY_ONE("ONLY_ONE"),
    
    ONE_OR_MORE("ONE_OR_MORE"),
    
    AS_MANY_AS_POSSIBLE("AS_MANY_AS_POSSIBLE"),
    
    ALL_ROADBLOCK("ALL_ROADBLOCK"),
    
    CREATIVE_SET("CREATIVE_SET");

    private String value;

    RoadblockingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoadblockingTypeEnum fromValue(String value) {
      for (RoadblockingTypeEnum b : RoadblockingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoadblockingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoadblockingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoadblockingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoadblockingTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoadblockingTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROADBLOCKING_TYPE = "roadblockingType";
  @SerializedName(SERIALIZED_NAME_ROADBLOCKING_TYPE)
  private RoadblockingTypeEnum roadblockingType;

  public DeliveryControl() {
  }

  public DeliveryControl(
     CompanionDeliveryTypeEnum companionDeliveryType, 
     CreativeRotationTypeEnum creativeRotationType, 
     DeliveryRateTypeEnum deliveryRateType, 
     List<FrequencyCap> frequencyCap, 
     RoadblockingTypeEnum roadblockingType
  ) {
    this();
    this.companionDeliveryType = companionDeliveryType;
    this.creativeRotationType = creativeRotationType;
    this.deliveryRateType = deliveryRateType;
    this.frequencyCap = frequencyCap;
    this.roadblockingType = roadblockingType;
  }

  /**
   * Output only. Specifies roadblocking in a main companion lineitem.
   * @return companionDeliveryType
   */
  @javax.annotation.Nullable
  public CompanionDeliveryTypeEnum getCompanionDeliveryType() {
    return companionDeliveryType;
  }



  /**
   * Output only. Specifies strategy to use for selecting a creative when multiple creatives of the same size are available.
   * @return creativeRotationType
   */
  @javax.annotation.Nullable
  public CreativeRotationTypeEnum getCreativeRotationType() {
    return creativeRotationType;
  }



  /**
   * Output only. Specifies how the impression delivery will be paced.
   * @return deliveryRateType
   */
  @javax.annotation.Nullable
  public DeliveryRateTypeEnum getDeliveryRateType() {
    return deliveryRateType;
  }



  /**
   * Output only. Specifies any frequency caps. Cannot be filtered within ListDealsRequest.
   * @return frequencyCap
   */
  @javax.annotation.Nullable
  public List<FrequencyCap> getFrequencyCap() {
    return frequencyCap;
  }



  /**
   * Output only. Specifies the roadblocking type in display creatives.
   * @return roadblockingType
   */
  @javax.annotation.Nullable
  public RoadblockingTypeEnum getRoadblockingType() {
    return roadblockingType;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeliveryControl deliveryControl = (DeliveryControl) o;
    return Objects.equals(this.companionDeliveryType, deliveryControl.companionDeliveryType) &&
        Objects.equals(this.creativeRotationType, deliveryControl.creativeRotationType) &&
        Objects.equals(this.deliveryRateType, deliveryControl.deliveryRateType) &&
        Objects.equals(this.frequencyCap, deliveryControl.frequencyCap) &&
        Objects.equals(this.roadblockingType, deliveryControl.roadblockingType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companionDeliveryType, creativeRotationType, deliveryRateType, frequencyCap, roadblockingType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeliveryControl {\n");
    sb.append("    companionDeliveryType: ").append(toIndentedString(companionDeliveryType)).append("\n");
    sb.append("    creativeRotationType: ").append(toIndentedString(creativeRotationType)).append("\n");
    sb.append("    deliveryRateType: ").append(toIndentedString(deliveryRateType)).append("\n");
    sb.append("    frequencyCap: ").append(toIndentedString(frequencyCap)).append("\n");
    sb.append("    roadblockingType: ").append(toIndentedString(roadblockingType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("companionDeliveryType");
    openapiFields.add("creativeRotationType");
    openapiFields.add("deliveryRateType");
    openapiFields.add("frequencyCap");
    openapiFields.add("roadblockingType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeliveryControl
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeliveryControl.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeliveryControl is not found in the empty JSON string", DeliveryControl.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeliveryControl.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeliveryControl` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("companionDeliveryType") != null && !jsonObj.get("companionDeliveryType").isJsonNull()) && !jsonObj.get("companionDeliveryType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companionDeliveryType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companionDeliveryType").toString()));
      }
      // validate the optional field `companionDeliveryType`
      if (jsonObj.get("companionDeliveryType") != null && !jsonObj.get("companionDeliveryType").isJsonNull()) {
        CompanionDeliveryTypeEnum.validateJsonElement(jsonObj.get("companionDeliveryType"));
      }
      if ((jsonObj.get("creativeRotationType") != null && !jsonObj.get("creativeRotationType").isJsonNull()) && !jsonObj.get("creativeRotationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativeRotationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creativeRotationType").toString()));
      }
      // validate the optional field `creativeRotationType`
      if (jsonObj.get("creativeRotationType") != null && !jsonObj.get("creativeRotationType").isJsonNull()) {
        CreativeRotationTypeEnum.validateJsonElement(jsonObj.get("creativeRotationType"));
      }
      if ((jsonObj.get("deliveryRateType") != null && !jsonObj.get("deliveryRateType").isJsonNull()) && !jsonObj.get("deliveryRateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryRateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryRateType").toString()));
      }
      // validate the optional field `deliveryRateType`
      if (jsonObj.get("deliveryRateType") != null && !jsonObj.get("deliveryRateType").isJsonNull()) {
        DeliveryRateTypeEnum.validateJsonElement(jsonObj.get("deliveryRateType"));
      }
      if (jsonObj.get("frequencyCap") != null && !jsonObj.get("frequencyCap").isJsonNull()) {
        JsonArray jsonArrayfrequencyCap = jsonObj.getAsJsonArray("frequencyCap");
        if (jsonArrayfrequencyCap != null) {
          // ensure the json data is an array
          if (!jsonObj.get("frequencyCap").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `frequencyCap` to be an array in the JSON string but got `%s`", jsonObj.get("frequencyCap").toString()));
          }

          // validate the optional field `frequencyCap` (array)
          for (int i = 0; i < jsonArrayfrequencyCap.size(); i++) {
            FrequencyCap.validateJsonElement(jsonArrayfrequencyCap.get(i));
          };
        }
      }
      if ((jsonObj.get("roadblockingType") != null && !jsonObj.get("roadblockingType").isJsonNull()) && !jsonObj.get("roadblockingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roadblockingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roadblockingType").toString()));
      }
      // validate the optional field `roadblockingType`
      if (jsonObj.get("roadblockingType") != null && !jsonObj.get("roadblockingType").isJsonNull()) {
        RoadblockingTypeEnum.validateJsonElement(jsonObj.get("roadblockingType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeliveryControl.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeliveryControl' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeliveryControl> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeliveryControl.class));

       return (TypeAdapter<T>) new TypeAdapter<DeliveryControl>() {
           @Override
           public void write(JsonWriter out, DeliveryControl value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeliveryControl read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeliveryControl given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeliveryControl
   * @throws IOException if the JSON string is invalid with respect to DeliveryControl
   */
  public static DeliveryControl fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeliveryControl.class);
  }

  /**
   * Convert an instance of DeliveryControl to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

