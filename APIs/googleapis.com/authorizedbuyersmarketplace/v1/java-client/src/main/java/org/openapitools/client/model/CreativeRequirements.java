/*
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message captures data about the creatives in the deal.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:11.931533-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreativeRequirements {
  /**
   * Output only. The format of the creative, only applicable for programmatic guaranteed and preferred deals.
   */
  @JsonAdapter(CreativeFormatEnum.Adapter.class)
  public enum CreativeFormatEnum {
    CREATIVE_FORMAT_UNSPECIFIED("CREATIVE_FORMAT_UNSPECIFIED"),
    
    DISPLAY("DISPLAY"),
    
    VIDEO("VIDEO"),
    
    AUDIO("AUDIO");

    private String value;

    CreativeFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreativeFormatEnum fromValue(String value) {
      for (CreativeFormatEnum b : CreativeFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreativeFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreativeFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreativeFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreativeFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreativeFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATIVE_FORMAT = "creativeFormat";
  @SerializedName(SERIALIZED_NAME_CREATIVE_FORMAT)
  private CreativeFormatEnum creativeFormat;

  /**
   * Output only. Specifies the creative pre-approval policy.
   */
  @JsonAdapter(CreativePreApprovalPolicyEnum.Adapter.class)
  public enum CreativePreApprovalPolicyEnum {
    CREATIVE_PRE_APPROVAL_POLICY_UNSPECIFIED("CREATIVE_PRE_APPROVAL_POLICY_UNSPECIFIED"),
    
    SELLER_PRE_APPROVAL_REQUIRED("SELLER_PRE_APPROVAL_REQUIRED"),
    
    SELLER_PRE_APPROVAL_NOT_REQUIRED("SELLER_PRE_APPROVAL_NOT_REQUIRED");

    private String value;

    CreativePreApprovalPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreativePreApprovalPolicyEnum fromValue(String value) {
      for (CreativePreApprovalPolicyEnum b : CreativePreApprovalPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreativePreApprovalPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreativePreApprovalPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreativePreApprovalPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreativePreApprovalPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreativePreApprovalPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATIVE_PRE_APPROVAL_POLICY = "creativePreApprovalPolicy";
  @SerializedName(SERIALIZED_NAME_CREATIVE_PRE_APPROVAL_POLICY)
  private CreativePreApprovalPolicyEnum creativePreApprovalPolicy;

  /**
   * Output only. Specifies whether the creative is safeFrame compatible.
   */
  @JsonAdapter(CreativeSafeFrameCompatibilityEnum.Adapter.class)
  public enum CreativeSafeFrameCompatibilityEnum {
    CREATIVE_SAFE_FRAME_COMPATIBILITY_UNSPECIFIED("CREATIVE_SAFE_FRAME_COMPATIBILITY_UNSPECIFIED"),
    
    COMPATIBLE("COMPATIBLE"),
    
    INCOMPATIBLE("INCOMPATIBLE");

    private String value;

    CreativeSafeFrameCompatibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreativeSafeFrameCompatibilityEnum fromValue(String value) {
      for (CreativeSafeFrameCompatibilityEnum b : CreativeSafeFrameCompatibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreativeSafeFrameCompatibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreativeSafeFrameCompatibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreativeSafeFrameCompatibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreativeSafeFrameCompatibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreativeSafeFrameCompatibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATIVE_SAFE_FRAME_COMPATIBILITY = "creativeSafeFrameCompatibility";
  @SerializedName(SERIALIZED_NAME_CREATIVE_SAFE_FRAME_COMPATIBILITY)
  private CreativeSafeFrameCompatibilityEnum creativeSafeFrameCompatibility;

  public static final String SERIALIZED_NAME_MAX_AD_DURATION_MS = "maxAdDurationMs";
  @SerializedName(SERIALIZED_NAME_MAX_AD_DURATION_MS)
  private String maxAdDurationMs;

  /**
   * Output only. Specifies the creative source for programmatic deals. PUBLISHER means creative is provided by seller and ADVERTISER means creative is provided by the buyer.
   */
  @JsonAdapter(ProgrammaticCreativeSourceEnum.Adapter.class)
  public enum ProgrammaticCreativeSourceEnum {
    PROGRAMMATIC_CREATIVE_SOURCE_UNSPECIFIED("PROGRAMMATIC_CREATIVE_SOURCE_UNSPECIFIED"),
    
    ADVERTISER("ADVERTISER"),
    
    PUBLISHER("PUBLISHER");

    private String value;

    ProgrammaticCreativeSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProgrammaticCreativeSourceEnum fromValue(String value) {
      for (ProgrammaticCreativeSourceEnum b : ProgrammaticCreativeSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProgrammaticCreativeSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProgrammaticCreativeSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProgrammaticCreativeSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProgrammaticCreativeSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProgrammaticCreativeSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROGRAMMATIC_CREATIVE_SOURCE = "programmaticCreativeSource";
  @SerializedName(SERIALIZED_NAME_PROGRAMMATIC_CREATIVE_SOURCE)
  private ProgrammaticCreativeSourceEnum programmaticCreativeSource;

  /**
   * Output only. Skippable video ads allow viewers to skip ads after 5 seconds. Only applicable for deals with video creatives.
   */
  @JsonAdapter(SkippableAdTypeEnum.Adapter.class)
  public enum SkippableAdTypeEnum {
    SKIPPABLE_AD_TYPE_UNSPECIFIED("SKIPPABLE_AD_TYPE_UNSPECIFIED"),
    
    SKIPPABLE("SKIPPABLE"),
    
    INSTREAM_SELECT("INSTREAM_SELECT"),
    
    NOT_SKIPPABLE("NOT_SKIPPABLE"),
    
    ANY("ANY");

    private String value;

    SkippableAdTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SkippableAdTypeEnum fromValue(String value) {
      for (SkippableAdTypeEnum b : SkippableAdTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SkippableAdTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SkippableAdTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SkippableAdTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SkippableAdTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SkippableAdTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SKIPPABLE_AD_TYPE = "skippableAdType";
  @SerializedName(SERIALIZED_NAME_SKIPPABLE_AD_TYPE)
  private SkippableAdTypeEnum skippableAdType;

  public CreativeRequirements() {
  }

  public CreativeRequirements(
     CreativeFormatEnum creativeFormat, 
     CreativePreApprovalPolicyEnum creativePreApprovalPolicy, 
     CreativeSafeFrameCompatibilityEnum creativeSafeFrameCompatibility, 
     String maxAdDurationMs, 
     ProgrammaticCreativeSourceEnum programmaticCreativeSource, 
     SkippableAdTypeEnum skippableAdType
  ) {
    this();
    this.creativeFormat = creativeFormat;
    this.creativePreApprovalPolicy = creativePreApprovalPolicy;
    this.creativeSafeFrameCompatibility = creativeSafeFrameCompatibility;
    this.maxAdDurationMs = maxAdDurationMs;
    this.programmaticCreativeSource = programmaticCreativeSource;
    this.skippableAdType = skippableAdType;
  }

  /**
   * Output only. The format of the creative, only applicable for programmatic guaranteed and preferred deals.
   * @return creativeFormat
   */
  @javax.annotation.Nullable
  public CreativeFormatEnum getCreativeFormat() {
    return creativeFormat;
  }



  /**
   * Output only. Specifies the creative pre-approval policy.
   * @return creativePreApprovalPolicy
   */
  @javax.annotation.Nullable
  public CreativePreApprovalPolicyEnum getCreativePreApprovalPolicy() {
    return creativePreApprovalPolicy;
  }



  /**
   * Output only. Specifies whether the creative is safeFrame compatible.
   * @return creativeSafeFrameCompatibility
   */
  @javax.annotation.Nullable
  public CreativeSafeFrameCompatibilityEnum getCreativeSafeFrameCompatibility() {
    return creativeSafeFrameCompatibility;
  }



  /**
   * Output only. The max duration of the video creative in milliseconds. only applicable for deals with video creatives.
   * @return maxAdDurationMs
   */
  @javax.annotation.Nullable
  public String getMaxAdDurationMs() {
    return maxAdDurationMs;
  }



  /**
   * Output only. Specifies the creative source for programmatic deals. PUBLISHER means creative is provided by seller and ADVERTISER means creative is provided by the buyer.
   * @return programmaticCreativeSource
   */
  @javax.annotation.Nullable
  public ProgrammaticCreativeSourceEnum getProgrammaticCreativeSource() {
    return programmaticCreativeSource;
  }



  /**
   * Output only. Skippable video ads allow viewers to skip ads after 5 seconds. Only applicable for deals with video creatives.
   * @return skippableAdType
   */
  @javax.annotation.Nullable
  public SkippableAdTypeEnum getSkippableAdType() {
    return skippableAdType;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreativeRequirements creativeRequirements = (CreativeRequirements) o;
    return Objects.equals(this.creativeFormat, creativeRequirements.creativeFormat) &&
        Objects.equals(this.creativePreApprovalPolicy, creativeRequirements.creativePreApprovalPolicy) &&
        Objects.equals(this.creativeSafeFrameCompatibility, creativeRequirements.creativeSafeFrameCompatibility) &&
        Objects.equals(this.maxAdDurationMs, creativeRequirements.maxAdDurationMs) &&
        Objects.equals(this.programmaticCreativeSource, creativeRequirements.programmaticCreativeSource) &&
        Objects.equals(this.skippableAdType, creativeRequirements.skippableAdType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creativeFormat, creativePreApprovalPolicy, creativeSafeFrameCompatibility, maxAdDurationMs, programmaticCreativeSource, skippableAdType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreativeRequirements {\n");
    sb.append("    creativeFormat: ").append(toIndentedString(creativeFormat)).append("\n");
    sb.append("    creativePreApprovalPolicy: ").append(toIndentedString(creativePreApprovalPolicy)).append("\n");
    sb.append("    creativeSafeFrameCompatibility: ").append(toIndentedString(creativeSafeFrameCompatibility)).append("\n");
    sb.append("    maxAdDurationMs: ").append(toIndentedString(maxAdDurationMs)).append("\n");
    sb.append("    programmaticCreativeSource: ").append(toIndentedString(programmaticCreativeSource)).append("\n");
    sb.append("    skippableAdType: ").append(toIndentedString(skippableAdType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creativeFormat");
    openapiFields.add("creativePreApprovalPolicy");
    openapiFields.add("creativeSafeFrameCompatibility");
    openapiFields.add("maxAdDurationMs");
    openapiFields.add("programmaticCreativeSource");
    openapiFields.add("skippableAdType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreativeRequirements
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreativeRequirements.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreativeRequirements is not found in the empty JSON string", CreativeRequirements.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreativeRequirements.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreativeRequirements` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creativeFormat") != null && !jsonObj.get("creativeFormat").isJsonNull()) && !jsonObj.get("creativeFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativeFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creativeFormat").toString()));
      }
      // validate the optional field `creativeFormat`
      if (jsonObj.get("creativeFormat") != null && !jsonObj.get("creativeFormat").isJsonNull()) {
        CreativeFormatEnum.validateJsonElement(jsonObj.get("creativeFormat"));
      }
      if ((jsonObj.get("creativePreApprovalPolicy") != null && !jsonObj.get("creativePreApprovalPolicy").isJsonNull()) && !jsonObj.get("creativePreApprovalPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativePreApprovalPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creativePreApprovalPolicy").toString()));
      }
      // validate the optional field `creativePreApprovalPolicy`
      if (jsonObj.get("creativePreApprovalPolicy") != null && !jsonObj.get("creativePreApprovalPolicy").isJsonNull()) {
        CreativePreApprovalPolicyEnum.validateJsonElement(jsonObj.get("creativePreApprovalPolicy"));
      }
      if ((jsonObj.get("creativeSafeFrameCompatibility") != null && !jsonObj.get("creativeSafeFrameCompatibility").isJsonNull()) && !jsonObj.get("creativeSafeFrameCompatibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativeSafeFrameCompatibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creativeSafeFrameCompatibility").toString()));
      }
      // validate the optional field `creativeSafeFrameCompatibility`
      if (jsonObj.get("creativeSafeFrameCompatibility") != null && !jsonObj.get("creativeSafeFrameCompatibility").isJsonNull()) {
        CreativeSafeFrameCompatibilityEnum.validateJsonElement(jsonObj.get("creativeSafeFrameCompatibility"));
      }
      if ((jsonObj.get("maxAdDurationMs") != null && !jsonObj.get("maxAdDurationMs").isJsonNull()) && !jsonObj.get("maxAdDurationMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxAdDurationMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxAdDurationMs").toString()));
      }
      if ((jsonObj.get("programmaticCreativeSource") != null && !jsonObj.get("programmaticCreativeSource").isJsonNull()) && !jsonObj.get("programmaticCreativeSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `programmaticCreativeSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("programmaticCreativeSource").toString()));
      }
      // validate the optional field `programmaticCreativeSource`
      if (jsonObj.get("programmaticCreativeSource") != null && !jsonObj.get("programmaticCreativeSource").isJsonNull()) {
        ProgrammaticCreativeSourceEnum.validateJsonElement(jsonObj.get("programmaticCreativeSource"));
      }
      if ((jsonObj.get("skippableAdType") != null && !jsonObj.get("skippableAdType").isJsonNull()) && !jsonObj.get("skippableAdType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skippableAdType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skippableAdType").toString()));
      }
      // validate the optional field `skippableAdType`
      if (jsonObj.get("skippableAdType") != null && !jsonObj.get("skippableAdType").isJsonNull()) {
        SkippableAdTypeEnum.validateJsonElement(jsonObj.get("skippableAdType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreativeRequirements.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreativeRequirements' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreativeRequirements> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreativeRequirements.class));

       return (TypeAdapter<T>) new TypeAdapter<CreativeRequirements>() {
           @Override
           public void write(JsonWriter out, CreativeRequirements value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreativeRequirements read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreativeRequirements given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreativeRequirements
   * @throws IOException if the JSON string is invalid with respect to CreativeRequirements
   */
  public static CreativeRequirements fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreativeRequirements.class);
  }

  /**
   * Convert an instance of CreativeRequirements to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

