/*
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Deal;
import org.openapitools.client.model.DealPausingInfo;
import org.openapitools.client.model.RtbMetrics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A finalized deal is a snapshot of the deal when both buyer and seller accept the deal. The buyer or seller can update the deal after it&#39;s been finalized and renegotiate on the deal targeting, terms and other fields, while at the same time the finalized snapshot of the deal can still be retrieved using this API. The finalized deal contains a copy of the deal as it existed when most recently finalized, as well as fields related to deal serving such as pause/resume status, RTB metrics, and more.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:11.931533-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FinalizedDeal {
  public static final String SERIALIZED_NAME_DEAL = "deal";
  @SerializedName(SERIALIZED_NAME_DEAL)
  private Deal deal;

  public static final String SERIALIZED_NAME_DEAL_PAUSING_INFO = "dealPausingInfo";
  @SerializedName(SERIALIZED_NAME_DEAL_PAUSING_INFO)
  private DealPausingInfo dealPausingInfo;

  /**
   * Serving status of the deal.
   */
  @JsonAdapter(DealServingStatusEnum.Adapter.class)
  public enum DealServingStatusEnum {
    DEAL_SERVING_STATUS_UNSPECIFIED("DEAL_SERVING_STATUS_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    ENDED("ENDED"),
    
    PAUSED_BY_BUYER("PAUSED_BY_BUYER"),
    
    PAUSED_BY_SELLER("PAUSED_BY_SELLER");

    private String value;

    DealServingStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DealServingStatusEnum fromValue(String value) {
      for (DealServingStatusEnum b : DealServingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DealServingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DealServingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DealServingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DealServingStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DealServingStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEAL_SERVING_STATUS = "dealServingStatus";
  @SerializedName(SERIALIZED_NAME_DEAL_SERVING_STATUS)
  private DealServingStatusEnum dealServingStatus;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_READY_TO_SERVE = "readyToServe";
  @SerializedName(SERIALIZED_NAME_READY_TO_SERVE)
  private Boolean readyToServe;

  public static final String SERIALIZED_NAME_RTB_METRICS = "rtbMetrics";
  @SerializedName(SERIALIZED_NAME_RTB_METRICS)
  private RtbMetrics rtbMetrics;

  public FinalizedDeal() {
  }

  public FinalizedDeal deal(Deal deal) {
    this.deal = deal;
    return this;
  }

  /**
   * Get deal
   * @return deal
   */
  @javax.annotation.Nullable
  public Deal getDeal() {
    return deal;
  }

  public void setDeal(Deal deal) {
    this.deal = deal;
  }


  public FinalizedDeal dealPausingInfo(DealPausingInfo dealPausingInfo) {
    this.dealPausingInfo = dealPausingInfo;
    return this;
  }

  /**
   * Get dealPausingInfo
   * @return dealPausingInfo
   */
  @javax.annotation.Nullable
  public DealPausingInfo getDealPausingInfo() {
    return dealPausingInfo;
  }

  public void setDealPausingInfo(DealPausingInfo dealPausingInfo) {
    this.dealPausingInfo = dealPausingInfo;
  }


  public FinalizedDeal dealServingStatus(DealServingStatusEnum dealServingStatus) {
    this.dealServingStatus = dealServingStatus;
    return this;
  }

  /**
   * Serving status of the deal.
   * @return dealServingStatus
   */
  @javax.annotation.Nullable
  public DealServingStatusEnum getDealServingStatus() {
    return dealServingStatus;
  }

  public void setDealServingStatus(DealServingStatusEnum dealServingStatus) {
    this.dealServingStatus = dealServingStatus;
  }


  public FinalizedDeal name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the finalized deal. Format: &#x60;buyers/{accountId}/finalizedDeals/{finalizedDealId}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FinalizedDeal readyToServe(Boolean readyToServe) {
    this.readyToServe = readyToServe;
    return this;
  }

  /**
   * Whether the Programmatic Guaranteed deal is ready for serving.
   * @return readyToServe
   */
  @javax.annotation.Nullable
  public Boolean getReadyToServe() {
    return readyToServe;
  }

  public void setReadyToServe(Boolean readyToServe) {
    this.readyToServe = readyToServe;
  }


  public FinalizedDeal rtbMetrics(RtbMetrics rtbMetrics) {
    this.rtbMetrics = rtbMetrics;
    return this;
  }

  /**
   * Get rtbMetrics
   * @return rtbMetrics
   */
  @javax.annotation.Nullable
  public RtbMetrics getRtbMetrics() {
    return rtbMetrics;
  }

  public void setRtbMetrics(RtbMetrics rtbMetrics) {
    this.rtbMetrics = rtbMetrics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FinalizedDeal finalizedDeal = (FinalizedDeal) o;
    return Objects.equals(this.deal, finalizedDeal.deal) &&
        Objects.equals(this.dealPausingInfo, finalizedDeal.dealPausingInfo) &&
        Objects.equals(this.dealServingStatus, finalizedDeal.dealServingStatus) &&
        Objects.equals(this.name, finalizedDeal.name) &&
        Objects.equals(this.readyToServe, finalizedDeal.readyToServe) &&
        Objects.equals(this.rtbMetrics, finalizedDeal.rtbMetrics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deal, dealPausingInfo, dealServingStatus, name, readyToServe, rtbMetrics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FinalizedDeal {\n");
    sb.append("    deal: ").append(toIndentedString(deal)).append("\n");
    sb.append("    dealPausingInfo: ").append(toIndentedString(dealPausingInfo)).append("\n");
    sb.append("    dealServingStatus: ").append(toIndentedString(dealServingStatus)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    readyToServe: ").append(toIndentedString(readyToServe)).append("\n");
    sb.append("    rtbMetrics: ").append(toIndentedString(rtbMetrics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deal");
    openapiFields.add("dealPausingInfo");
    openapiFields.add("dealServingStatus");
    openapiFields.add("name");
    openapiFields.add("readyToServe");
    openapiFields.add("rtbMetrics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FinalizedDeal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FinalizedDeal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FinalizedDeal is not found in the empty JSON string", FinalizedDeal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FinalizedDeal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FinalizedDeal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deal`
      if (jsonObj.get("deal") != null && !jsonObj.get("deal").isJsonNull()) {
        Deal.validateJsonElement(jsonObj.get("deal"));
      }
      // validate the optional field `dealPausingInfo`
      if (jsonObj.get("dealPausingInfo") != null && !jsonObj.get("dealPausingInfo").isJsonNull()) {
        DealPausingInfo.validateJsonElement(jsonObj.get("dealPausingInfo"));
      }
      if ((jsonObj.get("dealServingStatus") != null && !jsonObj.get("dealServingStatus").isJsonNull()) && !jsonObj.get("dealServingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dealServingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dealServingStatus").toString()));
      }
      // validate the optional field `dealServingStatus`
      if (jsonObj.get("dealServingStatus") != null && !jsonObj.get("dealServingStatus").isJsonNull()) {
        DealServingStatusEnum.validateJsonElement(jsonObj.get("dealServingStatus"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `rtbMetrics`
      if (jsonObj.get("rtbMetrics") != null && !jsonObj.get("rtbMetrics").isJsonNull()) {
        RtbMetrics.validateJsonElement(jsonObj.get("rtbMetrics"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FinalizedDeal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FinalizedDeal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FinalizedDeal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FinalizedDeal.class));

       return (TypeAdapter<T>) new TypeAdapter<FinalizedDeal>() {
           @Override
           public void write(JsonWriter out, FinalizedDeal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FinalizedDeal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FinalizedDeal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FinalizedDeal
   * @throws IOException if the JSON string is invalid with respect to FinalizedDeal
   */
  public static FinalizedDeal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FinalizedDeal.class);
  }

  /**
   * Convert an instance of FinalizedDeal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

