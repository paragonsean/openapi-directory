/*
 * Authorized Buyers Marketplace API
 * The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Real-time bidding metrics. For what each metric means refer to [Report metrics](https://support.google.com/adxbuyer/answer/6115195#report-metrics)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:11.931533-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RtbMetrics {
  public static final String SERIALIZED_NAME_AD_IMPRESSIONS7_DAYS = "adImpressions7Days";
  @SerializedName(SERIALIZED_NAME_AD_IMPRESSIONS7_DAYS)
  private String adImpressions7Days;

  public static final String SERIALIZED_NAME_BID_RATE7_DAYS = "bidRate7Days";
  @SerializedName(SERIALIZED_NAME_BID_RATE7_DAYS)
  private Double bidRate7Days;

  public static final String SERIALIZED_NAME_BID_REQUESTS7_DAYS = "bidRequests7Days";
  @SerializedName(SERIALIZED_NAME_BID_REQUESTS7_DAYS)
  private String bidRequests7Days;

  public static final String SERIALIZED_NAME_BIDS7_DAYS = "bids7Days";
  @SerializedName(SERIALIZED_NAME_BIDS7_DAYS)
  private String bids7Days;

  public static final String SERIALIZED_NAME_FILTERED_BID_RATE7_DAYS = "filteredBidRate7Days";
  @SerializedName(SERIALIZED_NAME_FILTERED_BID_RATE7_DAYS)
  private Double filteredBidRate7Days;

  public static final String SERIALIZED_NAME_MUST_BID_RATE_CURRENT_MONTH = "mustBidRateCurrentMonth";
  @SerializedName(SERIALIZED_NAME_MUST_BID_RATE_CURRENT_MONTH)
  private Double mustBidRateCurrentMonth;

  public RtbMetrics() {
  }

  public RtbMetrics adImpressions7Days(String adImpressions7Days) {
    this.adImpressions7Days = adImpressions7Days;
    return this;
  }

  /**
   * Ad impressions in last 7 days.
   * @return adImpressions7Days
   */
  @javax.annotation.Nullable
  public String getAdImpressions7Days() {
    return adImpressions7Days;
  }

  public void setAdImpressions7Days(String adImpressions7Days) {
    this.adImpressions7Days = adImpressions7Days;
  }


  public RtbMetrics bidRate7Days(Double bidRate7Days) {
    this.bidRate7Days = bidRate7Days;
    return this;
  }

  /**
   * Bid rate in last 7 days, calculated by (bids / bid requests).
   * @return bidRate7Days
   */
  @javax.annotation.Nullable
  public Double getBidRate7Days() {
    return bidRate7Days;
  }

  public void setBidRate7Days(Double bidRate7Days) {
    this.bidRate7Days = bidRate7Days;
  }


  public RtbMetrics bidRequests7Days(String bidRequests7Days) {
    this.bidRequests7Days = bidRequests7Days;
    return this;
  }

  /**
   * Bid requests in last 7 days.
   * @return bidRequests7Days
   */
  @javax.annotation.Nullable
  public String getBidRequests7Days() {
    return bidRequests7Days;
  }

  public void setBidRequests7Days(String bidRequests7Days) {
    this.bidRequests7Days = bidRequests7Days;
  }


  public RtbMetrics bids7Days(String bids7Days) {
    this.bids7Days = bids7Days;
    return this;
  }

  /**
   * Bids in last 7 days.
   * @return bids7Days
   */
  @javax.annotation.Nullable
  public String getBids7Days() {
    return bids7Days;
  }

  public void setBids7Days(String bids7Days) {
    this.bids7Days = bids7Days;
  }


  public RtbMetrics filteredBidRate7Days(Double filteredBidRate7Days) {
    this.filteredBidRate7Days = filteredBidRate7Days;
    return this;
  }

  /**
   * Filtered bid rate in last 7 days, calculated by (filtered bids / bids).
   * @return filteredBidRate7Days
   */
  @javax.annotation.Nullable
  public Double getFilteredBidRate7Days() {
    return filteredBidRate7Days;
  }

  public void setFilteredBidRate7Days(Double filteredBidRate7Days) {
    this.filteredBidRate7Days = filteredBidRate7Days;
  }


  public RtbMetrics mustBidRateCurrentMonth(Double mustBidRateCurrentMonth) {
    this.mustBidRateCurrentMonth = mustBidRateCurrentMonth;
    return this;
  }

  /**
   * Must bid rate for current month.
   * @return mustBidRateCurrentMonth
   */
  @javax.annotation.Nullable
  public Double getMustBidRateCurrentMonth() {
    return mustBidRateCurrentMonth;
  }

  public void setMustBidRateCurrentMonth(Double mustBidRateCurrentMonth) {
    this.mustBidRateCurrentMonth = mustBidRateCurrentMonth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RtbMetrics rtbMetrics = (RtbMetrics) o;
    return Objects.equals(this.adImpressions7Days, rtbMetrics.adImpressions7Days) &&
        Objects.equals(this.bidRate7Days, rtbMetrics.bidRate7Days) &&
        Objects.equals(this.bidRequests7Days, rtbMetrics.bidRequests7Days) &&
        Objects.equals(this.bids7Days, rtbMetrics.bids7Days) &&
        Objects.equals(this.filteredBidRate7Days, rtbMetrics.filteredBidRate7Days) &&
        Objects.equals(this.mustBidRateCurrentMonth, rtbMetrics.mustBidRateCurrentMonth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adImpressions7Days, bidRate7Days, bidRequests7Days, bids7Days, filteredBidRate7Days, mustBidRateCurrentMonth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RtbMetrics {\n");
    sb.append("    adImpressions7Days: ").append(toIndentedString(adImpressions7Days)).append("\n");
    sb.append("    bidRate7Days: ").append(toIndentedString(bidRate7Days)).append("\n");
    sb.append("    bidRequests7Days: ").append(toIndentedString(bidRequests7Days)).append("\n");
    sb.append("    bids7Days: ").append(toIndentedString(bids7Days)).append("\n");
    sb.append("    filteredBidRate7Days: ").append(toIndentedString(filteredBidRate7Days)).append("\n");
    sb.append("    mustBidRateCurrentMonth: ").append(toIndentedString(mustBidRateCurrentMonth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adImpressions7Days");
    openapiFields.add("bidRate7Days");
    openapiFields.add("bidRequests7Days");
    openapiFields.add("bids7Days");
    openapiFields.add("filteredBidRate7Days");
    openapiFields.add("mustBidRateCurrentMonth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RtbMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RtbMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RtbMetrics is not found in the empty JSON string", RtbMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RtbMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RtbMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adImpressions7Days") != null && !jsonObj.get("adImpressions7Days").isJsonNull()) && !jsonObj.get("adImpressions7Days").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adImpressions7Days` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adImpressions7Days").toString()));
      }
      if ((jsonObj.get("bidRequests7Days") != null && !jsonObj.get("bidRequests7Days").isJsonNull()) && !jsonObj.get("bidRequests7Days").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bidRequests7Days` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bidRequests7Days").toString()));
      }
      if ((jsonObj.get("bids7Days") != null && !jsonObj.get("bids7Days").isJsonNull()) && !jsonObj.get("bids7Days").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bids7Days` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bids7Days").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RtbMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RtbMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RtbMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RtbMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<RtbMetrics>() {
           @Override
           public void write(JsonWriter out, RtbMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RtbMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RtbMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RtbMetrics
   * @throws IOException if the JSON string is invalid with respect to RtbMetrics
   */
  public static RtbMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RtbMetrics.class);
  }

  /**
   * Convert an instance of RtbMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

