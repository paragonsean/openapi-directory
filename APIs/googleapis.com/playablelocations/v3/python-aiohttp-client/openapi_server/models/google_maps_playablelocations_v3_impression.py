# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleMapsPlayablelocationsV3Impression(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, game_object_type: int=None, impression_type: str=None, location_name: str=None):
        """GoogleMapsPlayablelocationsV3Impression - a model defined in OpenAPI

        :param game_object_type: The game_object_type of this GoogleMapsPlayablelocationsV3Impression.
        :param impression_type: The impression_type of this GoogleMapsPlayablelocationsV3Impression.
        :param location_name: The location_name of this GoogleMapsPlayablelocationsV3Impression.
        """
        self.openapi_types = {
            'game_object_type': int,
            'impression_type': str,
            'location_name': str
        }

        self.attribute_map = {
            'game_object_type': 'gameObjectType',
            'impression_type': 'impressionType',
            'location_name': 'locationName'
        }

        self._game_object_type = game_object_type
        self._impression_type = impression_type
        self._location_name = location_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleMapsPlayablelocationsV3Impression':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleMapsPlayablelocationsV3Impression of this GoogleMapsPlayablelocationsV3Impression.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def game_object_type(self):
        """Gets the game_object_type of this GoogleMapsPlayablelocationsV3Impression.

        An arbitrary, developer-defined type identifier for each type of game object used in your game. Since players interact with differ types of game objects in different ways, this field allows you to segregate impression data by type for analysis. You should assign a unique `game_object_type` ID to represent a distinct type of game object in your game. For example, 1=monster location, 2=powerup location.

        :return: The game_object_type of this GoogleMapsPlayablelocationsV3Impression.
        :rtype: int
        """
        return self._game_object_type

    @game_object_type.setter
    def game_object_type(self, game_object_type):
        """Sets the game_object_type of this GoogleMapsPlayablelocationsV3Impression.

        An arbitrary, developer-defined type identifier for each type of game object used in your game. Since players interact with differ types of game objects in different ways, this field allows you to segregate impression data by type for analysis. You should assign a unique `game_object_type` ID to represent a distinct type of game object in your game. For example, 1=monster location, 2=powerup location.

        :param game_object_type: The game_object_type of this GoogleMapsPlayablelocationsV3Impression.
        :type game_object_type: int
        """

        self._game_object_type = game_object_type

    @property
    def impression_type(self):
        """Gets the impression_type of this GoogleMapsPlayablelocationsV3Impression.

        Required. The type of impression event.

        :return: The impression_type of this GoogleMapsPlayablelocationsV3Impression.
        :rtype: str
        """
        return self._impression_type

    @impression_type.setter
    def impression_type(self, impression_type):
        """Sets the impression_type of this GoogleMapsPlayablelocationsV3Impression.

        Required. The type of impression event.

        :param impression_type: The impression_type of this GoogleMapsPlayablelocationsV3Impression.
        :type impression_type: str
        """
        allowed_values = ["IMPRESSION_TYPE_UNSPECIFIED", "PRESENTED", "INTERACTED"]  # noqa: E501
        if impression_type not in allowed_values:
            raise ValueError(
                "Invalid value for `impression_type` ({0}), must be one of {1}"
                .format(impression_type, allowed_values)
            )

        self._impression_type = impression_type

    @property
    def location_name(self):
        """Gets the location_name of this GoogleMapsPlayablelocationsV3Impression.

        Required. The name of the playable location.

        :return: The location_name of this GoogleMapsPlayablelocationsV3Impression.
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this GoogleMapsPlayablelocationsV3Impression.

        Required. The name of the playable location.

        :param location_name: The location_name of this GoogleMapsPlayablelocationsV3Impression.
        :type location_name: str
        """

        self._location_name = location_name
