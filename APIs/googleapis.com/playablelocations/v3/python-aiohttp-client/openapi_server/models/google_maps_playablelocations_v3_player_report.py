# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleMapsPlayablelocationsV3PlayerReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language_code: str=None, location_name: str=None, reason_details: str=None, reasons: List[str]=None):
        """GoogleMapsPlayablelocationsV3PlayerReport - a model defined in OpenAPI

        :param language_code: The language_code of this GoogleMapsPlayablelocationsV3PlayerReport.
        :param location_name: The location_name of this GoogleMapsPlayablelocationsV3PlayerReport.
        :param reason_details: The reason_details of this GoogleMapsPlayablelocationsV3PlayerReport.
        :param reasons: The reasons of this GoogleMapsPlayablelocationsV3PlayerReport.
        """
        self.openapi_types = {
            'language_code': str,
            'location_name': str,
            'reason_details': str,
            'reasons': List[str]
        }

        self.attribute_map = {
            'language_code': 'languageCode',
            'location_name': 'locationName',
            'reason_details': 'reasonDetails',
            'reasons': 'reasons'
        }

        self._language_code = language_code
        self._location_name = location_name
        self._reason_details = reason_details
        self._reasons = reasons

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleMapsPlayablelocationsV3PlayerReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleMapsPlayablelocationsV3PlayerReport of this GoogleMapsPlayablelocationsV3PlayerReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language_code(self):
        """Gets the language_code of this GoogleMapsPlayablelocationsV3PlayerReport.

        Language code (in BCP-47 format) indicating the language of the freeform description provided in `reason_details`. Examples are \"en\", \"en-US\" or \"ja-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.

        :return: The language_code of this GoogleMapsPlayablelocationsV3PlayerReport.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this GoogleMapsPlayablelocationsV3PlayerReport.

        Language code (in BCP-47 format) indicating the language of the freeform description provided in `reason_details`. Examples are \"en\", \"en-US\" or \"ja-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.

        :param language_code: The language_code of this GoogleMapsPlayablelocationsV3PlayerReport.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def location_name(self):
        """Gets the location_name of this GoogleMapsPlayablelocationsV3PlayerReport.

        Required. The name of the playable location.

        :return: The location_name of this GoogleMapsPlayablelocationsV3PlayerReport.
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this GoogleMapsPlayablelocationsV3PlayerReport.

        Required. The name of the playable location.

        :param location_name: The location_name of this GoogleMapsPlayablelocationsV3PlayerReport.
        :type location_name: str
        """

        self._location_name = location_name

    @property
    def reason_details(self):
        """Gets the reason_details of this GoogleMapsPlayablelocationsV3PlayerReport.

        Required. A free-form description detailing why the playable location is considered bad.

        :return: The reason_details of this GoogleMapsPlayablelocationsV3PlayerReport.
        :rtype: str
        """
        return self._reason_details

    @reason_details.setter
    def reason_details(self, reason_details):
        """Sets the reason_details of this GoogleMapsPlayablelocationsV3PlayerReport.

        Required. A free-form description detailing why the playable location is considered bad.

        :param reason_details: The reason_details of this GoogleMapsPlayablelocationsV3PlayerReport.
        :type reason_details: str
        """

        self._reason_details = reason_details

    @property
    def reasons(self):
        """Gets the reasons of this GoogleMapsPlayablelocationsV3PlayerReport.

        Required. One or more reasons why this playable location is considered bad.

        :return: The reasons of this GoogleMapsPlayablelocationsV3PlayerReport.
        :rtype: List[str]
        """
        return self._reasons

    @reasons.setter
    def reasons(self, reasons):
        """Sets the reasons of this GoogleMapsPlayablelocationsV3PlayerReport.

        Required. One or more reasons why this playable location is considered bad.

        :param reasons: The reasons of this GoogleMapsPlayablelocationsV3PlayerReport.
        :type reasons: List[str]
        """
        allowed_values = ["BAD_LOCATION_REASON_UNSPECIFIED", "OTHER", "NOT_PEDESTRIAN_ACCESSIBLE", "NOT_OPEN_TO_PUBLIC", "PERMANENTLY_CLOSED", "TEMPORARILY_INACCESSIBLE"]  # noqa: E501
        if not set(reasons).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `reasons` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(reasons) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._reasons = reasons
