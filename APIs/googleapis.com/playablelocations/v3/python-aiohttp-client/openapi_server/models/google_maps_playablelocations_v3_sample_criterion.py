# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_maps_playablelocations_v3_sample_filter import GoogleMapsPlayablelocationsV3SampleFilter
from openapi_server import util


class GoogleMapsPlayablelocationsV3SampleCriterion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields_to_return: str=None, filter: GoogleMapsPlayablelocationsV3SampleFilter=None, game_object_type: int=None):
        """GoogleMapsPlayablelocationsV3SampleCriterion - a model defined in OpenAPI

        :param fields_to_return: The fields_to_return of this GoogleMapsPlayablelocationsV3SampleCriterion.
        :param filter: The filter of this GoogleMapsPlayablelocationsV3SampleCriterion.
        :param game_object_type: The game_object_type of this GoogleMapsPlayablelocationsV3SampleCriterion.
        """
        self.openapi_types = {
            'fields_to_return': str,
            'filter': GoogleMapsPlayablelocationsV3SampleFilter,
            'game_object_type': int
        }

        self.attribute_map = {
            'fields_to_return': 'fieldsToReturn',
            'filter': 'filter',
            'game_object_type': 'gameObjectType'
        }

        self._fields_to_return = fields_to_return
        self._filter = filter
        self._game_object_type = game_object_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleMapsPlayablelocationsV3SampleCriterion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleMapsPlayablelocationsV3SampleCriterion of this GoogleMapsPlayablelocationsV3SampleCriterion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields_to_return(self):
        """Gets the fields_to_return of this GoogleMapsPlayablelocationsV3SampleCriterion.

        Specifies which `PlayableLocation` fields are returned. `name` (which is used for logging impressions), `center_point` and `place_id` (or `plus_code`) are always returned. The following fields are omitted unless you specify them here: * snapped_point * types Note: The more fields you include, the more expensive in terms of data and associated latency your query will be.

        :return: The fields_to_return of this GoogleMapsPlayablelocationsV3SampleCriterion.
        :rtype: str
        """
        return self._fields_to_return

    @fields_to_return.setter
    def fields_to_return(self, fields_to_return):
        """Sets the fields_to_return of this GoogleMapsPlayablelocationsV3SampleCriterion.

        Specifies which `PlayableLocation` fields are returned. `name` (which is used for logging impressions), `center_point` and `place_id` (or `plus_code`) are always returned. The following fields are omitted unless you specify them here: * snapped_point * types Note: The more fields you include, the more expensive in terms of data and associated latency your query will be.

        :param fields_to_return: The fields_to_return of this GoogleMapsPlayablelocationsV3SampleCriterion.
        :type fields_to_return: str
        """

        self._fields_to_return = fields_to_return

    @property
    def filter(self):
        """Gets the filter of this GoogleMapsPlayablelocationsV3SampleCriterion.


        :return: The filter of this GoogleMapsPlayablelocationsV3SampleCriterion.
        :rtype: GoogleMapsPlayablelocationsV3SampleFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GoogleMapsPlayablelocationsV3SampleCriterion.


        :param filter: The filter of this GoogleMapsPlayablelocationsV3SampleCriterion.
        :type filter: GoogleMapsPlayablelocationsV3SampleFilter
        """

        self._filter = filter

    @property
    def game_object_type(self):
        """Gets the game_object_type of this GoogleMapsPlayablelocationsV3SampleCriterion.

        Required. An arbitrary, developer-defined identifier of the type of game object that the playable location is used for. This field allows you to specify criteria per game object type when searching for playable locations. You should assign a unique `game_object_type` ID across all `request_criteria` to represent a distinct type of game object. For example, 1=monster location, 2=powerup location. The response contains a map.

        :return: The game_object_type of this GoogleMapsPlayablelocationsV3SampleCriterion.
        :rtype: int
        """
        return self._game_object_type

    @game_object_type.setter
    def game_object_type(self, game_object_type):
        """Sets the game_object_type of this GoogleMapsPlayablelocationsV3SampleCriterion.

        Required. An arbitrary, developer-defined identifier of the type of game object that the playable location is used for. This field allows you to specify criteria per game object type when searching for playable locations. You should assign a unique `game_object_type` ID across all `request_criteria` to represent a distinct type of game object. For example, 1=monster location, 2=powerup location. The response contains a map.

        :param game_object_type: The game_object_type of this GoogleMapsPlayablelocationsV3SampleCriterion.
        :type game_object_type: int
        """

        self._game_object_type = game_object_type
