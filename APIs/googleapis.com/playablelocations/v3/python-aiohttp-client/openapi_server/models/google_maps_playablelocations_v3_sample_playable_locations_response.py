# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_maps_playablelocations_v3_sample_playable_location_list import GoogleMapsPlayablelocationsV3SamplePlayableLocationList
from openapi_server import util


class GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, locations_per_game_object_type: Dict[str, GoogleMapsPlayablelocationsV3SamplePlayableLocationList]=None, ttl: str=None):
        """GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse - a model defined in OpenAPI

        :param locations_per_game_object_type: The locations_per_game_object_type of this GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse.
        :param ttl: The ttl of this GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse.
        """
        self.openapi_types = {
            'locations_per_game_object_type': Dict[str, GoogleMapsPlayablelocationsV3SamplePlayableLocationList],
            'ttl': str
        }

        self.attribute_map = {
            'locations_per_game_object_type': 'locationsPerGameObjectType',
            'ttl': 'ttl'
        }

        self._locations_per_game_object_type = locations_per_game_object_type
        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse of this GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def locations_per_game_object_type(self):
        """Gets the locations_per_game_object_type of this GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse.

        Each PlayableLocation object corresponds to a game_object_type specified in the request.

        :return: The locations_per_game_object_type of this GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse.
        :rtype: Dict[str, GoogleMapsPlayablelocationsV3SamplePlayableLocationList]
        """
        return self._locations_per_game_object_type

    @locations_per_game_object_type.setter
    def locations_per_game_object_type(self, locations_per_game_object_type):
        """Sets the locations_per_game_object_type of this GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse.

        Each PlayableLocation object corresponds to a game_object_type specified in the request.

        :param locations_per_game_object_type: The locations_per_game_object_type of this GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse.
        :type locations_per_game_object_type: Dict[str, GoogleMapsPlayablelocationsV3SamplePlayableLocationList]
        """

        self._locations_per_game_object_type = locations_per_game_object_type

    @property
    def ttl(self):
        """Gets the ttl of this GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse.

        Required. Specifies the \"time-to-live\" for the set of playable locations. You can use this value to determine how long to cache the set of playable locations. After this length of time, your back-end game server should issue a new SamplePlayableLocations request to get a fresh set of playable locations (because for example, they might have been removed, a park might have closed for the day, a business might have closed permanently).

        :return: The ttl of this GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse.
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse.

        Required. Specifies the \"time-to-live\" for the set of playable locations. You can use this value to determine how long to cache the set of playable locations. After this length of time, your back-end game server should issue a new SamplePlayableLocations request to get a fresh set of playable locations (because for example, they might have been removed, a park might have closed for the day, a business might have closed permanently).

        :param ttl: The ttl of this GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse.
        :type ttl: str
        """

        self._ttl = ttl
