# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_maps_playablelocations_v3_player_report import GoogleMapsPlayablelocationsV3PlayerReport
from openapi_server.models.google_maps_unity_client_info import GoogleMapsUnityClientInfo
from openapi_server import util


class GoogleMapsPlayablelocationsV3LogPlayerReportsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_info: GoogleMapsUnityClientInfo=None, player_reports: List[GoogleMapsPlayablelocationsV3PlayerReport]=None, request_id: str=None):
        """GoogleMapsPlayablelocationsV3LogPlayerReportsRequest - a model defined in OpenAPI

        :param client_info: The client_info of this GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.
        :param player_reports: The player_reports of this GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.
        :param request_id: The request_id of this GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.
        """
        self.openapi_types = {
            'client_info': GoogleMapsUnityClientInfo,
            'player_reports': List[GoogleMapsPlayablelocationsV3PlayerReport],
            'request_id': str
        }

        self.attribute_map = {
            'client_info': 'clientInfo',
            'player_reports': 'playerReports',
            'request_id': 'requestId'
        }

        self._client_info = client_info
        self._player_reports = player_reports
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleMapsPlayablelocationsV3LogPlayerReportsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleMapsPlayablelocationsV3LogPlayerReportsRequest of this GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_info(self):
        """Gets the client_info of this GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.


        :return: The client_info of this GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.
        :rtype: GoogleMapsUnityClientInfo
        """
        return self._client_info

    @client_info.setter
    def client_info(self, client_info):
        """Sets the client_info of this GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.


        :param client_info: The client_info of this GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.
        :type client_info: GoogleMapsUnityClientInfo
        """

        self._client_info = client_info

    @property
    def player_reports(self):
        """Gets the player_reports of this GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.

        Required. Player reports. The maximum number of player reports that you can log at once is 50.

        :return: The player_reports of this GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.
        :rtype: List[GoogleMapsPlayablelocationsV3PlayerReport]
        """
        return self._player_reports

    @player_reports.setter
    def player_reports(self, player_reports):
        """Sets the player_reports of this GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.

        Required. Player reports. The maximum number of player reports that you can log at once is 50.

        :param player_reports: The player_reports of this GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.
        :type player_reports: List[GoogleMapsPlayablelocationsV3PlayerReport]
        """

        self._player_reports = player_reports

    @property
    def request_id(self):
        """Gets the request_id of this GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.

        Required. A string that uniquely identifies the log player reports request. This allows you to detect duplicate requests. We recommend that you use UUIDs for this value. The value must not exceed 50 characters. You should reuse the `request_id` only when retrying a request in the case of a failure. In that case, the request must be identical to the one that failed.

        :return: The request_id of this GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.

        Required. A string that uniquely identifies the log player reports request. This allows you to detect duplicate requests. We recommend that you use UUIDs for this value. The value must not exceed 50 characters. You should reuse the `request_id` only when retrying a request in the case of a failure. In that case, the request must be identical to the one that failed.

        :param request_id: The request_id of this GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.
        :type request_id: str
        """

        self._request_id = request_id
