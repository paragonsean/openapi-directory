/**
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation.h
 *
 * A geographical point suitable for placing game objects in location-based games.
 */

#ifndef OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation_H
#define OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation_H

#include <QJsonObject>

#include "OAIGoogleTypeLatLng.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleTypeLatLng;

class OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation : public OAIObject {
public:
    OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation();
    OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation(QString json);
    ~OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGoogleTypeLatLng getCenterPoint() const;
    void setCenterPoint(const OAIGoogleTypeLatLng &center_point);
    bool is_center_point_Set() const;
    bool is_center_point_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPlaceId() const;
    void setPlaceId(const QString &place_id);
    bool is_place_id_Set() const;
    bool is_place_id_Valid() const;

    QString getPlusCode() const;
    void setPlusCode(const QString &plus_code);
    bool is_plus_code_Set() const;
    bool is_plus_code_Valid() const;

    OAIGoogleTypeLatLng getSnappedPoint() const;
    void setSnappedPoint(const OAIGoogleTypeLatLng &snapped_point);
    bool is_snapped_point_Set() const;
    bool is_snapped_point_Valid() const;

    QList<QString> getTypes() const;
    void setTypes(const QList<QString> &types);
    bool is_types_Set() const;
    bool is_types_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGoogleTypeLatLng m_center_point;
    bool m_center_point_isSet;
    bool m_center_point_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_place_id;
    bool m_place_id_isSet;
    bool m_place_id_isValid;

    QString m_plus_code;
    bool m_plus_code_isSet;
    bool m_plus_code_isValid;

    OAIGoogleTypeLatLng m_snapped_point;
    bool m_snapped_point_isSet;
    bool m_snapped_point_isValid;

    QList<QString> m_types;
    bool m_types_isSet;
    bool m_types_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation)

#endif // OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation_H
