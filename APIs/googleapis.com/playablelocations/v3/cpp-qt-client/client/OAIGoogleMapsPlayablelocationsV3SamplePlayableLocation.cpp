/**
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation() {
    this->initializeModel();
}

OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::~OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation() {}

void OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::initializeModel() {

    m_center_point_isSet = false;
    m_center_point_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_place_id_isSet = false;
    m_place_id_isValid = false;

    m_plus_code_isSet = false;
    m_plus_code_isValid = false;

    m_snapped_point_isSet = false;
    m_snapped_point_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;
}

void OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::fromJsonObject(QJsonObject json) {

    m_center_point_isValid = ::OpenAPI::fromJsonValue(m_center_point, json[QString("centerPoint")]);
    m_center_point_isSet = !json[QString("centerPoint")].isNull() && m_center_point_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_place_id_isValid = ::OpenAPI::fromJsonValue(m_place_id, json[QString("placeId")]);
    m_place_id_isSet = !json[QString("placeId")].isNull() && m_place_id_isValid;

    m_plus_code_isValid = ::OpenAPI::fromJsonValue(m_plus_code, json[QString("plusCode")]);
    m_plus_code_isSet = !json[QString("plusCode")].isNull() && m_plus_code_isValid;

    m_snapped_point_isValid = ::OpenAPI::fromJsonValue(m_snapped_point, json[QString("snappedPoint")]);
    m_snapped_point_isSet = !json[QString("snappedPoint")].isNull() && m_snapped_point_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;
}

QString OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_center_point.isSet()) {
        obj.insert(QString("centerPoint"), ::OpenAPI::toJsonValue(m_center_point));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_place_id_isSet) {
        obj.insert(QString("placeId"), ::OpenAPI::toJsonValue(m_place_id));
    }
    if (m_plus_code_isSet) {
        obj.insert(QString("plusCode"), ::OpenAPI::toJsonValue(m_plus_code));
    }
    if (m_snapped_point.isSet()) {
        obj.insert(QString("snappedPoint"), ::OpenAPI::toJsonValue(m_snapped_point));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    return obj;
}

OAIGoogleTypeLatLng OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::getCenterPoint() const {
    return m_center_point;
}
void OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::setCenterPoint(const OAIGoogleTypeLatLng &center_point) {
    m_center_point = center_point;
    m_center_point_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::is_center_point_Set() const{
    return m_center_point_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::is_center_point_Valid() const{
    return m_center_point_isValid;
}

QString OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::getName() const {
    return m_name;
}
void OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::getPlaceId() const {
    return m_place_id;
}
void OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::setPlaceId(const QString &place_id) {
    m_place_id = place_id;
    m_place_id_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::is_place_id_Set() const{
    return m_place_id_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::is_place_id_Valid() const{
    return m_place_id_isValid;
}

QString OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::getPlusCode() const {
    return m_plus_code;
}
void OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::setPlusCode(const QString &plus_code) {
    m_plus_code = plus_code;
    m_plus_code_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::is_plus_code_Set() const{
    return m_plus_code_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::is_plus_code_Valid() const{
    return m_plus_code_isValid;
}

OAIGoogleTypeLatLng OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::getSnappedPoint() const {
    return m_snapped_point;
}
void OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::setSnappedPoint(const OAIGoogleTypeLatLng &snapped_point) {
    m_snapped_point = snapped_point;
    m_snapped_point_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::is_snapped_point_Set() const{
    return m_snapped_point_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::is_snapped_point_Valid() const{
    return m_snapped_point_isValid;
}

QList<QString> OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::getTypes() const {
    return m_types;
}
void OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::setTypes(const QList<QString> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::is_types_Set() const{
    return m_types_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::is_types_Valid() const{
    return m_types_isValid;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_center_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plus_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapped_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
