/**
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest() {
    this->initializeModel();
}

OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::~OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest() {}

void OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::initializeModel() {

    m_client_info_isSet = false;
    m_client_info_isValid = false;

    m_player_reports_isSet = false;
    m_player_reports_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::fromJsonObject(QJsonObject json) {

    m_client_info_isValid = ::OpenAPI::fromJsonValue(m_client_info, json[QString("clientInfo")]);
    m_client_info_isSet = !json[QString("clientInfo")].isNull() && m_client_info_isValid;

    m_player_reports_isValid = ::OpenAPI::fromJsonValue(m_player_reports, json[QString("playerReports")]);
    m_player_reports_isSet = !json[QString("playerReports")].isNull() && m_player_reports_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;
}

QString OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_info.isSet()) {
        obj.insert(QString("clientInfo"), ::OpenAPI::toJsonValue(m_client_info));
    }
    if (m_player_reports.size() > 0) {
        obj.insert(QString("playerReports"), ::OpenAPI::toJsonValue(m_player_reports));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

OAIGoogleMapsUnityClientInfo OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::getClientInfo() const {
    return m_client_info;
}
void OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::setClientInfo(const OAIGoogleMapsUnityClientInfo &client_info) {
    m_client_info = client_info;
    m_client_info_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::is_client_info_Set() const{
    return m_client_info_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::is_client_info_Valid() const{
    return m_client_info_isValid;
}

QList<OAIGoogleMapsPlayablelocationsV3PlayerReport> OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::getPlayerReports() const {
    return m_player_reports;
}
void OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::setPlayerReports(const QList<OAIGoogleMapsPlayablelocationsV3PlayerReport> &player_reports) {
    m_player_reports = player_reports;
    m_player_reports_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::is_player_reports_Set() const{
    return m_player_reports_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::is_player_reports_Valid() const{
    return m_player_reports_isValid;
}

QString OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::getRequestId() const {
    return m_request_id;
}
void OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_reports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlayablelocationsV3LogPlayerReportsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
