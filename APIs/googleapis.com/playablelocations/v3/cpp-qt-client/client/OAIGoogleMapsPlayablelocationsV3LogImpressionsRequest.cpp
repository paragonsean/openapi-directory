/**
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest() {
    this->initializeModel();
}

OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::~OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest() {}

void OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::initializeModel() {

    m_client_info_isSet = false;
    m_client_info_isValid = false;

    m_impressions_isSet = false;
    m_impressions_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::fromJsonObject(QJsonObject json) {

    m_client_info_isValid = ::OpenAPI::fromJsonValue(m_client_info, json[QString("clientInfo")]);
    m_client_info_isSet = !json[QString("clientInfo")].isNull() && m_client_info_isValid;

    m_impressions_isValid = ::OpenAPI::fromJsonValue(m_impressions, json[QString("impressions")]);
    m_impressions_isSet = !json[QString("impressions")].isNull() && m_impressions_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;
}

QString OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_info.isSet()) {
        obj.insert(QString("clientInfo"), ::OpenAPI::toJsonValue(m_client_info));
    }
    if (m_impressions.size() > 0) {
        obj.insert(QString("impressions"), ::OpenAPI::toJsonValue(m_impressions));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

OAIGoogleMapsUnityClientInfo OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::getClientInfo() const {
    return m_client_info;
}
void OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::setClientInfo(const OAIGoogleMapsUnityClientInfo &client_info) {
    m_client_info = client_info;
    m_client_info_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::is_client_info_Set() const{
    return m_client_info_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::is_client_info_Valid() const{
    return m_client_info_isValid;
}

QList<OAIGoogleMapsPlayablelocationsV3Impression> OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::getImpressions() const {
    return m_impressions;
}
void OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::setImpressions(const QList<OAIGoogleMapsPlayablelocationsV3Impression> &impressions) {
    m_impressions = impressions;
    m_impressions_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::is_impressions_Set() const{
    return m_impressions_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::is_impressions_Valid() const{
    return m_impressions_isValid;
}

QString OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::getRequestId() const {
    return m_request_id;
}
void OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_impressions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlayablelocationsV3LogImpressionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
