/**
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlayablelocationsV3PlayerReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlayablelocationsV3PlayerReport::OAIGoogleMapsPlayablelocationsV3PlayerReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlayablelocationsV3PlayerReport::OAIGoogleMapsPlayablelocationsV3PlayerReport() {
    this->initializeModel();
}

OAIGoogleMapsPlayablelocationsV3PlayerReport::~OAIGoogleMapsPlayablelocationsV3PlayerReport() {}

void OAIGoogleMapsPlayablelocationsV3PlayerReport::initializeModel() {

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_location_name_isSet = false;
    m_location_name_isValid = false;

    m_reason_details_isSet = false;
    m_reason_details_isValid = false;

    m_reasons_isSet = false;
    m_reasons_isValid = false;
}

void OAIGoogleMapsPlayablelocationsV3PlayerReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlayablelocationsV3PlayerReport::fromJsonObject(QJsonObject json) {

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_location_name_isValid = ::OpenAPI::fromJsonValue(m_location_name, json[QString("locationName")]);
    m_location_name_isSet = !json[QString("locationName")].isNull() && m_location_name_isValid;

    m_reason_details_isValid = ::OpenAPI::fromJsonValue(m_reason_details, json[QString("reasonDetails")]);
    m_reason_details_isSet = !json[QString("reasonDetails")].isNull() && m_reason_details_isValid;

    m_reasons_isValid = ::OpenAPI::fromJsonValue(m_reasons, json[QString("reasons")]);
    m_reasons_isSet = !json[QString("reasons")].isNull() && m_reasons_isValid;
}

QString OAIGoogleMapsPlayablelocationsV3PlayerReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlayablelocationsV3PlayerReport::asJsonObject() const {
    QJsonObject obj;
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_location_name_isSet) {
        obj.insert(QString("locationName"), ::OpenAPI::toJsonValue(m_location_name));
    }
    if (m_reason_details_isSet) {
        obj.insert(QString("reasonDetails"), ::OpenAPI::toJsonValue(m_reason_details));
    }
    if (m_reasons.size() > 0) {
        obj.insert(QString("reasons"), ::OpenAPI::toJsonValue(m_reasons));
    }
    return obj;
}

QString OAIGoogleMapsPlayablelocationsV3PlayerReport::getLanguageCode() const {
    return m_language_code;
}
void OAIGoogleMapsPlayablelocationsV3PlayerReport::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3PlayerReport::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3PlayerReport::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIGoogleMapsPlayablelocationsV3PlayerReport::getLocationName() const {
    return m_location_name;
}
void OAIGoogleMapsPlayablelocationsV3PlayerReport::setLocationName(const QString &location_name) {
    m_location_name = location_name;
    m_location_name_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3PlayerReport::is_location_name_Set() const{
    return m_location_name_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3PlayerReport::is_location_name_Valid() const{
    return m_location_name_isValid;
}

QString OAIGoogleMapsPlayablelocationsV3PlayerReport::getReasonDetails() const {
    return m_reason_details;
}
void OAIGoogleMapsPlayablelocationsV3PlayerReport::setReasonDetails(const QString &reason_details) {
    m_reason_details = reason_details;
    m_reason_details_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3PlayerReport::is_reason_details_Set() const{
    return m_reason_details_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3PlayerReport::is_reason_details_Valid() const{
    return m_reason_details_isValid;
}

QList<QString> OAIGoogleMapsPlayablelocationsV3PlayerReport::getReasons() const {
    return m_reasons;
}
void OAIGoogleMapsPlayablelocationsV3PlayerReport::setReasons(const QList<QString> &reasons) {
    m_reasons = reasons;
    m_reasons_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3PlayerReport::is_reasons_Set() const{
    return m_reasons_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3PlayerReport::is_reasons_Valid() const{
    return m_reasons_isValid;
}

bool OAIGoogleMapsPlayablelocationsV3PlayerReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlayablelocationsV3PlayerReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
