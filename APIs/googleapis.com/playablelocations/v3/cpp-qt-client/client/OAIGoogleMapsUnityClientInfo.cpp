/**
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsUnityClientInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsUnityClientInfo::OAIGoogleMapsUnityClientInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsUnityClientInfo::OAIGoogleMapsUnityClientInfo() {
    this->initializeModel();
}

OAIGoogleMapsUnityClientInfo::~OAIGoogleMapsUnityClientInfo() {}

void OAIGoogleMapsUnityClientInfo::initializeModel() {

    m_api_client_isSet = false;
    m_api_client_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_application_version_isSet = false;
    m_application_version_isValid = false;

    m_device_model_isSet = false;
    m_device_model_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_operating_system_isSet = false;
    m_operating_system_isValid = false;

    m_operating_system_build_isSet = false;
    m_operating_system_build_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;
}

void OAIGoogleMapsUnityClientInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsUnityClientInfo::fromJsonObject(QJsonObject json) {

    m_api_client_isValid = ::OpenAPI::fromJsonValue(m_api_client, json[QString("apiClient")]);
    m_api_client_isSet = !json[QString("apiClient")].isNull() && m_api_client_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("applicationId")]);
    m_application_id_isSet = !json[QString("applicationId")].isNull() && m_application_id_isValid;

    m_application_version_isValid = ::OpenAPI::fromJsonValue(m_application_version, json[QString("applicationVersion")]);
    m_application_version_isSet = !json[QString("applicationVersion")].isNull() && m_application_version_isValid;

    m_device_model_isValid = ::OpenAPI::fromJsonValue(m_device_model, json[QString("deviceModel")]);
    m_device_model_isSet = !json[QString("deviceModel")].isNull() && m_device_model_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_operating_system_isValid = ::OpenAPI::fromJsonValue(m_operating_system, json[QString("operatingSystem")]);
    m_operating_system_isSet = !json[QString("operatingSystem")].isNull() && m_operating_system_isValid;

    m_operating_system_build_isValid = ::OpenAPI::fromJsonValue(m_operating_system_build, json[QString("operatingSystemBuild")]);
    m_operating_system_build_isSet = !json[QString("operatingSystemBuild")].isNull() && m_operating_system_build_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;
}

QString OAIGoogleMapsUnityClientInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsUnityClientInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_api_client_isSet) {
        obj.insert(QString("apiClient"), ::OpenAPI::toJsonValue(m_api_client));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("applicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_application_version_isSet) {
        obj.insert(QString("applicationVersion"), ::OpenAPI::toJsonValue(m_application_version));
    }
    if (m_device_model_isSet) {
        obj.insert(QString("deviceModel"), ::OpenAPI::toJsonValue(m_device_model));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_operating_system_isSet) {
        obj.insert(QString("operatingSystem"), ::OpenAPI::toJsonValue(m_operating_system));
    }
    if (m_operating_system_build_isSet) {
        obj.insert(QString("operatingSystemBuild"), ::OpenAPI::toJsonValue(m_operating_system_build));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    return obj;
}

QString OAIGoogleMapsUnityClientInfo::getApiClient() const {
    return m_api_client;
}
void OAIGoogleMapsUnityClientInfo::setApiClient(const QString &api_client) {
    m_api_client = api_client;
    m_api_client_isSet = true;
}

bool OAIGoogleMapsUnityClientInfo::is_api_client_Set() const{
    return m_api_client_isSet;
}

bool OAIGoogleMapsUnityClientInfo::is_api_client_Valid() const{
    return m_api_client_isValid;
}

QString OAIGoogleMapsUnityClientInfo::getApplicationId() const {
    return m_application_id;
}
void OAIGoogleMapsUnityClientInfo::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIGoogleMapsUnityClientInfo::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIGoogleMapsUnityClientInfo::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIGoogleMapsUnityClientInfo::getApplicationVersion() const {
    return m_application_version;
}
void OAIGoogleMapsUnityClientInfo::setApplicationVersion(const QString &application_version) {
    m_application_version = application_version;
    m_application_version_isSet = true;
}

bool OAIGoogleMapsUnityClientInfo::is_application_version_Set() const{
    return m_application_version_isSet;
}

bool OAIGoogleMapsUnityClientInfo::is_application_version_Valid() const{
    return m_application_version_isValid;
}

QString OAIGoogleMapsUnityClientInfo::getDeviceModel() const {
    return m_device_model;
}
void OAIGoogleMapsUnityClientInfo::setDeviceModel(const QString &device_model) {
    m_device_model = device_model;
    m_device_model_isSet = true;
}

bool OAIGoogleMapsUnityClientInfo::is_device_model_Set() const{
    return m_device_model_isSet;
}

bool OAIGoogleMapsUnityClientInfo::is_device_model_Valid() const{
    return m_device_model_isValid;
}

QString OAIGoogleMapsUnityClientInfo::getLanguageCode() const {
    return m_language_code;
}
void OAIGoogleMapsUnityClientInfo::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIGoogleMapsUnityClientInfo::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIGoogleMapsUnityClientInfo::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIGoogleMapsUnityClientInfo::getOperatingSystem() const {
    return m_operating_system;
}
void OAIGoogleMapsUnityClientInfo::setOperatingSystem(const QString &operating_system) {
    m_operating_system = operating_system;
    m_operating_system_isSet = true;
}

bool OAIGoogleMapsUnityClientInfo::is_operating_system_Set() const{
    return m_operating_system_isSet;
}

bool OAIGoogleMapsUnityClientInfo::is_operating_system_Valid() const{
    return m_operating_system_isValid;
}

QString OAIGoogleMapsUnityClientInfo::getOperatingSystemBuild() const {
    return m_operating_system_build;
}
void OAIGoogleMapsUnityClientInfo::setOperatingSystemBuild(const QString &operating_system_build) {
    m_operating_system_build = operating_system_build;
    m_operating_system_build_isSet = true;
}

bool OAIGoogleMapsUnityClientInfo::is_operating_system_build_Set() const{
    return m_operating_system_build_isSet;
}

bool OAIGoogleMapsUnityClientInfo::is_operating_system_build_Valid() const{
    return m_operating_system_build_isValid;
}

QString OAIGoogleMapsUnityClientInfo::getPlatform() const {
    return m_platform;
}
void OAIGoogleMapsUnityClientInfo::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIGoogleMapsUnityClientInfo::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIGoogleMapsUnityClientInfo::is_platform_Valid() const{
    return m_platform_isValid;
}

bool OAIGoogleMapsUnityClientInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsUnityClientInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
