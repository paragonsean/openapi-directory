/**
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse::OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse::OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse() {
    this->initializeModel();
}

OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse::~OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse() {}

void OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse::initializeModel() {

    m_locations_per_game_object_type_isSet = false;
    m_locations_per_game_object_type_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;
}

void OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse::fromJsonObject(QJsonObject json) {

    m_locations_per_game_object_type_isValid = ::OpenAPI::fromJsonValue(m_locations_per_game_object_type, json[QString("locationsPerGameObjectType")]);
    m_locations_per_game_object_type_isSet = !json[QString("locationsPerGameObjectType")].isNull() && m_locations_per_game_object_type_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;
}

QString OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_locations_per_game_object_type.size() > 0) {
        obj.insert(QString("locationsPerGameObjectType"), ::OpenAPI::toJsonValue(m_locations_per_game_object_type));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    return obj;
}

QMap<QString, OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationList> OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse::getLocationsPerGameObjectType() const {
    return m_locations_per_game_object_type;
}
void OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse::setLocationsPerGameObjectType(const QMap<QString, OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationList> &locations_per_game_object_type) {
    m_locations_per_game_object_type = locations_per_game_object_type;
    m_locations_per_game_object_type_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse::is_locations_per_game_object_type_Set() const{
    return m_locations_per_game_object_type_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse::is_locations_per_game_object_type_Valid() const{
    return m_locations_per_game_object_type_isValid;
}

QString OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse::getTtl() const {
    return m_ttl;
}
void OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse::setTtl(const QString &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse::is_ttl_Valid() const{
    return m_ttl_isValid;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_locations_per_game_object_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
