/**
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions::OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions::OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions() {
    this->initializeModel();
}

OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions::~OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions() {}

void OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions::initializeModel() {

    m_min_spacing_meters_isSet = false;
    m_min_spacing_meters_isValid = false;

    m_point_type_isSet = false;
    m_point_type_isValid = false;
}

void OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions::fromJsonObject(QJsonObject json) {

    m_min_spacing_meters_isValid = ::OpenAPI::fromJsonValue(m_min_spacing_meters, json[QString("minSpacingMeters")]);
    m_min_spacing_meters_isSet = !json[QString("minSpacingMeters")].isNull() && m_min_spacing_meters_isValid;

    m_point_type_isValid = ::OpenAPI::fromJsonValue(m_point_type, json[QString("pointType")]);
    m_point_type_isSet = !json[QString("pointType")].isNull() && m_point_type_isValid;
}

QString OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_min_spacing_meters_isSet) {
        obj.insert(QString("minSpacingMeters"), ::OpenAPI::toJsonValue(m_min_spacing_meters));
    }
    if (m_point_type_isSet) {
        obj.insert(QString("pointType"), ::OpenAPI::toJsonValue(m_point_type));
    }
    return obj;
}

double OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions::getMinSpacingMeters() const {
    return m_min_spacing_meters;
}
void OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions::setMinSpacingMeters(const double &min_spacing_meters) {
    m_min_spacing_meters = min_spacing_meters;
    m_min_spacing_meters_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions::is_min_spacing_meters_Set() const{
    return m_min_spacing_meters_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions::is_min_spacing_meters_Valid() const{
    return m_min_spacing_meters_isValid;
}

QString OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions::getPointType() const {
    return m_point_type;
}
void OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions::setPointType(const QString &point_type) {
    m_point_type = point_type;
    m_point_type_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions::is_point_type_Set() const{
    return m_point_type_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions::is_point_type_Valid() const{
    return m_point_type_isValid;
}

bool OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_min_spacing_meters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
