/**
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlayablelocationsV3Impression.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlayablelocationsV3Impression::OAIGoogleMapsPlayablelocationsV3Impression(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlayablelocationsV3Impression::OAIGoogleMapsPlayablelocationsV3Impression() {
    this->initializeModel();
}

OAIGoogleMapsPlayablelocationsV3Impression::~OAIGoogleMapsPlayablelocationsV3Impression() {}

void OAIGoogleMapsPlayablelocationsV3Impression::initializeModel() {

    m_game_object_type_isSet = false;
    m_game_object_type_isValid = false;

    m_impression_type_isSet = false;
    m_impression_type_isValid = false;

    m_location_name_isSet = false;
    m_location_name_isValid = false;
}

void OAIGoogleMapsPlayablelocationsV3Impression::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlayablelocationsV3Impression::fromJsonObject(QJsonObject json) {

    m_game_object_type_isValid = ::OpenAPI::fromJsonValue(m_game_object_type, json[QString("gameObjectType")]);
    m_game_object_type_isSet = !json[QString("gameObjectType")].isNull() && m_game_object_type_isValid;

    m_impression_type_isValid = ::OpenAPI::fromJsonValue(m_impression_type, json[QString("impressionType")]);
    m_impression_type_isSet = !json[QString("impressionType")].isNull() && m_impression_type_isValid;

    m_location_name_isValid = ::OpenAPI::fromJsonValue(m_location_name, json[QString("locationName")]);
    m_location_name_isSet = !json[QString("locationName")].isNull() && m_location_name_isValid;
}

QString OAIGoogleMapsPlayablelocationsV3Impression::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlayablelocationsV3Impression::asJsonObject() const {
    QJsonObject obj;
    if (m_game_object_type_isSet) {
        obj.insert(QString("gameObjectType"), ::OpenAPI::toJsonValue(m_game_object_type));
    }
    if (m_impression_type_isSet) {
        obj.insert(QString("impressionType"), ::OpenAPI::toJsonValue(m_impression_type));
    }
    if (m_location_name_isSet) {
        obj.insert(QString("locationName"), ::OpenAPI::toJsonValue(m_location_name));
    }
    return obj;
}

qint32 OAIGoogleMapsPlayablelocationsV3Impression::getGameObjectType() const {
    return m_game_object_type;
}
void OAIGoogleMapsPlayablelocationsV3Impression::setGameObjectType(const qint32 &game_object_type) {
    m_game_object_type = game_object_type;
    m_game_object_type_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3Impression::is_game_object_type_Set() const{
    return m_game_object_type_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3Impression::is_game_object_type_Valid() const{
    return m_game_object_type_isValid;
}

QString OAIGoogleMapsPlayablelocationsV3Impression::getImpressionType() const {
    return m_impression_type;
}
void OAIGoogleMapsPlayablelocationsV3Impression::setImpressionType(const QString &impression_type) {
    m_impression_type = impression_type;
    m_impression_type_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3Impression::is_impression_type_Set() const{
    return m_impression_type_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3Impression::is_impression_type_Valid() const{
    return m_impression_type_isValid;
}

QString OAIGoogleMapsPlayablelocationsV3Impression::getLocationName() const {
    return m_location_name;
}
void OAIGoogleMapsPlayablelocationsV3Impression::setLocationName(const QString &location_name) {
    m_location_name = location_name;
    m_location_name_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3Impression::is_location_name_Set() const{
    return m_location_name_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3Impression::is_location_name_Valid() const{
    return m_location_name_isValid;
}

bool OAIGoogleMapsPlayablelocationsV3Impression::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_game_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impression_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlayablelocationsV3Impression::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
