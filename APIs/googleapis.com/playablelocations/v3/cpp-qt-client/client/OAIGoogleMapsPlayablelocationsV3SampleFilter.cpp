/**
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlayablelocationsV3SampleFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlayablelocationsV3SampleFilter::OAIGoogleMapsPlayablelocationsV3SampleFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlayablelocationsV3SampleFilter::OAIGoogleMapsPlayablelocationsV3SampleFilter() {
    this->initializeModel();
}

OAIGoogleMapsPlayablelocationsV3SampleFilter::~OAIGoogleMapsPlayablelocationsV3SampleFilter() {}

void OAIGoogleMapsPlayablelocationsV3SampleFilter::initializeModel() {

    m_included_types_isSet = false;
    m_included_types_isValid = false;

    m_max_location_count_isSet = false;
    m_max_location_count_isValid = false;

    m_spacing_isSet = false;
    m_spacing_isValid = false;
}

void OAIGoogleMapsPlayablelocationsV3SampleFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlayablelocationsV3SampleFilter::fromJsonObject(QJsonObject json) {

    m_included_types_isValid = ::OpenAPI::fromJsonValue(m_included_types, json[QString("includedTypes")]);
    m_included_types_isSet = !json[QString("includedTypes")].isNull() && m_included_types_isValid;

    m_max_location_count_isValid = ::OpenAPI::fromJsonValue(m_max_location_count, json[QString("maxLocationCount")]);
    m_max_location_count_isSet = !json[QString("maxLocationCount")].isNull() && m_max_location_count_isValid;

    m_spacing_isValid = ::OpenAPI::fromJsonValue(m_spacing, json[QString("spacing")]);
    m_spacing_isSet = !json[QString("spacing")].isNull() && m_spacing_isValid;
}

QString OAIGoogleMapsPlayablelocationsV3SampleFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlayablelocationsV3SampleFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_included_types.size() > 0) {
        obj.insert(QString("includedTypes"), ::OpenAPI::toJsonValue(m_included_types));
    }
    if (m_max_location_count_isSet) {
        obj.insert(QString("maxLocationCount"), ::OpenAPI::toJsonValue(m_max_location_count));
    }
    if (m_spacing.isSet()) {
        obj.insert(QString("spacing"), ::OpenAPI::toJsonValue(m_spacing));
    }
    return obj;
}

QList<QString> OAIGoogleMapsPlayablelocationsV3SampleFilter::getIncludedTypes() const {
    return m_included_types;
}
void OAIGoogleMapsPlayablelocationsV3SampleFilter::setIncludedTypes(const QList<QString> &included_types) {
    m_included_types = included_types;
    m_included_types_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3SampleFilter::is_included_types_Set() const{
    return m_included_types_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3SampleFilter::is_included_types_Valid() const{
    return m_included_types_isValid;
}

qint32 OAIGoogleMapsPlayablelocationsV3SampleFilter::getMaxLocationCount() const {
    return m_max_location_count;
}
void OAIGoogleMapsPlayablelocationsV3SampleFilter::setMaxLocationCount(const qint32 &max_location_count) {
    m_max_location_count = max_location_count;
    m_max_location_count_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3SampleFilter::is_max_location_count_Set() const{
    return m_max_location_count_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3SampleFilter::is_max_location_count_Valid() const{
    return m_max_location_count_isValid;
}

OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions OAIGoogleMapsPlayablelocationsV3SampleFilter::getSpacing() const {
    return m_spacing;
}
void OAIGoogleMapsPlayablelocationsV3SampleFilter::setSpacing(const OAIGoogleMapsPlayablelocationsV3SampleSpacingOptions &spacing) {
    m_spacing = spacing;
    m_spacing_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3SampleFilter::is_spacing_Set() const{
    return m_spacing_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3SampleFilter::is_spacing_Valid() const{
    return m_spacing_isValid;
}

bool OAIGoogleMapsPlayablelocationsV3SampleFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_included_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_location_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spacing.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlayablelocationsV3SampleFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
