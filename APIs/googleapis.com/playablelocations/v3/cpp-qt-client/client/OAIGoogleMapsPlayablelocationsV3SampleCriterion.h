/**
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleMapsPlayablelocationsV3SampleCriterion.h
 *
 * Encapsulates a filter criterion for searching for a set of playable locations.
 */

#ifndef OAIGoogleMapsPlayablelocationsV3SampleCriterion_H
#define OAIGoogleMapsPlayablelocationsV3SampleCriterion_H

#include <QJsonObject>

#include "OAIGoogleMapsPlayablelocationsV3SampleFilter.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleMapsPlayablelocationsV3SampleFilter;

class OAIGoogleMapsPlayablelocationsV3SampleCriterion : public OAIObject {
public:
    OAIGoogleMapsPlayablelocationsV3SampleCriterion();
    OAIGoogleMapsPlayablelocationsV3SampleCriterion(QString json);
    ~OAIGoogleMapsPlayablelocationsV3SampleCriterion() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFieldsToReturn() const;
    void setFieldsToReturn(const QString &fields_to_return);
    bool is_fields_to_return_Set() const;
    bool is_fields_to_return_Valid() const;

    OAIGoogleMapsPlayablelocationsV3SampleFilter getFilter() const;
    void setFilter(const OAIGoogleMapsPlayablelocationsV3SampleFilter &filter);
    bool is_filter_Set() const;
    bool is_filter_Valid() const;

    qint32 getGameObjectType() const;
    void setGameObjectType(const qint32 &game_object_type);
    bool is_game_object_type_Set() const;
    bool is_game_object_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_fields_to_return;
    bool m_fields_to_return_isSet;
    bool m_fields_to_return_isValid;

    OAIGoogleMapsPlayablelocationsV3SampleFilter m_filter;
    bool m_filter_isSet;
    bool m_filter_isValid;

    qint32 m_game_object_type;
    bool m_game_object_type_isSet;
    bool m_game_object_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleMapsPlayablelocationsV3SampleCriterion)

#endif // OAIGoogleMapsPlayablelocationsV3SampleCriterion_H
