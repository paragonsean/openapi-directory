/**
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest::OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest::OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest() {
    this->initializeModel();
}

OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest::~OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest() {}

void OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest::initializeModel() {

    m_area_filter_isSet = false;
    m_area_filter_isValid = false;

    m_criteria_isSet = false;
    m_criteria_isValid = false;
}

void OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest::fromJsonObject(QJsonObject json) {

    m_area_filter_isValid = ::OpenAPI::fromJsonValue(m_area_filter, json[QString("areaFilter")]);
    m_area_filter_isSet = !json[QString("areaFilter")].isNull() && m_area_filter_isValid;

    m_criteria_isValid = ::OpenAPI::fromJsonValue(m_criteria, json[QString("criteria")]);
    m_criteria_isSet = !json[QString("criteria")].isNull() && m_criteria_isValid;
}

QString OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_area_filter.isSet()) {
        obj.insert(QString("areaFilter"), ::OpenAPI::toJsonValue(m_area_filter));
    }
    if (m_criteria.size() > 0) {
        obj.insert(QString("criteria"), ::OpenAPI::toJsonValue(m_criteria));
    }
    return obj;
}

OAIGoogleMapsPlayablelocationsV3SampleAreaFilter OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest::getAreaFilter() const {
    return m_area_filter;
}
void OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest::setAreaFilter(const OAIGoogleMapsPlayablelocationsV3SampleAreaFilter &area_filter) {
    m_area_filter = area_filter;
    m_area_filter_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest::is_area_filter_Set() const{
    return m_area_filter_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest::is_area_filter_Valid() const{
    return m_area_filter_isValid;
}

QList<OAIGoogleMapsPlayablelocationsV3SampleCriterion> OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest::getCriteria() const {
    return m_criteria;
}
void OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest::setCriteria(const QList<OAIGoogleMapsPlayablelocationsV3SampleCriterion> &criteria) {
    m_criteria = criteria;
    m_criteria_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest::is_criteria_Set() const{
    return m_criteria_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest::is_criteria_Valid() const{
    return m_criteria_isValid;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_area_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_criteria.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
