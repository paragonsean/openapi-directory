/**
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlayablelocationsV3SampleCriterion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlayablelocationsV3SampleCriterion::OAIGoogleMapsPlayablelocationsV3SampleCriterion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlayablelocationsV3SampleCriterion::OAIGoogleMapsPlayablelocationsV3SampleCriterion() {
    this->initializeModel();
}

OAIGoogleMapsPlayablelocationsV3SampleCriterion::~OAIGoogleMapsPlayablelocationsV3SampleCriterion() {}

void OAIGoogleMapsPlayablelocationsV3SampleCriterion::initializeModel() {

    m_fields_to_return_isSet = false;
    m_fields_to_return_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_game_object_type_isSet = false;
    m_game_object_type_isValid = false;
}

void OAIGoogleMapsPlayablelocationsV3SampleCriterion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlayablelocationsV3SampleCriterion::fromJsonObject(QJsonObject json) {

    m_fields_to_return_isValid = ::OpenAPI::fromJsonValue(m_fields_to_return, json[QString("fieldsToReturn")]);
    m_fields_to_return_isSet = !json[QString("fieldsToReturn")].isNull() && m_fields_to_return_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_game_object_type_isValid = ::OpenAPI::fromJsonValue(m_game_object_type, json[QString("gameObjectType")]);
    m_game_object_type_isSet = !json[QString("gameObjectType")].isNull() && m_game_object_type_isValid;
}

QString OAIGoogleMapsPlayablelocationsV3SampleCriterion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlayablelocationsV3SampleCriterion::asJsonObject() const {
    QJsonObject obj;
    if (m_fields_to_return_isSet) {
        obj.insert(QString("fieldsToReturn"), ::OpenAPI::toJsonValue(m_fields_to_return));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_game_object_type_isSet) {
        obj.insert(QString("gameObjectType"), ::OpenAPI::toJsonValue(m_game_object_type));
    }
    return obj;
}

QString OAIGoogleMapsPlayablelocationsV3SampleCriterion::getFieldsToReturn() const {
    return m_fields_to_return;
}
void OAIGoogleMapsPlayablelocationsV3SampleCriterion::setFieldsToReturn(const QString &fields_to_return) {
    m_fields_to_return = fields_to_return;
    m_fields_to_return_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3SampleCriterion::is_fields_to_return_Set() const{
    return m_fields_to_return_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3SampleCriterion::is_fields_to_return_Valid() const{
    return m_fields_to_return_isValid;
}

OAIGoogleMapsPlayablelocationsV3SampleFilter OAIGoogleMapsPlayablelocationsV3SampleCriterion::getFilter() const {
    return m_filter;
}
void OAIGoogleMapsPlayablelocationsV3SampleCriterion::setFilter(const OAIGoogleMapsPlayablelocationsV3SampleFilter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3SampleCriterion::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3SampleCriterion::is_filter_Valid() const{
    return m_filter_isValid;
}

qint32 OAIGoogleMapsPlayablelocationsV3SampleCriterion::getGameObjectType() const {
    return m_game_object_type;
}
void OAIGoogleMapsPlayablelocationsV3SampleCriterion::setGameObjectType(const qint32 &game_object_type) {
    m_game_object_type = game_object_type;
    m_game_object_type_isSet = true;
}

bool OAIGoogleMapsPlayablelocationsV3SampleCriterion::is_game_object_type_Set() const{
    return m_game_object_type_isSet;
}

bool OAIGoogleMapsPlayablelocationsV3SampleCriterion::is_game_object_type_Valid() const{
    return m_game_object_type_isValid;
}

bool OAIGoogleMapsPlayablelocationsV3SampleCriterion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fields_to_return_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlayablelocationsV3SampleCriterion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
