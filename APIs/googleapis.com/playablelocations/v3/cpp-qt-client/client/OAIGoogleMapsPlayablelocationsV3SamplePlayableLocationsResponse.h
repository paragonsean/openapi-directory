/**
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse.h
 *
 *  Response for the SamplePlayableLocations method.
 */

#ifndef OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse_H
#define OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse_H

#include <QJsonObject>

#include "OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationList.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationList;

class OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse : public OAIObject {
public:
    OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse();
    OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse(QString json);
    ~OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationList> getLocationsPerGameObjectType() const;
    void setLocationsPerGameObjectType(const QMap<QString, OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationList> &locations_per_game_object_type);
    bool is_locations_per_game_object_type_Set() const;
    bool is_locations_per_game_object_type_Valid() const;

    QString getTtl() const;
    void setTtl(const QString &ttl);
    bool is_ttl_Set() const;
    bool is_ttl_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationList> m_locations_per_game_object_type;
    bool m_locations_per_game_object_type_isSet;
    bool m_locations_per_game_object_type_isValid;

    QString m_ttl;
    bool m_ttl_isSet;
    bool m_ttl_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse)

#endif // OAIGoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse_H
