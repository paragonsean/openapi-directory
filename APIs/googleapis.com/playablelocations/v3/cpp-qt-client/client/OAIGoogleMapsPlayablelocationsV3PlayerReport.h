/**
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleMapsPlayablelocationsV3PlayerReport.h
 *
 * A report submitted by a player about a playable location that is considered inappropriate for use in the game.
 */

#ifndef OAIGoogleMapsPlayablelocationsV3PlayerReport_H
#define OAIGoogleMapsPlayablelocationsV3PlayerReport_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleMapsPlayablelocationsV3PlayerReport : public OAIObject {
public:
    OAIGoogleMapsPlayablelocationsV3PlayerReport();
    OAIGoogleMapsPlayablelocationsV3PlayerReport(QString json);
    ~OAIGoogleMapsPlayablelocationsV3PlayerReport() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLanguageCode() const;
    void setLanguageCode(const QString &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    QString getLocationName() const;
    void setLocationName(const QString &location_name);
    bool is_location_name_Set() const;
    bool is_location_name_Valid() const;

    QString getReasonDetails() const;
    void setReasonDetails(const QString &reason_details);
    bool is_reason_details_Set() const;
    bool is_reason_details_Valid() const;

    QList<QString> getReasons() const;
    void setReasons(const QList<QString> &reasons);
    bool is_reasons_Set() const;
    bool is_reasons_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    QString m_location_name;
    bool m_location_name_isSet;
    bool m_location_name_isValid;

    QString m_reason_details;
    bool m_reason_details_isSet;
    bool m_reason_details_isValid;

    QList<QString> m_reasons;
    bool m_reasons_isSet;
    bool m_reasons_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleMapsPlayablelocationsV3PlayerReport)

#endif // OAIGoogleMapsPlayablelocationsV3PlayerReport_H
