/**
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleMapsPlayablelocationsV3SampleSpacingOptions model module.
 * @module model/GoogleMapsPlayablelocationsV3SampleSpacingOptions
 * @version v3
 */
class GoogleMapsPlayablelocationsV3SampleSpacingOptions {
    /**
     * Constructs a new <code>GoogleMapsPlayablelocationsV3SampleSpacingOptions</code>.
     * A set of options that specifies the separation between playable locations.
     * @alias module:model/GoogleMapsPlayablelocationsV3SampleSpacingOptions
     */
    constructor() { 
        
        GoogleMapsPlayablelocationsV3SampleSpacingOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleMapsPlayablelocationsV3SampleSpacingOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleMapsPlayablelocationsV3SampleSpacingOptions} obj Optional instance to populate.
     * @return {module:model/GoogleMapsPlayablelocationsV3SampleSpacingOptions} The populated <code>GoogleMapsPlayablelocationsV3SampleSpacingOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleMapsPlayablelocationsV3SampleSpacingOptions();

            if (data.hasOwnProperty('minSpacingMeters')) {
                obj['minSpacingMeters'] = ApiClient.convertToType(data['minSpacingMeters'], 'Number');
            }
            if (data.hasOwnProperty('pointType')) {
                obj['pointType'] = ApiClient.convertToType(data['pointType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleMapsPlayablelocationsV3SampleSpacingOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleMapsPlayablelocationsV3SampleSpacingOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['pointType'] && !(typeof data['pointType'] === 'string' || data['pointType'] instanceof String)) {
            throw new Error("Expected the field `pointType` to be a primitive type in the JSON string but got " + data['pointType']);
        }

        return true;
    }


}



/**
 * Required. The minimum spacing between any two playable locations, measured in meters. The minimum value is 30. The maximum value is 1000. Inputs will be rounded up to the next 10 meter interval. The default value is 200m. Set this field to remove tight clusters of playable locations. Note: The spacing is a greedy algorithm. It optimizes for selecting the highest ranking locations first, not to maximize the number of locations selected. Consider the following scenario: * Rank: A: 2, B: 1, C: 3. * Distance: A--200m--B--200m--C If spacing=250, it will pick the highest ranked location [B], not [A, C]. Note: Spacing works within the game object type itself, as well as the previous ones. Suppose three game object types, each with the following spacing: * X: 400m, Y: undefined, Z: 200m. 1. Add locations for X, within 400m of each other. 2. Add locations for Y, without any spacing. 3. Finally, add locations for Z within 200m of each other as well X and Y. The distance diagram between those locations end up as: * From->To. * X->X: 400m * Y->X, Y->Y: unspecified. * Z->X, Z->Y, Z->Z: 200m.
 * @member {Number} minSpacingMeters
 */
GoogleMapsPlayablelocationsV3SampleSpacingOptions.prototype['minSpacingMeters'] = undefined;

/**
 * Specifies whether the minimum spacing constraint applies to the center-point or to the snapped point of playable locations. The default value is `CENTER_POINT`. If a snapped point is not available for a playable location, its center-point is used instead. Set this to the point type used in your game.
 * @member {module:model/GoogleMapsPlayablelocationsV3SampleSpacingOptions.PointTypeEnum} pointType
 */
GoogleMapsPlayablelocationsV3SampleSpacingOptions.prototype['pointType'] = undefined;





/**
 * Allowed values for the <code>pointType</code> property.
 * @enum {String}
 * @readonly
 */
GoogleMapsPlayablelocationsV3SampleSpacingOptions['PointTypeEnum'] = {

    /**
     * value: "POINT_TYPE_UNSPECIFIED"
     * @const
     */
    "POINT_TYPE_UNSPECIFIED": "POINT_TYPE_UNSPECIFIED",

    /**
     * value: "CENTER_POINT"
     * @const
     */
    "CENTER_POINT": "CENTER_POINT",

    /**
     * value: "SNAPPED_POINT"
     * @const
     */
    "SNAPPED_POINT": "SNAPPED_POINT"
};



export default GoogleMapsPlayablelocationsV3SampleSpacingOptions;

