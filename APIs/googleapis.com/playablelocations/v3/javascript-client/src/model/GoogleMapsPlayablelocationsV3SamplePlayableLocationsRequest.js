/**
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleMapsPlayablelocationsV3SampleAreaFilter from './GoogleMapsPlayablelocationsV3SampleAreaFilter';
import GoogleMapsPlayablelocationsV3SampleCriterion from './GoogleMapsPlayablelocationsV3SampleCriterion';

/**
 * The GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest model module.
 * @module model/GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest
 * @version v3
 */
class GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest {
    /**
     * Constructs a new <code>GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest</code>.
     *  Life of a query: - When a game starts in a new location, your game server issues a SamplePlayableLocations request. The request specifies the S2 cell, and contains one or more \&quot;criteria\&quot; for filtering: - Criterion 0: i locations for long-lived bases, or level 0 monsters, or... - Criterion 1: j locations for short-lived bases, or level 1 monsters, ... - Criterion 2: k locations for random objects. - etc (up to 5 criterion may be specified). &#x60;PlayableLocationList&#x60; will then contain mutually exclusive lists of &#x60;PlayableLocation&#x60; objects that satisfy each of the criteria. Think of it as a collection of real-world locations that you can then associate with your game state. Note: These points are impermanent in nature. E.g, parks can close, and places can be removed. The response specifies how long you can expect the playable locations to last. Once they expire, you should query the &#x60;samplePlayableLocations&#x60; API again to get a fresh view of the real world.
     * @alias module:model/GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest
     */
    constructor() { 
        
        GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest} obj Optional instance to populate.
     * @return {module:model/GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest} The populated <code>GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest();

            if (data.hasOwnProperty('areaFilter')) {
                obj['areaFilter'] = GoogleMapsPlayablelocationsV3SampleAreaFilter.constructFromObject(data['areaFilter']);
            }
            if (data.hasOwnProperty('criteria')) {
                obj['criteria'] = ApiClient.convertToType(data['criteria'], [GoogleMapsPlayablelocationsV3SampleCriterion]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `areaFilter`
        if (data['areaFilter']) { // data not null
          GoogleMapsPlayablelocationsV3SampleAreaFilter.validateJSON(data['areaFilter']);
        }
        if (data['criteria']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['criteria'])) {
                throw new Error("Expected the field `criteria` to be an array in the JSON data but got " + data['criteria']);
            }
            // validate the optional field `criteria` (array)
            for (const item of data['criteria']) {
                GoogleMapsPlayablelocationsV3SampleCriterion.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleMapsPlayablelocationsV3SampleAreaFilter} areaFilter
 */
GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest.prototype['areaFilter'] = undefined;

/**
 * Required. Specifies one or more (up to 5) criteria for filtering the returned playable locations.
 * @member {Array.<module:model/GoogleMapsPlayablelocationsV3SampleCriterion>} criteria
 */
GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest.prototype['criteria'] = undefined;






export default GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest;

