/**
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleTypeLatLng from './GoogleTypeLatLng';

/**
 * The GoogleMapsPlayablelocationsV3SamplePlayableLocation model module.
 * @module model/GoogleMapsPlayablelocationsV3SamplePlayableLocation
 * @version v3
 */
class GoogleMapsPlayablelocationsV3SamplePlayableLocation {
    /**
     * Constructs a new <code>GoogleMapsPlayablelocationsV3SamplePlayableLocation</code>.
     * A geographical point suitable for placing game objects in location-based games.
     * @alias module:model/GoogleMapsPlayablelocationsV3SamplePlayableLocation
     */
    constructor() { 
        
        GoogleMapsPlayablelocationsV3SamplePlayableLocation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleMapsPlayablelocationsV3SamplePlayableLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleMapsPlayablelocationsV3SamplePlayableLocation} obj Optional instance to populate.
     * @return {module:model/GoogleMapsPlayablelocationsV3SamplePlayableLocation} The populated <code>GoogleMapsPlayablelocationsV3SamplePlayableLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleMapsPlayablelocationsV3SamplePlayableLocation();

            if (data.hasOwnProperty('centerPoint')) {
                obj['centerPoint'] = GoogleTypeLatLng.constructFromObject(data['centerPoint']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('placeId')) {
                obj['placeId'] = ApiClient.convertToType(data['placeId'], 'String');
            }
            if (data.hasOwnProperty('plusCode')) {
                obj['plusCode'] = ApiClient.convertToType(data['plusCode'], 'String');
            }
            if (data.hasOwnProperty('snappedPoint')) {
                obj['snappedPoint'] = GoogleTypeLatLng.constructFromObject(data['snappedPoint']);
            }
            if (data.hasOwnProperty('types')) {
                obj['types'] = ApiClient.convertToType(data['types'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleMapsPlayablelocationsV3SamplePlayableLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleMapsPlayablelocationsV3SamplePlayableLocation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `centerPoint`
        if (data['centerPoint']) { // data not null
          GoogleTypeLatLng.validateJSON(data['centerPoint']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['placeId'] && !(typeof data['placeId'] === 'string' || data['placeId'] instanceof String)) {
            throw new Error("Expected the field `placeId` to be a primitive type in the JSON string but got " + data['placeId']);
        }
        // ensure the json data is a string
        if (data['plusCode'] && !(typeof data['plusCode'] === 'string' || data['plusCode'] instanceof String)) {
            throw new Error("Expected the field `plusCode` to be a primitive type in the JSON string but got " + data['plusCode']);
        }
        // validate the optional field `snappedPoint`
        if (data['snappedPoint']) { // data not null
          GoogleTypeLatLng.validateJSON(data['snappedPoint']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['types'])) {
            throw new Error("Expected the field `types` to be an array in the JSON data but got " + data['types']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleTypeLatLng} centerPoint
 */
GoogleMapsPlayablelocationsV3SamplePlayableLocation.prototype['centerPoint'] = undefined;

/**
 * Required. The name of this playable location.
 * @member {String} name
 */
GoogleMapsPlayablelocationsV3SamplePlayableLocation.prototype['name'] = undefined;

/**
 * A [place ID] (https://developers.google.com/places/place-id)
 * @member {String} placeId
 */
GoogleMapsPlayablelocationsV3SamplePlayableLocation.prototype['placeId'] = undefined;

/**
 * A [plus code] (http://openlocationcode.com)
 * @member {String} plusCode
 */
GoogleMapsPlayablelocationsV3SamplePlayableLocation.prototype['plusCode'] = undefined;

/**
 * @member {module:model/GoogleTypeLatLng} snappedPoint
 */
GoogleMapsPlayablelocationsV3SamplePlayableLocation.prototype['snappedPoint'] = undefined;

/**
 * A collection of [Playable Location Types](/maps/documentation/gaming/tt/types) for this playable location. The first type in the collection is the primary type. Type information might not be available for all playable locations.
 * @member {Array.<String>} types
 */
GoogleMapsPlayablelocationsV3SamplePlayableLocation.prototype['types'] = undefined;






export default GoogleMapsPlayablelocationsV3SamplePlayableLocation;

