/**
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleMapsPlayablelocationsV3Impression model module.
 * @module model/GoogleMapsPlayablelocationsV3Impression
 * @version v3
 */
class GoogleMapsPlayablelocationsV3Impression {
    /**
     * Constructs a new <code>GoogleMapsPlayablelocationsV3Impression</code>.
     * Encapsulates impression event details.
     * @alias module:model/GoogleMapsPlayablelocationsV3Impression
     */
    constructor() { 
        
        GoogleMapsPlayablelocationsV3Impression.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleMapsPlayablelocationsV3Impression</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleMapsPlayablelocationsV3Impression} obj Optional instance to populate.
     * @return {module:model/GoogleMapsPlayablelocationsV3Impression} The populated <code>GoogleMapsPlayablelocationsV3Impression</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleMapsPlayablelocationsV3Impression();

            if (data.hasOwnProperty('gameObjectType')) {
                obj['gameObjectType'] = ApiClient.convertToType(data['gameObjectType'], 'Number');
            }
            if (data.hasOwnProperty('impressionType')) {
                obj['impressionType'] = ApiClient.convertToType(data['impressionType'], 'String');
            }
            if (data.hasOwnProperty('locationName')) {
                obj['locationName'] = ApiClient.convertToType(data['locationName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleMapsPlayablelocationsV3Impression</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleMapsPlayablelocationsV3Impression</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['impressionType'] && !(typeof data['impressionType'] === 'string' || data['impressionType'] instanceof String)) {
            throw new Error("Expected the field `impressionType` to be a primitive type in the JSON string but got " + data['impressionType']);
        }
        // ensure the json data is a string
        if (data['locationName'] && !(typeof data['locationName'] === 'string' || data['locationName'] instanceof String)) {
            throw new Error("Expected the field `locationName` to be a primitive type in the JSON string but got " + data['locationName']);
        }

        return true;
    }


}



/**
 * An arbitrary, developer-defined type identifier for each type of game object used in your game. Since players interact with differ types of game objects in different ways, this field allows you to segregate impression data by type for analysis. You should assign a unique `game_object_type` ID to represent a distinct type of game object in your game. For example, 1=monster location, 2=powerup location.
 * @member {Number} gameObjectType
 */
GoogleMapsPlayablelocationsV3Impression.prototype['gameObjectType'] = undefined;

/**
 * Required. The type of impression event.
 * @member {module:model/GoogleMapsPlayablelocationsV3Impression.ImpressionTypeEnum} impressionType
 */
GoogleMapsPlayablelocationsV3Impression.prototype['impressionType'] = undefined;

/**
 * Required. The name of the playable location.
 * @member {String} locationName
 */
GoogleMapsPlayablelocationsV3Impression.prototype['locationName'] = undefined;





/**
 * Allowed values for the <code>impressionType</code> property.
 * @enum {String}
 * @readonly
 */
GoogleMapsPlayablelocationsV3Impression['ImpressionTypeEnum'] = {

    /**
     * value: "IMPRESSION_TYPE_UNSPECIFIED"
     * @const
     */
    "IMPRESSION_TYPE_UNSPECIFIED": "IMPRESSION_TYPE_UNSPECIFIED",

    /**
     * value: "PRESENTED"
     * @const
     */
    "PRESENTED": "PRESENTED",

    /**
     * value: "INTERACTED"
     * @const
     */
    "INTERACTED": "INTERACTED"
};



export default GoogleMapsPlayablelocationsV3Impression;

