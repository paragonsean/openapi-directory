/*
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A set of options that specifies the separation between playable locations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:14.298779-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleMapsPlayablelocationsV3SampleSpacingOptions {
  public static final String SERIALIZED_NAME_MIN_SPACING_METERS = "minSpacingMeters";
  @SerializedName(SERIALIZED_NAME_MIN_SPACING_METERS)
  private Double minSpacingMeters;

  /**
   * Specifies whether the minimum spacing constraint applies to the center-point or to the snapped point of playable locations. The default value is &#x60;CENTER_POINT&#x60;. If a snapped point is not available for a playable location, its center-point is used instead. Set this to the point type used in your game.
   */
  @JsonAdapter(PointTypeEnum.Adapter.class)
  public enum PointTypeEnum {
    POINT_TYPE_UNSPECIFIED("POINT_TYPE_UNSPECIFIED"),
    
    CENTER_POINT("CENTER_POINT"),
    
    SNAPPED_POINT("SNAPPED_POINT");

    private String value;

    PointTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PointTypeEnum fromValue(String value) {
      for (PointTypeEnum b : PointTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PointTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PointTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PointTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PointTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PointTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POINT_TYPE = "pointType";
  @SerializedName(SERIALIZED_NAME_POINT_TYPE)
  private PointTypeEnum pointType;

  public GoogleMapsPlayablelocationsV3SampleSpacingOptions() {
  }

  public GoogleMapsPlayablelocationsV3SampleSpacingOptions minSpacingMeters(Double minSpacingMeters) {
    this.minSpacingMeters = minSpacingMeters;
    return this;
  }

  /**
   * Required. The minimum spacing between any two playable locations, measured in meters. The minimum value is 30. The maximum value is 1000. Inputs will be rounded up to the next 10 meter interval. The default value is 200m. Set this field to remove tight clusters of playable locations. Note: The spacing is a greedy algorithm. It optimizes for selecting the highest ranking locations first, not to maximize the number of locations selected. Consider the following scenario: * Rank: A: 2, B: 1, C: 3. * Distance: A--200m--B--200m--C If spacing&#x3D;250, it will pick the highest ranked location [B], not [A, C]. Note: Spacing works within the game object type itself, as well as the previous ones. Suppose three game object types, each with the following spacing: * X: 400m, Y: undefined, Z: 200m. 1. Add locations for X, within 400m of each other. 2. Add locations for Y, without any spacing. 3. Finally, add locations for Z within 200m of each other as well X and Y. The distance diagram between those locations end up as: * From-&gt;To. * X-&gt;X: 400m * Y-&gt;X, Y-&gt;Y: unspecified. * Z-&gt;X, Z-&gt;Y, Z-&gt;Z: 200m.
   * @return minSpacingMeters
   */
  @javax.annotation.Nullable
  public Double getMinSpacingMeters() {
    return minSpacingMeters;
  }

  public void setMinSpacingMeters(Double minSpacingMeters) {
    this.minSpacingMeters = minSpacingMeters;
  }


  public GoogleMapsPlayablelocationsV3SampleSpacingOptions pointType(PointTypeEnum pointType) {
    this.pointType = pointType;
    return this;
  }

  /**
   * Specifies whether the minimum spacing constraint applies to the center-point or to the snapped point of playable locations. The default value is &#x60;CENTER_POINT&#x60;. If a snapped point is not available for a playable location, its center-point is used instead. Set this to the point type used in your game.
   * @return pointType
   */
  @javax.annotation.Nullable
  public PointTypeEnum getPointType() {
    return pointType;
  }

  public void setPointType(PointTypeEnum pointType) {
    this.pointType = pointType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleMapsPlayablelocationsV3SampleSpacingOptions googleMapsPlayablelocationsV3SampleSpacingOptions = (GoogleMapsPlayablelocationsV3SampleSpacingOptions) o;
    return Objects.equals(this.minSpacingMeters, googleMapsPlayablelocationsV3SampleSpacingOptions.minSpacingMeters) &&
        Objects.equals(this.pointType, googleMapsPlayablelocationsV3SampleSpacingOptions.pointType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minSpacingMeters, pointType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleMapsPlayablelocationsV3SampleSpacingOptions {\n");
    sb.append("    minSpacingMeters: ").append(toIndentedString(minSpacingMeters)).append("\n");
    sb.append("    pointType: ").append(toIndentedString(pointType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("minSpacingMeters");
    openapiFields.add("pointType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleMapsPlayablelocationsV3SampleSpacingOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleMapsPlayablelocationsV3SampleSpacingOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleMapsPlayablelocationsV3SampleSpacingOptions is not found in the empty JSON string", GoogleMapsPlayablelocationsV3SampleSpacingOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleMapsPlayablelocationsV3SampleSpacingOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleMapsPlayablelocationsV3SampleSpacingOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pointType") != null && !jsonObj.get("pointType").isJsonNull()) && !jsonObj.get("pointType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pointType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pointType").toString()));
      }
      // validate the optional field `pointType`
      if (jsonObj.get("pointType") != null && !jsonObj.get("pointType").isJsonNull()) {
        PointTypeEnum.validateJsonElement(jsonObj.get("pointType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleMapsPlayablelocationsV3SampleSpacingOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleMapsPlayablelocationsV3SampleSpacingOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleMapsPlayablelocationsV3SampleSpacingOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleMapsPlayablelocationsV3SampleSpacingOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleMapsPlayablelocationsV3SampleSpacingOptions>() {
           @Override
           public void write(JsonWriter out, GoogleMapsPlayablelocationsV3SampleSpacingOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleMapsPlayablelocationsV3SampleSpacingOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleMapsPlayablelocationsV3SampleSpacingOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleMapsPlayablelocationsV3SampleSpacingOptions
   * @throws IOException if the JSON string is invalid with respect to GoogleMapsPlayablelocationsV3SampleSpacingOptions
   */
  public static GoogleMapsPlayablelocationsV3SampleSpacingOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleMapsPlayablelocationsV3SampleSpacingOptions.class);
  }

  /**
   * Convert an instance of GoogleMapsPlayablelocationsV3SampleSpacingOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

