/*
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleMapsPlayablelocationsV3SampleAreaFilter;
import org.openapitools.client.model.GoogleMapsPlayablelocationsV3SampleCriterion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Life of a query: - When a game starts in a new location, your game server issues a SamplePlayableLocations request. The request specifies the S2 cell, and contains one or more \&quot;criteria\&quot; for filtering: - Criterion 0: i locations for long-lived bases, or level 0 monsters, or... - Criterion 1: j locations for short-lived bases, or level 1 monsters, ... - Criterion 2: k locations for random objects. - etc (up to 5 criterion may be specified). &#x60;PlayableLocationList&#x60; will then contain mutually exclusive lists of &#x60;PlayableLocation&#x60; objects that satisfy each of the criteria. Think of it as a collection of real-world locations that you can then associate with your game state. Note: These points are impermanent in nature. E.g, parks can close, and places can be removed. The response specifies how long you can expect the playable locations to last. Once they expire, you should query the &#x60;samplePlayableLocations&#x60; API again to get a fresh view of the real world.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:14.298779-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest {
  public static final String SERIALIZED_NAME_AREA_FILTER = "areaFilter";
  @SerializedName(SERIALIZED_NAME_AREA_FILTER)
  private GoogleMapsPlayablelocationsV3SampleAreaFilter areaFilter;

  public static final String SERIALIZED_NAME_CRITERIA = "criteria";
  @SerializedName(SERIALIZED_NAME_CRITERIA)
  private List<GoogleMapsPlayablelocationsV3SampleCriterion> criteria = new ArrayList<>();

  public GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest() {
  }

  public GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest areaFilter(GoogleMapsPlayablelocationsV3SampleAreaFilter areaFilter) {
    this.areaFilter = areaFilter;
    return this;
  }

  /**
   * Get areaFilter
   * @return areaFilter
   */
  @javax.annotation.Nullable
  public GoogleMapsPlayablelocationsV3SampleAreaFilter getAreaFilter() {
    return areaFilter;
  }

  public void setAreaFilter(GoogleMapsPlayablelocationsV3SampleAreaFilter areaFilter) {
    this.areaFilter = areaFilter;
  }


  public GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest criteria(List<GoogleMapsPlayablelocationsV3SampleCriterion> criteria) {
    this.criteria = criteria;
    return this;
  }

  public GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest addCriteriaItem(GoogleMapsPlayablelocationsV3SampleCriterion criteriaItem) {
    if (this.criteria == null) {
      this.criteria = new ArrayList<>();
    }
    this.criteria.add(criteriaItem);
    return this;
  }

  /**
   * Required. Specifies one or more (up to 5) criteria for filtering the returned playable locations.
   * @return criteria
   */
  @javax.annotation.Nullable
  public List<GoogleMapsPlayablelocationsV3SampleCriterion> getCriteria() {
    return criteria;
  }

  public void setCriteria(List<GoogleMapsPlayablelocationsV3SampleCriterion> criteria) {
    this.criteria = criteria;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest googleMapsPlayablelocationsV3SamplePlayableLocationsRequest = (GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest) o;
    return Objects.equals(this.areaFilter, googleMapsPlayablelocationsV3SamplePlayableLocationsRequest.areaFilter) &&
        Objects.equals(this.criteria, googleMapsPlayablelocationsV3SamplePlayableLocationsRequest.criteria);
  }

  @Override
  public int hashCode() {
    return Objects.hash(areaFilter, criteria);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest {\n");
    sb.append("    areaFilter: ").append(toIndentedString(areaFilter)).append("\n");
    sb.append("    criteria: ").append(toIndentedString(criteria)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("areaFilter");
    openapiFields.add("criteria");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest is not found in the empty JSON string", GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `areaFilter`
      if (jsonObj.get("areaFilter") != null && !jsonObj.get("areaFilter").isJsonNull()) {
        GoogleMapsPlayablelocationsV3SampleAreaFilter.validateJsonElement(jsonObj.get("areaFilter"));
      }
      if (jsonObj.get("criteria") != null && !jsonObj.get("criteria").isJsonNull()) {
        JsonArray jsonArraycriteria = jsonObj.getAsJsonArray("criteria");
        if (jsonArraycriteria != null) {
          // ensure the json data is an array
          if (!jsonObj.get("criteria").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `criteria` to be an array in the JSON string but got `%s`", jsonObj.get("criteria").toString()));
          }

          // validate the optional field `criteria` (array)
          for (int i = 0; i < jsonArraycriteria.size(); i++) {
            GoogleMapsPlayablelocationsV3SampleCriterion.validateJsonElement(jsonArraycriteria.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest>() {
           @Override
           public void write(JsonWriter out, GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest
   */
  public static GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest.class);
  }

  /**
   * Convert an instance of GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

