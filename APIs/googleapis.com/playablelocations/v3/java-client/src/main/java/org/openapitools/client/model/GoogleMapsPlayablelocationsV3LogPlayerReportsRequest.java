/*
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleMapsPlayablelocationsV3PlayerReport;
import org.openapitools.client.model.GoogleMapsUnityClientInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request for logging your player&#39;s bad location reports.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:14.298779-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleMapsPlayablelocationsV3LogPlayerReportsRequest {
  public static final String SERIALIZED_NAME_CLIENT_INFO = "clientInfo";
  @SerializedName(SERIALIZED_NAME_CLIENT_INFO)
  private GoogleMapsUnityClientInfo clientInfo;

  public static final String SERIALIZED_NAME_PLAYER_REPORTS = "playerReports";
  @SerializedName(SERIALIZED_NAME_PLAYER_REPORTS)
  private List<GoogleMapsPlayablelocationsV3PlayerReport> playerReports = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public GoogleMapsPlayablelocationsV3LogPlayerReportsRequest() {
  }

  public GoogleMapsPlayablelocationsV3LogPlayerReportsRequest clientInfo(GoogleMapsUnityClientInfo clientInfo) {
    this.clientInfo = clientInfo;
    return this;
  }

  /**
   * Get clientInfo
   * @return clientInfo
   */
  @javax.annotation.Nullable
  public GoogleMapsUnityClientInfo getClientInfo() {
    return clientInfo;
  }

  public void setClientInfo(GoogleMapsUnityClientInfo clientInfo) {
    this.clientInfo = clientInfo;
  }


  public GoogleMapsPlayablelocationsV3LogPlayerReportsRequest playerReports(List<GoogleMapsPlayablelocationsV3PlayerReport> playerReports) {
    this.playerReports = playerReports;
    return this;
  }

  public GoogleMapsPlayablelocationsV3LogPlayerReportsRequest addPlayerReportsItem(GoogleMapsPlayablelocationsV3PlayerReport playerReportsItem) {
    if (this.playerReports == null) {
      this.playerReports = new ArrayList<>();
    }
    this.playerReports.add(playerReportsItem);
    return this;
  }

  /**
   * Required. Player reports. The maximum number of player reports that you can log at once is 50.
   * @return playerReports
   */
  @javax.annotation.Nullable
  public List<GoogleMapsPlayablelocationsV3PlayerReport> getPlayerReports() {
    return playerReports;
  }

  public void setPlayerReports(List<GoogleMapsPlayablelocationsV3PlayerReport> playerReports) {
    this.playerReports = playerReports;
  }


  public GoogleMapsPlayablelocationsV3LogPlayerReportsRequest requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Required. A string that uniquely identifies the log player reports request. This allows you to detect duplicate requests. We recommend that you use UUIDs for this value. The value must not exceed 50 characters. You should reuse the &#x60;request_id&#x60; only when retrying a request in the case of a failure. In that case, the request must be identical to the one that failed.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleMapsPlayablelocationsV3LogPlayerReportsRequest googleMapsPlayablelocationsV3LogPlayerReportsRequest = (GoogleMapsPlayablelocationsV3LogPlayerReportsRequest) o;
    return Objects.equals(this.clientInfo, googleMapsPlayablelocationsV3LogPlayerReportsRequest.clientInfo) &&
        Objects.equals(this.playerReports, googleMapsPlayablelocationsV3LogPlayerReportsRequest.playerReports) &&
        Objects.equals(this.requestId, googleMapsPlayablelocationsV3LogPlayerReportsRequest.requestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientInfo, playerReports, requestId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleMapsPlayablelocationsV3LogPlayerReportsRequest {\n");
    sb.append("    clientInfo: ").append(toIndentedString(clientInfo)).append("\n");
    sb.append("    playerReports: ").append(toIndentedString(playerReports)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientInfo");
    openapiFields.add("playerReports");
    openapiFields.add("requestId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleMapsPlayablelocationsV3LogPlayerReportsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleMapsPlayablelocationsV3LogPlayerReportsRequest is not found in the empty JSON string", GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleMapsPlayablelocationsV3LogPlayerReportsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `clientInfo`
      if (jsonObj.get("clientInfo") != null && !jsonObj.get("clientInfo").isJsonNull()) {
        GoogleMapsUnityClientInfo.validateJsonElement(jsonObj.get("clientInfo"));
      }
      if (jsonObj.get("playerReports") != null && !jsonObj.get("playerReports").isJsonNull()) {
        JsonArray jsonArrayplayerReports = jsonObj.getAsJsonArray("playerReports");
        if (jsonArrayplayerReports != null) {
          // ensure the json data is an array
          if (!jsonObj.get("playerReports").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `playerReports` to be an array in the JSON string but got `%s`", jsonObj.get("playerReports").toString()));
          }

          // validate the optional field `playerReports` (array)
          for (int i = 0; i < jsonArrayplayerReports.size(); i++) {
            GoogleMapsPlayablelocationsV3PlayerReport.validateJsonElement(jsonArrayplayerReports.get(i));
          };
        }
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleMapsPlayablelocationsV3LogPlayerReportsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleMapsPlayablelocationsV3LogPlayerReportsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleMapsPlayablelocationsV3LogPlayerReportsRequest>() {
           @Override
           public void write(JsonWriter out, GoogleMapsPlayablelocationsV3LogPlayerReportsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleMapsPlayablelocationsV3LogPlayerReportsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleMapsPlayablelocationsV3LogPlayerReportsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleMapsPlayablelocationsV3LogPlayerReportsRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleMapsPlayablelocationsV3LogPlayerReportsRequest
   */
  public static GoogleMapsPlayablelocationsV3LogPlayerReportsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleMapsPlayablelocationsV3LogPlayerReportsRequest.class);
  }

  /**
   * Convert an instance of GoogleMapsPlayablelocationsV3LogPlayerReportsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

