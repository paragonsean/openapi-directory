/*
 * Playable Locations API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleTypeLatLng;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A geographical point suitable for placing game objects in location-based games.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:14.298779-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleMapsPlayablelocationsV3SamplePlayableLocation {
  public static final String SERIALIZED_NAME_CENTER_POINT = "centerPoint";
  @SerializedName(SERIALIZED_NAME_CENTER_POINT)
  private GoogleTypeLatLng centerPoint;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PLACE_ID = "placeId";
  @SerializedName(SERIALIZED_NAME_PLACE_ID)
  private String placeId;

  public static final String SERIALIZED_NAME_PLUS_CODE = "plusCode";
  @SerializedName(SERIALIZED_NAME_PLUS_CODE)
  private String plusCode;

  public static final String SERIALIZED_NAME_SNAPPED_POINT = "snappedPoint";
  @SerializedName(SERIALIZED_NAME_SNAPPED_POINT)
  private GoogleTypeLatLng snappedPoint;

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List<String> types = new ArrayList<>();

  public GoogleMapsPlayablelocationsV3SamplePlayableLocation() {
  }

  public GoogleMapsPlayablelocationsV3SamplePlayableLocation centerPoint(GoogleTypeLatLng centerPoint) {
    this.centerPoint = centerPoint;
    return this;
  }

  /**
   * Get centerPoint
   * @return centerPoint
   */
  @javax.annotation.Nullable
  public GoogleTypeLatLng getCenterPoint() {
    return centerPoint;
  }

  public void setCenterPoint(GoogleTypeLatLng centerPoint) {
    this.centerPoint = centerPoint;
  }


  public GoogleMapsPlayablelocationsV3SamplePlayableLocation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The name of this playable location.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleMapsPlayablelocationsV3SamplePlayableLocation placeId(String placeId) {
    this.placeId = placeId;
    return this;
  }

  /**
   * A [place ID] (https://developers.google.com/places/place-id)
   * @return placeId
   */
  @javax.annotation.Nullable
  public String getPlaceId() {
    return placeId;
  }

  public void setPlaceId(String placeId) {
    this.placeId = placeId;
  }


  public GoogleMapsPlayablelocationsV3SamplePlayableLocation plusCode(String plusCode) {
    this.plusCode = plusCode;
    return this;
  }

  /**
   * A [plus code] (http://openlocationcode.com)
   * @return plusCode
   */
  @javax.annotation.Nullable
  public String getPlusCode() {
    return plusCode;
  }

  public void setPlusCode(String plusCode) {
    this.plusCode = plusCode;
  }


  public GoogleMapsPlayablelocationsV3SamplePlayableLocation snappedPoint(GoogleTypeLatLng snappedPoint) {
    this.snappedPoint = snappedPoint;
    return this;
  }

  /**
   * Get snappedPoint
   * @return snappedPoint
   */
  @javax.annotation.Nullable
  public GoogleTypeLatLng getSnappedPoint() {
    return snappedPoint;
  }

  public void setSnappedPoint(GoogleTypeLatLng snappedPoint) {
    this.snappedPoint = snappedPoint;
  }


  public GoogleMapsPlayablelocationsV3SamplePlayableLocation types(List<String> types) {
    this.types = types;
    return this;
  }

  public GoogleMapsPlayablelocationsV3SamplePlayableLocation addTypesItem(String typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

  /**
   * A collection of [Playable Location Types](/maps/documentation/gaming/tt/types) for this playable location. The first type in the collection is the primary type. Type information might not be available for all playable locations.
   * @return types
   */
  @javax.annotation.Nullable
  public List<String> getTypes() {
    return types;
  }

  public void setTypes(List<String> types) {
    this.types = types;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleMapsPlayablelocationsV3SamplePlayableLocation googleMapsPlayablelocationsV3SamplePlayableLocation = (GoogleMapsPlayablelocationsV3SamplePlayableLocation) o;
    return Objects.equals(this.centerPoint, googleMapsPlayablelocationsV3SamplePlayableLocation.centerPoint) &&
        Objects.equals(this.name, googleMapsPlayablelocationsV3SamplePlayableLocation.name) &&
        Objects.equals(this.placeId, googleMapsPlayablelocationsV3SamplePlayableLocation.placeId) &&
        Objects.equals(this.plusCode, googleMapsPlayablelocationsV3SamplePlayableLocation.plusCode) &&
        Objects.equals(this.snappedPoint, googleMapsPlayablelocationsV3SamplePlayableLocation.snappedPoint) &&
        Objects.equals(this.types, googleMapsPlayablelocationsV3SamplePlayableLocation.types);
  }

  @Override
  public int hashCode() {
    return Objects.hash(centerPoint, name, placeId, plusCode, snappedPoint, types);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleMapsPlayablelocationsV3SamplePlayableLocation {\n");
    sb.append("    centerPoint: ").append(toIndentedString(centerPoint)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    placeId: ").append(toIndentedString(placeId)).append("\n");
    sb.append("    plusCode: ").append(toIndentedString(plusCode)).append("\n");
    sb.append("    snappedPoint: ").append(toIndentedString(snappedPoint)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("centerPoint");
    openapiFields.add("name");
    openapiFields.add("placeId");
    openapiFields.add("plusCode");
    openapiFields.add("snappedPoint");
    openapiFields.add("types");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleMapsPlayablelocationsV3SamplePlayableLocation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleMapsPlayablelocationsV3SamplePlayableLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleMapsPlayablelocationsV3SamplePlayableLocation is not found in the empty JSON string", GoogleMapsPlayablelocationsV3SamplePlayableLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleMapsPlayablelocationsV3SamplePlayableLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleMapsPlayablelocationsV3SamplePlayableLocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `centerPoint`
      if (jsonObj.get("centerPoint") != null && !jsonObj.get("centerPoint").isJsonNull()) {
        GoogleTypeLatLng.validateJsonElement(jsonObj.get("centerPoint"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("placeId") != null && !jsonObj.get("placeId").isJsonNull()) && !jsonObj.get("placeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeId").toString()));
      }
      if ((jsonObj.get("plusCode") != null && !jsonObj.get("plusCode").isJsonNull()) && !jsonObj.get("plusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plusCode").toString()));
      }
      // validate the optional field `snappedPoint`
      if (jsonObj.get("snappedPoint") != null && !jsonObj.get("snappedPoint").isJsonNull()) {
        GoogleTypeLatLng.validateJsonElement(jsonObj.get("snappedPoint"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("types") != null && !jsonObj.get("types").isJsonNull() && !jsonObj.get("types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string but got `%s`", jsonObj.get("types").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleMapsPlayablelocationsV3SamplePlayableLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleMapsPlayablelocationsV3SamplePlayableLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleMapsPlayablelocationsV3SamplePlayableLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleMapsPlayablelocationsV3SamplePlayableLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleMapsPlayablelocationsV3SamplePlayableLocation>() {
           @Override
           public void write(JsonWriter out, GoogleMapsPlayablelocationsV3SamplePlayableLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleMapsPlayablelocationsV3SamplePlayableLocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleMapsPlayablelocationsV3SamplePlayableLocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleMapsPlayablelocationsV3SamplePlayableLocation
   * @throws IOException if the JSON string is invalid with respect to GoogleMapsPlayablelocationsV3SamplePlayableLocation
   */
  public static GoogleMapsPlayablelocationsV3SamplePlayableLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleMapsPlayablelocationsV3SamplePlayableLocation.class);
  }

  /**
   * Convert an instance of GoogleMapsPlayablelocationsV3SamplePlayableLocation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

