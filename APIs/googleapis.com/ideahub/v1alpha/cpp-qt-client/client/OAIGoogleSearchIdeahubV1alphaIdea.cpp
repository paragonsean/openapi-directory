/**
 * Idea Hub API
 * This is an invitation-only API.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleSearchIdeahubV1alphaIdea.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleSearchIdeahubV1alphaIdea::OAIGoogleSearchIdeahubV1alphaIdea(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleSearchIdeahubV1alphaIdea::OAIGoogleSearchIdeahubV1alphaIdea() {
    this->initializeModel();
}

OAIGoogleSearchIdeahubV1alphaIdea::~OAIGoogleSearchIdeahubV1alphaIdea() {}

void OAIGoogleSearchIdeahubV1alphaIdea::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_topics_isSet = false;
    m_topics_isValid = false;
}

void OAIGoogleSearchIdeahubV1alphaIdea::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleSearchIdeahubV1alphaIdea::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_topics_isValid = ::OpenAPI::fromJsonValue(m_topics, json[QString("topics")]);
    m_topics_isSet = !json[QString("topics")].isNull() && m_topics_isValid;
}

QString OAIGoogleSearchIdeahubV1alphaIdea::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleSearchIdeahubV1alphaIdea::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_topics.size() > 0) {
        obj.insert(QString("topics"), ::OpenAPI::toJsonValue(m_topics));
    }
    return obj;
}

QString OAIGoogleSearchIdeahubV1alphaIdea::getName() const {
    return m_name;
}
void OAIGoogleSearchIdeahubV1alphaIdea::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleSearchIdeahubV1alphaIdea::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleSearchIdeahubV1alphaIdea::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleSearchIdeahubV1alphaIdea::getText() const {
    return m_text;
}
void OAIGoogleSearchIdeahubV1alphaIdea::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIGoogleSearchIdeahubV1alphaIdea::is_text_Set() const{
    return m_text_isSet;
}

bool OAIGoogleSearchIdeahubV1alphaIdea::is_text_Valid() const{
    return m_text_isValid;
}

QList<OAIGoogleSearchIdeahubV1alphaTopic> OAIGoogleSearchIdeahubV1alphaIdea::getTopics() const {
    return m_topics;
}
void OAIGoogleSearchIdeahubV1alphaIdea::setTopics(const QList<OAIGoogleSearchIdeahubV1alphaTopic> &topics) {
    m_topics = topics;
    m_topics_isSet = true;
}

bool OAIGoogleSearchIdeahubV1alphaIdea::is_topics_Set() const{
    return m_topics_isSet;
}

bool OAIGoogleSearchIdeahubV1alphaIdea::is_topics_Valid() const{
    return m_topics_isValid;
}

bool OAIGoogleSearchIdeahubV1alphaIdea::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleSearchIdeahubV1alphaIdea::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
