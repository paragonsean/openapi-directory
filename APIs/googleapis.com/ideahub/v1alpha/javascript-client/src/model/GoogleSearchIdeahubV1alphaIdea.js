/**
 * Idea Hub API
 * This is an invitation-only API.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleSearchIdeahubV1alphaTopic from './GoogleSearchIdeahubV1alphaTopic';

/**
 * The GoogleSearchIdeahubV1alphaIdea model module.
 * @module model/GoogleSearchIdeahubV1alphaIdea
 * @version v1alpha
 */
class GoogleSearchIdeahubV1alphaIdea {
    /**
     * Constructs a new <code>GoogleSearchIdeahubV1alphaIdea</code>.
     * A single Idea that we want to show the end user.
     * @alias module:model/GoogleSearchIdeahubV1alphaIdea
     */
    constructor() { 
        
        GoogleSearchIdeahubV1alphaIdea.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleSearchIdeahubV1alphaIdea</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleSearchIdeahubV1alphaIdea} obj Optional instance to populate.
     * @return {module:model/GoogleSearchIdeahubV1alphaIdea} The populated <code>GoogleSearchIdeahubV1alphaIdea</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleSearchIdeahubV1alphaIdea();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('topics')) {
                obj['topics'] = ApiClient.convertToType(data['topics'], [GoogleSearchIdeahubV1alphaTopic]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleSearchIdeahubV1alphaIdea</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleSearchIdeahubV1alphaIdea</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        if (data['topics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['topics'])) {
                throw new Error("Expected the field `topics` to be an array in the JSON data but got " + data['topics']);
            }
            // validate the optional field `topics` (array)
            for (const item of data['topics']) {
                GoogleSearchIdeahubV1alphaTopic.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Unique identifier for the idea. Format: ideas/{ideaId}
 * @member {String} name
 */
GoogleSearchIdeahubV1alphaIdea.prototype['name'] = undefined;

/**
 * The ideaâ€™s text.
 * @member {String} text
 */
GoogleSearchIdeahubV1alphaIdea.prototype['text'] = undefined;

/**
 * The Topics that match the idea.
 * @member {Array.<module:model/GoogleSearchIdeahubV1alphaTopic>} topics
 */
GoogleSearchIdeahubV1alphaIdea.prototype['topics'] = undefined;






export default GoogleSearchIdeahubV1alphaIdea;

