/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecutionReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecutionReference::OAIExecutionReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecutionReference::OAIExecutionReference() {
    this->initializeModel();
}

OAIExecutionReference::~OAIExecutionReference() {}

void OAIExecutionReference::initializeModel() {

    m_completion_timestamp_isSet = false;
    m_completion_timestamp_isValid = false;

    m_creation_timestamp_isSet = false;
    m_creation_timestamp_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIExecutionReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecutionReference::fromJsonObject(QJsonObject json) {

    m_completion_timestamp_isValid = ::OpenAPI::fromJsonValue(m_completion_timestamp, json[QString("completionTimestamp")]);
    m_completion_timestamp_isSet = !json[QString("completionTimestamp")].isNull() && m_completion_timestamp_isValid;

    m_creation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_creation_timestamp, json[QString("creationTimestamp")]);
    m_creation_timestamp_isSet = !json[QString("creationTimestamp")].isNull() && m_creation_timestamp_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIExecutionReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecutionReference::asJsonObject() const {
    QJsonObject obj;
    if (m_completion_timestamp_isSet) {
        obj.insert(QString("completionTimestamp"), ::OpenAPI::toJsonValue(m_completion_timestamp));
    }
    if (m_creation_timestamp_isSet) {
        obj.insert(QString("creationTimestamp"), ::OpenAPI::toJsonValue(m_creation_timestamp));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIExecutionReference::getCompletionTimestamp() const {
    return m_completion_timestamp;
}
void OAIExecutionReference::setCompletionTimestamp(const QString &completion_timestamp) {
    m_completion_timestamp = completion_timestamp;
    m_completion_timestamp_isSet = true;
}

bool OAIExecutionReference::is_completion_timestamp_Set() const{
    return m_completion_timestamp_isSet;
}

bool OAIExecutionReference::is_completion_timestamp_Valid() const{
    return m_completion_timestamp_isValid;
}

QString OAIExecutionReference::getCreationTimestamp() const {
    return m_creation_timestamp;
}
void OAIExecutionReference::setCreationTimestamp(const QString &creation_timestamp) {
    m_creation_timestamp = creation_timestamp;
    m_creation_timestamp_isSet = true;
}

bool OAIExecutionReference::is_creation_timestamp_Set() const{
    return m_creation_timestamp_isSet;
}

bool OAIExecutionReference::is_creation_timestamp_Valid() const{
    return m_creation_timestamp_isValid;
}

QString OAIExecutionReference::getName() const {
    return m_name;
}
void OAIExecutionReference::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExecutionReference::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExecutionReference::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIExecutionReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completion_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecutionReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
