/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatusDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatusDetails::OAIStatusDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatusDetails::OAIStatusDetails() {
    this->initializeModel();
}

OAIStatusDetails::~OAIStatusDetails() {}

void OAIStatusDetails::initializeModel() {

    m_causes_isSet = false;
    m_causes_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_retry_after_seconds_isSet = false;
    m_retry_after_seconds_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIStatusDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatusDetails::fromJsonObject(QJsonObject json) {

    m_causes_isValid = ::OpenAPI::fromJsonValue(m_causes, json[QString("causes")]);
    m_causes_isSet = !json[QString("causes")].isNull() && m_causes_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_retry_after_seconds_isValid = ::OpenAPI::fromJsonValue(m_retry_after_seconds, json[QString("retryAfterSeconds")]);
    m_retry_after_seconds_isSet = !json[QString("retryAfterSeconds")].isNull() && m_retry_after_seconds_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIStatusDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatusDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_causes.size() > 0) {
        obj.insert(QString("causes"), ::OpenAPI::toJsonValue(m_causes));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_retry_after_seconds_isSet) {
        obj.insert(QString("retryAfterSeconds"), ::OpenAPI::toJsonValue(m_retry_after_seconds));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

QList<OAIStatusCause> OAIStatusDetails::getCauses() const {
    return m_causes;
}
void OAIStatusDetails::setCauses(const QList<OAIStatusCause> &causes) {
    m_causes = causes;
    m_causes_isSet = true;
}

bool OAIStatusDetails::is_causes_Set() const{
    return m_causes_isSet;
}

bool OAIStatusDetails::is_causes_Valid() const{
    return m_causes_isValid;
}

QString OAIStatusDetails::getGroup() const {
    return m_group;
}
void OAIStatusDetails::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIStatusDetails::is_group_Set() const{
    return m_group_isSet;
}

bool OAIStatusDetails::is_group_Valid() const{
    return m_group_isValid;
}

QString OAIStatusDetails::getKind() const {
    return m_kind;
}
void OAIStatusDetails::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIStatusDetails::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIStatusDetails::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIStatusDetails::getName() const {
    return m_name;
}
void OAIStatusDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStatusDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStatusDetails::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIStatusDetails::getRetryAfterSeconds() const {
    return m_retry_after_seconds;
}
void OAIStatusDetails::setRetryAfterSeconds(const qint32 &retry_after_seconds) {
    m_retry_after_seconds = retry_after_seconds;
    m_retry_after_seconds_isSet = true;
}

bool OAIStatusDetails::is_retry_after_seconds_Set() const{
    return m_retry_after_seconds_isSet;
}

bool OAIStatusDetails::is_retry_after_seconds_Valid() const{
    return m_retry_after_seconds_isValid;
}

QString OAIStatusDetails::getUid() const {
    return m_uid;
}
void OAIStatusDetails::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIStatusDetails::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIStatusDetails::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIStatusDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_causes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_after_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatusDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
