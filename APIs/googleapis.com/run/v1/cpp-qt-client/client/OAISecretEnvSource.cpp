/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecretEnvSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecretEnvSource::OAISecretEnvSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecretEnvSource::OAISecretEnvSource() {
    this->initializeModel();
}

OAISecretEnvSource::~OAISecretEnvSource() {}

void OAISecretEnvSource::initializeModel() {

    m_local_object_reference_isSet = false;
    m_local_object_reference_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_optional_isSet = false;
    m_optional_isValid = false;
}

void OAISecretEnvSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecretEnvSource::fromJsonObject(QJsonObject json) {

    m_local_object_reference_isValid = ::OpenAPI::fromJsonValue(m_local_object_reference, json[QString("localObjectReference")]);
    m_local_object_reference_isSet = !json[QString("localObjectReference")].isNull() && m_local_object_reference_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_optional_isValid = ::OpenAPI::fromJsonValue(m_optional, json[QString("optional")]);
    m_optional_isSet = !json[QString("optional")].isNull() && m_optional_isValid;
}

QString OAISecretEnvSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecretEnvSource::asJsonObject() const {
    QJsonObject obj;
    if (m_local_object_reference.isSet()) {
        obj.insert(QString("localObjectReference"), ::OpenAPI::toJsonValue(m_local_object_reference));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_optional_isSet) {
        obj.insert(QString("optional"), ::OpenAPI::toJsonValue(m_optional));
    }
    return obj;
}

OAILocalObjectReference OAISecretEnvSource::getLocalObjectReference() const {
    return m_local_object_reference;
}
void OAISecretEnvSource::setLocalObjectReference(const OAILocalObjectReference &local_object_reference) {
    m_local_object_reference = local_object_reference;
    m_local_object_reference_isSet = true;
}

bool OAISecretEnvSource::is_local_object_reference_Set() const{
    return m_local_object_reference_isSet;
}

bool OAISecretEnvSource::is_local_object_reference_Valid() const{
    return m_local_object_reference_isValid;
}

QString OAISecretEnvSource::getName() const {
    return m_name;
}
void OAISecretEnvSource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISecretEnvSource::is_name_Set() const{
    return m_name_isSet;
}

bool OAISecretEnvSource::is_name_Valid() const{
    return m_name_isValid;
}

bool OAISecretEnvSource::isOptional() const {
    return m_optional;
}
void OAISecretEnvSource::setOptional(const bool &optional) {
    m_optional = optional;
    m_optional_isSet = true;
}

bool OAISecretEnvSource::is_optional_Set() const{
    return m_optional_isSet;
}

bool OAISecretEnvSource::is_optional_Valid() const{
    return m_optional_isValid;
}

bool OAISecretEnvSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_local_object_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optional_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecretEnvSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
