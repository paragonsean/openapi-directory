/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListMeta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListMeta::OAIListMeta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListMeta::OAIListMeta() {
    this->initializeModel();
}

OAIListMeta::~OAIListMeta() {}

void OAIListMeta::initializeModel() {

    m_r_continue_isSet = false;
    m_r_continue_isValid = false;

    m_resource_version_isSet = false;
    m_resource_version_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;
}

void OAIListMeta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListMeta::fromJsonObject(QJsonObject json) {

    m_r_continue_isValid = ::OpenAPI::fromJsonValue(m_r_continue, json[QString("continue")]);
    m_r_continue_isSet = !json[QString("continue")].isNull() && m_r_continue_isValid;

    m_resource_version_isValid = ::OpenAPI::fromJsonValue(m_resource_version, json[QString("resourceVersion")]);
    m_resource_version_isSet = !json[QString("resourceVersion")].isNull() && m_resource_version_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;
}

QString OAIListMeta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListMeta::asJsonObject() const {
    QJsonObject obj;
    if (m_r_continue_isSet) {
        obj.insert(QString("continue"), ::OpenAPI::toJsonValue(m_r_continue));
    }
    if (m_resource_version_isSet) {
        obj.insert(QString("resourceVersion"), ::OpenAPI::toJsonValue(m_resource_version));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    return obj;
}

QString OAIListMeta::getRContinue() const {
    return m_r_continue;
}
void OAIListMeta::setRContinue(const QString &r_continue) {
    m_r_continue = r_continue;
    m_r_continue_isSet = true;
}

bool OAIListMeta::is_r_continue_Set() const{
    return m_r_continue_isSet;
}

bool OAIListMeta::is_r_continue_Valid() const{
    return m_r_continue_isValid;
}

QString OAIListMeta::getResourceVersion() const {
    return m_resource_version;
}
void OAIListMeta::setResourceVersion(const QString &resource_version) {
    m_resource_version = resource_version;
    m_resource_version_isSet = true;
}

bool OAIListMeta::is_resource_version_Set() const{
    return m_resource_version_isSet;
}

bool OAIListMeta::is_resource_version_Valid() const{
    return m_resource_version_isValid;
}

QString OAIListMeta::getSelfLink() const {
    return m_self_link;
}
void OAIListMeta::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIListMeta::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIListMeta::is_self_link_Valid() const{
    return m_self_link_isValid;
}

bool OAIListMeta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_continue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListMeta::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
