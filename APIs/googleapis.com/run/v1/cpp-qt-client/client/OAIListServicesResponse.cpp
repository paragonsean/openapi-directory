/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListServicesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListServicesResponse::OAIListServicesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListServicesResponse::OAIListServicesResponse() {
    this->initializeModel();
}

OAIListServicesResponse::~OAIListServicesResponse() {}

void OAIListServicesResponse::initializeModel() {

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_unreachable_isSet = false;
    m_unreachable_isValid = false;
}

void OAIListServicesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListServicesResponse::fromJsonObject(QJsonObject json) {

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("apiVersion")]);
    m_api_version_isSet = !json[QString("apiVersion")].isNull() && m_api_version_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_unreachable_isValid = ::OpenAPI::fromJsonValue(m_unreachable, json[QString("unreachable")]);
    m_unreachable_isSet = !json[QString("unreachable")].isNull() && m_unreachable_isValid;
}

QString OAIListServicesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListServicesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_api_version_isSet) {
        obj.insert(QString("apiVersion"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_unreachable.size() > 0) {
        obj.insert(QString("unreachable"), ::OpenAPI::toJsonValue(m_unreachable));
    }
    return obj;
}

QString OAIListServicesResponse::getApiVersion() const {
    return m_api_version;
}
void OAIListServicesResponse::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIListServicesResponse::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIListServicesResponse::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QList<OAIService> OAIListServicesResponse::getItems() const {
    return m_items;
}
void OAIListServicesResponse::setItems(const QList<OAIService> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIListServicesResponse::is_items_Set() const{
    return m_items_isSet;
}

bool OAIListServicesResponse::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIListServicesResponse::getKind() const {
    return m_kind;
}
void OAIListServicesResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIListServicesResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIListServicesResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIListMeta OAIListServicesResponse::getMetadata() const {
    return m_metadata;
}
void OAIListServicesResponse::setMetadata(const OAIListMeta &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIListServicesResponse::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIListServicesResponse::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<QString> OAIListServicesResponse::getUnreachable() const {
    return m_unreachable;
}
void OAIListServicesResponse::setUnreachable(const QList<QString> &unreachable) {
    m_unreachable = unreachable;
    m_unreachable_isSet = true;
}

bool OAIListServicesResponse::is_unreachable_Set() const{
    return m_unreachable_isSet;
}

bool OAIListServicesResponse::is_unreachable_Valid() const{
    return m_unreachable_isValid;
}

bool OAIListServicesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unreachable.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListServicesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
