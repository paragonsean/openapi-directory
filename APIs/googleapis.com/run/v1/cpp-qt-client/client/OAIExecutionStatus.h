/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExecutionStatus.h
 *
 * ExecutionStatus represents the current state of an Execution.
 */

#ifndef OAIExecutionStatus_H
#define OAIExecutionStatus_H

#include <QJsonObject>

#include "OAIGoogleCloudRunV1Condition.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleCloudRunV1Condition;

class OAIExecutionStatus : public OAIObject {
public:
    OAIExecutionStatus();
    OAIExecutionStatus(QString json);
    ~OAIExecutionStatus() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCancelledCount() const;
    void setCancelledCount(const qint32 &cancelled_count);
    bool is_cancelled_count_Set() const;
    bool is_cancelled_count_Valid() const;

    QString getCompletionTime() const;
    void setCompletionTime(const QString &completion_time);
    bool is_completion_time_Set() const;
    bool is_completion_time_Valid() const;

    QList<OAIGoogleCloudRunV1Condition> getConditions() const;
    void setConditions(const QList<OAIGoogleCloudRunV1Condition> &conditions);
    bool is_conditions_Set() const;
    bool is_conditions_Valid() const;

    qint32 getFailedCount() const;
    void setFailedCount(const qint32 &failed_count);
    bool is_failed_count_Set() const;
    bool is_failed_count_Valid() const;

    QString getLogUri() const;
    void setLogUri(const QString &log_uri);
    bool is_log_uri_Set() const;
    bool is_log_uri_Valid() const;

    qint32 getObservedGeneration() const;
    void setObservedGeneration(const qint32 &observed_generation);
    bool is_observed_generation_Set() const;
    bool is_observed_generation_Valid() const;

    qint32 getRetriedCount() const;
    void setRetriedCount(const qint32 &retried_count);
    bool is_retried_count_Set() const;
    bool is_retried_count_Valid() const;

    qint32 getRunningCount() const;
    void setRunningCount(const qint32 &running_count);
    bool is_running_count_Set() const;
    bool is_running_count_Valid() const;

    QString getStartTime() const;
    void setStartTime(const QString &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    qint32 getSucceededCount() const;
    void setSucceededCount(const qint32 &succeeded_count);
    bool is_succeeded_count_Set() const;
    bool is_succeeded_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_cancelled_count;
    bool m_cancelled_count_isSet;
    bool m_cancelled_count_isValid;

    QString m_completion_time;
    bool m_completion_time_isSet;
    bool m_completion_time_isValid;

    QList<OAIGoogleCloudRunV1Condition> m_conditions;
    bool m_conditions_isSet;
    bool m_conditions_isValid;

    qint32 m_failed_count;
    bool m_failed_count_isSet;
    bool m_failed_count_isValid;

    QString m_log_uri;
    bool m_log_uri_isSet;
    bool m_log_uri_isValid;

    qint32 m_observed_generation;
    bool m_observed_generation_isSet;
    bool m_observed_generation_isValid;

    qint32 m_retried_count;
    bool m_retried_count_isSet;
    bool m_retried_count_isValid;

    qint32 m_running_count;
    bool m_running_count_isSet;
    bool m_running_count_isValid;

    QString m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    qint32 m_succeeded_count;
    bool m_succeeded_count_isSet;
    bool m_succeeded_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExecutionStatus)

#endif // OAIExecutionStatus_H
