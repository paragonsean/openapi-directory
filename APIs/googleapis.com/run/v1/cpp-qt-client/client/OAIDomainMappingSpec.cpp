/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainMappingSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainMappingSpec::OAIDomainMappingSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainMappingSpec::OAIDomainMappingSpec() {
    this->initializeModel();
}

OAIDomainMappingSpec::~OAIDomainMappingSpec() {}

void OAIDomainMappingSpec::initializeModel() {

    m_certificate_mode_isSet = false;
    m_certificate_mode_isValid = false;

    m_force_override_isSet = false;
    m_force_override_isValid = false;

    m_route_name_isSet = false;
    m_route_name_isValid = false;
}

void OAIDomainMappingSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainMappingSpec::fromJsonObject(QJsonObject json) {

    m_certificate_mode_isValid = ::OpenAPI::fromJsonValue(m_certificate_mode, json[QString("certificateMode")]);
    m_certificate_mode_isSet = !json[QString("certificateMode")].isNull() && m_certificate_mode_isValid;

    m_force_override_isValid = ::OpenAPI::fromJsonValue(m_force_override, json[QString("forceOverride")]);
    m_force_override_isSet = !json[QString("forceOverride")].isNull() && m_force_override_isValid;

    m_route_name_isValid = ::OpenAPI::fromJsonValue(m_route_name, json[QString("routeName")]);
    m_route_name_isSet = !json[QString("routeName")].isNull() && m_route_name_isValid;
}

QString OAIDomainMappingSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainMappingSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_mode_isSet) {
        obj.insert(QString("certificateMode"), ::OpenAPI::toJsonValue(m_certificate_mode));
    }
    if (m_force_override_isSet) {
        obj.insert(QString("forceOverride"), ::OpenAPI::toJsonValue(m_force_override));
    }
    if (m_route_name_isSet) {
        obj.insert(QString("routeName"), ::OpenAPI::toJsonValue(m_route_name));
    }
    return obj;
}

QString OAIDomainMappingSpec::getCertificateMode() const {
    return m_certificate_mode;
}
void OAIDomainMappingSpec::setCertificateMode(const QString &certificate_mode) {
    m_certificate_mode = certificate_mode;
    m_certificate_mode_isSet = true;
}

bool OAIDomainMappingSpec::is_certificate_mode_Set() const{
    return m_certificate_mode_isSet;
}

bool OAIDomainMappingSpec::is_certificate_mode_Valid() const{
    return m_certificate_mode_isValid;
}

bool OAIDomainMappingSpec::isForceOverride() const {
    return m_force_override;
}
void OAIDomainMappingSpec::setForceOverride(const bool &force_override) {
    m_force_override = force_override;
    m_force_override_isSet = true;
}

bool OAIDomainMappingSpec::is_force_override_Set() const{
    return m_force_override_isSet;
}

bool OAIDomainMappingSpec::is_force_override_Valid() const{
    return m_force_override_isValid;
}

QString OAIDomainMappingSpec::getRouteName() const {
    return m_route_name;
}
void OAIDomainMappingSpec::setRouteName(const QString &route_name) {
    m_route_name = route_name;
    m_route_name_isSet = true;
}

bool OAIDomainMappingSpec::is_route_name_Set() const{
    return m_route_name_isSet;
}

bool OAIDomainMappingSpec::is_route_name_Valid() const{
    return m_route_name_isValid;
}

bool OAIDomainMappingSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainMappingSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
