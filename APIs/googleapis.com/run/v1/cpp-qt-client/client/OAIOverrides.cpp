/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOverrides.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOverrides::OAIOverrides(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOverrides::OAIOverrides() {
    this->initializeModel();
}

OAIOverrides::~OAIOverrides() {}

void OAIOverrides::initializeModel() {

    m_container_overrides_isSet = false;
    m_container_overrides_isValid = false;

    m_task_count_isSet = false;
    m_task_count_isValid = false;

    m_timeout_seconds_isSet = false;
    m_timeout_seconds_isValid = false;
}

void OAIOverrides::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOverrides::fromJsonObject(QJsonObject json) {

    m_container_overrides_isValid = ::OpenAPI::fromJsonValue(m_container_overrides, json[QString("containerOverrides")]);
    m_container_overrides_isSet = !json[QString("containerOverrides")].isNull() && m_container_overrides_isValid;

    m_task_count_isValid = ::OpenAPI::fromJsonValue(m_task_count, json[QString("taskCount")]);
    m_task_count_isSet = !json[QString("taskCount")].isNull() && m_task_count_isValid;

    m_timeout_seconds_isValid = ::OpenAPI::fromJsonValue(m_timeout_seconds, json[QString("timeoutSeconds")]);
    m_timeout_seconds_isSet = !json[QString("timeoutSeconds")].isNull() && m_timeout_seconds_isValid;
}

QString OAIOverrides::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOverrides::asJsonObject() const {
    QJsonObject obj;
    if (m_container_overrides.size() > 0) {
        obj.insert(QString("containerOverrides"), ::OpenAPI::toJsonValue(m_container_overrides));
    }
    if (m_task_count_isSet) {
        obj.insert(QString("taskCount"), ::OpenAPI::toJsonValue(m_task_count));
    }
    if (m_timeout_seconds_isSet) {
        obj.insert(QString("timeoutSeconds"), ::OpenAPI::toJsonValue(m_timeout_seconds));
    }
    return obj;
}

QList<OAIContainerOverride> OAIOverrides::getContainerOverrides() const {
    return m_container_overrides;
}
void OAIOverrides::setContainerOverrides(const QList<OAIContainerOverride> &container_overrides) {
    m_container_overrides = container_overrides;
    m_container_overrides_isSet = true;
}

bool OAIOverrides::is_container_overrides_Set() const{
    return m_container_overrides_isSet;
}

bool OAIOverrides::is_container_overrides_Valid() const{
    return m_container_overrides_isValid;
}

qint32 OAIOverrides::getTaskCount() const {
    return m_task_count;
}
void OAIOverrides::setTaskCount(const qint32 &task_count) {
    m_task_count = task_count;
    m_task_count_isSet = true;
}

bool OAIOverrides::is_task_count_Set() const{
    return m_task_count_isSet;
}

bool OAIOverrides::is_task_count_Valid() const{
    return m_task_count_isValid;
}

qint32 OAIOverrides::getTimeoutSeconds() const {
    return m_timeout_seconds;
}
void OAIOverrides::setTimeoutSeconds(const qint32 &timeout_seconds) {
    m_timeout_seconds = timeout_seconds;
    m_timeout_seconds_isSet = true;
}

bool OAIOverrides::is_timeout_seconds_Set() const{
    return m_timeout_seconds_isSet;
}

bool OAIOverrides::is_timeout_seconds_Valid() const{
    return m_timeout_seconds_isValid;
}

bool OAIOverrides::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOverrides::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
