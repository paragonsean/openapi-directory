/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRevisionStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRevisionStatus::OAIRevisionStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRevisionStatus::OAIRevisionStatus() {
    this->initializeModel();
}

OAIRevisionStatus::~OAIRevisionStatus() {}

void OAIRevisionStatus::initializeModel() {

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_desired_replicas_isSet = false;
    m_desired_replicas_isValid = false;

    m_image_digest_isSet = false;
    m_image_digest_isValid = false;

    m_log_url_isSet = false;
    m_log_url_isValid = false;

    m_observed_generation_isSet = false;
    m_observed_generation_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;
}

void OAIRevisionStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRevisionStatus::fromJsonObject(QJsonObject json) {

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_desired_replicas_isValid = ::OpenAPI::fromJsonValue(m_desired_replicas, json[QString("desiredReplicas")]);
    m_desired_replicas_isSet = !json[QString("desiredReplicas")].isNull() && m_desired_replicas_isValid;

    m_image_digest_isValid = ::OpenAPI::fromJsonValue(m_image_digest, json[QString("imageDigest")]);
    m_image_digest_isSet = !json[QString("imageDigest")].isNull() && m_image_digest_isValid;

    m_log_url_isValid = ::OpenAPI::fromJsonValue(m_log_url, json[QString("logUrl")]);
    m_log_url_isSet = !json[QString("logUrl")].isNull() && m_log_url_isValid;

    m_observed_generation_isValid = ::OpenAPI::fromJsonValue(m_observed_generation, json[QString("observedGeneration")]);
    m_observed_generation_isSet = !json[QString("observedGeneration")].isNull() && m_observed_generation_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;
}

QString OAIRevisionStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRevisionStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_desired_replicas_isSet) {
        obj.insert(QString("desiredReplicas"), ::OpenAPI::toJsonValue(m_desired_replicas));
    }
    if (m_image_digest_isSet) {
        obj.insert(QString("imageDigest"), ::OpenAPI::toJsonValue(m_image_digest));
    }
    if (m_log_url_isSet) {
        obj.insert(QString("logUrl"), ::OpenAPI::toJsonValue(m_log_url));
    }
    if (m_observed_generation_isSet) {
        obj.insert(QString("observedGeneration"), ::OpenAPI::toJsonValue(m_observed_generation));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    return obj;
}

QList<OAIGoogleCloudRunV1Condition> OAIRevisionStatus::getConditions() const {
    return m_conditions;
}
void OAIRevisionStatus::setConditions(const QList<OAIGoogleCloudRunV1Condition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIRevisionStatus::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIRevisionStatus::is_conditions_Valid() const{
    return m_conditions_isValid;
}

qint32 OAIRevisionStatus::getDesiredReplicas() const {
    return m_desired_replicas;
}
void OAIRevisionStatus::setDesiredReplicas(const qint32 &desired_replicas) {
    m_desired_replicas = desired_replicas;
    m_desired_replicas_isSet = true;
}

bool OAIRevisionStatus::is_desired_replicas_Set() const{
    return m_desired_replicas_isSet;
}

bool OAIRevisionStatus::is_desired_replicas_Valid() const{
    return m_desired_replicas_isValid;
}

QString OAIRevisionStatus::getImageDigest() const {
    return m_image_digest;
}
void OAIRevisionStatus::setImageDigest(const QString &image_digest) {
    m_image_digest = image_digest;
    m_image_digest_isSet = true;
}

bool OAIRevisionStatus::is_image_digest_Set() const{
    return m_image_digest_isSet;
}

bool OAIRevisionStatus::is_image_digest_Valid() const{
    return m_image_digest_isValid;
}

QString OAIRevisionStatus::getLogUrl() const {
    return m_log_url;
}
void OAIRevisionStatus::setLogUrl(const QString &log_url) {
    m_log_url = log_url;
    m_log_url_isSet = true;
}

bool OAIRevisionStatus::is_log_url_Set() const{
    return m_log_url_isSet;
}

bool OAIRevisionStatus::is_log_url_Valid() const{
    return m_log_url_isValid;
}

qint32 OAIRevisionStatus::getObservedGeneration() const {
    return m_observed_generation;
}
void OAIRevisionStatus::setObservedGeneration(const qint32 &observed_generation) {
    m_observed_generation = observed_generation;
    m_observed_generation_isSet = true;
}

bool OAIRevisionStatus::is_observed_generation_Set() const{
    return m_observed_generation_isSet;
}

bool OAIRevisionStatus::is_observed_generation_Valid() const{
    return m_observed_generation_isValid;
}

QString OAIRevisionStatus::getServiceName() const {
    return m_service_name;
}
void OAIRevisionStatus::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIRevisionStatus::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIRevisionStatus::is_service_name_Valid() const{
    return m_service_name_isValid;
}

bool OAIRevisionStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_replicas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observed_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRevisionStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
