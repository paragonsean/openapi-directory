/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestIamPermissionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestIamPermissionsRequest::OAITestIamPermissionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestIamPermissionsRequest::OAITestIamPermissionsRequest() {
    this->initializeModel();
}

OAITestIamPermissionsRequest::~OAITestIamPermissionsRequest() {}

void OAITestIamPermissionsRequest::initializeModel() {

    m_permissions_isSet = false;
    m_permissions_isValid = false;
}

void OAITestIamPermissionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestIamPermissionsRequest::fromJsonObject(QJsonObject json) {

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;
}

QString OAITestIamPermissionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestIamPermissionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    return obj;
}

QList<QString> OAITestIamPermissionsRequest::getPermissions() const {
    return m_permissions;
}
void OAITestIamPermissionsRequest::setPermissions(const QList<QString> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAITestIamPermissionsRequest::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAITestIamPermissionsRequest::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool OAITestIamPermissionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestIamPermissionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
