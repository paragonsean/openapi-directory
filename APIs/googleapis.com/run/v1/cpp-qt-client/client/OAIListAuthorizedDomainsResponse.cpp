/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAuthorizedDomainsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAuthorizedDomainsResponse::OAIListAuthorizedDomainsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAuthorizedDomainsResponse::OAIListAuthorizedDomainsResponse() {
    this->initializeModel();
}

OAIListAuthorizedDomainsResponse::~OAIListAuthorizedDomainsResponse() {}

void OAIListAuthorizedDomainsResponse::initializeModel() {

    m_domains_isSet = false;
    m_domains_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIListAuthorizedDomainsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAuthorizedDomainsResponse::fromJsonObject(QJsonObject json) {

    m_domains_isValid = ::OpenAPI::fromJsonValue(m_domains, json[QString("domains")]);
    m_domains_isSet = !json[QString("domains")].isNull() && m_domains_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIListAuthorizedDomainsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAuthorizedDomainsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_domains.size() > 0) {
        obj.insert(QString("domains"), ::OpenAPI::toJsonValue(m_domains));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIAuthorizedDomain> OAIListAuthorizedDomainsResponse::getDomains() const {
    return m_domains;
}
void OAIListAuthorizedDomainsResponse::setDomains(const QList<OAIAuthorizedDomain> &domains) {
    m_domains = domains;
    m_domains_isSet = true;
}

bool OAIListAuthorizedDomainsResponse::is_domains_Set() const{
    return m_domains_isSet;
}

bool OAIListAuthorizedDomainsResponse::is_domains_Valid() const{
    return m_domains_isValid;
}

QString OAIListAuthorizedDomainsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListAuthorizedDomainsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListAuthorizedDomainsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListAuthorizedDomainsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIListAuthorizedDomainsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAuthorizedDomainsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
