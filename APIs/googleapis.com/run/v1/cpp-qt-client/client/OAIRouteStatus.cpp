/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRouteStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRouteStatus::OAIRouteStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRouteStatus::OAIRouteStatus() {
    this->initializeModel();
}

OAIRouteStatus::~OAIRouteStatus() {}

void OAIRouteStatus::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_observed_generation_isSet = false;
    m_observed_generation_isValid = false;

    m_traffic_isSet = false;
    m_traffic_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIRouteStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRouteStatus::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_observed_generation_isValid = ::OpenAPI::fromJsonValue(m_observed_generation, json[QString("observedGeneration")]);
    m_observed_generation_isSet = !json[QString("observedGeneration")].isNull() && m_observed_generation_isValid;

    m_traffic_isValid = ::OpenAPI::fromJsonValue(m_traffic, json[QString("traffic")]);
    m_traffic_isSet = !json[QString("traffic")].isNull() && m_traffic_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIRouteStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRouteStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_observed_generation_isSet) {
        obj.insert(QString("observedGeneration"), ::OpenAPI::toJsonValue(m_observed_generation));
    }
    if (m_traffic.size() > 0) {
        obj.insert(QString("traffic"), ::OpenAPI::toJsonValue(m_traffic));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIAddressable OAIRouteStatus::getAddress() const {
    return m_address;
}
void OAIRouteStatus::setAddress(const OAIAddressable &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIRouteStatus::is_address_Set() const{
    return m_address_isSet;
}

bool OAIRouteStatus::is_address_Valid() const{
    return m_address_isValid;
}

QList<OAIGoogleCloudRunV1Condition> OAIRouteStatus::getConditions() const {
    return m_conditions;
}
void OAIRouteStatus::setConditions(const QList<OAIGoogleCloudRunV1Condition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIRouteStatus::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIRouteStatus::is_conditions_Valid() const{
    return m_conditions_isValid;
}

qint32 OAIRouteStatus::getObservedGeneration() const {
    return m_observed_generation;
}
void OAIRouteStatus::setObservedGeneration(const qint32 &observed_generation) {
    m_observed_generation = observed_generation;
    m_observed_generation_isSet = true;
}

bool OAIRouteStatus::is_observed_generation_Set() const{
    return m_observed_generation_isSet;
}

bool OAIRouteStatus::is_observed_generation_Valid() const{
    return m_observed_generation_isValid;
}

QList<OAITrafficTarget> OAIRouteStatus::getTraffic() const {
    return m_traffic;
}
void OAIRouteStatus::setTraffic(const QList<OAITrafficTarget> &traffic) {
    m_traffic = traffic;
    m_traffic_isSet = true;
}

bool OAIRouteStatus::is_traffic_Set() const{
    return m_traffic_isSet;
}

bool OAIRouteStatus::is_traffic_Valid() const{
    return m_traffic_isValid;
}

QString OAIRouteStatus::getUrl() const {
    return m_url;
}
void OAIRouteStatus::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIRouteStatus::is_url_Set() const{
    return m_url_isSet;
}

bool OAIRouteStatus::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIRouteStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_observed_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRouteStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
