/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecutionStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecutionStatus::OAIExecutionStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecutionStatus::OAIExecutionStatus() {
    this->initializeModel();
}

OAIExecutionStatus::~OAIExecutionStatus() {}

void OAIExecutionStatus::initializeModel() {

    m_cancelled_count_isSet = false;
    m_cancelled_count_isValid = false;

    m_completion_time_isSet = false;
    m_completion_time_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_failed_count_isSet = false;
    m_failed_count_isValid = false;

    m_log_uri_isSet = false;
    m_log_uri_isValid = false;

    m_observed_generation_isSet = false;
    m_observed_generation_isValid = false;

    m_retried_count_isSet = false;
    m_retried_count_isValid = false;

    m_running_count_isSet = false;
    m_running_count_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_succeeded_count_isSet = false;
    m_succeeded_count_isValid = false;
}

void OAIExecutionStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecutionStatus::fromJsonObject(QJsonObject json) {

    m_cancelled_count_isValid = ::OpenAPI::fromJsonValue(m_cancelled_count, json[QString("cancelledCount")]);
    m_cancelled_count_isSet = !json[QString("cancelledCount")].isNull() && m_cancelled_count_isValid;

    m_completion_time_isValid = ::OpenAPI::fromJsonValue(m_completion_time, json[QString("completionTime")]);
    m_completion_time_isSet = !json[QString("completionTime")].isNull() && m_completion_time_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_failed_count_isValid = ::OpenAPI::fromJsonValue(m_failed_count, json[QString("failedCount")]);
    m_failed_count_isSet = !json[QString("failedCount")].isNull() && m_failed_count_isValid;

    m_log_uri_isValid = ::OpenAPI::fromJsonValue(m_log_uri, json[QString("logUri")]);
    m_log_uri_isSet = !json[QString("logUri")].isNull() && m_log_uri_isValid;

    m_observed_generation_isValid = ::OpenAPI::fromJsonValue(m_observed_generation, json[QString("observedGeneration")]);
    m_observed_generation_isSet = !json[QString("observedGeneration")].isNull() && m_observed_generation_isValid;

    m_retried_count_isValid = ::OpenAPI::fromJsonValue(m_retried_count, json[QString("retriedCount")]);
    m_retried_count_isSet = !json[QString("retriedCount")].isNull() && m_retried_count_isValid;

    m_running_count_isValid = ::OpenAPI::fromJsonValue(m_running_count, json[QString("runningCount")]);
    m_running_count_isSet = !json[QString("runningCount")].isNull() && m_running_count_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_succeeded_count_isValid = ::OpenAPI::fromJsonValue(m_succeeded_count, json[QString("succeededCount")]);
    m_succeeded_count_isSet = !json[QString("succeededCount")].isNull() && m_succeeded_count_isValid;
}

QString OAIExecutionStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecutionStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_cancelled_count_isSet) {
        obj.insert(QString("cancelledCount"), ::OpenAPI::toJsonValue(m_cancelled_count));
    }
    if (m_completion_time_isSet) {
        obj.insert(QString("completionTime"), ::OpenAPI::toJsonValue(m_completion_time));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_failed_count_isSet) {
        obj.insert(QString("failedCount"), ::OpenAPI::toJsonValue(m_failed_count));
    }
    if (m_log_uri_isSet) {
        obj.insert(QString("logUri"), ::OpenAPI::toJsonValue(m_log_uri));
    }
    if (m_observed_generation_isSet) {
        obj.insert(QString("observedGeneration"), ::OpenAPI::toJsonValue(m_observed_generation));
    }
    if (m_retried_count_isSet) {
        obj.insert(QString("retriedCount"), ::OpenAPI::toJsonValue(m_retried_count));
    }
    if (m_running_count_isSet) {
        obj.insert(QString("runningCount"), ::OpenAPI::toJsonValue(m_running_count));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_succeeded_count_isSet) {
        obj.insert(QString("succeededCount"), ::OpenAPI::toJsonValue(m_succeeded_count));
    }
    return obj;
}

qint32 OAIExecutionStatus::getCancelledCount() const {
    return m_cancelled_count;
}
void OAIExecutionStatus::setCancelledCount(const qint32 &cancelled_count) {
    m_cancelled_count = cancelled_count;
    m_cancelled_count_isSet = true;
}

bool OAIExecutionStatus::is_cancelled_count_Set() const{
    return m_cancelled_count_isSet;
}

bool OAIExecutionStatus::is_cancelled_count_Valid() const{
    return m_cancelled_count_isValid;
}

QString OAIExecutionStatus::getCompletionTime() const {
    return m_completion_time;
}
void OAIExecutionStatus::setCompletionTime(const QString &completion_time) {
    m_completion_time = completion_time;
    m_completion_time_isSet = true;
}

bool OAIExecutionStatus::is_completion_time_Set() const{
    return m_completion_time_isSet;
}

bool OAIExecutionStatus::is_completion_time_Valid() const{
    return m_completion_time_isValid;
}

QList<OAIGoogleCloudRunV1Condition> OAIExecutionStatus::getConditions() const {
    return m_conditions;
}
void OAIExecutionStatus::setConditions(const QList<OAIGoogleCloudRunV1Condition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIExecutionStatus::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIExecutionStatus::is_conditions_Valid() const{
    return m_conditions_isValid;
}

qint32 OAIExecutionStatus::getFailedCount() const {
    return m_failed_count;
}
void OAIExecutionStatus::setFailedCount(const qint32 &failed_count) {
    m_failed_count = failed_count;
    m_failed_count_isSet = true;
}

bool OAIExecutionStatus::is_failed_count_Set() const{
    return m_failed_count_isSet;
}

bool OAIExecutionStatus::is_failed_count_Valid() const{
    return m_failed_count_isValid;
}

QString OAIExecutionStatus::getLogUri() const {
    return m_log_uri;
}
void OAIExecutionStatus::setLogUri(const QString &log_uri) {
    m_log_uri = log_uri;
    m_log_uri_isSet = true;
}

bool OAIExecutionStatus::is_log_uri_Set() const{
    return m_log_uri_isSet;
}

bool OAIExecutionStatus::is_log_uri_Valid() const{
    return m_log_uri_isValid;
}

qint32 OAIExecutionStatus::getObservedGeneration() const {
    return m_observed_generation;
}
void OAIExecutionStatus::setObservedGeneration(const qint32 &observed_generation) {
    m_observed_generation = observed_generation;
    m_observed_generation_isSet = true;
}

bool OAIExecutionStatus::is_observed_generation_Set() const{
    return m_observed_generation_isSet;
}

bool OAIExecutionStatus::is_observed_generation_Valid() const{
    return m_observed_generation_isValid;
}

qint32 OAIExecutionStatus::getRetriedCount() const {
    return m_retried_count;
}
void OAIExecutionStatus::setRetriedCount(const qint32 &retried_count) {
    m_retried_count = retried_count;
    m_retried_count_isSet = true;
}

bool OAIExecutionStatus::is_retried_count_Set() const{
    return m_retried_count_isSet;
}

bool OAIExecutionStatus::is_retried_count_Valid() const{
    return m_retried_count_isValid;
}

qint32 OAIExecutionStatus::getRunningCount() const {
    return m_running_count;
}
void OAIExecutionStatus::setRunningCount(const qint32 &running_count) {
    m_running_count = running_count;
    m_running_count_isSet = true;
}

bool OAIExecutionStatus::is_running_count_Set() const{
    return m_running_count_isSet;
}

bool OAIExecutionStatus::is_running_count_Valid() const{
    return m_running_count_isValid;
}

QString OAIExecutionStatus::getStartTime() const {
    return m_start_time;
}
void OAIExecutionStatus::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIExecutionStatus::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIExecutionStatus::is_start_time_Valid() const{
    return m_start_time_isValid;
}

qint32 OAIExecutionStatus::getSucceededCount() const {
    return m_succeeded_count;
}
void OAIExecutionStatus::setSucceededCount(const qint32 &succeeded_count) {
    m_succeeded_count = succeeded_count;
    m_succeeded_count_isSet = true;
}

bool OAIExecutionStatus::is_succeeded_count_Set() const{
    return m_succeeded_count_isSet;
}

bool OAIExecutionStatus::is_succeeded_count_Valid() const{
    return m_succeeded_count_isValid;
}

bool OAIExecutionStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancelled_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observed_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retried_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_succeeded_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecutionStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
