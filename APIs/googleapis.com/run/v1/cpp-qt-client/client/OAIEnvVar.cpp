/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvVar.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvVar::OAIEnvVar(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvVar::OAIEnvVar() {
    this->initializeModel();
}

OAIEnvVar::~OAIEnvVar() {}

void OAIEnvVar::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_value_from_isSet = false;
    m_value_from_isValid = false;
}

void OAIEnvVar::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvVar::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_value_from_isValid = ::OpenAPI::fromJsonValue(m_value_from, json[QString("valueFrom")]);
    m_value_from_isSet = !json[QString("valueFrom")].isNull() && m_value_from_isValid;
}

QString OAIEnvVar::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvVar::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_value_from.isSet()) {
        obj.insert(QString("valueFrom"), ::OpenAPI::toJsonValue(m_value_from));
    }
    return obj;
}

QString OAIEnvVar::getName() const {
    return m_name;
}
void OAIEnvVar::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEnvVar::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEnvVar::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEnvVar::getValue() const {
    return m_value;
}
void OAIEnvVar::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIEnvVar::is_value_Set() const{
    return m_value_isSet;
}

bool OAIEnvVar::is_value_Valid() const{
    return m_value_isValid;
}

OAIEnvVarSource OAIEnvVar::getValueFrom() const {
    return m_value_from;
}
void OAIEnvVar::setValueFrom(const OAIEnvVarSource &value_from) {
    m_value_from = value_from;
    m_value_from_isSet = true;
}

bool OAIEnvVar::is_value_from_Set() const{
    return m_value_from_isSet;
}

bool OAIEnvVar::is_value_from_Valid() const{
    return m_value_from_isValid;
}

bool OAIEnvVar::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_from.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvVar::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
