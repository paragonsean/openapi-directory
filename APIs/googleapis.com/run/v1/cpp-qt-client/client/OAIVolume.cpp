/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolume.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolume::OAIVolume(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolume::OAIVolume() {
    this->initializeModel();
}

OAIVolume::~OAIVolume() {}

void OAIVolume::initializeModel() {

    m_config_map_isSet = false;
    m_config_map_isValid = false;

    m_csi_isSet = false;
    m_csi_isValid = false;

    m_empty_dir_isSet = false;
    m_empty_dir_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nfs_isSet = false;
    m_nfs_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;
}

void OAIVolume::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolume::fromJsonObject(QJsonObject json) {

    m_config_map_isValid = ::OpenAPI::fromJsonValue(m_config_map, json[QString("configMap")]);
    m_config_map_isSet = !json[QString("configMap")].isNull() && m_config_map_isValid;

    m_csi_isValid = ::OpenAPI::fromJsonValue(m_csi, json[QString("csi")]);
    m_csi_isSet = !json[QString("csi")].isNull() && m_csi_isValid;

    m_empty_dir_isValid = ::OpenAPI::fromJsonValue(m_empty_dir, json[QString("emptyDir")]);
    m_empty_dir_isSet = !json[QString("emptyDir")].isNull() && m_empty_dir_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nfs_isValid = ::OpenAPI::fromJsonValue(m_nfs, json[QString("nfs")]);
    m_nfs_isSet = !json[QString("nfs")].isNull() && m_nfs_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;
}

QString OAIVolume::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolume::asJsonObject() const {
    QJsonObject obj;
    if (m_config_map.isSet()) {
        obj.insert(QString("configMap"), ::OpenAPI::toJsonValue(m_config_map));
    }
    if (m_csi.isSet()) {
        obj.insert(QString("csi"), ::OpenAPI::toJsonValue(m_csi));
    }
    if (m_empty_dir.isSet()) {
        obj.insert(QString("emptyDir"), ::OpenAPI::toJsonValue(m_empty_dir));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nfs.isSet()) {
        obj.insert(QString("nfs"), ::OpenAPI::toJsonValue(m_nfs));
    }
    if (m_secret.isSet()) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    return obj;
}

OAIConfigMapVolumeSource OAIVolume::getConfigMap() const {
    return m_config_map;
}
void OAIVolume::setConfigMap(const OAIConfigMapVolumeSource &config_map) {
    m_config_map = config_map;
    m_config_map_isSet = true;
}

bool OAIVolume::is_config_map_Set() const{
    return m_config_map_isSet;
}

bool OAIVolume::is_config_map_Valid() const{
    return m_config_map_isValid;
}

OAICSIVolumeSource OAIVolume::getCsi() const {
    return m_csi;
}
void OAIVolume::setCsi(const OAICSIVolumeSource &csi) {
    m_csi = csi;
    m_csi_isSet = true;
}

bool OAIVolume::is_csi_Set() const{
    return m_csi_isSet;
}

bool OAIVolume::is_csi_Valid() const{
    return m_csi_isValid;
}

OAIEmptyDirVolumeSource OAIVolume::getEmptyDir() const {
    return m_empty_dir;
}
void OAIVolume::setEmptyDir(const OAIEmptyDirVolumeSource &empty_dir) {
    m_empty_dir = empty_dir;
    m_empty_dir_isSet = true;
}

bool OAIVolume::is_empty_dir_Set() const{
    return m_empty_dir_isSet;
}

bool OAIVolume::is_empty_dir_Valid() const{
    return m_empty_dir_isValid;
}

QString OAIVolume::getName() const {
    return m_name;
}
void OAIVolume::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVolume::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVolume::is_name_Valid() const{
    return m_name_isValid;
}

OAINFSVolumeSource OAIVolume::getNfs() const {
    return m_nfs;
}
void OAIVolume::setNfs(const OAINFSVolumeSource &nfs) {
    m_nfs = nfs;
    m_nfs_isSet = true;
}

bool OAIVolume::is_nfs_Set() const{
    return m_nfs_isSet;
}

bool OAIVolume::is_nfs_Valid() const{
    return m_nfs_isValid;
}

OAISecretVolumeSource OAIVolume::getSecret() const {
    return m_secret;
}
void OAIVolume::setSecret(const OAISecretVolumeSource &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIVolume::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIVolume::is_secret_Valid() const{
    return m_secret_isValid;
}

bool OAIVolume::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_map.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_csi.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_empty_dir.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolume::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
