/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListExecutionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListExecutionsResponse::OAIListExecutionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListExecutionsResponse::OAIListExecutionsResponse() {
    this->initializeModel();
}

OAIListExecutionsResponse::~OAIListExecutionsResponse() {}

void OAIListExecutionsResponse::initializeModel() {

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_unreachable_isSet = false;
    m_unreachable_isValid = false;
}

void OAIListExecutionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListExecutionsResponse::fromJsonObject(QJsonObject json) {

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("apiVersion")]);
    m_api_version_isSet = !json[QString("apiVersion")].isNull() && m_api_version_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_unreachable_isValid = ::OpenAPI::fromJsonValue(m_unreachable, json[QString("unreachable")]);
    m_unreachable_isSet = !json[QString("unreachable")].isNull() && m_unreachable_isValid;
}

QString OAIListExecutionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListExecutionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_api_version_isSet) {
        obj.insert(QString("apiVersion"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_unreachable.size() > 0) {
        obj.insert(QString("unreachable"), ::OpenAPI::toJsonValue(m_unreachable));
    }
    return obj;
}

QString OAIListExecutionsResponse::getApiVersion() const {
    return m_api_version;
}
void OAIListExecutionsResponse::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIListExecutionsResponse::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIListExecutionsResponse::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QList<OAIExecution> OAIListExecutionsResponse::getItems() const {
    return m_items;
}
void OAIListExecutionsResponse::setItems(const QList<OAIExecution> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIListExecutionsResponse::is_items_Set() const{
    return m_items_isSet;
}

bool OAIListExecutionsResponse::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIListExecutionsResponse::getKind() const {
    return m_kind;
}
void OAIListExecutionsResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIListExecutionsResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIListExecutionsResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIListMeta OAIListExecutionsResponse::getMetadata() const {
    return m_metadata;
}
void OAIListExecutionsResponse::setMetadata(const OAIListMeta &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIListExecutionsResponse::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIListExecutionsResponse::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<QString> OAIListExecutionsResponse::getUnreachable() const {
    return m_unreachable;
}
void OAIListExecutionsResponse::setUnreachable(const QList<QString> &unreachable) {
    m_unreachable = unreachable;
    m_unreachable_isSet = true;
}

bool OAIListExecutionsResponse::is_unreachable_Set() const{
    return m_unreachable_isSet;
}

bool OAIListExecutionsResponse::is_unreachable_Valid() const{
    return m_unreachable_isValid;
}

bool OAIListExecutionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unreachable.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListExecutionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
