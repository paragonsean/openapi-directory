/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerPort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerPort::OAIContainerPort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerPort::OAIContainerPort() {
    this->initializeModel();
}

OAIContainerPort::~OAIContainerPort() {}

void OAIContainerPort::initializeModel() {

    m_container_port_isSet = false;
    m_container_port_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;
}

void OAIContainerPort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerPort::fromJsonObject(QJsonObject json) {

    m_container_port_isValid = ::OpenAPI::fromJsonValue(m_container_port, json[QString("containerPort")]);
    m_container_port_isSet = !json[QString("containerPort")].isNull() && m_container_port_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;
}

QString OAIContainerPort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerPort::asJsonObject() const {
    QJsonObject obj;
    if (m_container_port_isSet) {
        obj.insert(QString("containerPort"), ::OpenAPI::toJsonValue(m_container_port));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    return obj;
}

qint32 OAIContainerPort::getContainerPort() const {
    return m_container_port;
}
void OAIContainerPort::setContainerPort(const qint32 &container_port) {
    m_container_port = container_port;
    m_container_port_isSet = true;
}

bool OAIContainerPort::is_container_port_Set() const{
    return m_container_port_isSet;
}

bool OAIContainerPort::is_container_port_Valid() const{
    return m_container_port_isValid;
}

QString OAIContainerPort::getName() const {
    return m_name;
}
void OAIContainerPort::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContainerPort::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContainerPort::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIContainerPort::getProtocol() const {
    return m_protocol;
}
void OAIContainerPort::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIContainerPort::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIContainerPort::is_protocol_Valid() const{
    return m_protocol_isValid;
}

bool OAIContainerPort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerPort::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
