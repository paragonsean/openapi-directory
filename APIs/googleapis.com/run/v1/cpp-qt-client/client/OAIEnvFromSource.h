/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEnvFromSource.h
 *
 * Not supported by Cloud Run. EnvFromSource represents the source of a set of ConfigMaps
 */

#ifndef OAIEnvFromSource_H
#define OAIEnvFromSource_H

#include <QJsonObject>

#include "OAIConfigMapEnvSource.h"
#include "OAISecretEnvSource.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConfigMapEnvSource;
class OAISecretEnvSource;

class OAIEnvFromSource : public OAIObject {
public:
    OAIEnvFromSource();
    OAIEnvFromSource(QString json);
    ~OAIEnvFromSource() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConfigMapEnvSource getConfigMapRef() const;
    void setConfigMapRef(const OAIConfigMapEnvSource &config_map_ref);
    bool is_config_map_ref_Set() const;
    bool is_config_map_ref_Valid() const;

    QString getPrefix() const;
    void setPrefix(const QString &prefix);
    bool is_prefix_Set() const;
    bool is_prefix_Valid() const;

    OAISecretEnvSource getSecretRef() const;
    void setSecretRef(const OAISecretEnvSource &secret_ref);
    bool is_secret_ref_Set() const;
    bool is_secret_ref_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIConfigMapEnvSource m_config_map_ref;
    bool m_config_map_ref_isSet;
    bool m_config_map_ref_isValid;

    QString m_prefix;
    bool m_prefix_isSet;
    bool m_prefix_isValid;

    OAISecretEnvSource m_secret_ref;
    bool m_secret_ref_isSet;
    bool m_secret_ref_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEnvFromSource)

#endif // OAIEnvFromSource_H
