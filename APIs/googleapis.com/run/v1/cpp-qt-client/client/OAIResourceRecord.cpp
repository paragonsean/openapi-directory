/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceRecord::OAIResourceRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceRecord::OAIResourceRecord() {
    this->initializeModel();
}

OAIResourceRecord::~OAIResourceRecord() {}

void OAIResourceRecord::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_rrdata_isSet = false;
    m_rrdata_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIResourceRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceRecord::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rrdata_isValid = ::OpenAPI::fromJsonValue(m_rrdata, json[QString("rrdata")]);
    m_rrdata_isSet = !json[QString("rrdata")].isNull() && m_rrdata_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIResourceRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rrdata_isSet) {
        obj.insert(QString("rrdata"), ::OpenAPI::toJsonValue(m_rrdata));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIResourceRecord::getName() const {
    return m_name;
}
void OAIResourceRecord::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResourceRecord::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResourceRecord::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIResourceRecord::getRrdata() const {
    return m_rrdata;
}
void OAIResourceRecord::setRrdata(const QString &rrdata) {
    m_rrdata = rrdata;
    m_rrdata_isSet = true;
}

bool OAIResourceRecord::is_rrdata_Set() const{
    return m_rrdata_isSet;
}

bool OAIResourceRecord::is_rrdata_Valid() const{
    return m_rrdata_isValid;
}

QString OAIResourceRecord::getType() const {
    return m_type;
}
void OAIResourceRecord::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIResourceRecord::is_type_Set() const{
    return m_type_isSet;
}

bool OAIResourceRecord::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIResourceRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rrdata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
