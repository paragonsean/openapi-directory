/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigurationStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigurationStatus::OAIConfigurationStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigurationStatus::OAIConfigurationStatus() {
    this->initializeModel();
}

OAIConfigurationStatus::~OAIConfigurationStatus() {}

void OAIConfigurationStatus::initializeModel() {

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_latest_created_revision_name_isSet = false;
    m_latest_created_revision_name_isValid = false;

    m_latest_ready_revision_name_isSet = false;
    m_latest_ready_revision_name_isValid = false;

    m_observed_generation_isSet = false;
    m_observed_generation_isValid = false;
}

void OAIConfigurationStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigurationStatus::fromJsonObject(QJsonObject json) {

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_latest_created_revision_name_isValid = ::OpenAPI::fromJsonValue(m_latest_created_revision_name, json[QString("latestCreatedRevisionName")]);
    m_latest_created_revision_name_isSet = !json[QString("latestCreatedRevisionName")].isNull() && m_latest_created_revision_name_isValid;

    m_latest_ready_revision_name_isValid = ::OpenAPI::fromJsonValue(m_latest_ready_revision_name, json[QString("latestReadyRevisionName")]);
    m_latest_ready_revision_name_isSet = !json[QString("latestReadyRevisionName")].isNull() && m_latest_ready_revision_name_isValid;

    m_observed_generation_isValid = ::OpenAPI::fromJsonValue(m_observed_generation, json[QString("observedGeneration")]);
    m_observed_generation_isSet = !json[QString("observedGeneration")].isNull() && m_observed_generation_isValid;
}

QString OAIConfigurationStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigurationStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_latest_created_revision_name_isSet) {
        obj.insert(QString("latestCreatedRevisionName"), ::OpenAPI::toJsonValue(m_latest_created_revision_name));
    }
    if (m_latest_ready_revision_name_isSet) {
        obj.insert(QString("latestReadyRevisionName"), ::OpenAPI::toJsonValue(m_latest_ready_revision_name));
    }
    if (m_observed_generation_isSet) {
        obj.insert(QString("observedGeneration"), ::OpenAPI::toJsonValue(m_observed_generation));
    }
    return obj;
}

QList<OAIGoogleCloudRunV1Condition> OAIConfigurationStatus::getConditions() const {
    return m_conditions;
}
void OAIConfigurationStatus::setConditions(const QList<OAIGoogleCloudRunV1Condition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIConfigurationStatus::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIConfigurationStatus::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QString OAIConfigurationStatus::getLatestCreatedRevisionName() const {
    return m_latest_created_revision_name;
}
void OAIConfigurationStatus::setLatestCreatedRevisionName(const QString &latest_created_revision_name) {
    m_latest_created_revision_name = latest_created_revision_name;
    m_latest_created_revision_name_isSet = true;
}

bool OAIConfigurationStatus::is_latest_created_revision_name_Set() const{
    return m_latest_created_revision_name_isSet;
}

bool OAIConfigurationStatus::is_latest_created_revision_name_Valid() const{
    return m_latest_created_revision_name_isValid;
}

QString OAIConfigurationStatus::getLatestReadyRevisionName() const {
    return m_latest_ready_revision_name;
}
void OAIConfigurationStatus::setLatestReadyRevisionName(const QString &latest_ready_revision_name) {
    m_latest_ready_revision_name = latest_ready_revision_name;
    m_latest_ready_revision_name_isSet = true;
}

bool OAIConfigurationStatus::is_latest_ready_revision_name_Set() const{
    return m_latest_ready_revision_name_isSet;
}

bool OAIConfigurationStatus::is_latest_ready_revision_name_Valid() const{
    return m_latest_ready_revision_name_isValid;
}

qint32 OAIConfigurationStatus::getObservedGeneration() const {
    return m_observed_generation;
}
void OAIConfigurationStatus::setObservedGeneration(const qint32 &observed_generation) {
    m_observed_generation = observed_generation;
    m_observed_generation_isSet = true;
}

bool OAIConfigurationStatus::is_observed_generation_Set() const{
    return m_observed_generation_isSet;
}

bool OAIConfigurationStatus::is_observed_generation_Valid() const{
    return m_observed_generation_isValid;
}

bool OAIConfigurationStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_created_revision_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_ready_revision_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observed_generation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigurationStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
