/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJob::OAIJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJob::OAIJob() {
    this->initializeModel();
}

OAIJob::~OAIJob() {}

void OAIJob::initializeModel() {

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJob::fromJsonObject(QJsonObject json) {

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("apiVersion")]);
    m_api_version_isSet = !json[QString("apiVersion")].isNull() && m_api_version_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJob::asJsonObject() const {
    QJsonObject obj;
    if (m_api_version_isSet) {
        obj.insert(QString("apiVersion"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIJob::getApiVersion() const {
    return m_api_version;
}
void OAIJob::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIJob::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIJob::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QString OAIJob::getKind() const {
    return m_kind;
}
void OAIJob::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIJob::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIJob::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIObjectMeta OAIJob::getMetadata() const {
    return m_metadata;
}
void OAIJob::setMetadata(const OAIObjectMeta &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIJob::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIJob::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIJobSpec OAIJob::getSpec() const {
    return m_spec;
}
void OAIJob::setSpec(const OAIJobSpec &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAIJob::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAIJob::is_spec_Valid() const{
    return m_spec_isValid;
}

OAIJobStatus OAIJob::getStatus() const {
    return m_status;
}
void OAIJob::setStatus(const OAIJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJob::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJob::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
