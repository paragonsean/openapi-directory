/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyToPath.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyToPath::OAIKeyToPath(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyToPath::OAIKeyToPath() {
    this->initializeModel();
}

OAIKeyToPath::~OAIKeyToPath() {}

void OAIKeyToPath::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;
}

void OAIKeyToPath::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyToPath::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;
}

QString OAIKeyToPath::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyToPath::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    return obj;
}

QString OAIKeyToPath::getKey() const {
    return m_key;
}
void OAIKeyToPath::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIKeyToPath::is_key_Set() const{
    return m_key_isSet;
}

bool OAIKeyToPath::is_key_Valid() const{
    return m_key_isValid;
}

qint32 OAIKeyToPath::getMode() const {
    return m_mode;
}
void OAIKeyToPath::setMode(const qint32 &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIKeyToPath::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIKeyToPath::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIKeyToPath::getPath() const {
    return m_path;
}
void OAIKeyToPath::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIKeyToPath::is_path_Set() const{
    return m_path_isSet;
}

bool OAIKeyToPath::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIKeyToPath::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyToPath::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
