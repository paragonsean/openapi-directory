/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigMapVolumeSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigMapVolumeSource::OAIConfigMapVolumeSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigMapVolumeSource::OAIConfigMapVolumeSource() {
    this->initializeModel();
}

OAIConfigMapVolumeSource::~OAIConfigMapVolumeSource() {}

void OAIConfigMapVolumeSource::initializeModel() {

    m_default_mode_isSet = false;
    m_default_mode_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_optional_isSet = false;
    m_optional_isValid = false;
}

void OAIConfigMapVolumeSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigMapVolumeSource::fromJsonObject(QJsonObject json) {

    m_default_mode_isValid = ::OpenAPI::fromJsonValue(m_default_mode, json[QString("defaultMode")]);
    m_default_mode_isSet = !json[QString("defaultMode")].isNull() && m_default_mode_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_optional_isValid = ::OpenAPI::fromJsonValue(m_optional, json[QString("optional")]);
    m_optional_isSet = !json[QString("optional")].isNull() && m_optional_isValid;
}

QString OAIConfigMapVolumeSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigMapVolumeSource::asJsonObject() const {
    QJsonObject obj;
    if (m_default_mode_isSet) {
        obj.insert(QString("defaultMode"), ::OpenAPI::toJsonValue(m_default_mode));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_optional_isSet) {
        obj.insert(QString("optional"), ::OpenAPI::toJsonValue(m_optional));
    }
    return obj;
}

qint32 OAIConfigMapVolumeSource::getDefaultMode() const {
    return m_default_mode;
}
void OAIConfigMapVolumeSource::setDefaultMode(const qint32 &default_mode) {
    m_default_mode = default_mode;
    m_default_mode_isSet = true;
}

bool OAIConfigMapVolumeSource::is_default_mode_Set() const{
    return m_default_mode_isSet;
}

bool OAIConfigMapVolumeSource::is_default_mode_Valid() const{
    return m_default_mode_isValid;
}

QList<OAIKeyToPath> OAIConfigMapVolumeSource::getItems() const {
    return m_items;
}
void OAIConfigMapVolumeSource::setItems(const QList<OAIKeyToPath> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIConfigMapVolumeSource::is_items_Set() const{
    return m_items_isSet;
}

bool OAIConfigMapVolumeSource::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIConfigMapVolumeSource::getName() const {
    return m_name;
}
void OAIConfigMapVolumeSource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConfigMapVolumeSource::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConfigMapVolumeSource::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIConfigMapVolumeSource::isOptional() const {
    return m_optional;
}
void OAIConfigMapVolumeSource::setOptional(const bool &optional) {
    m_optional = optional;
    m_optional_isSet = true;
}

bool OAIConfigMapVolumeSource::is_optional_Set() const{
    return m_optional_isSet;
}

bool OAIConfigMapVolumeSource::is_optional_Valid() const{
    return m_optional_isValid;
}

bool OAIConfigMapVolumeSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optional_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigMapVolumeSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
