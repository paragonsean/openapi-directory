/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskSpec::OAITaskSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskSpec::OAITaskSpec() {
    this->initializeModel();
}

OAITaskSpec::~OAITaskSpec() {}

void OAITaskSpec::initializeModel() {

    m_containers_isSet = false;
    m_containers_isValid = false;

    m_max_retries_isSet = false;
    m_max_retries_isValid = false;

    m_service_account_name_isSet = false;
    m_service_account_name_isValid = false;

    m_timeout_seconds_isSet = false;
    m_timeout_seconds_isValid = false;

    m_volumes_isSet = false;
    m_volumes_isValid = false;
}

void OAITaskSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskSpec::fromJsonObject(QJsonObject json) {

    m_containers_isValid = ::OpenAPI::fromJsonValue(m_containers, json[QString("containers")]);
    m_containers_isSet = !json[QString("containers")].isNull() && m_containers_isValid;

    m_max_retries_isValid = ::OpenAPI::fromJsonValue(m_max_retries, json[QString("maxRetries")]);
    m_max_retries_isSet = !json[QString("maxRetries")].isNull() && m_max_retries_isValid;

    m_service_account_name_isValid = ::OpenAPI::fromJsonValue(m_service_account_name, json[QString("serviceAccountName")]);
    m_service_account_name_isSet = !json[QString("serviceAccountName")].isNull() && m_service_account_name_isValid;

    m_timeout_seconds_isValid = ::OpenAPI::fromJsonValue(m_timeout_seconds, json[QString("timeoutSeconds")]);
    m_timeout_seconds_isSet = !json[QString("timeoutSeconds")].isNull() && m_timeout_seconds_isValid;

    m_volumes_isValid = ::OpenAPI::fromJsonValue(m_volumes, json[QString("volumes")]);
    m_volumes_isSet = !json[QString("volumes")].isNull() && m_volumes_isValid;
}

QString OAITaskSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_containers.size() > 0) {
        obj.insert(QString("containers"), ::OpenAPI::toJsonValue(m_containers));
    }
    if (m_max_retries_isSet) {
        obj.insert(QString("maxRetries"), ::OpenAPI::toJsonValue(m_max_retries));
    }
    if (m_service_account_name_isSet) {
        obj.insert(QString("serviceAccountName"), ::OpenAPI::toJsonValue(m_service_account_name));
    }
    if (m_timeout_seconds_isSet) {
        obj.insert(QString("timeoutSeconds"), ::OpenAPI::toJsonValue(m_timeout_seconds));
    }
    if (m_volumes.size() > 0) {
        obj.insert(QString("volumes"), ::OpenAPI::toJsonValue(m_volumes));
    }
    return obj;
}

QList<OAIContainer> OAITaskSpec::getContainers() const {
    return m_containers;
}
void OAITaskSpec::setContainers(const QList<OAIContainer> &containers) {
    m_containers = containers;
    m_containers_isSet = true;
}

bool OAITaskSpec::is_containers_Set() const{
    return m_containers_isSet;
}

bool OAITaskSpec::is_containers_Valid() const{
    return m_containers_isValid;
}

qint32 OAITaskSpec::getMaxRetries() const {
    return m_max_retries;
}
void OAITaskSpec::setMaxRetries(const qint32 &max_retries) {
    m_max_retries = max_retries;
    m_max_retries_isSet = true;
}

bool OAITaskSpec::is_max_retries_Set() const{
    return m_max_retries_isSet;
}

bool OAITaskSpec::is_max_retries_Valid() const{
    return m_max_retries_isValid;
}

QString OAITaskSpec::getServiceAccountName() const {
    return m_service_account_name;
}
void OAITaskSpec::setServiceAccountName(const QString &service_account_name) {
    m_service_account_name = service_account_name;
    m_service_account_name_isSet = true;
}

bool OAITaskSpec::is_service_account_name_Set() const{
    return m_service_account_name_isSet;
}

bool OAITaskSpec::is_service_account_name_Valid() const{
    return m_service_account_name_isValid;
}

QString OAITaskSpec::getTimeoutSeconds() const {
    return m_timeout_seconds;
}
void OAITaskSpec::setTimeoutSeconds(const QString &timeout_seconds) {
    m_timeout_seconds = timeout_seconds;
    m_timeout_seconds_isSet = true;
}

bool OAITaskSpec::is_timeout_seconds_Set() const{
    return m_timeout_seconds_isSet;
}

bool OAITaskSpec::is_timeout_seconds_Valid() const{
    return m_timeout_seconds_isValid;
}

QList<OAIVolume> OAITaskSpec::getVolumes() const {
    return m_volumes;
}
void OAITaskSpec::setVolumes(const QList<OAIVolume> &volumes) {
    m_volumes = volumes;
    m_volumes_isSet = true;
}

bool OAITaskSpec::is_volumes_Set() const{
    return m_volumes_isSet;
}

bool OAITaskSpec::is_volumes_Valid() const{
    return m_volumes_isValid;
}

bool OAITaskSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_containers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_retries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
