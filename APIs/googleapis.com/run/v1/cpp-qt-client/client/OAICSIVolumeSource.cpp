/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICSIVolumeSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICSIVolumeSource::OAICSIVolumeSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICSIVolumeSource::OAICSIVolumeSource() {
    this->initializeModel();
}

OAICSIVolumeSource::~OAICSIVolumeSource() {}

void OAICSIVolumeSource::initializeModel() {

    m_driver_isSet = false;
    m_driver_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_volume_attributes_isSet = false;
    m_volume_attributes_isValid = false;
}

void OAICSIVolumeSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICSIVolumeSource::fromJsonObject(QJsonObject json) {

    m_driver_isValid = ::OpenAPI::fromJsonValue(m_driver, json[QString("driver")]);
    m_driver_isSet = !json[QString("driver")].isNull() && m_driver_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("readOnly")]);
    m_read_only_isSet = !json[QString("readOnly")].isNull() && m_read_only_isValid;

    m_volume_attributes_isValid = ::OpenAPI::fromJsonValue(m_volume_attributes, json[QString("volumeAttributes")]);
    m_volume_attributes_isSet = !json[QString("volumeAttributes")].isNull() && m_volume_attributes_isValid;
}

QString OAICSIVolumeSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICSIVolumeSource::asJsonObject() const {
    QJsonObject obj;
    if (m_driver_isSet) {
        obj.insert(QString("driver"), ::OpenAPI::toJsonValue(m_driver));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("readOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_volume_attributes.size() > 0) {
        obj.insert(QString("volumeAttributes"), ::OpenAPI::toJsonValue(m_volume_attributes));
    }
    return obj;
}

QString OAICSIVolumeSource::getDriver() const {
    return m_driver;
}
void OAICSIVolumeSource::setDriver(const QString &driver) {
    m_driver = driver;
    m_driver_isSet = true;
}

bool OAICSIVolumeSource::is_driver_Set() const{
    return m_driver_isSet;
}

bool OAICSIVolumeSource::is_driver_Valid() const{
    return m_driver_isValid;
}

bool OAICSIVolumeSource::isReadOnly() const {
    return m_read_only;
}
void OAICSIVolumeSource::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAICSIVolumeSource::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAICSIVolumeSource::is_read_only_Valid() const{
    return m_read_only_isValid;
}

QMap<QString, QString> OAICSIVolumeSource::getVolumeAttributes() const {
    return m_volume_attributes;
}
void OAICSIVolumeSource::setVolumeAttributes(const QMap<QString, QString> &volume_attributes) {
    m_volume_attributes = volume_attributes;
    m_volume_attributes_isSet = true;
}

bool OAICSIVolumeSource::is_volume_attributes_Set() const{
    return m_volume_attributes_isSet;
}

bool OAICSIVolumeSource::is_volume_attributes_Valid() const{
    return m_volume_attributes_isValid;
}

bool OAICSIVolumeSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_driver_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICSIVolumeSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
