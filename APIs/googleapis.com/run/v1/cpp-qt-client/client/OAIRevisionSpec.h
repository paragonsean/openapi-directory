/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRevisionSpec.h
 *
 * RevisionSpec holds the desired state of the Revision (from the client).
 */

#ifndef OAIRevisionSpec_H
#define OAIRevisionSpec_H

#include <QJsonObject>

#include "OAIContainer.h"
#include "OAILocalObjectReference.h"
#include "OAIVolume.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIContainer;
class OAILocalObjectReference;
class OAIVolume;

class OAIRevisionSpec : public OAIObject {
public:
    OAIRevisionSpec();
    OAIRevisionSpec(QString json);
    ~OAIRevisionSpec() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getContainerConcurrency() const;
    void setContainerConcurrency(const qint32 &container_concurrency);
    bool is_container_concurrency_Set() const;
    bool is_container_concurrency_Valid() const;

    QList<OAIContainer> getContainers() const;
    void setContainers(const QList<OAIContainer> &containers);
    bool is_containers_Set() const;
    bool is_containers_Valid() const;

    bool isEnableServiceLinks() const;
    void setEnableServiceLinks(const bool &enable_service_links);
    bool is_enable_service_links_Set() const;
    bool is_enable_service_links_Valid() const;

    QList<OAILocalObjectReference> getImagePullSecrets() const;
    void setImagePullSecrets(const QList<OAILocalObjectReference> &image_pull_secrets);
    bool is_image_pull_secrets_Set() const;
    bool is_image_pull_secrets_Valid() const;

    QString getServiceAccountName() const;
    void setServiceAccountName(const QString &service_account_name);
    bool is_service_account_name_Set() const;
    bool is_service_account_name_Valid() const;

    qint32 getTimeoutSeconds() const;
    void setTimeoutSeconds(const qint32 &timeout_seconds);
    bool is_timeout_seconds_Set() const;
    bool is_timeout_seconds_Valid() const;

    QList<OAIVolume> getVolumes() const;
    void setVolumes(const QList<OAIVolume> &volumes);
    bool is_volumes_Set() const;
    bool is_volumes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_container_concurrency;
    bool m_container_concurrency_isSet;
    bool m_container_concurrency_isValid;

    QList<OAIContainer> m_containers;
    bool m_containers_isSet;
    bool m_containers_isValid;

    bool m_enable_service_links;
    bool m_enable_service_links_isSet;
    bool m_enable_service_links_isValid;

    QList<OAILocalObjectReference> m_image_pull_secrets;
    bool m_image_pull_secrets_isSet;
    bool m_image_pull_secrets_isValid;

    QString m_service_account_name;
    bool m_service_account_name_isSet;
    bool m_service_account_name_isValid;

    qint32 m_timeout_seconds;
    bool m_timeout_seconds_isSet;
    bool m_timeout_seconds_isValid;

    QList<OAIVolume> m_volumes;
    bool m_volumes_isSet;
    bool m_volumes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRevisionSpec)

#endif // OAIRevisionSpec_H
