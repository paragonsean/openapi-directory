/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatus::OAIStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatus::OAIStatus() {
    this->initializeModel();
}

OAIStatus::~OAIStatus() {}

void OAIStatus::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatus::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_details.isSet()) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAIStatus::getCode() const {
    return m_code;
}
void OAIStatus::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIStatus::is_code_Set() const{
    return m_code_isSet;
}

bool OAIStatus::is_code_Valid() const{
    return m_code_isValid;
}

OAIStatusDetails OAIStatus::getDetails() const {
    return m_details;
}
void OAIStatus::setDetails(const OAIStatusDetails &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIStatus::is_details_Set() const{
    return m_details_isSet;
}

bool OAIStatus::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIStatus::getMessage() const {
    return m_message;
}
void OAIStatus::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIStatus::is_message_Set() const{
    return m_message_isSet;
}

bool OAIStatus::is_message_Valid() const{
    return m_message_isValid;
}

OAIListMeta OAIStatus::getMetadata() const {
    return m_metadata;
}
void OAIStatus::setMetadata(const OAIListMeta &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIStatus::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIStatus::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIStatus::getReason() const {
    return m_reason;
}
void OAIStatus::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIStatus::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIStatus::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIStatus::getStatus() const {
    return m_status;
}
void OAIStatus::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStatus::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
