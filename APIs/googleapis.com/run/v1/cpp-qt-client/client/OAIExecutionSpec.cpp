/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecutionSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecutionSpec::OAIExecutionSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecutionSpec::OAIExecutionSpec() {
    this->initializeModel();
}

OAIExecutionSpec::~OAIExecutionSpec() {}

void OAIExecutionSpec::initializeModel() {

    m_parallelism_isSet = false;
    m_parallelism_isValid = false;

    m_task_count_isSet = false;
    m_task_count_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;
}

void OAIExecutionSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecutionSpec::fromJsonObject(QJsonObject json) {

    m_parallelism_isValid = ::OpenAPI::fromJsonValue(m_parallelism, json[QString("parallelism")]);
    m_parallelism_isSet = !json[QString("parallelism")].isNull() && m_parallelism_isValid;

    m_task_count_isValid = ::OpenAPI::fromJsonValue(m_task_count, json[QString("taskCount")]);
    m_task_count_isSet = !json[QString("taskCount")].isNull() && m_task_count_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;
}

QString OAIExecutionSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecutionSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_parallelism_isSet) {
        obj.insert(QString("parallelism"), ::OpenAPI::toJsonValue(m_parallelism));
    }
    if (m_task_count_isSet) {
        obj.insert(QString("taskCount"), ::OpenAPI::toJsonValue(m_task_count));
    }
    if (m_r_template.isSet()) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    return obj;
}

qint32 OAIExecutionSpec::getParallelism() const {
    return m_parallelism;
}
void OAIExecutionSpec::setParallelism(const qint32 &parallelism) {
    m_parallelism = parallelism;
    m_parallelism_isSet = true;
}

bool OAIExecutionSpec::is_parallelism_Set() const{
    return m_parallelism_isSet;
}

bool OAIExecutionSpec::is_parallelism_Valid() const{
    return m_parallelism_isValid;
}

qint32 OAIExecutionSpec::getTaskCount() const {
    return m_task_count;
}
void OAIExecutionSpec::setTaskCount(const qint32 &task_count) {
    m_task_count = task_count;
    m_task_count_isSet = true;
}

bool OAIExecutionSpec::is_task_count_Set() const{
    return m_task_count_isSet;
}

bool OAIExecutionSpec::is_task_count_Valid() const{
    return m_task_count_isValid;
}

OAITaskTemplateSpec OAIExecutionSpec::getRTemplate() const {
    return m_r_template;
}
void OAIExecutionSpec::setRTemplate(const OAITaskTemplateSpec &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIExecutionSpec::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIExecutionSpec::is_r_template_Valid() const{
    return m_r_template_isValid;
}

bool OAIExecutionSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parallelism_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecutionSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
