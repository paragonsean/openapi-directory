/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceSpec::OAIServiceSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceSpec::OAIServiceSpec() {
    this->initializeModel();
}

OAIServiceSpec::~OAIServiceSpec() {}

void OAIServiceSpec::initializeModel() {

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_traffic_isSet = false;
    m_traffic_isValid = false;
}

void OAIServiceSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceSpec::fromJsonObject(QJsonObject json) {

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_traffic_isValid = ::OpenAPI::fromJsonValue(m_traffic, json[QString("traffic")]);
    m_traffic_isSet = !json[QString("traffic")].isNull() && m_traffic_isValid;
}

QString OAIServiceSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_r_template.isSet()) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_traffic.size() > 0) {
        obj.insert(QString("traffic"), ::OpenAPI::toJsonValue(m_traffic));
    }
    return obj;
}

OAIRevisionTemplate OAIServiceSpec::getRTemplate() const {
    return m_r_template;
}
void OAIServiceSpec::setRTemplate(const OAIRevisionTemplate &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIServiceSpec::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIServiceSpec::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QList<OAITrafficTarget> OAIServiceSpec::getTraffic() const {
    return m_traffic;
}
void OAIServiceSpec::setTraffic(const QList<OAITrafficTarget> &traffic) {
    m_traffic = traffic;
    m_traffic_isSet = true;
}

bool OAIServiceSpec::is_traffic_Set() const{
    return m_traffic_isSet;
}

bool OAIServiceSpec::is_traffic_Valid() const{
    return m_traffic_isValid;
}

bool OAIServiceSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
