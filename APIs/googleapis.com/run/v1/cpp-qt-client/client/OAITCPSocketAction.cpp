/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITCPSocketAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITCPSocketAction::OAITCPSocketAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITCPSocketAction::OAITCPSocketAction() {
    this->initializeModel();
}

OAITCPSocketAction::~OAITCPSocketAction() {}

void OAITCPSocketAction::initializeModel() {

    m_host_isSet = false;
    m_host_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;
}

void OAITCPSocketAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITCPSocketAction::fromJsonObject(QJsonObject json) {

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;
}

QString OAITCPSocketAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITCPSocketAction::asJsonObject() const {
    QJsonObject obj;
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    return obj;
}

QString OAITCPSocketAction::getHost() const {
    return m_host;
}
void OAITCPSocketAction::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAITCPSocketAction::is_host_Set() const{
    return m_host_isSet;
}

bool OAITCPSocketAction::is_host_Valid() const{
    return m_host_isValid;
}

qint32 OAITCPSocketAction::getPort() const {
    return m_port;
}
void OAITCPSocketAction::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAITCPSocketAction::is_port_Set() const{
    return m_port_isSet;
}

bool OAITCPSocketAction::is_port_Valid() const{
    return m_port_isValid;
}

bool OAITCPSocketAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITCPSocketAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
