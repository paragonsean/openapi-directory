/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskStatus::OAITaskStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskStatus::OAITaskStatus() {
    this->initializeModel();
}

OAITaskStatus::~OAITaskStatus() {}

void OAITaskStatus::initializeModel() {

    m_completion_time_isSet = false;
    m_completion_time_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_last_attempt_result_isSet = false;
    m_last_attempt_result_isValid = false;

    m_log_uri_isSet = false;
    m_log_uri_isValid = false;

    m_observed_generation_isSet = false;
    m_observed_generation_isValid = false;

    m_retried_isSet = false;
    m_retried_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAITaskStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskStatus::fromJsonObject(QJsonObject json) {

    m_completion_time_isValid = ::OpenAPI::fromJsonValue(m_completion_time, json[QString("completionTime")]);
    m_completion_time_isSet = !json[QString("completionTime")].isNull() && m_completion_time_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_last_attempt_result_isValid = ::OpenAPI::fromJsonValue(m_last_attempt_result, json[QString("lastAttemptResult")]);
    m_last_attempt_result_isSet = !json[QString("lastAttemptResult")].isNull() && m_last_attempt_result_isValid;

    m_log_uri_isValid = ::OpenAPI::fromJsonValue(m_log_uri, json[QString("logUri")]);
    m_log_uri_isSet = !json[QString("logUri")].isNull() && m_log_uri_isValid;

    m_observed_generation_isValid = ::OpenAPI::fromJsonValue(m_observed_generation, json[QString("observedGeneration")]);
    m_observed_generation_isSet = !json[QString("observedGeneration")].isNull() && m_observed_generation_isValid;

    m_retried_isValid = ::OpenAPI::fromJsonValue(m_retried, json[QString("retried")]);
    m_retried_isSet = !json[QString("retried")].isNull() && m_retried_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAITaskStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_completion_time_isSet) {
        obj.insert(QString("completionTime"), ::OpenAPI::toJsonValue(m_completion_time));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_last_attempt_result.isSet()) {
        obj.insert(QString("lastAttemptResult"), ::OpenAPI::toJsonValue(m_last_attempt_result));
    }
    if (m_log_uri_isSet) {
        obj.insert(QString("logUri"), ::OpenAPI::toJsonValue(m_log_uri));
    }
    if (m_observed_generation_isSet) {
        obj.insert(QString("observedGeneration"), ::OpenAPI::toJsonValue(m_observed_generation));
    }
    if (m_retried_isSet) {
        obj.insert(QString("retried"), ::OpenAPI::toJsonValue(m_retried));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAITaskStatus::getCompletionTime() const {
    return m_completion_time;
}
void OAITaskStatus::setCompletionTime(const QString &completion_time) {
    m_completion_time = completion_time;
    m_completion_time_isSet = true;
}

bool OAITaskStatus::is_completion_time_Set() const{
    return m_completion_time_isSet;
}

bool OAITaskStatus::is_completion_time_Valid() const{
    return m_completion_time_isValid;
}

QList<OAIGoogleCloudRunV1Condition> OAITaskStatus::getConditions() const {
    return m_conditions;
}
void OAITaskStatus::setConditions(const QList<OAIGoogleCloudRunV1Condition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAITaskStatus::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAITaskStatus::is_conditions_Valid() const{
    return m_conditions_isValid;
}

qint32 OAITaskStatus::getIndex() const {
    return m_index;
}
void OAITaskStatus::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAITaskStatus::is_index_Set() const{
    return m_index_isSet;
}

bool OAITaskStatus::is_index_Valid() const{
    return m_index_isValid;
}

OAITaskAttemptResult OAITaskStatus::getLastAttemptResult() const {
    return m_last_attempt_result;
}
void OAITaskStatus::setLastAttemptResult(const OAITaskAttemptResult &last_attempt_result) {
    m_last_attempt_result = last_attempt_result;
    m_last_attempt_result_isSet = true;
}

bool OAITaskStatus::is_last_attempt_result_Set() const{
    return m_last_attempt_result_isSet;
}

bool OAITaskStatus::is_last_attempt_result_Valid() const{
    return m_last_attempt_result_isValid;
}

QString OAITaskStatus::getLogUri() const {
    return m_log_uri;
}
void OAITaskStatus::setLogUri(const QString &log_uri) {
    m_log_uri = log_uri;
    m_log_uri_isSet = true;
}

bool OAITaskStatus::is_log_uri_Set() const{
    return m_log_uri_isSet;
}

bool OAITaskStatus::is_log_uri_Valid() const{
    return m_log_uri_isValid;
}

qint32 OAITaskStatus::getObservedGeneration() const {
    return m_observed_generation;
}
void OAITaskStatus::setObservedGeneration(const qint32 &observed_generation) {
    m_observed_generation = observed_generation;
    m_observed_generation_isSet = true;
}

bool OAITaskStatus::is_observed_generation_Set() const{
    return m_observed_generation_isSet;
}

bool OAITaskStatus::is_observed_generation_Valid() const{
    return m_observed_generation_isValid;
}

qint32 OAITaskStatus::getRetried() const {
    return m_retried;
}
void OAITaskStatus::setRetried(const qint32 &retried) {
    m_retried = retried;
    m_retried_isSet = true;
}

bool OAITaskStatus::is_retried_Set() const{
    return m_retried_isSet;
}

bool OAITaskStatus::is_retried_Valid() const{
    return m_retried_isValid;
}

QString OAITaskStatus::getStartTime() const {
    return m_start_time;
}
void OAITaskStatus::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAITaskStatus::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAITaskStatus::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAITaskStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_attempt_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observed_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retried_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
