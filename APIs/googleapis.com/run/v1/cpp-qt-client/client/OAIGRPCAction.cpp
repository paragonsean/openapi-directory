/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGRPCAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGRPCAction::OAIGRPCAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGRPCAction::OAIGRPCAction() {
    this->initializeModel();
}

OAIGRPCAction::~OAIGRPCAction() {}

void OAIGRPCAction::initializeModel() {

    m_port_isSet = false;
    m_port_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;
}

void OAIGRPCAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGRPCAction::fromJsonObject(QJsonObject json) {

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;
}

QString OAIGRPCAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGRPCAction::asJsonObject() const {
    QJsonObject obj;
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    return obj;
}

qint32 OAIGRPCAction::getPort() const {
    return m_port;
}
void OAIGRPCAction::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIGRPCAction::is_port_Set() const{
    return m_port_isSet;
}

bool OAIGRPCAction::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIGRPCAction::getService() const {
    return m_service;
}
void OAIGRPCAction::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIGRPCAction::is_service_Set() const{
    return m_service_isSet;
}

bool OAIGRPCAction::is_service_Valid() const{
    return m_service_isValid;
}

bool OAIGRPCAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGRPCAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
