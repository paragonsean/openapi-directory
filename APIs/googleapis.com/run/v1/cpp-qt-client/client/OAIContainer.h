/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContainer.h
 *
 * A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
 */

#ifndef OAIContainer_H
#define OAIContainer_H

#include <QJsonObject>

#include "OAIContainerPort.h"
#include "OAIEnvFromSource.h"
#include "OAIEnvVar.h"
#include "OAIProbe.h"
#include "OAIResourceRequirements.h"
#include "OAISecurityContext.h"
#include "OAIVolumeMount.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEnvVar;
class OAIEnvFromSource;
class OAIProbe;
class OAIContainerPort;
class OAIResourceRequirements;
class OAISecurityContext;
class OAIVolumeMount;

class OAIContainer : public OAIObject {
public:
    OAIContainer();
    OAIContainer(QString json);
    ~OAIContainer() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getArgs() const;
    void setArgs(const QList<QString> &args);
    bool is_args_Set() const;
    bool is_args_Valid() const;

    QList<QString> getCommand() const;
    void setCommand(const QList<QString> &command);
    bool is_command_Set() const;
    bool is_command_Valid() const;

    QList<OAIEnvVar> getEnv() const;
    void setEnv(const QList<OAIEnvVar> &env);
    bool is_env_Set() const;
    bool is_env_Valid() const;

    QList<OAIEnvFromSource> getEnvFrom() const;
    void setEnvFrom(const QList<OAIEnvFromSource> &env_from);
    bool is_env_from_Set() const;
    bool is_env_from_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    QString getImagePullPolicy() const;
    void setImagePullPolicy(const QString &image_pull_policy);
    bool is_image_pull_policy_Set() const;
    bool is_image_pull_policy_Valid() const;

    OAIProbe getLivenessProbe() const;
    void setLivenessProbe(const OAIProbe &liveness_probe);
    bool is_liveness_probe_Set() const;
    bool is_liveness_probe_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIContainerPort> getPorts() const;
    void setPorts(const QList<OAIContainerPort> &ports);
    bool is_ports_Set() const;
    bool is_ports_Valid() const;

    OAIProbe getReadinessProbe() const;
    void setReadinessProbe(const OAIProbe &readiness_probe);
    bool is_readiness_probe_Set() const;
    bool is_readiness_probe_Valid() const;

    OAIResourceRequirements getResources() const;
    void setResources(const OAIResourceRequirements &resources);
    bool is_resources_Set() const;
    bool is_resources_Valid() const;

    OAISecurityContext getSecurityContext() const;
    void setSecurityContext(const OAISecurityContext &security_context);
    bool is_security_context_Set() const;
    bool is_security_context_Valid() const;

    OAIProbe getStartupProbe() const;
    void setStartupProbe(const OAIProbe &startup_probe);
    bool is_startup_probe_Set() const;
    bool is_startup_probe_Valid() const;

    QString getTerminationMessagePath() const;
    void setTerminationMessagePath(const QString &termination_message_path);
    bool is_termination_message_path_Set() const;
    bool is_termination_message_path_Valid() const;

    QString getTerminationMessagePolicy() const;
    void setTerminationMessagePolicy(const QString &termination_message_policy);
    bool is_termination_message_policy_Set() const;
    bool is_termination_message_policy_Valid() const;

    QList<OAIVolumeMount> getVolumeMounts() const;
    void setVolumeMounts(const QList<OAIVolumeMount> &volume_mounts);
    bool is_volume_mounts_Set() const;
    bool is_volume_mounts_Valid() const;

    QString getWorkingDir() const;
    void setWorkingDir(const QString &working_dir);
    bool is_working_dir_Set() const;
    bool is_working_dir_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_args;
    bool m_args_isSet;
    bool m_args_isValid;

    QList<QString> m_command;
    bool m_command_isSet;
    bool m_command_isValid;

    QList<OAIEnvVar> m_env;
    bool m_env_isSet;
    bool m_env_isValid;

    QList<OAIEnvFromSource> m_env_from;
    bool m_env_from_isSet;
    bool m_env_from_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    QString m_image_pull_policy;
    bool m_image_pull_policy_isSet;
    bool m_image_pull_policy_isValid;

    OAIProbe m_liveness_probe;
    bool m_liveness_probe_isSet;
    bool m_liveness_probe_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIContainerPort> m_ports;
    bool m_ports_isSet;
    bool m_ports_isValid;

    OAIProbe m_readiness_probe;
    bool m_readiness_probe_isSet;
    bool m_readiness_probe_isValid;

    OAIResourceRequirements m_resources;
    bool m_resources_isSet;
    bool m_resources_isValid;

    OAISecurityContext m_security_context;
    bool m_security_context_isSet;
    bool m_security_context_isValid;

    OAIProbe m_startup_probe;
    bool m_startup_probe_isSet;
    bool m_startup_probe_isValid;

    QString m_termination_message_path;
    bool m_termination_message_path_isSet;
    bool m_termination_message_path_isValid;

    QString m_termination_message_policy;
    bool m_termination_message_policy_isSet;
    bool m_termination_message_policy_isValid;

    QList<OAIVolumeMount> m_volume_mounts;
    bool m_volume_mounts_isSet;
    bool m_volume_mounts_isValid;

    QString m_working_dir;
    bool m_working_dir_isSet;
    bool m_working_dir_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContainer)

#endif // OAIContainer_H
