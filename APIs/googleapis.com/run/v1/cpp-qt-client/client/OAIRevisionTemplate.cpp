/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRevisionTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRevisionTemplate::OAIRevisionTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRevisionTemplate::OAIRevisionTemplate() {
    this->initializeModel();
}

OAIRevisionTemplate::~OAIRevisionTemplate() {}

void OAIRevisionTemplate::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;
}

void OAIRevisionTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRevisionTemplate::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;
}

QString OAIRevisionTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRevisionTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    return obj;
}

OAIObjectMeta OAIRevisionTemplate::getMetadata() const {
    return m_metadata;
}
void OAIRevisionTemplate::setMetadata(const OAIObjectMeta &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIRevisionTemplate::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIRevisionTemplate::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIRevisionSpec OAIRevisionTemplate::getSpec() const {
    return m_spec;
}
void OAIRevisionTemplate::setSpec(const OAIRevisionSpec &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAIRevisionTemplate::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAIRevisionTemplate::is_spec_Valid() const{
    return m_spec_isValid;
}

bool OAIRevisionTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRevisionTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
