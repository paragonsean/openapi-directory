/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceStatus::OAIServiceStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceStatus::OAIServiceStatus() {
    this->initializeModel();
}

OAIServiceStatus::~OAIServiceStatus() {}

void OAIServiceStatus::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_latest_created_revision_name_isSet = false;
    m_latest_created_revision_name_isValid = false;

    m_latest_ready_revision_name_isSet = false;
    m_latest_ready_revision_name_isValid = false;

    m_observed_generation_isSet = false;
    m_observed_generation_isValid = false;

    m_traffic_isSet = false;
    m_traffic_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIServiceStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceStatus::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_latest_created_revision_name_isValid = ::OpenAPI::fromJsonValue(m_latest_created_revision_name, json[QString("latestCreatedRevisionName")]);
    m_latest_created_revision_name_isSet = !json[QString("latestCreatedRevisionName")].isNull() && m_latest_created_revision_name_isValid;

    m_latest_ready_revision_name_isValid = ::OpenAPI::fromJsonValue(m_latest_ready_revision_name, json[QString("latestReadyRevisionName")]);
    m_latest_ready_revision_name_isSet = !json[QString("latestReadyRevisionName")].isNull() && m_latest_ready_revision_name_isValid;

    m_observed_generation_isValid = ::OpenAPI::fromJsonValue(m_observed_generation, json[QString("observedGeneration")]);
    m_observed_generation_isSet = !json[QString("observedGeneration")].isNull() && m_observed_generation_isValid;

    m_traffic_isValid = ::OpenAPI::fromJsonValue(m_traffic, json[QString("traffic")]);
    m_traffic_isSet = !json[QString("traffic")].isNull() && m_traffic_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIServiceStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_latest_created_revision_name_isSet) {
        obj.insert(QString("latestCreatedRevisionName"), ::OpenAPI::toJsonValue(m_latest_created_revision_name));
    }
    if (m_latest_ready_revision_name_isSet) {
        obj.insert(QString("latestReadyRevisionName"), ::OpenAPI::toJsonValue(m_latest_ready_revision_name));
    }
    if (m_observed_generation_isSet) {
        obj.insert(QString("observedGeneration"), ::OpenAPI::toJsonValue(m_observed_generation));
    }
    if (m_traffic.size() > 0) {
        obj.insert(QString("traffic"), ::OpenAPI::toJsonValue(m_traffic));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIAddressable OAIServiceStatus::getAddress() const {
    return m_address;
}
void OAIServiceStatus::setAddress(const OAIAddressable &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIServiceStatus::is_address_Set() const{
    return m_address_isSet;
}

bool OAIServiceStatus::is_address_Valid() const{
    return m_address_isValid;
}

QList<OAIGoogleCloudRunV1Condition> OAIServiceStatus::getConditions() const {
    return m_conditions;
}
void OAIServiceStatus::setConditions(const QList<OAIGoogleCloudRunV1Condition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIServiceStatus::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIServiceStatus::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QString OAIServiceStatus::getLatestCreatedRevisionName() const {
    return m_latest_created_revision_name;
}
void OAIServiceStatus::setLatestCreatedRevisionName(const QString &latest_created_revision_name) {
    m_latest_created_revision_name = latest_created_revision_name;
    m_latest_created_revision_name_isSet = true;
}

bool OAIServiceStatus::is_latest_created_revision_name_Set() const{
    return m_latest_created_revision_name_isSet;
}

bool OAIServiceStatus::is_latest_created_revision_name_Valid() const{
    return m_latest_created_revision_name_isValid;
}

QString OAIServiceStatus::getLatestReadyRevisionName() const {
    return m_latest_ready_revision_name;
}
void OAIServiceStatus::setLatestReadyRevisionName(const QString &latest_ready_revision_name) {
    m_latest_ready_revision_name = latest_ready_revision_name;
    m_latest_ready_revision_name_isSet = true;
}

bool OAIServiceStatus::is_latest_ready_revision_name_Set() const{
    return m_latest_ready_revision_name_isSet;
}

bool OAIServiceStatus::is_latest_ready_revision_name_Valid() const{
    return m_latest_ready_revision_name_isValid;
}

qint32 OAIServiceStatus::getObservedGeneration() const {
    return m_observed_generation;
}
void OAIServiceStatus::setObservedGeneration(const qint32 &observed_generation) {
    m_observed_generation = observed_generation;
    m_observed_generation_isSet = true;
}

bool OAIServiceStatus::is_observed_generation_Set() const{
    return m_observed_generation_isSet;
}

bool OAIServiceStatus::is_observed_generation_Valid() const{
    return m_observed_generation_isValid;
}

QList<OAITrafficTarget> OAIServiceStatus::getTraffic() const {
    return m_traffic;
}
void OAIServiceStatus::setTraffic(const QList<OAITrafficTarget> &traffic) {
    m_traffic = traffic;
    m_traffic_isSet = true;
}

bool OAIServiceStatus::is_traffic_Set() const{
    return m_traffic_isSet;
}

bool OAIServiceStatus::is_traffic_Valid() const{
    return m_traffic_isValid;
}

QString OAIServiceStatus::getUrl() const {
    return m_url;
}
void OAIServiceStatus::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIServiceStatus::is_url_Set() const{
    return m_url_isSet;
}

bool OAIServiceStatus::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIServiceStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_created_revision_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_ready_revision_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observed_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
