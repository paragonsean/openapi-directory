/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvFromSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvFromSource::OAIEnvFromSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvFromSource::OAIEnvFromSource() {
    this->initializeModel();
}

OAIEnvFromSource::~OAIEnvFromSource() {}

void OAIEnvFromSource::initializeModel() {

    m_config_map_ref_isSet = false;
    m_config_map_ref_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_secret_ref_isSet = false;
    m_secret_ref_isValid = false;
}

void OAIEnvFromSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvFromSource::fromJsonObject(QJsonObject json) {

    m_config_map_ref_isValid = ::OpenAPI::fromJsonValue(m_config_map_ref, json[QString("configMapRef")]);
    m_config_map_ref_isSet = !json[QString("configMapRef")].isNull() && m_config_map_ref_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;

    m_secret_ref_isValid = ::OpenAPI::fromJsonValue(m_secret_ref, json[QString("secretRef")]);
    m_secret_ref_isSet = !json[QString("secretRef")].isNull() && m_secret_ref_isValid;
}

QString OAIEnvFromSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvFromSource::asJsonObject() const {
    QJsonObject obj;
    if (m_config_map_ref.isSet()) {
        obj.insert(QString("configMapRef"), ::OpenAPI::toJsonValue(m_config_map_ref));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_secret_ref.isSet()) {
        obj.insert(QString("secretRef"), ::OpenAPI::toJsonValue(m_secret_ref));
    }
    return obj;
}

OAIConfigMapEnvSource OAIEnvFromSource::getConfigMapRef() const {
    return m_config_map_ref;
}
void OAIEnvFromSource::setConfigMapRef(const OAIConfigMapEnvSource &config_map_ref) {
    m_config_map_ref = config_map_ref;
    m_config_map_ref_isSet = true;
}

bool OAIEnvFromSource::is_config_map_ref_Set() const{
    return m_config_map_ref_isSet;
}

bool OAIEnvFromSource::is_config_map_ref_Valid() const{
    return m_config_map_ref_isValid;
}

QString OAIEnvFromSource::getPrefix() const {
    return m_prefix;
}
void OAIEnvFromSource::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIEnvFromSource::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIEnvFromSource::is_prefix_Valid() const{
    return m_prefix_isValid;
}

OAISecretEnvSource OAIEnvFromSource::getSecretRef() const {
    return m_secret_ref;
}
void OAIEnvFromSource::setSecretRef(const OAISecretEnvSource &secret_ref) {
    m_secret_ref = secret_ref;
    m_secret_ref_isSet = true;
}

bool OAIEnvFromSource::is_secret_ref_Set() const{
    return m_secret_ref_isSet;
}

bool OAIEnvFromSource::is_secret_ref_Valid() const{
    return m_secret_ref_isValid;
}

bool OAIEnvFromSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_map_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvFromSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
