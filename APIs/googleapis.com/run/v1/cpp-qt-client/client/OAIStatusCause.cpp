/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatusCause.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatusCause::OAIStatusCause(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatusCause::OAIStatusCause() {
    this->initializeModel();
}

OAIStatusCause::~OAIStatusCause() {}

void OAIStatusCause::initializeModel() {

    m_field_isSet = false;
    m_field_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAIStatusCause::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatusCause::fromJsonObject(QJsonObject json) {

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAIStatusCause::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatusCause::asJsonObject() const {
    QJsonObject obj;
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

QString OAIStatusCause::getField() const {
    return m_field;
}
void OAIStatusCause::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIStatusCause::is_field_Set() const{
    return m_field_isSet;
}

bool OAIStatusCause::is_field_Valid() const{
    return m_field_isValid;
}

QString OAIStatusCause::getMessage() const {
    return m_message;
}
void OAIStatusCause::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIStatusCause::is_message_Set() const{
    return m_message_isSet;
}

bool OAIStatusCause::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIStatusCause::getReason() const {
    return m_reason;
}
void OAIStatusCause::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIStatusCause::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIStatusCause::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIStatusCause::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatusCause::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
