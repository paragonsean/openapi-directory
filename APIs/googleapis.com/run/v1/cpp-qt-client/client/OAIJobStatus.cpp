/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobStatus::OAIJobStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobStatus::OAIJobStatus() {
    this->initializeModel();
}

OAIJobStatus::~OAIJobStatus() {}

void OAIJobStatus::initializeModel() {

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_execution_count_isSet = false;
    m_execution_count_isValid = false;

    m_latest_created_execution_isSet = false;
    m_latest_created_execution_isValid = false;

    m_observed_generation_isSet = false;
    m_observed_generation_isValid = false;
}

void OAIJobStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobStatus::fromJsonObject(QJsonObject json) {

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_execution_count_isValid = ::OpenAPI::fromJsonValue(m_execution_count, json[QString("executionCount")]);
    m_execution_count_isSet = !json[QString("executionCount")].isNull() && m_execution_count_isValid;

    m_latest_created_execution_isValid = ::OpenAPI::fromJsonValue(m_latest_created_execution, json[QString("latestCreatedExecution")]);
    m_latest_created_execution_isSet = !json[QString("latestCreatedExecution")].isNull() && m_latest_created_execution_isValid;

    m_observed_generation_isValid = ::OpenAPI::fromJsonValue(m_observed_generation, json[QString("observedGeneration")]);
    m_observed_generation_isSet = !json[QString("observedGeneration")].isNull() && m_observed_generation_isValid;
}

QString OAIJobStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_execution_count_isSet) {
        obj.insert(QString("executionCount"), ::OpenAPI::toJsonValue(m_execution_count));
    }
    if (m_latest_created_execution.isSet()) {
        obj.insert(QString("latestCreatedExecution"), ::OpenAPI::toJsonValue(m_latest_created_execution));
    }
    if (m_observed_generation_isSet) {
        obj.insert(QString("observedGeneration"), ::OpenAPI::toJsonValue(m_observed_generation));
    }
    return obj;
}

QList<OAIGoogleCloudRunV1Condition> OAIJobStatus::getConditions() const {
    return m_conditions;
}
void OAIJobStatus::setConditions(const QList<OAIGoogleCloudRunV1Condition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIJobStatus::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIJobStatus::is_conditions_Valid() const{
    return m_conditions_isValid;
}

qint32 OAIJobStatus::getExecutionCount() const {
    return m_execution_count;
}
void OAIJobStatus::setExecutionCount(const qint32 &execution_count) {
    m_execution_count = execution_count;
    m_execution_count_isSet = true;
}

bool OAIJobStatus::is_execution_count_Set() const{
    return m_execution_count_isSet;
}

bool OAIJobStatus::is_execution_count_Valid() const{
    return m_execution_count_isValid;
}

OAIExecutionReference OAIJobStatus::getLatestCreatedExecution() const {
    return m_latest_created_execution;
}
void OAIJobStatus::setLatestCreatedExecution(const OAIExecutionReference &latest_created_execution) {
    m_latest_created_execution = latest_created_execution;
    m_latest_created_execution_isSet = true;
}

bool OAIJobStatus::is_latest_created_execution_Set() const{
    return m_latest_created_execution_isSet;
}

bool OAIJobStatus::is_latest_created_execution_Valid() const{
    return m_latest_created_execution_isValid;
}

qint32 OAIJobStatus::getObservedGeneration() const {
    return m_observed_generation;
}
void OAIJobStatus::setObservedGeneration(const qint32 &observed_generation) {
    m_observed_generation = observed_generation;
    m_observed_generation_isSet = true;
}

bool OAIJobStatus::is_observed_generation_Set() const{
    return m_observed_generation_isSet;
}

bool OAIJobStatus::is_observed_generation_Valid() const{
    return m_observed_generation_isValid;
}

bool OAIJobStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_created_execution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_observed_generation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
