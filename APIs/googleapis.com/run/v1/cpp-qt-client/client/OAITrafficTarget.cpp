/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrafficTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrafficTarget::OAITrafficTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrafficTarget::OAITrafficTarget() {
    this->initializeModel();
}

OAITrafficTarget::~OAITrafficTarget() {}

void OAITrafficTarget::initializeModel() {

    m_configuration_name_isSet = false;
    m_configuration_name_isValid = false;

    m_latest_revision_isSet = false;
    m_latest_revision_isValid = false;

    m_percent_isSet = false;
    m_percent_isValid = false;

    m_revision_name_isSet = false;
    m_revision_name_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAITrafficTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrafficTarget::fromJsonObject(QJsonObject json) {

    m_configuration_name_isValid = ::OpenAPI::fromJsonValue(m_configuration_name, json[QString("configurationName")]);
    m_configuration_name_isSet = !json[QString("configurationName")].isNull() && m_configuration_name_isValid;

    m_latest_revision_isValid = ::OpenAPI::fromJsonValue(m_latest_revision, json[QString("latestRevision")]);
    m_latest_revision_isSet = !json[QString("latestRevision")].isNull() && m_latest_revision_isValid;

    m_percent_isValid = ::OpenAPI::fromJsonValue(m_percent, json[QString("percent")]);
    m_percent_isSet = !json[QString("percent")].isNull() && m_percent_isValid;

    m_revision_name_isValid = ::OpenAPI::fromJsonValue(m_revision_name, json[QString("revisionName")]);
    m_revision_name_isSet = !json[QString("revisionName")].isNull() && m_revision_name_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAITrafficTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrafficTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_name_isSet) {
        obj.insert(QString("configurationName"), ::OpenAPI::toJsonValue(m_configuration_name));
    }
    if (m_latest_revision_isSet) {
        obj.insert(QString("latestRevision"), ::OpenAPI::toJsonValue(m_latest_revision));
    }
    if (m_percent_isSet) {
        obj.insert(QString("percent"), ::OpenAPI::toJsonValue(m_percent));
    }
    if (m_revision_name_isSet) {
        obj.insert(QString("revisionName"), ::OpenAPI::toJsonValue(m_revision_name));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAITrafficTarget::getConfigurationName() const {
    return m_configuration_name;
}
void OAITrafficTarget::setConfigurationName(const QString &configuration_name) {
    m_configuration_name = configuration_name;
    m_configuration_name_isSet = true;
}

bool OAITrafficTarget::is_configuration_name_Set() const{
    return m_configuration_name_isSet;
}

bool OAITrafficTarget::is_configuration_name_Valid() const{
    return m_configuration_name_isValid;
}

bool OAITrafficTarget::isLatestRevision() const {
    return m_latest_revision;
}
void OAITrafficTarget::setLatestRevision(const bool &latest_revision) {
    m_latest_revision = latest_revision;
    m_latest_revision_isSet = true;
}

bool OAITrafficTarget::is_latest_revision_Set() const{
    return m_latest_revision_isSet;
}

bool OAITrafficTarget::is_latest_revision_Valid() const{
    return m_latest_revision_isValid;
}

qint32 OAITrafficTarget::getPercent() const {
    return m_percent;
}
void OAITrafficTarget::setPercent(const qint32 &percent) {
    m_percent = percent;
    m_percent_isSet = true;
}

bool OAITrafficTarget::is_percent_Set() const{
    return m_percent_isSet;
}

bool OAITrafficTarget::is_percent_Valid() const{
    return m_percent_isValid;
}

QString OAITrafficTarget::getRevisionName() const {
    return m_revision_name;
}
void OAITrafficTarget::setRevisionName(const QString &revision_name) {
    m_revision_name = revision_name;
    m_revision_name_isSet = true;
}

bool OAITrafficTarget::is_revision_name_Set() const{
    return m_revision_name_isSet;
}

bool OAITrafficTarget::is_revision_name_Valid() const{
    return m_revision_name_isValid;
}

QString OAITrafficTarget::getTag() const {
    return m_tag;
}
void OAITrafficTarget::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAITrafficTarget::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAITrafficTarget::is_tag_Valid() const{
    return m_tag_isValid;
}

QString OAITrafficTarget::getUrl() const {
    return m_url;
}
void OAITrafficTarget::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAITrafficTarget::is_url_Set() const{
    return m_url_isSet;
}

bool OAITrafficTarget::is_url_Valid() const{
    return m_url_isValid;
}

bool OAITrafficTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrafficTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
