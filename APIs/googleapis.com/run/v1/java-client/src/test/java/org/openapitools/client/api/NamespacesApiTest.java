/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DomainMapping;
import org.openapitools.client.model.Execution;
import org.openapitools.client.model.Job;
import org.openapitools.client.model.ListAuthorizedDomainsResponse;
import org.openapitools.client.model.ListConfigurationsResponse;
import org.openapitools.client.model.ListDomainMappingsResponse;
import org.openapitools.client.model.ListExecutionsResponse;
import org.openapitools.client.model.ListJobsResponse;
import org.openapitools.client.model.ListRevisionsResponse;
import org.openapitools.client.model.ListRoutesResponse;
import org.openapitools.client.model.ListServicesResponse;
import org.openapitools.client.model.ListTasksResponse;
import org.openapitools.client.model.RunJobRequest;
import org.openapitools.client.model.Service;
import org.openapitools.client.model.Status;
import org.openapitools.client.model.Task;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NamespacesApi
 */
@Disabled
public class NamespacesApiTest {

    private final NamespacesApi api = new NamespacesApi();

    /**
     * List authorized domains.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesAuthorizeddomainsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAuthorizedDomainsResponse response = api.runNamespacesAuthorizeddomainsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * List configurations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesConfigurationsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Boolean watch = null;
        ListConfigurationsResponse response = api.runNamespacesConfigurationsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, watch);
        // TODO: test validations
    }

    /**
     * Create a new domain mapping.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesDomainmappingsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String dryRun = null;
        DomainMapping domainMapping = null;
        DomainMapping response = api.runNamespacesDomainmappingsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dryRun, domainMapping);
        // TODO: test validations
    }

    /**
     * Delete a domain mapping.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesDomainmappingsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String apiVersion = null;
        String dryRun = null;
        String kind = null;
        String propagationPolicy = null;
        Status response = api.runNamespacesDomainmappingsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, apiVersion, dryRun, kind, propagationPolicy);
        // TODO: test validations
    }

    /**
     * Get information about a domain mapping.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesDomainmappingsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DomainMapping response = api.runNamespacesDomainmappingsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * List all domain mappings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesDomainmappingsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Boolean watch = null;
        ListDomainMappingsResponse response = api.runNamespacesDomainmappingsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, watch);
        // TODO: test validations
    }

    /**
     * Cancel an execution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesExecutionsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Execution response = api.runNamespacesExecutionsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * List executions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesExecutionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Boolean watch = null;
        ListExecutionsResponse response = api.runNamespacesExecutionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, watch);
        // TODO: test validations
    }

    /**
     * Create a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesJobsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Job job = null;
        Job response = api.runNamespacesJobsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, job);
        // TODO: test validations
    }

    /**
     * Delete a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesJobsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String apiVersion = null;
        String kind = null;
        String propagationPolicy = null;
        Status response = api.runNamespacesJobsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, apiVersion, kind, propagationPolicy);
        // TODO: test validations
    }

    /**
     * List jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesJobsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Boolean watch = null;
        ListJobsResponse response = api.runNamespacesJobsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, watch);
        // TODO: test validations
    }

    /**
     * Replace a job. Only the spec and metadata labels and annotations are modifiable. After the Replace request, Cloud Run will work to make the &#39;status&#39; match the requested &#39;spec&#39;. May provide metadata.resourceVersion to enforce update from last read for optimistic concurrency control.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesJobsReplaceJobTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Job job = null;
        Job response = api.runNamespacesJobsReplaceJob(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, job);
        // TODO: test validations
    }

    /**
     * Trigger creation of a new execution of this job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesJobsRunTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RunJobRequest runJobRequest = null;
        Execution response = api.runNamespacesJobsRun(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, runJobRequest);
        // TODO: test validations
    }

    /**
     * List revisions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesRevisionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Boolean watch = null;
        ListRevisionsResponse response = api.runNamespacesRevisionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, watch);
        // TODO: test validations
    }

    /**
     * List routes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesRoutesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Boolean watch = null;
        ListRoutesResponse response = api.runNamespacesRoutesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, watch);
        // TODO: test validations
    }

    /**
     * Creates a new Service. Service creation will trigger a new deployment. Use GetService, and check service.status to determine if the Service is ready.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesServicesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String dryRun = null;
        Service service = null;
        Service response = api.runNamespacesServicesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dryRun, service);
        // TODO: test validations
    }

    /**
     * Deletes the provided service. This will cause the Service to stop serving traffic and will delete all associated Revisions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesServicesDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String apiVersion = null;
        String dryRun = null;
        String kind = null;
        String propagationPolicy = null;
        Status response = api.runNamespacesServicesDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, apiVersion, dryRun, kind, propagationPolicy);
        // TODO: test validations
    }

    /**
     * Gets information about a service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesServicesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Service response = api.runNamespacesServicesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists services for the given project and region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesServicesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Boolean watch = null;
        ListServicesResponse response = api.runNamespacesServicesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, watch);
        // TODO: test validations
    }

    /**
     * Replaces a service. Only the spec and metadata labels and annotations are modifiable. After the Update request, Cloud Run will work to make the &#39;status&#39; match the requested &#39;spec&#39;. May provide metadata.resourceVersion to enforce update from last read for optimistic concurrency control.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesServicesReplaceServiceTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String dryRun = null;
        Service service = null;
        Service response = api.runNamespacesServicesReplaceService(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dryRun, service);
        // TODO: test validations
    }

    /**
     * Get information about a task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesTasksGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Task response = api.runNamespacesTasksGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * List tasks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runNamespacesTasksListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String _continue = null;
        String fieldSelector = null;
        Boolean includeUninitialized = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Boolean watch = null;
        ListTasksResponse response = api.runNamespacesTasksList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, _continue, fieldSelector, includeUninitialized, labelSelector, limit, resourceVersion, watch);
        // TODO: test validations
    }

}
