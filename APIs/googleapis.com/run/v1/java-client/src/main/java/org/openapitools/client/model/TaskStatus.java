/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudRunV1Condition;
import org.openapitools.client.model.TaskAttemptResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaskStatus represents the status of a task.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:12.475272-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaskStatus {
  public static final String SERIALIZED_NAME_COMPLETION_TIME = "completionTime";
  @SerializedName(SERIALIZED_NAME_COMPLETION_TIME)
  private String completionTime;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<GoogleCloudRunV1Condition> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_LAST_ATTEMPT_RESULT = "lastAttemptResult";
  @SerializedName(SERIALIZED_NAME_LAST_ATTEMPT_RESULT)
  private TaskAttemptResult lastAttemptResult;

  public static final String SERIALIZED_NAME_LOG_URI = "logUri";
  @SerializedName(SERIALIZED_NAME_LOG_URI)
  private String logUri;

  public static final String SERIALIZED_NAME_OBSERVED_GENERATION = "observedGeneration";
  @SerializedName(SERIALIZED_NAME_OBSERVED_GENERATION)
  private Integer observedGeneration;

  public static final String SERIALIZED_NAME_RETRIED = "retried";
  @SerializedName(SERIALIZED_NAME_RETRIED)
  private Integer retried;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public TaskStatus() {
  }

  public TaskStatus completionTime(String completionTime) {
    this.completionTime = completionTime;
    return this;
  }

  /**
   * Optional. Represents time when the task was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
   * @return completionTime
   */
  @javax.annotation.Nullable
  public String getCompletionTime() {
    return completionTime;
  }

  public void setCompletionTime(String completionTime) {
    this.completionTime = completionTime;
  }


  public TaskStatus conditions(List<GoogleCloudRunV1Condition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public TaskStatus addConditionsItem(GoogleCloudRunV1Condition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Optional. Conditions communicate information about ongoing/complete reconciliation processes that bring the \&quot;spec\&quot; inline with the observed state of the world. Task-specific conditions include: * &#x60;Started&#x60;: &#x60;True&#x60; when the task has started to execute. * &#x60;Completed&#x60;: &#x60;True&#x60; when the task has succeeded. &#x60;False&#x60; when the task has failed.
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRunV1Condition> getConditions() {
    return conditions;
  }

  public void setConditions(List<GoogleCloudRunV1Condition> conditions) {
    this.conditions = conditions;
  }


  public TaskStatus index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * Required. Index of the task, unique per execution, and beginning at 0.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public TaskStatus lastAttemptResult(TaskAttemptResult lastAttemptResult) {
    this.lastAttemptResult = lastAttemptResult;
    return this;
  }

  /**
   * Get lastAttemptResult
   * @return lastAttemptResult
   */
  @javax.annotation.Nullable
  public TaskAttemptResult getLastAttemptResult() {
    return lastAttemptResult;
  }

  public void setLastAttemptResult(TaskAttemptResult lastAttemptResult) {
    this.lastAttemptResult = lastAttemptResult;
  }


  public TaskStatus logUri(String logUri) {
    this.logUri = logUri;
    return this;
  }

  /**
   * Optional. URI where logs for this task can be found in Cloud Console.
   * @return logUri
   */
  @javax.annotation.Nullable
  public String getLogUri() {
    return logUri;
  }

  public void setLogUri(String logUri) {
    this.logUri = logUri;
  }


  public TaskStatus observedGeneration(Integer observedGeneration) {
    this.observedGeneration = observedGeneration;
    return this;
  }

  /**
   * Optional. The &#39;generation&#39; of the task that was last processed by the controller.
   * @return observedGeneration
   */
  @javax.annotation.Nullable
  public Integer getObservedGeneration() {
    return observedGeneration;
  }

  public void setObservedGeneration(Integer observedGeneration) {
    this.observedGeneration = observedGeneration;
  }


  public TaskStatus retried(Integer retried) {
    this.retried = retried;
    return this;
  }

  /**
   * Optional. The number of times this task was retried. Instances are retried when they fail up to the maxRetries limit.
   * @return retried
   */
  @javax.annotation.Nullable
  public Integer getRetried() {
    return retried;
  }

  public void setRetried(Integer retried) {
    this.retried = retried;
  }


  public TaskStatus startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Optional. Represents time when the task started to run. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskStatus taskStatus = (TaskStatus) o;
    return Objects.equals(this.completionTime, taskStatus.completionTime) &&
        Objects.equals(this.conditions, taskStatus.conditions) &&
        Objects.equals(this.index, taskStatus.index) &&
        Objects.equals(this.lastAttemptResult, taskStatus.lastAttemptResult) &&
        Objects.equals(this.logUri, taskStatus.logUri) &&
        Objects.equals(this.observedGeneration, taskStatus.observedGeneration) &&
        Objects.equals(this.retried, taskStatus.retried) &&
        Objects.equals(this.startTime, taskStatus.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completionTime, conditions, index, lastAttemptResult, logUri, observedGeneration, retried, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskStatus {\n");
    sb.append("    completionTime: ").append(toIndentedString(completionTime)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    lastAttemptResult: ").append(toIndentedString(lastAttemptResult)).append("\n");
    sb.append("    logUri: ").append(toIndentedString(logUri)).append("\n");
    sb.append("    observedGeneration: ").append(toIndentedString(observedGeneration)).append("\n");
    sb.append("    retried: ").append(toIndentedString(retried)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completionTime");
    openapiFields.add("conditions");
    openapiFields.add("index");
    openapiFields.add("lastAttemptResult");
    openapiFields.add("logUri");
    openapiFields.add("observedGeneration");
    openapiFields.add("retried");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaskStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskStatus is not found in the empty JSON string", TaskStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("completionTime") != null && !jsonObj.get("completionTime").isJsonNull()) && !jsonObj.get("completionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completionTime").toString()));
      }
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            GoogleCloudRunV1Condition.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
      // validate the optional field `lastAttemptResult`
      if (jsonObj.get("lastAttemptResult") != null && !jsonObj.get("lastAttemptResult").isJsonNull()) {
        TaskAttemptResult.validateJsonElement(jsonObj.get("lastAttemptResult"));
      }
      if ((jsonObj.get("logUri") != null && !jsonObj.get("logUri").isJsonNull()) && !jsonObj.get("logUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logUri").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskStatus>() {
           @Override
           public void write(JsonWriter out, TaskStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaskStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaskStatus
   * @throws IOException if the JSON string is invalid with respect to TaskStatus
   */
  public static TaskStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskStatus.class);
  }

  /**
   * Convert an instance of TaskStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

