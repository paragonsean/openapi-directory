/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudRunV1Condition;
import org.openapitools.client.model.ResourceRecord;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The current state of the Domain Mapping.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:12.475272-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DomainMappingStatus {
  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<GoogleCloudRunV1Condition> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAPPED_ROUTE_NAME = "mappedRouteName";
  @SerializedName(SERIALIZED_NAME_MAPPED_ROUTE_NAME)
  private String mappedRouteName;

  public static final String SERIALIZED_NAME_OBSERVED_GENERATION = "observedGeneration";
  @SerializedName(SERIALIZED_NAME_OBSERVED_GENERATION)
  private Integer observedGeneration;

  public static final String SERIALIZED_NAME_RESOURCE_RECORDS = "resourceRecords";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RECORDS)
  private List<ResourceRecord> resourceRecords = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public DomainMappingStatus() {
  }

  public DomainMappingStatus conditions(List<GoogleCloudRunV1Condition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public DomainMappingStatus addConditionsItem(GoogleCloudRunV1Condition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Array of observed DomainMappingConditions, indicating the current state of the DomainMapping.
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRunV1Condition> getConditions() {
    return conditions;
  }

  public void setConditions(List<GoogleCloudRunV1Condition> conditions) {
    this.conditions = conditions;
  }


  public DomainMappingStatus mappedRouteName(String mappedRouteName) {
    this.mappedRouteName = mappedRouteName;
    return this;
  }

  /**
   * The name of the route that the mapping currently points to.
   * @return mappedRouteName
   */
  @javax.annotation.Nullable
  public String getMappedRouteName() {
    return mappedRouteName;
  }

  public void setMappedRouteName(String mappedRouteName) {
    this.mappedRouteName = mappedRouteName;
  }


  public DomainMappingStatus observedGeneration(Integer observedGeneration) {
    this.observedGeneration = observedGeneration;
    return this;
  }

  /**
   * ObservedGeneration is the &#39;Generation&#39; of the DomainMapping that was last processed by the controller. Clients polling for completed reconciliation should poll until observedGeneration &#x3D; metadata.generation and the Ready condition&#39;s status is True or False.
   * @return observedGeneration
   */
  @javax.annotation.Nullable
  public Integer getObservedGeneration() {
    return observedGeneration;
  }

  public void setObservedGeneration(Integer observedGeneration) {
    this.observedGeneration = observedGeneration;
  }


  public DomainMappingStatus resourceRecords(List<ResourceRecord> resourceRecords) {
    this.resourceRecords = resourceRecords;
    return this;
  }

  public DomainMappingStatus addResourceRecordsItem(ResourceRecord resourceRecordsItem) {
    if (this.resourceRecords == null) {
      this.resourceRecords = new ArrayList<>();
    }
    this.resourceRecords.add(resourceRecordsItem);
    return this;
  }

  /**
   * The resource records required to configure this domain mapping. These records must be added to the domain&#39;s DNS configuration in order to serve the application via this domain mapping.
   * @return resourceRecords
   */
  @javax.annotation.Nullable
  public List<ResourceRecord> getResourceRecords() {
    return resourceRecords;
  }

  public void setResourceRecords(List<ResourceRecord> resourceRecords) {
    this.resourceRecords = resourceRecords;
  }


  public DomainMappingStatus url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Optional. Not supported by Cloud Run.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainMappingStatus domainMappingStatus = (DomainMappingStatus) o;
    return Objects.equals(this.conditions, domainMappingStatus.conditions) &&
        Objects.equals(this.mappedRouteName, domainMappingStatus.mappedRouteName) &&
        Objects.equals(this.observedGeneration, domainMappingStatus.observedGeneration) &&
        Objects.equals(this.resourceRecords, domainMappingStatus.resourceRecords) &&
        Objects.equals(this.url, domainMappingStatus.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditions, mappedRouteName, observedGeneration, resourceRecords, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainMappingStatus {\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    mappedRouteName: ").append(toIndentedString(mappedRouteName)).append("\n");
    sb.append("    observedGeneration: ").append(toIndentedString(observedGeneration)).append("\n");
    sb.append("    resourceRecords: ").append(toIndentedString(resourceRecords)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conditions");
    openapiFields.add("mappedRouteName");
    openapiFields.add("observedGeneration");
    openapiFields.add("resourceRecords");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DomainMappingStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainMappingStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainMappingStatus is not found in the empty JSON string", DomainMappingStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainMappingStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainMappingStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            GoogleCloudRunV1Condition.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
      if ((jsonObj.get("mappedRouteName") != null && !jsonObj.get("mappedRouteName").isJsonNull()) && !jsonObj.get("mappedRouteName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mappedRouteName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mappedRouteName").toString()));
      }
      if (jsonObj.get("resourceRecords") != null && !jsonObj.get("resourceRecords").isJsonNull()) {
        JsonArray jsonArrayresourceRecords = jsonObj.getAsJsonArray("resourceRecords");
        if (jsonArrayresourceRecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resourceRecords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resourceRecords` to be an array in the JSON string but got `%s`", jsonObj.get("resourceRecords").toString()));
          }

          // validate the optional field `resourceRecords` (array)
          for (int i = 0; i < jsonArrayresourceRecords.size(); i++) {
            ResourceRecord.validateJsonElement(jsonArrayresourceRecords.get(i));
          };
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainMappingStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainMappingStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainMappingStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainMappingStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainMappingStatus>() {
           @Override
           public void write(JsonWriter out, DomainMappingStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainMappingStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DomainMappingStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DomainMappingStatus
   * @throws IOException if the JSON string is invalid with respect to DomainMappingStatus
   */
  public static DomainMappingStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainMappingStatus.class);
  }

  /**
   * Convert an instance of DomainMappingStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

