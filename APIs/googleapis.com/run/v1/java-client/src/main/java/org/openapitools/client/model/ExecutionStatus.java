/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudRunV1Condition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExecutionStatus represents the current state of an Execution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:12.475272-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExecutionStatus {
  public static final String SERIALIZED_NAME_CANCELLED_COUNT = "cancelledCount";
  @SerializedName(SERIALIZED_NAME_CANCELLED_COUNT)
  private Integer cancelledCount;

  public static final String SERIALIZED_NAME_COMPLETION_TIME = "completionTime";
  @SerializedName(SERIALIZED_NAME_COMPLETION_TIME)
  private String completionTime;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<GoogleCloudRunV1Condition> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAILED_COUNT = "failedCount";
  @SerializedName(SERIALIZED_NAME_FAILED_COUNT)
  private Integer failedCount;

  public static final String SERIALIZED_NAME_LOG_URI = "logUri";
  @SerializedName(SERIALIZED_NAME_LOG_URI)
  private String logUri;

  public static final String SERIALIZED_NAME_OBSERVED_GENERATION = "observedGeneration";
  @SerializedName(SERIALIZED_NAME_OBSERVED_GENERATION)
  private Integer observedGeneration;

  public static final String SERIALIZED_NAME_RETRIED_COUNT = "retriedCount";
  @SerializedName(SERIALIZED_NAME_RETRIED_COUNT)
  private Integer retriedCount;

  public static final String SERIALIZED_NAME_RUNNING_COUNT = "runningCount";
  @SerializedName(SERIALIZED_NAME_RUNNING_COUNT)
  private Integer runningCount;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_SUCCEEDED_COUNT = "succeededCount";
  @SerializedName(SERIALIZED_NAME_SUCCEEDED_COUNT)
  private Integer succeededCount;

  public ExecutionStatus() {
  }

  public ExecutionStatus cancelledCount(Integer cancelledCount) {
    this.cancelledCount = cancelledCount;
    return this;
  }

  /**
   * Optional. The number of tasks which reached phase Cancelled.
   * @return cancelledCount
   */
  @javax.annotation.Nullable
  public Integer getCancelledCount() {
    return cancelledCount;
  }

  public void setCancelledCount(Integer cancelledCount) {
    this.cancelledCount = cancelledCount;
  }


  public ExecutionStatus completionTime(String completionTime) {
    this.completionTime = completionTime;
    return this;
  }

  /**
   * Optional. Represents the time that the execution was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
   * @return completionTime
   */
  @javax.annotation.Nullable
  public String getCompletionTime() {
    return completionTime;
  }

  public void setCompletionTime(String completionTime) {
    this.completionTime = completionTime;
  }


  public ExecutionStatus conditions(List<GoogleCloudRunV1Condition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public ExecutionStatus addConditionsItem(GoogleCloudRunV1Condition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Optional. Conditions communicate information about ongoing/complete reconciliation processes that bring the \&quot;spec\&quot; inline with the observed state of the world. Execution-specific conditions include: * &#x60;ResourcesAvailable&#x60;: &#x60;True&#x60; when underlying resources have been provisioned. * &#x60;Started&#x60;: &#x60;True&#x60; when the execution has started to execute. * &#x60;Completed&#x60;: &#x60;True&#x60; when the execution has succeeded. &#x60;False&#x60; when the execution has failed.
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRunV1Condition> getConditions() {
    return conditions;
  }

  public void setConditions(List<GoogleCloudRunV1Condition> conditions) {
    this.conditions = conditions;
  }


  public ExecutionStatus failedCount(Integer failedCount) {
    this.failedCount = failedCount;
    return this;
  }

  /**
   * Optional. The number of tasks which reached phase Failed.
   * @return failedCount
   */
  @javax.annotation.Nullable
  public Integer getFailedCount() {
    return failedCount;
  }

  public void setFailedCount(Integer failedCount) {
    this.failedCount = failedCount;
  }


  public ExecutionStatus logUri(String logUri) {
    this.logUri = logUri;
    return this;
  }

  /**
   * Optional. URI where logs for this execution can be found in Cloud Console.
   * @return logUri
   */
  @javax.annotation.Nullable
  public String getLogUri() {
    return logUri;
  }

  public void setLogUri(String logUri) {
    this.logUri = logUri;
  }


  public ExecutionStatus observedGeneration(Integer observedGeneration) {
    this.observedGeneration = observedGeneration;
    return this;
  }

  /**
   * Optional. The &#39;generation&#39; of the execution that was last processed by the controller.
   * @return observedGeneration
   */
  @javax.annotation.Nullable
  public Integer getObservedGeneration() {
    return observedGeneration;
  }

  public void setObservedGeneration(Integer observedGeneration) {
    this.observedGeneration = observedGeneration;
  }


  public ExecutionStatus retriedCount(Integer retriedCount) {
    this.retriedCount = retriedCount;
    return this;
  }

  /**
   * Optional. The number of tasks which have retried at least once.
   * @return retriedCount
   */
  @javax.annotation.Nullable
  public Integer getRetriedCount() {
    return retriedCount;
  }

  public void setRetriedCount(Integer retriedCount) {
    this.retriedCount = retriedCount;
  }


  public ExecutionStatus runningCount(Integer runningCount) {
    this.runningCount = runningCount;
    return this;
  }

  /**
   * Optional. The number of actively running tasks.
   * @return runningCount
   */
  @javax.annotation.Nullable
  public Integer getRunningCount() {
    return runningCount;
  }

  public void setRunningCount(Integer runningCount) {
    this.runningCount = runningCount;
  }


  public ExecutionStatus startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Optional. Represents the time that the execution started to run. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public ExecutionStatus succeededCount(Integer succeededCount) {
    this.succeededCount = succeededCount;
    return this;
  }

  /**
   * Optional. The number of tasks which reached phase Succeeded.
   * @return succeededCount
   */
  @javax.annotation.Nullable
  public Integer getSucceededCount() {
    return succeededCount;
  }

  public void setSucceededCount(Integer succeededCount) {
    this.succeededCount = succeededCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecutionStatus executionStatus = (ExecutionStatus) o;
    return Objects.equals(this.cancelledCount, executionStatus.cancelledCount) &&
        Objects.equals(this.completionTime, executionStatus.completionTime) &&
        Objects.equals(this.conditions, executionStatus.conditions) &&
        Objects.equals(this.failedCount, executionStatus.failedCount) &&
        Objects.equals(this.logUri, executionStatus.logUri) &&
        Objects.equals(this.observedGeneration, executionStatus.observedGeneration) &&
        Objects.equals(this.retriedCount, executionStatus.retriedCount) &&
        Objects.equals(this.runningCount, executionStatus.runningCount) &&
        Objects.equals(this.startTime, executionStatus.startTime) &&
        Objects.equals(this.succeededCount, executionStatus.succeededCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancelledCount, completionTime, conditions, failedCount, logUri, observedGeneration, retriedCount, runningCount, startTime, succeededCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecutionStatus {\n");
    sb.append("    cancelledCount: ").append(toIndentedString(cancelledCount)).append("\n");
    sb.append("    completionTime: ").append(toIndentedString(completionTime)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    failedCount: ").append(toIndentedString(failedCount)).append("\n");
    sb.append("    logUri: ").append(toIndentedString(logUri)).append("\n");
    sb.append("    observedGeneration: ").append(toIndentedString(observedGeneration)).append("\n");
    sb.append("    retriedCount: ").append(toIndentedString(retriedCount)).append("\n");
    sb.append("    runningCount: ").append(toIndentedString(runningCount)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    succeededCount: ").append(toIndentedString(succeededCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cancelledCount");
    openapiFields.add("completionTime");
    openapiFields.add("conditions");
    openapiFields.add("failedCount");
    openapiFields.add("logUri");
    openapiFields.add("observedGeneration");
    openapiFields.add("retriedCount");
    openapiFields.add("runningCount");
    openapiFields.add("startTime");
    openapiFields.add("succeededCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExecutionStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExecutionStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExecutionStatus is not found in the empty JSON string", ExecutionStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExecutionStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExecutionStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("completionTime") != null && !jsonObj.get("completionTime").isJsonNull()) && !jsonObj.get("completionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completionTime").toString()));
      }
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            GoogleCloudRunV1Condition.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
      if ((jsonObj.get("logUri") != null && !jsonObj.get("logUri").isJsonNull()) && !jsonObj.get("logUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logUri").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExecutionStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExecutionStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExecutionStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExecutionStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ExecutionStatus>() {
           @Override
           public void write(JsonWriter out, ExecutionStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExecutionStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExecutionStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExecutionStatus
   * @throws IOException if the JSON string is invalid with respect to ExecutionStatus
   */
  public static ExecutionStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExecutionStatus.class);
  }

  /**
   * Convert an instance of ExecutionStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

