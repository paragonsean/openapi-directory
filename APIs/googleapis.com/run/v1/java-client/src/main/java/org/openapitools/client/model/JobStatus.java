/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExecutionReference;
import org.openapitools.client.model.GoogleCloudRunV1Condition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobStatus represents the current state of a Job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:12.475272-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobStatus {
  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<GoogleCloudRunV1Condition> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXECUTION_COUNT = "executionCount";
  @SerializedName(SERIALIZED_NAME_EXECUTION_COUNT)
  private Integer executionCount;

  public static final String SERIALIZED_NAME_LATEST_CREATED_EXECUTION = "latestCreatedExecution";
  @SerializedName(SERIALIZED_NAME_LATEST_CREATED_EXECUTION)
  private ExecutionReference latestCreatedExecution;

  public static final String SERIALIZED_NAME_OBSERVED_GENERATION = "observedGeneration";
  @SerializedName(SERIALIZED_NAME_OBSERVED_GENERATION)
  private Integer observedGeneration;

  public JobStatus() {
  }

  public JobStatus conditions(List<GoogleCloudRunV1Condition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public JobStatus addConditionsItem(GoogleCloudRunV1Condition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Conditions communicate information about ongoing/complete reconciliation processes that bring the \&quot;spec\&quot; inline with the observed state of the world. Job-specific conditions include: * &#x60;Ready&#x60;: &#x60;True&#x60; when the job is ready to be executed.
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRunV1Condition> getConditions() {
    return conditions;
  }

  public void setConditions(List<GoogleCloudRunV1Condition> conditions) {
    this.conditions = conditions;
  }


  public JobStatus executionCount(Integer executionCount) {
    this.executionCount = executionCount;
    return this;
  }

  /**
   * Number of executions created for this job.
   * @return executionCount
   */
  @javax.annotation.Nullable
  public Integer getExecutionCount() {
    return executionCount;
  }

  public void setExecutionCount(Integer executionCount) {
    this.executionCount = executionCount;
  }


  public JobStatus latestCreatedExecution(ExecutionReference latestCreatedExecution) {
    this.latestCreatedExecution = latestCreatedExecution;
    return this;
  }

  /**
   * Get latestCreatedExecution
   * @return latestCreatedExecution
   */
  @javax.annotation.Nullable
  public ExecutionReference getLatestCreatedExecution() {
    return latestCreatedExecution;
  }

  public void setLatestCreatedExecution(ExecutionReference latestCreatedExecution) {
    this.latestCreatedExecution = latestCreatedExecution;
  }


  public JobStatus observedGeneration(Integer observedGeneration) {
    this.observedGeneration = observedGeneration;
    return this;
  }

  /**
   * The &#39;generation&#39; of the job that was last processed by the controller.
   * @return observedGeneration
   */
  @javax.annotation.Nullable
  public Integer getObservedGeneration() {
    return observedGeneration;
  }

  public void setObservedGeneration(Integer observedGeneration) {
    this.observedGeneration = observedGeneration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobStatus jobStatus = (JobStatus) o;
    return Objects.equals(this.conditions, jobStatus.conditions) &&
        Objects.equals(this.executionCount, jobStatus.executionCount) &&
        Objects.equals(this.latestCreatedExecution, jobStatus.latestCreatedExecution) &&
        Objects.equals(this.observedGeneration, jobStatus.observedGeneration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditions, executionCount, latestCreatedExecution, observedGeneration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobStatus {\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    executionCount: ").append(toIndentedString(executionCount)).append("\n");
    sb.append("    latestCreatedExecution: ").append(toIndentedString(latestCreatedExecution)).append("\n");
    sb.append("    observedGeneration: ").append(toIndentedString(observedGeneration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conditions");
    openapiFields.add("executionCount");
    openapiFields.add("latestCreatedExecution");
    openapiFields.add("observedGeneration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobStatus is not found in the empty JSON string", JobStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            GoogleCloudRunV1Condition.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
      // validate the optional field `latestCreatedExecution`
      if (jsonObj.get("latestCreatedExecution") != null && !jsonObj.get("latestCreatedExecution").isJsonNull()) {
        ExecutionReference.validateJsonElement(jsonObj.get("latestCreatedExecution"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<JobStatus>() {
           @Override
           public void write(JsonWriter out, JobStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobStatus
   * @throws IOException if the JSON string is invalid with respect to JobStatus
   */
  public static JobStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobStatus.class);
  }

  /**
   * Convert an instance of JobStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

