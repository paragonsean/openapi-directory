/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudRunV1Condition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigurationStatus communicates the observed state of the Configuration (from the controller).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:12.475272-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigurationStatus {
  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<GoogleCloudRunV1Condition> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_LATEST_CREATED_REVISION_NAME = "latestCreatedRevisionName";
  @SerializedName(SERIALIZED_NAME_LATEST_CREATED_REVISION_NAME)
  private String latestCreatedRevisionName;

  public static final String SERIALIZED_NAME_LATEST_READY_REVISION_NAME = "latestReadyRevisionName";
  @SerializedName(SERIALIZED_NAME_LATEST_READY_REVISION_NAME)
  private String latestReadyRevisionName;

  public static final String SERIALIZED_NAME_OBSERVED_GENERATION = "observedGeneration";
  @SerializedName(SERIALIZED_NAME_OBSERVED_GENERATION)
  private Integer observedGeneration;

  public ConfigurationStatus() {
  }

  public ConfigurationStatus conditions(List<GoogleCloudRunV1Condition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public ConfigurationStatus addConditionsItem(GoogleCloudRunV1Condition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Conditions communicate information about ongoing/complete reconciliation processes that bring the \&quot;spec\&quot; inline with the observed state of the world.
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRunV1Condition> getConditions() {
    return conditions;
  }

  public void setConditions(List<GoogleCloudRunV1Condition> conditions) {
    this.conditions = conditions;
  }


  public ConfigurationStatus latestCreatedRevisionName(String latestCreatedRevisionName) {
    this.latestCreatedRevisionName = latestCreatedRevisionName;
    return this;
  }

  /**
   * LatestCreatedRevisionName is the last revision that was created from this Configuration. It might not be ready yet, so for the latest ready revision, use LatestReadyRevisionName.
   * @return latestCreatedRevisionName
   */
  @javax.annotation.Nullable
  public String getLatestCreatedRevisionName() {
    return latestCreatedRevisionName;
  }

  public void setLatestCreatedRevisionName(String latestCreatedRevisionName) {
    this.latestCreatedRevisionName = latestCreatedRevisionName;
  }


  public ConfigurationStatus latestReadyRevisionName(String latestReadyRevisionName) {
    this.latestReadyRevisionName = latestReadyRevisionName;
    return this;
  }

  /**
   * LatestReadyRevisionName holds the name of the latest Revision stamped out from this Configuration that has had its \&quot;Ready\&quot; condition become \&quot;True\&quot;.
   * @return latestReadyRevisionName
   */
  @javax.annotation.Nullable
  public String getLatestReadyRevisionName() {
    return latestReadyRevisionName;
  }

  public void setLatestReadyRevisionName(String latestReadyRevisionName) {
    this.latestReadyRevisionName = latestReadyRevisionName;
  }


  public ConfigurationStatus observedGeneration(Integer observedGeneration) {
    this.observedGeneration = observedGeneration;
    return this;
  }

  /**
   * ObservedGeneration is the &#39;Generation&#39; of the Configuration that was last processed by the controller. The observed generation is updated even if the controller failed to process the spec and create the Revision. Clients polling for completed reconciliation should poll until observedGeneration &#x3D; metadata.generation, and the Ready condition&#39;s status is True or False.
   * @return observedGeneration
   */
  @javax.annotation.Nullable
  public Integer getObservedGeneration() {
    return observedGeneration;
  }

  public void setObservedGeneration(Integer observedGeneration) {
    this.observedGeneration = observedGeneration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigurationStatus configurationStatus = (ConfigurationStatus) o;
    return Objects.equals(this.conditions, configurationStatus.conditions) &&
        Objects.equals(this.latestCreatedRevisionName, configurationStatus.latestCreatedRevisionName) &&
        Objects.equals(this.latestReadyRevisionName, configurationStatus.latestReadyRevisionName) &&
        Objects.equals(this.observedGeneration, configurationStatus.observedGeneration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditions, latestCreatedRevisionName, latestReadyRevisionName, observedGeneration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigurationStatus {\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    latestCreatedRevisionName: ").append(toIndentedString(latestCreatedRevisionName)).append("\n");
    sb.append("    latestReadyRevisionName: ").append(toIndentedString(latestReadyRevisionName)).append("\n");
    sb.append("    observedGeneration: ").append(toIndentedString(observedGeneration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conditions");
    openapiFields.add("latestCreatedRevisionName");
    openapiFields.add("latestReadyRevisionName");
    openapiFields.add("observedGeneration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigurationStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigurationStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigurationStatus is not found in the empty JSON string", ConfigurationStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigurationStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigurationStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            GoogleCloudRunV1Condition.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
      if ((jsonObj.get("latestCreatedRevisionName") != null && !jsonObj.get("latestCreatedRevisionName").isJsonNull()) && !jsonObj.get("latestCreatedRevisionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latestCreatedRevisionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latestCreatedRevisionName").toString()));
      }
      if ((jsonObj.get("latestReadyRevisionName") != null && !jsonObj.get("latestReadyRevisionName").isJsonNull()) && !jsonObj.get("latestReadyRevisionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latestReadyRevisionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latestReadyRevisionName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigurationStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigurationStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigurationStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigurationStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigurationStatus>() {
           @Override
           public void write(JsonWriter out, ConfigurationStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigurationStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigurationStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigurationStatus
   * @throws IOException if the JSON string is invalid with respect to ConfigurationStatus
   */
  public static ConfigurationStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigurationStatus.class);
  }

  /**
   * Convert an instance of ConfigurationStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

