/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The desired state of the Domain Mapping.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:12.475272-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DomainMappingSpec {
  /**
   * The mode of the certificate.
   */
  @JsonAdapter(CertificateModeEnum.Adapter.class)
  public enum CertificateModeEnum {
    CERTIFICATE_MODE_UNSPECIFIED("CERTIFICATE_MODE_UNSPECIFIED"),
    
    NONE("NONE"),
    
    AUTOMATIC("AUTOMATIC");

    private String value;

    CertificateModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CertificateModeEnum fromValue(String value) {
      for (CertificateModeEnum b : CertificateModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CertificateModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CertificateModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CertificateModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CertificateModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CertificateModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CERTIFICATE_MODE = "certificateMode";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_MODE)
  private CertificateModeEnum certificateMode;

  public static final String SERIALIZED_NAME_FORCE_OVERRIDE = "forceOverride";
  @SerializedName(SERIALIZED_NAME_FORCE_OVERRIDE)
  private Boolean forceOverride;

  public static final String SERIALIZED_NAME_ROUTE_NAME = "routeName";
  @SerializedName(SERIALIZED_NAME_ROUTE_NAME)
  private String routeName;

  public DomainMappingSpec() {
  }

  public DomainMappingSpec certificateMode(CertificateModeEnum certificateMode) {
    this.certificateMode = certificateMode;
    return this;
  }

  /**
   * The mode of the certificate.
   * @return certificateMode
   */
  @javax.annotation.Nullable
  public CertificateModeEnum getCertificateMode() {
    return certificateMode;
  }

  public void setCertificateMode(CertificateModeEnum certificateMode) {
    this.certificateMode = certificateMode;
  }


  public DomainMappingSpec forceOverride(Boolean forceOverride) {
    this.forceOverride = forceOverride;
    return this;
  }

  /**
   * If set, the mapping will override any mapping set before this spec was set. It is recommended that the user leaves this empty to receive an error warning about a potential conflict and only set it once the respective UI has given such a warning.
   * @return forceOverride
   */
  @javax.annotation.Nullable
  public Boolean getForceOverride() {
    return forceOverride;
  }

  public void setForceOverride(Boolean forceOverride) {
    this.forceOverride = forceOverride;
  }


  public DomainMappingSpec routeName(String routeName) {
    this.routeName = routeName;
    return this;
  }

  /**
   * The name of the Knative Route that this DomainMapping applies to. The route must exist.
   * @return routeName
   */
  @javax.annotation.Nullable
  public String getRouteName() {
    return routeName;
  }

  public void setRouteName(String routeName) {
    this.routeName = routeName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainMappingSpec domainMappingSpec = (DomainMappingSpec) o;
    return Objects.equals(this.certificateMode, domainMappingSpec.certificateMode) &&
        Objects.equals(this.forceOverride, domainMappingSpec.forceOverride) &&
        Objects.equals(this.routeName, domainMappingSpec.routeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateMode, forceOverride, routeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainMappingSpec {\n");
    sb.append("    certificateMode: ").append(toIndentedString(certificateMode)).append("\n");
    sb.append("    forceOverride: ").append(toIndentedString(forceOverride)).append("\n");
    sb.append("    routeName: ").append(toIndentedString(routeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certificateMode");
    openapiFields.add("forceOverride");
    openapiFields.add("routeName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DomainMappingSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainMappingSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainMappingSpec is not found in the empty JSON string", DomainMappingSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainMappingSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainMappingSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("certificateMode") != null && !jsonObj.get("certificateMode").isJsonNull()) && !jsonObj.get("certificateMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateMode").toString()));
      }
      // validate the optional field `certificateMode`
      if (jsonObj.get("certificateMode") != null && !jsonObj.get("certificateMode").isJsonNull()) {
        CertificateModeEnum.validateJsonElement(jsonObj.get("certificateMode"));
      }
      if ((jsonObj.get("routeName") != null && !jsonObj.get("routeName").isJsonNull()) && !jsonObj.get("routeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainMappingSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainMappingSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainMappingSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainMappingSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainMappingSpec>() {
           @Override
           public void write(JsonWriter out, DomainMappingSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainMappingSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DomainMappingSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DomainMappingSpec
   * @throws IOException if the JSON string is invalid with respect to DomainMappingSpec
   */
  public static DomainMappingSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainMappingSpec.class);
  }

  /**
   * Convert an instance of DomainMappingSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

