/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudRunV1Condition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RevisionStatus communicates the observed state of the Revision (from the controller).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:12.475272-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RevisionStatus {
  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<GoogleCloudRunV1Condition> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESIRED_REPLICAS = "desiredReplicas";
  @SerializedName(SERIALIZED_NAME_DESIRED_REPLICAS)
  private Integer desiredReplicas;

  public static final String SERIALIZED_NAME_IMAGE_DIGEST = "imageDigest";
  @SerializedName(SERIALIZED_NAME_IMAGE_DIGEST)
  private String imageDigest;

  public static final String SERIALIZED_NAME_LOG_URL = "logUrl";
  @SerializedName(SERIALIZED_NAME_LOG_URL)
  private String logUrl;

  public static final String SERIALIZED_NAME_OBSERVED_GENERATION = "observedGeneration";
  @SerializedName(SERIALIZED_NAME_OBSERVED_GENERATION)
  private Integer observedGeneration;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "serviceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public RevisionStatus() {
  }

  public RevisionStatus(
     Integer desiredReplicas
  ) {
    this();
    this.desiredReplicas = desiredReplicas;
  }

  public RevisionStatus conditions(List<GoogleCloudRunV1Condition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public RevisionStatus addConditionsItem(GoogleCloudRunV1Condition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Conditions communicate information about ongoing/complete reconciliation processes that bring the \&quot;spec\&quot; inline with the observed state of the world. As a Revision is being prepared, it will incrementally update conditions. Revision-specific conditions include: * &#x60;ResourcesAvailable&#x60;: &#x60;True&#x60; when underlying resources have been provisioned. * &#x60;ContainerHealthy&#x60;: &#x60;True&#x60; when the Revision readiness check completes. * &#x60;Active&#x60;: &#x60;True&#x60; when the Revision may receive traffic.
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRunV1Condition> getConditions() {
    return conditions;
  }

  public void setConditions(List<GoogleCloudRunV1Condition> conditions) {
    this.conditions = conditions;
  }


  /**
   * Output only. The configured number of instances running this revision. For Cloud Run, this only includes instances provisioned using the minScale annotation. It does not include instances created by autoscaling.
   * @return desiredReplicas
   */
  @javax.annotation.Nullable
  public Integer getDesiredReplicas() {
    return desiredReplicas;
  }



  public RevisionStatus imageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
    return this;
  }

  /**
   * ImageDigest holds the resolved digest for the image specified within .Spec.Container.Image. The digest is resolved during the creation of Revision. This field holds the digest value regardless of whether a tag or digest was originally specified in the Container object.
   * @return imageDigest
   */
  @javax.annotation.Nullable
  public String getImageDigest() {
    return imageDigest;
  }

  public void setImageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
  }


  public RevisionStatus logUrl(String logUrl) {
    this.logUrl = logUrl;
    return this;
  }

  /**
   * Optional. Specifies the generated logging url for this particular revision based on the revision url template specified in the controller&#39;s config.
   * @return logUrl
   */
  @javax.annotation.Nullable
  public String getLogUrl() {
    return logUrl;
  }

  public void setLogUrl(String logUrl) {
    this.logUrl = logUrl;
  }


  public RevisionStatus observedGeneration(Integer observedGeneration) {
    this.observedGeneration = observedGeneration;
    return this;
  }

  /**
   * ObservedGeneration is the &#39;Generation&#39; of the Revision that was last processed by the controller. Clients polling for completed reconciliation should poll until observedGeneration &#x3D; metadata.generation, and the Ready condition&#39;s status is True or False.
   * @return observedGeneration
   */
  @javax.annotation.Nullable
  public Integer getObservedGeneration() {
    return observedGeneration;
  }

  public void setObservedGeneration(Integer observedGeneration) {
    this.observedGeneration = observedGeneration;
  }


  public RevisionStatus serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * Not currently used by Cloud Run.
   * @return serviceName
   */
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RevisionStatus revisionStatus = (RevisionStatus) o;
    return Objects.equals(this.conditions, revisionStatus.conditions) &&
        Objects.equals(this.desiredReplicas, revisionStatus.desiredReplicas) &&
        Objects.equals(this.imageDigest, revisionStatus.imageDigest) &&
        Objects.equals(this.logUrl, revisionStatus.logUrl) &&
        Objects.equals(this.observedGeneration, revisionStatus.observedGeneration) &&
        Objects.equals(this.serviceName, revisionStatus.serviceName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditions, desiredReplicas, imageDigest, logUrl, observedGeneration, serviceName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RevisionStatus {\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    desiredReplicas: ").append(toIndentedString(desiredReplicas)).append("\n");
    sb.append("    imageDigest: ").append(toIndentedString(imageDigest)).append("\n");
    sb.append("    logUrl: ").append(toIndentedString(logUrl)).append("\n");
    sb.append("    observedGeneration: ").append(toIndentedString(observedGeneration)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conditions");
    openapiFields.add("desiredReplicas");
    openapiFields.add("imageDigest");
    openapiFields.add("logUrl");
    openapiFields.add("observedGeneration");
    openapiFields.add("serviceName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RevisionStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RevisionStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RevisionStatus is not found in the empty JSON string", RevisionStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RevisionStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RevisionStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            GoogleCloudRunV1Condition.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
      if ((jsonObj.get("imageDigest") != null && !jsonObj.get("imageDigest").isJsonNull()) && !jsonObj.get("imageDigest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageDigest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageDigest").toString()));
      }
      if ((jsonObj.get("logUrl") != null && !jsonObj.get("logUrl").isJsonNull()) && !jsonObj.get("logUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logUrl").toString()));
      }
      if ((jsonObj.get("serviceName") != null && !jsonObj.get("serviceName").isJsonNull()) && !jsonObj.get("serviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RevisionStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RevisionStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RevisionStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RevisionStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<RevisionStatus>() {
           @Override
           public void write(JsonWriter out, RevisionStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RevisionStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RevisionStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RevisionStatus
   * @throws IOException if the JSON string is invalid with respect to RevisionStatus
   */
  public static RevisionStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RevisionStatus.class);
  }

  /**
   * Convert an instance of RevisionStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

