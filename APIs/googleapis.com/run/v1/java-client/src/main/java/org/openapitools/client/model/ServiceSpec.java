/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RevisionTemplate;
import org.openapitools.client.model.TrafficTarget;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServiceSpec holds the desired state of the Route (from the client), which is used to manipulate the underlying Route and Configuration(s).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:12.475272-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceSpec {
  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private RevisionTemplate template;

  public static final String SERIALIZED_NAME_TRAFFIC = "traffic";
  @SerializedName(SERIALIZED_NAME_TRAFFIC)
  private List<TrafficTarget> traffic = new ArrayList<>();

  public ServiceSpec() {
  }

  public ServiceSpec template(RevisionTemplate template) {
    this.template = template;
    return this;
  }

  /**
   * Get template
   * @return template
   */
  @javax.annotation.Nullable
  public RevisionTemplate getTemplate() {
    return template;
  }

  public void setTemplate(RevisionTemplate template) {
    this.template = template;
  }


  public ServiceSpec traffic(List<TrafficTarget> traffic) {
    this.traffic = traffic;
    return this;
  }

  public ServiceSpec addTrafficItem(TrafficTarget trafficItem) {
    if (this.traffic == null) {
      this.traffic = new ArrayList<>();
    }
    this.traffic.add(trafficItem);
    return this;
  }

  /**
   * Specifies how to distribute traffic over a collection of Knative Revisions and Configurations to the Service&#39;s main URL.
   * @return traffic
   */
  @javax.annotation.Nullable
  public List<TrafficTarget> getTraffic() {
    return traffic;
  }

  public void setTraffic(List<TrafficTarget> traffic) {
    this.traffic = traffic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceSpec serviceSpec = (ServiceSpec) o;
    return Objects.equals(this.template, serviceSpec.template) &&
        Objects.equals(this.traffic, serviceSpec.traffic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(template, traffic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceSpec {\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    traffic: ").append(toIndentedString(traffic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("template");
    openapiFields.add("traffic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceSpec is not found in the empty JSON string", ServiceSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `template`
      if (jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) {
        RevisionTemplate.validateJsonElement(jsonObj.get("template"));
      }
      if (jsonObj.get("traffic") != null && !jsonObj.get("traffic").isJsonNull()) {
        JsonArray jsonArraytraffic = jsonObj.getAsJsonArray("traffic");
        if (jsonArraytraffic != null) {
          // ensure the json data is an array
          if (!jsonObj.get("traffic").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `traffic` to be an array in the JSON string but got `%s`", jsonObj.get("traffic").toString()));
          }

          // validate the optional field `traffic` (array)
          for (int i = 0; i < jsonArraytraffic.size(); i++) {
            TrafficTarget.validateJsonElement(jsonArraytraffic.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceSpec>() {
           @Override
           public void write(JsonWriter out, ServiceSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceSpec
   * @throws IOException if the JSON string is invalid with respect to ServiceSpec
   */
  public static ServiceSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceSpec.class);
  }

  /**
   * Convert an instance of ServiceSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

