/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudRunAdminApi);
  }
}(this, function(expect, CloudRunAdminApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudRunAdminApi.NamespacesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NamespacesApi', function() {
    describe('runNamespacesAuthorizeddomainsList', function() {
      it('should call runNamespacesAuthorizeddomainsList successfully', function(done) {
        //uncomment below and update the code to test runNamespacesAuthorizeddomainsList
        //instance.runNamespacesAuthorizeddomainsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runNamespacesConfigurationsList', function() {
      it('should call runNamespacesConfigurationsList successfully', function(done) {
        //uncomment below and update the code to test runNamespacesConfigurationsList
        //instance.runNamespacesConfigurationsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runNamespacesDomainmappingsCreate', function() {
      it('should call runNamespacesDomainmappingsCreate successfully', function(done) {
        //uncomment below and update the code to test runNamespacesDomainmappingsCreate
        //instance.runNamespacesDomainmappingsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runNamespacesDomainmappingsDelete', function() {
      it('should call runNamespacesDomainmappingsDelete successfully', function(done) {
        //uncomment below and update the code to test runNamespacesDomainmappingsDelete
        //instance.runNamespacesDomainmappingsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runNamespacesDomainmappingsGet', function() {
      it('should call runNamespacesDomainmappingsGet successfully', function(done) {
        //uncomment below and update the code to test runNamespacesDomainmappingsGet
        //instance.runNamespacesDomainmappingsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runNamespacesDomainmappingsList', function() {
      it('should call runNamespacesDomainmappingsList successfully', function(done) {
        //uncomment below and update the code to test runNamespacesDomainmappingsList
        //instance.runNamespacesDomainmappingsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runNamespacesExecutionsCancel', function() {
      it('should call runNamespacesExecutionsCancel successfully', function(done) {
        //uncomment below and update the code to test runNamespacesExecutionsCancel
        //instance.runNamespacesExecutionsCancel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runNamespacesExecutionsList', function() {
      it('should call runNamespacesExecutionsList successfully', function(done) {
        //uncomment below and update the code to test runNamespacesExecutionsList
        //instance.runNamespacesExecutionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runNamespacesJobsCreate', function() {
      it('should call runNamespacesJobsCreate successfully', function(done) {
        //uncomment below and update the code to test runNamespacesJobsCreate
        //instance.runNamespacesJobsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runNamespacesJobsDelete', function() {
      it('should call runNamespacesJobsDelete successfully', function(done) {
        //uncomment below and update the code to test runNamespacesJobsDelete
        //instance.runNamespacesJobsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runNamespacesJobsList', function() {
      it('should call runNamespacesJobsList successfully', function(done) {
        //uncomment below and update the code to test runNamespacesJobsList
        //instance.runNamespacesJobsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runNamespacesJobsReplaceJob', function() {
      it('should call runNamespacesJobsReplaceJob successfully', function(done) {
        //uncomment below and update the code to test runNamespacesJobsReplaceJob
        //instance.runNamespacesJobsReplaceJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runNamespacesJobsRun', function() {
      it('should call runNamespacesJobsRun successfully', function(done) {
        //uncomment below and update the code to test runNamespacesJobsRun
        //instance.runNamespacesJobsRun(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runNamespacesRevisionsList', function() {
      it('should call runNamespacesRevisionsList successfully', function(done) {
        //uncomment below and update the code to test runNamespacesRevisionsList
        //instance.runNamespacesRevisionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runNamespacesRoutesList', function() {
      it('should call runNamespacesRoutesList successfully', function(done) {
        //uncomment below and update the code to test runNamespacesRoutesList
        //instance.runNamespacesRoutesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runNamespacesServicesCreate', function() {
      it('should call runNamespacesServicesCreate successfully', function(done) {
        //uncomment below and update the code to test runNamespacesServicesCreate
        //instance.runNamespacesServicesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runNamespacesServicesDelete', function() {
      it('should call runNamespacesServicesDelete successfully', function(done) {
        //uncomment below and update the code to test runNamespacesServicesDelete
        //instance.runNamespacesServicesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runNamespacesServicesGet', function() {
      it('should call runNamespacesServicesGet successfully', function(done) {
        //uncomment below and update the code to test runNamespacesServicesGet
        //instance.runNamespacesServicesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runNamespacesServicesList', function() {
      it('should call runNamespacesServicesList successfully', function(done) {
        //uncomment below and update the code to test runNamespacesServicesList
        //instance.runNamespacesServicesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runNamespacesServicesReplaceService', function() {
      it('should call runNamespacesServicesReplaceService successfully', function(done) {
        //uncomment below and update the code to test runNamespacesServicesReplaceService
        //instance.runNamespacesServicesReplaceService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runNamespacesTasksGet', function() {
      it('should call runNamespacesTasksGet successfully', function(done) {
        //uncomment below and update the code to test runNamespacesTasksGet
        //instance.runNamespacesTasksGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runNamespacesTasksList', function() {
      it('should call runNamespacesTasksList successfully', function(done) {
        //uncomment below and update the code to test runNamespacesTasksList
        //instance.runNamespacesTasksList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
