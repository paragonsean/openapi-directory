/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudRunAdminApi);
  }
}(this, function(expect, CloudRunAdminApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudRunAdminApi.Container();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Container', function() {
    it('should create an instance of Container', function() {
      // uncomment below and update the code to test Container
      //var instance = new CloudRunAdminApi.Container();
      //expect(instance).to.be.a(CloudRunAdminApi.Container);
    });

    it('should have the property args (base name: "args")', function() {
      // uncomment below and update the code to test the property args
      //var instance = new CloudRunAdminApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property command (base name: "command")', function() {
      // uncomment below and update the code to test the property command
      //var instance = new CloudRunAdminApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property env (base name: "env")', function() {
      // uncomment below and update the code to test the property env
      //var instance = new CloudRunAdminApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property envFrom (base name: "envFrom")', function() {
      // uncomment below and update the code to test the property envFrom
      //var instance = new CloudRunAdminApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property image (base name: "image")', function() {
      // uncomment below and update the code to test the property image
      //var instance = new CloudRunAdminApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property imagePullPolicy (base name: "imagePullPolicy")', function() {
      // uncomment below and update the code to test the property imagePullPolicy
      //var instance = new CloudRunAdminApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property livenessProbe (base name: "livenessProbe")', function() {
      // uncomment below and update the code to test the property livenessProbe
      //var instance = new CloudRunAdminApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new CloudRunAdminApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property ports (base name: "ports")', function() {
      // uncomment below and update the code to test the property ports
      //var instance = new CloudRunAdminApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property readinessProbe (base name: "readinessProbe")', function() {
      // uncomment below and update the code to test the property readinessProbe
      //var instance = new CloudRunAdminApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property resources (base name: "resources")', function() {
      // uncomment below and update the code to test the property resources
      //var instance = new CloudRunAdminApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property securityContext (base name: "securityContext")', function() {
      // uncomment below and update the code to test the property securityContext
      //var instance = new CloudRunAdminApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property startupProbe (base name: "startupProbe")', function() {
      // uncomment below and update the code to test the property startupProbe
      //var instance = new CloudRunAdminApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property terminationMessagePath (base name: "terminationMessagePath")', function() {
      // uncomment below and update the code to test the property terminationMessagePath
      //var instance = new CloudRunAdminApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property terminationMessagePolicy (base name: "terminationMessagePolicy")', function() {
      // uncomment below and update the code to test the property terminationMessagePolicy
      //var instance = new CloudRunAdminApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property volumeMounts (base name: "volumeMounts")', function() {
      // uncomment below and update the code to test the property volumeMounts
      //var instance = new CloudRunAdminApi.Container();
      //expect(instance).to.be();
    });

    it('should have the property workingDir (base name: "workingDir")', function() {
      // uncomment below and update the code to test the property workingDir
      //var instance = new CloudRunAdminApi.Container();
      //expect(instance).to.be();
    });

  });

}));
