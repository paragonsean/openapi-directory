/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudRunAdminApi);
  }
}(this, function(expect, CloudRunAdminApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudRunAdminApi.ObjectMeta();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ObjectMeta', function() {
    it('should create an instance of ObjectMeta', function() {
      // uncomment below and update the code to test ObjectMeta
      //var instance = new CloudRunAdminApi.ObjectMeta();
      //expect(instance).to.be.a(CloudRunAdminApi.ObjectMeta);
    });

    it('should have the property annotations (base name: "annotations")', function() {
      // uncomment below and update the code to test the property annotations
      //var instance = new CloudRunAdminApi.ObjectMeta();
      //expect(instance).to.be();
    });

    it('should have the property clusterName (base name: "clusterName")', function() {
      // uncomment below and update the code to test the property clusterName
      //var instance = new CloudRunAdminApi.ObjectMeta();
      //expect(instance).to.be();
    });

    it('should have the property creationTimestamp (base name: "creationTimestamp")', function() {
      // uncomment below and update the code to test the property creationTimestamp
      //var instance = new CloudRunAdminApi.ObjectMeta();
      //expect(instance).to.be();
    });

    it('should have the property deletionGracePeriodSeconds (base name: "deletionGracePeriodSeconds")', function() {
      // uncomment below and update the code to test the property deletionGracePeriodSeconds
      //var instance = new CloudRunAdminApi.ObjectMeta();
      //expect(instance).to.be();
    });

    it('should have the property deletionTimestamp (base name: "deletionTimestamp")', function() {
      // uncomment below and update the code to test the property deletionTimestamp
      //var instance = new CloudRunAdminApi.ObjectMeta();
      //expect(instance).to.be();
    });

    it('should have the property finalizers (base name: "finalizers")', function() {
      // uncomment below and update the code to test the property finalizers
      //var instance = new CloudRunAdminApi.ObjectMeta();
      //expect(instance).to.be();
    });

    it('should have the property generateName (base name: "generateName")', function() {
      // uncomment below and update the code to test the property generateName
      //var instance = new CloudRunAdminApi.ObjectMeta();
      //expect(instance).to.be();
    });

    it('should have the property generation (base name: "generation")', function() {
      // uncomment below and update the code to test the property generation
      //var instance = new CloudRunAdminApi.ObjectMeta();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new CloudRunAdminApi.ObjectMeta();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new CloudRunAdminApi.ObjectMeta();
      //expect(instance).to.be();
    });

    it('should have the property namespace (base name: "namespace")', function() {
      // uncomment below and update the code to test the property namespace
      //var instance = new CloudRunAdminApi.ObjectMeta();
      //expect(instance).to.be();
    });

    it('should have the property ownerReferences (base name: "ownerReferences")', function() {
      // uncomment below and update the code to test the property ownerReferences
      //var instance = new CloudRunAdminApi.ObjectMeta();
      //expect(instance).to.be();
    });

    it('should have the property resourceVersion (base name: "resourceVersion")', function() {
      // uncomment below and update the code to test the property resourceVersion
      //var instance = new CloudRunAdminApi.ObjectMeta();
      //expect(instance).to.be();
    });

    it('should have the property selfLink (base name: "selfLink")', function() {
      // uncomment below and update the code to test the property selfLink
      //var instance = new CloudRunAdminApi.ObjectMeta();
      //expect(instance).to.be();
    });

    it('should have the property uid (base name: "uid")', function() {
      // uncomment below and update the code to test the property uid
      //var instance = new CloudRunAdminApi.ObjectMeta();
      //expect(instance).to.be();
    });

  });

}));
