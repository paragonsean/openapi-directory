/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudRunAdminApi);
  }
}(this, function(expect, CloudRunAdminApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudRunAdminApi.RevisionStatus();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RevisionStatus', function() {
    it('should create an instance of RevisionStatus', function() {
      // uncomment below and update the code to test RevisionStatus
      //var instance = new CloudRunAdminApi.RevisionStatus();
      //expect(instance).to.be.a(CloudRunAdminApi.RevisionStatus);
    });

    it('should have the property conditions (base name: "conditions")', function() {
      // uncomment below and update the code to test the property conditions
      //var instance = new CloudRunAdminApi.RevisionStatus();
      //expect(instance).to.be();
    });

    it('should have the property desiredReplicas (base name: "desiredReplicas")', function() {
      // uncomment below and update the code to test the property desiredReplicas
      //var instance = new CloudRunAdminApi.RevisionStatus();
      //expect(instance).to.be();
    });

    it('should have the property imageDigest (base name: "imageDigest")', function() {
      // uncomment below and update the code to test the property imageDigest
      //var instance = new CloudRunAdminApi.RevisionStatus();
      //expect(instance).to.be();
    });

    it('should have the property logUrl (base name: "logUrl")', function() {
      // uncomment below and update the code to test the property logUrl
      //var instance = new CloudRunAdminApi.RevisionStatus();
      //expect(instance).to.be();
    });

    it('should have the property observedGeneration (base name: "observedGeneration")', function() {
      // uncomment below and update the code to test the property observedGeneration
      //var instance = new CloudRunAdminApi.RevisionStatus();
      //expect(instance).to.be();
    });

    it('should have the property serviceName (base name: "serviceName")', function() {
      // uncomment below and update the code to test the property serviceName
      //var instance = new CloudRunAdminApi.RevisionStatus();
      //expect(instance).to.be();
    });

  });

}));
