/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CSIVolumeSource from './CSIVolumeSource';
import ConfigMapVolumeSource from './ConfigMapVolumeSource';
import EmptyDirVolumeSource from './EmptyDirVolumeSource';
import NFSVolumeSource from './NFSVolumeSource';
import SecretVolumeSource from './SecretVolumeSource';

/**
 * The Volume model module.
 * @module model/Volume
 * @version v1
 */
class Volume {
    /**
     * Constructs a new <code>Volume</code>.
     * Volume represents a named volume in a container.
     * @alias module:model/Volume
     */
    constructor() { 
        
        Volume.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Volume</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Volume} obj Optional instance to populate.
     * @return {module:model/Volume} The populated <code>Volume</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Volume();

            if (data.hasOwnProperty('configMap')) {
                obj['configMap'] = ConfigMapVolumeSource.constructFromObject(data['configMap']);
            }
            if (data.hasOwnProperty('csi')) {
                obj['csi'] = CSIVolumeSource.constructFromObject(data['csi']);
            }
            if (data.hasOwnProperty('emptyDir')) {
                obj['emptyDir'] = EmptyDirVolumeSource.constructFromObject(data['emptyDir']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nfs')) {
                obj['nfs'] = NFSVolumeSource.constructFromObject(data['nfs']);
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = SecretVolumeSource.constructFromObject(data['secret']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Volume</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Volume</code>.
     */
    static validateJSON(data) {
        // validate the optional field `configMap`
        if (data['configMap']) { // data not null
          ConfigMapVolumeSource.validateJSON(data['configMap']);
        }
        // validate the optional field `csi`
        if (data['csi']) { // data not null
          CSIVolumeSource.validateJSON(data['csi']);
        }
        // validate the optional field `emptyDir`
        if (data['emptyDir']) { // data not null
          EmptyDirVolumeSource.validateJSON(data['emptyDir']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `nfs`
        if (data['nfs']) { // data not null
          NFSVolumeSource.validateJSON(data['nfs']);
        }
        // validate the optional field `secret`
        if (data['secret']) { // data not null
          SecretVolumeSource.validateJSON(data['secret']);
        }

        return true;
    }


}



/**
 * @member {module:model/ConfigMapVolumeSource} configMap
 */
Volume.prototype['configMap'] = undefined;

/**
 * @member {module:model/CSIVolumeSource} csi
 */
Volume.prototype['csi'] = undefined;

/**
 * @member {module:model/EmptyDirVolumeSource} emptyDir
 */
Volume.prototype['emptyDir'] = undefined;

/**
 * Volume's name. In Cloud Run Fully Managed, the name 'cloudsql' is reserved.
 * @member {String} name
 */
Volume.prototype['name'] = undefined;

/**
 * @member {module:model/NFSVolumeSource} nfs
 */
Volume.prototype['nfs'] = undefined;

/**
 * @member {module:model/SecretVolumeSource} secret
 */
Volume.prototype['secret'] = undefined;






export default Volume;

