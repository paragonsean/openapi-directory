/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Addressable from './Addressable';
import GoogleCloudRunV1Condition from './GoogleCloudRunV1Condition';
import TrafficTarget from './TrafficTarget';

/**
 * The RouteStatus model module.
 * @module model/RouteStatus
 * @version v1
 */
class RouteStatus {
    /**
     * Constructs a new <code>RouteStatus</code>.
     * RouteStatus communicates the observed state of the Route (from the controller).
     * @alias module:model/RouteStatus
     */
    constructor() { 
        
        RouteStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RouteStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RouteStatus} obj Optional instance to populate.
     * @return {module:model/RouteStatus} The populated <code>RouteStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RouteStatus();

            if (data.hasOwnProperty('address')) {
                obj['address'] = Addressable.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [GoogleCloudRunV1Condition]);
            }
            if (data.hasOwnProperty('observedGeneration')) {
                obj['observedGeneration'] = ApiClient.convertToType(data['observedGeneration'], 'Number');
            }
            if (data.hasOwnProperty('traffic')) {
                obj['traffic'] = ApiClient.convertToType(data['traffic'], [TrafficTarget]);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RouteStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RouteStatus</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          Addressable.validateJSON(data['address']);
        }
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                GoogleCloudRunV1Condition.validateJSON(item);
            };
        }
        if (data['traffic']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['traffic'])) {
                throw new Error("Expected the field `traffic` to be an array in the JSON data but got " + data['traffic']);
            }
            // validate the optional field `traffic` (array)
            for (const item of data['traffic']) {
                TrafficTarget.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {module:model/Addressable} address
 */
RouteStatus.prototype['address'] = undefined;

/**
 * Conditions communicates information about ongoing/complete reconciliation processes that bring the \"spec\" inline with the observed state of the world.
 * @member {Array.<module:model/GoogleCloudRunV1Condition>} conditions
 */
RouteStatus.prototype['conditions'] = undefined;

/**
 * ObservedGeneration is the 'Generation' of the Route that was last processed by the controller. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition's status is True or False. Note that providing a TrafficTarget that has latest_revision=True will result in a Route that does not increment either its metadata.generation or its observedGeneration, as new \"latest ready\" revisions from the Configuration are processed without an update to the Route's spec.
 * @member {Number} observedGeneration
 */
RouteStatus.prototype['observedGeneration'] = undefined;

/**
 * Traffic holds the configured traffic distribution. These entries will always contain RevisionName references. When ConfigurationName appears in the spec, this will hold the LatestReadyRevisionName that was last observed.
 * @member {Array.<module:model/TrafficTarget>} traffic
 */
RouteStatus.prototype['traffic'] = undefined;

/**
 * URL holds the url that will distribute traffic over the provided traffic targets. It generally has the form: `https://{route-hash}-{project-hash}-{cluster-level-suffix}.a.run.app`
 * @member {String} url
 */
RouteStatus.prototype['url'] = undefined;






export default RouteStatus;

