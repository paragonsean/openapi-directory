/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GRPCAction model module.
 * @module model/GRPCAction
 * @version v1
 */
class GRPCAction {
    /**
     * Constructs a new <code>GRPCAction</code>.
     * GRPCAction describes an action involving a GRPC port.
     * @alias module:model/GRPCAction
     */
    constructor() { 
        
        GRPCAction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GRPCAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GRPCAction} obj Optional instance to populate.
     * @return {module:model/GRPCAction} The populated <code>GRPCAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GRPCAction();

            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('service')) {
                obj['service'] = ApiClient.convertToType(data['service'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GRPCAction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GRPCAction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['service'] && !(typeof data['service'] === 'string' || data['service'] instanceof String)) {
            throw new Error("Expected the field `service` to be a primitive type in the JSON string but got " + data['service']);
        }

        return true;
    }


}



/**
 * Port number of the gRPC service. Number must be in the range 1 to 65535.
 * @member {Number} port
 */
GRPCAction.prototype['port'] = undefined;

/**
 * Service is the name of the service to place in the gRPC HealthCheckRequest. If this is not specified, the default behavior is defined by gRPC.
 * @member {String} service
 */
GRPCAction.prototype['service'] = undefined;






export default GRPCAction;

