/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StatusCause from './StatusCause';

/**
 * The StatusDetails model module.
 * @module model/StatusDetails
 * @version v1
 */
class StatusDetails {
    /**
     * Constructs a new <code>StatusDetails</code>.
     * StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
     * @alias module:model/StatusDetails
     */
    constructor() { 
        
        StatusDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StatusDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StatusDetails} obj Optional instance to populate.
     * @return {module:model/StatusDetails} The populated <code>StatusDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StatusDetails();

            if (data.hasOwnProperty('causes')) {
                obj['causes'] = ApiClient.convertToType(data['causes'], [StatusCause]);
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('retryAfterSeconds')) {
                obj['retryAfterSeconds'] = ApiClient.convertToType(data['retryAfterSeconds'], 'Number');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StatusDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StatusDetails</code>.
     */
    static validateJSON(data) {
        if (data['causes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['causes'])) {
                throw new Error("Expected the field `causes` to be an array in the JSON data but got " + data['causes']);
            }
            // validate the optional field `causes` (array)
            for (const item of data['causes']) {
                StatusCause.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['group'] && !(typeof data['group'] === 'string' || data['group'] instanceof String)) {
            throw new Error("Expected the field `group` to be a primitive type in the JSON string but got " + data['group']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}



/**
 * The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
 * @member {Array.<module:model/StatusCause>} causes
 */
StatusDetails.prototype['causes'] = undefined;

/**
 * The group attribute of the resource associated with the status StatusReason.
 * @member {String} group
 */
StatusDetails.prototype['group'] = undefined;

/**
 * The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind.
 * @member {String} kind
 */
StatusDetails.prototype['kind'] = undefined;

/**
 * The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
 * @member {String} name
 */
StatusDetails.prototype['name'] = undefined;

/**
 * If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
 * @member {Number} retryAfterSeconds
 */
StatusDetails.prototype['retryAfterSeconds'] = undefined;

/**
 * UID of the resource. (when there is a single resource which can be described).
 * @member {String} uid
 */
StatusDetails.prototype['uid'] = undefined;






export default StatusDetails;

