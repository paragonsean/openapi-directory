/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudRunV1Condition from './GoogleCloudRunV1Condition';

/**
 * The ExecutionStatus model module.
 * @module model/ExecutionStatus
 * @version v1
 */
class ExecutionStatus {
    /**
     * Constructs a new <code>ExecutionStatus</code>.
     * ExecutionStatus represents the current state of an Execution.
     * @alias module:model/ExecutionStatus
     */
    constructor() { 
        
        ExecutionStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExecutionStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExecutionStatus} obj Optional instance to populate.
     * @return {module:model/ExecutionStatus} The populated <code>ExecutionStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExecutionStatus();

            if (data.hasOwnProperty('cancelledCount')) {
                obj['cancelledCount'] = ApiClient.convertToType(data['cancelledCount'], 'Number');
            }
            if (data.hasOwnProperty('completionTime')) {
                obj['completionTime'] = ApiClient.convertToType(data['completionTime'], 'String');
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [GoogleCloudRunV1Condition]);
            }
            if (data.hasOwnProperty('failedCount')) {
                obj['failedCount'] = ApiClient.convertToType(data['failedCount'], 'Number');
            }
            if (data.hasOwnProperty('logUri')) {
                obj['logUri'] = ApiClient.convertToType(data['logUri'], 'String');
            }
            if (data.hasOwnProperty('observedGeneration')) {
                obj['observedGeneration'] = ApiClient.convertToType(data['observedGeneration'], 'Number');
            }
            if (data.hasOwnProperty('retriedCount')) {
                obj['retriedCount'] = ApiClient.convertToType(data['retriedCount'], 'Number');
            }
            if (data.hasOwnProperty('runningCount')) {
                obj['runningCount'] = ApiClient.convertToType(data['runningCount'], 'Number');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('succeededCount')) {
                obj['succeededCount'] = ApiClient.convertToType(data['succeededCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExecutionStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExecutionStatus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['completionTime'] && !(typeof data['completionTime'] === 'string' || data['completionTime'] instanceof String)) {
            throw new Error("Expected the field `completionTime` to be a primitive type in the JSON string but got " + data['completionTime']);
        }
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                GoogleCloudRunV1Condition.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['logUri'] && !(typeof data['logUri'] === 'string' || data['logUri'] instanceof String)) {
            throw new Error("Expected the field `logUri` to be a primitive type in the JSON string but got " + data['logUri']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }

        return true;
    }


}



/**
 * Optional. The number of tasks which reached phase Cancelled.
 * @member {Number} cancelledCount
 */
ExecutionStatus.prototype['cancelledCount'] = undefined;

/**
 * Optional. Represents the time that the execution was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
 * @member {String} completionTime
 */
ExecutionStatus.prototype['completionTime'] = undefined;

/**
 * Optional. Conditions communicate information about ongoing/complete reconciliation processes that bring the \"spec\" inline with the observed state of the world. Execution-specific conditions include: * `ResourcesAvailable`: `True` when underlying resources have been provisioned. * `Started`: `True` when the execution has started to execute. * `Completed`: `True` when the execution has succeeded. `False` when the execution has failed.
 * @member {Array.<module:model/GoogleCloudRunV1Condition>} conditions
 */
ExecutionStatus.prototype['conditions'] = undefined;

/**
 * Optional. The number of tasks which reached phase Failed.
 * @member {Number} failedCount
 */
ExecutionStatus.prototype['failedCount'] = undefined;

/**
 * Optional. URI where logs for this execution can be found in Cloud Console.
 * @member {String} logUri
 */
ExecutionStatus.prototype['logUri'] = undefined;

/**
 * Optional. The 'generation' of the execution that was last processed by the controller.
 * @member {Number} observedGeneration
 */
ExecutionStatus.prototype['observedGeneration'] = undefined;

/**
 * Optional. The number of tasks which have retried at least once.
 * @member {Number} retriedCount
 */
ExecutionStatus.prototype['retriedCount'] = undefined;

/**
 * Optional. The number of actively running tasks.
 * @member {Number} runningCount
 */
ExecutionStatus.prototype['runningCount'] = undefined;

/**
 * Optional. Represents the time that the execution started to run. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
 * @member {String} startTime
 */
ExecutionStatus.prototype['startTime'] = undefined;

/**
 * Optional. The number of tasks which reached phase Succeeded.
 * @member {Number} succeededCount
 */
ExecutionStatus.prototype['succeededCount'] = undefined;






export default ExecutionStatus;

