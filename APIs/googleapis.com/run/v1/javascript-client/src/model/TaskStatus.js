/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudRunV1Condition from './GoogleCloudRunV1Condition';
import TaskAttemptResult from './TaskAttemptResult';

/**
 * The TaskStatus model module.
 * @module model/TaskStatus
 * @version v1
 */
class TaskStatus {
    /**
     * Constructs a new <code>TaskStatus</code>.
     * TaskStatus represents the status of a task.
     * @alias module:model/TaskStatus
     */
    constructor() { 
        
        TaskStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaskStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskStatus} obj Optional instance to populate.
     * @return {module:model/TaskStatus} The populated <code>TaskStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskStatus();

            if (data.hasOwnProperty('completionTime')) {
                obj['completionTime'] = ApiClient.convertToType(data['completionTime'], 'String');
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [GoogleCloudRunV1Condition]);
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('lastAttemptResult')) {
                obj['lastAttemptResult'] = TaskAttemptResult.constructFromObject(data['lastAttemptResult']);
            }
            if (data.hasOwnProperty('logUri')) {
                obj['logUri'] = ApiClient.convertToType(data['logUri'], 'String');
            }
            if (data.hasOwnProperty('observedGeneration')) {
                obj['observedGeneration'] = ApiClient.convertToType(data['observedGeneration'], 'Number');
            }
            if (data.hasOwnProperty('retried')) {
                obj['retried'] = ApiClient.convertToType(data['retried'], 'Number');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskStatus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['completionTime'] && !(typeof data['completionTime'] === 'string' || data['completionTime'] instanceof String)) {
            throw new Error("Expected the field `completionTime` to be a primitive type in the JSON string but got " + data['completionTime']);
        }
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                GoogleCloudRunV1Condition.validateJSON(item);
            };
        }
        // validate the optional field `lastAttemptResult`
        if (data['lastAttemptResult']) { // data not null
          TaskAttemptResult.validateJSON(data['lastAttemptResult']);
        }
        // ensure the json data is a string
        if (data['logUri'] && !(typeof data['logUri'] === 'string' || data['logUri'] instanceof String)) {
            throw new Error("Expected the field `logUri` to be a primitive type in the JSON string but got " + data['logUri']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }

        return true;
    }


}



/**
 * Optional. Represents time when the task was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
 * @member {String} completionTime
 */
TaskStatus.prototype['completionTime'] = undefined;

/**
 * Optional. Conditions communicate information about ongoing/complete reconciliation processes that bring the \"spec\" inline with the observed state of the world. Task-specific conditions include: * `Started`: `True` when the task has started to execute. * `Completed`: `True` when the task has succeeded. `False` when the task has failed.
 * @member {Array.<module:model/GoogleCloudRunV1Condition>} conditions
 */
TaskStatus.prototype['conditions'] = undefined;

/**
 * Required. Index of the task, unique per execution, and beginning at 0.
 * @member {Number} index
 */
TaskStatus.prototype['index'] = undefined;

/**
 * @member {module:model/TaskAttemptResult} lastAttemptResult
 */
TaskStatus.prototype['lastAttemptResult'] = undefined;

/**
 * Optional. URI where logs for this task can be found in Cloud Console.
 * @member {String} logUri
 */
TaskStatus.prototype['logUri'] = undefined;

/**
 * Optional. The 'generation' of the task that was last processed by the controller.
 * @member {Number} observedGeneration
 */
TaskStatus.prototype['observedGeneration'] = undefined;

/**
 * Optional. The number of times this task was retried. Instances are retried when they fail up to the maxRetries limit.
 * @member {Number} retried
 */
TaskStatus.prototype['retried'] = undefined;

/**
 * Optional. Represents time when the task started to run. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
 * @member {String} startTime
 */
TaskStatus.prototype['startTime'] = undefined;






export default TaskStatus;

