/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudRunV1Condition from './GoogleCloudRunV1Condition';

/**
 * The ConfigurationStatus model module.
 * @module model/ConfigurationStatus
 * @version v1
 */
class ConfigurationStatus {
    /**
     * Constructs a new <code>ConfigurationStatus</code>.
     * ConfigurationStatus communicates the observed state of the Configuration (from the controller).
     * @alias module:model/ConfigurationStatus
     */
    constructor() { 
        
        ConfigurationStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigurationStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigurationStatus} obj Optional instance to populate.
     * @return {module:model/ConfigurationStatus} The populated <code>ConfigurationStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigurationStatus();

            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [GoogleCloudRunV1Condition]);
            }
            if (data.hasOwnProperty('latestCreatedRevisionName')) {
                obj['latestCreatedRevisionName'] = ApiClient.convertToType(data['latestCreatedRevisionName'], 'String');
            }
            if (data.hasOwnProperty('latestReadyRevisionName')) {
                obj['latestReadyRevisionName'] = ApiClient.convertToType(data['latestReadyRevisionName'], 'String');
            }
            if (data.hasOwnProperty('observedGeneration')) {
                obj['observedGeneration'] = ApiClient.convertToType(data['observedGeneration'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigurationStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigurationStatus</code>.
     */
    static validateJSON(data) {
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                GoogleCloudRunV1Condition.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['latestCreatedRevisionName'] && !(typeof data['latestCreatedRevisionName'] === 'string' || data['latestCreatedRevisionName'] instanceof String)) {
            throw new Error("Expected the field `latestCreatedRevisionName` to be a primitive type in the JSON string but got " + data['latestCreatedRevisionName']);
        }
        // ensure the json data is a string
        if (data['latestReadyRevisionName'] && !(typeof data['latestReadyRevisionName'] === 'string' || data['latestReadyRevisionName'] instanceof String)) {
            throw new Error("Expected the field `latestReadyRevisionName` to be a primitive type in the JSON string but got " + data['latestReadyRevisionName']);
        }

        return true;
    }


}



/**
 * Conditions communicate information about ongoing/complete reconciliation processes that bring the \"spec\" inline with the observed state of the world.
 * @member {Array.<module:model/GoogleCloudRunV1Condition>} conditions
 */
ConfigurationStatus.prototype['conditions'] = undefined;

/**
 * LatestCreatedRevisionName is the last revision that was created from this Configuration. It might not be ready yet, so for the latest ready revision, use LatestReadyRevisionName.
 * @member {String} latestCreatedRevisionName
 */
ConfigurationStatus.prototype['latestCreatedRevisionName'] = undefined;

/**
 * LatestReadyRevisionName holds the name of the latest Revision stamped out from this Configuration that has had its \"Ready\" condition become \"True\".
 * @member {String} latestReadyRevisionName
 */
ConfigurationStatus.prototype['latestReadyRevisionName'] = undefined;

/**
 * ObservedGeneration is the 'Generation' of the Configuration that was last processed by the controller. The observed generation is updated even if the controller failed to process the spec and create the Revision. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation, and the Ready condition's status is True or False.
 * @member {Number} observedGeneration
 */
ConfigurationStatus.prototype['observedGeneration'] = undefined;






export default ConfigurationStatus;

