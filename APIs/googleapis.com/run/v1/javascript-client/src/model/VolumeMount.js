/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VolumeMount model module.
 * @module model/VolumeMount
 * @version v1
 */
class VolumeMount {
    /**
     * Constructs a new <code>VolumeMount</code>.
     * VolumeMount describes a mounting of a Volume within a container.
     * @alias module:model/VolumeMount
     */
    constructor() { 
        
        VolumeMount.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VolumeMount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VolumeMount} obj Optional instance to populate.
     * @return {module:model/VolumeMount} The populated <code>VolumeMount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VolumeMount();

            if (data.hasOwnProperty('mountPath')) {
                obj['mountPath'] = ApiClient.convertToType(data['mountPath'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('readOnly')) {
                obj['readOnly'] = ApiClient.convertToType(data['readOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('subPath')) {
                obj['subPath'] = ApiClient.convertToType(data['subPath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VolumeMount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VolumeMount</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['mountPath'] && !(typeof data['mountPath'] === 'string' || data['mountPath'] instanceof String)) {
            throw new Error("Expected the field `mountPath` to be a primitive type in the JSON string but got " + data['mountPath']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['subPath'] && !(typeof data['subPath'] === 'string' || data['subPath'] instanceof String)) {
            throw new Error("Expected the field `subPath` to be a primitive type in the JSON string but got " + data['subPath']);
        }

        return true;
    }


}



/**
 * Required. Path within the container at which the volume should be mounted. Must not contain ':'.
 * @member {String} mountPath
 */
VolumeMount.prototype['mountPath'] = undefined;

/**
 * Required. The name of the volume. There must be a corresponding Volume with the same name.
 * @member {String} name
 */
VolumeMount.prototype['name'] = undefined;

/**
 * Sets the mount to be read-only or read-write. Not used by Cloud Run.
 * @member {Boolean} readOnly
 */
VolumeMount.prototype['readOnly'] = undefined;

/**
 * Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).
 * @member {String} subPath
 */
VolumeMount.prototype['subPath'] = undefined;






export default VolumeMount;

