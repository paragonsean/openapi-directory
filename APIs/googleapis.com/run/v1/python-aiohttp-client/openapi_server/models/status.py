# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_meta import ListMeta
from openapi_server.models.status_details import StatusDetails
from openapi_server import util


class Status(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: int=None, details: StatusDetails=None, message: str=None, metadata: ListMeta=None, reason: str=None, status: str=None):
        """Status - a model defined in OpenAPI

        :param code: The code of this Status.
        :param details: The details of this Status.
        :param message: The message of this Status.
        :param metadata: The metadata of this Status.
        :param reason: The reason of this Status.
        :param status: The status of this Status.
        """
        self.openapi_types = {
            'code': int,
            'details': StatusDetails,
            'message': str,
            'metadata': ListMeta,
            'reason': str,
            'status': str
        }

        self.attribute_map = {
            'code': 'code',
            'details': 'details',
            'message': 'message',
            'metadata': 'metadata',
            'reason': 'reason',
            'status': 'status'
        }

        self._code = code
        self._details = details
        self._message = message
        self._metadata = metadata
        self._reason = reason
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Status':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Status of this Status.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Status.

        Suggested HTTP return code for this status, 0 if not set.

        :return: The code of this Status.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Status.

        Suggested HTTP return code for this status, 0 if not set.

        :param code: The code of this Status.
        :type code: int
        """

        self._code = code

    @property
    def details(self):
        """Gets the details of this Status.


        :return: The details of this Status.
        :rtype: StatusDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Status.


        :param details: The details of this Status.
        :type details: StatusDetails
        """

        self._details = details

    @property
    def message(self):
        """Gets the message of this Status.

        A human-readable description of the status of this operation.

        :return: The message of this Status.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Status.

        A human-readable description of the status of this operation.

        :param message: The message of this Status.
        :type message: str
        """

        self._message = message

    @property
    def metadata(self):
        """Gets the metadata of this Status.


        :return: The metadata of this Status.
        :rtype: ListMeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Status.


        :param metadata: The metadata of this Status.
        :type metadata: ListMeta
        """

        self._metadata = metadata

    @property
    def reason(self):
        """Gets the reason of this Status.

        A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.

        :return: The reason of this Status.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Status.

        A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.

        :param reason: The reason of this Status.
        :type reason: str
        """

        self._reason = reason

    @property
    def status(self):
        """Gets the status of this Status.

        Status of the operation. One of: \"Success\" or \"Failure\".

        :return: The status of this Status.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Status.

        Status of the operation. One of: \"Success\" or \"Failure\".

        :param status: The status of this Status.
        :type status: str
        """

        self._status = status
