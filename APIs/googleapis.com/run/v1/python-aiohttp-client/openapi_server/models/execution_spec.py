# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.task_template_spec import TaskTemplateSpec
from openapi_server import util


class ExecutionSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parallelism: int=None, task_count: int=None, template: TaskTemplateSpec=None):
        """ExecutionSpec - a model defined in OpenAPI

        :param parallelism: The parallelism of this ExecutionSpec.
        :param task_count: The task_count of this ExecutionSpec.
        :param template: The template of this ExecutionSpec.
        """
        self.openapi_types = {
            'parallelism': int,
            'task_count': int,
            'template': TaskTemplateSpec
        }

        self.attribute_map = {
            'parallelism': 'parallelism',
            'task_count': 'taskCount',
            'template': 'template'
        }

        self._parallelism = parallelism
        self._task_count = task_count
        self._template = template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecutionSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecutionSpec of this ExecutionSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parallelism(self):
        """Gets the parallelism of this ExecutionSpec.

        Optional. Specifies the maximum desired number of tasks the execution should run at given time. Must be <= task_count. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed, i.e. when the work left to do is less than max parallelism.

        :return: The parallelism of this ExecutionSpec.
        :rtype: int
        """
        return self._parallelism

    @parallelism.setter
    def parallelism(self, parallelism):
        """Sets the parallelism of this ExecutionSpec.

        Optional. Specifies the maximum desired number of tasks the execution should run at given time. Must be <= task_count. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed, i.e. when the work left to do is less than max parallelism.

        :param parallelism: The parallelism of this ExecutionSpec.
        :type parallelism: int
        """

        self._parallelism = parallelism

    @property
    def task_count(self):
        """Gets the task_count of this ExecutionSpec.

        Optional. Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. Defaults to 1.

        :return: The task_count of this ExecutionSpec.
        :rtype: int
        """
        return self._task_count

    @task_count.setter
    def task_count(self, task_count):
        """Sets the task_count of this ExecutionSpec.

        Optional. Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. Defaults to 1.

        :param task_count: The task_count of this ExecutionSpec.
        :type task_count: int
        """

        self._task_count = task_count

    @property
    def template(self):
        """Gets the template of this ExecutionSpec.


        :return: The template of this ExecutionSpec.
        :rtype: TaskTemplateSpec
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this ExecutionSpec.


        :param template: The template of this ExecutionSpec.
        :type template: TaskTemplateSpec
        """

        self._template = template
