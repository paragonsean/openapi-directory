# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_override import ContainerOverride
from openapi_server import util


class Overrides(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_overrides: List[ContainerOverride]=None, task_count: int=None, timeout_seconds: int=None):
        """Overrides - a model defined in OpenAPI

        :param container_overrides: The container_overrides of this Overrides.
        :param task_count: The task_count of this Overrides.
        :param timeout_seconds: The timeout_seconds of this Overrides.
        """
        self.openapi_types = {
            'container_overrides': List[ContainerOverride],
            'task_count': int,
            'timeout_seconds': int
        }

        self.attribute_map = {
            'container_overrides': 'containerOverrides',
            'task_count': 'taskCount',
            'timeout_seconds': 'timeoutSeconds'
        }

        self._container_overrides = container_overrides
        self._task_count = task_count
        self._timeout_seconds = timeout_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Overrides':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Overrides of this Overrides.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_overrides(self):
        """Gets the container_overrides of this Overrides.

        Per container override specification.

        :return: The container_overrides of this Overrides.
        :rtype: List[ContainerOverride]
        """
        return self._container_overrides

    @container_overrides.setter
    def container_overrides(self, container_overrides):
        """Sets the container_overrides of this Overrides.

        Per container override specification.

        :param container_overrides: The container_overrides of this Overrides.
        :type container_overrides: List[ContainerOverride]
        """

        self._container_overrides = container_overrides

    @property
    def task_count(self):
        """Gets the task_count of this Overrides.

        The desired number of tasks the execution should run. Will replace existing task_count value.

        :return: The task_count of this Overrides.
        :rtype: int
        """
        return self._task_count

    @task_count.setter
    def task_count(self, task_count):
        """Sets the task_count of this Overrides.

        The desired number of tasks the execution should run. Will replace existing task_count value.

        :param task_count: The task_count of this Overrides.
        :type task_count: int
        """

        self._task_count = task_count

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this Overrides.

        Duration in seconds the task may be active before the system will actively try to mark it failed and kill associated containers. Will replace existing timeout_seconds value.

        :return: The timeout_seconds of this Overrides.
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this Overrides.

        Duration in seconds the task may be active before the system will actively try to mark it failed and kill associated containers. Will replace existing timeout_seconds value.

        :param timeout_seconds: The timeout_seconds of this Overrides.
        :type timeout_seconds: int
        """

        self._timeout_seconds = timeout_seconds
