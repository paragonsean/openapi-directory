# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.env_var import EnvVar
from openapi_server import util


class ContainerOverride(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, args: List[str]=None, clear_args: bool=None, env: List[EnvVar]=None, name: str=None):
        """ContainerOverride - a model defined in OpenAPI

        :param args: The args of this ContainerOverride.
        :param clear_args: The clear_args of this ContainerOverride.
        :param env: The env of this ContainerOverride.
        :param name: The name of this ContainerOverride.
        """
        self.openapi_types = {
            'args': List[str],
            'clear_args': bool,
            'env': List[EnvVar],
            'name': str
        }

        self.attribute_map = {
            'args': 'args',
            'clear_args': 'clearArgs',
            'env': 'env',
            'name': 'name'
        }

        self._args = args
        self._clear_args = clear_args
        self._env = env
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerOverride':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerOverride of this ContainerOverride.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def args(self):
        """Gets the args of this ContainerOverride.

        Arguments to the entrypoint. The specified arguments replace and override any existing entrypoint arguments. Must be empty if `clear_args` is set to true.

        :return: The args of this ContainerOverride.
        :rtype: List[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this ContainerOverride.

        Arguments to the entrypoint. The specified arguments replace and override any existing entrypoint arguments. Must be empty if `clear_args` is set to true.

        :param args: The args of this ContainerOverride.
        :type args: List[str]
        """

        self._args = args

    @property
    def clear_args(self):
        """Gets the clear_args of this ContainerOverride.

        Optional. Set to True to clear all existing arguments.

        :return: The clear_args of this ContainerOverride.
        :rtype: bool
        """
        return self._clear_args

    @clear_args.setter
    def clear_args(self, clear_args):
        """Sets the clear_args of this ContainerOverride.

        Optional. Set to True to clear all existing arguments.

        :param clear_args: The clear_args of this ContainerOverride.
        :type clear_args: bool
        """

        self._clear_args = clear_args

    @property
    def env(self):
        """Gets the env of this ContainerOverride.

        List of environment variables to set in the container. All specified environment variables are merged with existing environment variables. When the specified environment variables exist, these values override any existing values.

        :return: The env of this ContainerOverride.
        :rtype: List[EnvVar]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this ContainerOverride.

        List of environment variables to set in the container. All specified environment variables are merged with existing environment variables. When the specified environment variables exist, these values override any existing values.

        :param env: The env of this ContainerOverride.
        :type env: List[EnvVar]
        """

        self._env = env

    @property
    def name(self):
        """Gets the name of this ContainerOverride.

        The name of the container specified as a DNS_LABEL.

        :return: The name of this ContainerOverride.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContainerOverride.

        The name of the container specified as a DNS_LABEL.

        :param name: The name of this ContainerOverride.
        :type name: str
        """

        self._name = name
