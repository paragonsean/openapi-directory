# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.exec_action import ExecAction
from openapi_server.models.grpc_action import GRPCAction
from openapi_server.models.http_get_action import HTTPGetAction
from openapi_server.models.tcp_socket_action import TCPSocketAction
from openapi_server import util


class Probe(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _exec: ExecAction=None, failure_threshold: int=None, grpc: GRPCAction=None, http_get: HTTPGetAction=None, initial_delay_seconds: int=None, period_seconds: int=None, success_threshold: int=None, tcp_socket: TCPSocketAction=None, timeout_seconds: int=None):
        """Probe - a model defined in OpenAPI

        :param _exec: The _exec of this Probe.
        :param failure_threshold: The failure_threshold of this Probe.
        :param grpc: The grpc of this Probe.
        :param http_get: The http_get of this Probe.
        :param initial_delay_seconds: The initial_delay_seconds of this Probe.
        :param period_seconds: The period_seconds of this Probe.
        :param success_threshold: The success_threshold of this Probe.
        :param tcp_socket: The tcp_socket of this Probe.
        :param timeout_seconds: The timeout_seconds of this Probe.
        """
        self.openapi_types = {
            '_exec': ExecAction,
            'failure_threshold': int,
            'grpc': GRPCAction,
            'http_get': HTTPGetAction,
            'initial_delay_seconds': int,
            'period_seconds': int,
            'success_threshold': int,
            'tcp_socket': TCPSocketAction,
            'timeout_seconds': int
        }

        self.attribute_map = {
            '_exec': 'exec',
            'failure_threshold': 'failureThreshold',
            'grpc': 'grpc',
            'http_get': 'httpGet',
            'initial_delay_seconds': 'initialDelaySeconds',
            'period_seconds': 'periodSeconds',
            'success_threshold': 'successThreshold',
            'tcp_socket': 'tcpSocket',
            'timeout_seconds': 'timeoutSeconds'
        }

        self.__exec = _exec
        self._failure_threshold = failure_threshold
        self._grpc = grpc
        self._http_get = http_get
        self._initial_delay_seconds = initial_delay_seconds
        self._period_seconds = period_seconds
        self._success_threshold = success_threshold
        self._tcp_socket = tcp_socket
        self._timeout_seconds = timeout_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Probe':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Probe of this Probe.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _exec(self):
        """Gets the _exec of this Probe.


        :return: The _exec of this Probe.
        :rtype: ExecAction
        """
        return self.__exec

    @_exec.setter
    def _exec(self, _exec):
        """Sets the _exec of this Probe.


        :param _exec: The _exec of this Probe.
        :type _exec: ExecAction
        """

        self.__exec = _exec

    @property
    def failure_threshold(self):
        """Gets the failure_threshold of this Probe.

        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.

        :return: The failure_threshold of this Probe.
        :rtype: int
        """
        return self._failure_threshold

    @failure_threshold.setter
    def failure_threshold(self, failure_threshold):
        """Sets the failure_threshold of this Probe.

        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.

        :param failure_threshold: The failure_threshold of this Probe.
        :type failure_threshold: int
        """

        self._failure_threshold = failure_threshold

    @property
    def grpc(self):
        """Gets the grpc of this Probe.


        :return: The grpc of this Probe.
        :rtype: GRPCAction
        """
        return self._grpc

    @grpc.setter
    def grpc(self, grpc):
        """Sets the grpc of this Probe.


        :param grpc: The grpc of this Probe.
        :type grpc: GRPCAction
        """

        self._grpc = grpc

    @property
    def http_get(self):
        """Gets the http_get of this Probe.


        :return: The http_get of this Probe.
        :rtype: HTTPGetAction
        """
        return self._http_get

    @http_get.setter
    def http_get(self, http_get):
        """Sets the http_get of this Probe.


        :param http_get: The http_get of this Probe.
        :type http_get: HTTPGetAction
        """

        self._http_get = http_get

    @property
    def initial_delay_seconds(self):
        """Gets the initial_delay_seconds of this Probe.

        Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240.

        :return: The initial_delay_seconds of this Probe.
        :rtype: int
        """
        return self._initial_delay_seconds

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, initial_delay_seconds):
        """Sets the initial_delay_seconds of this Probe.

        Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240.

        :param initial_delay_seconds: The initial_delay_seconds of this Probe.
        :type initial_delay_seconds: int
        """

        self._initial_delay_seconds = initial_delay_seconds

    @property
    def period_seconds(self):
        """Gets the period_seconds of this Probe.

        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.

        :return: The period_seconds of this Probe.
        :rtype: int
        """
        return self._period_seconds

    @period_seconds.setter
    def period_seconds(self, period_seconds):
        """Sets the period_seconds of this Probe.

        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeout_seconds.

        :param period_seconds: The period_seconds of this Probe.
        :type period_seconds: int
        """

        self._period_seconds = period_seconds

    @property
    def success_threshold(self):
        """Gets the success_threshold of this Probe.

        Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 if set.

        :return: The success_threshold of this Probe.
        :rtype: int
        """
        return self._success_threshold

    @success_threshold.setter
    def success_threshold(self, success_threshold):
        """Sets the success_threshold of this Probe.

        Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 if set.

        :param success_threshold: The success_threshold of this Probe.
        :type success_threshold: int
        """

        self._success_threshold = success_threshold

    @property
    def tcp_socket(self):
        """Gets the tcp_socket of this Probe.


        :return: The tcp_socket of this Probe.
        :rtype: TCPSocketAction
        """
        return self._tcp_socket

    @tcp_socket.setter
    def tcp_socket(self, tcp_socket):
        """Sets the tcp_socket of this Probe.


        :param tcp_socket: The tcp_socket of this Probe.
        :type tcp_socket: TCPSocketAction
        """

        self._tcp_socket = tcp_socket

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this Probe.

        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds; if period_seconds is not set, must be less or equal than 10.

        :return: The timeout_seconds of this Probe.
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this Probe.

        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than period_seconds; if period_seconds is not set, must be less or equal than 10.

        :param timeout_seconds: The timeout_seconds of this Probe.
        :type timeout_seconds: int
        """

        self._timeout_seconds = timeout_seconds
