# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_run_v1_condition import GoogleCloudRunV1Condition
from openapi_server import util


class ConfigurationStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conditions: List[GoogleCloudRunV1Condition]=None, latest_created_revision_name: str=None, latest_ready_revision_name: str=None, observed_generation: int=None):
        """ConfigurationStatus - a model defined in OpenAPI

        :param conditions: The conditions of this ConfigurationStatus.
        :param latest_created_revision_name: The latest_created_revision_name of this ConfigurationStatus.
        :param latest_ready_revision_name: The latest_ready_revision_name of this ConfigurationStatus.
        :param observed_generation: The observed_generation of this ConfigurationStatus.
        """
        self.openapi_types = {
            'conditions': List[GoogleCloudRunV1Condition],
            'latest_created_revision_name': str,
            'latest_ready_revision_name': str,
            'observed_generation': int
        }

        self.attribute_map = {
            'conditions': 'conditions',
            'latest_created_revision_name': 'latestCreatedRevisionName',
            'latest_ready_revision_name': 'latestReadyRevisionName',
            'observed_generation': 'observedGeneration'
        }

        self._conditions = conditions
        self._latest_created_revision_name = latest_created_revision_name
        self._latest_ready_revision_name = latest_ready_revision_name
        self._observed_generation = observed_generation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigurationStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigurationStatus of this ConfigurationStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conditions(self):
        """Gets the conditions of this ConfigurationStatus.

        Conditions communicate information about ongoing/complete reconciliation processes that bring the \"spec\" inline with the observed state of the world.

        :return: The conditions of this ConfigurationStatus.
        :rtype: List[GoogleCloudRunV1Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this ConfigurationStatus.

        Conditions communicate information about ongoing/complete reconciliation processes that bring the \"spec\" inline with the observed state of the world.

        :param conditions: The conditions of this ConfigurationStatus.
        :type conditions: List[GoogleCloudRunV1Condition]
        """

        self._conditions = conditions

    @property
    def latest_created_revision_name(self):
        """Gets the latest_created_revision_name of this ConfigurationStatus.

        LatestCreatedRevisionName is the last revision that was created from this Configuration. It might not be ready yet, so for the latest ready revision, use LatestReadyRevisionName.

        :return: The latest_created_revision_name of this ConfigurationStatus.
        :rtype: str
        """
        return self._latest_created_revision_name

    @latest_created_revision_name.setter
    def latest_created_revision_name(self, latest_created_revision_name):
        """Sets the latest_created_revision_name of this ConfigurationStatus.

        LatestCreatedRevisionName is the last revision that was created from this Configuration. It might not be ready yet, so for the latest ready revision, use LatestReadyRevisionName.

        :param latest_created_revision_name: The latest_created_revision_name of this ConfigurationStatus.
        :type latest_created_revision_name: str
        """

        self._latest_created_revision_name = latest_created_revision_name

    @property
    def latest_ready_revision_name(self):
        """Gets the latest_ready_revision_name of this ConfigurationStatus.

        LatestReadyRevisionName holds the name of the latest Revision stamped out from this Configuration that has had its \"Ready\" condition become \"True\".

        :return: The latest_ready_revision_name of this ConfigurationStatus.
        :rtype: str
        """
        return self._latest_ready_revision_name

    @latest_ready_revision_name.setter
    def latest_ready_revision_name(self, latest_ready_revision_name):
        """Sets the latest_ready_revision_name of this ConfigurationStatus.

        LatestReadyRevisionName holds the name of the latest Revision stamped out from this Configuration that has had its \"Ready\" condition become \"True\".

        :param latest_ready_revision_name: The latest_ready_revision_name of this ConfigurationStatus.
        :type latest_ready_revision_name: str
        """

        self._latest_ready_revision_name = latest_ready_revision_name

    @property
    def observed_generation(self):
        """Gets the observed_generation of this ConfigurationStatus.

        ObservedGeneration is the 'Generation' of the Configuration that was last processed by the controller. The observed generation is updated even if the controller failed to process the spec and create the Revision. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation, and the Ready condition's status is True or False.

        :return: The observed_generation of this ConfigurationStatus.
        :rtype: int
        """
        return self._observed_generation

    @observed_generation.setter
    def observed_generation(self, observed_generation):
        """Sets the observed_generation of this ConfigurationStatus.

        ObservedGeneration is the 'Generation' of the Configuration that was last processed by the controller. The observed generation is updated even if the controller failed to process the spec and create the Revision. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation, and the Ready condition's status is True or False.

        :param observed_generation: The observed_generation of this ConfigurationStatus.
        :type observed_generation: int
        """

        self._observed_generation = observed_generation
