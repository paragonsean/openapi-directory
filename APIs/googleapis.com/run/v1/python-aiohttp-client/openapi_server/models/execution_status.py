# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_run_v1_condition import GoogleCloudRunV1Condition
from openapi_server import util


class ExecutionStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancelled_count: int=None, completion_time: str=None, conditions: List[GoogleCloudRunV1Condition]=None, failed_count: int=None, log_uri: str=None, observed_generation: int=None, retried_count: int=None, running_count: int=None, start_time: str=None, succeeded_count: int=None):
        """ExecutionStatus - a model defined in OpenAPI

        :param cancelled_count: The cancelled_count of this ExecutionStatus.
        :param completion_time: The completion_time of this ExecutionStatus.
        :param conditions: The conditions of this ExecutionStatus.
        :param failed_count: The failed_count of this ExecutionStatus.
        :param log_uri: The log_uri of this ExecutionStatus.
        :param observed_generation: The observed_generation of this ExecutionStatus.
        :param retried_count: The retried_count of this ExecutionStatus.
        :param running_count: The running_count of this ExecutionStatus.
        :param start_time: The start_time of this ExecutionStatus.
        :param succeeded_count: The succeeded_count of this ExecutionStatus.
        """
        self.openapi_types = {
            'cancelled_count': int,
            'completion_time': str,
            'conditions': List[GoogleCloudRunV1Condition],
            'failed_count': int,
            'log_uri': str,
            'observed_generation': int,
            'retried_count': int,
            'running_count': int,
            'start_time': str,
            'succeeded_count': int
        }

        self.attribute_map = {
            'cancelled_count': 'cancelledCount',
            'completion_time': 'completionTime',
            'conditions': 'conditions',
            'failed_count': 'failedCount',
            'log_uri': 'logUri',
            'observed_generation': 'observedGeneration',
            'retried_count': 'retriedCount',
            'running_count': 'runningCount',
            'start_time': 'startTime',
            'succeeded_count': 'succeededCount'
        }

        self._cancelled_count = cancelled_count
        self._completion_time = completion_time
        self._conditions = conditions
        self._failed_count = failed_count
        self._log_uri = log_uri
        self._observed_generation = observed_generation
        self._retried_count = retried_count
        self._running_count = running_count
        self._start_time = start_time
        self._succeeded_count = succeeded_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecutionStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecutionStatus of this ExecutionStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancelled_count(self):
        """Gets the cancelled_count of this ExecutionStatus.

        Optional. The number of tasks which reached phase Cancelled.

        :return: The cancelled_count of this ExecutionStatus.
        :rtype: int
        """
        return self._cancelled_count

    @cancelled_count.setter
    def cancelled_count(self, cancelled_count):
        """Sets the cancelled_count of this ExecutionStatus.

        Optional. The number of tasks which reached phase Cancelled.

        :param cancelled_count: The cancelled_count of this ExecutionStatus.
        :type cancelled_count: int
        """

        self._cancelled_count = cancelled_count

    @property
    def completion_time(self):
        """Gets the completion_time of this ExecutionStatus.

        Optional. Represents the time that the execution was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional

        :return: The completion_time of this ExecutionStatus.
        :rtype: str
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this ExecutionStatus.

        Optional. Represents the time that the execution was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional

        :param completion_time: The completion_time of this ExecutionStatus.
        :type completion_time: str
        """

        self._completion_time = completion_time

    @property
    def conditions(self):
        """Gets the conditions of this ExecutionStatus.

        Optional. Conditions communicate information about ongoing/complete reconciliation processes that bring the \"spec\" inline with the observed state of the world. Execution-specific conditions include: * `ResourcesAvailable`: `True` when underlying resources have been provisioned. * `Started`: `True` when the execution has started to execute. * `Completed`: `True` when the execution has succeeded. `False` when the execution has failed.

        :return: The conditions of this ExecutionStatus.
        :rtype: List[GoogleCloudRunV1Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this ExecutionStatus.

        Optional. Conditions communicate information about ongoing/complete reconciliation processes that bring the \"spec\" inline with the observed state of the world. Execution-specific conditions include: * `ResourcesAvailable`: `True` when underlying resources have been provisioned. * `Started`: `True` when the execution has started to execute. * `Completed`: `True` when the execution has succeeded. `False` when the execution has failed.

        :param conditions: The conditions of this ExecutionStatus.
        :type conditions: List[GoogleCloudRunV1Condition]
        """

        self._conditions = conditions

    @property
    def failed_count(self):
        """Gets the failed_count of this ExecutionStatus.

        Optional. The number of tasks which reached phase Failed.

        :return: The failed_count of this ExecutionStatus.
        :rtype: int
        """
        return self._failed_count

    @failed_count.setter
    def failed_count(self, failed_count):
        """Sets the failed_count of this ExecutionStatus.

        Optional. The number of tasks which reached phase Failed.

        :param failed_count: The failed_count of this ExecutionStatus.
        :type failed_count: int
        """

        self._failed_count = failed_count

    @property
    def log_uri(self):
        """Gets the log_uri of this ExecutionStatus.

        Optional. URI where logs for this execution can be found in Cloud Console.

        :return: The log_uri of this ExecutionStatus.
        :rtype: str
        """
        return self._log_uri

    @log_uri.setter
    def log_uri(self, log_uri):
        """Sets the log_uri of this ExecutionStatus.

        Optional. URI where logs for this execution can be found in Cloud Console.

        :param log_uri: The log_uri of this ExecutionStatus.
        :type log_uri: str
        """

        self._log_uri = log_uri

    @property
    def observed_generation(self):
        """Gets the observed_generation of this ExecutionStatus.

        Optional. The 'generation' of the execution that was last processed by the controller.

        :return: The observed_generation of this ExecutionStatus.
        :rtype: int
        """
        return self._observed_generation

    @observed_generation.setter
    def observed_generation(self, observed_generation):
        """Sets the observed_generation of this ExecutionStatus.

        Optional. The 'generation' of the execution that was last processed by the controller.

        :param observed_generation: The observed_generation of this ExecutionStatus.
        :type observed_generation: int
        """

        self._observed_generation = observed_generation

    @property
    def retried_count(self):
        """Gets the retried_count of this ExecutionStatus.

        Optional. The number of tasks which have retried at least once.

        :return: The retried_count of this ExecutionStatus.
        :rtype: int
        """
        return self._retried_count

    @retried_count.setter
    def retried_count(self, retried_count):
        """Sets the retried_count of this ExecutionStatus.

        Optional. The number of tasks which have retried at least once.

        :param retried_count: The retried_count of this ExecutionStatus.
        :type retried_count: int
        """

        self._retried_count = retried_count

    @property
    def running_count(self):
        """Gets the running_count of this ExecutionStatus.

        Optional. The number of actively running tasks.

        :return: The running_count of this ExecutionStatus.
        :rtype: int
        """
        return self._running_count

    @running_count.setter
    def running_count(self, running_count):
        """Sets the running_count of this ExecutionStatus.

        Optional. The number of actively running tasks.

        :param running_count: The running_count of this ExecutionStatus.
        :type running_count: int
        """

        self._running_count = running_count

    @property
    def start_time(self):
        """Gets the start_time of this ExecutionStatus.

        Optional. Represents the time that the execution started to run. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.

        :return: The start_time of this ExecutionStatus.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ExecutionStatus.

        Optional. Represents the time that the execution started to run. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.

        :param start_time: The start_time of this ExecutionStatus.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def succeeded_count(self):
        """Gets the succeeded_count of this ExecutionStatus.

        Optional. The number of tasks which reached phase Succeeded.

        :return: The succeeded_count of this ExecutionStatus.
        :rtype: int
        """
        return self._succeeded_count

    @succeeded_count.setter
    def succeeded_count(self, succeeded_count):
        """Sets the succeeded_count of this ExecutionStatus.

        Optional. The number of tasks which reached phase Succeeded.

        :param succeeded_count: The succeeded_count of this ExecutionStatus.
        :type succeeded_count: int
        """

        self._succeeded_count = succeeded_count
