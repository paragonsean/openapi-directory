# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.local_object_reference import LocalObjectReference
from openapi_server import util


class ConfigMapKeySelector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, local_object_reference: LocalObjectReference=None, name: str=None, optional: bool=None):
        """ConfigMapKeySelector - a model defined in OpenAPI

        :param key: The key of this ConfigMapKeySelector.
        :param local_object_reference: The local_object_reference of this ConfigMapKeySelector.
        :param name: The name of this ConfigMapKeySelector.
        :param optional: The optional of this ConfigMapKeySelector.
        """
        self.openapi_types = {
            'key': str,
            'local_object_reference': LocalObjectReference,
            'name': str,
            'optional': bool
        }

        self.attribute_map = {
            'key': 'key',
            'local_object_reference': 'localObjectReference',
            'name': 'name',
            'optional': 'optional'
        }

        self._key = key
        self._local_object_reference = local_object_reference
        self._name = name
        self._optional = optional

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigMapKeySelector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigMapKeySelector of this ConfigMapKeySelector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this ConfigMapKeySelector.

        Required. Not supported by Cloud Run.

        :return: The key of this ConfigMapKeySelector.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ConfigMapKeySelector.

        Required. Not supported by Cloud Run.

        :param key: The key of this ConfigMapKeySelector.
        :type key: str
        """

        self._key = key

    @property
    def local_object_reference(self):
        """Gets the local_object_reference of this ConfigMapKeySelector.


        :return: The local_object_reference of this ConfigMapKeySelector.
        :rtype: LocalObjectReference
        """
        return self._local_object_reference

    @local_object_reference.setter
    def local_object_reference(self, local_object_reference):
        """Sets the local_object_reference of this ConfigMapKeySelector.


        :param local_object_reference: The local_object_reference of this ConfigMapKeySelector.
        :type local_object_reference: LocalObjectReference
        """

        self._local_object_reference = local_object_reference

    @property
    def name(self):
        """Gets the name of this ConfigMapKeySelector.

        Required. Not supported by Cloud Run.

        :return: The name of this ConfigMapKeySelector.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigMapKeySelector.

        Required. Not supported by Cloud Run.

        :param name: The name of this ConfigMapKeySelector.
        :type name: str
        """

        self._name = name

    @property
    def optional(self):
        """Gets the optional of this ConfigMapKeySelector.

        Not supported by Cloud Run.

        :return: The optional of this ConfigMapKeySelector.
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this ConfigMapKeySelector.

        Not supported by Cloud Run.

        :param optional: The optional of this ConfigMapKeySelector.
        :type optional: bool
        """

        self._optional = optional
