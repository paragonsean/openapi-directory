# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_to_path import KeyToPath
from openapi_server import util


class ConfigMapVolumeSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_mode: int=None, items: List[KeyToPath]=None, name: str=None, optional: bool=None):
        """ConfigMapVolumeSource - a model defined in OpenAPI

        :param default_mode: The default_mode of this ConfigMapVolumeSource.
        :param items: The items of this ConfigMapVolumeSource.
        :param name: The name of this ConfigMapVolumeSource.
        :param optional: The optional of this ConfigMapVolumeSource.
        """
        self.openapi_types = {
            'default_mode': int,
            'items': List[KeyToPath],
            'name': str,
            'optional': bool
        }

        self.attribute_map = {
            'default_mode': 'defaultMode',
            'items': 'items',
            'name': 'name',
            'optional': 'optional'
        }

        self._default_mode = default_mode
        self._items = items
        self._name = name
        self._optional = optional

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigMapVolumeSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigMapVolumeSource of this ConfigMapVolumeSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_mode(self):
        """Gets the default_mode of this ConfigMapVolumeSource.

        (Optional) Integer representation of mode bits to use on created files by default. Must be a value between 01 and 0777 (octal). If 0 or not set, it will default to 0644. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.

        :return: The default_mode of this ConfigMapVolumeSource.
        :rtype: int
        """
        return self._default_mode

    @default_mode.setter
    def default_mode(self, default_mode):
        """Sets the default_mode of this ConfigMapVolumeSource.

        (Optional) Integer representation of mode bits to use on created files by default. Must be a value between 01 and 0777 (octal). If 0 or not set, it will default to 0644. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.

        :param default_mode: The default_mode of this ConfigMapVolumeSource.
        :type default_mode: int
        """

        self._default_mode = default_mode

    @property
    def items(self):
        """Gets the items of this ConfigMapVolumeSource.

        (Optional) If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.

        :return: The items of this ConfigMapVolumeSource.
        :rtype: List[KeyToPath]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ConfigMapVolumeSource.

        (Optional) If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified that is not present in the Secret, the volume setup will error unless it is marked optional.

        :param items: The items of this ConfigMapVolumeSource.
        :type items: List[KeyToPath]
        """

        self._items = items

    @property
    def name(self):
        """Gets the name of this ConfigMapVolumeSource.

        Name of the config.

        :return: The name of this ConfigMapVolumeSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigMapVolumeSource.

        Name of the config.

        :param name: The name of this ConfigMapVolumeSource.
        :type name: str
        """

        self._name = name

    @property
    def optional(self):
        """Gets the optional of this ConfigMapVolumeSource.

        (Optional) Specify whether the Secret or its keys must be defined.

        :return: The optional of this ConfigMapVolumeSource.
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this ConfigMapVolumeSource.

        (Optional) Specify whether the Secret or its keys must be defined.

        :param optional: The optional of this ConfigMapVolumeSource.
        :type optional: bool
        """

        self._optional = optional
