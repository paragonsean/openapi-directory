# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrafficTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration_name: str=None, latest_revision: bool=None, percent: int=None, revision_name: str=None, tag: str=None, url: str=None):
        """TrafficTarget - a model defined in OpenAPI

        :param configuration_name: The configuration_name of this TrafficTarget.
        :param latest_revision: The latest_revision of this TrafficTarget.
        :param percent: The percent of this TrafficTarget.
        :param revision_name: The revision_name of this TrafficTarget.
        :param tag: The tag of this TrafficTarget.
        :param url: The url of this TrafficTarget.
        """
        self.openapi_types = {
            'configuration_name': str,
            'latest_revision': bool,
            'percent': int,
            'revision_name': str,
            'tag': str,
            'url': str
        }

        self.attribute_map = {
            'configuration_name': 'configurationName',
            'latest_revision': 'latestRevision',
            'percent': 'percent',
            'revision_name': 'revisionName',
            'tag': 'tag',
            'url': 'url'
        }

        self._configuration_name = configuration_name
        self._latest_revision = latest_revision
        self._percent = percent
        self._revision_name = revision_name
        self._tag = tag
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrafficTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrafficTarget of this TrafficTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration_name(self):
        """Gets the configuration_name of this TrafficTarget.

        [Deprecated] Not supported in Cloud Run. It must be empty.

        :return: The configuration_name of this TrafficTarget.
        :rtype: str
        """
        return self._configuration_name

    @configuration_name.setter
    def configuration_name(self, configuration_name):
        """Sets the configuration_name of this TrafficTarget.

        [Deprecated] Not supported in Cloud Run. It must be empty.

        :param configuration_name: The configuration_name of this TrafficTarget.
        :type configuration_name: str
        """

        self._configuration_name = configuration_name

    @property
    def latest_revision(self):
        """Gets the latest_revision of this TrafficTarget.

        Uses the \"status.latestReadyRevisionName\" of the Service to determine the traffic target. When it changes, traffic will automatically migrate from the prior \"latest ready\" revision to the new one. This field must be false if RevisionName is set. This field defaults to true otherwise. If the field is set to true on Status, this means that the Revision was resolved from the Service's latest ready revision.

        :return: The latest_revision of this TrafficTarget.
        :rtype: bool
        """
        return self._latest_revision

    @latest_revision.setter
    def latest_revision(self, latest_revision):
        """Sets the latest_revision of this TrafficTarget.

        Uses the \"status.latestReadyRevisionName\" of the Service to determine the traffic target. When it changes, traffic will automatically migrate from the prior \"latest ready\" revision to the new one. This field must be false if RevisionName is set. This field defaults to true otherwise. If the field is set to true on Status, this means that the Revision was resolved from the Service's latest ready revision.

        :param latest_revision: The latest_revision of this TrafficTarget.
        :type latest_revision: bool
        """

        self._latest_revision = latest_revision

    @property
    def percent(self):
        """Gets the percent of this TrafficTarget.

        Percent specifies percent of the traffic to this Revision or Configuration. This defaults to zero if unspecified.

        :return: The percent of this TrafficTarget.
        :rtype: int
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """Sets the percent of this TrafficTarget.

        Percent specifies percent of the traffic to this Revision or Configuration. This defaults to zero if unspecified.

        :param percent: The percent of this TrafficTarget.
        :type percent: int
        """

        self._percent = percent

    @property
    def revision_name(self):
        """Gets the revision_name of this TrafficTarget.

        Points this traffic target to a specific Revision. This field is mutually exclusive with latest_revision.

        :return: The revision_name of this TrafficTarget.
        :rtype: str
        """
        return self._revision_name

    @revision_name.setter
    def revision_name(self, revision_name):
        """Sets the revision_name of this TrafficTarget.

        Points this traffic target to a specific Revision. This field is mutually exclusive with latest_revision.

        :param revision_name: The revision_name of this TrafficTarget.
        :type revision_name: str
        """

        self._revision_name = revision_name

    @property
    def tag(self):
        """Gets the tag of this TrafficTarget.

        Tag is used to expose a dedicated url for referencing this target exclusively.

        :return: The tag of this TrafficTarget.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this TrafficTarget.

        Tag is used to expose a dedicated url for referencing this target exclusively.

        :param tag: The tag of this TrafficTarget.
        :type tag: str
        """

        self._tag = tag

    @property
    def url(self):
        """Gets the url of this TrafficTarget.

        Output only. URL displays the URL for accessing tagged traffic targets. URL is displayed in status, and is disallowed on spec. URL must contain a scheme (e.g. https://) and a hostname, but may not contain anything else (e.g. basic auth, url path, etc.)

        :return: The url of this TrafficTarget.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TrafficTarget.

        Output only. URL displays the URL for accessing tagged traffic targets. URL is displayed in status, and is disallowed on spec. URL must contain a scheme (e.g. https://) and a hostname, but may not contain anything else (e.g. basic auth, url path, etc.)

        :param url: The url of this TrafficTarget.
        :type url: str
        """

        self._url = url
