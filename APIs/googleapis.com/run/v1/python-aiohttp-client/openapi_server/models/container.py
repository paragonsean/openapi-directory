# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_port import ContainerPort
from openapi_server.models.env_from_source import EnvFromSource
from openapi_server.models.env_var import EnvVar
from openapi_server.models.probe import Probe
from openapi_server.models.resource_requirements import ResourceRequirements
from openapi_server.models.security_context import SecurityContext
from openapi_server.models.volume_mount import VolumeMount
from openapi_server import util


class Container(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, args: List[str]=None, command: List[str]=None, env: List[EnvVar]=None, env_from: List[EnvFromSource]=None, image: str=None, image_pull_policy: str=None, liveness_probe: Probe=None, name: str=None, ports: List[ContainerPort]=None, readiness_probe: Probe=None, resources: ResourceRequirements=None, security_context: SecurityContext=None, startup_probe: Probe=None, termination_message_path: str=None, termination_message_policy: str=None, volume_mounts: List[VolumeMount]=None, working_dir: str=None):
        """Container - a model defined in OpenAPI

        :param args: The args of this Container.
        :param command: The command of this Container.
        :param env: The env of this Container.
        :param env_from: The env_from of this Container.
        :param image: The image of this Container.
        :param image_pull_policy: The image_pull_policy of this Container.
        :param liveness_probe: The liveness_probe of this Container.
        :param name: The name of this Container.
        :param ports: The ports of this Container.
        :param readiness_probe: The readiness_probe of this Container.
        :param resources: The resources of this Container.
        :param security_context: The security_context of this Container.
        :param startup_probe: The startup_probe of this Container.
        :param termination_message_path: The termination_message_path of this Container.
        :param termination_message_policy: The termination_message_policy of this Container.
        :param volume_mounts: The volume_mounts of this Container.
        :param working_dir: The working_dir of this Container.
        """
        self.openapi_types = {
            'args': List[str],
            'command': List[str],
            'env': List[EnvVar],
            'env_from': List[EnvFromSource],
            'image': str,
            'image_pull_policy': str,
            'liveness_probe': Probe,
            'name': str,
            'ports': List[ContainerPort],
            'readiness_probe': Probe,
            'resources': ResourceRequirements,
            'security_context': SecurityContext,
            'startup_probe': Probe,
            'termination_message_path': str,
            'termination_message_policy': str,
            'volume_mounts': List[VolumeMount],
            'working_dir': str
        }

        self.attribute_map = {
            'args': 'args',
            'command': 'command',
            'env': 'env',
            'env_from': 'envFrom',
            'image': 'image',
            'image_pull_policy': 'imagePullPolicy',
            'liveness_probe': 'livenessProbe',
            'name': 'name',
            'ports': 'ports',
            'readiness_probe': 'readinessProbe',
            'resources': 'resources',
            'security_context': 'securityContext',
            'startup_probe': 'startupProbe',
            'termination_message_path': 'terminationMessagePath',
            'termination_message_policy': 'terminationMessagePolicy',
            'volume_mounts': 'volumeMounts',
            'working_dir': 'workingDir'
        }

        self._args = args
        self._command = command
        self._env = env
        self._env_from = env_from
        self._image = image
        self._image_pull_policy = image_pull_policy
        self._liveness_probe = liveness_probe
        self._name = name
        self._ports = ports
        self._readiness_probe = readiness_probe
        self._resources = resources
        self._security_context = security_context
        self._startup_probe = startup_probe
        self._termination_message_path = termination_message_path
        self._termination_message_policy = termination_message_policy
        self._volume_mounts = volume_mounts
        self._working_dir = working_dir

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Container':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Container of this Container.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def args(self):
        """Gets the args of this Container.

        Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references are not supported in Cloud Run.

        :return: The args of this Container.
        :rtype: List[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this Container.

        Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references are not supported in Cloud Run.

        :param args: The args of this Container.
        :type args: List[str]
        """

        self._args = args

    @property
    def command(self):
        """Gets the command of this Container.

        Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references are not supported in Cloud Run.

        :return: The command of this Container.
        :rtype: List[str]
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this Container.

        Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references are not supported in Cloud Run.

        :param command: The command of this Container.
        :type command: List[str]
        """

        self._command = command

    @property
    def env(self):
        """Gets the env of this Container.

        List of environment variables to set in the container. EnvVar with duplicate names are generally allowed; if referencing a secret, the name must be unique for the container. For non-secret EnvVar names, the Container will only get the last-declared one.

        :return: The env of this Container.
        :rtype: List[EnvVar]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this Container.

        List of environment variables to set in the container. EnvVar with duplicate names are generally allowed; if referencing a secret, the name must be unique for the container. For non-secret EnvVar names, the Container will only get the last-declared one.

        :param env: The env of this Container.
        :type env: List[EnvVar]
        """

        self._env = env

    @property
    def env_from(self):
        """Gets the env_from of this Container.

        Not supported by Cloud Run.

        :return: The env_from of this Container.
        :rtype: List[EnvFromSource]
        """
        return self._env_from

    @env_from.setter
    def env_from(self, env_from):
        """Sets the env_from of this Container.

        Not supported by Cloud Run.

        :param env_from: The env_from of this Container.
        :type env_from: List[EnvFromSource]
        """

        self._env_from = env_from

    @property
    def image(self):
        """Gets the image of this Container.

        Required. Name of the container image in Dockerhub, Google Artifact Registry, or Google Container Registry. If the host is not provided, Dockerhub is assumed.

        :return: The image of this Container.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Container.

        Required. Name of the container image in Dockerhub, Google Artifact Registry, or Google Container Registry. If the host is not provided, Dockerhub is assumed.

        :param image: The image of this Container.
        :type image: str
        """

        self._image = image

    @property
    def image_pull_policy(self):
        """Gets the image_pull_policy of this Container.

        Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.

        :return: The image_pull_policy of this Container.
        :rtype: str
        """
        return self._image_pull_policy

    @image_pull_policy.setter
    def image_pull_policy(self, image_pull_policy):
        """Sets the image_pull_policy of this Container.

        Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.

        :param image_pull_policy: The image_pull_policy of this Container.
        :type image_pull_policy: str
        """

        self._image_pull_policy = image_pull_policy

    @property
    def liveness_probe(self):
        """Gets the liveness_probe of this Container.


        :return: The liveness_probe of this Container.
        :rtype: Probe
        """
        return self._liveness_probe

    @liveness_probe.setter
    def liveness_probe(self, liveness_probe):
        """Sets the liveness_probe of this Container.


        :param liveness_probe: The liveness_probe of this Container.
        :type liveness_probe: Probe
        """

        self._liveness_probe = liveness_probe

    @property
    def name(self):
        """Gets the name of this Container.

        Name of the container specified as a DNS_LABEL (RFC 1123).

        :return: The name of this Container.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Container.

        Name of the container specified as a DNS_LABEL (RFC 1123).

        :param name: The name of this Container.
        :type name: str
        """

        self._name = name

    @property
    def ports(self):
        """Gets the ports of this Container.

        List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.

        :return: The ports of this Container.
        :rtype: List[ContainerPort]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this Container.

        List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.

        :param ports: The ports of this Container.
        :type ports: List[ContainerPort]
        """

        self._ports = ports

    @property
    def readiness_probe(self):
        """Gets the readiness_probe of this Container.


        :return: The readiness_probe of this Container.
        :rtype: Probe
        """
        return self._readiness_probe

    @readiness_probe.setter
    def readiness_probe(self, readiness_probe):
        """Sets the readiness_probe of this Container.


        :param readiness_probe: The readiness_probe of this Container.
        :type readiness_probe: Probe
        """

        self._readiness_probe = readiness_probe

    @property
    def resources(self):
        """Gets the resources of this Container.


        :return: The resources of this Container.
        :rtype: ResourceRequirements
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this Container.


        :param resources: The resources of this Container.
        :type resources: ResourceRequirements
        """

        self._resources = resources

    @property
    def security_context(self):
        """Gets the security_context of this Container.


        :return: The security_context of this Container.
        :rtype: SecurityContext
        """
        return self._security_context

    @security_context.setter
    def security_context(self, security_context):
        """Sets the security_context of this Container.


        :param security_context: The security_context of this Container.
        :type security_context: SecurityContext
        """

        self._security_context = security_context

    @property
    def startup_probe(self):
        """Gets the startup_probe of this Container.


        :return: The startup_probe of this Container.
        :rtype: Probe
        """
        return self._startup_probe

    @startup_probe.setter
    def startup_probe(self, startup_probe):
        """Sets the startup_probe of this Container.


        :param startup_probe: The startup_probe of this Container.
        :type startup_probe: Probe
        """

        self._startup_probe = startup_probe

    @property
    def termination_message_path(self):
        """Gets the termination_message_path of this Container.

        Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log.

        :return: The termination_message_path of this Container.
        :rtype: str
        """
        return self._termination_message_path

    @termination_message_path.setter
    def termination_message_path(self, termination_message_path):
        """Sets the termination_message_path of this Container.

        Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log.

        :param termination_message_path: The termination_message_path of this Container.
        :type termination_message_path: str
        """

        self._termination_message_path = termination_message_path

    @property
    def termination_message_policy(self):
        """Gets the termination_message_policy of this Container.

        Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.

        :return: The termination_message_policy of this Container.
        :rtype: str
        """
        return self._termination_message_policy

    @termination_message_policy.setter
    def termination_message_policy(self, termination_message_policy):
        """Sets the termination_message_policy of this Container.

        Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.

        :param termination_message_policy: The termination_message_policy of this Container.
        :type termination_message_policy: str
        """

        self._termination_message_policy = termination_message_policy

    @property
    def volume_mounts(self):
        """Gets the volume_mounts of this Container.

        Volume to mount into the container's filesystem. Only supports SecretVolumeSources. Pod volumes to mount into the container's filesystem.

        :return: The volume_mounts of this Container.
        :rtype: List[VolumeMount]
        """
        return self._volume_mounts

    @volume_mounts.setter
    def volume_mounts(self, volume_mounts):
        """Sets the volume_mounts of this Container.

        Volume to mount into the container's filesystem. Only supports SecretVolumeSources. Pod volumes to mount into the container's filesystem.

        :param volume_mounts: The volume_mounts of this Container.
        :type volume_mounts: List[VolumeMount]
        """

        self._volume_mounts = volume_mounts

    @property
    def working_dir(self):
        """Gets the working_dir of this Container.

        Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.

        :return: The working_dir of this Container.
        :rtype: str
        """
        return self._working_dir

    @working_dir.setter
    def working_dir(self, working_dir):
        """Sets the working_dir of this Container.

        Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.

        :param working_dir: The working_dir of this Container.
        :type working_dir: str
        """

        self._working_dir = working_dir
