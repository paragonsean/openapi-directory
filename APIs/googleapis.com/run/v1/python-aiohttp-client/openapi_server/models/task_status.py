# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_run_v1_condition import GoogleCloudRunV1Condition
from openapi_server.models.task_attempt_result import TaskAttemptResult
from openapi_server import util


class TaskStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completion_time: str=None, conditions: List[GoogleCloudRunV1Condition]=None, index: int=None, last_attempt_result: TaskAttemptResult=None, log_uri: str=None, observed_generation: int=None, retried: int=None, start_time: str=None):
        """TaskStatus - a model defined in OpenAPI

        :param completion_time: The completion_time of this TaskStatus.
        :param conditions: The conditions of this TaskStatus.
        :param index: The index of this TaskStatus.
        :param last_attempt_result: The last_attempt_result of this TaskStatus.
        :param log_uri: The log_uri of this TaskStatus.
        :param observed_generation: The observed_generation of this TaskStatus.
        :param retried: The retried of this TaskStatus.
        :param start_time: The start_time of this TaskStatus.
        """
        self.openapi_types = {
            'completion_time': str,
            'conditions': List[GoogleCloudRunV1Condition],
            'index': int,
            'last_attempt_result': TaskAttemptResult,
            'log_uri': str,
            'observed_generation': int,
            'retried': int,
            'start_time': str
        }

        self.attribute_map = {
            'completion_time': 'completionTime',
            'conditions': 'conditions',
            'index': 'index',
            'last_attempt_result': 'lastAttemptResult',
            'log_uri': 'logUri',
            'observed_generation': 'observedGeneration',
            'retried': 'retried',
            'start_time': 'startTime'
        }

        self._completion_time = completion_time
        self._conditions = conditions
        self._index = index
        self._last_attempt_result = last_attempt_result
        self._log_uri = log_uri
        self._observed_generation = observed_generation
        self._retried = retried
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskStatus of this TaskStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completion_time(self):
        """Gets the completion_time of this TaskStatus.

        Optional. Represents time when the task was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.

        :return: The completion_time of this TaskStatus.
        :rtype: str
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this TaskStatus.

        Optional. Represents time when the task was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.

        :param completion_time: The completion_time of this TaskStatus.
        :type completion_time: str
        """

        self._completion_time = completion_time

    @property
    def conditions(self):
        """Gets the conditions of this TaskStatus.

        Optional. Conditions communicate information about ongoing/complete reconciliation processes that bring the \"spec\" inline with the observed state of the world. Task-specific conditions include: * `Started`: `True` when the task has started to execute. * `Completed`: `True` when the task has succeeded. `False` when the task has failed.

        :return: The conditions of this TaskStatus.
        :rtype: List[GoogleCloudRunV1Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this TaskStatus.

        Optional. Conditions communicate information about ongoing/complete reconciliation processes that bring the \"spec\" inline with the observed state of the world. Task-specific conditions include: * `Started`: `True` when the task has started to execute. * `Completed`: `True` when the task has succeeded. `False` when the task has failed.

        :param conditions: The conditions of this TaskStatus.
        :type conditions: List[GoogleCloudRunV1Condition]
        """

        self._conditions = conditions

    @property
    def index(self):
        """Gets the index of this TaskStatus.

        Required. Index of the task, unique per execution, and beginning at 0.

        :return: The index of this TaskStatus.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this TaskStatus.

        Required. Index of the task, unique per execution, and beginning at 0.

        :param index: The index of this TaskStatus.
        :type index: int
        """

        self._index = index

    @property
    def last_attempt_result(self):
        """Gets the last_attempt_result of this TaskStatus.


        :return: The last_attempt_result of this TaskStatus.
        :rtype: TaskAttemptResult
        """
        return self._last_attempt_result

    @last_attempt_result.setter
    def last_attempt_result(self, last_attempt_result):
        """Sets the last_attempt_result of this TaskStatus.


        :param last_attempt_result: The last_attempt_result of this TaskStatus.
        :type last_attempt_result: TaskAttemptResult
        """

        self._last_attempt_result = last_attempt_result

    @property
    def log_uri(self):
        """Gets the log_uri of this TaskStatus.

        Optional. URI where logs for this task can be found in Cloud Console.

        :return: The log_uri of this TaskStatus.
        :rtype: str
        """
        return self._log_uri

    @log_uri.setter
    def log_uri(self, log_uri):
        """Sets the log_uri of this TaskStatus.

        Optional. URI where logs for this task can be found in Cloud Console.

        :param log_uri: The log_uri of this TaskStatus.
        :type log_uri: str
        """

        self._log_uri = log_uri

    @property
    def observed_generation(self):
        """Gets the observed_generation of this TaskStatus.

        Optional. The 'generation' of the task that was last processed by the controller.

        :return: The observed_generation of this TaskStatus.
        :rtype: int
        """
        return self._observed_generation

    @observed_generation.setter
    def observed_generation(self, observed_generation):
        """Sets the observed_generation of this TaskStatus.

        Optional. The 'generation' of the task that was last processed by the controller.

        :param observed_generation: The observed_generation of this TaskStatus.
        :type observed_generation: int
        """

        self._observed_generation = observed_generation

    @property
    def retried(self):
        """Gets the retried of this TaskStatus.

        Optional. The number of times this task was retried. Instances are retried when they fail up to the maxRetries limit.

        :return: The retried of this TaskStatus.
        :rtype: int
        """
        return self._retried

    @retried.setter
    def retried(self, retried):
        """Sets the retried of this TaskStatus.

        Optional. The number of times this task was retried. Instances are retried when they fail up to the maxRetries limit.

        :param retried: The retried of this TaskStatus.
        :type retried: int
        """

        self._retried = retried

    @property
    def start_time(self):
        """Gets the start_time of this TaskStatus.

        Optional. Represents time when the task started to run. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.

        :return: The start_time of this TaskStatus.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TaskStatus.

        Optional. Represents time when the task started to run. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.

        :param start_time: The start_time of this TaskStatus.
        :type start_time: str
        """

        self._start_time = start_time
