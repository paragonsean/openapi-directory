# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_to_path import KeyToPath
from openapi_server import util


class SecretVolumeSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_mode: int=None, items: List[KeyToPath]=None, optional: bool=None, secret_name: str=None):
        """SecretVolumeSource - a model defined in OpenAPI

        :param default_mode: The default_mode of this SecretVolumeSource.
        :param items: The items of this SecretVolumeSource.
        :param optional: The optional of this SecretVolumeSource.
        :param secret_name: The secret_name of this SecretVolumeSource.
        """
        self.openapi_types = {
            'default_mode': int,
            'items': List[KeyToPath],
            'optional': bool,
            'secret_name': str
        }

        self.attribute_map = {
            'default_mode': 'defaultMode',
            'items': 'items',
            'optional': 'optional',
            'secret_name': 'secretName'
        }

        self._default_mode = default_mode
        self._items = items
        self._optional = optional
        self._secret_name = secret_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecretVolumeSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecretVolumeSource of this SecretVolumeSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_mode(self):
        """Gets the default_mode of this SecretVolumeSource.

        Integer representation of mode bits to use on created files by default. Must be a value between 01 and 0777 (octal). If 0 or not set, it will default to 0444. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.

        :return: The default_mode of this SecretVolumeSource.
        :rtype: int
        """
        return self._default_mode

    @default_mode.setter
    def default_mode(self, default_mode):
        """Sets the default_mode of this SecretVolumeSource.

        Integer representation of mode bits to use on created files by default. Must be a value between 01 and 0777 (octal). If 0 or not set, it will default to 0444. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.

        :param default_mode: The default_mode of this SecretVolumeSource.
        :type default_mode: int
        """

        self._default_mode = default_mode

    @property
    def items(self):
        """Gets the items of this SecretVolumeSource.

        A list of secret versions to mount in the volume. If no items are specified, the volume will expose a file with the same name as the secret name. The contents of the file will be the data in the latest version of the secret. If items are specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify both a key and a path.

        :return: The items of this SecretVolumeSource.
        :rtype: List[KeyToPath]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SecretVolumeSource.

        A list of secret versions to mount in the volume. If no items are specified, the volume will expose a file with the same name as the secret name. The contents of the file will be the data in the latest version of the secret. If items are specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify both a key and a path.

        :param items: The items of this SecretVolumeSource.
        :type items: List[KeyToPath]
        """

        self._items = items

    @property
    def optional(self):
        """Gets the optional of this SecretVolumeSource.

        Not supported by Cloud Run.

        :return: The optional of this SecretVolumeSource.
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this SecretVolumeSource.

        Not supported by Cloud Run.

        :param optional: The optional of this SecretVolumeSource.
        :type optional: bool
        """

        self._optional = optional

    @property
    def secret_name(self):
        """Gets the secret_name of this SecretVolumeSource.

        The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. Name of the secret in the container's namespace to use.

        :return: The secret_name of this SecretVolumeSource.
        :rtype: str
        """
        return self._secret_name

    @secret_name.setter
    def secret_name(self, secret_name):
        """Sets the secret_name of this SecretVolumeSource.

        The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. Name of the secret in the container's namespace to use.

        :param secret_name: The secret_name of this SecretVolumeSource.
        :type secret_name: str
        """

        self._secret_name = secret_name
