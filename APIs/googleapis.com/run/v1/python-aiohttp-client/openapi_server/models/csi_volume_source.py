# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CSIVolumeSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, driver: str=None, read_only: bool=None, volume_attributes: Dict[str, str]=None):
        """CSIVolumeSource - a model defined in OpenAPI

        :param driver: The driver of this CSIVolumeSource.
        :param read_only: The read_only of this CSIVolumeSource.
        :param volume_attributes: The volume_attributes of this CSIVolumeSource.
        """
        self.openapi_types = {
            'driver': str,
            'read_only': bool,
            'volume_attributes': Dict[str, str]
        }

        self.attribute_map = {
            'driver': 'driver',
            'read_only': 'readOnly',
            'volume_attributes': 'volumeAttributes'
        }

        self._driver = driver
        self._read_only = read_only
        self._volume_attributes = volume_attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CSIVolumeSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CSIVolumeSource of this CSIVolumeSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def driver(self):
        """Gets the driver of this CSIVolumeSource.

        name of the CSI driver for the requested storage system. Cloud Run supports the following drivers: * gcsfuse.run.googleapis.com : Mount a Cloud Storage Bucket as a volume.

        :return: The driver of this CSIVolumeSource.
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this CSIVolumeSource.

        name of the CSI driver for the requested storage system. Cloud Run supports the following drivers: * gcsfuse.run.googleapis.com : Mount a Cloud Storage Bucket as a volume.

        :param driver: The driver of this CSIVolumeSource.
        :type driver: str
        """

        self._driver = driver

    @property
    def read_only(self):
        """Gets the read_only of this CSIVolumeSource.

        If true, mount the volume as read only. Defaults to false.

        :return: The read_only of this CSIVolumeSource.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this CSIVolumeSource.

        If true, mount the volume as read only. Defaults to false.

        :param read_only: The read_only of this CSIVolumeSource.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def volume_attributes(self):
        """Gets the volume_attributes of this CSIVolumeSource.

        stores driver specific attributes. For Google Cloud Storage volumes, the following attributes are supported: * bucketName: the name of the Cloud Storage bucket to mount. The Cloud Run Service identity must have access to this bucket.

        :return: The volume_attributes of this CSIVolumeSource.
        :rtype: Dict[str, str]
        """
        return self._volume_attributes

    @volume_attributes.setter
    def volume_attributes(self, volume_attributes):
        """Sets the volume_attributes of this CSIVolumeSource.

        stores driver specific attributes. For Google Cloud Storage volumes, the following attributes are supported: * bucketName: the name of the Cloud Storage bucket to mount. The Cloud Run Service identity must have access to this bucket.

        :param volume_attributes: The volume_attributes of this CSIVolumeSource.
        :type volume_attributes: Dict[str, str]
        """

        self._volume_attributes = volume_attributes
