# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DomainMappingSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_mode: str=None, force_override: bool=None, route_name: str=None):
        """DomainMappingSpec - a model defined in OpenAPI

        :param certificate_mode: The certificate_mode of this DomainMappingSpec.
        :param force_override: The force_override of this DomainMappingSpec.
        :param route_name: The route_name of this DomainMappingSpec.
        """
        self.openapi_types = {
            'certificate_mode': str,
            'force_override': bool,
            'route_name': str
        }

        self.attribute_map = {
            'certificate_mode': 'certificateMode',
            'force_override': 'forceOverride',
            'route_name': 'routeName'
        }

        self._certificate_mode = certificate_mode
        self._force_override = force_override
        self._route_name = route_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DomainMappingSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DomainMappingSpec of this DomainMappingSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_mode(self):
        """Gets the certificate_mode of this DomainMappingSpec.

        The mode of the certificate.

        :return: The certificate_mode of this DomainMappingSpec.
        :rtype: str
        """
        return self._certificate_mode

    @certificate_mode.setter
    def certificate_mode(self, certificate_mode):
        """Sets the certificate_mode of this DomainMappingSpec.

        The mode of the certificate.

        :param certificate_mode: The certificate_mode of this DomainMappingSpec.
        :type certificate_mode: str
        """
        allowed_values = ["CERTIFICATE_MODE_UNSPECIFIED", "NONE", "AUTOMATIC"]  # noqa: E501
        if certificate_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `certificate_mode` ({0}), must be one of {1}"
                .format(certificate_mode, allowed_values)
            )

        self._certificate_mode = certificate_mode

    @property
    def force_override(self):
        """Gets the force_override of this DomainMappingSpec.

        If set, the mapping will override any mapping set before this spec was set. It is recommended that the user leaves this empty to receive an error warning about a potential conflict and only set it once the respective UI has given such a warning.

        :return: The force_override of this DomainMappingSpec.
        :rtype: bool
        """
        return self._force_override

    @force_override.setter
    def force_override(self, force_override):
        """Sets the force_override of this DomainMappingSpec.

        If set, the mapping will override any mapping set before this spec was set. It is recommended that the user leaves this empty to receive an error warning about a potential conflict and only set it once the respective UI has given such a warning.

        :param force_override: The force_override of this DomainMappingSpec.
        :type force_override: bool
        """

        self._force_override = force_override

    @property
    def route_name(self):
        """Gets the route_name of this DomainMappingSpec.

        The name of the Knative Route that this DomainMapping applies to. The route must exist.

        :return: The route_name of this DomainMappingSpec.
        :rtype: str
        """
        return self._route_name

    @route_name.setter
    def route_name(self, route_name):
        """Sets the route_name of this DomainMappingSpec.

        The name of the Knative Route that this DomainMapping applies to. The route must exist.

        :param route_name: The route_name of this DomainMappingSpec.
        :type route_name: str
        """

        self._route_name = route_name
