# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container import Container
from openapi_server.models.local_object_reference import LocalObjectReference
from openapi_server.models.volume import Volume
from openapi_server import util


class RevisionSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_concurrency: int=None, containers: List[Container]=None, enable_service_links: bool=None, image_pull_secrets: List[LocalObjectReference]=None, service_account_name: str=None, timeout_seconds: int=None, volumes: List[Volume]=None):
        """RevisionSpec - a model defined in OpenAPI

        :param container_concurrency: The container_concurrency of this RevisionSpec.
        :param containers: The containers of this RevisionSpec.
        :param enable_service_links: The enable_service_links of this RevisionSpec.
        :param image_pull_secrets: The image_pull_secrets of this RevisionSpec.
        :param service_account_name: The service_account_name of this RevisionSpec.
        :param timeout_seconds: The timeout_seconds of this RevisionSpec.
        :param volumes: The volumes of this RevisionSpec.
        """
        self.openapi_types = {
            'container_concurrency': int,
            'containers': List[Container],
            'enable_service_links': bool,
            'image_pull_secrets': List[LocalObjectReference],
            'service_account_name': str,
            'timeout_seconds': int,
            'volumes': List[Volume]
        }

        self.attribute_map = {
            'container_concurrency': 'containerConcurrency',
            'containers': 'containers',
            'enable_service_links': 'enableServiceLinks',
            'image_pull_secrets': 'imagePullSecrets',
            'service_account_name': 'serviceAccountName',
            'timeout_seconds': 'timeoutSeconds',
            'volumes': 'volumes'
        }

        self._container_concurrency = container_concurrency
        self._containers = containers
        self._enable_service_links = enable_service_links
        self._image_pull_secrets = image_pull_secrets
        self._service_account_name = service_account_name
        self._timeout_seconds = timeout_seconds
        self._volumes = volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RevisionSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RevisionSpec of this RevisionSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_concurrency(self):
        """Gets the container_concurrency of this RevisionSpec.

        ContainerConcurrency specifies the maximum allowed in-flight (concurrent) requests per container instance of the Revision. If not specified, defaults to 80.

        :return: The container_concurrency of this RevisionSpec.
        :rtype: int
        """
        return self._container_concurrency

    @container_concurrency.setter
    def container_concurrency(self, container_concurrency):
        """Sets the container_concurrency of this RevisionSpec.

        ContainerConcurrency specifies the maximum allowed in-flight (concurrent) requests per container instance of the Revision. If not specified, defaults to 80.

        :param container_concurrency: The container_concurrency of this RevisionSpec.
        :type container_concurrency: int
        """

        self._container_concurrency = container_concurrency

    @property
    def containers(self):
        """Gets the containers of this RevisionSpec.

        Required. Containers holds the single container that defines the unit of execution for this Revision. In the context of a Revision, we disallow a number of fields on this Container, including: name and lifecycle. In Cloud Run, only a single container may be provided.

        :return: The containers of this RevisionSpec.
        :rtype: List[Container]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this RevisionSpec.

        Required. Containers holds the single container that defines the unit of execution for this Revision. In the context of a Revision, we disallow a number of fields on this Container, including: name and lifecycle. In Cloud Run, only a single container may be provided.

        :param containers: The containers of this RevisionSpec.
        :type containers: List[Container]
        """

        self._containers = containers

    @property
    def enable_service_links(self):
        """Gets the enable_service_links of this RevisionSpec.

        Not supported by Cloud Run.

        :return: The enable_service_links of this RevisionSpec.
        :rtype: bool
        """
        return self._enable_service_links

    @enable_service_links.setter
    def enable_service_links(self, enable_service_links):
        """Sets the enable_service_links of this RevisionSpec.

        Not supported by Cloud Run.

        :param enable_service_links: The enable_service_links of this RevisionSpec.
        :type enable_service_links: bool
        """

        self._enable_service_links = enable_service_links

    @property
    def image_pull_secrets(self):
        """Gets the image_pull_secrets of this RevisionSpec.

        Not supported by Cloud Run.

        :return: The image_pull_secrets of this RevisionSpec.
        :rtype: List[LocalObjectReference]
        """
        return self._image_pull_secrets

    @image_pull_secrets.setter
    def image_pull_secrets(self, image_pull_secrets):
        """Sets the image_pull_secrets of this RevisionSpec.

        Not supported by Cloud Run.

        :param image_pull_secrets: The image_pull_secrets of this RevisionSpec.
        :type image_pull_secrets: List[LocalObjectReference]
        """

        self._image_pull_secrets = image_pull_secrets

    @property
    def service_account_name(self):
        """Gets the service_account_name of this RevisionSpec.

        Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.

        :return: The service_account_name of this RevisionSpec.
        :rtype: str
        """
        return self._service_account_name

    @service_account_name.setter
    def service_account_name(self, service_account_name):
        """Sets the service_account_name of this RevisionSpec.

        Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.

        :param service_account_name: The service_account_name of this RevisionSpec.
        :type service_account_name: str
        """

        self._service_account_name = service_account_name

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this RevisionSpec.

        TimeoutSeconds holds the max duration the instance is allowed for responding to a request. Cloud Run: defaults to 300 seconds (5 minutes). Maximum allowed value is 3600 seconds (1 hour).

        :return: The timeout_seconds of this RevisionSpec.
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this RevisionSpec.

        TimeoutSeconds holds the max duration the instance is allowed for responding to a request. Cloud Run: defaults to 300 seconds (5 minutes). Maximum allowed value is 3600 seconds (1 hour).

        :param timeout_seconds: The timeout_seconds of this RevisionSpec.
        :type timeout_seconds: int
        """

        self._timeout_seconds = timeout_seconds

    @property
    def volumes(self):
        """Gets the volumes of this RevisionSpec.


        :return: The volumes of this RevisionSpec.
        :rtype: List[Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this RevisionSpec.


        :param volumes: The volumes of this RevisionSpec.
        :type volumes: List[Volume]
        """

        self._volumes = volumes
