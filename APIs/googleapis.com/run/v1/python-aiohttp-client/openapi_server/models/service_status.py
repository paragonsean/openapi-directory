# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.addressable import Addressable
from openapi_server.models.google_cloud_run_v1_condition import GoogleCloudRunV1Condition
from openapi_server.models.traffic_target import TrafficTarget
from openapi_server import util


class ServiceStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Addressable=None, conditions: List[GoogleCloudRunV1Condition]=None, latest_created_revision_name: str=None, latest_ready_revision_name: str=None, observed_generation: int=None, traffic: List[TrafficTarget]=None, url: str=None):
        """ServiceStatus - a model defined in OpenAPI

        :param address: The address of this ServiceStatus.
        :param conditions: The conditions of this ServiceStatus.
        :param latest_created_revision_name: The latest_created_revision_name of this ServiceStatus.
        :param latest_ready_revision_name: The latest_ready_revision_name of this ServiceStatus.
        :param observed_generation: The observed_generation of this ServiceStatus.
        :param traffic: The traffic of this ServiceStatus.
        :param url: The url of this ServiceStatus.
        """
        self.openapi_types = {
            'address': Addressable,
            'conditions': List[GoogleCloudRunV1Condition],
            'latest_created_revision_name': str,
            'latest_ready_revision_name': str,
            'observed_generation': int,
            'traffic': List[TrafficTarget],
            'url': str
        }

        self.attribute_map = {
            'address': 'address',
            'conditions': 'conditions',
            'latest_created_revision_name': 'latestCreatedRevisionName',
            'latest_ready_revision_name': 'latestReadyRevisionName',
            'observed_generation': 'observedGeneration',
            'traffic': 'traffic',
            'url': 'url'
        }

        self._address = address
        self._conditions = conditions
        self._latest_created_revision_name = latest_created_revision_name
        self._latest_ready_revision_name = latest_ready_revision_name
        self._observed_generation = observed_generation
        self._traffic = traffic
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceStatus of this ServiceStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ServiceStatus.


        :return: The address of this ServiceStatus.
        :rtype: Addressable
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ServiceStatus.


        :param address: The address of this ServiceStatus.
        :type address: Addressable
        """

        self._address = address

    @property
    def conditions(self):
        """Gets the conditions of this ServiceStatus.

        Conditions communicate information about ongoing/complete reconciliation processes that bring the `spec` inline with the observed state of the world. Service-specific conditions include: * `ConfigurationsReady`: `True` when the underlying Configuration is ready. * `RoutesReady`: `True` when the underlying Route is ready. * `Ready`: `True` when all underlying resources are ready.

        :return: The conditions of this ServiceStatus.
        :rtype: List[GoogleCloudRunV1Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this ServiceStatus.

        Conditions communicate information about ongoing/complete reconciliation processes that bring the `spec` inline with the observed state of the world. Service-specific conditions include: * `ConfigurationsReady`: `True` when the underlying Configuration is ready. * `RoutesReady`: `True` when the underlying Route is ready. * `Ready`: `True` when all underlying resources are ready.

        :param conditions: The conditions of this ServiceStatus.
        :type conditions: List[GoogleCloudRunV1Condition]
        """

        self._conditions = conditions

    @property
    def latest_created_revision_name(self):
        """Gets the latest_created_revision_name of this ServiceStatus.

        Name of the last revision that was created from this Service's Configuration. It might not be ready yet, for that use LatestReadyRevisionName.

        :return: The latest_created_revision_name of this ServiceStatus.
        :rtype: str
        """
        return self._latest_created_revision_name

    @latest_created_revision_name.setter
    def latest_created_revision_name(self, latest_created_revision_name):
        """Sets the latest_created_revision_name of this ServiceStatus.

        Name of the last revision that was created from this Service's Configuration. It might not be ready yet, for that use LatestReadyRevisionName.

        :param latest_created_revision_name: The latest_created_revision_name of this ServiceStatus.
        :type latest_created_revision_name: str
        """

        self._latest_created_revision_name = latest_created_revision_name

    @property
    def latest_ready_revision_name(self):
        """Gets the latest_ready_revision_name of this ServiceStatus.

        Name of the latest Revision from this Service's Configuration that has had its `Ready` condition become `True`.

        :return: The latest_ready_revision_name of this ServiceStatus.
        :rtype: str
        """
        return self._latest_ready_revision_name

    @latest_ready_revision_name.setter
    def latest_ready_revision_name(self, latest_ready_revision_name):
        """Sets the latest_ready_revision_name of this ServiceStatus.

        Name of the latest Revision from this Service's Configuration that has had its `Ready` condition become `True`.

        :param latest_ready_revision_name: The latest_ready_revision_name of this ServiceStatus.
        :type latest_ready_revision_name: str
        """

        self._latest_ready_revision_name = latest_ready_revision_name

    @property
    def observed_generation(self):
        """Gets the observed_generation of this ServiceStatus.

        Returns the generation last seen by the system. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition's status is True or False.

        :return: The observed_generation of this ServiceStatus.
        :rtype: int
        """
        return self._observed_generation

    @observed_generation.setter
    def observed_generation(self, observed_generation):
        """Sets the observed_generation of this ServiceStatus.

        Returns the generation last seen by the system. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition's status is True or False.

        :param observed_generation: The observed_generation of this ServiceStatus.
        :type observed_generation: int
        """

        self._observed_generation = observed_generation

    @property
    def traffic(self):
        """Gets the traffic of this ServiceStatus.

        Holds the configured traffic distribution. These entries will always contain RevisionName references. When ConfigurationName appears in the spec, this will hold the LatestReadyRevisionName that we last observed.

        :return: The traffic of this ServiceStatus.
        :rtype: List[TrafficTarget]
        """
        return self._traffic

    @traffic.setter
    def traffic(self, traffic):
        """Sets the traffic of this ServiceStatus.

        Holds the configured traffic distribution. These entries will always contain RevisionName references. When ConfigurationName appears in the spec, this will hold the LatestReadyRevisionName that we last observed.

        :param traffic: The traffic of this ServiceStatus.
        :type traffic: List[TrafficTarget]
        """

        self._traffic = traffic

    @property
    def url(self):
        """Gets the url of this ServiceStatus.

        URL that will distribute traffic over the provided traffic targets. It generally has the form `https://{route-hash}-{project-hash}-{cluster-level-suffix}.a.run.app`

        :return: The url of this ServiceStatus.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ServiceStatus.

        URL that will distribute traffic over the provided traffic targets. It generally has the form `https://{route-hash}-{project-hash}-{cluster-level-suffix}.a.run.app`

        :param url: The url of this ServiceStatus.
        :type url: str
        """

        self._url = url
