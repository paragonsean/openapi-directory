# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VolumeMount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mount_path: str=None, name: str=None, read_only: bool=None, sub_path: str=None):
        """VolumeMount - a model defined in OpenAPI

        :param mount_path: The mount_path of this VolumeMount.
        :param name: The name of this VolumeMount.
        :param read_only: The read_only of this VolumeMount.
        :param sub_path: The sub_path of this VolumeMount.
        """
        self.openapi_types = {
            'mount_path': str,
            'name': str,
            'read_only': bool,
            'sub_path': str
        }

        self.attribute_map = {
            'mount_path': 'mountPath',
            'name': 'name',
            'read_only': 'readOnly',
            'sub_path': 'subPath'
        }

        self._mount_path = mount_path
        self._name = name
        self._read_only = read_only
        self._sub_path = sub_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeMount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VolumeMount of this VolumeMount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mount_path(self):
        """Gets the mount_path of this VolumeMount.

        Required. Path within the container at which the volume should be mounted. Must not contain ':'.

        :return: The mount_path of this VolumeMount.
        :rtype: str
        """
        return self._mount_path

    @mount_path.setter
    def mount_path(self, mount_path):
        """Sets the mount_path of this VolumeMount.

        Required. Path within the container at which the volume should be mounted. Must not contain ':'.

        :param mount_path: The mount_path of this VolumeMount.
        :type mount_path: str
        """

        self._mount_path = mount_path

    @property
    def name(self):
        """Gets the name of this VolumeMount.

        Required. The name of the volume. There must be a corresponding Volume with the same name.

        :return: The name of this VolumeMount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumeMount.

        Required. The name of the volume. There must be a corresponding Volume with the same name.

        :param name: The name of this VolumeMount.
        :type name: str
        """

        self._name = name

    @property
    def read_only(self):
        """Gets the read_only of this VolumeMount.

        Sets the mount to be read-only or read-write. Not used by Cloud Run.

        :return: The read_only of this VolumeMount.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this VolumeMount.

        Sets the mount to be read-only or read-write. Not used by Cloud Run.

        :param read_only: The read_only of this VolumeMount.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def sub_path(self):
        """Gets the sub_path of this VolumeMount.

        Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).

        :return: The sub_path of this VolumeMount.
        :rtype: str
        """
        return self._sub_path

    @sub_path.setter
    def sub_path(self, sub_path):
        """Sets the sub_path of this VolumeMount.

        Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).

        :param sub_path: The sub_path of this VolumeMount.
        :type sub_path: str
        """

        self._sub_path = sub_path
