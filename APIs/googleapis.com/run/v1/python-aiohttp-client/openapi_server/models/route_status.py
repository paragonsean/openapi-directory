# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.addressable import Addressable
from openapi_server.models.google_cloud_run_v1_condition import GoogleCloudRunV1Condition
from openapi_server.models.traffic_target import TrafficTarget
from openapi_server import util


class RouteStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Addressable=None, conditions: List[GoogleCloudRunV1Condition]=None, observed_generation: int=None, traffic: List[TrafficTarget]=None, url: str=None):
        """RouteStatus - a model defined in OpenAPI

        :param address: The address of this RouteStatus.
        :param conditions: The conditions of this RouteStatus.
        :param observed_generation: The observed_generation of this RouteStatus.
        :param traffic: The traffic of this RouteStatus.
        :param url: The url of this RouteStatus.
        """
        self.openapi_types = {
            'address': Addressable,
            'conditions': List[GoogleCloudRunV1Condition],
            'observed_generation': int,
            'traffic': List[TrafficTarget],
            'url': str
        }

        self.attribute_map = {
            'address': 'address',
            'conditions': 'conditions',
            'observed_generation': 'observedGeneration',
            'traffic': 'traffic',
            'url': 'url'
        }

        self._address = address
        self._conditions = conditions
        self._observed_generation = observed_generation
        self._traffic = traffic
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RouteStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RouteStatus of this RouteStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this RouteStatus.


        :return: The address of this RouteStatus.
        :rtype: Addressable
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this RouteStatus.


        :param address: The address of this RouteStatus.
        :type address: Addressable
        """

        self._address = address

    @property
    def conditions(self):
        """Gets the conditions of this RouteStatus.

        Conditions communicates information about ongoing/complete reconciliation processes that bring the \"spec\" inline with the observed state of the world.

        :return: The conditions of this RouteStatus.
        :rtype: List[GoogleCloudRunV1Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this RouteStatus.

        Conditions communicates information about ongoing/complete reconciliation processes that bring the \"spec\" inline with the observed state of the world.

        :param conditions: The conditions of this RouteStatus.
        :type conditions: List[GoogleCloudRunV1Condition]
        """

        self._conditions = conditions

    @property
    def observed_generation(self):
        """Gets the observed_generation of this RouteStatus.

        ObservedGeneration is the 'Generation' of the Route that was last processed by the controller. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition's status is True or False. Note that providing a TrafficTarget that has latest_revision=True will result in a Route that does not increment either its metadata.generation or its observedGeneration, as new \"latest ready\" revisions from the Configuration are processed without an update to the Route's spec.

        :return: The observed_generation of this RouteStatus.
        :rtype: int
        """
        return self._observed_generation

    @observed_generation.setter
    def observed_generation(self, observed_generation):
        """Sets the observed_generation of this RouteStatus.

        ObservedGeneration is the 'Generation' of the Route that was last processed by the controller. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation and the Ready condition's status is True or False. Note that providing a TrafficTarget that has latest_revision=True will result in a Route that does not increment either its metadata.generation or its observedGeneration, as new \"latest ready\" revisions from the Configuration are processed without an update to the Route's spec.

        :param observed_generation: The observed_generation of this RouteStatus.
        :type observed_generation: int
        """

        self._observed_generation = observed_generation

    @property
    def traffic(self):
        """Gets the traffic of this RouteStatus.

        Traffic holds the configured traffic distribution. These entries will always contain RevisionName references. When ConfigurationName appears in the spec, this will hold the LatestReadyRevisionName that was last observed.

        :return: The traffic of this RouteStatus.
        :rtype: List[TrafficTarget]
        """
        return self._traffic

    @traffic.setter
    def traffic(self, traffic):
        """Sets the traffic of this RouteStatus.

        Traffic holds the configured traffic distribution. These entries will always contain RevisionName references. When ConfigurationName appears in the spec, this will hold the LatestReadyRevisionName that was last observed.

        :param traffic: The traffic of this RouteStatus.
        :type traffic: List[TrafficTarget]
        """

        self._traffic = traffic

    @property
    def url(self):
        """Gets the url of this RouteStatus.

        URL holds the url that will distribute traffic over the provided traffic targets. It generally has the form: `https://{route-hash}-{project-hash}-{cluster-level-suffix}.a.run.app`

        :return: The url of this RouteStatus.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RouteStatus.

        URL holds the url that will distribute traffic over the provided traffic targets. It generally has the form: `https://{route-hash}-{project-hash}-{cluster-level-suffix}.a.run.app`

        :param url: The url of this RouteStatus.
        :type url: str
        """

        self._url = url
