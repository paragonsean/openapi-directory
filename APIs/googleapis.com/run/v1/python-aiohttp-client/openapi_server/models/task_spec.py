# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container import Container
from openapi_server.models.volume import Volume
from openapi_server import util


class TaskSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, containers: List[Container]=None, max_retries: int=None, service_account_name: str=None, timeout_seconds: str=None, volumes: List[Volume]=None):
        """TaskSpec - a model defined in OpenAPI

        :param containers: The containers of this TaskSpec.
        :param max_retries: The max_retries of this TaskSpec.
        :param service_account_name: The service_account_name of this TaskSpec.
        :param timeout_seconds: The timeout_seconds of this TaskSpec.
        :param volumes: The volumes of this TaskSpec.
        """
        self.openapi_types = {
            'containers': List[Container],
            'max_retries': int,
            'service_account_name': str,
            'timeout_seconds': str,
            'volumes': List[Volume]
        }

        self.attribute_map = {
            'containers': 'containers',
            'max_retries': 'maxRetries',
            'service_account_name': 'serviceAccountName',
            'timeout_seconds': 'timeoutSeconds',
            'volumes': 'volumes'
        }

        self._containers = containers
        self._max_retries = max_retries
        self._service_account_name = service_account_name
        self._timeout_seconds = timeout_seconds
        self._volumes = volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskSpec of this TaskSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def containers(self):
        """Gets the containers of this TaskSpec.

        Optional. List of containers belonging to the task. We disallow a number of fields on this Container.

        :return: The containers of this TaskSpec.
        :rtype: List[Container]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this TaskSpec.

        Optional. List of containers belonging to the task. We disallow a number of fields on this Container.

        :param containers: The containers of this TaskSpec.
        :type containers: List[Container]
        """

        self._containers = containers

    @property
    def max_retries(self):
        """Gets the max_retries of this TaskSpec.

        Optional. Number of retries allowed per task, before marking this job failed. Defaults to 3.

        :return: The max_retries of this TaskSpec.
        :rtype: int
        """
        return self._max_retries

    @max_retries.setter
    def max_retries(self, max_retries):
        """Sets the max_retries of this TaskSpec.

        Optional. Number of retries allowed per task, before marking this job failed. Defaults to 3.

        :param max_retries: The max_retries of this TaskSpec.
        :type max_retries: int
        """

        self._max_retries = max_retries

    @property
    def service_account_name(self):
        """Gets the service_account_name of this TaskSpec.

        Optional. Email address of the IAM service account associated with the task of a job execution. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.

        :return: The service_account_name of this TaskSpec.
        :rtype: str
        """
        return self._service_account_name

    @service_account_name.setter
    def service_account_name(self, service_account_name):
        """Sets the service_account_name of this TaskSpec.

        Optional. Email address of the IAM service account associated with the task of a job execution. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.

        :param service_account_name: The service_account_name of this TaskSpec.
        :type service_account_name: str
        """

        self._service_account_name = service_account_name

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this TaskSpec.

        Optional. Duration in seconds the task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout. Defaults to 600 seconds.

        :return: The timeout_seconds of this TaskSpec.
        :rtype: str
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this TaskSpec.

        Optional. Duration in seconds the task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout. Defaults to 600 seconds.

        :param timeout_seconds: The timeout_seconds of this TaskSpec.
        :type timeout_seconds: str
        """

        self._timeout_seconds = timeout_seconds

    @property
    def volumes(self):
        """Gets the volumes of this TaskSpec.

        Optional. List of volumes that can be mounted by containers belonging to the task.

        :return: The volumes of this TaskSpec.
        :rtype: List[Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this TaskSpec.

        Optional. List of volumes that can be mounted by containers belonging to the task.

        :param volumes: The volumes of this TaskSpec.
        :type volumes: List[Volume]
        """

        self._volumes = volumes
