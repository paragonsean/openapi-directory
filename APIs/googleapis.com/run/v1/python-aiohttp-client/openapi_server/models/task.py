# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.object_meta import ObjectMeta
from openapi_server.models.task_spec import TaskSpec
from openapi_server.models.task_status import TaskStatus
from openapi_server import util


class Task(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_version: str=None, kind: str=None, metadata: ObjectMeta=None, spec: TaskSpec=None, status: TaskStatus=None):
        """Task - a model defined in OpenAPI

        :param api_version: The api_version of this Task.
        :param kind: The kind of this Task.
        :param metadata: The metadata of this Task.
        :param spec: The spec of this Task.
        :param status: The status of this Task.
        """
        self.openapi_types = {
            'api_version': str,
            'kind': str,
            'metadata': ObjectMeta,
            'spec': TaskSpec,
            'status': TaskStatus
        }

        self.attribute_map = {
            'api_version': 'apiVersion',
            'kind': 'kind',
            'metadata': 'metadata',
            'spec': 'spec',
            'status': 'status'
        }

        self._api_version = api_version
        self._kind = kind
        self._metadata = metadata
        self._spec = spec
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Task':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Task of this Task.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version(self):
        """Gets the api_version of this Task.

        Optional. APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values.

        :return: The api_version of this Task.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this Task.

        Optional. APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values.

        :param api_version: The api_version of this Task.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def kind(self):
        """Gets the kind of this Task.

        Optional. Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase.

        :return: The kind of this Task.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Task.

        Optional. Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase.

        :param kind: The kind of this Task.
        :type kind: str
        """

        self._kind = kind

    @property
    def metadata(self):
        """Gets the metadata of this Task.


        :return: The metadata of this Task.
        :rtype: ObjectMeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Task.


        :param metadata: The metadata of this Task.
        :type metadata: ObjectMeta
        """

        self._metadata = metadata

    @property
    def spec(self):
        """Gets the spec of this Task.


        :return: The spec of this Task.
        :rtype: TaskSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this Task.


        :param spec: The spec of this Task.
        :type spec: TaskSpec
        """

        self._spec = spec

    @property
    def status(self):
        """Gets the status of this Task.


        :return: The status of this Task.
        :rtype: TaskStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Task.


        :param status: The status of this Task.
        :type status: TaskStatus
        """

        self._status = status
