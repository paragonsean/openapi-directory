# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_run_v1_condition import GoogleCloudRunV1Condition
from openapi_server import util


class RevisionStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conditions: List[GoogleCloudRunV1Condition]=None, desired_replicas: int=None, image_digest: str=None, log_url: str=None, observed_generation: int=None, service_name: str=None):
        """RevisionStatus - a model defined in OpenAPI

        :param conditions: The conditions of this RevisionStatus.
        :param desired_replicas: The desired_replicas of this RevisionStatus.
        :param image_digest: The image_digest of this RevisionStatus.
        :param log_url: The log_url of this RevisionStatus.
        :param observed_generation: The observed_generation of this RevisionStatus.
        :param service_name: The service_name of this RevisionStatus.
        """
        self.openapi_types = {
            'conditions': List[GoogleCloudRunV1Condition],
            'desired_replicas': int,
            'image_digest': str,
            'log_url': str,
            'observed_generation': int,
            'service_name': str
        }

        self.attribute_map = {
            'conditions': 'conditions',
            'desired_replicas': 'desiredReplicas',
            'image_digest': 'imageDigest',
            'log_url': 'logUrl',
            'observed_generation': 'observedGeneration',
            'service_name': 'serviceName'
        }

        self._conditions = conditions
        self._desired_replicas = desired_replicas
        self._image_digest = image_digest
        self._log_url = log_url
        self._observed_generation = observed_generation
        self._service_name = service_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RevisionStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RevisionStatus of this RevisionStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conditions(self):
        """Gets the conditions of this RevisionStatus.

        Conditions communicate information about ongoing/complete reconciliation processes that bring the \"spec\" inline with the observed state of the world. As a Revision is being prepared, it will incrementally update conditions. Revision-specific conditions include: * `ResourcesAvailable`: `True` when underlying resources have been provisioned. * `ContainerHealthy`: `True` when the Revision readiness check completes. * `Active`: `True` when the Revision may receive traffic.

        :return: The conditions of this RevisionStatus.
        :rtype: List[GoogleCloudRunV1Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this RevisionStatus.

        Conditions communicate information about ongoing/complete reconciliation processes that bring the \"spec\" inline with the observed state of the world. As a Revision is being prepared, it will incrementally update conditions. Revision-specific conditions include: * `ResourcesAvailable`: `True` when underlying resources have been provisioned. * `ContainerHealthy`: `True` when the Revision readiness check completes. * `Active`: `True` when the Revision may receive traffic.

        :param conditions: The conditions of this RevisionStatus.
        :type conditions: List[GoogleCloudRunV1Condition]
        """

        self._conditions = conditions

    @property
    def desired_replicas(self):
        """Gets the desired_replicas of this RevisionStatus.

        Output only. The configured number of instances running this revision. For Cloud Run, this only includes instances provisioned using the minScale annotation. It does not include instances created by autoscaling.

        :return: The desired_replicas of this RevisionStatus.
        :rtype: int
        """
        return self._desired_replicas

    @desired_replicas.setter
    def desired_replicas(self, desired_replicas):
        """Sets the desired_replicas of this RevisionStatus.

        Output only. The configured number of instances running this revision. For Cloud Run, this only includes instances provisioned using the minScale annotation. It does not include instances created by autoscaling.

        :param desired_replicas: The desired_replicas of this RevisionStatus.
        :type desired_replicas: int
        """

        self._desired_replicas = desired_replicas

    @property
    def image_digest(self):
        """Gets the image_digest of this RevisionStatus.

        ImageDigest holds the resolved digest for the image specified within .Spec.Container.Image. The digest is resolved during the creation of Revision. This field holds the digest value regardless of whether a tag or digest was originally specified in the Container object.

        :return: The image_digest of this RevisionStatus.
        :rtype: str
        """
        return self._image_digest

    @image_digest.setter
    def image_digest(self, image_digest):
        """Sets the image_digest of this RevisionStatus.

        ImageDigest holds the resolved digest for the image specified within .Spec.Container.Image. The digest is resolved during the creation of Revision. This field holds the digest value regardless of whether a tag or digest was originally specified in the Container object.

        :param image_digest: The image_digest of this RevisionStatus.
        :type image_digest: str
        """

        self._image_digest = image_digest

    @property
    def log_url(self):
        """Gets the log_url of this RevisionStatus.

        Optional. Specifies the generated logging url for this particular revision based on the revision url template specified in the controller's config.

        :return: The log_url of this RevisionStatus.
        :rtype: str
        """
        return self._log_url

    @log_url.setter
    def log_url(self, log_url):
        """Sets the log_url of this RevisionStatus.

        Optional. Specifies the generated logging url for this particular revision based on the revision url template specified in the controller's config.

        :param log_url: The log_url of this RevisionStatus.
        :type log_url: str
        """

        self._log_url = log_url

    @property
    def observed_generation(self):
        """Gets the observed_generation of this RevisionStatus.

        ObservedGeneration is the 'Generation' of the Revision that was last processed by the controller. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation, and the Ready condition's status is True or False.

        :return: The observed_generation of this RevisionStatus.
        :rtype: int
        """
        return self._observed_generation

    @observed_generation.setter
    def observed_generation(self, observed_generation):
        """Sets the observed_generation of this RevisionStatus.

        ObservedGeneration is the 'Generation' of the Revision that was last processed by the controller. Clients polling for completed reconciliation should poll until observedGeneration = metadata.generation, and the Ready condition's status is True or False.

        :param observed_generation: The observed_generation of this RevisionStatus.
        :type observed_generation: int
        """

        self._observed_generation = observed_generation

    @property
    def service_name(self):
        """Gets the service_name of this RevisionStatus.

        Not currently used by Cloud Run.

        :return: The service_name of this RevisionStatus.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this RevisionStatus.

        Not currently used by Cloud Run.

        :param service_name: The service_name of this RevisionStatus.
        :type service_name: str
        """

        self._service_name = service_name
