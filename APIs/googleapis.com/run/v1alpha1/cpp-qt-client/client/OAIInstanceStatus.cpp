/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceStatus::OAIInstanceStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceStatus::OAIInstanceStatus() {
    this->initializeModel();
}

OAIInstanceStatus::~OAIInstanceStatus() {}

void OAIInstanceStatus::initializeModel() {

    m_completion_time_isSet = false;
    m_completion_time_isValid = false;

    m_failed_isSet = false;
    m_failed_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_last_attempt_result_isSet = false;
    m_last_attempt_result_isValid = false;

    m_last_exit_code_isSet = false;
    m_last_exit_code_isValid = false;

    m_restarted_isSet = false;
    m_restarted_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_succeeded_isSet = false;
    m_succeeded_isValid = false;
}

void OAIInstanceStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceStatus::fromJsonObject(QJsonObject json) {

    m_completion_time_isValid = ::OpenAPI::fromJsonValue(m_completion_time, json[QString("completionTime")]);
    m_completion_time_isSet = !json[QString("completionTime")].isNull() && m_completion_time_isValid;

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_last_attempt_result_isValid = ::OpenAPI::fromJsonValue(m_last_attempt_result, json[QString("lastAttemptResult")]);
    m_last_attempt_result_isSet = !json[QString("lastAttemptResult")].isNull() && m_last_attempt_result_isValid;

    m_last_exit_code_isValid = ::OpenAPI::fromJsonValue(m_last_exit_code, json[QString("lastExitCode")]);
    m_last_exit_code_isSet = !json[QString("lastExitCode")].isNull() && m_last_exit_code_isValid;

    m_restarted_isValid = ::OpenAPI::fromJsonValue(m_restarted, json[QString("restarted")]);
    m_restarted_isSet = !json[QString("restarted")].isNull() && m_restarted_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_succeeded_isValid = ::OpenAPI::fromJsonValue(m_succeeded, json[QString("succeeded")]);
    m_succeeded_isSet = !json[QString("succeeded")].isNull() && m_succeeded_isValid;
}

QString OAIInstanceStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_completion_time_isSet) {
        obj.insert(QString("completionTime"), ::OpenAPI::toJsonValue(m_completion_time));
    }
    if (m_failed_isSet) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_last_attempt_result.isSet()) {
        obj.insert(QString("lastAttemptResult"), ::OpenAPI::toJsonValue(m_last_attempt_result));
    }
    if (m_last_exit_code_isSet) {
        obj.insert(QString("lastExitCode"), ::OpenAPI::toJsonValue(m_last_exit_code));
    }
    if (m_restarted_isSet) {
        obj.insert(QString("restarted"), ::OpenAPI::toJsonValue(m_restarted));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_succeeded_isSet) {
        obj.insert(QString("succeeded"), ::OpenAPI::toJsonValue(m_succeeded));
    }
    return obj;
}

QString OAIInstanceStatus::getCompletionTime() const {
    return m_completion_time;
}
void OAIInstanceStatus::setCompletionTime(const QString &completion_time) {
    m_completion_time = completion_time;
    m_completion_time_isSet = true;
}

bool OAIInstanceStatus::is_completion_time_Set() const{
    return m_completion_time_isSet;
}

bool OAIInstanceStatus::is_completion_time_Valid() const{
    return m_completion_time_isValid;
}

qint32 OAIInstanceStatus::getFailed() const {
    return m_failed;
}
void OAIInstanceStatus::setFailed(const qint32 &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAIInstanceStatus::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAIInstanceStatus::is_failed_Valid() const{
    return m_failed_isValid;
}

qint32 OAIInstanceStatus::getIndex() const {
    return m_index;
}
void OAIInstanceStatus::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIInstanceStatus::is_index_Set() const{
    return m_index_isSet;
}

bool OAIInstanceStatus::is_index_Valid() const{
    return m_index_isValid;
}

OAIInstanceAttemptResult OAIInstanceStatus::getLastAttemptResult() const {
    return m_last_attempt_result;
}
void OAIInstanceStatus::setLastAttemptResult(const OAIInstanceAttemptResult &last_attempt_result) {
    m_last_attempt_result = last_attempt_result;
    m_last_attempt_result_isSet = true;
}

bool OAIInstanceStatus::is_last_attempt_result_Set() const{
    return m_last_attempt_result_isSet;
}

bool OAIInstanceStatus::is_last_attempt_result_Valid() const{
    return m_last_attempt_result_isValid;
}

qint32 OAIInstanceStatus::getLastExitCode() const {
    return m_last_exit_code;
}
void OAIInstanceStatus::setLastExitCode(const qint32 &last_exit_code) {
    m_last_exit_code = last_exit_code;
    m_last_exit_code_isSet = true;
}

bool OAIInstanceStatus::is_last_exit_code_Set() const{
    return m_last_exit_code_isSet;
}

bool OAIInstanceStatus::is_last_exit_code_Valid() const{
    return m_last_exit_code_isValid;
}

qint32 OAIInstanceStatus::getRestarted() const {
    return m_restarted;
}
void OAIInstanceStatus::setRestarted(const qint32 &restarted) {
    m_restarted = restarted;
    m_restarted_isSet = true;
}

bool OAIInstanceStatus::is_restarted_Set() const{
    return m_restarted_isSet;
}

bool OAIInstanceStatus::is_restarted_Valid() const{
    return m_restarted_isValid;
}

QString OAIInstanceStatus::getStartTime() const {
    return m_start_time;
}
void OAIInstanceStatus::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIInstanceStatus::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIInstanceStatus::is_start_time_Valid() const{
    return m_start_time_isValid;
}

qint32 OAIInstanceStatus::getSucceeded() const {
    return m_succeeded;
}
void OAIInstanceStatus::setSucceeded(const qint32 &succeeded) {
    m_succeeded = succeeded;
    m_succeeded_isSet = true;
}

bool OAIInstanceStatus::is_succeeded_Set() const{
    return m_succeeded_isSet;
}

bool OAIInstanceStatus::is_succeeded_Valid() const{
    return m_succeeded_isValid;
}

bool OAIInstanceStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_attempt_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_exit_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restarted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_succeeded_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
