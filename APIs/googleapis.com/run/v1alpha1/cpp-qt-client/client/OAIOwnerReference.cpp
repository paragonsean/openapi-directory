/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOwnerReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOwnerReference::OAIOwnerReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOwnerReference::OAIOwnerReference() {
    this->initializeModel();
}

OAIOwnerReference::~OAIOwnerReference() {}

void OAIOwnerReference::initializeModel() {

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_block_owner_deletion_isSet = false;
    m_block_owner_deletion_isValid = false;

    m_controller_isSet = false;
    m_controller_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIOwnerReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOwnerReference::fromJsonObject(QJsonObject json) {

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("apiVersion")]);
    m_api_version_isSet = !json[QString("apiVersion")].isNull() && m_api_version_isValid;

    m_block_owner_deletion_isValid = ::OpenAPI::fromJsonValue(m_block_owner_deletion, json[QString("blockOwnerDeletion")]);
    m_block_owner_deletion_isSet = !json[QString("blockOwnerDeletion")].isNull() && m_block_owner_deletion_isValid;

    m_controller_isValid = ::OpenAPI::fromJsonValue(m_controller, json[QString("controller")]);
    m_controller_isSet = !json[QString("controller")].isNull() && m_controller_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIOwnerReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOwnerReference::asJsonObject() const {
    QJsonObject obj;
    if (m_api_version_isSet) {
        obj.insert(QString("apiVersion"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_block_owner_deletion_isSet) {
        obj.insert(QString("blockOwnerDeletion"), ::OpenAPI::toJsonValue(m_block_owner_deletion));
    }
    if (m_controller_isSet) {
        obj.insert(QString("controller"), ::OpenAPI::toJsonValue(m_controller));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

QString OAIOwnerReference::getApiVersion() const {
    return m_api_version;
}
void OAIOwnerReference::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIOwnerReference::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIOwnerReference::is_api_version_Valid() const{
    return m_api_version_isValid;
}

bool OAIOwnerReference::isBlockOwnerDeletion() const {
    return m_block_owner_deletion;
}
void OAIOwnerReference::setBlockOwnerDeletion(const bool &block_owner_deletion) {
    m_block_owner_deletion = block_owner_deletion;
    m_block_owner_deletion_isSet = true;
}

bool OAIOwnerReference::is_block_owner_deletion_Set() const{
    return m_block_owner_deletion_isSet;
}

bool OAIOwnerReference::is_block_owner_deletion_Valid() const{
    return m_block_owner_deletion_isValid;
}

bool OAIOwnerReference::isController() const {
    return m_controller;
}
void OAIOwnerReference::setController(const bool &controller) {
    m_controller = controller;
    m_controller_isSet = true;
}

bool OAIOwnerReference::is_controller_Set() const{
    return m_controller_isSet;
}

bool OAIOwnerReference::is_controller_Valid() const{
    return m_controller_isValid;
}

QString OAIOwnerReference::getKind() const {
    return m_kind;
}
void OAIOwnerReference::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIOwnerReference::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIOwnerReference::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIOwnerReference::getName() const {
    return m_name;
}
void OAIOwnerReference::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOwnerReference::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOwnerReference::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOwnerReference::getUid() const {
    return m_uid;
}
void OAIOwnerReference::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIOwnerReference::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIOwnerReference::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIOwnerReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_owner_deletion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_controller_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOwnerReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
