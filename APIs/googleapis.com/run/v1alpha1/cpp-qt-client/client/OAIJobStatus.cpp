/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobStatus::OAIJobStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobStatus::OAIJobStatus() {
    this->initializeModel();
}

OAIJobStatus::~OAIJobStatus() {}

void OAIJobStatus::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_completion_time_isSet = false;
    m_completion_time_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_failed_isSet = false;
    m_failed_isValid = false;

    m_image_digest_isSet = false;
    m_image_digest_isValid = false;

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_observed_generation_isSet = false;
    m_observed_generation_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_succeeded_isSet = false;
    m_succeeded_isValid = false;
}

void OAIJobStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobStatus::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_completion_time_isValid = ::OpenAPI::fromJsonValue(m_completion_time, json[QString("completionTime")]);
    m_completion_time_isSet = !json[QString("completionTime")].isNull() && m_completion_time_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;

    m_image_digest_isValid = ::OpenAPI::fromJsonValue(m_image_digest, json[QString("imageDigest")]);
    m_image_digest_isSet = !json[QString("imageDigest")].isNull() && m_image_digest_isValid;

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("instances")]);
    m_instances_isSet = !json[QString("instances")].isNull() && m_instances_isValid;

    m_observed_generation_isValid = ::OpenAPI::fromJsonValue(m_observed_generation, json[QString("observedGeneration")]);
    m_observed_generation_isSet = !json[QString("observedGeneration")].isNull() && m_observed_generation_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_succeeded_isValid = ::OpenAPI::fromJsonValue(m_succeeded, json[QString("succeeded")]);
    m_succeeded_isSet = !json[QString("succeeded")].isNull() && m_succeeded_isValid;
}

QString OAIJobStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_completion_time_isSet) {
        obj.insert(QString("completionTime"), ::OpenAPI::toJsonValue(m_completion_time));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_failed_isSet) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    if (m_image_digest_isSet) {
        obj.insert(QString("imageDigest"), ::OpenAPI::toJsonValue(m_image_digest));
    }
    if (m_instances.size() > 0) {
        obj.insert(QString("instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_observed_generation_isSet) {
        obj.insert(QString("observedGeneration"), ::OpenAPI::toJsonValue(m_observed_generation));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_succeeded_isSet) {
        obj.insert(QString("succeeded"), ::OpenAPI::toJsonValue(m_succeeded));
    }
    return obj;
}

qint32 OAIJobStatus::getActive() const {
    return m_active;
}
void OAIJobStatus::setActive(const qint32 &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIJobStatus::is_active_Set() const{
    return m_active_isSet;
}

bool OAIJobStatus::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIJobStatus::getCompletionTime() const {
    return m_completion_time;
}
void OAIJobStatus::setCompletionTime(const QString &completion_time) {
    m_completion_time = completion_time;
    m_completion_time_isSet = true;
}

bool OAIJobStatus::is_completion_time_Set() const{
    return m_completion_time_isSet;
}

bool OAIJobStatus::is_completion_time_Valid() const{
    return m_completion_time_isValid;
}

QList<OAIJobCondition> OAIJobStatus::getConditions() const {
    return m_conditions;
}
void OAIJobStatus::setConditions(const QList<OAIJobCondition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIJobStatus::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIJobStatus::is_conditions_Valid() const{
    return m_conditions_isValid;
}

qint32 OAIJobStatus::getFailed() const {
    return m_failed;
}
void OAIJobStatus::setFailed(const qint32 &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAIJobStatus::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAIJobStatus::is_failed_Valid() const{
    return m_failed_isValid;
}

QString OAIJobStatus::getImageDigest() const {
    return m_image_digest;
}
void OAIJobStatus::setImageDigest(const QString &image_digest) {
    m_image_digest = image_digest;
    m_image_digest_isSet = true;
}

bool OAIJobStatus::is_image_digest_Set() const{
    return m_image_digest_isSet;
}

bool OAIJobStatus::is_image_digest_Valid() const{
    return m_image_digest_isValid;
}

QList<OAIInstanceStatus> OAIJobStatus::getInstances() const {
    return m_instances;
}
void OAIJobStatus::setInstances(const QList<OAIInstanceStatus> &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAIJobStatus::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAIJobStatus::is_instances_Valid() const{
    return m_instances_isValid;
}

qint32 OAIJobStatus::getObservedGeneration() const {
    return m_observed_generation;
}
void OAIJobStatus::setObservedGeneration(const qint32 &observed_generation) {
    m_observed_generation = observed_generation;
    m_observed_generation_isSet = true;
}

bool OAIJobStatus::is_observed_generation_Set() const{
    return m_observed_generation_isSet;
}

bool OAIJobStatus::is_observed_generation_Valid() const{
    return m_observed_generation_isValid;
}

QString OAIJobStatus::getStartTime() const {
    return m_start_time;
}
void OAIJobStatus::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIJobStatus::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIJobStatus::is_start_time_Valid() const{
    return m_start_time_isValid;
}

qint32 OAIJobStatus::getSucceeded() const {
    return m_succeeded;
}
void OAIJobStatus::setSucceeded(const qint32 &succeeded) {
    m_succeeded = succeeded;
    m_succeeded_isSet = true;
}

bool OAIJobStatus::is_succeeded_Set() const{
    return m_succeeded_isSet;
}

bool OAIJobStatus::is_succeeded_Valid() const{
    return m_succeeded_isValid;
}

bool OAIJobStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_observed_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_succeeded_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
