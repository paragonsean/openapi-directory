/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceRequirements.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceRequirements::OAIResourceRequirements(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceRequirements::OAIResourceRequirements() {
    this->initializeModel();
}

OAIResourceRequirements::~OAIResourceRequirements() {}

void OAIResourceRequirements::initializeModel() {

    m_limits_isSet = false;
    m_limits_isValid = false;

    m_requests_isSet = false;
    m_requests_isValid = false;
}

void OAIResourceRequirements::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceRequirements::fromJsonObject(QJsonObject json) {

    m_limits_isValid = ::OpenAPI::fromJsonValue(m_limits, json[QString("limits")]);
    m_limits_isSet = !json[QString("limits")].isNull() && m_limits_isValid;

    m_requests_isValid = ::OpenAPI::fromJsonValue(m_requests, json[QString("requests")]);
    m_requests_isSet = !json[QString("requests")].isNull() && m_requests_isValid;
}

QString OAIResourceRequirements::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceRequirements::asJsonObject() const {
    QJsonObject obj;
    if (m_limits.size() > 0) {
        obj.insert(QString("limits"), ::OpenAPI::toJsonValue(m_limits));
    }
    if (m_requests.size() > 0) {
        obj.insert(QString("requests"), ::OpenAPI::toJsonValue(m_requests));
    }
    return obj;
}

QMap<QString, QString> OAIResourceRequirements::getLimits() const {
    return m_limits;
}
void OAIResourceRequirements::setLimits(const QMap<QString, QString> &limits) {
    m_limits = limits;
    m_limits_isSet = true;
}

bool OAIResourceRequirements::is_limits_Set() const{
    return m_limits_isSet;
}

bool OAIResourceRequirements::is_limits_Valid() const{
    return m_limits_isValid;
}

QMap<QString, QString> OAIResourceRequirements::getRequests() const {
    return m_requests;
}
void OAIResourceRequirements::setRequests(const QMap<QString, QString> &requests) {
    m_requests = requests;
    m_requests_isSet = true;
}

bool OAIResourceRequirements::is_requests_Set() const{
    return m_requests_isSet;
}

bool OAIResourceRequirements::is_requests_Valid() const{
    return m_requests_isValid;
}

bool OAIResourceRequirements::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceRequirements::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
