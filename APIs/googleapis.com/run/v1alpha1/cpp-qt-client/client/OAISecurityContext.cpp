/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecurityContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecurityContext::OAISecurityContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecurityContext::OAISecurityContext() {
    this->initializeModel();
}

OAISecurityContext::~OAISecurityContext() {}

void OAISecurityContext::initializeModel() {

    m_run_as_user_isSet = false;
    m_run_as_user_isValid = false;
}

void OAISecurityContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecurityContext::fromJsonObject(QJsonObject json) {

    m_run_as_user_isValid = ::OpenAPI::fromJsonValue(m_run_as_user, json[QString("runAsUser")]);
    m_run_as_user_isSet = !json[QString("runAsUser")].isNull() && m_run_as_user_isValid;
}

QString OAISecurityContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecurityContext::asJsonObject() const {
    QJsonObject obj;
    if (m_run_as_user_isSet) {
        obj.insert(QString("runAsUser"), ::OpenAPI::toJsonValue(m_run_as_user));
    }
    return obj;
}

qint32 OAISecurityContext::getRunAsUser() const {
    return m_run_as_user;
}
void OAISecurityContext::setRunAsUser(const qint32 &run_as_user) {
    m_run_as_user = run_as_user;
    m_run_as_user_isSet = true;
}

bool OAISecurityContext::is_run_as_user_Set() const{
    return m_run_as_user_isSet;
}

bool OAISecurityContext::is_run_as_user_Valid() const{
    return m_run_as_user_isValid;
}

bool OAISecurityContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_run_as_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecurityContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
