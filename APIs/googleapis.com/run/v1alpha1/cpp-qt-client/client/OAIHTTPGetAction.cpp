/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHTTPGetAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHTTPGetAction::OAIHTTPGetAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHTTPGetAction::OAIHTTPGetAction() {
    this->initializeModel();
}

OAIHTTPGetAction::~OAIHTTPGetAction() {}

void OAIHTTPGetAction::initializeModel() {

    m_host_isSet = false;
    m_host_isValid = false;

    m_http_headers_isSet = false;
    m_http_headers_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_scheme_isSet = false;
    m_scheme_isValid = false;
}

void OAIHTTPGetAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHTTPGetAction::fromJsonObject(QJsonObject json) {

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_http_headers_isValid = ::OpenAPI::fromJsonValue(m_http_headers, json[QString("httpHeaders")]);
    m_http_headers_isSet = !json[QString("httpHeaders")].isNull() && m_http_headers_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_scheme_isValid = ::OpenAPI::fromJsonValue(m_scheme, json[QString("scheme")]);
    m_scheme_isSet = !json[QString("scheme")].isNull() && m_scheme_isValid;
}

QString OAIHTTPGetAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHTTPGetAction::asJsonObject() const {
    QJsonObject obj;
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_http_headers.size() > 0) {
        obj.insert(QString("httpHeaders"), ::OpenAPI::toJsonValue(m_http_headers));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_scheme_isSet) {
        obj.insert(QString("scheme"), ::OpenAPI::toJsonValue(m_scheme));
    }
    return obj;
}

QString OAIHTTPGetAction::getHost() const {
    return m_host;
}
void OAIHTTPGetAction::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIHTTPGetAction::is_host_Set() const{
    return m_host_isSet;
}

bool OAIHTTPGetAction::is_host_Valid() const{
    return m_host_isValid;
}

QList<OAIHTTPHeader> OAIHTTPGetAction::getHttpHeaders() const {
    return m_http_headers;
}
void OAIHTTPGetAction::setHttpHeaders(const QList<OAIHTTPHeader> &http_headers) {
    m_http_headers = http_headers;
    m_http_headers_isSet = true;
}

bool OAIHTTPGetAction::is_http_headers_Set() const{
    return m_http_headers_isSet;
}

bool OAIHTTPGetAction::is_http_headers_Valid() const{
    return m_http_headers_isValid;
}

QString OAIHTTPGetAction::getPath() const {
    return m_path;
}
void OAIHTTPGetAction::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIHTTPGetAction::is_path_Set() const{
    return m_path_isSet;
}

bool OAIHTTPGetAction::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIHTTPGetAction::getScheme() const {
    return m_scheme;
}
void OAIHTTPGetAction::setScheme(const QString &scheme) {
    m_scheme = scheme;
    m_scheme_isSet = true;
}

bool OAIHTTPGetAction::is_scheme_Set() const{
    return m_scheme_isSet;
}

bool OAIHTTPGetAction::is_scheme_Valid() const{
    return m_scheme_isValid;
}

bool OAIHTTPGetAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHTTPGetAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
