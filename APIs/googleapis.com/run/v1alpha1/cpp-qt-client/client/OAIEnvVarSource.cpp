/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvVarSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvVarSource::OAIEnvVarSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvVarSource::OAIEnvVarSource() {
    this->initializeModel();
}

OAIEnvVarSource::~OAIEnvVarSource() {}

void OAIEnvVarSource::initializeModel() {

    m_config_map_key_ref_isSet = false;
    m_config_map_key_ref_isValid = false;

    m_secret_key_ref_isSet = false;
    m_secret_key_ref_isValid = false;
}

void OAIEnvVarSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvVarSource::fromJsonObject(QJsonObject json) {

    m_config_map_key_ref_isValid = ::OpenAPI::fromJsonValue(m_config_map_key_ref, json[QString("configMapKeyRef")]);
    m_config_map_key_ref_isSet = !json[QString("configMapKeyRef")].isNull() && m_config_map_key_ref_isValid;

    m_secret_key_ref_isValid = ::OpenAPI::fromJsonValue(m_secret_key_ref, json[QString("secretKeyRef")]);
    m_secret_key_ref_isSet = !json[QString("secretKeyRef")].isNull() && m_secret_key_ref_isValid;
}

QString OAIEnvVarSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvVarSource::asJsonObject() const {
    QJsonObject obj;
    if (m_config_map_key_ref.isSet()) {
        obj.insert(QString("configMapKeyRef"), ::OpenAPI::toJsonValue(m_config_map_key_ref));
    }
    if (m_secret_key_ref.isSet()) {
        obj.insert(QString("secretKeyRef"), ::OpenAPI::toJsonValue(m_secret_key_ref));
    }
    return obj;
}

OAIConfigMapKeySelector OAIEnvVarSource::getConfigMapKeyRef() const {
    return m_config_map_key_ref;
}
void OAIEnvVarSource::setConfigMapKeyRef(const OAIConfigMapKeySelector &config_map_key_ref) {
    m_config_map_key_ref = config_map_key_ref;
    m_config_map_key_ref_isSet = true;
}

bool OAIEnvVarSource::is_config_map_key_ref_Set() const{
    return m_config_map_key_ref_isSet;
}

bool OAIEnvVarSource::is_config_map_key_ref_Valid() const{
    return m_config_map_key_ref_isValid;
}

OAISecretKeySelector OAIEnvVarSource::getSecretKeyRef() const {
    return m_secret_key_ref;
}
void OAIEnvVarSource::setSecretKeyRef(const OAISecretKeySelector &secret_key_ref) {
    m_secret_key_ref = secret_key_ref;
    m_secret_key_ref_isSet = true;
}

bool OAIEnvVarSource::is_secret_key_ref_Set() const{
    return m_secret_key_ref_isSet;
}

bool OAIEnvVarSource::is_secret_key_ref_Valid() const{
    return m_secret_key_ref_isValid;
}

bool OAIEnvVarSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_map_key_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_key_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvVarSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
