/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobSpec::OAIJobSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobSpec::OAIJobSpec() {
    this->initializeModel();
}

OAIJobSpec::~OAIJobSpec() {}

void OAIJobSpec::initializeModel() {

    m_active_deadline_seconds_isSet = false;
    m_active_deadline_seconds_isValid = false;

    m_backoff_limit_isSet = false;
    m_backoff_limit_isValid = false;

    m_completions_isSet = false;
    m_completions_isValid = false;

    m_parallelism_isSet = false;
    m_parallelism_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_ttl_seconds_after_finished_isSet = false;
    m_ttl_seconds_after_finished_isValid = false;
}

void OAIJobSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobSpec::fromJsonObject(QJsonObject json) {

    m_active_deadline_seconds_isValid = ::OpenAPI::fromJsonValue(m_active_deadline_seconds, json[QString("activeDeadlineSeconds")]);
    m_active_deadline_seconds_isSet = !json[QString("activeDeadlineSeconds")].isNull() && m_active_deadline_seconds_isValid;

    m_backoff_limit_isValid = ::OpenAPI::fromJsonValue(m_backoff_limit, json[QString("backoffLimit")]);
    m_backoff_limit_isSet = !json[QString("backoffLimit")].isNull() && m_backoff_limit_isValid;

    m_completions_isValid = ::OpenAPI::fromJsonValue(m_completions, json[QString("completions")]);
    m_completions_isSet = !json[QString("completions")].isNull() && m_completions_isValid;

    m_parallelism_isValid = ::OpenAPI::fromJsonValue(m_parallelism, json[QString("parallelism")]);
    m_parallelism_isSet = !json[QString("parallelism")].isNull() && m_parallelism_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_ttl_seconds_after_finished_isValid = ::OpenAPI::fromJsonValue(m_ttl_seconds_after_finished, json[QString("ttlSecondsAfterFinished")]);
    m_ttl_seconds_after_finished_isSet = !json[QString("ttlSecondsAfterFinished")].isNull() && m_ttl_seconds_after_finished_isValid;
}

QString OAIJobSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_active_deadline_seconds_isSet) {
        obj.insert(QString("activeDeadlineSeconds"), ::OpenAPI::toJsonValue(m_active_deadline_seconds));
    }
    if (m_backoff_limit_isSet) {
        obj.insert(QString("backoffLimit"), ::OpenAPI::toJsonValue(m_backoff_limit));
    }
    if (m_completions_isSet) {
        obj.insert(QString("completions"), ::OpenAPI::toJsonValue(m_completions));
    }
    if (m_parallelism_isSet) {
        obj.insert(QString("parallelism"), ::OpenAPI::toJsonValue(m_parallelism));
    }
    if (m_r_template.isSet()) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_ttl_seconds_after_finished_isSet) {
        obj.insert(QString("ttlSecondsAfterFinished"), ::OpenAPI::toJsonValue(m_ttl_seconds_after_finished));
    }
    return obj;
}

QString OAIJobSpec::getActiveDeadlineSeconds() const {
    return m_active_deadline_seconds;
}
void OAIJobSpec::setActiveDeadlineSeconds(const QString &active_deadline_seconds) {
    m_active_deadline_seconds = active_deadline_seconds;
    m_active_deadline_seconds_isSet = true;
}

bool OAIJobSpec::is_active_deadline_seconds_Set() const{
    return m_active_deadline_seconds_isSet;
}

bool OAIJobSpec::is_active_deadline_seconds_Valid() const{
    return m_active_deadline_seconds_isValid;
}

qint32 OAIJobSpec::getBackoffLimit() const {
    return m_backoff_limit;
}
void OAIJobSpec::setBackoffLimit(const qint32 &backoff_limit) {
    m_backoff_limit = backoff_limit;
    m_backoff_limit_isSet = true;
}

bool OAIJobSpec::is_backoff_limit_Set() const{
    return m_backoff_limit_isSet;
}

bool OAIJobSpec::is_backoff_limit_Valid() const{
    return m_backoff_limit_isValid;
}

qint32 OAIJobSpec::getCompletions() const {
    return m_completions;
}
void OAIJobSpec::setCompletions(const qint32 &completions) {
    m_completions = completions;
    m_completions_isSet = true;
}

bool OAIJobSpec::is_completions_Set() const{
    return m_completions_isSet;
}

bool OAIJobSpec::is_completions_Valid() const{
    return m_completions_isValid;
}

qint32 OAIJobSpec::getParallelism() const {
    return m_parallelism;
}
void OAIJobSpec::setParallelism(const qint32 &parallelism) {
    m_parallelism = parallelism;
    m_parallelism_isSet = true;
}

bool OAIJobSpec::is_parallelism_Set() const{
    return m_parallelism_isSet;
}

bool OAIJobSpec::is_parallelism_Valid() const{
    return m_parallelism_isValid;
}

OAIInstanceTemplateSpec OAIJobSpec::getRTemplate() const {
    return m_r_template;
}
void OAIJobSpec::setRTemplate(const OAIInstanceTemplateSpec &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIJobSpec::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIJobSpec::is_r_template_Valid() const{
    return m_r_template_isValid;
}

qint32 OAIJobSpec::getTtlSecondsAfterFinished() const {
    return m_ttl_seconds_after_finished;
}
void OAIJobSpec::setTtlSecondsAfterFinished(const qint32 &ttl_seconds_after_finished) {
    m_ttl_seconds_after_finished = ttl_seconds_after_finished;
    m_ttl_seconds_after_finished_isSet = true;
}

bool OAIJobSpec::is_ttl_seconds_after_finished_Set() const{
    return m_ttl_seconds_after_finished_isSet;
}

bool OAIJobSpec::is_ttl_seconds_after_finished_Valid() const{
    return m_ttl_seconds_after_finished_isValid;
}

bool OAIJobSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_deadline_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backoff_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallelism_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_seconds_after_finished_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
