/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceSpec::OAIInstanceSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceSpec::OAIInstanceSpec() {
    this->initializeModel();
}

OAIInstanceSpec::~OAIInstanceSpec() {}

void OAIInstanceSpec::initializeModel() {

    m_active_deadline_seconds_isSet = false;
    m_active_deadline_seconds_isValid = false;

    m_containers_isSet = false;
    m_containers_isValid = false;

    m_restart_policy_isSet = false;
    m_restart_policy_isValid = false;

    m_service_account_name_isSet = false;
    m_service_account_name_isValid = false;

    m_termination_grace_period_seconds_isSet = false;
    m_termination_grace_period_seconds_isValid = false;

    m_volumes_isSet = false;
    m_volumes_isValid = false;
}

void OAIInstanceSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceSpec::fromJsonObject(QJsonObject json) {

    m_active_deadline_seconds_isValid = ::OpenAPI::fromJsonValue(m_active_deadline_seconds, json[QString("activeDeadlineSeconds")]);
    m_active_deadline_seconds_isSet = !json[QString("activeDeadlineSeconds")].isNull() && m_active_deadline_seconds_isValid;

    m_containers_isValid = ::OpenAPI::fromJsonValue(m_containers, json[QString("containers")]);
    m_containers_isSet = !json[QString("containers")].isNull() && m_containers_isValid;

    m_restart_policy_isValid = ::OpenAPI::fromJsonValue(m_restart_policy, json[QString("restartPolicy")]);
    m_restart_policy_isSet = !json[QString("restartPolicy")].isNull() && m_restart_policy_isValid;

    m_service_account_name_isValid = ::OpenAPI::fromJsonValue(m_service_account_name, json[QString("serviceAccountName")]);
    m_service_account_name_isSet = !json[QString("serviceAccountName")].isNull() && m_service_account_name_isValid;

    m_termination_grace_period_seconds_isValid = ::OpenAPI::fromJsonValue(m_termination_grace_period_seconds, json[QString("terminationGracePeriodSeconds")]);
    m_termination_grace_period_seconds_isSet = !json[QString("terminationGracePeriodSeconds")].isNull() && m_termination_grace_period_seconds_isValid;

    m_volumes_isValid = ::OpenAPI::fromJsonValue(m_volumes, json[QString("volumes")]);
    m_volumes_isSet = !json[QString("volumes")].isNull() && m_volumes_isValid;
}

QString OAIInstanceSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_active_deadline_seconds_isSet) {
        obj.insert(QString("activeDeadlineSeconds"), ::OpenAPI::toJsonValue(m_active_deadline_seconds));
    }
    if (m_containers.size() > 0) {
        obj.insert(QString("containers"), ::OpenAPI::toJsonValue(m_containers));
    }
    if (m_restart_policy_isSet) {
        obj.insert(QString("restartPolicy"), ::OpenAPI::toJsonValue(m_restart_policy));
    }
    if (m_service_account_name_isSet) {
        obj.insert(QString("serviceAccountName"), ::OpenAPI::toJsonValue(m_service_account_name));
    }
    if (m_termination_grace_period_seconds_isSet) {
        obj.insert(QString("terminationGracePeriodSeconds"), ::OpenAPI::toJsonValue(m_termination_grace_period_seconds));
    }
    if (m_volumes.size() > 0) {
        obj.insert(QString("volumes"), ::OpenAPI::toJsonValue(m_volumes));
    }
    return obj;
}

QString OAIInstanceSpec::getActiveDeadlineSeconds() const {
    return m_active_deadline_seconds;
}
void OAIInstanceSpec::setActiveDeadlineSeconds(const QString &active_deadline_seconds) {
    m_active_deadline_seconds = active_deadline_seconds;
    m_active_deadline_seconds_isSet = true;
}

bool OAIInstanceSpec::is_active_deadline_seconds_Set() const{
    return m_active_deadline_seconds_isSet;
}

bool OAIInstanceSpec::is_active_deadline_seconds_Valid() const{
    return m_active_deadline_seconds_isValid;
}

QList<OAIContainer> OAIInstanceSpec::getContainers() const {
    return m_containers;
}
void OAIInstanceSpec::setContainers(const QList<OAIContainer> &containers) {
    m_containers = containers;
    m_containers_isSet = true;
}

bool OAIInstanceSpec::is_containers_Set() const{
    return m_containers_isSet;
}

bool OAIInstanceSpec::is_containers_Valid() const{
    return m_containers_isValid;
}

QString OAIInstanceSpec::getRestartPolicy() const {
    return m_restart_policy;
}
void OAIInstanceSpec::setRestartPolicy(const QString &restart_policy) {
    m_restart_policy = restart_policy;
    m_restart_policy_isSet = true;
}

bool OAIInstanceSpec::is_restart_policy_Set() const{
    return m_restart_policy_isSet;
}

bool OAIInstanceSpec::is_restart_policy_Valid() const{
    return m_restart_policy_isValid;
}

QString OAIInstanceSpec::getServiceAccountName() const {
    return m_service_account_name;
}
void OAIInstanceSpec::setServiceAccountName(const QString &service_account_name) {
    m_service_account_name = service_account_name;
    m_service_account_name_isSet = true;
}

bool OAIInstanceSpec::is_service_account_name_Set() const{
    return m_service_account_name_isSet;
}

bool OAIInstanceSpec::is_service_account_name_Valid() const{
    return m_service_account_name_isValid;
}

QString OAIInstanceSpec::getTerminationGracePeriodSeconds() const {
    return m_termination_grace_period_seconds;
}
void OAIInstanceSpec::setTerminationGracePeriodSeconds(const QString &termination_grace_period_seconds) {
    m_termination_grace_period_seconds = termination_grace_period_seconds;
    m_termination_grace_period_seconds_isSet = true;
}

bool OAIInstanceSpec::is_termination_grace_period_seconds_Set() const{
    return m_termination_grace_period_seconds_isSet;
}

bool OAIInstanceSpec::is_termination_grace_period_seconds_Valid() const{
    return m_termination_grace_period_seconds_isValid;
}

QList<OAIVolume> OAIInstanceSpec::getVolumes() const {
    return m_volumes;
}
void OAIInstanceSpec::setVolumes(const QList<OAIVolume> &volumes) {
    m_volumes = volumes;
    m_volumes_isSet = true;
}

bool OAIInstanceSpec::is_volumes_Set() const{
    return m_volumes_isSet;
}

bool OAIInstanceSpec::is_volumes_Valid() const{
    return m_volumes_isValid;
}

bool OAIInstanceSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_deadline_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_containers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_restart_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_grace_period_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
