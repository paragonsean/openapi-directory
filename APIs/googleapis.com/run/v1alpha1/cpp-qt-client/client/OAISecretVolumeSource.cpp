/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecretVolumeSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecretVolumeSource::OAISecretVolumeSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecretVolumeSource::OAISecretVolumeSource() {
    this->initializeModel();
}

OAISecretVolumeSource::~OAISecretVolumeSource() {}

void OAISecretVolumeSource::initializeModel() {

    m_default_mode_isSet = false;
    m_default_mode_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_optional_isSet = false;
    m_optional_isValid = false;

    m_secret_name_isSet = false;
    m_secret_name_isValid = false;
}

void OAISecretVolumeSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecretVolumeSource::fromJsonObject(QJsonObject json) {

    m_default_mode_isValid = ::OpenAPI::fromJsonValue(m_default_mode, json[QString("defaultMode")]);
    m_default_mode_isSet = !json[QString("defaultMode")].isNull() && m_default_mode_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_optional_isValid = ::OpenAPI::fromJsonValue(m_optional, json[QString("optional")]);
    m_optional_isSet = !json[QString("optional")].isNull() && m_optional_isValid;

    m_secret_name_isValid = ::OpenAPI::fromJsonValue(m_secret_name, json[QString("secretName")]);
    m_secret_name_isSet = !json[QString("secretName")].isNull() && m_secret_name_isValid;
}

QString OAISecretVolumeSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecretVolumeSource::asJsonObject() const {
    QJsonObject obj;
    if (m_default_mode_isSet) {
        obj.insert(QString("defaultMode"), ::OpenAPI::toJsonValue(m_default_mode));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_optional_isSet) {
        obj.insert(QString("optional"), ::OpenAPI::toJsonValue(m_optional));
    }
    if (m_secret_name_isSet) {
        obj.insert(QString("secretName"), ::OpenAPI::toJsonValue(m_secret_name));
    }
    return obj;
}

qint32 OAISecretVolumeSource::getDefaultMode() const {
    return m_default_mode;
}
void OAISecretVolumeSource::setDefaultMode(const qint32 &default_mode) {
    m_default_mode = default_mode;
    m_default_mode_isSet = true;
}

bool OAISecretVolumeSource::is_default_mode_Set() const{
    return m_default_mode_isSet;
}

bool OAISecretVolumeSource::is_default_mode_Valid() const{
    return m_default_mode_isValid;
}

QList<OAIKeyToPath> OAISecretVolumeSource::getItems() const {
    return m_items;
}
void OAISecretVolumeSource::setItems(const QList<OAIKeyToPath> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAISecretVolumeSource::is_items_Set() const{
    return m_items_isSet;
}

bool OAISecretVolumeSource::is_items_Valid() const{
    return m_items_isValid;
}

bool OAISecretVolumeSource::isOptional() const {
    return m_optional;
}
void OAISecretVolumeSource::setOptional(const bool &optional) {
    m_optional = optional;
    m_optional_isSet = true;
}

bool OAISecretVolumeSource::is_optional_Set() const{
    return m_optional_isSet;
}

bool OAISecretVolumeSource::is_optional_Valid() const{
    return m_optional_isValid;
}

QString OAISecretVolumeSource::getSecretName() const {
    return m_secret_name;
}
void OAISecretVolumeSource::setSecretName(const QString &secret_name) {
    m_secret_name = secret_name;
    m_secret_name_isSet = true;
}

bool OAISecretVolumeSource::is_secret_name_Set() const{
    return m_secret_name_isSet;
}

bool OAISecretVolumeSource::is_secret_name_Valid() const{
    return m_secret_name_isValid;
}

bool OAISecretVolumeSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_optional_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecretVolumeSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
