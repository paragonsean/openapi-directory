/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInstanceStatus.h
 *
 * Instance represents the status of an instance of a Job.
 */

#ifndef OAIInstanceStatus_H
#define OAIInstanceStatus_H

#include <QJsonObject>

#include "OAIInstanceAttemptResult.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInstanceAttemptResult;

class OAIInstanceStatus : public OAIObject {
public:
    OAIInstanceStatus();
    OAIInstanceStatus(QString json);
    ~OAIInstanceStatus() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCompletionTime() const;
    void setCompletionTime(const QString &completion_time);
    bool is_completion_time_Set() const;
    bool is_completion_time_Valid() const;

    qint32 getFailed() const;
    void setFailed(const qint32 &failed);
    bool is_failed_Set() const;
    bool is_failed_Valid() const;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    OAIInstanceAttemptResult getLastAttemptResult() const;
    void setLastAttemptResult(const OAIInstanceAttemptResult &last_attempt_result);
    bool is_last_attempt_result_Set() const;
    bool is_last_attempt_result_Valid() const;

    qint32 getLastExitCode() const;
    void setLastExitCode(const qint32 &last_exit_code);
    bool is_last_exit_code_Set() const;
    bool is_last_exit_code_Valid() const;

    qint32 getRestarted() const;
    void setRestarted(const qint32 &restarted);
    bool is_restarted_Set() const;
    bool is_restarted_Valid() const;

    QString getStartTime() const;
    void setStartTime(const QString &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    qint32 getSucceeded() const;
    void setSucceeded(const qint32 &succeeded);
    bool is_succeeded_Set() const;
    bool is_succeeded_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_completion_time;
    bool m_completion_time_isSet;
    bool m_completion_time_isValid;

    qint32 m_failed;
    bool m_failed_isSet;
    bool m_failed_isValid;

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    OAIInstanceAttemptResult m_last_attempt_result;
    bool m_last_attempt_result_isSet;
    bool m_last_attempt_result_isValid;

    qint32 m_last_exit_code;
    bool m_last_exit_code_isSet;
    bool m_last_exit_code_isValid;

    qint32 m_restarted;
    bool m_restarted_isSet;
    bool m_restarted_isValid;

    QString m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    qint32 m_succeeded;
    bool m_succeeded_isSet;
    bool m_succeeded_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInstanceStatus)

#endif // OAIInstanceStatus_H
