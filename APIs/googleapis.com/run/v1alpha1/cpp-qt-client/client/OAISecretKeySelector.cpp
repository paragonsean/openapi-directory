/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecretKeySelector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecretKeySelector::OAISecretKeySelector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecretKeySelector::OAISecretKeySelector() {
    this->initializeModel();
}

OAISecretKeySelector::~OAISecretKeySelector() {}

void OAISecretKeySelector::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_local_object_reference_isSet = false;
    m_local_object_reference_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_optional_isSet = false;
    m_optional_isValid = false;
}

void OAISecretKeySelector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecretKeySelector::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_local_object_reference_isValid = ::OpenAPI::fromJsonValue(m_local_object_reference, json[QString("localObjectReference")]);
    m_local_object_reference_isSet = !json[QString("localObjectReference")].isNull() && m_local_object_reference_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_optional_isValid = ::OpenAPI::fromJsonValue(m_optional, json[QString("optional")]);
    m_optional_isSet = !json[QString("optional")].isNull() && m_optional_isValid;
}

QString OAISecretKeySelector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecretKeySelector::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_local_object_reference.isSet()) {
        obj.insert(QString("localObjectReference"), ::OpenAPI::toJsonValue(m_local_object_reference));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_optional_isSet) {
        obj.insert(QString("optional"), ::OpenAPI::toJsonValue(m_optional));
    }
    return obj;
}

QString OAISecretKeySelector::getKey() const {
    return m_key;
}
void OAISecretKeySelector::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAISecretKeySelector::is_key_Set() const{
    return m_key_isSet;
}

bool OAISecretKeySelector::is_key_Valid() const{
    return m_key_isValid;
}

OAILocalObjectReference OAISecretKeySelector::getLocalObjectReference() const {
    return m_local_object_reference;
}
void OAISecretKeySelector::setLocalObjectReference(const OAILocalObjectReference &local_object_reference) {
    m_local_object_reference = local_object_reference;
    m_local_object_reference_isSet = true;
}

bool OAISecretKeySelector::is_local_object_reference_Set() const{
    return m_local_object_reference_isSet;
}

bool OAISecretKeySelector::is_local_object_reference_Valid() const{
    return m_local_object_reference_isValid;
}

QString OAISecretKeySelector::getName() const {
    return m_name;
}
void OAISecretKeySelector::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISecretKeySelector::is_name_Set() const{
    return m_name_isSet;
}

bool OAISecretKeySelector::is_name_Valid() const{
    return m_name_isValid;
}

bool OAISecretKeySelector::isOptional() const {
    return m_optional;
}
void OAISecretKeySelector::setOptional(const bool &optional) {
    m_optional = optional;
    m_optional_isSet = true;
}

bool OAISecretKeySelector::is_optional_Set() const{
    return m_optional_isSet;
}

bool OAISecretKeySelector::is_optional_Valid() const{
    return m_optional_isValid;
}

bool OAISecretKeySelector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_object_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optional_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecretKeySelector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
