/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJobSpec.h
 *
 * JobSpec describes how the job execution will look like.
 */

#ifndef OAIJobSpec_H
#define OAIJobSpec_H

#include <QJsonObject>

#include "OAIInstanceTemplateSpec.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInstanceTemplateSpec;

class OAIJobSpec : public OAIObject {
public:
    OAIJobSpec();
    OAIJobSpec(QString json);
    ~OAIJobSpec() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getActiveDeadlineSeconds() const;
    void setActiveDeadlineSeconds(const QString &active_deadline_seconds);
    bool is_active_deadline_seconds_Set() const;
    bool is_active_deadline_seconds_Valid() const;

    qint32 getBackoffLimit() const;
    void setBackoffLimit(const qint32 &backoff_limit);
    bool is_backoff_limit_Set() const;
    bool is_backoff_limit_Valid() const;

    qint32 getCompletions() const;
    void setCompletions(const qint32 &completions);
    bool is_completions_Set() const;
    bool is_completions_Valid() const;

    qint32 getParallelism() const;
    void setParallelism(const qint32 &parallelism);
    bool is_parallelism_Set() const;
    bool is_parallelism_Valid() const;

    OAIInstanceTemplateSpec getRTemplate() const;
    void setRTemplate(const OAIInstanceTemplateSpec &r_template);
    bool is_r_template_Set() const;
    bool is_r_template_Valid() const;

    qint32 getTtlSecondsAfterFinished() const;
    void setTtlSecondsAfterFinished(const qint32 &ttl_seconds_after_finished);
    bool is_ttl_seconds_after_finished_Set() const;
    bool is_ttl_seconds_after_finished_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_active_deadline_seconds;
    bool m_active_deadline_seconds_isSet;
    bool m_active_deadline_seconds_isValid;

    qint32 m_backoff_limit;
    bool m_backoff_limit_isSet;
    bool m_backoff_limit_isValid;

    qint32 m_completions;
    bool m_completions_isSet;
    bool m_completions_isValid;

    qint32 m_parallelism;
    bool m_parallelism_isSet;
    bool m_parallelism_isValid;

    OAIInstanceTemplateSpec m_r_template;
    bool m_r_template_isSet;
    bool m_r_template_isValid;

    qint32 m_ttl_seconds_after_finished;
    bool m_ttl_seconds_after_finished_isSet;
    bool m_ttl_seconds_after_finished_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJobSpec)

#endif // OAIJobSpec_H
