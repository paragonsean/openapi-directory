/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProbe.h
 *
 * Not supported by Cloud Run Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
 */

#ifndef OAIProbe_H
#define OAIProbe_H

#include <QJsonObject>

#include "OAIExecAction.h"
#include "OAIGRPCAction.h"
#include "OAIHTTPGetAction.h"
#include "OAITCPSocketAction.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExecAction;
class OAIGRPCAction;
class OAIHTTPGetAction;
class OAITCPSocketAction;

class OAIProbe : public OAIObject {
public:
    OAIProbe();
    OAIProbe(QString json);
    ~OAIProbe() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIExecAction getExec() const;
    void setExec(const OAIExecAction &exec);
    bool is_exec_Set() const;
    bool is_exec_Valid() const;

    qint32 getFailureThreshold() const;
    void setFailureThreshold(const qint32 &failure_threshold);
    bool is_failure_threshold_Set() const;
    bool is_failure_threshold_Valid() const;

    OAIGRPCAction getGrpc() const;
    void setGrpc(const OAIGRPCAction &grpc);
    bool is_grpc_Set() const;
    bool is_grpc_Valid() const;

    OAIHTTPGetAction getHttpGet() const;
    void setHttpGet(const OAIHTTPGetAction &http_get);
    bool is_http_get_Set() const;
    bool is_http_get_Valid() const;

    qint32 getInitialDelaySeconds() const;
    void setInitialDelaySeconds(const qint32 &initial_delay_seconds);
    bool is_initial_delay_seconds_Set() const;
    bool is_initial_delay_seconds_Valid() const;

    qint32 getPeriodSeconds() const;
    void setPeriodSeconds(const qint32 &period_seconds);
    bool is_period_seconds_Set() const;
    bool is_period_seconds_Valid() const;

    qint32 getSuccessThreshold() const;
    void setSuccessThreshold(const qint32 &success_threshold);
    bool is_success_threshold_Set() const;
    bool is_success_threshold_Valid() const;

    OAITCPSocketAction getTcpSocket() const;
    void setTcpSocket(const OAITCPSocketAction &tcp_socket);
    bool is_tcp_socket_Set() const;
    bool is_tcp_socket_Valid() const;

    qint32 getTimeoutSeconds() const;
    void setTimeoutSeconds(const qint32 &timeout_seconds);
    bool is_timeout_seconds_Set() const;
    bool is_timeout_seconds_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIExecAction m_exec;
    bool m_exec_isSet;
    bool m_exec_isValid;

    qint32 m_failure_threshold;
    bool m_failure_threshold_isSet;
    bool m_failure_threshold_isValid;

    OAIGRPCAction m_grpc;
    bool m_grpc_isSet;
    bool m_grpc_isValid;

    OAIHTTPGetAction m_http_get;
    bool m_http_get_isSet;
    bool m_http_get_isValid;

    qint32 m_initial_delay_seconds;
    bool m_initial_delay_seconds_isSet;
    bool m_initial_delay_seconds_isValid;

    qint32 m_period_seconds;
    bool m_period_seconds_isSet;
    bool m_period_seconds_isValid;

    qint32 m_success_threshold;
    bool m_success_threshold_isSet;
    bool m_success_threshold_isValid;

    OAITCPSocketAction m_tcp_socket;
    bool m_tcp_socket_isSet;
    bool m_tcp_socket_isValid;

    qint32 m_timeout_seconds;
    bool m_timeout_seconds_isSet;
    bool m_timeout_seconds_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProbe)

#endif // OAIProbe_H
