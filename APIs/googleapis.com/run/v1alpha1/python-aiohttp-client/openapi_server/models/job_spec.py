# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_template_spec import InstanceTemplateSpec
from openapi_server import util


class JobSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_deadline_seconds: str=None, backoff_limit: int=None, completions: int=None, parallelism: int=None, template: InstanceTemplateSpec=None, ttl_seconds_after_finished: int=None):
        """JobSpec - a model defined in OpenAPI

        :param active_deadline_seconds: The active_deadline_seconds of this JobSpec.
        :param backoff_limit: The backoff_limit of this JobSpec.
        :param completions: The completions of this JobSpec.
        :param parallelism: The parallelism of this JobSpec.
        :param template: The template of this JobSpec.
        :param ttl_seconds_after_finished: The ttl_seconds_after_finished of this JobSpec.
        """
        self.openapi_types = {
            'active_deadline_seconds': str,
            'backoff_limit': int,
            'completions': int,
            'parallelism': int,
            'template': InstanceTemplateSpec,
            'ttl_seconds_after_finished': int
        }

        self.attribute_map = {
            'active_deadline_seconds': 'activeDeadlineSeconds',
            'backoff_limit': 'backoffLimit',
            'completions': 'completions',
            'parallelism': 'parallelism',
            'template': 'template',
            'ttl_seconds_after_finished': 'ttlSecondsAfterFinished'
        }

        self._active_deadline_seconds = active_deadline_seconds
        self._backoff_limit = backoff_limit
        self._completions = completions
        self._parallelism = parallelism
        self._template = template
        self._ttl_seconds_after_finished = ttl_seconds_after_finished

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobSpec of this JobSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_deadline_seconds(self):
        """Gets the active_deadline_seconds of this JobSpec.

        Optional. Not supported. Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it. If set to zero, the system will never attempt to terminate the job based on time. Otherwise, the value must be positive integer. +optional

        :return: The active_deadline_seconds of this JobSpec.
        :rtype: str
        """
        return self._active_deadline_seconds

    @active_deadline_seconds.setter
    def active_deadline_seconds(self, active_deadline_seconds):
        """Sets the active_deadline_seconds of this JobSpec.

        Optional. Not supported. Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it. If set to zero, the system will never attempt to terminate the job based on time. Otherwise, the value must be positive integer. +optional

        :param active_deadline_seconds: The active_deadline_seconds of this JobSpec.
        :type active_deadline_seconds: str
        """

        self._active_deadline_seconds = active_deadline_seconds

    @property
    def backoff_limit(self):
        """Gets the backoff_limit of this JobSpec.

        Optional. Specifies the number of retries per instance, before marking this job failed. If set to zero, instances will never retry on failure. +optional

        :return: The backoff_limit of this JobSpec.
        :rtype: int
        """
        return self._backoff_limit

    @backoff_limit.setter
    def backoff_limit(self, backoff_limit):
        """Sets the backoff_limit of this JobSpec.

        Optional. Specifies the number of retries per instance, before marking this job failed. If set to zero, instances will never retry on failure. +optional

        :param backoff_limit: The backoff_limit of this JobSpec.
        :type backoff_limit: int
        """

        self._backoff_limit = backoff_limit

    @property
    def completions(self):
        """Gets the completions of this JobSpec.

        Optional. Specifies the desired number of successfully finished instances the job should be run with. Setting to 1 means that parallelism is limited to 1 and the success of that instance signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional

        :return: The completions of this JobSpec.
        :rtype: int
        """
        return self._completions

    @completions.setter
    def completions(self, completions):
        """Sets the completions of this JobSpec.

        Optional. Specifies the desired number of successfully finished instances the job should be run with. Setting to 1 means that parallelism is limited to 1 and the success of that instance signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional

        :param completions: The completions of this JobSpec.
        :type completions: int
        """

        self._completions = completions

    @property
    def parallelism(self):
        """Gets the parallelism of this JobSpec.

        Optional. Specifies the maximum desired number of instances the job should run at any given time. Must be <= completions. The actual number of instances running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional

        :return: The parallelism of this JobSpec.
        :rtype: int
        """
        return self._parallelism

    @parallelism.setter
    def parallelism(self, parallelism):
        """Sets the parallelism of this JobSpec.

        Optional. Specifies the maximum desired number of instances the job should run at any given time. Must be <= completions. The actual number of instances running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional

        :param parallelism: The parallelism of this JobSpec.
        :type parallelism: int
        """

        self._parallelism = parallelism

    @property
    def template(self):
        """Gets the template of this JobSpec.


        :return: The template of this JobSpec.
        :rtype: InstanceTemplateSpec
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this JobSpec.


        :param template: The template of this JobSpec.
        :type template: InstanceTemplateSpec
        """

        self._template = template

    @property
    def ttl_seconds_after_finished(self):
        """Gets the ttl_seconds_after_finished of this JobSpec.

        Optional. Not supported. ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is set to zero, the Job won't be automatically deleted. +optional

        :return: The ttl_seconds_after_finished of this JobSpec.
        :rtype: int
        """
        return self._ttl_seconds_after_finished

    @ttl_seconds_after_finished.setter
    def ttl_seconds_after_finished(self, ttl_seconds_after_finished):
        """Sets the ttl_seconds_after_finished of this JobSpec.

        Optional. Not supported. ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is set to zero, the Job won't be automatically deleted. +optional

        :param ttl_seconds_after_finished: The ttl_seconds_after_finished of this JobSpec.
        :type ttl_seconds_after_finished: int
        """

        self._ttl_seconds_after_finished = ttl_seconds_after_finished
