# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_map_volume_source import ConfigMapVolumeSource
from openapi_server.models.secret_volume_source import SecretVolumeSource
from openapi_server import util


class Volume(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config_map: ConfigMapVolumeSource=None, name: str=None, secret: SecretVolumeSource=None):
        """Volume - a model defined in OpenAPI

        :param config_map: The config_map of this Volume.
        :param name: The name of this Volume.
        :param secret: The secret of this Volume.
        """
        self.openapi_types = {
            'config_map': ConfigMapVolumeSource,
            'name': str,
            'secret': SecretVolumeSource
        }

        self.attribute_map = {
            'config_map': 'configMap',
            'name': 'name',
            'secret': 'secret'
        }

        self._config_map = config_map
        self._name = name
        self._secret = secret

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Volume':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Volume of this Volume.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config_map(self):
        """Gets the config_map of this Volume.


        :return: The config_map of this Volume.
        :rtype: ConfigMapVolumeSource
        """
        return self._config_map

    @config_map.setter
    def config_map(self, config_map):
        """Sets the config_map of this Volume.


        :param config_map: The config_map of this Volume.
        :type config_map: ConfigMapVolumeSource
        """

        self._config_map = config_map

    @property
    def name(self):
        """Gets the name of this Volume.

        Volume's name. In Cloud Run Fully Managed, the name 'cloudsql' is reserved.

        :return: The name of this Volume.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Volume.

        Volume's name. In Cloud Run Fully Managed, the name 'cloudsql' is reserved.

        :param name: The name of this Volume.
        :type name: str
        """

        self._name = name

    @property
    def secret(self):
        """Gets the secret of this Volume.


        :return: The secret of this Volume.
        :rtype: SecretVolumeSource
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this Volume.


        :param secret: The secret of this Volume.
        :type secret: SecretVolumeSource
        """

        self._secret = secret
