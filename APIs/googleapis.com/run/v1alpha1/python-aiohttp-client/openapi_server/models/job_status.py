# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_status import InstanceStatus
from openapi_server.models.job_condition import JobCondition
from openapi_server import util


class JobStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: int=None, completion_time: str=None, conditions: List[JobCondition]=None, failed: int=None, image_digest: str=None, instances: List[InstanceStatus]=None, observed_generation: int=None, start_time: str=None, succeeded: int=None):
        """JobStatus - a model defined in OpenAPI

        :param active: The active of this JobStatus.
        :param completion_time: The completion_time of this JobStatus.
        :param conditions: The conditions of this JobStatus.
        :param failed: The failed of this JobStatus.
        :param image_digest: The image_digest of this JobStatus.
        :param instances: The instances of this JobStatus.
        :param observed_generation: The observed_generation of this JobStatus.
        :param start_time: The start_time of this JobStatus.
        :param succeeded: The succeeded of this JobStatus.
        """
        self.openapi_types = {
            'active': int,
            'completion_time': str,
            'conditions': List[JobCondition],
            'failed': int,
            'image_digest': str,
            'instances': List[InstanceStatus],
            'observed_generation': int,
            'start_time': str,
            'succeeded': int
        }

        self.attribute_map = {
            'active': 'active',
            'completion_time': 'completionTime',
            'conditions': 'conditions',
            'failed': 'failed',
            'image_digest': 'imageDigest',
            'instances': 'instances',
            'observed_generation': 'observedGeneration',
            'start_time': 'startTime',
            'succeeded': 'succeeded'
        }

        self._active = active
        self._completion_time = completion_time
        self._conditions = conditions
        self._failed = failed
        self._image_digest = image_digest
        self._instances = instances
        self._observed_generation = observed_generation
        self._start_time = start_time
        self._succeeded = succeeded

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobStatus of this JobStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this JobStatus.

        Optional. The number of actively running instances. +optional

        :return: The active of this JobStatus.
        :rtype: int
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this JobStatus.

        Optional. The number of actively running instances. +optional

        :param active: The active of this JobStatus.
        :type active: int
        """

        self._active = active

    @property
    def completion_time(self):
        """Gets the completion_time of this JobStatus.

        Optional. Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional

        :return: The completion_time of this JobStatus.
        :rtype: str
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this JobStatus.

        Optional. Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional

        :param completion_time: The completion_time of this JobStatus.
        :type completion_time: str
        """

        self._completion_time = completion_time

    @property
    def conditions(self):
        """Gets the conditions of this JobStatus.

        Optional. The latest available observations of a job's current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional

        :return: The conditions of this JobStatus.
        :rtype: List[JobCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this JobStatus.

        Optional. The latest available observations of a job's current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional

        :param conditions: The conditions of this JobStatus.
        :type conditions: List[JobCondition]
        """

        self._conditions = conditions

    @property
    def failed(self):
        """Gets the failed of this JobStatus.

        Optional. The number of instances which reached phase Failed. +optional

        :return: The failed of this JobStatus.
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this JobStatus.

        Optional. The number of instances which reached phase Failed. +optional

        :param failed: The failed of this JobStatus.
        :type failed: int
        """

        self._failed = failed

    @property
    def image_digest(self):
        """Gets the image_digest of this JobStatus.

        Optional. ImageDigest holds the resolved digest for the image specified within .Spec.Template.Spec.Container.Image. The digest is resolved during the creation of the Job. This field holds the digest value regardless of whether a tag or digest was originally specified in the Container object.

        :return: The image_digest of this JobStatus.
        :rtype: str
        """
        return self._image_digest

    @image_digest.setter
    def image_digest(self, image_digest):
        """Sets the image_digest of this JobStatus.

        Optional. ImageDigest holds the resolved digest for the image specified within .Spec.Template.Spec.Container.Image. The digest is resolved during the creation of the Job. This field holds the digest value regardless of whether a tag or digest was originally specified in the Container object.

        :param image_digest: The image_digest of this JobStatus.
        :type image_digest: str
        """

        self._image_digest = image_digest

    @property
    def instances(self):
        """Gets the instances of this JobStatus.

        Optional. Status of completed, failed, and running instances. +optional

        :return: The instances of this JobStatus.
        :rtype: List[InstanceStatus]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this JobStatus.

        Optional. Status of completed, failed, and running instances. +optional

        :param instances: The instances of this JobStatus.
        :type instances: List[InstanceStatus]
        """

        self._instances = instances

    @property
    def observed_generation(self):
        """Gets the observed_generation of this JobStatus.

        Optional. The 'generation' of the job that was last processed by the controller.

        :return: The observed_generation of this JobStatus.
        :rtype: int
        """
        return self._observed_generation

    @observed_generation.setter
    def observed_generation(self, observed_generation):
        """Sets the observed_generation of this JobStatus.

        Optional. The 'generation' of the job that was last processed by the controller.

        :param observed_generation: The observed_generation of this JobStatus.
        :type observed_generation: int
        """

        self._observed_generation = observed_generation

    @property
    def start_time(self):
        """Gets the start_time of this JobStatus.

        Optional. Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional

        :return: The start_time of this JobStatus.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JobStatus.

        Optional. Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional

        :param start_time: The start_time of this JobStatus.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def succeeded(self):
        """Gets the succeeded of this JobStatus.

        Optional. The number of instances which reached phase Succeeded. +optional

        :return: The succeeded of this JobStatus.
        :rtype: int
        """
        return self._succeeded

    @succeeded.setter
    def succeeded(self, succeeded):
        """Sets the succeeded of this JobStatus.

        Optional. The number of instances which reached phase Succeeded. +optional

        :param succeeded: The succeeded of this JobStatus.
        :type succeeded: int
        """

        self._succeeded = succeeded
