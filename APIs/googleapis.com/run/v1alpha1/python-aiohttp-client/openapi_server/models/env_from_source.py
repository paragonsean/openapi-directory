# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_map_env_source import ConfigMapEnvSource
from openapi_server.models.secret_env_source import SecretEnvSource
from openapi_server import util


class EnvFromSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config_map_ref: ConfigMapEnvSource=None, prefix: str=None, secret_ref: SecretEnvSource=None):
        """EnvFromSource - a model defined in OpenAPI

        :param config_map_ref: The config_map_ref of this EnvFromSource.
        :param prefix: The prefix of this EnvFromSource.
        :param secret_ref: The secret_ref of this EnvFromSource.
        """
        self.openapi_types = {
            'config_map_ref': ConfigMapEnvSource,
            'prefix': str,
            'secret_ref': SecretEnvSource
        }

        self.attribute_map = {
            'config_map_ref': 'configMapRef',
            'prefix': 'prefix',
            'secret_ref': 'secretRef'
        }

        self._config_map_ref = config_map_ref
        self._prefix = prefix
        self._secret_ref = secret_ref

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnvFromSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnvFromSource of this EnvFromSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config_map_ref(self):
        """Gets the config_map_ref of this EnvFromSource.


        :return: The config_map_ref of this EnvFromSource.
        :rtype: ConfigMapEnvSource
        """
        return self._config_map_ref

    @config_map_ref.setter
    def config_map_ref(self, config_map_ref):
        """Sets the config_map_ref of this EnvFromSource.


        :param config_map_ref: The config_map_ref of this EnvFromSource.
        :type config_map_ref: ConfigMapEnvSource
        """

        self._config_map_ref = config_map_ref

    @property
    def prefix(self):
        """Gets the prefix of this EnvFromSource.

        (Optional) An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.

        :return: The prefix of this EnvFromSource.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this EnvFromSource.

        (Optional) An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.

        :param prefix: The prefix of this EnvFromSource.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def secret_ref(self):
        """Gets the secret_ref of this EnvFromSource.


        :return: The secret_ref of this EnvFromSource.
        :rtype: SecretEnvSource
        """
        return self._secret_ref

    @secret_ref.setter
    def secret_ref(self, secret_ref):
        """Sets the secret_ref of this EnvFromSource.


        :param secret_ref: The secret_ref of this EnvFromSource.
        :type secret_ref: SecretEnvSource
        """

        self._secret_ref = secret_ref
