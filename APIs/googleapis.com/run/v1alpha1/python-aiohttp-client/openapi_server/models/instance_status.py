# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_attempt_result import InstanceAttemptResult
from openapi_server import util


class InstanceStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completion_time: str=None, failed: int=None, index: int=None, last_attempt_result: InstanceAttemptResult=None, last_exit_code: int=None, restarted: int=None, start_time: str=None, succeeded: int=None):
        """InstanceStatus - a model defined in OpenAPI

        :param completion_time: The completion_time of this InstanceStatus.
        :param failed: The failed of this InstanceStatus.
        :param index: The index of this InstanceStatus.
        :param last_attempt_result: The last_attempt_result of this InstanceStatus.
        :param last_exit_code: The last_exit_code of this InstanceStatus.
        :param restarted: The restarted of this InstanceStatus.
        :param start_time: The start_time of this InstanceStatus.
        :param succeeded: The succeeded of this InstanceStatus.
        """
        self.openapi_types = {
            'completion_time': str,
            'failed': int,
            'index': int,
            'last_attempt_result': InstanceAttemptResult,
            'last_exit_code': int,
            'restarted': int,
            'start_time': str,
            'succeeded': int
        }

        self.attribute_map = {
            'completion_time': 'completionTime',
            'failed': 'failed',
            'index': 'index',
            'last_attempt_result': 'lastAttemptResult',
            'last_exit_code': 'lastExitCode',
            'restarted': 'restarted',
            'start_time': 'startTime',
            'succeeded': 'succeeded'
        }

        self._completion_time = completion_time
        self._failed = failed
        self._index = index
        self._last_attempt_result = last_attempt_result
        self._last_exit_code = last_exit_code
        self._restarted = restarted
        self._start_time = start_time
        self._succeeded = succeeded

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceStatus of this InstanceStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completion_time(self):
        """Gets the completion_time of this InstanceStatus.

        Optional. Represents time when the instance was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional

        :return: The completion_time of this InstanceStatus.
        :rtype: str
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this InstanceStatus.

        Optional. Represents time when the instance was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional

        :param completion_time: The completion_time of this InstanceStatus.
        :type completion_time: str
        """

        self._completion_time = completion_time

    @property
    def failed(self):
        """Gets the failed of this InstanceStatus.

        Optional. The number of times this instance exited with code > 0; +optional

        :return: The failed of this InstanceStatus.
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this InstanceStatus.

        Optional. The number of times this instance exited with code > 0; +optional

        :param failed: The failed of this InstanceStatus.
        :type failed: int
        """

        self._failed = failed

    @property
    def index(self):
        """Gets the index of this InstanceStatus.

        Required. Index of the instance, unique per Job, and beginning at 0.

        :return: The index of this InstanceStatus.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this InstanceStatus.

        Required. Index of the instance, unique per Job, and beginning at 0.

        :param index: The index of this InstanceStatus.
        :type index: int
        """

        self._index = index

    @property
    def last_attempt_result(self):
        """Gets the last_attempt_result of this InstanceStatus.


        :return: The last_attempt_result of this InstanceStatus.
        :rtype: InstanceAttemptResult
        """
        return self._last_attempt_result

    @last_attempt_result.setter
    def last_attempt_result(self, last_attempt_result):
        """Sets the last_attempt_result of this InstanceStatus.


        :param last_attempt_result: The last_attempt_result of this InstanceStatus.
        :type last_attempt_result: InstanceAttemptResult
        """

        self._last_attempt_result = last_attempt_result

    @property
    def last_exit_code(self):
        """Gets the last_exit_code of this InstanceStatus.

        Optional. Last exit code seen for this instance. +optional

        :return: The last_exit_code of this InstanceStatus.
        :rtype: int
        """
        return self._last_exit_code

    @last_exit_code.setter
    def last_exit_code(self, last_exit_code):
        """Sets the last_exit_code of this InstanceStatus.

        Optional. Last exit code seen for this instance. +optional

        :param last_exit_code: The last_exit_code of this InstanceStatus.
        :type last_exit_code: int
        """

        self._last_exit_code = last_exit_code

    @property
    def restarted(self):
        """Gets the restarted of this InstanceStatus.

        Optional. The number of times this instance was restarted. Instances are restarted according the restartPolicy configured in the Job template. +optional

        :return: The restarted of this InstanceStatus.
        :rtype: int
        """
        return self._restarted

    @restarted.setter
    def restarted(self, restarted):
        """Sets the restarted of this InstanceStatus.

        Optional. The number of times this instance was restarted. Instances are restarted according the restartPolicy configured in the Job template. +optional

        :param restarted: The restarted of this InstanceStatus.
        :type restarted: int
        """

        self._restarted = restarted

    @property
    def start_time(self):
        """Gets the start_time of this InstanceStatus.

        Optional. Represents time when the instance was created by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional

        :return: The start_time of this InstanceStatus.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this InstanceStatus.

        Optional. Represents time when the instance was created by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional

        :param start_time: The start_time of this InstanceStatus.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def succeeded(self):
        """Gets the succeeded of this InstanceStatus.

        Optional. The number of times this instance exited with code == 0. +optional

        :return: The succeeded of this InstanceStatus.
        :rtype: int
        """
        return self._succeeded

    @succeeded.setter
    def succeeded(self, succeeded):
        """Sets the succeeded of this InstanceStatus.

        Optional. The number of times this instance exited with code == 0. +optional

        :param succeeded: The succeeded of this InstanceStatus.
        :type succeeded: int
        """

        self._succeeded = succeeded
