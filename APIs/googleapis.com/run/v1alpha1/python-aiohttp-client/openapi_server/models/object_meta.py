# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.owner_reference import OwnerReference
from openapi_server import util


class ObjectMeta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, cluster_name: str=None, creation_timestamp: str=None, deletion_grace_period_seconds: int=None, deletion_timestamp: str=None, finalizers: List[str]=None, generate_name: str=None, generation: int=None, labels: Dict[str, str]=None, name: str=None, namespace: str=None, owner_references: List[OwnerReference]=None, resource_version: str=None, self_link: str=None, uid: str=None):
        """ObjectMeta - a model defined in OpenAPI

        :param annotations: The annotations of this ObjectMeta.
        :param cluster_name: The cluster_name of this ObjectMeta.
        :param creation_timestamp: The creation_timestamp of this ObjectMeta.
        :param deletion_grace_period_seconds: The deletion_grace_period_seconds of this ObjectMeta.
        :param deletion_timestamp: The deletion_timestamp of this ObjectMeta.
        :param finalizers: The finalizers of this ObjectMeta.
        :param generate_name: The generate_name of this ObjectMeta.
        :param generation: The generation of this ObjectMeta.
        :param labels: The labels of this ObjectMeta.
        :param name: The name of this ObjectMeta.
        :param namespace: The namespace of this ObjectMeta.
        :param owner_references: The owner_references of this ObjectMeta.
        :param resource_version: The resource_version of this ObjectMeta.
        :param self_link: The self_link of this ObjectMeta.
        :param uid: The uid of this ObjectMeta.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'cluster_name': str,
            'creation_timestamp': str,
            'deletion_grace_period_seconds': int,
            'deletion_timestamp': str,
            'finalizers': List[str],
            'generate_name': str,
            'generation': int,
            'labels': Dict[str, str],
            'name': str,
            'namespace': str,
            'owner_references': List[OwnerReference],
            'resource_version': str,
            'self_link': str,
            'uid': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'cluster_name': 'clusterName',
            'creation_timestamp': 'creationTimestamp',
            'deletion_grace_period_seconds': 'deletionGracePeriodSeconds',
            'deletion_timestamp': 'deletionTimestamp',
            'finalizers': 'finalizers',
            'generate_name': 'generateName',
            'generation': 'generation',
            'labels': 'labels',
            'name': 'name',
            'namespace': 'namespace',
            'owner_references': 'ownerReferences',
            'resource_version': 'resourceVersion',
            'self_link': 'selfLink',
            'uid': 'uid'
        }

        self._annotations = annotations
        self._cluster_name = cluster_name
        self._creation_timestamp = creation_timestamp
        self._deletion_grace_period_seconds = deletion_grace_period_seconds
        self._deletion_timestamp = deletion_timestamp
        self._finalizers = finalizers
        self._generate_name = generate_name
        self._generation = generation
        self._labels = labels
        self._name = name
        self._namespace = namespace
        self._owner_references = owner_references
        self._resource_version = resource_version
        self._self_link = self_link
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjectMeta':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ObjectMeta of this ObjectMeta.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this ObjectMeta.

        (Optional) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/user-guide/annotations

        :return: The annotations of this ObjectMeta.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this ObjectMeta.

        (Optional) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/user-guide/annotations

        :param annotations: The annotations of this ObjectMeta.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def cluster_name(self):
        """Gets the cluster_name of this ObjectMeta.

        (Optional) Not supported by Cloud Run The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.

        :return: The cluster_name of this ObjectMeta.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this ObjectMeta.

        (Optional) Not supported by Cloud Run The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.

        :param cluster_name: The cluster_name of this ObjectMeta.
        :type cluster_name: str
        """

        self._cluster_name = cluster_name

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this ObjectMeta.

        (Optional) CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata

        :return: The creation_timestamp of this ObjectMeta.
        :rtype: str
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this ObjectMeta.

        (Optional) CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata

        :param creation_timestamp: The creation_timestamp of this ObjectMeta.
        :type creation_timestamp: str
        """

        self._creation_timestamp = creation_timestamp

    @property
    def deletion_grace_period_seconds(self):
        """Gets the deletion_grace_period_seconds of this ObjectMeta.

        (Optional) Not supported by Cloud Run Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.

        :return: The deletion_grace_period_seconds of this ObjectMeta.
        :rtype: int
        """
        return self._deletion_grace_period_seconds

    @deletion_grace_period_seconds.setter
    def deletion_grace_period_seconds(self, deletion_grace_period_seconds):
        """Sets the deletion_grace_period_seconds of this ObjectMeta.

        (Optional) Not supported by Cloud Run Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.

        :param deletion_grace_period_seconds: The deletion_grace_period_seconds of this ObjectMeta.
        :type deletion_grace_period_seconds: int
        """

        self._deletion_grace_period_seconds = deletion_grace_period_seconds

    @property
    def deletion_timestamp(self):
        """Gets the deletion_timestamp of this ObjectMeta.

        (Optional) Not supported by Cloud Run DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata

        :return: The deletion_timestamp of this ObjectMeta.
        :rtype: str
        """
        return self._deletion_timestamp

    @deletion_timestamp.setter
    def deletion_timestamp(self, deletion_timestamp):
        """Sets the deletion_timestamp of this ObjectMeta.

        (Optional) Not supported by Cloud Run DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata

        :param deletion_timestamp: The deletion_timestamp of this ObjectMeta.
        :type deletion_timestamp: str
        """

        self._deletion_timestamp = deletion_timestamp

    @property
    def finalizers(self):
        """Gets the finalizers of this ObjectMeta.

        (Optional) Not supported by Cloud Run Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. +patchStrategy=merge

        :return: The finalizers of this ObjectMeta.
        :rtype: List[str]
        """
        return self._finalizers

    @finalizers.setter
    def finalizers(self, finalizers):
        """Sets the finalizers of this ObjectMeta.

        (Optional) Not supported by Cloud Run Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. +patchStrategy=merge

        :param finalizers: The finalizers of this ObjectMeta.
        :type finalizers: List[str]
        """

        self._finalizers = finalizers

    @property
    def generate_name(self):
        """Gets the generate_name of this ObjectMeta.

        (Optional) Not supported by Cloud Run GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency string generateName = 2;

        :return: The generate_name of this ObjectMeta.
        :rtype: str
        """
        return self._generate_name

    @generate_name.setter
    def generate_name(self, generate_name):
        """Sets the generate_name of this ObjectMeta.

        (Optional) Not supported by Cloud Run GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency string generateName = 2;

        :param generate_name: The generate_name of this ObjectMeta.
        :type generate_name: str
        """

        self._generate_name = generate_name

    @property
    def generation(self):
        """Gets the generation of this ObjectMeta.

        (Optional) A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.

        :return: The generation of this ObjectMeta.
        :rtype: int
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this ObjectMeta.

        (Optional) A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.

        :param generation: The generation of this ObjectMeta.
        :type generation: int
        """

        self._generation = generation

    @property
    def labels(self):
        """Gets the labels of this ObjectMeta.

        (Optional) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and routes. More info: https://kubernetes.io/docs/user-guide/labels

        :return: The labels of this ObjectMeta.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ObjectMeta.

        (Optional) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and routes. More info: https://kubernetes.io/docs/user-guide/labels

        :param labels: The labels of this ObjectMeta.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this ObjectMeta.

        Name must be unique within a namespace, within a Cloud Run region. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/user-guide/identifiers#names +optional

        :return: The name of this ObjectMeta.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObjectMeta.

        Name must be unique within a namespace, within a Cloud Run region. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/user-guide/identifiers#names +optional

        :param name: The name of this ObjectMeta.
        :type name: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this ObjectMeta.

        Namespace defines the space within each name must be unique, within a Cloud Run region. In Cloud Run the namespace must be equal to either the project ID or project number.

        :return: The namespace of this ObjectMeta.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ObjectMeta.

        Namespace defines the space within each name must be unique, within a Cloud Run region. In Cloud Run the namespace must be equal to either the project ID or project number.

        :param namespace: The namespace of this ObjectMeta.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def owner_references(self):
        """Gets the owner_references of this ObjectMeta.

        (Optional) Not supported by Cloud Run List of objects that own this object. If ALL objects in the list have been deleted, this object will be garbage collected.

        :return: The owner_references of this ObjectMeta.
        :rtype: List[OwnerReference]
        """
        return self._owner_references

    @owner_references.setter
    def owner_references(self, owner_references):
        """Sets the owner_references of this ObjectMeta.

        (Optional) Not supported by Cloud Run List of objects that own this object. If ALL objects in the list have been deleted, this object will be garbage collected.

        :param owner_references: The owner_references of this ObjectMeta.
        :type owner_references: List[OwnerReference]
        """

        self._owner_references = owner_references

    @property
    def resource_version(self):
        """Gets the resource_version of this ObjectMeta.

        Optional. An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server or omit the value to disable conflict-detection. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients or omitted. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency

        :return: The resource_version of this ObjectMeta.
        :rtype: str
        """
        return self._resource_version

    @resource_version.setter
    def resource_version(self, resource_version):
        """Sets the resource_version of this ObjectMeta.

        Optional. An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server or omit the value to disable conflict-detection. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients or omitted. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency

        :param resource_version: The resource_version of this ObjectMeta.
        :type resource_version: str
        """

        self._resource_version = resource_version

    @property
    def self_link(self):
        """Gets the self_link of this ObjectMeta.

        (Optional) SelfLink is a URL representing this object. Populated by the system. Read-only. string selfLink = 4;

        :return: The self_link of this ObjectMeta.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this ObjectMeta.

        (Optional) SelfLink is a URL representing this object. Populated by the system. Read-only. string selfLink = 4;

        :param self_link: The self_link of this ObjectMeta.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def uid(self):
        """Gets the uid of this ObjectMeta.

        (Optional) UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: https://kubernetes.io/docs/user-guide/identifiers#uids

        :return: The uid of this ObjectMeta.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this ObjectMeta.

        (Optional) UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info: https://kubernetes.io/docs/user-guide/identifiers#uids

        :param uid: The uid of this ObjectMeta.
        :type uid: str
        """

        self._uid = uid
