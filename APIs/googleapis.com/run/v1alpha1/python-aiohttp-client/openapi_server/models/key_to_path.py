# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeyToPath(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, mode: int=None, path: str=None):
        """KeyToPath - a model defined in OpenAPI

        :param key: The key of this KeyToPath.
        :param mode: The mode of this KeyToPath.
        :param path: The path of this KeyToPath.
        """
        self.openapi_types = {
            'key': str,
            'mode': int,
            'path': str
        }

        self.attribute_map = {
            'key': 'key',
            'mode': 'mode',
            'path': 'path'
        }

        self._key = key
        self._mode = mode
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyToPath':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyToPath of this KeyToPath.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this KeyToPath.

        The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version. The key to project.

        :return: The key of this KeyToPath.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this KeyToPath.

        The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version. The key to project.

        :param key: The key of this KeyToPath.
        :type key: str
        """

        self._key = key

    @property
    def mode(self):
        """Gets the mode of this KeyToPath.

        (Optional) Mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.

        :return: The mode of this KeyToPath.
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this KeyToPath.

        (Optional) Mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.

        :param mode: The mode of this KeyToPath.
        :type mode: int
        """

        self._mode = mode

    @property
    def path(self):
        """Gets the path of this KeyToPath.

        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.

        :return: The path of this KeyToPath.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this KeyToPath.

        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.

        :param path: The path of this KeyToPath.
        :type path: str
        """

        self._path = path
