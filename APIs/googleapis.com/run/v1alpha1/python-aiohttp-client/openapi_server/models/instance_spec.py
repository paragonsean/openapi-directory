# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container import Container
from openapi_server.models.volume import Volume
from openapi_server import util


class InstanceSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_deadline_seconds: str=None, containers: List[Container]=None, restart_policy: str=None, service_account_name: str=None, termination_grace_period_seconds: str=None, volumes: List[Volume]=None):
        """InstanceSpec - a model defined in OpenAPI

        :param active_deadline_seconds: The active_deadline_seconds of this InstanceSpec.
        :param containers: The containers of this InstanceSpec.
        :param restart_policy: The restart_policy of this InstanceSpec.
        :param service_account_name: The service_account_name of this InstanceSpec.
        :param termination_grace_period_seconds: The termination_grace_period_seconds of this InstanceSpec.
        :param volumes: The volumes of this InstanceSpec.
        """
        self.openapi_types = {
            'active_deadline_seconds': str,
            'containers': List[Container],
            'restart_policy': str,
            'service_account_name': str,
            'termination_grace_period_seconds': str,
            'volumes': List[Volume]
        }

        self.attribute_map = {
            'active_deadline_seconds': 'activeDeadlineSeconds',
            'containers': 'containers',
            'restart_policy': 'restartPolicy',
            'service_account_name': 'serviceAccountName',
            'termination_grace_period_seconds': 'terminationGracePeriodSeconds',
            'volumes': 'volumes'
        }

        self._active_deadline_seconds = active_deadline_seconds
        self._containers = containers
        self._restart_policy = restart_policy
        self._service_account_name = service_account_name
        self._termination_grace_period_seconds = termination_grace_period_seconds
        self._volumes = volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceSpec of this InstanceSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_deadline_seconds(self):
        """Gets the active_deadline_seconds of this InstanceSpec.

        Optional. Optional duration in seconds the instance may be active relative to StartTime before the system will actively try to mark it failed and kill associated containers. If set to zero, the system will never attempt to kill an instance based on time. Otherwise, value must be a positive integer. +optional

        :return: The active_deadline_seconds of this InstanceSpec.
        :rtype: str
        """
        return self._active_deadline_seconds

    @active_deadline_seconds.setter
    def active_deadline_seconds(self, active_deadline_seconds):
        """Sets the active_deadline_seconds of this InstanceSpec.

        Optional. Optional duration in seconds the instance may be active relative to StartTime before the system will actively try to mark it failed and kill associated containers. If set to zero, the system will never attempt to kill an instance based on time. Otherwise, value must be a positive integer. +optional

        :param active_deadline_seconds: The active_deadline_seconds of this InstanceSpec.
        :type active_deadline_seconds: str
        """

        self._active_deadline_seconds = active_deadline_seconds

    @property
    def containers(self):
        """Gets the containers of this InstanceSpec.

        Optional. List of containers belonging to the instance. We disallow a number of fields on this Container. Only a single container may be provided.

        :return: The containers of this InstanceSpec.
        :rtype: List[Container]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this InstanceSpec.

        Optional. List of containers belonging to the instance. We disallow a number of fields on this Container. Only a single container may be provided.

        :param containers: The containers of this InstanceSpec.
        :type containers: List[Container]
        """

        self._containers = containers

    @property
    def restart_policy(self):
        """Gets the restart_policy of this InstanceSpec.

        Optional. Restart policy for all containers within the instance. Allowed values are: - OnFailure: Instances will always be restarted on failure if the backoffLimit has not been reached. - Never: Instances are never restarted and all failures are permanent. Cannot be used if backoffLimit is set. +optional

        :return: The restart_policy of this InstanceSpec.
        :rtype: str
        """
        return self._restart_policy

    @restart_policy.setter
    def restart_policy(self, restart_policy):
        """Sets the restart_policy of this InstanceSpec.

        Optional. Restart policy for all containers within the instance. Allowed values are: - OnFailure: Instances will always be restarted on failure if the backoffLimit has not been reached. - Never: Instances are never restarted and all failures are permanent. Cannot be used if backoffLimit is set. +optional

        :param restart_policy: The restart_policy of this InstanceSpec.
        :type restart_policy: str
        """

        self._restart_policy = restart_policy

    @property
    def service_account_name(self):
        """Gets the service_account_name of this InstanceSpec.

        Optional. Email address of the IAM service account associated with the instance of a Job. The service account represents the identity of the running instance, and determines what permissions the instance has. If not provided, the instance will use the project's default service account. +optional

        :return: The service_account_name of this InstanceSpec.
        :rtype: str
        """
        return self._service_account_name

    @service_account_name.setter
    def service_account_name(self, service_account_name):
        """Sets the service_account_name of this InstanceSpec.

        Optional. Email address of the IAM service account associated with the instance of a Job. The service account represents the identity of the running instance, and determines what permissions the instance has. If not provided, the instance will use the project's default service account. +optional

        :param service_account_name: The service_account_name of this InstanceSpec.
        :type service_account_name: str
        """

        self._service_account_name = service_account_name

    @property
    def termination_grace_period_seconds(self):
        """Gets the termination_grace_period_seconds of this InstanceSpec.

        Optional. Optional duration in seconds the instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates delete immediately. The grace period is the duration in seconds after the processes running in the instance are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. +optional

        :return: The termination_grace_period_seconds of this InstanceSpec.
        :rtype: str
        """
        return self._termination_grace_period_seconds

    @termination_grace_period_seconds.setter
    def termination_grace_period_seconds(self, termination_grace_period_seconds):
        """Sets the termination_grace_period_seconds of this InstanceSpec.

        Optional. Optional duration in seconds the instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates delete immediately. The grace period is the duration in seconds after the processes running in the instance are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. +optional

        :param termination_grace_period_seconds: The termination_grace_period_seconds of this InstanceSpec.
        :type termination_grace_period_seconds: str
        """

        self._termination_grace_period_seconds = termination_grace_period_seconds

    @property
    def volumes(self):
        """Gets the volumes of this InstanceSpec.

        Optional. List of volumes that can be mounted by containers belonging to the instance. More info: https://kubernetes.io/docs/concepts/storage/volumes +optional

        :return: The volumes of this InstanceSpec.
        :rtype: List[Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this InstanceSpec.

        Optional. List of volumes that can be mounted by containers belonging to the instance. More info: https://kubernetes.io/docs/concepts/storage/volumes +optional

        :param volumes: The volumes of this InstanceSpec.
        :type volumes: List[Volume]
        """

        self._volumes = volumes
