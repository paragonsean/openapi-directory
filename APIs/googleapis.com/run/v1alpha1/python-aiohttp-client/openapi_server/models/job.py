# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_spec import JobSpec
from openapi_server.models.job_status import JobStatus
from openapi_server.models.object_meta import ObjectMeta
from openapi_server import util


class Job(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_version: str=None, kind: str=None, metadata: ObjectMeta=None, spec: JobSpec=None, status: JobStatus=None):
        """Job - a model defined in OpenAPI

        :param api_version: The api_version of this Job.
        :param kind: The kind of this Job.
        :param metadata: The metadata of this Job.
        :param spec: The spec of this Job.
        :param status: The status of this Job.
        """
        self.openapi_types = {
            'api_version': str,
            'kind': str,
            'metadata': ObjectMeta,
            'spec': JobSpec,
            'status': JobStatus
        }

        self.attribute_map = {
            'api_version': 'apiVersion',
            'kind': 'kind',
            'metadata': 'metadata',
            'spec': 'spec',
            'status': 'status'
        }

        self._api_version = api_version
        self._kind = kind
        self._metadata = metadata
        self._spec = spec
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Job of this Job.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version(self):
        """Gets the api_version of this Job.

        Optional. APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources +optional

        :return: The api_version of this Job.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this Job.

        Optional. APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources +optional

        :param api_version: The api_version of this Job.
        :type api_version: str
        """

        self._api_version = api_version

    @property
    def kind(self):
        """Gets the kind of this Job.

        Optional. Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds +optional

        :return: The kind of this Job.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Job.

        Optional. Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds +optional

        :param kind: The kind of this Job.
        :type kind: str
        """

        self._kind = kind

    @property
    def metadata(self):
        """Gets the metadata of this Job.


        :return: The metadata of this Job.
        :rtype: ObjectMeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Job.


        :param metadata: The metadata of this Job.
        :type metadata: ObjectMeta
        """

        self._metadata = metadata

    @property
    def spec(self):
        """Gets the spec of this Job.


        :return: The spec of this Job.
        :rtype: JobSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this Job.


        :param spec: The spec of this Job.
        :type spec: JobSpec
        """

        self._spec = spec

    @property
    def status(self):
        """Gets the status of this Job.


        :return: The status of this Job.
        :rtype: JobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.


        :param status: The status of this Job.
        :type status: JobStatus
        """

        self._status = status
