# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_transition_time: str=None, message: str=None, reason: str=None, severity: str=None, status: str=None, type: str=None):
        """JobCondition - a model defined in OpenAPI

        :param last_transition_time: The last_transition_time of this JobCondition.
        :param message: The message of this JobCondition.
        :param reason: The reason of this JobCondition.
        :param severity: The severity of this JobCondition.
        :param status: The status of this JobCondition.
        :param type: The type of this JobCondition.
        """
        self.openapi_types = {
            'last_transition_time': str,
            'message': str,
            'reason': str,
            'severity': str,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'last_transition_time': 'lastTransitionTime',
            'message': 'message',
            'reason': 'reason',
            'severity': 'severity',
            'status': 'status',
            'type': 'type'
        }

        self._last_transition_time = last_transition_time
        self._message = message
        self._reason = reason
        self._severity = severity
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobCondition of this JobCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_transition_time(self):
        """Gets the last_transition_time of this JobCondition.

        Optional. Last time the condition transitioned from one status to another.

        :return: The last_transition_time of this JobCondition.
        :rtype: str
        """
        return self._last_transition_time

    @last_transition_time.setter
    def last_transition_time(self, last_transition_time):
        """Sets the last_transition_time of this JobCondition.

        Optional. Last time the condition transitioned from one status to another.

        :param last_transition_time: The last_transition_time of this JobCondition.
        :type last_transition_time: str
        """

        self._last_transition_time = last_transition_time

    @property
    def message(self):
        """Gets the message of this JobCondition.

        Optional. Human readable message indicating details about the current status.

        :return: The message of this JobCondition.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this JobCondition.

        Optional. Human readable message indicating details about the current status.

        :param message: The message of this JobCondition.
        :type message: str
        """

        self._message = message

    @property
    def reason(self):
        """Gets the reason of this JobCondition.

        Optional. One-word CamelCase reason for the condition's last transition.

        :return: The reason of this JobCondition.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this JobCondition.

        Optional. One-word CamelCase reason for the condition's last transition.

        :param reason: The reason of this JobCondition.
        :type reason: str
        """

        self._reason = reason

    @property
    def severity(self):
        """Gets the severity of this JobCondition.

        Optional. How to interpret failures of this condition, one of Error, Warning, Info

        :return: The severity of this JobCondition.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this JobCondition.

        Optional. How to interpret failures of this condition, one of Error, Warning, Info

        :param severity: The severity of this JobCondition.
        :type severity: str
        """

        self._severity = severity

    @property
    def status(self):
        """Gets the status of this JobCondition.

        Required. Status of the condition, one of True, False, Unknown.

        :return: The status of this JobCondition.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobCondition.

        Required. Status of the condition, one of True, False, Unknown.

        :param status: The status of this JobCondition.
        :type status: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this JobCondition.

        Required. Type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types include: * \"Completed\": True when the Job has successfully completed. * \"Started\": True when the Job has successfully started running. * \"ResourcesAvailable\": True when underlying resources have been provisioned.

        :return: The type of this JobCondition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JobCondition.

        Required. Type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types include: * \"Completed\": True when the Job has successfully completed. * \"Started\": True when the Job has successfully started running. * \"ResourcesAvailable\": True when underlying resources have been provisioned.

        :param type: The type of this JobCondition.
        :type type: str
        """

        self._type = type
