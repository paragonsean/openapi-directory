# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.local_object_reference import LocalObjectReference
from openapi_server import util


class SecretKeySelector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, local_object_reference: LocalObjectReference=None, name: str=None, optional: bool=None):
        """SecretKeySelector - a model defined in OpenAPI

        :param key: The key of this SecretKeySelector.
        :param local_object_reference: The local_object_reference of this SecretKeySelector.
        :param name: The name of this SecretKeySelector.
        :param optional: The optional of this SecretKeySelector.
        """
        self.openapi_types = {
            'key': str,
            'local_object_reference': LocalObjectReference,
            'name': str,
            'optional': bool
        }

        self.attribute_map = {
            'key': 'key',
            'local_object_reference': 'localObjectReference',
            'name': 'name',
            'optional': 'optional'
        }

        self._key = key
        self._local_object_reference = local_object_reference
        self._name = name
        self._optional = optional

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecretKeySelector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecretKeySelector of this SecretKeySelector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this SecretKeySelector.

        A Cloud Secret Manager secret version. Must be 'latest' for the latest version or an integer for a specific version. The key of the secret to select from. Must be a valid secret key.

        :return: The key of this SecretKeySelector.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SecretKeySelector.

        A Cloud Secret Manager secret version. Must be 'latest' for the latest version or an integer for a specific version. The key of the secret to select from. Must be a valid secret key.

        :param key: The key of this SecretKeySelector.
        :type key: str
        """

        self._key = key

    @property
    def local_object_reference(self):
        """Gets the local_object_reference of this SecretKeySelector.


        :return: The local_object_reference of this SecretKeySelector.
        :rtype: LocalObjectReference
        """
        return self._local_object_reference

    @local_object_reference.setter
    def local_object_reference(self, local_object_reference):
        """Sets the local_object_reference of this SecretKeySelector.


        :param local_object_reference: The local_object_reference of this SecretKeySelector.
        :type local_object_reference: LocalObjectReference
        """

        self._local_object_reference = local_object_reference

    @property
    def name(self):
        """Gets the name of this SecretKeySelector.

        The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. The name of the secret in the pod's namespace to select from.

        :return: The name of this SecretKeySelector.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SecretKeySelector.

        The name of the secret in Cloud Secret Manager. By default, the secret is assumed to be in the same project. If the secret is in another project, you must define an alias. An alias definition has the form: :projects//secrets/. If multiple alias definitions are needed, they must be separated by commas. The alias definitions must be set on the run.googleapis.com/secrets annotation. The name of the secret in the pod's namespace to select from.

        :param name: The name of this SecretKeySelector.
        :type name: str
        """

        self._name = name

    @property
    def optional(self):
        """Gets the optional of this SecretKeySelector.

        (Optional) Specify whether the Secret or its key must be defined

        :return: The optional of this SecretKeySelector.
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this SecretKeySelector.

        (Optional) Specify whether the Secret or its key must be defined

        :param optional: The optional of this SecretKeySelector.
        :type optional: bool
        """

        self._optional = optional
