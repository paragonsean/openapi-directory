/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InstanceAttemptResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Instance represents the status of an instance of a Job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:09.463772-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceStatus {
  public static final String SERIALIZED_NAME_COMPLETION_TIME = "completionTime";
  @SerializedName(SERIALIZED_NAME_COMPLETION_TIME)
  private String completionTime;

  public static final String SERIALIZED_NAME_FAILED = "failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  private Integer failed;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_LAST_ATTEMPT_RESULT = "lastAttemptResult";
  @SerializedName(SERIALIZED_NAME_LAST_ATTEMPT_RESULT)
  private InstanceAttemptResult lastAttemptResult;

  public static final String SERIALIZED_NAME_LAST_EXIT_CODE = "lastExitCode";
  @SerializedName(SERIALIZED_NAME_LAST_EXIT_CODE)
  private Integer lastExitCode;

  public static final String SERIALIZED_NAME_RESTARTED = "restarted";
  @SerializedName(SERIALIZED_NAME_RESTARTED)
  private Integer restarted;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_SUCCEEDED = "succeeded";
  @SerializedName(SERIALIZED_NAME_SUCCEEDED)
  private Integer succeeded;

  public InstanceStatus() {
  }

  public InstanceStatus completionTime(String completionTime) {
    this.completionTime = completionTime;
    return this;
  }

  /**
   * Optional. Represents time when the instance was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
   * @return completionTime
   */
  @javax.annotation.Nullable
  public String getCompletionTime() {
    return completionTime;
  }

  public void setCompletionTime(String completionTime) {
    this.completionTime = completionTime;
  }


  public InstanceStatus failed(Integer failed) {
    this.failed = failed;
    return this;
  }

  /**
   * Optional. The number of times this instance exited with code &gt; 0; +optional
   * @return failed
   */
  @javax.annotation.Nullable
  public Integer getFailed() {
    return failed;
  }

  public void setFailed(Integer failed) {
    this.failed = failed;
  }


  public InstanceStatus index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * Required. Index of the instance, unique per Job, and beginning at 0.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public InstanceStatus lastAttemptResult(InstanceAttemptResult lastAttemptResult) {
    this.lastAttemptResult = lastAttemptResult;
    return this;
  }

  /**
   * Get lastAttemptResult
   * @return lastAttemptResult
   */
  @javax.annotation.Nullable
  public InstanceAttemptResult getLastAttemptResult() {
    return lastAttemptResult;
  }

  public void setLastAttemptResult(InstanceAttemptResult lastAttemptResult) {
    this.lastAttemptResult = lastAttemptResult;
  }


  public InstanceStatus lastExitCode(Integer lastExitCode) {
    this.lastExitCode = lastExitCode;
    return this;
  }

  /**
   * Optional. Last exit code seen for this instance. +optional
   * @return lastExitCode
   */
  @javax.annotation.Nullable
  public Integer getLastExitCode() {
    return lastExitCode;
  }

  public void setLastExitCode(Integer lastExitCode) {
    this.lastExitCode = lastExitCode;
  }


  public InstanceStatus restarted(Integer restarted) {
    this.restarted = restarted;
    return this;
  }

  /**
   * Optional. The number of times this instance was restarted. Instances are restarted according the restartPolicy configured in the Job template. +optional
   * @return restarted
   */
  @javax.annotation.Nullable
  public Integer getRestarted() {
    return restarted;
  }

  public void setRestarted(Integer restarted) {
    this.restarted = restarted;
  }


  public InstanceStatus startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Optional. Represents time when the instance was created by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public InstanceStatus succeeded(Integer succeeded) {
    this.succeeded = succeeded;
    return this;
  }

  /**
   * Optional. The number of times this instance exited with code &#x3D;&#x3D; 0. +optional
   * @return succeeded
   */
  @javax.annotation.Nullable
  public Integer getSucceeded() {
    return succeeded;
  }

  public void setSucceeded(Integer succeeded) {
    this.succeeded = succeeded;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceStatus instanceStatus = (InstanceStatus) o;
    return Objects.equals(this.completionTime, instanceStatus.completionTime) &&
        Objects.equals(this.failed, instanceStatus.failed) &&
        Objects.equals(this.index, instanceStatus.index) &&
        Objects.equals(this.lastAttemptResult, instanceStatus.lastAttemptResult) &&
        Objects.equals(this.lastExitCode, instanceStatus.lastExitCode) &&
        Objects.equals(this.restarted, instanceStatus.restarted) &&
        Objects.equals(this.startTime, instanceStatus.startTime) &&
        Objects.equals(this.succeeded, instanceStatus.succeeded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completionTime, failed, index, lastAttemptResult, lastExitCode, restarted, startTime, succeeded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceStatus {\n");
    sb.append("    completionTime: ").append(toIndentedString(completionTime)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    lastAttemptResult: ").append(toIndentedString(lastAttemptResult)).append("\n");
    sb.append("    lastExitCode: ").append(toIndentedString(lastExitCode)).append("\n");
    sb.append("    restarted: ").append(toIndentedString(restarted)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    succeeded: ").append(toIndentedString(succeeded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completionTime");
    openapiFields.add("failed");
    openapiFields.add("index");
    openapiFields.add("lastAttemptResult");
    openapiFields.add("lastExitCode");
    openapiFields.add("restarted");
    openapiFields.add("startTime");
    openapiFields.add("succeeded");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceStatus is not found in the empty JSON string", InstanceStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("completionTime") != null && !jsonObj.get("completionTime").isJsonNull()) && !jsonObj.get("completionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completionTime").toString()));
      }
      // validate the optional field `lastAttemptResult`
      if (jsonObj.get("lastAttemptResult") != null && !jsonObj.get("lastAttemptResult").isJsonNull()) {
        InstanceAttemptResult.validateJsonElement(jsonObj.get("lastAttemptResult"));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceStatus>() {
           @Override
           public void write(JsonWriter out, InstanceStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceStatus
   * @throws IOException if the JSON string is invalid with respect to InstanceStatus
   */
  public static InstanceStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceStatus.class);
  }

  /**
   * Convert an instance of InstanceStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

