/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContainerPort;
import org.openapitools.client.model.EnvFromSource;
import org.openapitools.client.model.EnvVar;
import org.openapitools.client.model.Probe;
import org.openapitools.client.model.ResourceRequirements;
import org.openapitools.client.model.SecurityContext;
import org.openapitools.client.model.VolumeMount;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Container
 */
public class ContainerTest {
    private final Container model = new Container();

    /**
     * Model tests for Container
     */
    @Test
    public void testContainer() {
        // TODO: test Container
    }

    /**
     * Test the property 'args'
     */
    @Test
    public void argsTest() {
        // TODO: test args
    }

    /**
     * Test the property 'command'
     */
    @Test
    public void commandTest() {
        // TODO: test command
    }

    /**
     * Test the property 'env'
     */
    @Test
    public void envTest() {
        // TODO: test env
    }

    /**
     * Test the property 'envFrom'
     */
    @Test
    public void envFromTest() {
        // TODO: test envFrom
    }

    /**
     * Test the property 'image'
     */
    @Test
    public void imageTest() {
        // TODO: test image
    }

    /**
     * Test the property 'imagePullPolicy'
     */
    @Test
    public void imagePullPolicyTest() {
        // TODO: test imagePullPolicy
    }

    /**
     * Test the property 'livenessProbe'
     */
    @Test
    public void livenessProbeTest() {
        // TODO: test livenessProbe
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'ports'
     */
    @Test
    public void portsTest() {
        // TODO: test ports
    }

    /**
     * Test the property 'readinessProbe'
     */
    @Test
    public void readinessProbeTest() {
        // TODO: test readinessProbe
    }

    /**
     * Test the property 'resources'
     */
    @Test
    public void resourcesTest() {
        // TODO: test resources
    }

    /**
     * Test the property 'securityContext'
     */
    @Test
    public void securityContextTest() {
        // TODO: test securityContext
    }

    /**
     * Test the property 'startupProbe'
     */
    @Test
    public void startupProbeTest() {
        // TODO: test startupProbe
    }

    /**
     * Test the property 'terminationMessagePath'
     */
    @Test
    public void terminationMessagePathTest() {
        // TODO: test terminationMessagePath
    }

    /**
     * Test the property 'terminationMessagePolicy'
     */
    @Test
    public void terminationMessagePolicyTest() {
        // TODO: test terminationMessagePolicy
    }

    /**
     * Test the property 'volumeMounts'
     */
    @Test
    public void volumeMountsTest() {
        // TODO: test volumeMounts
    }

    /**
     * Test the property 'workingDir'
     */
    @Test
    public void workingDirTest() {
        // TODO: test workingDir
    }

}
