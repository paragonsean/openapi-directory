/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContainerPort from './ContainerPort';
import EnvFromSource from './EnvFromSource';
import EnvVar from './EnvVar';
import Probe from './Probe';
import ResourceRequirements from './ResourceRequirements';
import SecurityContext from './SecurityContext';
import VolumeMount from './VolumeMount';

/**
 * The Container model module.
 * @module model/Container
 * @version v1alpha1
 */
class Container {
    /**
     * Constructs a new <code>Container</code>.
     * A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments may be supplied by the system to the container at runtime.
     * @alias module:model/Container
     */
    constructor() { 
        
        Container.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Container</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Container} obj Optional instance to populate.
     * @return {module:model/Container} The populated <code>Container</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Container();

            if (data.hasOwnProperty('args')) {
                obj['args'] = ApiClient.convertToType(data['args'], ['String']);
            }
            if (data.hasOwnProperty('command')) {
                obj['command'] = ApiClient.convertToType(data['command'], ['String']);
            }
            if (data.hasOwnProperty('env')) {
                obj['env'] = ApiClient.convertToType(data['env'], [EnvVar]);
            }
            if (data.hasOwnProperty('envFrom')) {
                obj['envFrom'] = ApiClient.convertToType(data['envFrom'], [EnvFromSource]);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('imagePullPolicy')) {
                obj['imagePullPolicy'] = ApiClient.convertToType(data['imagePullPolicy'], 'String');
            }
            if (data.hasOwnProperty('livenessProbe')) {
                obj['livenessProbe'] = Probe.constructFromObject(data['livenessProbe']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ports')) {
                obj['ports'] = ApiClient.convertToType(data['ports'], [ContainerPort]);
            }
            if (data.hasOwnProperty('readinessProbe')) {
                obj['readinessProbe'] = Probe.constructFromObject(data['readinessProbe']);
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ResourceRequirements.constructFromObject(data['resources']);
            }
            if (data.hasOwnProperty('securityContext')) {
                obj['securityContext'] = SecurityContext.constructFromObject(data['securityContext']);
            }
            if (data.hasOwnProperty('startupProbe')) {
                obj['startupProbe'] = Probe.constructFromObject(data['startupProbe']);
            }
            if (data.hasOwnProperty('terminationMessagePath')) {
                obj['terminationMessagePath'] = ApiClient.convertToType(data['terminationMessagePath'], 'String');
            }
            if (data.hasOwnProperty('terminationMessagePolicy')) {
                obj['terminationMessagePolicy'] = ApiClient.convertToType(data['terminationMessagePolicy'], 'String');
            }
            if (data.hasOwnProperty('volumeMounts')) {
                obj['volumeMounts'] = ApiClient.convertToType(data['volumeMounts'], [VolumeMount]);
            }
            if (data.hasOwnProperty('workingDir')) {
                obj['workingDir'] = ApiClient.convertToType(data['workingDir'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Container</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Container</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['args'])) {
            throw new Error("Expected the field `args` to be an array in the JSON data but got " + data['args']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['command'])) {
            throw new Error("Expected the field `command` to be an array in the JSON data but got " + data['command']);
        }
        if (data['env']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['env'])) {
                throw new Error("Expected the field `env` to be an array in the JSON data but got " + data['env']);
            }
            // validate the optional field `env` (array)
            for (const item of data['env']) {
                EnvVar.validateJSON(item);
            };
        }
        if (data['envFrom']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['envFrom'])) {
                throw new Error("Expected the field `envFrom` to be an array in the JSON data but got " + data['envFrom']);
            }
            // validate the optional field `envFrom` (array)
            for (const item of data['envFrom']) {
                EnvFromSource.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['imagePullPolicy'] && !(typeof data['imagePullPolicy'] === 'string' || data['imagePullPolicy'] instanceof String)) {
            throw new Error("Expected the field `imagePullPolicy` to be a primitive type in the JSON string but got " + data['imagePullPolicy']);
        }
        // validate the optional field `livenessProbe`
        if (data['livenessProbe']) { // data not null
          Probe.validateJSON(data['livenessProbe']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['ports']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ports'])) {
                throw new Error("Expected the field `ports` to be an array in the JSON data but got " + data['ports']);
            }
            // validate the optional field `ports` (array)
            for (const item of data['ports']) {
                ContainerPort.validateJSON(item);
            };
        }
        // validate the optional field `readinessProbe`
        if (data['readinessProbe']) { // data not null
          Probe.validateJSON(data['readinessProbe']);
        }
        // validate the optional field `resources`
        if (data['resources']) { // data not null
          ResourceRequirements.validateJSON(data['resources']);
        }
        // validate the optional field `securityContext`
        if (data['securityContext']) { // data not null
          SecurityContext.validateJSON(data['securityContext']);
        }
        // validate the optional field `startupProbe`
        if (data['startupProbe']) { // data not null
          Probe.validateJSON(data['startupProbe']);
        }
        // ensure the json data is a string
        if (data['terminationMessagePath'] && !(typeof data['terminationMessagePath'] === 'string' || data['terminationMessagePath'] instanceof String)) {
            throw new Error("Expected the field `terminationMessagePath` to be a primitive type in the JSON string but got " + data['terminationMessagePath']);
        }
        // ensure the json data is a string
        if (data['terminationMessagePolicy'] && !(typeof data['terminationMessagePolicy'] === 'string' || data['terminationMessagePolicy'] instanceof String)) {
            throw new Error("Expected the field `terminationMessagePolicy` to be a primitive type in the JSON string but got " + data['terminationMessagePolicy']);
        }
        if (data['volumeMounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['volumeMounts'])) {
                throw new Error("Expected the field `volumeMounts` to be an array in the JSON data but got " + data['volumeMounts']);
            }
            // validate the optional field `volumeMounts` (array)
            for (const item of data['volumeMounts']) {
                VolumeMount.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['workingDir'] && !(typeof data['workingDir'] === 'string' || data['workingDir'] instanceof String)) {
            throw new Error("Expected the field `workingDir` to be a primitive type in the JSON string but got " + data['workingDir']);
        }

        return true;
    }


}



/**
 * (Optional) Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
 * @member {Array.<String>} args
 */
Container.prototype['args'] = undefined;

/**
 * @member {Array.<String>} command
 */
Container.prototype['command'] = undefined;

/**
 * (Optional) List of environment variables to set in the container.
 * @member {Array.<module:model/EnvVar>} env
 */
Container.prototype['env'] = undefined;

/**
 * (Optional) List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
 * @member {Array.<module:model/EnvFromSource>} envFrom
 */
Container.prototype['envFrom'] = undefined;

/**
 * Only supports containers from Google Container Registry or Artifact Registry URL of the Container image. More info: https://kubernetes.io/docs/concepts/containers/images
 * @member {String} image
 */
Container.prototype['image'] = undefined;

/**
 * (Optional) Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
 * @member {String} imagePullPolicy
 */
Container.prototype['imagePullPolicy'] = undefined;

/**
 * @member {module:model/Probe} livenessProbe
 */
Container.prototype['livenessProbe'] = undefined;

/**
 * (Optional) Name of the container specified as a DNS_LABEL. Currently unused in Cloud Run. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names
 * @member {String} name
 */
Container.prototype['name'] = undefined;

/**
 * (Optional) List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
 * @member {Array.<module:model/ContainerPort>} ports
 */
Container.prototype['ports'] = undefined;

/**
 * @member {module:model/Probe} readinessProbe
 */
Container.prototype['readinessProbe'] = undefined;

/**
 * @member {module:model/ResourceRequirements} resources
 */
Container.prototype['resources'] = undefined;

/**
 * @member {module:model/SecurityContext} securityContext
 */
Container.prototype['securityContext'] = undefined;

/**
 * @member {module:model/Probe} startupProbe
 */
Container.prototype['startupProbe'] = undefined;

/**
 * (Optional) Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log.
 * @member {String} terminationMessagePath
 */
Container.prototype['terminationMessagePath'] = undefined;

/**
 * (Optional) Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
 * @member {String} terminationMessagePolicy
 */
Container.prototype['terminationMessagePolicy'] = undefined;

/**
 * (Optional) Volume to mount into the container's filesystem. Only supports SecretVolumeSources. Pod volumes to mount into the container's filesystem.
 * @member {Array.<module:model/VolumeMount>} volumeMounts
 */
Container.prototype['volumeMounts'] = undefined;

/**
 * (Optional) Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
 * @member {String} workingDir
 */
Container.prototype['workingDir'] = undefined;






export default Container;

