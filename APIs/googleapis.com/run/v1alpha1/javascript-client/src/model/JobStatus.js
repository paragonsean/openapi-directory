/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InstanceStatus from './InstanceStatus';
import JobCondition from './JobCondition';

/**
 * The JobStatus model module.
 * @module model/JobStatus
 * @version v1alpha1
 */
class JobStatus {
    /**
     * Constructs a new <code>JobStatus</code>.
     * JobStatus represents the current state of a Job.
     * @alias module:model/JobStatus
     */
    constructor() { 
        
        JobStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JobStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobStatus} obj Optional instance to populate.
     * @return {module:model/JobStatus} The populated <code>JobStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobStatus();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Number');
            }
            if (data.hasOwnProperty('completionTime')) {
                obj['completionTime'] = ApiClient.convertToType(data['completionTime'], 'String');
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [JobCondition]);
            }
            if (data.hasOwnProperty('failed')) {
                obj['failed'] = ApiClient.convertToType(data['failed'], 'Number');
            }
            if (data.hasOwnProperty('imageDigest')) {
                obj['imageDigest'] = ApiClient.convertToType(data['imageDigest'], 'String');
            }
            if (data.hasOwnProperty('instances')) {
                obj['instances'] = ApiClient.convertToType(data['instances'], [InstanceStatus]);
            }
            if (data.hasOwnProperty('observedGeneration')) {
                obj['observedGeneration'] = ApiClient.convertToType(data['observedGeneration'], 'Number');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('succeeded')) {
                obj['succeeded'] = ApiClient.convertToType(data['succeeded'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobStatus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['completionTime'] && !(typeof data['completionTime'] === 'string' || data['completionTime'] instanceof String)) {
            throw new Error("Expected the field `completionTime` to be a primitive type in the JSON string but got " + data['completionTime']);
        }
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                JobCondition.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['imageDigest'] && !(typeof data['imageDigest'] === 'string' || data['imageDigest'] instanceof String)) {
            throw new Error("Expected the field `imageDigest` to be a primitive type in the JSON string but got " + data['imageDigest']);
        }
        if (data['instances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['instances'])) {
                throw new Error("Expected the field `instances` to be an array in the JSON data but got " + data['instances']);
            }
            // validate the optional field `instances` (array)
            for (const item of data['instances']) {
                InstanceStatus.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }

        return true;
    }


}



/**
 * Optional. The number of actively running instances. +optional
 * @member {Number} active
 */
JobStatus.prototype['active'] = undefined;

/**
 * Optional. Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
 * @member {String} completionTime
 */
JobStatus.prototype['completionTime'] = undefined;

/**
 * Optional. The latest available observations of a job's current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
 * @member {Array.<module:model/JobCondition>} conditions
 */
JobStatus.prototype['conditions'] = undefined;

/**
 * Optional. The number of instances which reached phase Failed. +optional
 * @member {Number} failed
 */
JobStatus.prototype['failed'] = undefined;

/**
 * Optional. ImageDigest holds the resolved digest for the image specified within .Spec.Template.Spec.Container.Image. The digest is resolved during the creation of the Job. This field holds the digest value regardless of whether a tag or digest was originally specified in the Container object.
 * @member {String} imageDigest
 */
JobStatus.prototype['imageDigest'] = undefined;

/**
 * Optional. Status of completed, failed, and running instances. +optional
 * @member {Array.<module:model/InstanceStatus>} instances
 */
JobStatus.prototype['instances'] = undefined;

/**
 * Optional. The 'generation' of the job that was last processed by the controller.
 * @member {Number} observedGeneration
 */
JobStatus.prototype['observedGeneration'] = undefined;

/**
 * Optional. Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. +optional
 * @member {String} startTime
 */
JobStatus.prototype['startTime'] = undefined;

/**
 * Optional. The number of instances which reached phase Succeeded. +optional
 * @member {Number} succeeded
 */
JobStatus.prototype['succeeded'] = undefined;






export default JobStatus;

