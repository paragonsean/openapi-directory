/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Container from './Container';
import Volume from './Volume';

/**
 * The InstanceSpec model module.
 * @module model/InstanceSpec
 * @version v1alpha1
 */
class InstanceSpec {
    /**
     * Constructs a new <code>InstanceSpec</code>.
     * InstanceSpec is a description of an instance.
     * @alias module:model/InstanceSpec
     */
    constructor() { 
        
        InstanceSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InstanceSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstanceSpec} obj Optional instance to populate.
     * @return {module:model/InstanceSpec} The populated <code>InstanceSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstanceSpec();

            if (data.hasOwnProperty('activeDeadlineSeconds')) {
                obj['activeDeadlineSeconds'] = ApiClient.convertToType(data['activeDeadlineSeconds'], 'String');
            }
            if (data.hasOwnProperty('containers')) {
                obj['containers'] = ApiClient.convertToType(data['containers'], [Container]);
            }
            if (data.hasOwnProperty('restartPolicy')) {
                obj['restartPolicy'] = ApiClient.convertToType(data['restartPolicy'], 'String');
            }
            if (data.hasOwnProperty('serviceAccountName')) {
                obj['serviceAccountName'] = ApiClient.convertToType(data['serviceAccountName'], 'String');
            }
            if (data.hasOwnProperty('terminationGracePeriodSeconds')) {
                obj['terminationGracePeriodSeconds'] = ApiClient.convertToType(data['terminationGracePeriodSeconds'], 'String');
            }
            if (data.hasOwnProperty('volumes')) {
                obj['volumes'] = ApiClient.convertToType(data['volumes'], [Volume]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InstanceSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InstanceSpec</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['activeDeadlineSeconds'] && !(typeof data['activeDeadlineSeconds'] === 'string' || data['activeDeadlineSeconds'] instanceof String)) {
            throw new Error("Expected the field `activeDeadlineSeconds` to be a primitive type in the JSON string but got " + data['activeDeadlineSeconds']);
        }
        if (data['containers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['containers'])) {
                throw new Error("Expected the field `containers` to be an array in the JSON data but got " + data['containers']);
            }
            // validate the optional field `containers` (array)
            for (const item of data['containers']) {
                Container.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['restartPolicy'] && !(typeof data['restartPolicy'] === 'string' || data['restartPolicy'] instanceof String)) {
            throw new Error("Expected the field `restartPolicy` to be a primitive type in the JSON string but got " + data['restartPolicy']);
        }
        // ensure the json data is a string
        if (data['serviceAccountName'] && !(typeof data['serviceAccountName'] === 'string' || data['serviceAccountName'] instanceof String)) {
            throw new Error("Expected the field `serviceAccountName` to be a primitive type in the JSON string but got " + data['serviceAccountName']);
        }
        // ensure the json data is a string
        if (data['terminationGracePeriodSeconds'] && !(typeof data['terminationGracePeriodSeconds'] === 'string' || data['terminationGracePeriodSeconds'] instanceof String)) {
            throw new Error("Expected the field `terminationGracePeriodSeconds` to be a primitive type in the JSON string but got " + data['terminationGracePeriodSeconds']);
        }
        if (data['volumes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['volumes'])) {
                throw new Error("Expected the field `volumes` to be an array in the JSON data but got " + data['volumes']);
            }
            // validate the optional field `volumes` (array)
            for (const item of data['volumes']) {
                Volume.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Optional. Optional duration in seconds the instance may be active relative to StartTime before the system will actively try to mark it failed and kill associated containers. If set to zero, the system will never attempt to kill an instance based on time. Otherwise, value must be a positive integer. +optional
 * @member {String} activeDeadlineSeconds
 */
InstanceSpec.prototype['activeDeadlineSeconds'] = undefined;

/**
 * Optional. List of containers belonging to the instance. We disallow a number of fields on this Container. Only a single container may be provided.
 * @member {Array.<module:model/Container>} containers
 */
InstanceSpec.prototype['containers'] = undefined;

/**
 * Optional. Restart policy for all containers within the instance. Allowed values are: - OnFailure: Instances will always be restarted on failure if the backoffLimit has not been reached. - Never: Instances are never restarted and all failures are permanent. Cannot be used if backoffLimit is set. +optional
 * @member {String} restartPolicy
 */
InstanceSpec.prototype['restartPolicy'] = undefined;

/**
 * Optional. Email address of the IAM service account associated with the instance of a Job. The service account represents the identity of the running instance, and determines what permissions the instance has. If not provided, the instance will use the project's default service account. +optional
 * @member {String} serviceAccountName
 */
InstanceSpec.prototype['serviceAccountName'] = undefined;

/**
 * Optional. Optional duration in seconds the instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates delete immediately. The grace period is the duration in seconds after the processes running in the instance are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. +optional
 * @member {String} terminationGracePeriodSeconds
 */
InstanceSpec.prototype['terminationGracePeriodSeconds'] = undefined;

/**
 * Optional. List of volumes that can be mounted by containers belonging to the instance. More info: https://kubernetes.io/docs/concepts/storage/volumes +optional
 * @member {Array.<module:model/Volume>} volumes
 */
InstanceSpec.prototype['volumes'] = undefined;






export default InstanceSpec;

