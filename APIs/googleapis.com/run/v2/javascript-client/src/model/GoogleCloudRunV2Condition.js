/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudRunV2Condition model module.
 * @module model/GoogleCloudRunV2Condition
 * @version v2
 */
class GoogleCloudRunV2Condition {
    /**
     * Constructs a new <code>GoogleCloudRunV2Condition</code>.
     * Defines a status condition for a resource.
     * @alias module:model/GoogleCloudRunV2Condition
     */
    constructor() { 
        
        GoogleCloudRunV2Condition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudRunV2Condition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudRunV2Condition} obj Optional instance to populate.
     * @return {module:model/GoogleCloudRunV2Condition} The populated <code>GoogleCloudRunV2Condition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudRunV2Condition();

            if (data.hasOwnProperty('executionReason')) {
                obj['executionReason'] = ApiClient.convertToType(data['executionReason'], 'String');
            }
            if (data.hasOwnProperty('lastTransitionTime')) {
                obj['lastTransitionTime'] = ApiClient.convertToType(data['lastTransitionTime'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('revisionReason')) {
                obj['revisionReason'] = ApiClient.convertToType(data['revisionReason'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudRunV2Condition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudRunV2Condition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['executionReason'] && !(typeof data['executionReason'] === 'string' || data['executionReason'] instanceof String)) {
            throw new Error("Expected the field `executionReason` to be a primitive type in the JSON string but got " + data['executionReason']);
        }
        // ensure the json data is a string
        if (data['lastTransitionTime'] && !(typeof data['lastTransitionTime'] === 'string' || data['lastTransitionTime'] instanceof String)) {
            throw new Error("Expected the field `lastTransitionTime` to be a primitive type in the JSON string but got " + data['lastTransitionTime']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['revisionReason'] && !(typeof data['revisionReason'] === 'string' || data['revisionReason'] instanceof String)) {
            throw new Error("Expected the field `revisionReason` to be a primitive type in the JSON string but got " + data['revisionReason']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * A reason for the execution condition.
 * @member {module:model/GoogleCloudRunV2Condition.ExecutionReasonEnum} executionReason
 */
GoogleCloudRunV2Condition.prototype['executionReason'] = undefined;

/**
 * Last time the condition transitioned from one status to another.
 * @member {String} lastTransitionTime
 */
GoogleCloudRunV2Condition.prototype['lastTransitionTime'] = undefined;

/**
 * Human readable message indicating details about the current status.
 * @member {String} message
 */
GoogleCloudRunV2Condition.prototype['message'] = undefined;

/**
 * A common (service-level) reason for this condition.
 * @member {module:model/GoogleCloudRunV2Condition.ReasonEnum} reason
 */
GoogleCloudRunV2Condition.prototype['reason'] = undefined;

/**
 * A reason for the revision condition.
 * @member {module:model/GoogleCloudRunV2Condition.RevisionReasonEnum} revisionReason
 */
GoogleCloudRunV2Condition.prototype['revisionReason'] = undefined;

/**
 * How to interpret failures of this condition, one of Error, Warning, Info
 * @member {module:model/GoogleCloudRunV2Condition.SeverityEnum} severity
 */
GoogleCloudRunV2Condition.prototype['severity'] = undefined;

/**
 * State of the condition.
 * @member {module:model/GoogleCloudRunV2Condition.StateEnum} state
 */
GoogleCloudRunV2Condition.prototype['state'] = undefined;

/**
 * type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * \"Ready\": True when the Resource is ready.
 * @member {String} type
 */
GoogleCloudRunV2Condition.prototype['type'] = undefined;





/**
 * Allowed values for the <code>executionReason</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudRunV2Condition['ExecutionReasonEnum'] = {

    /**
     * value: "EXECUTION_REASON_UNDEFINED"
     * @const
     */
    "EXECUTION_REASON_UNDEFINED": "EXECUTION_REASON_UNDEFINED",

    /**
     * value: "JOB_STATUS_SERVICE_POLLING_ERROR"
     * @const
     */
    "JOB_STATUS_SERVICE_POLLING_ERROR": "JOB_STATUS_SERVICE_POLLING_ERROR",

    /**
     * value: "NON_ZERO_EXIT_CODE"
     * @const
     */
    "NON_ZERO_EXIT_CODE": "NON_ZERO_EXIT_CODE",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "CANCELLING"
     * @const
     */
    "CANCELLING": "CANCELLING",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};


/**
 * Allowed values for the <code>reason</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudRunV2Condition['ReasonEnum'] = {

    /**
     * value: "COMMON_REASON_UNDEFINED"
     * @const
     */
    "COMMON_REASON_UNDEFINED": "COMMON_REASON_UNDEFINED",

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "REVISION_FAILED"
     * @const
     */
    "REVISION_FAILED": "REVISION_FAILED",

    /**
     * value: "PROGRESS_DEADLINE_EXCEEDED"
     * @const
     */
    "PROGRESS_DEADLINE_EXCEEDED": "PROGRESS_DEADLINE_EXCEEDED",

    /**
     * value: "CONTAINER_MISSING"
     * @const
     */
    "CONTAINER_MISSING": "CONTAINER_MISSING",

    /**
     * value: "CONTAINER_PERMISSION_DENIED"
     * @const
     */
    "CONTAINER_PERMISSION_DENIED": "CONTAINER_PERMISSION_DENIED",

    /**
     * value: "CONTAINER_IMAGE_UNAUTHORIZED"
     * @const
     */
    "CONTAINER_IMAGE_UNAUTHORIZED": "CONTAINER_IMAGE_UNAUTHORIZED",

    /**
     * value: "CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED"
     * @const
     */
    "CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED": "CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED",

    /**
     * value: "ENCRYPTION_KEY_PERMISSION_DENIED"
     * @const
     */
    "ENCRYPTION_KEY_PERMISSION_DENIED": "ENCRYPTION_KEY_PERMISSION_DENIED",

    /**
     * value: "ENCRYPTION_KEY_CHECK_FAILED"
     * @const
     */
    "ENCRYPTION_KEY_CHECK_FAILED": "ENCRYPTION_KEY_CHECK_FAILED",

    /**
     * value: "SECRETS_ACCESS_CHECK_FAILED"
     * @const
     */
    "SECRETS_ACCESS_CHECK_FAILED": "SECRETS_ACCESS_CHECK_FAILED",

    /**
     * value: "WAITING_FOR_OPERATION"
     * @const
     */
    "WAITING_FOR_OPERATION": "WAITING_FOR_OPERATION",

    /**
     * value: "IMMEDIATE_RETRY"
     * @const
     */
    "IMMEDIATE_RETRY": "IMMEDIATE_RETRY",

    /**
     * value: "POSTPONED_RETRY"
     * @const
     */
    "POSTPONED_RETRY": "POSTPONED_RETRY",

    /**
     * value: "INTERNAL"
     * @const
     */
    "INTERNAL": "INTERNAL"
};


/**
 * Allowed values for the <code>revisionReason</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudRunV2Condition['RevisionReasonEnum'] = {

    /**
     * value: "REVISION_REASON_UNDEFINED"
     * @const
     */
    "REVISION_REASON_UNDEFINED": "REVISION_REASON_UNDEFINED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "RESERVE"
     * @const
     */
    "RESERVE": "RESERVE",

    /**
     * value: "RETIRED"
     * @const
     */
    "RETIRED": "RETIRED",

    /**
     * value: "RETIRING"
     * @const
     */
    "RETIRING": "RETIRING",

    /**
     * value: "RECREATING"
     * @const
     */
    "RECREATING": "RECREATING",

    /**
     * value: "HEALTH_CHECK_CONTAINER_ERROR"
     * @const
     */
    "HEALTH_CHECK_CONTAINER_ERROR": "HEALTH_CHECK_CONTAINER_ERROR",

    /**
     * value: "CUSTOMIZED_PATH_RESPONSE_PENDING"
     * @const
     */
    "CUSTOMIZED_PATH_RESPONSE_PENDING": "CUSTOMIZED_PATH_RESPONSE_PENDING",

    /**
     * value: "MIN_INSTANCES_NOT_PROVISIONED"
     * @const
     */
    "MIN_INSTANCES_NOT_PROVISIONED": "MIN_INSTANCES_NOT_PROVISIONED",

    /**
     * value: "ACTIVE_REVISION_LIMIT_REACHED"
     * @const
     */
    "ACTIVE_REVISION_LIMIT_REACHED": "ACTIVE_REVISION_LIMIT_REACHED",

    /**
     * value: "NO_DEPLOYMENT"
     * @const
     */
    "NO_DEPLOYMENT": "NO_DEPLOYMENT",

    /**
     * value: "HEALTH_CHECK_SKIPPED"
     * @const
     */
    "HEALTH_CHECK_SKIPPED": "HEALTH_CHECK_SKIPPED",

    /**
     * value: "MIN_INSTANCES_WARMING"
     * @const
     */
    "MIN_INSTANCES_WARMING": "MIN_INSTANCES_WARMING"
};


/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudRunV2Condition['SeverityEnum'] = {

    /**
     * value: "SEVERITY_UNSPECIFIED"
     * @const
     */
    "SEVERITY_UNSPECIFIED": "SEVERITY_UNSPECIFIED",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "WARNING"
     * @const
     */
    "WARNING": "WARNING",

    /**
     * value: "INFO"
     * @const
     */
    "INFO": "INFO"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudRunV2Condition['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CONDITION_PENDING"
     * @const
     */
    "CONDITION_PENDING": "CONDITION_PENDING",

    /**
     * value: "CONDITION_RECONCILING"
     * @const
     */
    "CONDITION_RECONCILING": "CONDITION_RECONCILING",

    /**
     * value: "CONDITION_FAILED"
     * @const
     */
    "CONDITION_FAILED": "CONDITION_FAILED",

    /**
     * value: "CONDITION_SUCCEEDED"
     * @const
     */
    "CONDITION_SUCCEEDED": "CONDITION_SUCCEEDED"
};



export default GoogleCloudRunV2Condition;

