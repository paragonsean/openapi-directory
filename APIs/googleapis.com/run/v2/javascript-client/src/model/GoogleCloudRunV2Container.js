/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudRunV2ContainerPort from './GoogleCloudRunV2ContainerPort';
import GoogleCloudRunV2EnvVar from './GoogleCloudRunV2EnvVar';
import GoogleCloudRunV2Probe from './GoogleCloudRunV2Probe';
import GoogleCloudRunV2ResourceRequirements from './GoogleCloudRunV2ResourceRequirements';
import GoogleCloudRunV2VolumeMount from './GoogleCloudRunV2VolumeMount';

/**
 * The GoogleCloudRunV2Container model module.
 * @module model/GoogleCloudRunV2Container
 * @version v2
 */
class GoogleCloudRunV2Container {
    /**
     * Constructs a new <code>GoogleCloudRunV2Container</code>.
     * A single application container. This specifies both the container to run, the command to run in the container and the arguments to supply to it. Note that additional arguments can be supplied by the system to the container at runtime.
     * @alias module:model/GoogleCloudRunV2Container
     */
    constructor() { 
        
        GoogleCloudRunV2Container.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudRunV2Container</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudRunV2Container} obj Optional instance to populate.
     * @return {module:model/GoogleCloudRunV2Container} The populated <code>GoogleCloudRunV2Container</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudRunV2Container();

            if (data.hasOwnProperty('args')) {
                obj['args'] = ApiClient.convertToType(data['args'], ['String']);
            }
            if (data.hasOwnProperty('command')) {
                obj['command'] = ApiClient.convertToType(data['command'], ['String']);
            }
            if (data.hasOwnProperty('dependsOn')) {
                obj['dependsOn'] = ApiClient.convertToType(data['dependsOn'], ['String']);
            }
            if (data.hasOwnProperty('env')) {
                obj['env'] = ApiClient.convertToType(data['env'], [GoogleCloudRunV2EnvVar]);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('livenessProbe')) {
                obj['livenessProbe'] = GoogleCloudRunV2Probe.constructFromObject(data['livenessProbe']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ports')) {
                obj['ports'] = ApiClient.convertToType(data['ports'], [GoogleCloudRunV2ContainerPort]);
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = GoogleCloudRunV2ResourceRequirements.constructFromObject(data['resources']);
            }
            if (data.hasOwnProperty('startupProbe')) {
                obj['startupProbe'] = GoogleCloudRunV2Probe.constructFromObject(data['startupProbe']);
            }
            if (data.hasOwnProperty('volumeMounts')) {
                obj['volumeMounts'] = ApiClient.convertToType(data['volumeMounts'], [GoogleCloudRunV2VolumeMount]);
            }
            if (data.hasOwnProperty('workingDir')) {
                obj['workingDir'] = ApiClient.convertToType(data['workingDir'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudRunV2Container</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudRunV2Container</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['args'])) {
            throw new Error("Expected the field `args` to be an array in the JSON data but got " + data['args']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['command'])) {
            throw new Error("Expected the field `command` to be an array in the JSON data but got " + data['command']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dependsOn'])) {
            throw new Error("Expected the field `dependsOn` to be an array in the JSON data but got " + data['dependsOn']);
        }
        if (data['env']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['env'])) {
                throw new Error("Expected the field `env` to be an array in the JSON data but got " + data['env']);
            }
            // validate the optional field `env` (array)
            for (const item of data['env']) {
                GoogleCloudRunV2EnvVar.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // validate the optional field `livenessProbe`
        if (data['livenessProbe']) { // data not null
          GoogleCloudRunV2Probe.validateJSON(data['livenessProbe']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['ports']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ports'])) {
                throw new Error("Expected the field `ports` to be an array in the JSON data but got " + data['ports']);
            }
            // validate the optional field `ports` (array)
            for (const item of data['ports']) {
                GoogleCloudRunV2ContainerPort.validateJSON(item);
            };
        }
        // validate the optional field `resources`
        if (data['resources']) { // data not null
          GoogleCloudRunV2ResourceRequirements.validateJSON(data['resources']);
        }
        // validate the optional field `startupProbe`
        if (data['startupProbe']) { // data not null
          GoogleCloudRunV2Probe.validateJSON(data['startupProbe']);
        }
        if (data['volumeMounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['volumeMounts'])) {
                throw new Error("Expected the field `volumeMounts` to be an array in the JSON data but got " + data['volumeMounts']);
            }
            // validate the optional field `volumeMounts` (array)
            for (const item of data['volumeMounts']) {
                GoogleCloudRunV2VolumeMount.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['workingDir'] && !(typeof data['workingDir'] === 'string' || data['workingDir'] instanceof String)) {
            throw new Error("Expected the field `workingDir` to be a primitive type in the JSON string but got " + data['workingDir']);
        }

        return true;
    }


}



/**
 * Arguments to the entrypoint. The docker image's CMD is used if this is not provided.
 * @member {Array.<String>} args
 */
GoogleCloudRunV2Container.prototype['args'] = undefined;

/**
 * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided.
 * @member {Array.<String>} command
 */
GoogleCloudRunV2Container.prototype['command'] = undefined;

/**
 * Names of the containers that must start before this container.
 * @member {Array.<String>} dependsOn
 */
GoogleCloudRunV2Container.prototype['dependsOn'] = undefined;

/**
 * List of environment variables to set in the container.
 * @member {Array.<module:model/GoogleCloudRunV2EnvVar>} env
 */
GoogleCloudRunV2Container.prototype['env'] = undefined;

/**
 * Required. Name of the container image in Dockerhub, Google Artifact Registry, or Google Container Registry. If the host is not provided, Dockerhub is assumed.
 * @member {String} image
 */
GoogleCloudRunV2Container.prototype['image'] = undefined;

/**
 * @member {module:model/GoogleCloudRunV2Probe} livenessProbe
 */
GoogleCloudRunV2Container.prototype['livenessProbe'] = undefined;

/**
 * Name of the container specified as a DNS_LABEL (RFC 1123).
 * @member {String} name
 */
GoogleCloudRunV2Container.prototype['name'] = undefined;

/**
 * List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.
 * @member {Array.<module:model/GoogleCloudRunV2ContainerPort>} ports
 */
GoogleCloudRunV2Container.prototype['ports'] = undefined;

/**
 * @member {module:model/GoogleCloudRunV2ResourceRequirements} resources
 */
GoogleCloudRunV2Container.prototype['resources'] = undefined;

/**
 * @member {module:model/GoogleCloudRunV2Probe} startupProbe
 */
GoogleCloudRunV2Container.prototype['startupProbe'] = undefined;

/**
 * Volume to mount into the container's filesystem.
 * @member {Array.<module:model/GoogleCloudRunV2VolumeMount>} volumeMounts
 */
GoogleCloudRunV2Container.prototype['volumeMounts'] = undefined;

/**
 * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.
 * @member {String} workingDir
 */
GoogleCloudRunV2Container.prototype['workingDir'] = undefined;






export default GoogleCloudRunV2Container;

