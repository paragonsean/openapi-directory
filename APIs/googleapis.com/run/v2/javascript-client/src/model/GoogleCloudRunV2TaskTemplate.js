/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudRunV2Container from './GoogleCloudRunV2Container';
import GoogleCloudRunV2Volume from './GoogleCloudRunV2Volume';
import GoogleCloudRunV2VpcAccess from './GoogleCloudRunV2VpcAccess';

/**
 * The GoogleCloudRunV2TaskTemplate model module.
 * @module model/GoogleCloudRunV2TaskTemplate
 * @version v2
 */
class GoogleCloudRunV2TaskTemplate {
    /**
     * Constructs a new <code>GoogleCloudRunV2TaskTemplate</code>.
     * TaskTemplate describes the data a task should have when created from a template.
     * @alias module:model/GoogleCloudRunV2TaskTemplate
     */
    constructor() { 
        
        GoogleCloudRunV2TaskTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudRunV2TaskTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudRunV2TaskTemplate} obj Optional instance to populate.
     * @return {module:model/GoogleCloudRunV2TaskTemplate} The populated <code>GoogleCloudRunV2TaskTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudRunV2TaskTemplate();

            if (data.hasOwnProperty('containers')) {
                obj['containers'] = ApiClient.convertToType(data['containers'], [GoogleCloudRunV2Container]);
            }
            if (data.hasOwnProperty('encryptionKey')) {
                obj['encryptionKey'] = ApiClient.convertToType(data['encryptionKey'], 'String');
            }
            if (data.hasOwnProperty('executionEnvironment')) {
                obj['executionEnvironment'] = ApiClient.convertToType(data['executionEnvironment'], 'String');
            }
            if (data.hasOwnProperty('maxRetries')) {
                obj['maxRetries'] = ApiClient.convertToType(data['maxRetries'], 'Number');
            }
            if (data.hasOwnProperty('serviceAccount')) {
                obj['serviceAccount'] = ApiClient.convertToType(data['serviceAccount'], 'String');
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'String');
            }
            if (data.hasOwnProperty('volumes')) {
                obj['volumes'] = ApiClient.convertToType(data['volumes'], [GoogleCloudRunV2Volume]);
            }
            if (data.hasOwnProperty('vpcAccess')) {
                obj['vpcAccess'] = GoogleCloudRunV2VpcAccess.constructFromObject(data['vpcAccess']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudRunV2TaskTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudRunV2TaskTemplate</code>.
     */
    static validateJSON(data) {
        if (data['containers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['containers'])) {
                throw new Error("Expected the field `containers` to be an array in the JSON data but got " + data['containers']);
            }
            // validate the optional field `containers` (array)
            for (const item of data['containers']) {
                GoogleCloudRunV2Container.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['encryptionKey'] && !(typeof data['encryptionKey'] === 'string' || data['encryptionKey'] instanceof String)) {
            throw new Error("Expected the field `encryptionKey` to be a primitive type in the JSON string but got " + data['encryptionKey']);
        }
        // ensure the json data is a string
        if (data['executionEnvironment'] && !(typeof data['executionEnvironment'] === 'string' || data['executionEnvironment'] instanceof String)) {
            throw new Error("Expected the field `executionEnvironment` to be a primitive type in the JSON string but got " + data['executionEnvironment']);
        }
        // ensure the json data is a string
        if (data['serviceAccount'] && !(typeof data['serviceAccount'] === 'string' || data['serviceAccount'] instanceof String)) {
            throw new Error("Expected the field `serviceAccount` to be a primitive type in the JSON string but got " + data['serviceAccount']);
        }
        // ensure the json data is a string
        if (data['timeout'] && !(typeof data['timeout'] === 'string' || data['timeout'] instanceof String)) {
            throw new Error("Expected the field `timeout` to be a primitive type in the JSON string but got " + data['timeout']);
        }
        if (data['volumes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['volumes'])) {
                throw new Error("Expected the field `volumes` to be an array in the JSON data but got " + data['volumes']);
            }
            // validate the optional field `volumes` (array)
            for (const item of data['volumes']) {
                GoogleCloudRunV2Volume.validateJSON(item);
            };
        }
        // validate the optional field `vpcAccess`
        if (data['vpcAccess']) { // data not null
          GoogleCloudRunV2VpcAccess.validateJSON(data['vpcAccess']);
        }

        return true;
    }


}



/**
 * Holds the single container that defines the unit of execution for this task.
 * @member {Array.<module:model/GoogleCloudRunV2Container>} containers
 */
GoogleCloudRunV2TaskTemplate.prototype['containers'] = undefined;

/**
 * A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
 * @member {String} encryptionKey
 */
GoogleCloudRunV2TaskTemplate.prototype['encryptionKey'] = undefined;

/**
 * The execution environment being used to host this Task.
 * @member {module:model/GoogleCloudRunV2TaskTemplate.ExecutionEnvironmentEnum} executionEnvironment
 */
GoogleCloudRunV2TaskTemplate.prototype['executionEnvironment'] = undefined;

/**
 * Number of retries allowed per Task, before marking this Task failed. Defaults to 3.
 * @member {Number} maxRetries
 */
GoogleCloudRunV2TaskTemplate.prototype['maxRetries'] = undefined;

/**
 * Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project's default service account.
 * @member {String} serviceAccount
 */
GoogleCloudRunV2TaskTemplate.prototype['serviceAccount'] = undefined;

/**
 * Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout. Defaults to 600 seconds.
 * @member {String} timeout
 */
GoogleCloudRunV2TaskTemplate.prototype['timeout'] = undefined;

/**
 * A list of Volumes to make available to containers.
 * @member {Array.<module:model/GoogleCloudRunV2Volume>} volumes
 */
GoogleCloudRunV2TaskTemplate.prototype['volumes'] = undefined;

/**
 * @member {module:model/GoogleCloudRunV2VpcAccess} vpcAccess
 */
GoogleCloudRunV2TaskTemplate.prototype['vpcAccess'] = undefined;





/**
 * Allowed values for the <code>executionEnvironment</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudRunV2TaskTemplate['ExecutionEnvironmentEnum'] = {

    /**
     * value: "EXECUTION_ENVIRONMENT_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "EXECUTION_ENVIRONMENT_UNSPECIFIED",

    /**
     * value: "EXECUTION_ENVIRONMENT_GEN1"
     * @const
     */
    "GEN1": "EXECUTION_ENVIRONMENT_GEN1",

    /**
     * value: "EXECUTION_ENVIRONMENT_GEN2"
     * @const
     */
    "GEN2": "EXECUTION_ENVIRONMENT_GEN2"
};



export default GoogleCloudRunV2TaskTemplate;

