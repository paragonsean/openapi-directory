/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudRunAdminApi);
  }
}(this, function(expect, CloudRunAdminApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudRunAdminApi.GoogleCloudRunV2RevisionTemplate();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GoogleCloudRunV2RevisionTemplate', function() {
    it('should create an instance of GoogleCloudRunV2RevisionTemplate', function() {
      // uncomment below and update the code to test GoogleCloudRunV2RevisionTemplate
      //var instance = new CloudRunAdminApi.GoogleCloudRunV2RevisionTemplate();
      //expect(instance).to.be.a(CloudRunAdminApi.GoogleCloudRunV2RevisionTemplate);
    });

    it('should have the property annotations (base name: "annotations")', function() {
      // uncomment below and update the code to test the property annotations
      //var instance = new CloudRunAdminApi.GoogleCloudRunV2RevisionTemplate();
      //expect(instance).to.be();
    });

    it('should have the property containers (base name: "containers")', function() {
      // uncomment below and update the code to test the property containers
      //var instance = new CloudRunAdminApi.GoogleCloudRunV2RevisionTemplate();
      //expect(instance).to.be();
    });

    it('should have the property encryptionKey (base name: "encryptionKey")', function() {
      // uncomment below and update the code to test the property encryptionKey
      //var instance = new CloudRunAdminApi.GoogleCloudRunV2RevisionTemplate();
      //expect(instance).to.be();
    });

    it('should have the property executionEnvironment (base name: "executionEnvironment")', function() {
      // uncomment below and update the code to test the property executionEnvironment
      //var instance = new CloudRunAdminApi.GoogleCloudRunV2RevisionTemplate();
      //expect(instance).to.be();
    });

    it('should have the property healthCheckDisabled (base name: "healthCheckDisabled")', function() {
      // uncomment below and update the code to test the property healthCheckDisabled
      //var instance = new CloudRunAdminApi.GoogleCloudRunV2RevisionTemplate();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new CloudRunAdminApi.GoogleCloudRunV2RevisionTemplate();
      //expect(instance).to.be();
    });

    it('should have the property maxInstanceRequestConcurrency (base name: "maxInstanceRequestConcurrency")', function() {
      // uncomment below and update the code to test the property maxInstanceRequestConcurrency
      //var instance = new CloudRunAdminApi.GoogleCloudRunV2RevisionTemplate();
      //expect(instance).to.be();
    });

    it('should have the property revision (base name: "revision")', function() {
      // uncomment below and update the code to test the property revision
      //var instance = new CloudRunAdminApi.GoogleCloudRunV2RevisionTemplate();
      //expect(instance).to.be();
    });

    it('should have the property scaling (base name: "scaling")', function() {
      // uncomment below and update the code to test the property scaling
      //var instance = new CloudRunAdminApi.GoogleCloudRunV2RevisionTemplate();
      //expect(instance).to.be();
    });

    it('should have the property serviceAccount (base name: "serviceAccount")', function() {
      // uncomment below and update the code to test the property serviceAccount
      //var instance = new CloudRunAdminApi.GoogleCloudRunV2RevisionTemplate();
      //expect(instance).to.be();
    });

    it('should have the property sessionAffinity (base name: "sessionAffinity")', function() {
      // uncomment below and update the code to test the property sessionAffinity
      //var instance = new CloudRunAdminApi.GoogleCloudRunV2RevisionTemplate();
      //expect(instance).to.be();
    });

    it('should have the property timeout (base name: "timeout")', function() {
      // uncomment below and update the code to test the property timeout
      //var instance = new CloudRunAdminApi.GoogleCloudRunV2RevisionTemplate();
      //expect(instance).to.be();
    });

    it('should have the property volumes (base name: "volumes")', function() {
      // uncomment below and update the code to test the property volumes
      //var instance = new CloudRunAdminApi.GoogleCloudRunV2RevisionTemplate();
      //expect(instance).to.be();
    });

    it('should have the property vpcAccess (base name: "vpcAccess")', function() {
      // uncomment below and update the code to test the property vpcAccess
      //var instance = new CloudRunAdminApi.GoogleCloudRunV2RevisionTemplate();
      //expect(instance).to.be();
    });

  });

}));
