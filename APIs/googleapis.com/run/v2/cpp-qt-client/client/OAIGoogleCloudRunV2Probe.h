/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudRunV2Probe.h
 *
 * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
 */

#ifndef OAIGoogleCloudRunV2Probe_H
#define OAIGoogleCloudRunV2Probe_H

#include <QJsonObject>

#include "OAIGoogleCloudRunV2GRPCAction.h"
#include "OAIGoogleCloudRunV2HTTPGetAction.h"
#include "OAIGoogleCloudRunV2TCPSocketAction.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleCloudRunV2GRPCAction;
class OAIGoogleCloudRunV2HTTPGetAction;
class OAIGoogleCloudRunV2TCPSocketAction;

class OAIGoogleCloudRunV2Probe : public OAIObject {
public:
    OAIGoogleCloudRunV2Probe();
    OAIGoogleCloudRunV2Probe(QString json);
    ~OAIGoogleCloudRunV2Probe() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getFailureThreshold() const;
    void setFailureThreshold(const qint32 &failure_threshold);
    bool is_failure_threshold_Set() const;
    bool is_failure_threshold_Valid() const;

    OAIGoogleCloudRunV2GRPCAction getGrpc() const;
    void setGrpc(const OAIGoogleCloudRunV2GRPCAction &grpc);
    bool is_grpc_Set() const;
    bool is_grpc_Valid() const;

    OAIGoogleCloudRunV2HTTPGetAction getHttpGet() const;
    void setHttpGet(const OAIGoogleCloudRunV2HTTPGetAction &http_get);
    bool is_http_get_Set() const;
    bool is_http_get_Valid() const;

    qint32 getInitialDelaySeconds() const;
    void setInitialDelaySeconds(const qint32 &initial_delay_seconds);
    bool is_initial_delay_seconds_Set() const;
    bool is_initial_delay_seconds_Valid() const;

    qint32 getPeriodSeconds() const;
    void setPeriodSeconds(const qint32 &period_seconds);
    bool is_period_seconds_Set() const;
    bool is_period_seconds_Valid() const;

    OAIGoogleCloudRunV2TCPSocketAction getTcpSocket() const;
    void setTcpSocket(const OAIGoogleCloudRunV2TCPSocketAction &tcp_socket);
    bool is_tcp_socket_Set() const;
    bool is_tcp_socket_Valid() const;

    qint32 getTimeoutSeconds() const;
    void setTimeoutSeconds(const qint32 &timeout_seconds);
    bool is_timeout_seconds_Set() const;
    bool is_timeout_seconds_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_failure_threshold;
    bool m_failure_threshold_isSet;
    bool m_failure_threshold_isValid;

    OAIGoogleCloudRunV2GRPCAction m_grpc;
    bool m_grpc_isSet;
    bool m_grpc_isValid;

    OAIGoogleCloudRunV2HTTPGetAction m_http_get;
    bool m_http_get_isSet;
    bool m_http_get_isValid;

    qint32 m_initial_delay_seconds;
    bool m_initial_delay_seconds_isSet;
    bool m_initial_delay_seconds_isValid;

    qint32 m_period_seconds;
    bool m_period_seconds_isSet;
    bool m_period_seconds_isValid;

    OAIGoogleCloudRunV2TCPSocketAction m_tcp_socket;
    bool m_tcp_socket_isSet;
    bool m_tcp_socket_isValid;

    qint32 m_timeout_seconds;
    bool m_timeout_seconds_isSet;
    bool m_timeout_seconds_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudRunV2Probe)

#endif // OAIGoogleCloudRunV2Probe_H
