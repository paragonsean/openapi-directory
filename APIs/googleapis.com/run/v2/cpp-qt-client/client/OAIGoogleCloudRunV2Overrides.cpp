/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2Overrides.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2Overrides::OAIGoogleCloudRunV2Overrides(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2Overrides::OAIGoogleCloudRunV2Overrides() {
    this->initializeModel();
}

OAIGoogleCloudRunV2Overrides::~OAIGoogleCloudRunV2Overrides() {}

void OAIGoogleCloudRunV2Overrides::initializeModel() {

    m_container_overrides_isSet = false;
    m_container_overrides_isValid = false;

    m_task_count_isSet = false;
    m_task_count_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIGoogleCloudRunV2Overrides::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2Overrides::fromJsonObject(QJsonObject json) {

    m_container_overrides_isValid = ::OpenAPI::fromJsonValue(m_container_overrides, json[QString("containerOverrides")]);
    m_container_overrides_isSet = !json[QString("containerOverrides")].isNull() && m_container_overrides_isValid;

    m_task_count_isValid = ::OpenAPI::fromJsonValue(m_task_count, json[QString("taskCount")]);
    m_task_count_isSet = !json[QString("taskCount")].isNull() && m_task_count_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIGoogleCloudRunV2Overrides::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2Overrides::asJsonObject() const {
    QJsonObject obj;
    if (m_container_overrides.size() > 0) {
        obj.insert(QString("containerOverrides"), ::OpenAPI::toJsonValue(m_container_overrides));
    }
    if (m_task_count_isSet) {
        obj.insert(QString("taskCount"), ::OpenAPI::toJsonValue(m_task_count));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

QList<OAIGoogleCloudRunV2ContainerOverride> OAIGoogleCloudRunV2Overrides::getContainerOverrides() const {
    return m_container_overrides;
}
void OAIGoogleCloudRunV2Overrides::setContainerOverrides(const QList<OAIGoogleCloudRunV2ContainerOverride> &container_overrides) {
    m_container_overrides = container_overrides;
    m_container_overrides_isSet = true;
}

bool OAIGoogleCloudRunV2Overrides::is_container_overrides_Set() const{
    return m_container_overrides_isSet;
}

bool OAIGoogleCloudRunV2Overrides::is_container_overrides_Valid() const{
    return m_container_overrides_isValid;
}

qint32 OAIGoogleCloudRunV2Overrides::getTaskCount() const {
    return m_task_count;
}
void OAIGoogleCloudRunV2Overrides::setTaskCount(const qint32 &task_count) {
    m_task_count = task_count;
    m_task_count_isSet = true;
}

bool OAIGoogleCloudRunV2Overrides::is_task_count_Set() const{
    return m_task_count_isSet;
}

bool OAIGoogleCloudRunV2Overrides::is_task_count_Valid() const{
    return m_task_count_isValid;
}

QString OAIGoogleCloudRunV2Overrides::getTimeout() const {
    return m_timeout;
}
void OAIGoogleCloudRunV2Overrides::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIGoogleCloudRunV2Overrides::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIGoogleCloudRunV2Overrides::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIGoogleCloudRunV2Overrides::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2Overrides::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
