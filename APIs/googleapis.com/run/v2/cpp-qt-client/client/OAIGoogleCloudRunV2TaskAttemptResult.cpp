/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2TaskAttemptResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2TaskAttemptResult::OAIGoogleCloudRunV2TaskAttemptResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2TaskAttemptResult::OAIGoogleCloudRunV2TaskAttemptResult() {
    this->initializeModel();
}

OAIGoogleCloudRunV2TaskAttemptResult::~OAIGoogleCloudRunV2TaskAttemptResult() {}

void OAIGoogleCloudRunV2TaskAttemptResult::initializeModel() {

    m_exit_code_isSet = false;
    m_exit_code_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGoogleCloudRunV2TaskAttemptResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2TaskAttemptResult::fromJsonObject(QJsonObject json) {

    m_exit_code_isValid = ::OpenAPI::fromJsonValue(m_exit_code, json[QString("exitCode")]);
    m_exit_code_isSet = !json[QString("exitCode")].isNull() && m_exit_code_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIGoogleCloudRunV2TaskAttemptResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2TaskAttemptResult::asJsonObject() const {
    QJsonObject obj;
    if (m_exit_code_isSet) {
        obj.insert(QString("exitCode"), ::OpenAPI::toJsonValue(m_exit_code));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAIGoogleCloudRunV2TaskAttemptResult::getExitCode() const {
    return m_exit_code;
}
void OAIGoogleCloudRunV2TaskAttemptResult::setExitCode(const qint32 &exit_code) {
    m_exit_code = exit_code;
    m_exit_code_isSet = true;
}

bool OAIGoogleCloudRunV2TaskAttemptResult::is_exit_code_Set() const{
    return m_exit_code_isSet;
}

bool OAIGoogleCloudRunV2TaskAttemptResult::is_exit_code_Valid() const{
    return m_exit_code_isValid;
}

OAIGoogleRpcStatus OAIGoogleCloudRunV2TaskAttemptResult::getStatus() const {
    return m_status;
}
void OAIGoogleCloudRunV2TaskAttemptResult::setStatus(const OAIGoogleRpcStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGoogleCloudRunV2TaskAttemptResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGoogleCloudRunV2TaskAttemptResult::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGoogleCloudRunV2TaskAttemptResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exit_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2TaskAttemptResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
