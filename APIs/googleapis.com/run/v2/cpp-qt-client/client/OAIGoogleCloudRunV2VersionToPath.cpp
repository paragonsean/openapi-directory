/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2VersionToPath.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2VersionToPath::OAIGoogleCloudRunV2VersionToPath(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2VersionToPath::OAIGoogleCloudRunV2VersionToPath() {
    this->initializeModel();
}

OAIGoogleCloudRunV2VersionToPath::~OAIGoogleCloudRunV2VersionToPath() {}

void OAIGoogleCloudRunV2VersionToPath::initializeModel() {

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIGoogleCloudRunV2VersionToPath::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2VersionToPath::fromJsonObject(QJsonObject json) {

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIGoogleCloudRunV2VersionToPath::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2VersionToPath::asJsonObject() const {
    QJsonObject obj;
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

qint32 OAIGoogleCloudRunV2VersionToPath::getMode() const {
    return m_mode;
}
void OAIGoogleCloudRunV2VersionToPath::setMode(const qint32 &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIGoogleCloudRunV2VersionToPath::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIGoogleCloudRunV2VersionToPath::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIGoogleCloudRunV2VersionToPath::getPath() const {
    return m_path;
}
void OAIGoogleCloudRunV2VersionToPath::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIGoogleCloudRunV2VersionToPath::is_path_Set() const{
    return m_path_isSet;
}

bool OAIGoogleCloudRunV2VersionToPath::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIGoogleCloudRunV2VersionToPath::getVersion() const {
    return m_version;
}
void OAIGoogleCloudRunV2VersionToPath::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGoogleCloudRunV2VersionToPath::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGoogleCloudRunV2VersionToPath::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIGoogleCloudRunV2VersionToPath::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2VersionToPath::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
