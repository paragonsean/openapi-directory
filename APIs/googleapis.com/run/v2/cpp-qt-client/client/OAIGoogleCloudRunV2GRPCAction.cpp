/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2GRPCAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2GRPCAction::OAIGoogleCloudRunV2GRPCAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2GRPCAction::OAIGoogleCloudRunV2GRPCAction() {
    this->initializeModel();
}

OAIGoogleCloudRunV2GRPCAction::~OAIGoogleCloudRunV2GRPCAction() {}

void OAIGoogleCloudRunV2GRPCAction::initializeModel() {

    m_port_isSet = false;
    m_port_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;
}

void OAIGoogleCloudRunV2GRPCAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2GRPCAction::fromJsonObject(QJsonObject json) {

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;
}

QString OAIGoogleCloudRunV2GRPCAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2GRPCAction::asJsonObject() const {
    QJsonObject obj;
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    return obj;
}

qint32 OAIGoogleCloudRunV2GRPCAction::getPort() const {
    return m_port;
}
void OAIGoogleCloudRunV2GRPCAction::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIGoogleCloudRunV2GRPCAction::is_port_Set() const{
    return m_port_isSet;
}

bool OAIGoogleCloudRunV2GRPCAction::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIGoogleCloudRunV2GRPCAction::getService() const {
    return m_service;
}
void OAIGoogleCloudRunV2GRPCAction::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIGoogleCloudRunV2GRPCAction::is_service_Set() const{
    return m_service_isSet;
}

bool OAIGoogleCloudRunV2GRPCAction::is_service_Valid() const{
    return m_service_isValid;
}

bool OAIGoogleCloudRunV2GRPCAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2GRPCAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
