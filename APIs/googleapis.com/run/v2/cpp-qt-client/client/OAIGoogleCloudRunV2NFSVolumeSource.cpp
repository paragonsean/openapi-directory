/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2NFSVolumeSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2NFSVolumeSource::OAIGoogleCloudRunV2NFSVolumeSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2NFSVolumeSource::OAIGoogleCloudRunV2NFSVolumeSource() {
    this->initializeModel();
}

OAIGoogleCloudRunV2NFSVolumeSource::~OAIGoogleCloudRunV2NFSVolumeSource() {}

void OAIGoogleCloudRunV2NFSVolumeSource::initializeModel() {

    m_path_isSet = false;
    m_path_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_server_isSet = false;
    m_server_isValid = false;
}

void OAIGoogleCloudRunV2NFSVolumeSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2NFSVolumeSource::fromJsonObject(QJsonObject json) {

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("readOnly")]);
    m_read_only_isSet = !json[QString("readOnly")].isNull() && m_read_only_isValid;

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;
}

QString OAIGoogleCloudRunV2NFSVolumeSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2NFSVolumeSource::asJsonObject() const {
    QJsonObject obj;
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("readOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_server_isSet) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    return obj;
}

QString OAIGoogleCloudRunV2NFSVolumeSource::getPath() const {
    return m_path;
}
void OAIGoogleCloudRunV2NFSVolumeSource::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIGoogleCloudRunV2NFSVolumeSource::is_path_Set() const{
    return m_path_isSet;
}

bool OAIGoogleCloudRunV2NFSVolumeSource::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIGoogleCloudRunV2NFSVolumeSource::isReadOnly() const {
    return m_read_only;
}
void OAIGoogleCloudRunV2NFSVolumeSource::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAIGoogleCloudRunV2NFSVolumeSource::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAIGoogleCloudRunV2NFSVolumeSource::is_read_only_Valid() const{
    return m_read_only_isValid;
}

QString OAIGoogleCloudRunV2NFSVolumeSource::getServer() const {
    return m_server;
}
void OAIGoogleCloudRunV2NFSVolumeSource::setServer(const QString &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAIGoogleCloudRunV2NFSVolumeSource::is_server_Set() const{
    return m_server_isSet;
}

bool OAIGoogleCloudRunV2NFSVolumeSource::is_server_Valid() const{
    return m_server_isValid;
}

bool OAIGoogleCloudRunV2NFSVolumeSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2NFSVolumeSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
