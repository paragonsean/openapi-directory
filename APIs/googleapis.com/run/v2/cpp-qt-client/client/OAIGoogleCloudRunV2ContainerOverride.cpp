/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2ContainerOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2ContainerOverride::OAIGoogleCloudRunV2ContainerOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2ContainerOverride::OAIGoogleCloudRunV2ContainerOverride() {
    this->initializeModel();
}

OAIGoogleCloudRunV2ContainerOverride::~OAIGoogleCloudRunV2ContainerOverride() {}

void OAIGoogleCloudRunV2ContainerOverride::initializeModel() {

    m_args_isSet = false;
    m_args_isValid = false;

    m_clear_args_isSet = false;
    m_clear_args_isValid = false;

    m_env_isSet = false;
    m_env_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIGoogleCloudRunV2ContainerOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2ContainerOverride::fromJsonObject(QJsonObject json) {

    m_args_isValid = ::OpenAPI::fromJsonValue(m_args, json[QString("args")]);
    m_args_isSet = !json[QString("args")].isNull() && m_args_isValid;

    m_clear_args_isValid = ::OpenAPI::fromJsonValue(m_clear_args, json[QString("clearArgs")]);
    m_clear_args_isSet = !json[QString("clearArgs")].isNull() && m_clear_args_isValid;

    m_env_isValid = ::OpenAPI::fromJsonValue(m_env, json[QString("env")]);
    m_env_isSet = !json[QString("env")].isNull() && m_env_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIGoogleCloudRunV2ContainerOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2ContainerOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_args.size() > 0) {
        obj.insert(QString("args"), ::OpenAPI::toJsonValue(m_args));
    }
    if (m_clear_args_isSet) {
        obj.insert(QString("clearArgs"), ::OpenAPI::toJsonValue(m_clear_args));
    }
    if (m_env.size() > 0) {
        obj.insert(QString("env"), ::OpenAPI::toJsonValue(m_env));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<QString> OAIGoogleCloudRunV2ContainerOverride::getArgs() const {
    return m_args;
}
void OAIGoogleCloudRunV2ContainerOverride::setArgs(const QList<QString> &args) {
    m_args = args;
    m_args_isSet = true;
}

bool OAIGoogleCloudRunV2ContainerOverride::is_args_Set() const{
    return m_args_isSet;
}

bool OAIGoogleCloudRunV2ContainerOverride::is_args_Valid() const{
    return m_args_isValid;
}

bool OAIGoogleCloudRunV2ContainerOverride::isClearArgs() const {
    return m_clear_args;
}
void OAIGoogleCloudRunV2ContainerOverride::setClearArgs(const bool &clear_args) {
    m_clear_args = clear_args;
    m_clear_args_isSet = true;
}

bool OAIGoogleCloudRunV2ContainerOverride::is_clear_args_Set() const{
    return m_clear_args_isSet;
}

bool OAIGoogleCloudRunV2ContainerOverride::is_clear_args_Valid() const{
    return m_clear_args_isValid;
}

QList<OAIGoogleCloudRunV2EnvVar> OAIGoogleCloudRunV2ContainerOverride::getEnv() const {
    return m_env;
}
void OAIGoogleCloudRunV2ContainerOverride::setEnv(const QList<OAIGoogleCloudRunV2EnvVar> &env) {
    m_env = env;
    m_env_isSet = true;
}

bool OAIGoogleCloudRunV2ContainerOverride::is_env_Set() const{
    return m_env_isSet;
}

bool OAIGoogleCloudRunV2ContainerOverride::is_env_Valid() const{
    return m_env_isValid;
}

QString OAIGoogleCloudRunV2ContainerOverride::getName() const {
    return m_name;
}
void OAIGoogleCloudRunV2ContainerOverride::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudRunV2ContainerOverride::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudRunV2ContainerOverride::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGoogleCloudRunV2ContainerOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_args.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_clear_args_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_env.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2ContainerOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
