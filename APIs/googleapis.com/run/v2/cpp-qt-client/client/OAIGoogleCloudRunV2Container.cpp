/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2Container.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2Container::OAIGoogleCloudRunV2Container(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2Container::OAIGoogleCloudRunV2Container() {
    this->initializeModel();
}

OAIGoogleCloudRunV2Container::~OAIGoogleCloudRunV2Container() {}

void OAIGoogleCloudRunV2Container::initializeModel() {

    m_args_isSet = false;
    m_args_isValid = false;

    m_command_isSet = false;
    m_command_isValid = false;

    m_depends_on_isSet = false;
    m_depends_on_isValid = false;

    m_env_isSet = false;
    m_env_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_liveness_probe_isSet = false;
    m_liveness_probe_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ports_isSet = false;
    m_ports_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_startup_probe_isSet = false;
    m_startup_probe_isValid = false;

    m_volume_mounts_isSet = false;
    m_volume_mounts_isValid = false;

    m_working_dir_isSet = false;
    m_working_dir_isValid = false;
}

void OAIGoogleCloudRunV2Container::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2Container::fromJsonObject(QJsonObject json) {

    m_args_isValid = ::OpenAPI::fromJsonValue(m_args, json[QString("args")]);
    m_args_isSet = !json[QString("args")].isNull() && m_args_isValid;

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("command")]);
    m_command_isSet = !json[QString("command")].isNull() && m_command_isValid;

    m_depends_on_isValid = ::OpenAPI::fromJsonValue(m_depends_on, json[QString("dependsOn")]);
    m_depends_on_isSet = !json[QString("dependsOn")].isNull() && m_depends_on_isValid;

    m_env_isValid = ::OpenAPI::fromJsonValue(m_env, json[QString("env")]);
    m_env_isSet = !json[QString("env")].isNull() && m_env_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_liveness_probe_isValid = ::OpenAPI::fromJsonValue(m_liveness_probe, json[QString("livenessProbe")]);
    m_liveness_probe_isSet = !json[QString("livenessProbe")].isNull() && m_liveness_probe_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ports_isValid = ::OpenAPI::fromJsonValue(m_ports, json[QString("ports")]);
    m_ports_isSet = !json[QString("ports")].isNull() && m_ports_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_startup_probe_isValid = ::OpenAPI::fromJsonValue(m_startup_probe, json[QString("startupProbe")]);
    m_startup_probe_isSet = !json[QString("startupProbe")].isNull() && m_startup_probe_isValid;

    m_volume_mounts_isValid = ::OpenAPI::fromJsonValue(m_volume_mounts, json[QString("volumeMounts")]);
    m_volume_mounts_isSet = !json[QString("volumeMounts")].isNull() && m_volume_mounts_isValid;

    m_working_dir_isValid = ::OpenAPI::fromJsonValue(m_working_dir, json[QString("workingDir")]);
    m_working_dir_isSet = !json[QString("workingDir")].isNull() && m_working_dir_isValid;
}

QString OAIGoogleCloudRunV2Container::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2Container::asJsonObject() const {
    QJsonObject obj;
    if (m_args.size() > 0) {
        obj.insert(QString("args"), ::OpenAPI::toJsonValue(m_args));
    }
    if (m_command.size() > 0) {
        obj.insert(QString("command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_depends_on.size() > 0) {
        obj.insert(QString("dependsOn"), ::OpenAPI::toJsonValue(m_depends_on));
    }
    if (m_env.size() > 0) {
        obj.insert(QString("env"), ::OpenAPI::toJsonValue(m_env));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_liveness_probe.isSet()) {
        obj.insert(QString("livenessProbe"), ::OpenAPI::toJsonValue(m_liveness_probe));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ports.size() > 0) {
        obj.insert(QString("ports"), ::OpenAPI::toJsonValue(m_ports));
    }
    if (m_resources.isSet()) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_startup_probe.isSet()) {
        obj.insert(QString("startupProbe"), ::OpenAPI::toJsonValue(m_startup_probe));
    }
    if (m_volume_mounts.size() > 0) {
        obj.insert(QString("volumeMounts"), ::OpenAPI::toJsonValue(m_volume_mounts));
    }
    if (m_working_dir_isSet) {
        obj.insert(QString("workingDir"), ::OpenAPI::toJsonValue(m_working_dir));
    }
    return obj;
}

QList<QString> OAIGoogleCloudRunV2Container::getArgs() const {
    return m_args;
}
void OAIGoogleCloudRunV2Container::setArgs(const QList<QString> &args) {
    m_args = args;
    m_args_isSet = true;
}

bool OAIGoogleCloudRunV2Container::is_args_Set() const{
    return m_args_isSet;
}

bool OAIGoogleCloudRunV2Container::is_args_Valid() const{
    return m_args_isValid;
}

QList<QString> OAIGoogleCloudRunV2Container::getCommand() const {
    return m_command;
}
void OAIGoogleCloudRunV2Container::setCommand(const QList<QString> &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAIGoogleCloudRunV2Container::is_command_Set() const{
    return m_command_isSet;
}

bool OAIGoogleCloudRunV2Container::is_command_Valid() const{
    return m_command_isValid;
}

QList<QString> OAIGoogleCloudRunV2Container::getDependsOn() const {
    return m_depends_on;
}
void OAIGoogleCloudRunV2Container::setDependsOn(const QList<QString> &depends_on) {
    m_depends_on = depends_on;
    m_depends_on_isSet = true;
}

bool OAIGoogleCloudRunV2Container::is_depends_on_Set() const{
    return m_depends_on_isSet;
}

bool OAIGoogleCloudRunV2Container::is_depends_on_Valid() const{
    return m_depends_on_isValid;
}

QList<OAIGoogleCloudRunV2EnvVar> OAIGoogleCloudRunV2Container::getEnv() const {
    return m_env;
}
void OAIGoogleCloudRunV2Container::setEnv(const QList<OAIGoogleCloudRunV2EnvVar> &env) {
    m_env = env;
    m_env_isSet = true;
}

bool OAIGoogleCloudRunV2Container::is_env_Set() const{
    return m_env_isSet;
}

bool OAIGoogleCloudRunV2Container::is_env_Valid() const{
    return m_env_isValid;
}

QString OAIGoogleCloudRunV2Container::getImage() const {
    return m_image;
}
void OAIGoogleCloudRunV2Container::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIGoogleCloudRunV2Container::is_image_Set() const{
    return m_image_isSet;
}

bool OAIGoogleCloudRunV2Container::is_image_Valid() const{
    return m_image_isValid;
}

OAIGoogleCloudRunV2Probe OAIGoogleCloudRunV2Container::getLivenessProbe() const {
    return m_liveness_probe;
}
void OAIGoogleCloudRunV2Container::setLivenessProbe(const OAIGoogleCloudRunV2Probe &liveness_probe) {
    m_liveness_probe = liveness_probe;
    m_liveness_probe_isSet = true;
}

bool OAIGoogleCloudRunV2Container::is_liveness_probe_Set() const{
    return m_liveness_probe_isSet;
}

bool OAIGoogleCloudRunV2Container::is_liveness_probe_Valid() const{
    return m_liveness_probe_isValid;
}

QString OAIGoogleCloudRunV2Container::getName() const {
    return m_name;
}
void OAIGoogleCloudRunV2Container::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudRunV2Container::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudRunV2Container::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIGoogleCloudRunV2ContainerPort> OAIGoogleCloudRunV2Container::getPorts() const {
    return m_ports;
}
void OAIGoogleCloudRunV2Container::setPorts(const QList<OAIGoogleCloudRunV2ContainerPort> &ports) {
    m_ports = ports;
    m_ports_isSet = true;
}

bool OAIGoogleCloudRunV2Container::is_ports_Set() const{
    return m_ports_isSet;
}

bool OAIGoogleCloudRunV2Container::is_ports_Valid() const{
    return m_ports_isValid;
}

OAIGoogleCloudRunV2ResourceRequirements OAIGoogleCloudRunV2Container::getResources() const {
    return m_resources;
}
void OAIGoogleCloudRunV2Container::setResources(const OAIGoogleCloudRunV2ResourceRequirements &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIGoogleCloudRunV2Container::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIGoogleCloudRunV2Container::is_resources_Valid() const{
    return m_resources_isValid;
}

OAIGoogleCloudRunV2Probe OAIGoogleCloudRunV2Container::getStartupProbe() const {
    return m_startup_probe;
}
void OAIGoogleCloudRunV2Container::setStartupProbe(const OAIGoogleCloudRunV2Probe &startup_probe) {
    m_startup_probe = startup_probe;
    m_startup_probe_isSet = true;
}

bool OAIGoogleCloudRunV2Container::is_startup_probe_Set() const{
    return m_startup_probe_isSet;
}

bool OAIGoogleCloudRunV2Container::is_startup_probe_Valid() const{
    return m_startup_probe_isValid;
}

QList<OAIGoogleCloudRunV2VolumeMount> OAIGoogleCloudRunV2Container::getVolumeMounts() const {
    return m_volume_mounts;
}
void OAIGoogleCloudRunV2Container::setVolumeMounts(const QList<OAIGoogleCloudRunV2VolumeMount> &volume_mounts) {
    m_volume_mounts = volume_mounts;
    m_volume_mounts_isSet = true;
}

bool OAIGoogleCloudRunV2Container::is_volume_mounts_Set() const{
    return m_volume_mounts_isSet;
}

bool OAIGoogleCloudRunV2Container::is_volume_mounts_Valid() const{
    return m_volume_mounts_isValid;
}

QString OAIGoogleCloudRunV2Container::getWorkingDir() const {
    return m_working_dir;
}
void OAIGoogleCloudRunV2Container::setWorkingDir(const QString &working_dir) {
    m_working_dir = working_dir;
    m_working_dir_isSet = true;
}

bool OAIGoogleCloudRunV2Container::is_working_dir_Set() const{
    return m_working_dir_isSet;
}

bool OAIGoogleCloudRunV2Container::is_working_dir_Valid() const{
    return m_working_dir_isValid;
}

bool OAIGoogleCloudRunV2Container::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_args.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_command.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_depends_on.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_env.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liveness_probe.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_startup_probe.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_mounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_dir_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2Container::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
