/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2Job.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2Job::OAIGoogleCloudRunV2Job(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2Job::OAIGoogleCloudRunV2Job() {
    this->initializeModel();
}

OAIGoogleCloudRunV2Job::~OAIGoogleCloudRunV2Job() {}

void OAIGoogleCloudRunV2Job::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_binary_authorization_isSet = false;
    m_binary_authorization_isValid = false;

    m_client_isSet = false;
    m_client_isValid = false;

    m_client_version_isSet = false;
    m_client_version_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_execution_count_isSet = false;
    m_execution_count_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_generation_isSet = false;
    m_generation_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_last_modifier_isSet = false;
    m_last_modifier_isValid = false;

    m_latest_created_execution_isSet = false;
    m_latest_created_execution_isValid = false;

    m_launch_stage_isSet = false;
    m_launch_stage_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_observed_generation_isSet = false;
    m_observed_generation_isValid = false;

    m_reconciling_isSet = false;
    m_reconciling_isValid = false;

    m_satisfies_pzs_isSet = false;
    m_satisfies_pzs_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_terminal_condition_isSet = false;
    m_terminal_condition_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGoogleCloudRunV2Job::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2Job::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_binary_authorization_isValid = ::OpenAPI::fromJsonValue(m_binary_authorization, json[QString("binaryAuthorization")]);
    m_binary_authorization_isSet = !json[QString("binaryAuthorization")].isNull() && m_binary_authorization_isValid;

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_client_version_isValid = ::OpenAPI::fromJsonValue(m_client_version, json[QString("clientVersion")]);
    m_client_version_isSet = !json[QString("clientVersion")].isNull() && m_client_version_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_execution_count_isValid = ::OpenAPI::fromJsonValue(m_execution_count, json[QString("executionCount")]);
    m_execution_count_isSet = !json[QString("executionCount")].isNull() && m_execution_count_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_generation_isValid = ::OpenAPI::fromJsonValue(m_generation, json[QString("generation")]);
    m_generation_isSet = !json[QString("generation")].isNull() && m_generation_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_last_modifier_isValid = ::OpenAPI::fromJsonValue(m_last_modifier, json[QString("lastModifier")]);
    m_last_modifier_isSet = !json[QString("lastModifier")].isNull() && m_last_modifier_isValid;

    m_latest_created_execution_isValid = ::OpenAPI::fromJsonValue(m_latest_created_execution, json[QString("latestCreatedExecution")]);
    m_latest_created_execution_isSet = !json[QString("latestCreatedExecution")].isNull() && m_latest_created_execution_isValid;

    m_launch_stage_isValid = ::OpenAPI::fromJsonValue(m_launch_stage, json[QString("launchStage")]);
    m_launch_stage_isSet = !json[QString("launchStage")].isNull() && m_launch_stage_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_observed_generation_isValid = ::OpenAPI::fromJsonValue(m_observed_generation, json[QString("observedGeneration")]);
    m_observed_generation_isSet = !json[QString("observedGeneration")].isNull() && m_observed_generation_isValid;

    m_reconciling_isValid = ::OpenAPI::fromJsonValue(m_reconciling, json[QString("reconciling")]);
    m_reconciling_isSet = !json[QString("reconciling")].isNull() && m_reconciling_isValid;

    m_satisfies_pzs_isValid = ::OpenAPI::fromJsonValue(m_satisfies_pzs, json[QString("satisfiesPzs")]);
    m_satisfies_pzs_isSet = !json[QString("satisfiesPzs")].isNull() && m_satisfies_pzs_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_terminal_condition_isValid = ::OpenAPI::fromJsonValue(m_terminal_condition, json[QString("terminalCondition")]);
    m_terminal_condition_isSet = !json[QString("terminalCondition")].isNull() && m_terminal_condition_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGoogleCloudRunV2Job::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2Job::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_binary_authorization.isSet()) {
        obj.insert(QString("binaryAuthorization"), ::OpenAPI::toJsonValue(m_binary_authorization));
    }
    if (m_client_isSet) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_client_version_isSet) {
        obj.insert(QString("clientVersion"), ::OpenAPI::toJsonValue(m_client_version));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_creator_isSet) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_execution_count_isSet) {
        obj.insert(QString("executionCount"), ::OpenAPI::toJsonValue(m_execution_count));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_generation_isSet) {
        obj.insert(QString("generation"), ::OpenAPI::toJsonValue(m_generation));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_last_modifier_isSet) {
        obj.insert(QString("lastModifier"), ::OpenAPI::toJsonValue(m_last_modifier));
    }
    if (m_latest_created_execution.isSet()) {
        obj.insert(QString("latestCreatedExecution"), ::OpenAPI::toJsonValue(m_latest_created_execution));
    }
    if (m_launch_stage_isSet) {
        obj.insert(QString("launchStage"), ::OpenAPI::toJsonValue(m_launch_stage));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_observed_generation_isSet) {
        obj.insert(QString("observedGeneration"), ::OpenAPI::toJsonValue(m_observed_generation));
    }
    if (m_reconciling_isSet) {
        obj.insert(QString("reconciling"), ::OpenAPI::toJsonValue(m_reconciling));
    }
    if (m_satisfies_pzs_isSet) {
        obj.insert(QString("satisfiesPzs"), ::OpenAPI::toJsonValue(m_satisfies_pzs));
    }
    if (m_r_template.isSet()) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_terminal_condition.isSet()) {
        obj.insert(QString("terminalCondition"), ::OpenAPI::toJsonValue(m_terminal_condition));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QMap<QString, QString> OAIGoogleCloudRunV2Job::getAnnotations() const {
    return m_annotations;
}
void OAIGoogleCloudRunV2Job::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIGoogleCloudRunV2Job::is_annotations_Valid() const{
    return m_annotations_isValid;
}

OAIGoogleCloudRunV2BinaryAuthorization OAIGoogleCloudRunV2Job::getBinaryAuthorization() const {
    return m_binary_authorization;
}
void OAIGoogleCloudRunV2Job::setBinaryAuthorization(const OAIGoogleCloudRunV2BinaryAuthorization &binary_authorization) {
    m_binary_authorization = binary_authorization;
    m_binary_authorization_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_binary_authorization_Set() const{
    return m_binary_authorization_isSet;
}

bool OAIGoogleCloudRunV2Job::is_binary_authorization_Valid() const{
    return m_binary_authorization_isValid;
}

QString OAIGoogleCloudRunV2Job::getClient() const {
    return m_client;
}
void OAIGoogleCloudRunV2Job::setClient(const QString &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_client_Set() const{
    return m_client_isSet;
}

bool OAIGoogleCloudRunV2Job::is_client_Valid() const{
    return m_client_isValid;
}

QString OAIGoogleCloudRunV2Job::getClientVersion() const {
    return m_client_version;
}
void OAIGoogleCloudRunV2Job::setClientVersion(const QString &client_version) {
    m_client_version = client_version;
    m_client_version_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_client_version_Set() const{
    return m_client_version_isSet;
}

bool OAIGoogleCloudRunV2Job::is_client_version_Valid() const{
    return m_client_version_isValid;
}

QList<OAIGoogleCloudRunV2Condition> OAIGoogleCloudRunV2Job::getConditions() const {
    return m_conditions;
}
void OAIGoogleCloudRunV2Job::setConditions(const QList<OAIGoogleCloudRunV2Condition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIGoogleCloudRunV2Job::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QString OAIGoogleCloudRunV2Job::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudRunV2Job::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudRunV2Job::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudRunV2Job::getCreator() const {
    return m_creator;
}
void OAIGoogleCloudRunV2Job::setCreator(const QString &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAIGoogleCloudRunV2Job::is_creator_Valid() const{
    return m_creator_isValid;
}

QString OAIGoogleCloudRunV2Job::getDeleteTime() const {
    return m_delete_time;
}
void OAIGoogleCloudRunV2Job::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAIGoogleCloudRunV2Job::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

QString OAIGoogleCloudRunV2Job::getEtag() const {
    return m_etag;
}
void OAIGoogleCloudRunV2Job::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIGoogleCloudRunV2Job::is_etag_Valid() const{
    return m_etag_isValid;
}

qint32 OAIGoogleCloudRunV2Job::getExecutionCount() const {
    return m_execution_count;
}
void OAIGoogleCloudRunV2Job::setExecutionCount(const qint32 &execution_count) {
    m_execution_count = execution_count;
    m_execution_count_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_execution_count_Set() const{
    return m_execution_count_isSet;
}

bool OAIGoogleCloudRunV2Job::is_execution_count_Valid() const{
    return m_execution_count_isValid;
}

QString OAIGoogleCloudRunV2Job::getExpireTime() const {
    return m_expire_time;
}
void OAIGoogleCloudRunV2Job::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIGoogleCloudRunV2Job::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAIGoogleCloudRunV2Job::getGeneration() const {
    return m_generation;
}
void OAIGoogleCloudRunV2Job::setGeneration(const QString &generation) {
    m_generation = generation;
    m_generation_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_generation_Set() const{
    return m_generation_isSet;
}

bool OAIGoogleCloudRunV2Job::is_generation_Valid() const{
    return m_generation_isValid;
}

QMap<QString, QString> OAIGoogleCloudRunV2Job::getLabels() const {
    return m_labels;
}
void OAIGoogleCloudRunV2Job::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleCloudRunV2Job::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIGoogleCloudRunV2Job::getLastModifier() const {
    return m_last_modifier;
}
void OAIGoogleCloudRunV2Job::setLastModifier(const QString &last_modifier) {
    m_last_modifier = last_modifier;
    m_last_modifier_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_last_modifier_Set() const{
    return m_last_modifier_isSet;
}

bool OAIGoogleCloudRunV2Job::is_last_modifier_Valid() const{
    return m_last_modifier_isValid;
}

OAIGoogleCloudRunV2ExecutionReference OAIGoogleCloudRunV2Job::getLatestCreatedExecution() const {
    return m_latest_created_execution;
}
void OAIGoogleCloudRunV2Job::setLatestCreatedExecution(const OAIGoogleCloudRunV2ExecutionReference &latest_created_execution) {
    m_latest_created_execution = latest_created_execution;
    m_latest_created_execution_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_latest_created_execution_Set() const{
    return m_latest_created_execution_isSet;
}

bool OAIGoogleCloudRunV2Job::is_latest_created_execution_Valid() const{
    return m_latest_created_execution_isValid;
}

QString OAIGoogleCloudRunV2Job::getLaunchStage() const {
    return m_launch_stage;
}
void OAIGoogleCloudRunV2Job::setLaunchStage(const QString &launch_stage) {
    m_launch_stage = launch_stage;
    m_launch_stage_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_launch_stage_Set() const{
    return m_launch_stage_isSet;
}

bool OAIGoogleCloudRunV2Job::is_launch_stage_Valid() const{
    return m_launch_stage_isValid;
}

QString OAIGoogleCloudRunV2Job::getName() const {
    return m_name;
}
void OAIGoogleCloudRunV2Job::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudRunV2Job::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleCloudRunV2Job::getObservedGeneration() const {
    return m_observed_generation;
}
void OAIGoogleCloudRunV2Job::setObservedGeneration(const QString &observed_generation) {
    m_observed_generation = observed_generation;
    m_observed_generation_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_observed_generation_Set() const{
    return m_observed_generation_isSet;
}

bool OAIGoogleCloudRunV2Job::is_observed_generation_Valid() const{
    return m_observed_generation_isValid;
}

bool OAIGoogleCloudRunV2Job::isReconciling() const {
    return m_reconciling;
}
void OAIGoogleCloudRunV2Job::setReconciling(const bool &reconciling) {
    m_reconciling = reconciling;
    m_reconciling_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_reconciling_Set() const{
    return m_reconciling_isSet;
}

bool OAIGoogleCloudRunV2Job::is_reconciling_Valid() const{
    return m_reconciling_isValid;
}

bool OAIGoogleCloudRunV2Job::isSatisfiesPzs() const {
    return m_satisfies_pzs;
}
void OAIGoogleCloudRunV2Job::setSatisfiesPzs(const bool &satisfies_pzs) {
    m_satisfies_pzs = satisfies_pzs;
    m_satisfies_pzs_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_satisfies_pzs_Set() const{
    return m_satisfies_pzs_isSet;
}

bool OAIGoogleCloudRunV2Job::is_satisfies_pzs_Valid() const{
    return m_satisfies_pzs_isValid;
}

OAIGoogleCloudRunV2ExecutionTemplate OAIGoogleCloudRunV2Job::getRTemplate() const {
    return m_r_template;
}
void OAIGoogleCloudRunV2Job::setRTemplate(const OAIGoogleCloudRunV2ExecutionTemplate &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIGoogleCloudRunV2Job::is_r_template_Valid() const{
    return m_r_template_isValid;
}

OAIGoogleCloudRunV2Condition OAIGoogleCloudRunV2Job::getTerminalCondition() const {
    return m_terminal_condition;
}
void OAIGoogleCloudRunV2Job::setTerminalCondition(const OAIGoogleCloudRunV2Condition &terminal_condition) {
    m_terminal_condition = terminal_condition;
    m_terminal_condition_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_terminal_condition_Set() const{
    return m_terminal_condition_isSet;
}

bool OAIGoogleCloudRunV2Job::is_terminal_condition_Valid() const{
    return m_terminal_condition_isValid;
}

QString OAIGoogleCloudRunV2Job::getUid() const {
    return m_uid;
}
void OAIGoogleCloudRunV2Job::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIGoogleCloudRunV2Job::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIGoogleCloudRunV2Job::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudRunV2Job::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudRunV2Job::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudRunV2Job::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGoogleCloudRunV2Job::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_binary_authorization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_created_execution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observed_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfies_pzs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminal_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2Job::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
