/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2BinaryAuthorization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2BinaryAuthorization::OAIGoogleCloudRunV2BinaryAuthorization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2BinaryAuthorization::OAIGoogleCloudRunV2BinaryAuthorization() {
    this->initializeModel();
}

OAIGoogleCloudRunV2BinaryAuthorization::~OAIGoogleCloudRunV2BinaryAuthorization() {}

void OAIGoogleCloudRunV2BinaryAuthorization::initializeModel() {

    m_breakglass_justification_isSet = false;
    m_breakglass_justification_isValid = false;

    m_use_default_isSet = false;
    m_use_default_isValid = false;
}

void OAIGoogleCloudRunV2BinaryAuthorization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2BinaryAuthorization::fromJsonObject(QJsonObject json) {

    m_breakglass_justification_isValid = ::OpenAPI::fromJsonValue(m_breakglass_justification, json[QString("breakglassJustification")]);
    m_breakglass_justification_isSet = !json[QString("breakglassJustification")].isNull() && m_breakglass_justification_isValid;

    m_use_default_isValid = ::OpenAPI::fromJsonValue(m_use_default, json[QString("useDefault")]);
    m_use_default_isSet = !json[QString("useDefault")].isNull() && m_use_default_isValid;
}

QString OAIGoogleCloudRunV2BinaryAuthorization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2BinaryAuthorization::asJsonObject() const {
    QJsonObject obj;
    if (m_breakglass_justification_isSet) {
        obj.insert(QString("breakglassJustification"), ::OpenAPI::toJsonValue(m_breakglass_justification));
    }
    if (m_use_default_isSet) {
        obj.insert(QString("useDefault"), ::OpenAPI::toJsonValue(m_use_default));
    }
    return obj;
}

QString OAIGoogleCloudRunV2BinaryAuthorization::getBreakglassJustification() const {
    return m_breakglass_justification;
}
void OAIGoogleCloudRunV2BinaryAuthorization::setBreakglassJustification(const QString &breakglass_justification) {
    m_breakglass_justification = breakglass_justification;
    m_breakglass_justification_isSet = true;
}

bool OAIGoogleCloudRunV2BinaryAuthorization::is_breakglass_justification_Set() const{
    return m_breakglass_justification_isSet;
}

bool OAIGoogleCloudRunV2BinaryAuthorization::is_breakglass_justification_Valid() const{
    return m_breakglass_justification_isValid;
}

bool OAIGoogleCloudRunV2BinaryAuthorization::isUseDefault() const {
    return m_use_default;
}
void OAIGoogleCloudRunV2BinaryAuthorization::setUseDefault(const bool &use_default) {
    m_use_default = use_default;
    m_use_default_isSet = true;
}

bool OAIGoogleCloudRunV2BinaryAuthorization::is_use_default_Set() const{
    return m_use_default_isSet;
}

bool OAIGoogleCloudRunV2BinaryAuthorization::is_use_default_Valid() const{
    return m_use_default_isValid;
}

bool OAIGoogleCloudRunV2BinaryAuthorization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_breakglass_justification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_default_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2BinaryAuthorization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
