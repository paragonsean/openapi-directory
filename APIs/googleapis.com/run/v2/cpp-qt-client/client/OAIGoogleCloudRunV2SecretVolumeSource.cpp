/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2SecretVolumeSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2SecretVolumeSource::OAIGoogleCloudRunV2SecretVolumeSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2SecretVolumeSource::OAIGoogleCloudRunV2SecretVolumeSource() {
    this->initializeModel();
}

OAIGoogleCloudRunV2SecretVolumeSource::~OAIGoogleCloudRunV2SecretVolumeSource() {}

void OAIGoogleCloudRunV2SecretVolumeSource::initializeModel() {

    m_default_mode_isSet = false;
    m_default_mode_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;
}

void OAIGoogleCloudRunV2SecretVolumeSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2SecretVolumeSource::fromJsonObject(QJsonObject json) {

    m_default_mode_isValid = ::OpenAPI::fromJsonValue(m_default_mode, json[QString("defaultMode")]);
    m_default_mode_isSet = !json[QString("defaultMode")].isNull() && m_default_mode_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;
}

QString OAIGoogleCloudRunV2SecretVolumeSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2SecretVolumeSource::asJsonObject() const {
    QJsonObject obj;
    if (m_default_mode_isSet) {
        obj.insert(QString("defaultMode"), ::OpenAPI::toJsonValue(m_default_mode));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    return obj;
}

qint32 OAIGoogleCloudRunV2SecretVolumeSource::getDefaultMode() const {
    return m_default_mode;
}
void OAIGoogleCloudRunV2SecretVolumeSource::setDefaultMode(const qint32 &default_mode) {
    m_default_mode = default_mode;
    m_default_mode_isSet = true;
}

bool OAIGoogleCloudRunV2SecretVolumeSource::is_default_mode_Set() const{
    return m_default_mode_isSet;
}

bool OAIGoogleCloudRunV2SecretVolumeSource::is_default_mode_Valid() const{
    return m_default_mode_isValid;
}

QList<OAIGoogleCloudRunV2VersionToPath> OAIGoogleCloudRunV2SecretVolumeSource::getItems() const {
    return m_items;
}
void OAIGoogleCloudRunV2SecretVolumeSource::setItems(const QList<OAIGoogleCloudRunV2VersionToPath> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIGoogleCloudRunV2SecretVolumeSource::is_items_Set() const{
    return m_items_isSet;
}

bool OAIGoogleCloudRunV2SecretVolumeSource::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIGoogleCloudRunV2SecretVolumeSource::getSecret() const {
    return m_secret;
}
void OAIGoogleCloudRunV2SecretVolumeSource::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIGoogleCloudRunV2SecretVolumeSource::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIGoogleCloudRunV2SecretVolumeSource::is_secret_Valid() const{
    return m_secret_isValid;
}

bool OAIGoogleCloudRunV2SecretVolumeSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2SecretVolumeSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
