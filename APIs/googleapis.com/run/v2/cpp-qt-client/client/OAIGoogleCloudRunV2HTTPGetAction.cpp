/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2HTTPGetAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2HTTPGetAction::OAIGoogleCloudRunV2HTTPGetAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2HTTPGetAction::OAIGoogleCloudRunV2HTTPGetAction() {
    this->initializeModel();
}

OAIGoogleCloudRunV2HTTPGetAction::~OAIGoogleCloudRunV2HTTPGetAction() {}

void OAIGoogleCloudRunV2HTTPGetAction::initializeModel() {

    m_http_headers_isSet = false;
    m_http_headers_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;
}

void OAIGoogleCloudRunV2HTTPGetAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2HTTPGetAction::fromJsonObject(QJsonObject json) {

    m_http_headers_isValid = ::OpenAPI::fromJsonValue(m_http_headers, json[QString("httpHeaders")]);
    m_http_headers_isSet = !json[QString("httpHeaders")].isNull() && m_http_headers_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;
}

QString OAIGoogleCloudRunV2HTTPGetAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2HTTPGetAction::asJsonObject() const {
    QJsonObject obj;
    if (m_http_headers.size() > 0) {
        obj.insert(QString("httpHeaders"), ::OpenAPI::toJsonValue(m_http_headers));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    return obj;
}

QList<OAIGoogleCloudRunV2HTTPHeader> OAIGoogleCloudRunV2HTTPGetAction::getHttpHeaders() const {
    return m_http_headers;
}
void OAIGoogleCloudRunV2HTTPGetAction::setHttpHeaders(const QList<OAIGoogleCloudRunV2HTTPHeader> &http_headers) {
    m_http_headers = http_headers;
    m_http_headers_isSet = true;
}

bool OAIGoogleCloudRunV2HTTPGetAction::is_http_headers_Set() const{
    return m_http_headers_isSet;
}

bool OAIGoogleCloudRunV2HTTPGetAction::is_http_headers_Valid() const{
    return m_http_headers_isValid;
}

QString OAIGoogleCloudRunV2HTTPGetAction::getPath() const {
    return m_path;
}
void OAIGoogleCloudRunV2HTTPGetAction::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIGoogleCloudRunV2HTTPGetAction::is_path_Set() const{
    return m_path_isSet;
}

bool OAIGoogleCloudRunV2HTTPGetAction::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAIGoogleCloudRunV2HTTPGetAction::getPort() const {
    return m_port;
}
void OAIGoogleCloudRunV2HTTPGetAction::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIGoogleCloudRunV2HTTPGetAction::is_port_Set() const{
    return m_port_isSet;
}

bool OAIGoogleCloudRunV2HTTPGetAction::is_port_Valid() const{
    return m_port_isValid;
}

bool OAIGoogleCloudRunV2HTTPGetAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2HTTPGetAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
