/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2Volume.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2Volume::OAIGoogleCloudRunV2Volume(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2Volume::OAIGoogleCloudRunV2Volume() {
    this->initializeModel();
}

OAIGoogleCloudRunV2Volume::~OAIGoogleCloudRunV2Volume() {}

void OAIGoogleCloudRunV2Volume::initializeModel() {

    m_cloud_sql_instance_isSet = false;
    m_cloud_sql_instance_isValid = false;

    m_empty_dir_isSet = false;
    m_empty_dir_isValid = false;

    m_gcs_isSet = false;
    m_gcs_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nfs_isSet = false;
    m_nfs_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;
}

void OAIGoogleCloudRunV2Volume::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2Volume::fromJsonObject(QJsonObject json) {

    m_cloud_sql_instance_isValid = ::OpenAPI::fromJsonValue(m_cloud_sql_instance, json[QString("cloudSqlInstance")]);
    m_cloud_sql_instance_isSet = !json[QString("cloudSqlInstance")].isNull() && m_cloud_sql_instance_isValid;

    m_empty_dir_isValid = ::OpenAPI::fromJsonValue(m_empty_dir, json[QString("emptyDir")]);
    m_empty_dir_isSet = !json[QString("emptyDir")].isNull() && m_empty_dir_isValid;

    m_gcs_isValid = ::OpenAPI::fromJsonValue(m_gcs, json[QString("gcs")]);
    m_gcs_isSet = !json[QString("gcs")].isNull() && m_gcs_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nfs_isValid = ::OpenAPI::fromJsonValue(m_nfs, json[QString("nfs")]);
    m_nfs_isSet = !json[QString("nfs")].isNull() && m_nfs_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;
}

QString OAIGoogleCloudRunV2Volume::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2Volume::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_sql_instance.isSet()) {
        obj.insert(QString("cloudSqlInstance"), ::OpenAPI::toJsonValue(m_cloud_sql_instance));
    }
    if (m_empty_dir.isSet()) {
        obj.insert(QString("emptyDir"), ::OpenAPI::toJsonValue(m_empty_dir));
    }
    if (m_gcs.isSet()) {
        obj.insert(QString("gcs"), ::OpenAPI::toJsonValue(m_gcs));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nfs.isSet()) {
        obj.insert(QString("nfs"), ::OpenAPI::toJsonValue(m_nfs));
    }
    if (m_secret.isSet()) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    return obj;
}

OAIGoogleCloudRunV2CloudSqlInstance OAIGoogleCloudRunV2Volume::getCloudSqlInstance() const {
    return m_cloud_sql_instance;
}
void OAIGoogleCloudRunV2Volume::setCloudSqlInstance(const OAIGoogleCloudRunV2CloudSqlInstance &cloud_sql_instance) {
    m_cloud_sql_instance = cloud_sql_instance;
    m_cloud_sql_instance_isSet = true;
}

bool OAIGoogleCloudRunV2Volume::is_cloud_sql_instance_Set() const{
    return m_cloud_sql_instance_isSet;
}

bool OAIGoogleCloudRunV2Volume::is_cloud_sql_instance_Valid() const{
    return m_cloud_sql_instance_isValid;
}

OAIGoogleCloudRunV2EmptyDirVolumeSource OAIGoogleCloudRunV2Volume::getEmptyDir() const {
    return m_empty_dir;
}
void OAIGoogleCloudRunV2Volume::setEmptyDir(const OAIGoogleCloudRunV2EmptyDirVolumeSource &empty_dir) {
    m_empty_dir = empty_dir;
    m_empty_dir_isSet = true;
}

bool OAIGoogleCloudRunV2Volume::is_empty_dir_Set() const{
    return m_empty_dir_isSet;
}

bool OAIGoogleCloudRunV2Volume::is_empty_dir_Valid() const{
    return m_empty_dir_isValid;
}

OAIGoogleCloudRunV2GCSVolumeSource OAIGoogleCloudRunV2Volume::getGcs() const {
    return m_gcs;
}
void OAIGoogleCloudRunV2Volume::setGcs(const OAIGoogleCloudRunV2GCSVolumeSource &gcs) {
    m_gcs = gcs;
    m_gcs_isSet = true;
}

bool OAIGoogleCloudRunV2Volume::is_gcs_Set() const{
    return m_gcs_isSet;
}

bool OAIGoogleCloudRunV2Volume::is_gcs_Valid() const{
    return m_gcs_isValid;
}

QString OAIGoogleCloudRunV2Volume::getName() const {
    return m_name;
}
void OAIGoogleCloudRunV2Volume::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudRunV2Volume::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudRunV2Volume::is_name_Valid() const{
    return m_name_isValid;
}

OAIGoogleCloudRunV2NFSVolumeSource OAIGoogleCloudRunV2Volume::getNfs() const {
    return m_nfs;
}
void OAIGoogleCloudRunV2Volume::setNfs(const OAIGoogleCloudRunV2NFSVolumeSource &nfs) {
    m_nfs = nfs;
    m_nfs_isSet = true;
}

bool OAIGoogleCloudRunV2Volume::is_nfs_Set() const{
    return m_nfs_isSet;
}

bool OAIGoogleCloudRunV2Volume::is_nfs_Valid() const{
    return m_nfs_isValid;
}

OAIGoogleCloudRunV2SecretVolumeSource OAIGoogleCloudRunV2Volume::getSecret() const {
    return m_secret;
}
void OAIGoogleCloudRunV2Volume::setSecret(const OAIGoogleCloudRunV2SecretVolumeSource &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIGoogleCloudRunV2Volume::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIGoogleCloudRunV2Volume::is_secret_Valid() const{
    return m_secret_isValid;
}

bool OAIGoogleCloudRunV2Volume::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_sql_instance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_empty_dir.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2Volume::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
