/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudRunV2Volume.h
 *
 * Volume represents a named volume in a container.
 */

#ifndef OAIGoogleCloudRunV2Volume_H
#define OAIGoogleCloudRunV2Volume_H

#include <QJsonObject>

#include "OAIGoogleCloudRunV2CloudSqlInstance.h"
#include "OAIGoogleCloudRunV2EmptyDirVolumeSource.h"
#include "OAIGoogleCloudRunV2GCSVolumeSource.h"
#include "OAIGoogleCloudRunV2NFSVolumeSource.h"
#include "OAIGoogleCloudRunV2SecretVolumeSource.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleCloudRunV2CloudSqlInstance;
class OAIGoogleCloudRunV2EmptyDirVolumeSource;
class OAIGoogleCloudRunV2GCSVolumeSource;
class OAIGoogleCloudRunV2NFSVolumeSource;
class OAIGoogleCloudRunV2SecretVolumeSource;

class OAIGoogleCloudRunV2Volume : public OAIObject {
public:
    OAIGoogleCloudRunV2Volume();
    OAIGoogleCloudRunV2Volume(QString json);
    ~OAIGoogleCloudRunV2Volume() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGoogleCloudRunV2CloudSqlInstance getCloudSqlInstance() const;
    void setCloudSqlInstance(const OAIGoogleCloudRunV2CloudSqlInstance &cloud_sql_instance);
    bool is_cloud_sql_instance_Set() const;
    bool is_cloud_sql_instance_Valid() const;

    OAIGoogleCloudRunV2EmptyDirVolumeSource getEmptyDir() const;
    void setEmptyDir(const OAIGoogleCloudRunV2EmptyDirVolumeSource &empty_dir);
    bool is_empty_dir_Set() const;
    bool is_empty_dir_Valid() const;

    OAIGoogleCloudRunV2GCSVolumeSource getGcs() const;
    void setGcs(const OAIGoogleCloudRunV2GCSVolumeSource &gcs);
    bool is_gcs_Set() const;
    bool is_gcs_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIGoogleCloudRunV2NFSVolumeSource getNfs() const;
    void setNfs(const OAIGoogleCloudRunV2NFSVolumeSource &nfs);
    bool is_nfs_Set() const;
    bool is_nfs_Valid() const;

    OAIGoogleCloudRunV2SecretVolumeSource getSecret() const;
    void setSecret(const OAIGoogleCloudRunV2SecretVolumeSource &secret);
    bool is_secret_Set() const;
    bool is_secret_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGoogleCloudRunV2CloudSqlInstance m_cloud_sql_instance;
    bool m_cloud_sql_instance_isSet;
    bool m_cloud_sql_instance_isValid;

    OAIGoogleCloudRunV2EmptyDirVolumeSource m_empty_dir;
    bool m_empty_dir_isSet;
    bool m_empty_dir_isValid;

    OAIGoogleCloudRunV2GCSVolumeSource m_gcs;
    bool m_gcs_isSet;
    bool m_gcs_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIGoogleCloudRunV2NFSVolumeSource m_nfs;
    bool m_nfs_isSet;
    bool m_nfs_isValid;

    OAIGoogleCloudRunV2SecretVolumeSource m_secret;
    bool m_secret_isSet;
    bool m_secret_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudRunV2Volume)

#endif // OAIGoogleCloudRunV2Volume_H
