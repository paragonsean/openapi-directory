/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudRunV2ExecutionTemplate.h
 *
 * ExecutionTemplate describes the data an execution should have when created from a template.
 */

#ifndef OAIGoogleCloudRunV2ExecutionTemplate_H
#define OAIGoogleCloudRunV2ExecutionTemplate_H

#include <QJsonObject>

#include "OAIGoogleCloudRunV2TaskTemplate.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleCloudRunV2TaskTemplate;

class OAIGoogleCloudRunV2ExecutionTemplate : public OAIObject {
public:
    OAIGoogleCloudRunV2ExecutionTemplate();
    OAIGoogleCloudRunV2ExecutionTemplate(QString json);
    ~OAIGoogleCloudRunV2ExecutionTemplate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QString> getAnnotations() const;
    void setAnnotations(const QMap<QString, QString> &annotations);
    bool is_annotations_Set() const;
    bool is_annotations_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    qint32 getParallelism() const;
    void setParallelism(const qint32 &parallelism);
    bool is_parallelism_Set() const;
    bool is_parallelism_Valid() const;

    qint32 getTaskCount() const;
    void setTaskCount(const qint32 &task_count);
    bool is_task_count_Set() const;
    bool is_task_count_Valid() const;

    OAIGoogleCloudRunV2TaskTemplate getRTemplate() const;
    void setRTemplate(const OAIGoogleCloudRunV2TaskTemplate &r_template);
    bool is_r_template_Set() const;
    bool is_r_template_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QString> m_annotations;
    bool m_annotations_isSet;
    bool m_annotations_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    qint32 m_parallelism;
    bool m_parallelism_isSet;
    bool m_parallelism_isValid;

    qint32 m_task_count;
    bool m_task_count_isSet;
    bool m_task_count_isValid;

    OAIGoogleCloudRunV2TaskTemplate m_r_template;
    bool m_r_template_isSet;
    bool m_r_template_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudRunV2ExecutionTemplate)

#endif // OAIGoogleCloudRunV2ExecutionTemplate_H
