/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2ListJobsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2ListJobsResponse::OAIGoogleCloudRunV2ListJobsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2ListJobsResponse::OAIGoogleCloudRunV2ListJobsResponse() {
    this->initializeModel();
}

OAIGoogleCloudRunV2ListJobsResponse::~OAIGoogleCloudRunV2ListJobsResponse() {}

void OAIGoogleCloudRunV2ListJobsResponse::initializeModel() {

    m_jobs_isSet = false;
    m_jobs_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIGoogleCloudRunV2ListJobsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2ListJobsResponse::fromJsonObject(QJsonObject json) {

    m_jobs_isValid = ::OpenAPI::fromJsonValue(m_jobs, json[QString("jobs")]);
    m_jobs_isSet = !json[QString("jobs")].isNull() && m_jobs_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIGoogleCloudRunV2ListJobsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2ListJobsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_jobs.size() > 0) {
        obj.insert(QString("jobs"), ::OpenAPI::toJsonValue(m_jobs));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIGoogleCloudRunV2Job> OAIGoogleCloudRunV2ListJobsResponse::getJobs() const {
    return m_jobs;
}
void OAIGoogleCloudRunV2ListJobsResponse::setJobs(const QList<OAIGoogleCloudRunV2Job> &jobs) {
    m_jobs = jobs;
    m_jobs_isSet = true;
}

bool OAIGoogleCloudRunV2ListJobsResponse::is_jobs_Set() const{
    return m_jobs_isSet;
}

bool OAIGoogleCloudRunV2ListJobsResponse::is_jobs_Valid() const{
    return m_jobs_isValid;
}

QString OAIGoogleCloudRunV2ListJobsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGoogleCloudRunV2ListJobsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGoogleCloudRunV2ListJobsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGoogleCloudRunV2ListJobsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIGoogleCloudRunV2ListJobsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_jobs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2ListJobsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
