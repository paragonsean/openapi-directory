/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2EmptyDirVolumeSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2EmptyDirVolumeSource::OAIGoogleCloudRunV2EmptyDirVolumeSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2EmptyDirVolumeSource::OAIGoogleCloudRunV2EmptyDirVolumeSource() {
    this->initializeModel();
}

OAIGoogleCloudRunV2EmptyDirVolumeSource::~OAIGoogleCloudRunV2EmptyDirVolumeSource() {}

void OAIGoogleCloudRunV2EmptyDirVolumeSource::initializeModel() {

    m_medium_isSet = false;
    m_medium_isValid = false;

    m_size_limit_isSet = false;
    m_size_limit_isValid = false;
}

void OAIGoogleCloudRunV2EmptyDirVolumeSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2EmptyDirVolumeSource::fromJsonObject(QJsonObject json) {

    m_medium_isValid = ::OpenAPI::fromJsonValue(m_medium, json[QString("medium")]);
    m_medium_isSet = !json[QString("medium")].isNull() && m_medium_isValid;

    m_size_limit_isValid = ::OpenAPI::fromJsonValue(m_size_limit, json[QString("sizeLimit")]);
    m_size_limit_isSet = !json[QString("sizeLimit")].isNull() && m_size_limit_isValid;
}

QString OAIGoogleCloudRunV2EmptyDirVolumeSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2EmptyDirVolumeSource::asJsonObject() const {
    QJsonObject obj;
    if (m_medium_isSet) {
        obj.insert(QString("medium"), ::OpenAPI::toJsonValue(m_medium));
    }
    if (m_size_limit_isSet) {
        obj.insert(QString("sizeLimit"), ::OpenAPI::toJsonValue(m_size_limit));
    }
    return obj;
}

QString OAIGoogleCloudRunV2EmptyDirVolumeSource::getMedium() const {
    return m_medium;
}
void OAIGoogleCloudRunV2EmptyDirVolumeSource::setMedium(const QString &medium) {
    m_medium = medium;
    m_medium_isSet = true;
}

bool OAIGoogleCloudRunV2EmptyDirVolumeSource::is_medium_Set() const{
    return m_medium_isSet;
}

bool OAIGoogleCloudRunV2EmptyDirVolumeSource::is_medium_Valid() const{
    return m_medium_isValid;
}

QString OAIGoogleCloudRunV2EmptyDirVolumeSource::getSizeLimit() const {
    return m_size_limit;
}
void OAIGoogleCloudRunV2EmptyDirVolumeSource::setSizeLimit(const QString &size_limit) {
    m_size_limit = size_limit;
    m_size_limit_isSet = true;
}

bool OAIGoogleCloudRunV2EmptyDirVolumeSource::is_size_limit_Set() const{
    return m_size_limit_isSet;
}

bool OAIGoogleCloudRunV2EmptyDirVolumeSource::is_size_limit_Valid() const{
    return m_size_limit_isValid;
}

bool OAIGoogleCloudRunV2EmptyDirVolumeSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_medium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2EmptyDirVolumeSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
