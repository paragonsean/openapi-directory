/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2Probe.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2Probe::OAIGoogleCloudRunV2Probe(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2Probe::OAIGoogleCloudRunV2Probe() {
    this->initializeModel();
}

OAIGoogleCloudRunV2Probe::~OAIGoogleCloudRunV2Probe() {}

void OAIGoogleCloudRunV2Probe::initializeModel() {

    m_failure_threshold_isSet = false;
    m_failure_threshold_isValid = false;

    m_grpc_isSet = false;
    m_grpc_isValid = false;

    m_http_get_isSet = false;
    m_http_get_isValid = false;

    m_initial_delay_seconds_isSet = false;
    m_initial_delay_seconds_isValid = false;

    m_period_seconds_isSet = false;
    m_period_seconds_isValid = false;

    m_tcp_socket_isSet = false;
    m_tcp_socket_isValid = false;

    m_timeout_seconds_isSet = false;
    m_timeout_seconds_isValid = false;
}

void OAIGoogleCloudRunV2Probe::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2Probe::fromJsonObject(QJsonObject json) {

    m_failure_threshold_isValid = ::OpenAPI::fromJsonValue(m_failure_threshold, json[QString("failureThreshold")]);
    m_failure_threshold_isSet = !json[QString("failureThreshold")].isNull() && m_failure_threshold_isValid;

    m_grpc_isValid = ::OpenAPI::fromJsonValue(m_grpc, json[QString("grpc")]);
    m_grpc_isSet = !json[QString("grpc")].isNull() && m_grpc_isValid;

    m_http_get_isValid = ::OpenAPI::fromJsonValue(m_http_get, json[QString("httpGet")]);
    m_http_get_isSet = !json[QString("httpGet")].isNull() && m_http_get_isValid;

    m_initial_delay_seconds_isValid = ::OpenAPI::fromJsonValue(m_initial_delay_seconds, json[QString("initialDelaySeconds")]);
    m_initial_delay_seconds_isSet = !json[QString("initialDelaySeconds")].isNull() && m_initial_delay_seconds_isValid;

    m_period_seconds_isValid = ::OpenAPI::fromJsonValue(m_period_seconds, json[QString("periodSeconds")]);
    m_period_seconds_isSet = !json[QString("periodSeconds")].isNull() && m_period_seconds_isValid;

    m_tcp_socket_isValid = ::OpenAPI::fromJsonValue(m_tcp_socket, json[QString("tcpSocket")]);
    m_tcp_socket_isSet = !json[QString("tcpSocket")].isNull() && m_tcp_socket_isValid;

    m_timeout_seconds_isValid = ::OpenAPI::fromJsonValue(m_timeout_seconds, json[QString("timeoutSeconds")]);
    m_timeout_seconds_isSet = !json[QString("timeoutSeconds")].isNull() && m_timeout_seconds_isValid;
}

QString OAIGoogleCloudRunV2Probe::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2Probe::asJsonObject() const {
    QJsonObject obj;
    if (m_failure_threshold_isSet) {
        obj.insert(QString("failureThreshold"), ::OpenAPI::toJsonValue(m_failure_threshold));
    }
    if (m_grpc.isSet()) {
        obj.insert(QString("grpc"), ::OpenAPI::toJsonValue(m_grpc));
    }
    if (m_http_get.isSet()) {
        obj.insert(QString("httpGet"), ::OpenAPI::toJsonValue(m_http_get));
    }
    if (m_initial_delay_seconds_isSet) {
        obj.insert(QString("initialDelaySeconds"), ::OpenAPI::toJsonValue(m_initial_delay_seconds));
    }
    if (m_period_seconds_isSet) {
        obj.insert(QString("periodSeconds"), ::OpenAPI::toJsonValue(m_period_seconds));
    }
    if (m_tcp_socket.isSet()) {
        obj.insert(QString("tcpSocket"), ::OpenAPI::toJsonValue(m_tcp_socket));
    }
    if (m_timeout_seconds_isSet) {
        obj.insert(QString("timeoutSeconds"), ::OpenAPI::toJsonValue(m_timeout_seconds));
    }
    return obj;
}

qint32 OAIGoogleCloudRunV2Probe::getFailureThreshold() const {
    return m_failure_threshold;
}
void OAIGoogleCloudRunV2Probe::setFailureThreshold(const qint32 &failure_threshold) {
    m_failure_threshold = failure_threshold;
    m_failure_threshold_isSet = true;
}

bool OAIGoogleCloudRunV2Probe::is_failure_threshold_Set() const{
    return m_failure_threshold_isSet;
}

bool OAIGoogleCloudRunV2Probe::is_failure_threshold_Valid() const{
    return m_failure_threshold_isValid;
}

OAIGoogleCloudRunV2GRPCAction OAIGoogleCloudRunV2Probe::getGrpc() const {
    return m_grpc;
}
void OAIGoogleCloudRunV2Probe::setGrpc(const OAIGoogleCloudRunV2GRPCAction &grpc) {
    m_grpc = grpc;
    m_grpc_isSet = true;
}

bool OAIGoogleCloudRunV2Probe::is_grpc_Set() const{
    return m_grpc_isSet;
}

bool OAIGoogleCloudRunV2Probe::is_grpc_Valid() const{
    return m_grpc_isValid;
}

OAIGoogleCloudRunV2HTTPGetAction OAIGoogleCloudRunV2Probe::getHttpGet() const {
    return m_http_get;
}
void OAIGoogleCloudRunV2Probe::setHttpGet(const OAIGoogleCloudRunV2HTTPGetAction &http_get) {
    m_http_get = http_get;
    m_http_get_isSet = true;
}

bool OAIGoogleCloudRunV2Probe::is_http_get_Set() const{
    return m_http_get_isSet;
}

bool OAIGoogleCloudRunV2Probe::is_http_get_Valid() const{
    return m_http_get_isValid;
}

qint32 OAIGoogleCloudRunV2Probe::getInitialDelaySeconds() const {
    return m_initial_delay_seconds;
}
void OAIGoogleCloudRunV2Probe::setInitialDelaySeconds(const qint32 &initial_delay_seconds) {
    m_initial_delay_seconds = initial_delay_seconds;
    m_initial_delay_seconds_isSet = true;
}

bool OAIGoogleCloudRunV2Probe::is_initial_delay_seconds_Set() const{
    return m_initial_delay_seconds_isSet;
}

bool OAIGoogleCloudRunV2Probe::is_initial_delay_seconds_Valid() const{
    return m_initial_delay_seconds_isValid;
}

qint32 OAIGoogleCloudRunV2Probe::getPeriodSeconds() const {
    return m_period_seconds;
}
void OAIGoogleCloudRunV2Probe::setPeriodSeconds(const qint32 &period_seconds) {
    m_period_seconds = period_seconds;
    m_period_seconds_isSet = true;
}

bool OAIGoogleCloudRunV2Probe::is_period_seconds_Set() const{
    return m_period_seconds_isSet;
}

bool OAIGoogleCloudRunV2Probe::is_period_seconds_Valid() const{
    return m_period_seconds_isValid;
}

OAIGoogleCloudRunV2TCPSocketAction OAIGoogleCloudRunV2Probe::getTcpSocket() const {
    return m_tcp_socket;
}
void OAIGoogleCloudRunV2Probe::setTcpSocket(const OAIGoogleCloudRunV2TCPSocketAction &tcp_socket) {
    m_tcp_socket = tcp_socket;
    m_tcp_socket_isSet = true;
}

bool OAIGoogleCloudRunV2Probe::is_tcp_socket_Set() const{
    return m_tcp_socket_isSet;
}

bool OAIGoogleCloudRunV2Probe::is_tcp_socket_Valid() const{
    return m_tcp_socket_isValid;
}

qint32 OAIGoogleCloudRunV2Probe::getTimeoutSeconds() const {
    return m_timeout_seconds;
}
void OAIGoogleCloudRunV2Probe::setTimeoutSeconds(const qint32 &timeout_seconds) {
    m_timeout_seconds = timeout_seconds;
    m_timeout_seconds_isSet = true;
}

bool OAIGoogleCloudRunV2Probe::is_timeout_seconds_Set() const{
    return m_timeout_seconds_isSet;
}

bool OAIGoogleCloudRunV2Probe::is_timeout_seconds_Valid() const{
    return m_timeout_seconds_isValid;
}

bool OAIGoogleCloudRunV2Probe::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failure_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grpc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_get.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_delay_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tcp_socket.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2Probe::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
