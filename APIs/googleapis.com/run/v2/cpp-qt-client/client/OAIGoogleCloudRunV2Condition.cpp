/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2Condition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2Condition::OAIGoogleCloudRunV2Condition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2Condition::OAIGoogleCloudRunV2Condition() {
    this->initializeModel();
}

OAIGoogleCloudRunV2Condition::~OAIGoogleCloudRunV2Condition() {}

void OAIGoogleCloudRunV2Condition::initializeModel() {

    m_execution_reason_isSet = false;
    m_execution_reason_isValid = false;

    m_last_transition_time_isSet = false;
    m_last_transition_time_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_revision_reason_isSet = false;
    m_revision_reason_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleCloudRunV2Condition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2Condition::fromJsonObject(QJsonObject json) {

    m_execution_reason_isValid = ::OpenAPI::fromJsonValue(m_execution_reason, json[QString("executionReason")]);
    m_execution_reason_isSet = !json[QString("executionReason")].isNull() && m_execution_reason_isValid;

    m_last_transition_time_isValid = ::OpenAPI::fromJsonValue(m_last_transition_time, json[QString("lastTransitionTime")]);
    m_last_transition_time_isSet = !json[QString("lastTransitionTime")].isNull() && m_last_transition_time_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_revision_reason_isValid = ::OpenAPI::fromJsonValue(m_revision_reason, json[QString("revisionReason")]);
    m_revision_reason_isSet = !json[QString("revisionReason")].isNull() && m_revision_reason_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleCloudRunV2Condition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2Condition::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_reason_isSet) {
        obj.insert(QString("executionReason"), ::OpenAPI::toJsonValue(m_execution_reason));
    }
    if (m_last_transition_time_isSet) {
        obj.insert(QString("lastTransitionTime"), ::OpenAPI::toJsonValue(m_last_transition_time));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_revision_reason_isSet) {
        obj.insert(QString("revisionReason"), ::OpenAPI::toJsonValue(m_revision_reason));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGoogleCloudRunV2Condition::getExecutionReason() const {
    return m_execution_reason;
}
void OAIGoogleCloudRunV2Condition::setExecutionReason(const QString &execution_reason) {
    m_execution_reason = execution_reason;
    m_execution_reason_isSet = true;
}

bool OAIGoogleCloudRunV2Condition::is_execution_reason_Set() const{
    return m_execution_reason_isSet;
}

bool OAIGoogleCloudRunV2Condition::is_execution_reason_Valid() const{
    return m_execution_reason_isValid;
}

QString OAIGoogleCloudRunV2Condition::getLastTransitionTime() const {
    return m_last_transition_time;
}
void OAIGoogleCloudRunV2Condition::setLastTransitionTime(const QString &last_transition_time) {
    m_last_transition_time = last_transition_time;
    m_last_transition_time_isSet = true;
}

bool OAIGoogleCloudRunV2Condition::is_last_transition_time_Set() const{
    return m_last_transition_time_isSet;
}

bool OAIGoogleCloudRunV2Condition::is_last_transition_time_Valid() const{
    return m_last_transition_time_isValid;
}

QString OAIGoogleCloudRunV2Condition::getMessage() const {
    return m_message;
}
void OAIGoogleCloudRunV2Condition::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIGoogleCloudRunV2Condition::is_message_Set() const{
    return m_message_isSet;
}

bool OAIGoogleCloudRunV2Condition::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIGoogleCloudRunV2Condition::getReason() const {
    return m_reason;
}
void OAIGoogleCloudRunV2Condition::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIGoogleCloudRunV2Condition::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIGoogleCloudRunV2Condition::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIGoogleCloudRunV2Condition::getRevisionReason() const {
    return m_revision_reason;
}
void OAIGoogleCloudRunV2Condition::setRevisionReason(const QString &revision_reason) {
    m_revision_reason = revision_reason;
    m_revision_reason_isSet = true;
}

bool OAIGoogleCloudRunV2Condition::is_revision_reason_Set() const{
    return m_revision_reason_isSet;
}

bool OAIGoogleCloudRunV2Condition::is_revision_reason_Valid() const{
    return m_revision_reason_isValid;
}

QString OAIGoogleCloudRunV2Condition::getSeverity() const {
    return m_severity;
}
void OAIGoogleCloudRunV2Condition::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIGoogleCloudRunV2Condition::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIGoogleCloudRunV2Condition::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIGoogleCloudRunV2Condition::getState() const {
    return m_state;
}
void OAIGoogleCloudRunV2Condition::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleCloudRunV2Condition::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleCloudRunV2Condition::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIGoogleCloudRunV2Condition::getType() const {
    return m_type;
}
void OAIGoogleCloudRunV2Condition::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleCloudRunV2Condition::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleCloudRunV2Condition::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleCloudRunV2Condition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_transition_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2Condition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
