/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2RevisionScalingStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2RevisionScalingStatus::OAIGoogleCloudRunV2RevisionScalingStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2RevisionScalingStatus::OAIGoogleCloudRunV2RevisionScalingStatus() {
    this->initializeModel();
}

OAIGoogleCloudRunV2RevisionScalingStatus::~OAIGoogleCloudRunV2RevisionScalingStatus() {}

void OAIGoogleCloudRunV2RevisionScalingStatus::initializeModel() {

    m_desired_min_instance_count_isSet = false;
    m_desired_min_instance_count_isValid = false;
}

void OAIGoogleCloudRunV2RevisionScalingStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2RevisionScalingStatus::fromJsonObject(QJsonObject json) {

    m_desired_min_instance_count_isValid = ::OpenAPI::fromJsonValue(m_desired_min_instance_count, json[QString("desiredMinInstanceCount")]);
    m_desired_min_instance_count_isSet = !json[QString("desiredMinInstanceCount")].isNull() && m_desired_min_instance_count_isValid;
}

QString OAIGoogleCloudRunV2RevisionScalingStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2RevisionScalingStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_desired_min_instance_count_isSet) {
        obj.insert(QString("desiredMinInstanceCount"), ::OpenAPI::toJsonValue(m_desired_min_instance_count));
    }
    return obj;
}

qint32 OAIGoogleCloudRunV2RevisionScalingStatus::getDesiredMinInstanceCount() const {
    return m_desired_min_instance_count;
}
void OAIGoogleCloudRunV2RevisionScalingStatus::setDesiredMinInstanceCount(const qint32 &desired_min_instance_count) {
    m_desired_min_instance_count = desired_min_instance_count;
    m_desired_min_instance_count_isSet = true;
}

bool OAIGoogleCloudRunV2RevisionScalingStatus::is_desired_min_instance_count_Set() const{
    return m_desired_min_instance_count_isSet;
}

bool OAIGoogleCloudRunV2RevisionScalingStatus::is_desired_min_instance_count_Valid() const{
    return m_desired_min_instance_count_isValid;
}

bool OAIGoogleCloudRunV2RevisionScalingStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_desired_min_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2RevisionScalingStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
