/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2ExecutionTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2ExecutionTemplate::OAIGoogleCloudRunV2ExecutionTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2ExecutionTemplate::OAIGoogleCloudRunV2ExecutionTemplate() {
    this->initializeModel();
}

OAIGoogleCloudRunV2ExecutionTemplate::~OAIGoogleCloudRunV2ExecutionTemplate() {}

void OAIGoogleCloudRunV2ExecutionTemplate::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_parallelism_isSet = false;
    m_parallelism_isValid = false;

    m_task_count_isSet = false;
    m_task_count_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;
}

void OAIGoogleCloudRunV2ExecutionTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2ExecutionTemplate::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_parallelism_isValid = ::OpenAPI::fromJsonValue(m_parallelism, json[QString("parallelism")]);
    m_parallelism_isSet = !json[QString("parallelism")].isNull() && m_parallelism_isValid;

    m_task_count_isValid = ::OpenAPI::fromJsonValue(m_task_count, json[QString("taskCount")]);
    m_task_count_isSet = !json[QString("taskCount")].isNull() && m_task_count_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;
}

QString OAIGoogleCloudRunV2ExecutionTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2ExecutionTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_parallelism_isSet) {
        obj.insert(QString("parallelism"), ::OpenAPI::toJsonValue(m_parallelism));
    }
    if (m_task_count_isSet) {
        obj.insert(QString("taskCount"), ::OpenAPI::toJsonValue(m_task_count));
    }
    if (m_r_template.isSet()) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    return obj;
}

QMap<QString, QString> OAIGoogleCloudRunV2ExecutionTemplate::getAnnotations() const {
    return m_annotations;
}
void OAIGoogleCloudRunV2ExecutionTemplate::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIGoogleCloudRunV2ExecutionTemplate::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIGoogleCloudRunV2ExecutionTemplate::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QMap<QString, QString> OAIGoogleCloudRunV2ExecutionTemplate::getLabels() const {
    return m_labels;
}
void OAIGoogleCloudRunV2ExecutionTemplate::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleCloudRunV2ExecutionTemplate::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleCloudRunV2ExecutionTemplate::is_labels_Valid() const{
    return m_labels_isValid;
}

qint32 OAIGoogleCloudRunV2ExecutionTemplate::getParallelism() const {
    return m_parallelism;
}
void OAIGoogleCloudRunV2ExecutionTemplate::setParallelism(const qint32 &parallelism) {
    m_parallelism = parallelism;
    m_parallelism_isSet = true;
}

bool OAIGoogleCloudRunV2ExecutionTemplate::is_parallelism_Set() const{
    return m_parallelism_isSet;
}

bool OAIGoogleCloudRunV2ExecutionTemplate::is_parallelism_Valid() const{
    return m_parallelism_isValid;
}

qint32 OAIGoogleCloudRunV2ExecutionTemplate::getTaskCount() const {
    return m_task_count;
}
void OAIGoogleCloudRunV2ExecutionTemplate::setTaskCount(const qint32 &task_count) {
    m_task_count = task_count;
    m_task_count_isSet = true;
}

bool OAIGoogleCloudRunV2ExecutionTemplate::is_task_count_Set() const{
    return m_task_count_isSet;
}

bool OAIGoogleCloudRunV2ExecutionTemplate::is_task_count_Valid() const{
    return m_task_count_isValid;
}

OAIGoogleCloudRunV2TaskTemplate OAIGoogleCloudRunV2ExecutionTemplate::getRTemplate() const {
    return m_r_template;
}
void OAIGoogleCloudRunV2ExecutionTemplate::setRTemplate(const OAIGoogleCloudRunV2TaskTemplate &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIGoogleCloudRunV2ExecutionTemplate::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIGoogleCloudRunV2ExecutionTemplate::is_r_template_Valid() const{
    return m_r_template_isValid;
}

bool OAIGoogleCloudRunV2ExecutionTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallelism_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2ExecutionTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
