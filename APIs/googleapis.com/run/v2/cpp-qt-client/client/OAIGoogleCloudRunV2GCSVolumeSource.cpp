/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2GCSVolumeSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2GCSVolumeSource::OAIGoogleCloudRunV2GCSVolumeSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2GCSVolumeSource::OAIGoogleCloudRunV2GCSVolumeSource() {
    this->initializeModel();
}

OAIGoogleCloudRunV2GCSVolumeSource::~OAIGoogleCloudRunV2GCSVolumeSource() {}

void OAIGoogleCloudRunV2GCSVolumeSource::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;
}

void OAIGoogleCloudRunV2GCSVolumeSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2GCSVolumeSource::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("bucket")]);
    m_bucket_isSet = !json[QString("bucket")].isNull() && m_bucket_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("readOnly")]);
    m_read_only_isSet = !json[QString("readOnly")].isNull() && m_read_only_isValid;
}

QString OAIGoogleCloudRunV2GCSVolumeSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2GCSVolumeSource::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_isSet) {
        obj.insert(QString("bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("readOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    return obj;
}

QString OAIGoogleCloudRunV2GCSVolumeSource::getBucket() const {
    return m_bucket;
}
void OAIGoogleCloudRunV2GCSVolumeSource::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIGoogleCloudRunV2GCSVolumeSource::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIGoogleCloudRunV2GCSVolumeSource::is_bucket_Valid() const{
    return m_bucket_isValid;
}

bool OAIGoogleCloudRunV2GCSVolumeSource::isReadOnly() const {
    return m_read_only;
}
void OAIGoogleCloudRunV2GCSVolumeSource::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAIGoogleCloudRunV2GCSVolumeSource::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAIGoogleCloudRunV2GCSVolumeSource::is_read_only_Valid() const{
    return m_read_only_isValid;
}

bool OAIGoogleCloudRunV2GCSVolumeSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2GCSVolumeSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
