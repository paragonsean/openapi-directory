/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2HTTPHeader.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2HTTPHeader::OAIGoogleCloudRunV2HTTPHeader(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2HTTPHeader::OAIGoogleCloudRunV2HTTPHeader() {
    this->initializeModel();
}

OAIGoogleCloudRunV2HTTPHeader::~OAIGoogleCloudRunV2HTTPHeader() {}

void OAIGoogleCloudRunV2HTTPHeader::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIGoogleCloudRunV2HTTPHeader::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2HTTPHeader::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIGoogleCloudRunV2HTTPHeader::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2HTTPHeader::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIGoogleCloudRunV2HTTPHeader::getName() const {
    return m_name;
}
void OAIGoogleCloudRunV2HTTPHeader::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudRunV2HTTPHeader::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudRunV2HTTPHeader::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleCloudRunV2HTTPHeader::getValue() const {
    return m_value;
}
void OAIGoogleCloudRunV2HTTPHeader::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIGoogleCloudRunV2HTTPHeader::is_value_Set() const{
    return m_value_isSet;
}

bool OAIGoogleCloudRunV2HTTPHeader::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIGoogleCloudRunV2HTTPHeader::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2HTTPHeader::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
