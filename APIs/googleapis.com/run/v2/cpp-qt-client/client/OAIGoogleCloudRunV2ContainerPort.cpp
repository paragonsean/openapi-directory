/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2ContainerPort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2ContainerPort::OAIGoogleCloudRunV2ContainerPort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2ContainerPort::OAIGoogleCloudRunV2ContainerPort() {
    this->initializeModel();
}

OAIGoogleCloudRunV2ContainerPort::~OAIGoogleCloudRunV2ContainerPort() {}

void OAIGoogleCloudRunV2ContainerPort::initializeModel() {

    m_container_port_isSet = false;
    m_container_port_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIGoogleCloudRunV2ContainerPort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2ContainerPort::fromJsonObject(QJsonObject json) {

    m_container_port_isValid = ::OpenAPI::fromJsonValue(m_container_port, json[QString("containerPort")]);
    m_container_port_isSet = !json[QString("containerPort")].isNull() && m_container_port_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIGoogleCloudRunV2ContainerPort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2ContainerPort::asJsonObject() const {
    QJsonObject obj;
    if (m_container_port_isSet) {
        obj.insert(QString("containerPort"), ::OpenAPI::toJsonValue(m_container_port));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

qint32 OAIGoogleCloudRunV2ContainerPort::getContainerPort() const {
    return m_container_port;
}
void OAIGoogleCloudRunV2ContainerPort::setContainerPort(const qint32 &container_port) {
    m_container_port = container_port;
    m_container_port_isSet = true;
}

bool OAIGoogleCloudRunV2ContainerPort::is_container_port_Set() const{
    return m_container_port_isSet;
}

bool OAIGoogleCloudRunV2ContainerPort::is_container_port_Valid() const{
    return m_container_port_isValid;
}

QString OAIGoogleCloudRunV2ContainerPort::getName() const {
    return m_name;
}
void OAIGoogleCloudRunV2ContainerPort::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudRunV2ContainerPort::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudRunV2ContainerPort::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGoogleCloudRunV2ContainerPort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2ContainerPort::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
