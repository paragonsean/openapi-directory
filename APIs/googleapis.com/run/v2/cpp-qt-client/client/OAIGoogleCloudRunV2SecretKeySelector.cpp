/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2SecretKeySelector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2SecretKeySelector::OAIGoogleCloudRunV2SecretKeySelector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2SecretKeySelector::OAIGoogleCloudRunV2SecretKeySelector() {
    this->initializeModel();
}

OAIGoogleCloudRunV2SecretKeySelector::~OAIGoogleCloudRunV2SecretKeySelector() {}

void OAIGoogleCloudRunV2SecretKeySelector::initializeModel() {

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIGoogleCloudRunV2SecretKeySelector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2SecretKeySelector::fromJsonObject(QJsonObject json) {

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIGoogleCloudRunV2SecretKeySelector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2SecretKeySelector::asJsonObject() const {
    QJsonObject obj;
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIGoogleCloudRunV2SecretKeySelector::getSecret() const {
    return m_secret;
}
void OAIGoogleCloudRunV2SecretKeySelector::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIGoogleCloudRunV2SecretKeySelector::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIGoogleCloudRunV2SecretKeySelector::is_secret_Valid() const{
    return m_secret_isValid;
}

QString OAIGoogleCloudRunV2SecretKeySelector::getVersion() const {
    return m_version;
}
void OAIGoogleCloudRunV2SecretKeySelector::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGoogleCloudRunV2SecretKeySelector::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGoogleCloudRunV2SecretKeySelector::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIGoogleCloudRunV2SecretKeySelector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2SecretKeySelector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
