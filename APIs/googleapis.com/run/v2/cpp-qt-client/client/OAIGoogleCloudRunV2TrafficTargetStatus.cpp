/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2TrafficTargetStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2TrafficTargetStatus::OAIGoogleCloudRunV2TrafficTargetStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2TrafficTargetStatus::OAIGoogleCloudRunV2TrafficTargetStatus() {
    this->initializeModel();
}

OAIGoogleCloudRunV2TrafficTargetStatus::~OAIGoogleCloudRunV2TrafficTargetStatus() {}

void OAIGoogleCloudRunV2TrafficTargetStatus::initializeModel() {

    m_percent_isSet = false;
    m_percent_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIGoogleCloudRunV2TrafficTargetStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2TrafficTargetStatus::fromJsonObject(QJsonObject json) {

    m_percent_isValid = ::OpenAPI::fromJsonValue(m_percent, json[QString("percent")]);
    m_percent_isSet = !json[QString("percent")].isNull() && m_percent_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIGoogleCloudRunV2TrafficTargetStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2TrafficTargetStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_percent_isSet) {
        obj.insert(QString("percent"), ::OpenAPI::toJsonValue(m_percent));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

qint32 OAIGoogleCloudRunV2TrafficTargetStatus::getPercent() const {
    return m_percent;
}
void OAIGoogleCloudRunV2TrafficTargetStatus::setPercent(const qint32 &percent) {
    m_percent = percent;
    m_percent_isSet = true;
}

bool OAIGoogleCloudRunV2TrafficTargetStatus::is_percent_Set() const{
    return m_percent_isSet;
}

bool OAIGoogleCloudRunV2TrafficTargetStatus::is_percent_Valid() const{
    return m_percent_isValid;
}

QString OAIGoogleCloudRunV2TrafficTargetStatus::getRevision() const {
    return m_revision;
}
void OAIGoogleCloudRunV2TrafficTargetStatus::setRevision(const QString &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIGoogleCloudRunV2TrafficTargetStatus::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIGoogleCloudRunV2TrafficTargetStatus::is_revision_Valid() const{
    return m_revision_isValid;
}

QString OAIGoogleCloudRunV2TrafficTargetStatus::getTag() const {
    return m_tag;
}
void OAIGoogleCloudRunV2TrafficTargetStatus::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIGoogleCloudRunV2TrafficTargetStatus::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIGoogleCloudRunV2TrafficTargetStatus::is_tag_Valid() const{
    return m_tag_isValid;
}

QString OAIGoogleCloudRunV2TrafficTargetStatus::getType() const {
    return m_type;
}
void OAIGoogleCloudRunV2TrafficTargetStatus::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleCloudRunV2TrafficTargetStatus::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleCloudRunV2TrafficTargetStatus::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGoogleCloudRunV2TrafficTargetStatus::getUri() const {
    return m_uri;
}
void OAIGoogleCloudRunV2TrafficTargetStatus::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIGoogleCloudRunV2TrafficTargetStatus::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIGoogleCloudRunV2TrafficTargetStatus::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIGoogleCloudRunV2TrafficTargetStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2TrafficTargetStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
