/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2VpcAccess.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2VpcAccess::OAIGoogleCloudRunV2VpcAccess(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2VpcAccess::OAIGoogleCloudRunV2VpcAccess() {
    this->initializeModel();
}

OAIGoogleCloudRunV2VpcAccess::~OAIGoogleCloudRunV2VpcAccess() {}

void OAIGoogleCloudRunV2VpcAccess::initializeModel() {

    m_connector_isSet = false;
    m_connector_isValid = false;

    m_egress_isSet = false;
    m_egress_isValid = false;

    m_network_interfaces_isSet = false;
    m_network_interfaces_isValid = false;
}

void OAIGoogleCloudRunV2VpcAccess::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2VpcAccess::fromJsonObject(QJsonObject json) {

    m_connector_isValid = ::OpenAPI::fromJsonValue(m_connector, json[QString("connector")]);
    m_connector_isSet = !json[QString("connector")].isNull() && m_connector_isValid;

    m_egress_isValid = ::OpenAPI::fromJsonValue(m_egress, json[QString("egress")]);
    m_egress_isSet = !json[QString("egress")].isNull() && m_egress_isValid;

    m_network_interfaces_isValid = ::OpenAPI::fromJsonValue(m_network_interfaces, json[QString("networkInterfaces")]);
    m_network_interfaces_isSet = !json[QString("networkInterfaces")].isNull() && m_network_interfaces_isValid;
}

QString OAIGoogleCloudRunV2VpcAccess::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2VpcAccess::asJsonObject() const {
    QJsonObject obj;
    if (m_connector_isSet) {
        obj.insert(QString("connector"), ::OpenAPI::toJsonValue(m_connector));
    }
    if (m_egress_isSet) {
        obj.insert(QString("egress"), ::OpenAPI::toJsonValue(m_egress));
    }
    if (m_network_interfaces.size() > 0) {
        obj.insert(QString("networkInterfaces"), ::OpenAPI::toJsonValue(m_network_interfaces));
    }
    return obj;
}

QString OAIGoogleCloudRunV2VpcAccess::getConnector() const {
    return m_connector;
}
void OAIGoogleCloudRunV2VpcAccess::setConnector(const QString &connector) {
    m_connector = connector;
    m_connector_isSet = true;
}

bool OAIGoogleCloudRunV2VpcAccess::is_connector_Set() const{
    return m_connector_isSet;
}

bool OAIGoogleCloudRunV2VpcAccess::is_connector_Valid() const{
    return m_connector_isValid;
}

QString OAIGoogleCloudRunV2VpcAccess::getEgress() const {
    return m_egress;
}
void OAIGoogleCloudRunV2VpcAccess::setEgress(const QString &egress) {
    m_egress = egress;
    m_egress_isSet = true;
}

bool OAIGoogleCloudRunV2VpcAccess::is_egress_Set() const{
    return m_egress_isSet;
}

bool OAIGoogleCloudRunV2VpcAccess::is_egress_Valid() const{
    return m_egress_isValid;
}

QList<OAIGoogleCloudRunV2NetworkInterface> OAIGoogleCloudRunV2VpcAccess::getNetworkInterfaces() const {
    return m_network_interfaces;
}
void OAIGoogleCloudRunV2VpcAccess::setNetworkInterfaces(const QList<OAIGoogleCloudRunV2NetworkInterface> &network_interfaces) {
    m_network_interfaces = network_interfaces;
    m_network_interfaces_isSet = true;
}

bool OAIGoogleCloudRunV2VpcAccess::is_network_interfaces_Set() const{
    return m_network_interfaces_isSet;
}

bool OAIGoogleCloudRunV2VpcAccess::is_network_interfaces_Valid() const{
    return m_network_interfaces_isValid;
}

bool OAIGoogleCloudRunV2VpcAccess::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_egress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interfaces.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2VpcAccess::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
