/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2EnvVarSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2EnvVarSource::OAIGoogleCloudRunV2EnvVarSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2EnvVarSource::OAIGoogleCloudRunV2EnvVarSource() {
    this->initializeModel();
}

OAIGoogleCloudRunV2EnvVarSource::~OAIGoogleCloudRunV2EnvVarSource() {}

void OAIGoogleCloudRunV2EnvVarSource::initializeModel() {

    m_secret_key_ref_isSet = false;
    m_secret_key_ref_isValid = false;
}

void OAIGoogleCloudRunV2EnvVarSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2EnvVarSource::fromJsonObject(QJsonObject json) {

    m_secret_key_ref_isValid = ::OpenAPI::fromJsonValue(m_secret_key_ref, json[QString("secretKeyRef")]);
    m_secret_key_ref_isSet = !json[QString("secretKeyRef")].isNull() && m_secret_key_ref_isValid;
}

QString OAIGoogleCloudRunV2EnvVarSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2EnvVarSource::asJsonObject() const {
    QJsonObject obj;
    if (m_secret_key_ref.isSet()) {
        obj.insert(QString("secretKeyRef"), ::OpenAPI::toJsonValue(m_secret_key_ref));
    }
    return obj;
}

OAIGoogleCloudRunV2SecretKeySelector OAIGoogleCloudRunV2EnvVarSource::getSecretKeyRef() const {
    return m_secret_key_ref;
}
void OAIGoogleCloudRunV2EnvVarSource::setSecretKeyRef(const OAIGoogleCloudRunV2SecretKeySelector &secret_key_ref) {
    m_secret_key_ref = secret_key_ref;
    m_secret_key_ref_isSet = true;
}

bool OAIGoogleCloudRunV2EnvVarSource::is_secret_key_ref_Set() const{
    return m_secret_key_ref_isSet;
}

bool OAIGoogleCloudRunV2EnvVarSource::is_secret_key_ref_Valid() const{
    return m_secret_key_ref_isValid;
}

bool OAIGoogleCloudRunV2EnvVarSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_secret_key_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2EnvVarSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
