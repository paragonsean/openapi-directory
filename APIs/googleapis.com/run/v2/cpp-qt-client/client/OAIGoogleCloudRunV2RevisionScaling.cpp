/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2RevisionScaling.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2RevisionScaling::OAIGoogleCloudRunV2RevisionScaling(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2RevisionScaling::OAIGoogleCloudRunV2RevisionScaling() {
    this->initializeModel();
}

OAIGoogleCloudRunV2RevisionScaling::~OAIGoogleCloudRunV2RevisionScaling() {}

void OAIGoogleCloudRunV2RevisionScaling::initializeModel() {

    m_max_instance_count_isSet = false;
    m_max_instance_count_isValid = false;

    m_min_instance_count_isSet = false;
    m_min_instance_count_isValid = false;
}

void OAIGoogleCloudRunV2RevisionScaling::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2RevisionScaling::fromJsonObject(QJsonObject json) {

    m_max_instance_count_isValid = ::OpenAPI::fromJsonValue(m_max_instance_count, json[QString("maxInstanceCount")]);
    m_max_instance_count_isSet = !json[QString("maxInstanceCount")].isNull() && m_max_instance_count_isValid;

    m_min_instance_count_isValid = ::OpenAPI::fromJsonValue(m_min_instance_count, json[QString("minInstanceCount")]);
    m_min_instance_count_isSet = !json[QString("minInstanceCount")].isNull() && m_min_instance_count_isValid;
}

QString OAIGoogleCloudRunV2RevisionScaling::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2RevisionScaling::asJsonObject() const {
    QJsonObject obj;
    if (m_max_instance_count_isSet) {
        obj.insert(QString("maxInstanceCount"), ::OpenAPI::toJsonValue(m_max_instance_count));
    }
    if (m_min_instance_count_isSet) {
        obj.insert(QString("minInstanceCount"), ::OpenAPI::toJsonValue(m_min_instance_count));
    }
    return obj;
}

qint32 OAIGoogleCloudRunV2RevisionScaling::getMaxInstanceCount() const {
    return m_max_instance_count;
}
void OAIGoogleCloudRunV2RevisionScaling::setMaxInstanceCount(const qint32 &max_instance_count) {
    m_max_instance_count = max_instance_count;
    m_max_instance_count_isSet = true;
}

bool OAIGoogleCloudRunV2RevisionScaling::is_max_instance_count_Set() const{
    return m_max_instance_count_isSet;
}

bool OAIGoogleCloudRunV2RevisionScaling::is_max_instance_count_Valid() const{
    return m_max_instance_count_isValid;
}

qint32 OAIGoogleCloudRunV2RevisionScaling::getMinInstanceCount() const {
    return m_min_instance_count;
}
void OAIGoogleCloudRunV2RevisionScaling::setMinInstanceCount(const qint32 &min_instance_count) {
    m_min_instance_count = min_instance_count;
    m_min_instance_count_isSet = true;
}

bool OAIGoogleCloudRunV2RevisionScaling::is_min_instance_count_Set() const{
    return m_min_instance_count_isSet;
}

bool OAIGoogleCloudRunV2RevisionScaling::is_min_instance_count_Valid() const{
    return m_min_instance_count_isValid;
}

bool OAIGoogleCloudRunV2RevisionScaling::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2RevisionScaling::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
