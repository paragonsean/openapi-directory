/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2VolumeMount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2VolumeMount::OAIGoogleCloudRunV2VolumeMount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2VolumeMount::OAIGoogleCloudRunV2VolumeMount() {
    this->initializeModel();
}

OAIGoogleCloudRunV2VolumeMount::~OAIGoogleCloudRunV2VolumeMount() {}

void OAIGoogleCloudRunV2VolumeMount::initializeModel() {

    m_mount_path_isSet = false;
    m_mount_path_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIGoogleCloudRunV2VolumeMount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2VolumeMount::fromJsonObject(QJsonObject json) {

    m_mount_path_isValid = ::OpenAPI::fromJsonValue(m_mount_path, json[QString("mountPath")]);
    m_mount_path_isSet = !json[QString("mountPath")].isNull() && m_mount_path_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIGoogleCloudRunV2VolumeMount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2VolumeMount::asJsonObject() const {
    QJsonObject obj;
    if (m_mount_path_isSet) {
        obj.insert(QString("mountPath"), ::OpenAPI::toJsonValue(m_mount_path));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIGoogleCloudRunV2VolumeMount::getMountPath() const {
    return m_mount_path;
}
void OAIGoogleCloudRunV2VolumeMount::setMountPath(const QString &mount_path) {
    m_mount_path = mount_path;
    m_mount_path_isSet = true;
}

bool OAIGoogleCloudRunV2VolumeMount::is_mount_path_Set() const{
    return m_mount_path_isSet;
}

bool OAIGoogleCloudRunV2VolumeMount::is_mount_path_Valid() const{
    return m_mount_path_isValid;
}

QString OAIGoogleCloudRunV2VolumeMount::getName() const {
    return m_name;
}
void OAIGoogleCloudRunV2VolumeMount::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudRunV2VolumeMount::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudRunV2VolumeMount::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGoogleCloudRunV2VolumeMount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mount_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2VolumeMount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
