/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2NetworkInterface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2NetworkInterface::OAIGoogleCloudRunV2NetworkInterface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2NetworkInterface::OAIGoogleCloudRunV2NetworkInterface() {
    this->initializeModel();
}

OAIGoogleCloudRunV2NetworkInterface::~OAIGoogleCloudRunV2NetworkInterface() {}

void OAIGoogleCloudRunV2NetworkInterface::initializeModel() {

    m_network_isSet = false;
    m_network_isValid = false;

    m_subnetwork_isSet = false;
    m_subnetwork_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGoogleCloudRunV2NetworkInterface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2NetworkInterface::fromJsonObject(QJsonObject json) {

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_subnetwork_isValid = ::OpenAPI::fromJsonValue(m_subnetwork, json[QString("subnetwork")]);
    m_subnetwork_isSet = !json[QString("subnetwork")].isNull() && m_subnetwork_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIGoogleCloudRunV2NetworkInterface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2NetworkInterface::asJsonObject() const {
    QJsonObject obj;
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_subnetwork_isSet) {
        obj.insert(QString("subnetwork"), ::OpenAPI::toJsonValue(m_subnetwork));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIGoogleCloudRunV2NetworkInterface::getNetwork() const {
    return m_network;
}
void OAIGoogleCloudRunV2NetworkInterface::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIGoogleCloudRunV2NetworkInterface::is_network_Set() const{
    return m_network_isSet;
}

bool OAIGoogleCloudRunV2NetworkInterface::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIGoogleCloudRunV2NetworkInterface::getSubnetwork() const {
    return m_subnetwork;
}
void OAIGoogleCloudRunV2NetworkInterface::setSubnetwork(const QString &subnetwork) {
    m_subnetwork = subnetwork;
    m_subnetwork_isSet = true;
}

bool OAIGoogleCloudRunV2NetworkInterface::is_subnetwork_Set() const{
    return m_subnetwork_isSet;
}

bool OAIGoogleCloudRunV2NetworkInterface::is_subnetwork_Valid() const{
    return m_subnetwork_isValid;
}

QList<QString> OAIGoogleCloudRunV2NetworkInterface::getTags() const {
    return m_tags;
}
void OAIGoogleCloudRunV2NetworkInterface::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGoogleCloudRunV2NetworkInterface::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGoogleCloudRunV2NetworkInterface::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGoogleCloudRunV2NetworkInterface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnetwork_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2NetworkInterface::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
