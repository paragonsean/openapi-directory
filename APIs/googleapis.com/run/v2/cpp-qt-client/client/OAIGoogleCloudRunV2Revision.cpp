/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2Revision.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2Revision::OAIGoogleCloudRunV2Revision(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2Revision::OAIGoogleCloudRunV2Revision() {
    this->initializeModel();
}

OAIGoogleCloudRunV2Revision::~OAIGoogleCloudRunV2Revision() {}

void OAIGoogleCloudRunV2Revision::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_containers_isSet = false;
    m_containers_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_encryption_key_isSet = false;
    m_encryption_key_isValid = false;

    m_encryption_key_revocation_action_isSet = false;
    m_encryption_key_revocation_action_isValid = false;

    m_encryption_key_shutdown_duration_isSet = false;
    m_encryption_key_shutdown_duration_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_execution_environment_isSet = false;
    m_execution_environment_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_generation_isSet = false;
    m_generation_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_launch_stage_isSet = false;
    m_launch_stage_isValid = false;

    m_log_uri_isSet = false;
    m_log_uri_isValid = false;

    m_max_instance_request_concurrency_isSet = false;
    m_max_instance_request_concurrency_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_observed_generation_isSet = false;
    m_observed_generation_isValid = false;

    m_reconciling_isSet = false;
    m_reconciling_isValid = false;

    m_satisfies_pzs_isSet = false;
    m_satisfies_pzs_isValid = false;

    m_scaling_isSet = false;
    m_scaling_isValid = false;

    m_scaling_status_isSet = false;
    m_scaling_status_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_session_affinity_isSet = false;
    m_session_affinity_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_volumes_isSet = false;
    m_volumes_isValid = false;

    m_vpc_access_isSet = false;
    m_vpc_access_isValid = false;
}

void OAIGoogleCloudRunV2Revision::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2Revision::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_containers_isValid = ::OpenAPI::fromJsonValue(m_containers, json[QString("containers")]);
    m_containers_isSet = !json[QString("containers")].isNull() && m_containers_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_encryption_key, json[QString("encryptionKey")]);
    m_encryption_key_isSet = !json[QString("encryptionKey")].isNull() && m_encryption_key_isValid;

    m_encryption_key_revocation_action_isValid = ::OpenAPI::fromJsonValue(m_encryption_key_revocation_action, json[QString("encryptionKeyRevocationAction")]);
    m_encryption_key_revocation_action_isSet = !json[QString("encryptionKeyRevocationAction")].isNull() && m_encryption_key_revocation_action_isValid;

    m_encryption_key_shutdown_duration_isValid = ::OpenAPI::fromJsonValue(m_encryption_key_shutdown_duration, json[QString("encryptionKeyShutdownDuration")]);
    m_encryption_key_shutdown_duration_isSet = !json[QString("encryptionKeyShutdownDuration")].isNull() && m_encryption_key_shutdown_duration_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_execution_environment_isValid = ::OpenAPI::fromJsonValue(m_execution_environment, json[QString("executionEnvironment")]);
    m_execution_environment_isSet = !json[QString("executionEnvironment")].isNull() && m_execution_environment_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_generation_isValid = ::OpenAPI::fromJsonValue(m_generation, json[QString("generation")]);
    m_generation_isSet = !json[QString("generation")].isNull() && m_generation_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_launch_stage_isValid = ::OpenAPI::fromJsonValue(m_launch_stage, json[QString("launchStage")]);
    m_launch_stage_isSet = !json[QString("launchStage")].isNull() && m_launch_stage_isValid;

    m_log_uri_isValid = ::OpenAPI::fromJsonValue(m_log_uri, json[QString("logUri")]);
    m_log_uri_isSet = !json[QString("logUri")].isNull() && m_log_uri_isValid;

    m_max_instance_request_concurrency_isValid = ::OpenAPI::fromJsonValue(m_max_instance_request_concurrency, json[QString("maxInstanceRequestConcurrency")]);
    m_max_instance_request_concurrency_isSet = !json[QString("maxInstanceRequestConcurrency")].isNull() && m_max_instance_request_concurrency_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_observed_generation_isValid = ::OpenAPI::fromJsonValue(m_observed_generation, json[QString("observedGeneration")]);
    m_observed_generation_isSet = !json[QString("observedGeneration")].isNull() && m_observed_generation_isValid;

    m_reconciling_isValid = ::OpenAPI::fromJsonValue(m_reconciling, json[QString("reconciling")]);
    m_reconciling_isSet = !json[QString("reconciling")].isNull() && m_reconciling_isValid;

    m_satisfies_pzs_isValid = ::OpenAPI::fromJsonValue(m_satisfies_pzs, json[QString("satisfiesPzs")]);
    m_satisfies_pzs_isSet = !json[QString("satisfiesPzs")].isNull() && m_satisfies_pzs_isValid;

    m_scaling_isValid = ::OpenAPI::fromJsonValue(m_scaling, json[QString("scaling")]);
    m_scaling_isSet = !json[QString("scaling")].isNull() && m_scaling_isValid;

    m_scaling_status_isValid = ::OpenAPI::fromJsonValue(m_scaling_status, json[QString("scalingStatus")]);
    m_scaling_status_isSet = !json[QString("scalingStatus")].isNull() && m_scaling_status_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_session_affinity_isValid = ::OpenAPI::fromJsonValue(m_session_affinity, json[QString("sessionAffinity")]);
    m_session_affinity_isSet = !json[QString("sessionAffinity")].isNull() && m_session_affinity_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_volumes_isValid = ::OpenAPI::fromJsonValue(m_volumes, json[QString("volumes")]);
    m_volumes_isSet = !json[QString("volumes")].isNull() && m_volumes_isValid;

    m_vpc_access_isValid = ::OpenAPI::fromJsonValue(m_vpc_access, json[QString("vpcAccess")]);
    m_vpc_access_isSet = !json[QString("vpcAccess")].isNull() && m_vpc_access_isValid;
}

QString OAIGoogleCloudRunV2Revision::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2Revision::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_containers.size() > 0) {
        obj.insert(QString("containers"), ::OpenAPI::toJsonValue(m_containers));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_encryption_key_isSet) {
        obj.insert(QString("encryptionKey"), ::OpenAPI::toJsonValue(m_encryption_key));
    }
    if (m_encryption_key_revocation_action_isSet) {
        obj.insert(QString("encryptionKeyRevocationAction"), ::OpenAPI::toJsonValue(m_encryption_key_revocation_action));
    }
    if (m_encryption_key_shutdown_duration_isSet) {
        obj.insert(QString("encryptionKeyShutdownDuration"), ::OpenAPI::toJsonValue(m_encryption_key_shutdown_duration));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_execution_environment_isSet) {
        obj.insert(QString("executionEnvironment"), ::OpenAPI::toJsonValue(m_execution_environment));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_generation_isSet) {
        obj.insert(QString("generation"), ::OpenAPI::toJsonValue(m_generation));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_launch_stage_isSet) {
        obj.insert(QString("launchStage"), ::OpenAPI::toJsonValue(m_launch_stage));
    }
    if (m_log_uri_isSet) {
        obj.insert(QString("logUri"), ::OpenAPI::toJsonValue(m_log_uri));
    }
    if (m_max_instance_request_concurrency_isSet) {
        obj.insert(QString("maxInstanceRequestConcurrency"), ::OpenAPI::toJsonValue(m_max_instance_request_concurrency));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_observed_generation_isSet) {
        obj.insert(QString("observedGeneration"), ::OpenAPI::toJsonValue(m_observed_generation));
    }
    if (m_reconciling_isSet) {
        obj.insert(QString("reconciling"), ::OpenAPI::toJsonValue(m_reconciling));
    }
    if (m_satisfies_pzs_isSet) {
        obj.insert(QString("satisfiesPzs"), ::OpenAPI::toJsonValue(m_satisfies_pzs));
    }
    if (m_scaling.isSet()) {
        obj.insert(QString("scaling"), ::OpenAPI::toJsonValue(m_scaling));
    }
    if (m_scaling_status.isSet()) {
        obj.insert(QString("scalingStatus"), ::OpenAPI::toJsonValue(m_scaling_status));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_session_affinity_isSet) {
        obj.insert(QString("sessionAffinity"), ::OpenAPI::toJsonValue(m_session_affinity));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_volumes.size() > 0) {
        obj.insert(QString("volumes"), ::OpenAPI::toJsonValue(m_volumes));
    }
    if (m_vpc_access.isSet()) {
        obj.insert(QString("vpcAccess"), ::OpenAPI::toJsonValue(m_vpc_access));
    }
    return obj;
}

QMap<QString, QString> OAIGoogleCloudRunV2Revision::getAnnotations() const {
    return m_annotations;
}
void OAIGoogleCloudRunV2Revision::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QList<OAIGoogleCloudRunV2Condition> OAIGoogleCloudRunV2Revision::getConditions() const {
    return m_conditions;
}
void OAIGoogleCloudRunV2Revision::setConditions(const QList<OAIGoogleCloudRunV2Condition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QList<OAIGoogleCloudRunV2Container> OAIGoogleCloudRunV2Revision::getContainers() const {
    return m_containers;
}
void OAIGoogleCloudRunV2Revision::setContainers(const QList<OAIGoogleCloudRunV2Container> &containers) {
    m_containers = containers;
    m_containers_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_containers_Set() const{
    return m_containers_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_containers_Valid() const{
    return m_containers_isValid;
}

QString OAIGoogleCloudRunV2Revision::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudRunV2Revision::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudRunV2Revision::getDeleteTime() const {
    return m_delete_time;
}
void OAIGoogleCloudRunV2Revision::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

QString OAIGoogleCloudRunV2Revision::getEncryptionKey() const {
    return m_encryption_key;
}
void OAIGoogleCloudRunV2Revision::setEncryptionKey(const QString &encryption_key) {
    m_encryption_key = encryption_key;
    m_encryption_key_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_encryption_key_Set() const{
    return m_encryption_key_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_encryption_key_Valid() const{
    return m_encryption_key_isValid;
}

QString OAIGoogleCloudRunV2Revision::getEncryptionKeyRevocationAction() const {
    return m_encryption_key_revocation_action;
}
void OAIGoogleCloudRunV2Revision::setEncryptionKeyRevocationAction(const QString &encryption_key_revocation_action) {
    m_encryption_key_revocation_action = encryption_key_revocation_action;
    m_encryption_key_revocation_action_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_encryption_key_revocation_action_Set() const{
    return m_encryption_key_revocation_action_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_encryption_key_revocation_action_Valid() const{
    return m_encryption_key_revocation_action_isValid;
}

QString OAIGoogleCloudRunV2Revision::getEncryptionKeyShutdownDuration() const {
    return m_encryption_key_shutdown_duration;
}
void OAIGoogleCloudRunV2Revision::setEncryptionKeyShutdownDuration(const QString &encryption_key_shutdown_duration) {
    m_encryption_key_shutdown_duration = encryption_key_shutdown_duration;
    m_encryption_key_shutdown_duration_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_encryption_key_shutdown_duration_Set() const{
    return m_encryption_key_shutdown_duration_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_encryption_key_shutdown_duration_Valid() const{
    return m_encryption_key_shutdown_duration_isValid;
}

QString OAIGoogleCloudRunV2Revision::getEtag() const {
    return m_etag;
}
void OAIGoogleCloudRunV2Revision::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIGoogleCloudRunV2Revision::getExecutionEnvironment() const {
    return m_execution_environment;
}
void OAIGoogleCloudRunV2Revision::setExecutionEnvironment(const QString &execution_environment) {
    m_execution_environment = execution_environment;
    m_execution_environment_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_execution_environment_Set() const{
    return m_execution_environment_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_execution_environment_Valid() const{
    return m_execution_environment_isValid;
}

QString OAIGoogleCloudRunV2Revision::getExpireTime() const {
    return m_expire_time;
}
void OAIGoogleCloudRunV2Revision::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAIGoogleCloudRunV2Revision::getGeneration() const {
    return m_generation;
}
void OAIGoogleCloudRunV2Revision::setGeneration(const QString &generation) {
    m_generation = generation;
    m_generation_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_generation_Set() const{
    return m_generation_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_generation_Valid() const{
    return m_generation_isValid;
}

QMap<QString, QString> OAIGoogleCloudRunV2Revision::getLabels() const {
    return m_labels;
}
void OAIGoogleCloudRunV2Revision::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIGoogleCloudRunV2Revision::getLaunchStage() const {
    return m_launch_stage;
}
void OAIGoogleCloudRunV2Revision::setLaunchStage(const QString &launch_stage) {
    m_launch_stage = launch_stage;
    m_launch_stage_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_launch_stage_Set() const{
    return m_launch_stage_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_launch_stage_Valid() const{
    return m_launch_stage_isValid;
}

QString OAIGoogleCloudRunV2Revision::getLogUri() const {
    return m_log_uri;
}
void OAIGoogleCloudRunV2Revision::setLogUri(const QString &log_uri) {
    m_log_uri = log_uri;
    m_log_uri_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_log_uri_Set() const{
    return m_log_uri_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_log_uri_Valid() const{
    return m_log_uri_isValid;
}

qint32 OAIGoogleCloudRunV2Revision::getMaxInstanceRequestConcurrency() const {
    return m_max_instance_request_concurrency;
}
void OAIGoogleCloudRunV2Revision::setMaxInstanceRequestConcurrency(const qint32 &max_instance_request_concurrency) {
    m_max_instance_request_concurrency = max_instance_request_concurrency;
    m_max_instance_request_concurrency_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_max_instance_request_concurrency_Set() const{
    return m_max_instance_request_concurrency_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_max_instance_request_concurrency_Valid() const{
    return m_max_instance_request_concurrency_isValid;
}

QString OAIGoogleCloudRunV2Revision::getName() const {
    return m_name;
}
void OAIGoogleCloudRunV2Revision::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleCloudRunV2Revision::getObservedGeneration() const {
    return m_observed_generation;
}
void OAIGoogleCloudRunV2Revision::setObservedGeneration(const QString &observed_generation) {
    m_observed_generation = observed_generation;
    m_observed_generation_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_observed_generation_Set() const{
    return m_observed_generation_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_observed_generation_Valid() const{
    return m_observed_generation_isValid;
}

bool OAIGoogleCloudRunV2Revision::isReconciling() const {
    return m_reconciling;
}
void OAIGoogleCloudRunV2Revision::setReconciling(const bool &reconciling) {
    m_reconciling = reconciling;
    m_reconciling_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_reconciling_Set() const{
    return m_reconciling_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_reconciling_Valid() const{
    return m_reconciling_isValid;
}

bool OAIGoogleCloudRunV2Revision::isSatisfiesPzs() const {
    return m_satisfies_pzs;
}
void OAIGoogleCloudRunV2Revision::setSatisfiesPzs(const bool &satisfies_pzs) {
    m_satisfies_pzs = satisfies_pzs;
    m_satisfies_pzs_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_satisfies_pzs_Set() const{
    return m_satisfies_pzs_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_satisfies_pzs_Valid() const{
    return m_satisfies_pzs_isValid;
}

OAIGoogleCloudRunV2RevisionScaling OAIGoogleCloudRunV2Revision::getScaling() const {
    return m_scaling;
}
void OAIGoogleCloudRunV2Revision::setScaling(const OAIGoogleCloudRunV2RevisionScaling &scaling) {
    m_scaling = scaling;
    m_scaling_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_scaling_Set() const{
    return m_scaling_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_scaling_Valid() const{
    return m_scaling_isValid;
}

OAIGoogleCloudRunV2RevisionScalingStatus OAIGoogleCloudRunV2Revision::getScalingStatus() const {
    return m_scaling_status;
}
void OAIGoogleCloudRunV2Revision::setScalingStatus(const OAIGoogleCloudRunV2RevisionScalingStatus &scaling_status) {
    m_scaling_status = scaling_status;
    m_scaling_status_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_scaling_status_Set() const{
    return m_scaling_status_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_scaling_status_Valid() const{
    return m_scaling_status_isValid;
}

QString OAIGoogleCloudRunV2Revision::getService() const {
    return m_service;
}
void OAIGoogleCloudRunV2Revision::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_service_Set() const{
    return m_service_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_service_Valid() const{
    return m_service_isValid;
}

QString OAIGoogleCloudRunV2Revision::getServiceAccount() const {
    return m_service_account;
}
void OAIGoogleCloudRunV2Revision::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_service_account_Valid() const{
    return m_service_account_isValid;
}

bool OAIGoogleCloudRunV2Revision::isSessionAffinity() const {
    return m_session_affinity;
}
void OAIGoogleCloudRunV2Revision::setSessionAffinity(const bool &session_affinity) {
    m_session_affinity = session_affinity;
    m_session_affinity_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_session_affinity_Set() const{
    return m_session_affinity_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_session_affinity_Valid() const{
    return m_session_affinity_isValid;
}

QString OAIGoogleCloudRunV2Revision::getTimeout() const {
    return m_timeout;
}
void OAIGoogleCloudRunV2Revision::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_timeout_Valid() const{
    return m_timeout_isValid;
}

QString OAIGoogleCloudRunV2Revision::getUid() const {
    return m_uid;
}
void OAIGoogleCloudRunV2Revision::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIGoogleCloudRunV2Revision::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudRunV2Revision::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QList<OAIGoogleCloudRunV2Volume> OAIGoogleCloudRunV2Revision::getVolumes() const {
    return m_volumes;
}
void OAIGoogleCloudRunV2Revision::setVolumes(const QList<OAIGoogleCloudRunV2Volume> &volumes) {
    m_volumes = volumes;
    m_volumes_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_volumes_Set() const{
    return m_volumes_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_volumes_Valid() const{
    return m_volumes_isValid;
}

OAIGoogleCloudRunV2VpcAccess OAIGoogleCloudRunV2Revision::getVpcAccess() const {
    return m_vpc_access;
}
void OAIGoogleCloudRunV2Revision::setVpcAccess(const OAIGoogleCloudRunV2VpcAccess &vpc_access) {
    m_vpc_access = vpc_access;
    m_vpc_access_isSet = true;
}

bool OAIGoogleCloudRunV2Revision::is_vpc_access_Set() const{
    return m_vpc_access_isSet;
}

bool OAIGoogleCloudRunV2Revision::is_vpc_access_Valid() const{
    return m_vpc_access_isValid;
}

bool OAIGoogleCloudRunV2Revision::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_containers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_revocation_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_shutdown_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_instance_request_concurrency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observed_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfies_pzs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_affinity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_access.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2Revision::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
