/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2RevisionTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2RevisionTemplate::OAIGoogleCloudRunV2RevisionTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2RevisionTemplate::OAIGoogleCloudRunV2RevisionTemplate() {
    this->initializeModel();
}

OAIGoogleCloudRunV2RevisionTemplate::~OAIGoogleCloudRunV2RevisionTemplate() {}

void OAIGoogleCloudRunV2RevisionTemplate::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_containers_isSet = false;
    m_containers_isValid = false;

    m_encryption_key_isSet = false;
    m_encryption_key_isValid = false;

    m_execution_environment_isSet = false;
    m_execution_environment_isValid = false;

    m_health_check_disabled_isSet = false;
    m_health_check_disabled_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_max_instance_request_concurrency_isSet = false;
    m_max_instance_request_concurrency_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_scaling_isSet = false;
    m_scaling_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_session_affinity_isSet = false;
    m_session_affinity_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_volumes_isSet = false;
    m_volumes_isValid = false;

    m_vpc_access_isSet = false;
    m_vpc_access_isValid = false;
}

void OAIGoogleCloudRunV2RevisionTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2RevisionTemplate::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_containers_isValid = ::OpenAPI::fromJsonValue(m_containers, json[QString("containers")]);
    m_containers_isSet = !json[QString("containers")].isNull() && m_containers_isValid;

    m_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_encryption_key, json[QString("encryptionKey")]);
    m_encryption_key_isSet = !json[QString("encryptionKey")].isNull() && m_encryption_key_isValid;

    m_execution_environment_isValid = ::OpenAPI::fromJsonValue(m_execution_environment, json[QString("executionEnvironment")]);
    m_execution_environment_isSet = !json[QString("executionEnvironment")].isNull() && m_execution_environment_isValid;

    m_health_check_disabled_isValid = ::OpenAPI::fromJsonValue(m_health_check_disabled, json[QString("healthCheckDisabled")]);
    m_health_check_disabled_isSet = !json[QString("healthCheckDisabled")].isNull() && m_health_check_disabled_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_max_instance_request_concurrency_isValid = ::OpenAPI::fromJsonValue(m_max_instance_request_concurrency, json[QString("maxInstanceRequestConcurrency")]);
    m_max_instance_request_concurrency_isSet = !json[QString("maxInstanceRequestConcurrency")].isNull() && m_max_instance_request_concurrency_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_scaling_isValid = ::OpenAPI::fromJsonValue(m_scaling, json[QString("scaling")]);
    m_scaling_isSet = !json[QString("scaling")].isNull() && m_scaling_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_session_affinity_isValid = ::OpenAPI::fromJsonValue(m_session_affinity, json[QString("sessionAffinity")]);
    m_session_affinity_isSet = !json[QString("sessionAffinity")].isNull() && m_session_affinity_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_volumes_isValid = ::OpenAPI::fromJsonValue(m_volumes, json[QString("volumes")]);
    m_volumes_isSet = !json[QString("volumes")].isNull() && m_volumes_isValid;

    m_vpc_access_isValid = ::OpenAPI::fromJsonValue(m_vpc_access, json[QString("vpcAccess")]);
    m_vpc_access_isSet = !json[QString("vpcAccess")].isNull() && m_vpc_access_isValid;
}

QString OAIGoogleCloudRunV2RevisionTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2RevisionTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_containers.size() > 0) {
        obj.insert(QString("containers"), ::OpenAPI::toJsonValue(m_containers));
    }
    if (m_encryption_key_isSet) {
        obj.insert(QString("encryptionKey"), ::OpenAPI::toJsonValue(m_encryption_key));
    }
    if (m_execution_environment_isSet) {
        obj.insert(QString("executionEnvironment"), ::OpenAPI::toJsonValue(m_execution_environment));
    }
    if (m_health_check_disabled_isSet) {
        obj.insert(QString("healthCheckDisabled"), ::OpenAPI::toJsonValue(m_health_check_disabled));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_max_instance_request_concurrency_isSet) {
        obj.insert(QString("maxInstanceRequestConcurrency"), ::OpenAPI::toJsonValue(m_max_instance_request_concurrency));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_scaling.isSet()) {
        obj.insert(QString("scaling"), ::OpenAPI::toJsonValue(m_scaling));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_session_affinity_isSet) {
        obj.insert(QString("sessionAffinity"), ::OpenAPI::toJsonValue(m_session_affinity));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_volumes.size() > 0) {
        obj.insert(QString("volumes"), ::OpenAPI::toJsonValue(m_volumes));
    }
    if (m_vpc_access.isSet()) {
        obj.insert(QString("vpcAccess"), ::OpenAPI::toJsonValue(m_vpc_access));
    }
    return obj;
}

QMap<QString, QString> OAIGoogleCloudRunV2RevisionTemplate::getAnnotations() const {
    return m_annotations;
}
void OAIGoogleCloudRunV2RevisionTemplate::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QList<OAIGoogleCloudRunV2Container> OAIGoogleCloudRunV2RevisionTemplate::getContainers() const {
    return m_containers;
}
void OAIGoogleCloudRunV2RevisionTemplate::setContainers(const QList<OAIGoogleCloudRunV2Container> &containers) {
    m_containers = containers;
    m_containers_isSet = true;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_containers_Set() const{
    return m_containers_isSet;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_containers_Valid() const{
    return m_containers_isValid;
}

QString OAIGoogleCloudRunV2RevisionTemplate::getEncryptionKey() const {
    return m_encryption_key;
}
void OAIGoogleCloudRunV2RevisionTemplate::setEncryptionKey(const QString &encryption_key) {
    m_encryption_key = encryption_key;
    m_encryption_key_isSet = true;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_encryption_key_Set() const{
    return m_encryption_key_isSet;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_encryption_key_Valid() const{
    return m_encryption_key_isValid;
}

QString OAIGoogleCloudRunV2RevisionTemplate::getExecutionEnvironment() const {
    return m_execution_environment;
}
void OAIGoogleCloudRunV2RevisionTemplate::setExecutionEnvironment(const QString &execution_environment) {
    m_execution_environment = execution_environment;
    m_execution_environment_isSet = true;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_execution_environment_Set() const{
    return m_execution_environment_isSet;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_execution_environment_Valid() const{
    return m_execution_environment_isValid;
}

bool OAIGoogleCloudRunV2RevisionTemplate::isHealthCheckDisabled() const {
    return m_health_check_disabled;
}
void OAIGoogleCloudRunV2RevisionTemplate::setHealthCheckDisabled(const bool &health_check_disabled) {
    m_health_check_disabled = health_check_disabled;
    m_health_check_disabled_isSet = true;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_health_check_disabled_Set() const{
    return m_health_check_disabled_isSet;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_health_check_disabled_Valid() const{
    return m_health_check_disabled_isValid;
}

QMap<QString, QString> OAIGoogleCloudRunV2RevisionTemplate::getLabels() const {
    return m_labels;
}
void OAIGoogleCloudRunV2RevisionTemplate::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_labels_Valid() const{
    return m_labels_isValid;
}

qint32 OAIGoogleCloudRunV2RevisionTemplate::getMaxInstanceRequestConcurrency() const {
    return m_max_instance_request_concurrency;
}
void OAIGoogleCloudRunV2RevisionTemplate::setMaxInstanceRequestConcurrency(const qint32 &max_instance_request_concurrency) {
    m_max_instance_request_concurrency = max_instance_request_concurrency;
    m_max_instance_request_concurrency_isSet = true;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_max_instance_request_concurrency_Set() const{
    return m_max_instance_request_concurrency_isSet;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_max_instance_request_concurrency_Valid() const{
    return m_max_instance_request_concurrency_isValid;
}

QString OAIGoogleCloudRunV2RevisionTemplate::getRevision() const {
    return m_revision;
}
void OAIGoogleCloudRunV2RevisionTemplate::setRevision(const QString &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_revision_Valid() const{
    return m_revision_isValid;
}

OAIGoogleCloudRunV2RevisionScaling OAIGoogleCloudRunV2RevisionTemplate::getScaling() const {
    return m_scaling;
}
void OAIGoogleCloudRunV2RevisionTemplate::setScaling(const OAIGoogleCloudRunV2RevisionScaling &scaling) {
    m_scaling = scaling;
    m_scaling_isSet = true;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_scaling_Set() const{
    return m_scaling_isSet;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_scaling_Valid() const{
    return m_scaling_isValid;
}

QString OAIGoogleCloudRunV2RevisionTemplate::getServiceAccount() const {
    return m_service_account;
}
void OAIGoogleCloudRunV2RevisionTemplate::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_service_account_Valid() const{
    return m_service_account_isValid;
}

bool OAIGoogleCloudRunV2RevisionTemplate::isSessionAffinity() const {
    return m_session_affinity;
}
void OAIGoogleCloudRunV2RevisionTemplate::setSessionAffinity(const bool &session_affinity) {
    m_session_affinity = session_affinity;
    m_session_affinity_isSet = true;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_session_affinity_Set() const{
    return m_session_affinity_isSet;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_session_affinity_Valid() const{
    return m_session_affinity_isValid;
}

QString OAIGoogleCloudRunV2RevisionTemplate::getTimeout() const {
    return m_timeout;
}
void OAIGoogleCloudRunV2RevisionTemplate::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_timeout_Valid() const{
    return m_timeout_isValid;
}

QList<OAIGoogleCloudRunV2Volume> OAIGoogleCloudRunV2RevisionTemplate::getVolumes() const {
    return m_volumes;
}
void OAIGoogleCloudRunV2RevisionTemplate::setVolumes(const QList<OAIGoogleCloudRunV2Volume> &volumes) {
    m_volumes = volumes;
    m_volumes_isSet = true;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_volumes_Set() const{
    return m_volumes_isSet;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_volumes_Valid() const{
    return m_volumes_isValid;
}

OAIGoogleCloudRunV2VpcAccess OAIGoogleCloudRunV2RevisionTemplate::getVpcAccess() const {
    return m_vpc_access;
}
void OAIGoogleCloudRunV2RevisionTemplate::setVpcAccess(const OAIGoogleCloudRunV2VpcAccess &vpc_access) {
    m_vpc_access = vpc_access;
    m_vpc_access_isSet = true;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_vpc_access_Set() const{
    return m_vpc_access_isSet;
}

bool OAIGoogleCloudRunV2RevisionTemplate::is_vpc_access_Valid() const{
    return m_vpc_access_isValid;
}

bool OAIGoogleCloudRunV2RevisionTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_containers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_instance_request_concurrency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_affinity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_access.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2RevisionTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
