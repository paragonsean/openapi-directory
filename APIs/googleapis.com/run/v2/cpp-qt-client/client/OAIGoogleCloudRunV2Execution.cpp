/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2Execution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2Execution::OAIGoogleCloudRunV2Execution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2Execution::OAIGoogleCloudRunV2Execution() {
    this->initializeModel();
}

OAIGoogleCloudRunV2Execution::~OAIGoogleCloudRunV2Execution() {}

void OAIGoogleCloudRunV2Execution::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_cancelled_count_isSet = false;
    m_cancelled_count_isValid = false;

    m_completion_time_isSet = false;
    m_completion_time_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_failed_count_isSet = false;
    m_failed_count_isValid = false;

    m_generation_isSet = false;
    m_generation_isValid = false;

    m_job_isSet = false;
    m_job_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_launch_stage_isSet = false;
    m_launch_stage_isValid = false;

    m_log_uri_isSet = false;
    m_log_uri_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_observed_generation_isSet = false;
    m_observed_generation_isValid = false;

    m_parallelism_isSet = false;
    m_parallelism_isValid = false;

    m_reconciling_isSet = false;
    m_reconciling_isValid = false;

    m_retried_count_isSet = false;
    m_retried_count_isValid = false;

    m_running_count_isSet = false;
    m_running_count_isValid = false;

    m_satisfies_pzs_isSet = false;
    m_satisfies_pzs_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_succeeded_count_isSet = false;
    m_succeeded_count_isValid = false;

    m_task_count_isSet = false;
    m_task_count_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGoogleCloudRunV2Execution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2Execution::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_cancelled_count_isValid = ::OpenAPI::fromJsonValue(m_cancelled_count, json[QString("cancelledCount")]);
    m_cancelled_count_isSet = !json[QString("cancelledCount")].isNull() && m_cancelled_count_isValid;

    m_completion_time_isValid = ::OpenAPI::fromJsonValue(m_completion_time, json[QString("completionTime")]);
    m_completion_time_isSet = !json[QString("completionTime")].isNull() && m_completion_time_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_failed_count_isValid = ::OpenAPI::fromJsonValue(m_failed_count, json[QString("failedCount")]);
    m_failed_count_isSet = !json[QString("failedCount")].isNull() && m_failed_count_isValid;

    m_generation_isValid = ::OpenAPI::fromJsonValue(m_generation, json[QString("generation")]);
    m_generation_isSet = !json[QString("generation")].isNull() && m_generation_isValid;

    m_job_isValid = ::OpenAPI::fromJsonValue(m_job, json[QString("job")]);
    m_job_isSet = !json[QString("job")].isNull() && m_job_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_launch_stage_isValid = ::OpenAPI::fromJsonValue(m_launch_stage, json[QString("launchStage")]);
    m_launch_stage_isSet = !json[QString("launchStage")].isNull() && m_launch_stage_isValid;

    m_log_uri_isValid = ::OpenAPI::fromJsonValue(m_log_uri, json[QString("logUri")]);
    m_log_uri_isSet = !json[QString("logUri")].isNull() && m_log_uri_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_observed_generation_isValid = ::OpenAPI::fromJsonValue(m_observed_generation, json[QString("observedGeneration")]);
    m_observed_generation_isSet = !json[QString("observedGeneration")].isNull() && m_observed_generation_isValid;

    m_parallelism_isValid = ::OpenAPI::fromJsonValue(m_parallelism, json[QString("parallelism")]);
    m_parallelism_isSet = !json[QString("parallelism")].isNull() && m_parallelism_isValid;

    m_reconciling_isValid = ::OpenAPI::fromJsonValue(m_reconciling, json[QString("reconciling")]);
    m_reconciling_isSet = !json[QString("reconciling")].isNull() && m_reconciling_isValid;

    m_retried_count_isValid = ::OpenAPI::fromJsonValue(m_retried_count, json[QString("retriedCount")]);
    m_retried_count_isSet = !json[QString("retriedCount")].isNull() && m_retried_count_isValid;

    m_running_count_isValid = ::OpenAPI::fromJsonValue(m_running_count, json[QString("runningCount")]);
    m_running_count_isSet = !json[QString("runningCount")].isNull() && m_running_count_isValid;

    m_satisfies_pzs_isValid = ::OpenAPI::fromJsonValue(m_satisfies_pzs, json[QString("satisfiesPzs")]);
    m_satisfies_pzs_isSet = !json[QString("satisfiesPzs")].isNull() && m_satisfies_pzs_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_succeeded_count_isValid = ::OpenAPI::fromJsonValue(m_succeeded_count, json[QString("succeededCount")]);
    m_succeeded_count_isSet = !json[QString("succeededCount")].isNull() && m_succeeded_count_isValid;

    m_task_count_isValid = ::OpenAPI::fromJsonValue(m_task_count, json[QString("taskCount")]);
    m_task_count_isSet = !json[QString("taskCount")].isNull() && m_task_count_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGoogleCloudRunV2Execution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2Execution::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_cancelled_count_isSet) {
        obj.insert(QString("cancelledCount"), ::OpenAPI::toJsonValue(m_cancelled_count));
    }
    if (m_completion_time_isSet) {
        obj.insert(QString("completionTime"), ::OpenAPI::toJsonValue(m_completion_time));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_failed_count_isSet) {
        obj.insert(QString("failedCount"), ::OpenAPI::toJsonValue(m_failed_count));
    }
    if (m_generation_isSet) {
        obj.insert(QString("generation"), ::OpenAPI::toJsonValue(m_generation));
    }
    if (m_job_isSet) {
        obj.insert(QString("job"), ::OpenAPI::toJsonValue(m_job));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_launch_stage_isSet) {
        obj.insert(QString("launchStage"), ::OpenAPI::toJsonValue(m_launch_stage));
    }
    if (m_log_uri_isSet) {
        obj.insert(QString("logUri"), ::OpenAPI::toJsonValue(m_log_uri));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_observed_generation_isSet) {
        obj.insert(QString("observedGeneration"), ::OpenAPI::toJsonValue(m_observed_generation));
    }
    if (m_parallelism_isSet) {
        obj.insert(QString("parallelism"), ::OpenAPI::toJsonValue(m_parallelism));
    }
    if (m_reconciling_isSet) {
        obj.insert(QString("reconciling"), ::OpenAPI::toJsonValue(m_reconciling));
    }
    if (m_retried_count_isSet) {
        obj.insert(QString("retriedCount"), ::OpenAPI::toJsonValue(m_retried_count));
    }
    if (m_running_count_isSet) {
        obj.insert(QString("runningCount"), ::OpenAPI::toJsonValue(m_running_count));
    }
    if (m_satisfies_pzs_isSet) {
        obj.insert(QString("satisfiesPzs"), ::OpenAPI::toJsonValue(m_satisfies_pzs));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_succeeded_count_isSet) {
        obj.insert(QString("succeededCount"), ::OpenAPI::toJsonValue(m_succeeded_count));
    }
    if (m_task_count_isSet) {
        obj.insert(QString("taskCount"), ::OpenAPI::toJsonValue(m_task_count));
    }
    if (m_r_template.isSet()) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QMap<QString, QString> OAIGoogleCloudRunV2Execution::getAnnotations() const {
    return m_annotations;
}
void OAIGoogleCloudRunV2Execution::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_annotations_Valid() const{
    return m_annotations_isValid;
}

qint32 OAIGoogleCloudRunV2Execution::getCancelledCount() const {
    return m_cancelled_count;
}
void OAIGoogleCloudRunV2Execution::setCancelledCount(const qint32 &cancelled_count) {
    m_cancelled_count = cancelled_count;
    m_cancelled_count_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_cancelled_count_Set() const{
    return m_cancelled_count_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_cancelled_count_Valid() const{
    return m_cancelled_count_isValid;
}

QString OAIGoogleCloudRunV2Execution::getCompletionTime() const {
    return m_completion_time;
}
void OAIGoogleCloudRunV2Execution::setCompletionTime(const QString &completion_time) {
    m_completion_time = completion_time;
    m_completion_time_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_completion_time_Set() const{
    return m_completion_time_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_completion_time_Valid() const{
    return m_completion_time_isValid;
}

QList<OAIGoogleCloudRunV2Condition> OAIGoogleCloudRunV2Execution::getConditions() const {
    return m_conditions;
}
void OAIGoogleCloudRunV2Execution::setConditions(const QList<OAIGoogleCloudRunV2Condition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QString OAIGoogleCloudRunV2Execution::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudRunV2Execution::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudRunV2Execution::getDeleteTime() const {
    return m_delete_time;
}
void OAIGoogleCloudRunV2Execution::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

QString OAIGoogleCloudRunV2Execution::getEtag() const {
    return m_etag;
}
void OAIGoogleCloudRunV2Execution::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIGoogleCloudRunV2Execution::getExpireTime() const {
    return m_expire_time;
}
void OAIGoogleCloudRunV2Execution::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

qint32 OAIGoogleCloudRunV2Execution::getFailedCount() const {
    return m_failed_count;
}
void OAIGoogleCloudRunV2Execution::setFailedCount(const qint32 &failed_count) {
    m_failed_count = failed_count;
    m_failed_count_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_failed_count_Set() const{
    return m_failed_count_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_failed_count_Valid() const{
    return m_failed_count_isValid;
}

QString OAIGoogleCloudRunV2Execution::getGeneration() const {
    return m_generation;
}
void OAIGoogleCloudRunV2Execution::setGeneration(const QString &generation) {
    m_generation = generation;
    m_generation_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_generation_Set() const{
    return m_generation_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_generation_Valid() const{
    return m_generation_isValid;
}

QString OAIGoogleCloudRunV2Execution::getJob() const {
    return m_job;
}
void OAIGoogleCloudRunV2Execution::setJob(const QString &job) {
    m_job = job;
    m_job_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_job_Set() const{
    return m_job_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_job_Valid() const{
    return m_job_isValid;
}

QMap<QString, QString> OAIGoogleCloudRunV2Execution::getLabels() const {
    return m_labels;
}
void OAIGoogleCloudRunV2Execution::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIGoogleCloudRunV2Execution::getLaunchStage() const {
    return m_launch_stage;
}
void OAIGoogleCloudRunV2Execution::setLaunchStage(const QString &launch_stage) {
    m_launch_stage = launch_stage;
    m_launch_stage_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_launch_stage_Set() const{
    return m_launch_stage_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_launch_stage_Valid() const{
    return m_launch_stage_isValid;
}

QString OAIGoogleCloudRunV2Execution::getLogUri() const {
    return m_log_uri;
}
void OAIGoogleCloudRunV2Execution::setLogUri(const QString &log_uri) {
    m_log_uri = log_uri;
    m_log_uri_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_log_uri_Set() const{
    return m_log_uri_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_log_uri_Valid() const{
    return m_log_uri_isValid;
}

QString OAIGoogleCloudRunV2Execution::getName() const {
    return m_name;
}
void OAIGoogleCloudRunV2Execution::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleCloudRunV2Execution::getObservedGeneration() const {
    return m_observed_generation;
}
void OAIGoogleCloudRunV2Execution::setObservedGeneration(const QString &observed_generation) {
    m_observed_generation = observed_generation;
    m_observed_generation_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_observed_generation_Set() const{
    return m_observed_generation_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_observed_generation_Valid() const{
    return m_observed_generation_isValid;
}

qint32 OAIGoogleCloudRunV2Execution::getParallelism() const {
    return m_parallelism;
}
void OAIGoogleCloudRunV2Execution::setParallelism(const qint32 &parallelism) {
    m_parallelism = parallelism;
    m_parallelism_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_parallelism_Set() const{
    return m_parallelism_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_parallelism_Valid() const{
    return m_parallelism_isValid;
}

bool OAIGoogleCloudRunV2Execution::isReconciling() const {
    return m_reconciling;
}
void OAIGoogleCloudRunV2Execution::setReconciling(const bool &reconciling) {
    m_reconciling = reconciling;
    m_reconciling_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_reconciling_Set() const{
    return m_reconciling_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_reconciling_Valid() const{
    return m_reconciling_isValid;
}

qint32 OAIGoogleCloudRunV2Execution::getRetriedCount() const {
    return m_retried_count;
}
void OAIGoogleCloudRunV2Execution::setRetriedCount(const qint32 &retried_count) {
    m_retried_count = retried_count;
    m_retried_count_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_retried_count_Set() const{
    return m_retried_count_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_retried_count_Valid() const{
    return m_retried_count_isValid;
}

qint32 OAIGoogleCloudRunV2Execution::getRunningCount() const {
    return m_running_count;
}
void OAIGoogleCloudRunV2Execution::setRunningCount(const qint32 &running_count) {
    m_running_count = running_count;
    m_running_count_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_running_count_Set() const{
    return m_running_count_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_running_count_Valid() const{
    return m_running_count_isValid;
}

bool OAIGoogleCloudRunV2Execution::isSatisfiesPzs() const {
    return m_satisfies_pzs;
}
void OAIGoogleCloudRunV2Execution::setSatisfiesPzs(const bool &satisfies_pzs) {
    m_satisfies_pzs = satisfies_pzs;
    m_satisfies_pzs_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_satisfies_pzs_Set() const{
    return m_satisfies_pzs_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_satisfies_pzs_Valid() const{
    return m_satisfies_pzs_isValid;
}

QString OAIGoogleCloudRunV2Execution::getStartTime() const {
    return m_start_time;
}
void OAIGoogleCloudRunV2Execution::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_start_time_Valid() const{
    return m_start_time_isValid;
}

qint32 OAIGoogleCloudRunV2Execution::getSucceededCount() const {
    return m_succeeded_count;
}
void OAIGoogleCloudRunV2Execution::setSucceededCount(const qint32 &succeeded_count) {
    m_succeeded_count = succeeded_count;
    m_succeeded_count_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_succeeded_count_Set() const{
    return m_succeeded_count_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_succeeded_count_Valid() const{
    return m_succeeded_count_isValid;
}

qint32 OAIGoogleCloudRunV2Execution::getTaskCount() const {
    return m_task_count;
}
void OAIGoogleCloudRunV2Execution::setTaskCount(const qint32 &task_count) {
    m_task_count = task_count;
    m_task_count_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_task_count_Set() const{
    return m_task_count_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_task_count_Valid() const{
    return m_task_count_isValid;
}

OAIGoogleCloudRunV2TaskTemplate OAIGoogleCloudRunV2Execution::getRTemplate() const {
    return m_r_template;
}
void OAIGoogleCloudRunV2Execution::setRTemplate(const OAIGoogleCloudRunV2TaskTemplate &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QString OAIGoogleCloudRunV2Execution::getUid() const {
    return m_uid;
}
void OAIGoogleCloudRunV2Execution::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIGoogleCloudRunV2Execution::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudRunV2Execution::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudRunV2Execution::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudRunV2Execution::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGoogleCloudRunV2Execution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancelled_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observed_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallelism_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retried_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfies_pzs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_succeeded_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2Execution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
