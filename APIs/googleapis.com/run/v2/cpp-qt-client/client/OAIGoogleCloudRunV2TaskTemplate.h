/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudRunV2TaskTemplate.h
 *
 * TaskTemplate describes the data a task should have when created from a template.
 */

#ifndef OAIGoogleCloudRunV2TaskTemplate_H
#define OAIGoogleCloudRunV2TaskTemplate_H

#include <QJsonObject>

#include "OAIGoogleCloudRunV2Container.h"
#include "OAIGoogleCloudRunV2Volume.h"
#include "OAIGoogleCloudRunV2VpcAccess.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleCloudRunV2Container;
class OAIGoogleCloudRunV2Volume;
class OAIGoogleCloudRunV2VpcAccess;

class OAIGoogleCloudRunV2TaskTemplate : public OAIObject {
public:
    OAIGoogleCloudRunV2TaskTemplate();
    OAIGoogleCloudRunV2TaskTemplate(QString json);
    ~OAIGoogleCloudRunV2TaskTemplate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIGoogleCloudRunV2Container> getContainers() const;
    void setContainers(const QList<OAIGoogleCloudRunV2Container> &containers);
    bool is_containers_Set() const;
    bool is_containers_Valid() const;

    QString getEncryptionKey() const;
    void setEncryptionKey(const QString &encryption_key);
    bool is_encryption_key_Set() const;
    bool is_encryption_key_Valid() const;

    QString getExecutionEnvironment() const;
    void setExecutionEnvironment(const QString &execution_environment);
    bool is_execution_environment_Set() const;
    bool is_execution_environment_Valid() const;

    qint32 getMaxRetries() const;
    void setMaxRetries(const qint32 &max_retries);
    bool is_max_retries_Set() const;
    bool is_max_retries_Valid() const;

    QString getServiceAccount() const;
    void setServiceAccount(const QString &service_account);
    bool is_service_account_Set() const;
    bool is_service_account_Valid() const;

    QString getTimeout() const;
    void setTimeout(const QString &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    QList<OAIGoogleCloudRunV2Volume> getVolumes() const;
    void setVolumes(const QList<OAIGoogleCloudRunV2Volume> &volumes);
    bool is_volumes_Set() const;
    bool is_volumes_Valid() const;

    OAIGoogleCloudRunV2VpcAccess getVpcAccess() const;
    void setVpcAccess(const OAIGoogleCloudRunV2VpcAccess &vpc_access);
    bool is_vpc_access_Set() const;
    bool is_vpc_access_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIGoogleCloudRunV2Container> m_containers;
    bool m_containers_isSet;
    bool m_containers_isValid;

    QString m_encryption_key;
    bool m_encryption_key_isSet;
    bool m_encryption_key_isValid;

    QString m_execution_environment;
    bool m_execution_environment_isSet;
    bool m_execution_environment_isValid;

    qint32 m_max_retries;
    bool m_max_retries_isSet;
    bool m_max_retries_isValid;

    QString m_service_account;
    bool m_service_account_isSet;
    bool m_service_account_isValid;

    QString m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;

    QList<OAIGoogleCloudRunV2Volume> m_volumes;
    bool m_volumes_isSet;
    bool m_volumes_isValid;

    OAIGoogleCloudRunV2VpcAccess m_vpc_access;
    bool m_vpc_access_isSet;
    bool m_vpc_access_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudRunV2TaskTemplate)

#endif // OAIGoogleCloudRunV2TaskTemplate_H
