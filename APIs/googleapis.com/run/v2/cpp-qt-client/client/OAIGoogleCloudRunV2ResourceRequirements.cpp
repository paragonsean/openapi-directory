/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2ResourceRequirements.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2ResourceRequirements::OAIGoogleCloudRunV2ResourceRequirements(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2ResourceRequirements::OAIGoogleCloudRunV2ResourceRequirements() {
    this->initializeModel();
}

OAIGoogleCloudRunV2ResourceRequirements::~OAIGoogleCloudRunV2ResourceRequirements() {}

void OAIGoogleCloudRunV2ResourceRequirements::initializeModel() {

    m_cpu_idle_isSet = false;
    m_cpu_idle_isValid = false;

    m_limits_isSet = false;
    m_limits_isValid = false;

    m_startup_cpu_boost_isSet = false;
    m_startup_cpu_boost_isValid = false;
}

void OAIGoogleCloudRunV2ResourceRequirements::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2ResourceRequirements::fromJsonObject(QJsonObject json) {

    m_cpu_idle_isValid = ::OpenAPI::fromJsonValue(m_cpu_idle, json[QString("cpuIdle")]);
    m_cpu_idle_isSet = !json[QString("cpuIdle")].isNull() && m_cpu_idle_isValid;

    m_limits_isValid = ::OpenAPI::fromJsonValue(m_limits, json[QString("limits")]);
    m_limits_isSet = !json[QString("limits")].isNull() && m_limits_isValid;

    m_startup_cpu_boost_isValid = ::OpenAPI::fromJsonValue(m_startup_cpu_boost, json[QString("startupCpuBoost")]);
    m_startup_cpu_boost_isSet = !json[QString("startupCpuBoost")].isNull() && m_startup_cpu_boost_isValid;
}

QString OAIGoogleCloudRunV2ResourceRequirements::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2ResourceRequirements::asJsonObject() const {
    QJsonObject obj;
    if (m_cpu_idle_isSet) {
        obj.insert(QString("cpuIdle"), ::OpenAPI::toJsonValue(m_cpu_idle));
    }
    if (m_limits.size() > 0) {
        obj.insert(QString("limits"), ::OpenAPI::toJsonValue(m_limits));
    }
    if (m_startup_cpu_boost_isSet) {
        obj.insert(QString("startupCpuBoost"), ::OpenAPI::toJsonValue(m_startup_cpu_boost));
    }
    return obj;
}

bool OAIGoogleCloudRunV2ResourceRequirements::isCpuIdle() const {
    return m_cpu_idle;
}
void OAIGoogleCloudRunV2ResourceRequirements::setCpuIdle(const bool &cpu_idle) {
    m_cpu_idle = cpu_idle;
    m_cpu_idle_isSet = true;
}

bool OAIGoogleCloudRunV2ResourceRequirements::is_cpu_idle_Set() const{
    return m_cpu_idle_isSet;
}

bool OAIGoogleCloudRunV2ResourceRequirements::is_cpu_idle_Valid() const{
    return m_cpu_idle_isValid;
}

QMap<QString, QString> OAIGoogleCloudRunV2ResourceRequirements::getLimits() const {
    return m_limits;
}
void OAIGoogleCloudRunV2ResourceRequirements::setLimits(const QMap<QString, QString> &limits) {
    m_limits = limits;
    m_limits_isSet = true;
}

bool OAIGoogleCloudRunV2ResourceRequirements::is_limits_Set() const{
    return m_limits_isSet;
}

bool OAIGoogleCloudRunV2ResourceRequirements::is_limits_Valid() const{
    return m_limits_isValid;
}

bool OAIGoogleCloudRunV2ResourceRequirements::isStartupCpuBoost() const {
    return m_startup_cpu_boost;
}
void OAIGoogleCloudRunV2ResourceRequirements::setStartupCpuBoost(const bool &startup_cpu_boost) {
    m_startup_cpu_boost = startup_cpu_boost;
    m_startup_cpu_boost_isSet = true;
}

bool OAIGoogleCloudRunV2ResourceRequirements::is_startup_cpu_boost_Set() const{
    return m_startup_cpu_boost_isSet;
}

bool OAIGoogleCloudRunV2ResourceRequirements::is_startup_cpu_boost_Valid() const{
    return m_startup_cpu_boost_isValid;
}

bool OAIGoogleCloudRunV2ResourceRequirements::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpu_idle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_startup_cpu_boost_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2ResourceRequirements::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
