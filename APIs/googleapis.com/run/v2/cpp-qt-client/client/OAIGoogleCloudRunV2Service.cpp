/**
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudRunV2Service.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudRunV2Service::OAIGoogleCloudRunV2Service(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudRunV2Service::OAIGoogleCloudRunV2Service() {
    this->initializeModel();
}

OAIGoogleCloudRunV2Service::~OAIGoogleCloudRunV2Service() {}

void OAIGoogleCloudRunV2Service::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_binary_authorization_isSet = false;
    m_binary_authorization_isValid = false;

    m_client_isSet = false;
    m_client_isValid = false;

    m_client_version_isSet = false;
    m_client_version_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_custom_audiences_isSet = false;
    m_custom_audiences_isValid = false;

    m_default_uri_disabled_isSet = false;
    m_default_uri_disabled_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_generation_isSet = false;
    m_generation_isValid = false;

    m_ingress_isSet = false;
    m_ingress_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_last_modifier_isSet = false;
    m_last_modifier_isValid = false;

    m_latest_created_revision_isSet = false;
    m_latest_created_revision_isValid = false;

    m_latest_ready_revision_isSet = false;
    m_latest_ready_revision_isValid = false;

    m_launch_stage_isSet = false;
    m_launch_stage_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_observed_generation_isSet = false;
    m_observed_generation_isValid = false;

    m_reconciling_isSet = false;
    m_reconciling_isValid = false;

    m_satisfies_pzs_isSet = false;
    m_satisfies_pzs_isValid = false;

    m_scaling_isSet = false;
    m_scaling_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_terminal_condition_isSet = false;
    m_terminal_condition_isValid = false;

    m_traffic_isSet = false;
    m_traffic_isValid = false;

    m_traffic_statuses_isSet = false;
    m_traffic_statuses_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIGoogleCloudRunV2Service::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudRunV2Service::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_binary_authorization_isValid = ::OpenAPI::fromJsonValue(m_binary_authorization, json[QString("binaryAuthorization")]);
    m_binary_authorization_isSet = !json[QString("binaryAuthorization")].isNull() && m_binary_authorization_isValid;

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_client_version_isValid = ::OpenAPI::fromJsonValue(m_client_version, json[QString("clientVersion")]);
    m_client_version_isSet = !json[QString("clientVersion")].isNull() && m_client_version_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_custom_audiences_isValid = ::OpenAPI::fromJsonValue(m_custom_audiences, json[QString("customAudiences")]);
    m_custom_audiences_isSet = !json[QString("customAudiences")].isNull() && m_custom_audiences_isValid;

    m_default_uri_disabled_isValid = ::OpenAPI::fromJsonValue(m_default_uri_disabled, json[QString("defaultUriDisabled")]);
    m_default_uri_disabled_isSet = !json[QString("defaultUriDisabled")].isNull() && m_default_uri_disabled_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_generation_isValid = ::OpenAPI::fromJsonValue(m_generation, json[QString("generation")]);
    m_generation_isSet = !json[QString("generation")].isNull() && m_generation_isValid;

    m_ingress_isValid = ::OpenAPI::fromJsonValue(m_ingress, json[QString("ingress")]);
    m_ingress_isSet = !json[QString("ingress")].isNull() && m_ingress_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_last_modifier_isValid = ::OpenAPI::fromJsonValue(m_last_modifier, json[QString("lastModifier")]);
    m_last_modifier_isSet = !json[QString("lastModifier")].isNull() && m_last_modifier_isValid;

    m_latest_created_revision_isValid = ::OpenAPI::fromJsonValue(m_latest_created_revision, json[QString("latestCreatedRevision")]);
    m_latest_created_revision_isSet = !json[QString("latestCreatedRevision")].isNull() && m_latest_created_revision_isValid;

    m_latest_ready_revision_isValid = ::OpenAPI::fromJsonValue(m_latest_ready_revision, json[QString("latestReadyRevision")]);
    m_latest_ready_revision_isSet = !json[QString("latestReadyRevision")].isNull() && m_latest_ready_revision_isValid;

    m_launch_stage_isValid = ::OpenAPI::fromJsonValue(m_launch_stage, json[QString("launchStage")]);
    m_launch_stage_isSet = !json[QString("launchStage")].isNull() && m_launch_stage_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_observed_generation_isValid = ::OpenAPI::fromJsonValue(m_observed_generation, json[QString("observedGeneration")]);
    m_observed_generation_isSet = !json[QString("observedGeneration")].isNull() && m_observed_generation_isValid;

    m_reconciling_isValid = ::OpenAPI::fromJsonValue(m_reconciling, json[QString("reconciling")]);
    m_reconciling_isSet = !json[QString("reconciling")].isNull() && m_reconciling_isValid;

    m_satisfies_pzs_isValid = ::OpenAPI::fromJsonValue(m_satisfies_pzs, json[QString("satisfiesPzs")]);
    m_satisfies_pzs_isSet = !json[QString("satisfiesPzs")].isNull() && m_satisfies_pzs_isValid;

    m_scaling_isValid = ::OpenAPI::fromJsonValue(m_scaling, json[QString("scaling")]);
    m_scaling_isSet = !json[QString("scaling")].isNull() && m_scaling_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_terminal_condition_isValid = ::OpenAPI::fromJsonValue(m_terminal_condition, json[QString("terminalCondition")]);
    m_terminal_condition_isSet = !json[QString("terminalCondition")].isNull() && m_terminal_condition_isValid;

    m_traffic_isValid = ::OpenAPI::fromJsonValue(m_traffic, json[QString("traffic")]);
    m_traffic_isSet = !json[QString("traffic")].isNull() && m_traffic_isValid;

    m_traffic_statuses_isValid = ::OpenAPI::fromJsonValue(m_traffic_statuses, json[QString("trafficStatuses")]);
    m_traffic_statuses_isSet = !json[QString("trafficStatuses")].isNull() && m_traffic_statuses_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIGoogleCloudRunV2Service::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudRunV2Service::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_binary_authorization.isSet()) {
        obj.insert(QString("binaryAuthorization"), ::OpenAPI::toJsonValue(m_binary_authorization));
    }
    if (m_client_isSet) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_client_version_isSet) {
        obj.insert(QString("clientVersion"), ::OpenAPI::toJsonValue(m_client_version));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_creator_isSet) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_custom_audiences.size() > 0) {
        obj.insert(QString("customAudiences"), ::OpenAPI::toJsonValue(m_custom_audiences));
    }
    if (m_default_uri_disabled_isSet) {
        obj.insert(QString("defaultUriDisabled"), ::OpenAPI::toJsonValue(m_default_uri_disabled));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_generation_isSet) {
        obj.insert(QString("generation"), ::OpenAPI::toJsonValue(m_generation));
    }
    if (m_ingress_isSet) {
        obj.insert(QString("ingress"), ::OpenAPI::toJsonValue(m_ingress));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_last_modifier_isSet) {
        obj.insert(QString("lastModifier"), ::OpenAPI::toJsonValue(m_last_modifier));
    }
    if (m_latest_created_revision_isSet) {
        obj.insert(QString("latestCreatedRevision"), ::OpenAPI::toJsonValue(m_latest_created_revision));
    }
    if (m_latest_ready_revision_isSet) {
        obj.insert(QString("latestReadyRevision"), ::OpenAPI::toJsonValue(m_latest_ready_revision));
    }
    if (m_launch_stage_isSet) {
        obj.insert(QString("launchStage"), ::OpenAPI::toJsonValue(m_launch_stage));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_observed_generation_isSet) {
        obj.insert(QString("observedGeneration"), ::OpenAPI::toJsonValue(m_observed_generation));
    }
    if (m_reconciling_isSet) {
        obj.insert(QString("reconciling"), ::OpenAPI::toJsonValue(m_reconciling));
    }
    if (m_satisfies_pzs_isSet) {
        obj.insert(QString("satisfiesPzs"), ::OpenAPI::toJsonValue(m_satisfies_pzs));
    }
    if (m_scaling.isSet()) {
        obj.insert(QString("scaling"), ::OpenAPI::toJsonValue(m_scaling));
    }
    if (m_r_template.isSet()) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_terminal_condition.isSet()) {
        obj.insert(QString("terminalCondition"), ::OpenAPI::toJsonValue(m_terminal_condition));
    }
    if (m_traffic.size() > 0) {
        obj.insert(QString("traffic"), ::OpenAPI::toJsonValue(m_traffic));
    }
    if (m_traffic_statuses.size() > 0) {
        obj.insert(QString("trafficStatuses"), ::OpenAPI::toJsonValue(m_traffic_statuses));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QMap<QString, QString> OAIGoogleCloudRunV2Service::getAnnotations() const {
    return m_annotations;
}
void OAIGoogleCloudRunV2Service::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIGoogleCloudRunV2Service::is_annotations_Valid() const{
    return m_annotations_isValid;
}

OAIGoogleCloudRunV2BinaryAuthorization OAIGoogleCloudRunV2Service::getBinaryAuthorization() const {
    return m_binary_authorization;
}
void OAIGoogleCloudRunV2Service::setBinaryAuthorization(const OAIGoogleCloudRunV2BinaryAuthorization &binary_authorization) {
    m_binary_authorization = binary_authorization;
    m_binary_authorization_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_binary_authorization_Set() const{
    return m_binary_authorization_isSet;
}

bool OAIGoogleCloudRunV2Service::is_binary_authorization_Valid() const{
    return m_binary_authorization_isValid;
}

QString OAIGoogleCloudRunV2Service::getClient() const {
    return m_client;
}
void OAIGoogleCloudRunV2Service::setClient(const QString &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_client_Set() const{
    return m_client_isSet;
}

bool OAIGoogleCloudRunV2Service::is_client_Valid() const{
    return m_client_isValid;
}

QString OAIGoogleCloudRunV2Service::getClientVersion() const {
    return m_client_version;
}
void OAIGoogleCloudRunV2Service::setClientVersion(const QString &client_version) {
    m_client_version = client_version;
    m_client_version_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_client_version_Set() const{
    return m_client_version_isSet;
}

bool OAIGoogleCloudRunV2Service::is_client_version_Valid() const{
    return m_client_version_isValid;
}

QList<OAIGoogleCloudRunV2Condition> OAIGoogleCloudRunV2Service::getConditions() const {
    return m_conditions;
}
void OAIGoogleCloudRunV2Service::setConditions(const QList<OAIGoogleCloudRunV2Condition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIGoogleCloudRunV2Service::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QString OAIGoogleCloudRunV2Service::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleCloudRunV2Service::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleCloudRunV2Service::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIGoogleCloudRunV2Service::getCreator() const {
    return m_creator;
}
void OAIGoogleCloudRunV2Service::setCreator(const QString &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAIGoogleCloudRunV2Service::is_creator_Valid() const{
    return m_creator_isValid;
}

QList<QString> OAIGoogleCloudRunV2Service::getCustomAudiences() const {
    return m_custom_audiences;
}
void OAIGoogleCloudRunV2Service::setCustomAudiences(const QList<QString> &custom_audiences) {
    m_custom_audiences = custom_audiences;
    m_custom_audiences_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_custom_audiences_Set() const{
    return m_custom_audiences_isSet;
}

bool OAIGoogleCloudRunV2Service::is_custom_audiences_Valid() const{
    return m_custom_audiences_isValid;
}

bool OAIGoogleCloudRunV2Service::isDefaultUriDisabled() const {
    return m_default_uri_disabled;
}
void OAIGoogleCloudRunV2Service::setDefaultUriDisabled(const bool &default_uri_disabled) {
    m_default_uri_disabled = default_uri_disabled;
    m_default_uri_disabled_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_default_uri_disabled_Set() const{
    return m_default_uri_disabled_isSet;
}

bool OAIGoogleCloudRunV2Service::is_default_uri_disabled_Valid() const{
    return m_default_uri_disabled_isValid;
}

QString OAIGoogleCloudRunV2Service::getDeleteTime() const {
    return m_delete_time;
}
void OAIGoogleCloudRunV2Service::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAIGoogleCloudRunV2Service::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

QString OAIGoogleCloudRunV2Service::getDescription() const {
    return m_description;
}
void OAIGoogleCloudRunV2Service::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleCloudRunV2Service::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGoogleCloudRunV2Service::getEtag() const {
    return m_etag;
}
void OAIGoogleCloudRunV2Service::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIGoogleCloudRunV2Service::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIGoogleCloudRunV2Service::getExpireTime() const {
    return m_expire_time;
}
void OAIGoogleCloudRunV2Service::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIGoogleCloudRunV2Service::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAIGoogleCloudRunV2Service::getGeneration() const {
    return m_generation;
}
void OAIGoogleCloudRunV2Service::setGeneration(const QString &generation) {
    m_generation = generation;
    m_generation_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_generation_Set() const{
    return m_generation_isSet;
}

bool OAIGoogleCloudRunV2Service::is_generation_Valid() const{
    return m_generation_isValid;
}

QString OAIGoogleCloudRunV2Service::getIngress() const {
    return m_ingress;
}
void OAIGoogleCloudRunV2Service::setIngress(const QString &ingress) {
    m_ingress = ingress;
    m_ingress_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_ingress_Set() const{
    return m_ingress_isSet;
}

bool OAIGoogleCloudRunV2Service::is_ingress_Valid() const{
    return m_ingress_isValid;
}

QMap<QString, QString> OAIGoogleCloudRunV2Service::getLabels() const {
    return m_labels;
}
void OAIGoogleCloudRunV2Service::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGoogleCloudRunV2Service::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIGoogleCloudRunV2Service::getLastModifier() const {
    return m_last_modifier;
}
void OAIGoogleCloudRunV2Service::setLastModifier(const QString &last_modifier) {
    m_last_modifier = last_modifier;
    m_last_modifier_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_last_modifier_Set() const{
    return m_last_modifier_isSet;
}

bool OAIGoogleCloudRunV2Service::is_last_modifier_Valid() const{
    return m_last_modifier_isValid;
}

QString OAIGoogleCloudRunV2Service::getLatestCreatedRevision() const {
    return m_latest_created_revision;
}
void OAIGoogleCloudRunV2Service::setLatestCreatedRevision(const QString &latest_created_revision) {
    m_latest_created_revision = latest_created_revision;
    m_latest_created_revision_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_latest_created_revision_Set() const{
    return m_latest_created_revision_isSet;
}

bool OAIGoogleCloudRunV2Service::is_latest_created_revision_Valid() const{
    return m_latest_created_revision_isValid;
}

QString OAIGoogleCloudRunV2Service::getLatestReadyRevision() const {
    return m_latest_ready_revision;
}
void OAIGoogleCloudRunV2Service::setLatestReadyRevision(const QString &latest_ready_revision) {
    m_latest_ready_revision = latest_ready_revision;
    m_latest_ready_revision_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_latest_ready_revision_Set() const{
    return m_latest_ready_revision_isSet;
}

bool OAIGoogleCloudRunV2Service::is_latest_ready_revision_Valid() const{
    return m_latest_ready_revision_isValid;
}

QString OAIGoogleCloudRunV2Service::getLaunchStage() const {
    return m_launch_stage;
}
void OAIGoogleCloudRunV2Service::setLaunchStage(const QString &launch_stage) {
    m_launch_stage = launch_stage;
    m_launch_stage_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_launch_stage_Set() const{
    return m_launch_stage_isSet;
}

bool OAIGoogleCloudRunV2Service::is_launch_stage_Valid() const{
    return m_launch_stage_isValid;
}

QString OAIGoogleCloudRunV2Service::getName() const {
    return m_name;
}
void OAIGoogleCloudRunV2Service::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudRunV2Service::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleCloudRunV2Service::getObservedGeneration() const {
    return m_observed_generation;
}
void OAIGoogleCloudRunV2Service::setObservedGeneration(const QString &observed_generation) {
    m_observed_generation = observed_generation;
    m_observed_generation_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_observed_generation_Set() const{
    return m_observed_generation_isSet;
}

bool OAIGoogleCloudRunV2Service::is_observed_generation_Valid() const{
    return m_observed_generation_isValid;
}

bool OAIGoogleCloudRunV2Service::isReconciling() const {
    return m_reconciling;
}
void OAIGoogleCloudRunV2Service::setReconciling(const bool &reconciling) {
    m_reconciling = reconciling;
    m_reconciling_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_reconciling_Set() const{
    return m_reconciling_isSet;
}

bool OAIGoogleCloudRunV2Service::is_reconciling_Valid() const{
    return m_reconciling_isValid;
}

bool OAIGoogleCloudRunV2Service::isSatisfiesPzs() const {
    return m_satisfies_pzs;
}
void OAIGoogleCloudRunV2Service::setSatisfiesPzs(const bool &satisfies_pzs) {
    m_satisfies_pzs = satisfies_pzs;
    m_satisfies_pzs_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_satisfies_pzs_Set() const{
    return m_satisfies_pzs_isSet;
}

bool OAIGoogleCloudRunV2Service::is_satisfies_pzs_Valid() const{
    return m_satisfies_pzs_isValid;
}

OAIGoogleCloudRunV2ServiceScaling OAIGoogleCloudRunV2Service::getScaling() const {
    return m_scaling;
}
void OAIGoogleCloudRunV2Service::setScaling(const OAIGoogleCloudRunV2ServiceScaling &scaling) {
    m_scaling = scaling;
    m_scaling_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_scaling_Set() const{
    return m_scaling_isSet;
}

bool OAIGoogleCloudRunV2Service::is_scaling_Valid() const{
    return m_scaling_isValid;
}

OAIGoogleCloudRunV2RevisionTemplate OAIGoogleCloudRunV2Service::getRTemplate() const {
    return m_r_template;
}
void OAIGoogleCloudRunV2Service::setRTemplate(const OAIGoogleCloudRunV2RevisionTemplate &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIGoogleCloudRunV2Service::is_r_template_Valid() const{
    return m_r_template_isValid;
}

OAIGoogleCloudRunV2Condition OAIGoogleCloudRunV2Service::getTerminalCondition() const {
    return m_terminal_condition;
}
void OAIGoogleCloudRunV2Service::setTerminalCondition(const OAIGoogleCloudRunV2Condition &terminal_condition) {
    m_terminal_condition = terminal_condition;
    m_terminal_condition_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_terminal_condition_Set() const{
    return m_terminal_condition_isSet;
}

bool OAIGoogleCloudRunV2Service::is_terminal_condition_Valid() const{
    return m_terminal_condition_isValid;
}

QList<OAIGoogleCloudRunV2TrafficTarget> OAIGoogleCloudRunV2Service::getTraffic() const {
    return m_traffic;
}
void OAIGoogleCloudRunV2Service::setTraffic(const QList<OAIGoogleCloudRunV2TrafficTarget> &traffic) {
    m_traffic = traffic;
    m_traffic_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_traffic_Set() const{
    return m_traffic_isSet;
}

bool OAIGoogleCloudRunV2Service::is_traffic_Valid() const{
    return m_traffic_isValid;
}

QList<OAIGoogleCloudRunV2TrafficTargetStatus> OAIGoogleCloudRunV2Service::getTrafficStatuses() const {
    return m_traffic_statuses;
}
void OAIGoogleCloudRunV2Service::setTrafficStatuses(const QList<OAIGoogleCloudRunV2TrafficTargetStatus> &traffic_statuses) {
    m_traffic_statuses = traffic_statuses;
    m_traffic_statuses_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_traffic_statuses_Set() const{
    return m_traffic_statuses_isSet;
}

bool OAIGoogleCloudRunV2Service::is_traffic_statuses_Valid() const{
    return m_traffic_statuses_isValid;
}

QString OAIGoogleCloudRunV2Service::getUid() const {
    return m_uid;
}
void OAIGoogleCloudRunV2Service::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIGoogleCloudRunV2Service::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIGoogleCloudRunV2Service::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudRunV2Service::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudRunV2Service::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIGoogleCloudRunV2Service::getUri() const {
    return m_uri;
}
void OAIGoogleCloudRunV2Service::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIGoogleCloudRunV2Service::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIGoogleCloudRunV2Service::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIGoogleCloudRunV2Service::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_binary_authorization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_audiences.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_uri_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_created_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_ready_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observed_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfies_pzs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminal_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudRunV2Service::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
