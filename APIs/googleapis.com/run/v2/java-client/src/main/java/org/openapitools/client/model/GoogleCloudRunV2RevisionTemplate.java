/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudRunV2Container;
import org.openapitools.client.model.GoogleCloudRunV2RevisionScaling;
import org.openapitools.client.model.GoogleCloudRunV2Volume;
import org.openapitools.client.model.GoogleCloudRunV2VpcAccess;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RevisionTemplate describes the data a revision should have when created from a template.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:07.645646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRunV2RevisionTemplate {
  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Map<String, String> annotations = new HashMap<>();

  public static final String SERIALIZED_NAME_CONTAINERS = "containers";
  @SerializedName(SERIALIZED_NAME_CONTAINERS)
  private List<GoogleCloudRunV2Container> containers = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENCRYPTION_KEY = "encryptionKey";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY)
  private String encryptionKey;

  /**
   * The sandbox environment to host this Revision.
   */
  @JsonAdapter(ExecutionEnvironmentEnum.Adapter.class)
  public enum ExecutionEnvironmentEnum {
    UNSPECIFIED("EXECUTION_ENVIRONMENT_UNSPECIFIED"),
    
    GEN1("EXECUTION_ENVIRONMENT_GEN1"),
    
    GEN2("EXECUTION_ENVIRONMENT_GEN2");

    private String value;

    ExecutionEnvironmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExecutionEnvironmentEnum fromValue(String value) {
      for (ExecutionEnvironmentEnum b : ExecutionEnvironmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExecutionEnvironmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExecutionEnvironmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExecutionEnvironmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExecutionEnvironmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExecutionEnvironmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXECUTION_ENVIRONMENT = "executionEnvironment";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ENVIRONMENT)
  private ExecutionEnvironmentEnum executionEnvironment;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_DISABLED = "healthCheckDisabled";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_DISABLED)
  private Boolean healthCheckDisabled;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_MAX_INSTANCE_REQUEST_CONCURRENCY = "maxInstanceRequestConcurrency";
  @SerializedName(SERIALIZED_NAME_MAX_INSTANCE_REQUEST_CONCURRENCY)
  private Integer maxInstanceRequestConcurrency;

  public static final String SERIALIZED_NAME_REVISION = "revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private String revision;

  public static final String SERIALIZED_NAME_SCALING = "scaling";
  @SerializedName(SERIALIZED_NAME_SCALING)
  private GoogleCloudRunV2RevisionScaling scaling;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT = "serviceAccount";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT)
  private String serviceAccount;

  public static final String SERIALIZED_NAME_SESSION_AFFINITY = "sessionAffinity";
  @SerializedName(SERIALIZED_NAME_SESSION_AFFINITY)
  private Boolean sessionAffinity;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private String timeout;

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List<GoogleCloudRunV2Volume> volumes = new ArrayList<>();

  public static final String SERIALIZED_NAME_VPC_ACCESS = "vpcAccess";
  @SerializedName(SERIALIZED_NAME_VPC_ACCESS)
  private GoogleCloudRunV2VpcAccess vpcAccess;

  public GoogleCloudRunV2RevisionTemplate() {
  }

  public GoogleCloudRunV2RevisionTemplate annotations(Map<String, String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public GoogleCloudRunV2RevisionTemplate putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

  /**
   * Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run API v2 does not support annotations with &#x60;run.googleapis.com&#x60;, &#x60;cloud.googleapis.com&#x60;, &#x60;serving.knative.dev&#x60;, or &#x60;autoscaling.knative.dev&#x60; namespaces, and they will be rejected. All system annotations in v1 now have a corresponding field in v2 RevisionTemplate. This field follows Kubernetes annotations&#39; namespacing, limits, and rules.
   * @return annotations
   */
  @javax.annotation.Nullable
  public Map<String, String> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }


  public GoogleCloudRunV2RevisionTemplate containers(List<GoogleCloudRunV2Container> containers) {
    this.containers = containers;
    return this;
  }

  public GoogleCloudRunV2RevisionTemplate addContainersItem(GoogleCloudRunV2Container containersItem) {
    if (this.containers == null) {
      this.containers = new ArrayList<>();
    }
    this.containers.add(containersItem);
    return this;
  }

  /**
   * Holds the single container that defines the unit of execution for this Revision.
   * @return containers
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRunV2Container> getContainers() {
    return containers;
  }

  public void setContainers(List<GoogleCloudRunV2Container> containers) {
    this.containers = containers;
  }


  public GoogleCloudRunV2RevisionTemplate encryptionKey(String encryptionKey) {
    this.encryptionKey = encryptionKey;
    return this;
  }

  /**
   * A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
   * @return encryptionKey
   */
  @javax.annotation.Nullable
  public String getEncryptionKey() {
    return encryptionKey;
  }

  public void setEncryptionKey(String encryptionKey) {
    this.encryptionKey = encryptionKey;
  }


  public GoogleCloudRunV2RevisionTemplate executionEnvironment(ExecutionEnvironmentEnum executionEnvironment) {
    this.executionEnvironment = executionEnvironment;
    return this;
  }

  /**
   * The sandbox environment to host this Revision.
   * @return executionEnvironment
   */
  @javax.annotation.Nullable
  public ExecutionEnvironmentEnum getExecutionEnvironment() {
    return executionEnvironment;
  }

  public void setExecutionEnvironment(ExecutionEnvironmentEnum executionEnvironment) {
    this.executionEnvironment = executionEnvironment;
  }


  public GoogleCloudRunV2RevisionTemplate healthCheckDisabled(Boolean healthCheckDisabled) {
    this.healthCheckDisabled = healthCheckDisabled;
    return this;
  }

  /**
   * Optional. Disables health checking containers during deployment.
   * @return healthCheckDisabled
   */
  @javax.annotation.Nullable
  public Boolean getHealthCheckDisabled() {
    return healthCheckDisabled;
  }

  public void setHealthCheckDisabled(Boolean healthCheckDisabled) {
    this.healthCheckDisabled = healthCheckDisabled;
  }


  public GoogleCloudRunV2RevisionTemplate labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public GoogleCloudRunV2RevisionTemplate putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google&#39;s billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels. Cloud Run API v2 does not support labels with &#x60;run.googleapis.com&#x60;, &#x60;cloud.googleapis.com&#x60;, &#x60;serving.knative.dev&#x60;, or &#x60;autoscaling.knative.dev&#x60; namespaces, and they will be rejected. All system labels in v1 now have a corresponding field in v2 RevisionTemplate.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public GoogleCloudRunV2RevisionTemplate maxInstanceRequestConcurrency(Integer maxInstanceRequestConcurrency) {
    this.maxInstanceRequestConcurrency = maxInstanceRequestConcurrency;
    return this;
  }

  /**
   * Sets the maximum number of requests that each serving instance can receive.
   * @return maxInstanceRequestConcurrency
   */
  @javax.annotation.Nullable
  public Integer getMaxInstanceRequestConcurrency() {
    return maxInstanceRequestConcurrency;
  }

  public void setMaxInstanceRequestConcurrency(Integer maxInstanceRequestConcurrency) {
    this.maxInstanceRequestConcurrency = maxInstanceRequestConcurrency;
  }


  public GoogleCloudRunV2RevisionTemplate revision(String revision) {
    this.revision = revision;
    return this;
  }

  /**
   * The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name.
   * @return revision
   */
  @javax.annotation.Nullable
  public String getRevision() {
    return revision;
  }

  public void setRevision(String revision) {
    this.revision = revision;
  }


  public GoogleCloudRunV2RevisionTemplate scaling(GoogleCloudRunV2RevisionScaling scaling) {
    this.scaling = scaling;
    return this;
  }

  /**
   * Get scaling
   * @return scaling
   */
  @javax.annotation.Nullable
  public GoogleCloudRunV2RevisionScaling getScaling() {
    return scaling;
  }

  public void setScaling(GoogleCloudRunV2RevisionScaling scaling) {
    this.scaling = scaling;
  }


  public GoogleCloudRunV2RevisionTemplate serviceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

  /**
   * Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project&#39;s default service account.
   * @return serviceAccount
   */
  @javax.annotation.Nullable
  public String getServiceAccount() {
    return serviceAccount;
  }

  public void setServiceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
  }


  public GoogleCloudRunV2RevisionTemplate sessionAffinity(Boolean sessionAffinity) {
    this.sessionAffinity = sessionAffinity;
    return this;
  }

  /**
   * Optional. Enable session affinity.
   * @return sessionAffinity
   */
  @javax.annotation.Nullable
  public Boolean getSessionAffinity() {
    return sessionAffinity;
  }

  public void setSessionAffinity(Boolean sessionAffinity) {
    this.sessionAffinity = sessionAffinity;
  }


  public GoogleCloudRunV2RevisionTemplate timeout(String timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Max allowed time for an instance to respond to a request.
   * @return timeout
   */
  @javax.annotation.Nullable
  public String getTimeout() {
    return timeout;
  }

  public void setTimeout(String timeout) {
    this.timeout = timeout;
  }


  public GoogleCloudRunV2RevisionTemplate volumes(List<GoogleCloudRunV2Volume> volumes) {
    this.volumes = volumes;
    return this;
  }

  public GoogleCloudRunV2RevisionTemplate addVolumesItem(GoogleCloudRunV2Volume volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

  /**
   * A list of Volumes to make available to containers.
   * @return volumes
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRunV2Volume> getVolumes() {
    return volumes;
  }

  public void setVolumes(List<GoogleCloudRunV2Volume> volumes) {
    this.volumes = volumes;
  }


  public GoogleCloudRunV2RevisionTemplate vpcAccess(GoogleCloudRunV2VpcAccess vpcAccess) {
    this.vpcAccess = vpcAccess;
    return this;
  }

  /**
   * Get vpcAccess
   * @return vpcAccess
   */
  @javax.annotation.Nullable
  public GoogleCloudRunV2VpcAccess getVpcAccess() {
    return vpcAccess;
  }

  public void setVpcAccess(GoogleCloudRunV2VpcAccess vpcAccess) {
    this.vpcAccess = vpcAccess;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRunV2RevisionTemplate googleCloudRunV2RevisionTemplate = (GoogleCloudRunV2RevisionTemplate) o;
    return Objects.equals(this.annotations, googleCloudRunV2RevisionTemplate.annotations) &&
        Objects.equals(this.containers, googleCloudRunV2RevisionTemplate.containers) &&
        Objects.equals(this.encryptionKey, googleCloudRunV2RevisionTemplate.encryptionKey) &&
        Objects.equals(this.executionEnvironment, googleCloudRunV2RevisionTemplate.executionEnvironment) &&
        Objects.equals(this.healthCheckDisabled, googleCloudRunV2RevisionTemplate.healthCheckDisabled) &&
        Objects.equals(this.labels, googleCloudRunV2RevisionTemplate.labels) &&
        Objects.equals(this.maxInstanceRequestConcurrency, googleCloudRunV2RevisionTemplate.maxInstanceRequestConcurrency) &&
        Objects.equals(this.revision, googleCloudRunV2RevisionTemplate.revision) &&
        Objects.equals(this.scaling, googleCloudRunV2RevisionTemplate.scaling) &&
        Objects.equals(this.serviceAccount, googleCloudRunV2RevisionTemplate.serviceAccount) &&
        Objects.equals(this.sessionAffinity, googleCloudRunV2RevisionTemplate.sessionAffinity) &&
        Objects.equals(this.timeout, googleCloudRunV2RevisionTemplate.timeout) &&
        Objects.equals(this.volumes, googleCloudRunV2RevisionTemplate.volumes) &&
        Objects.equals(this.vpcAccess, googleCloudRunV2RevisionTemplate.vpcAccess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, containers, encryptionKey, executionEnvironment, healthCheckDisabled, labels, maxInstanceRequestConcurrency, revision, scaling, serviceAccount, sessionAffinity, timeout, volumes, vpcAccess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRunV2RevisionTemplate {\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
    sb.append("    encryptionKey: ").append(toIndentedString(encryptionKey)).append("\n");
    sb.append("    executionEnvironment: ").append(toIndentedString(executionEnvironment)).append("\n");
    sb.append("    healthCheckDisabled: ").append(toIndentedString(healthCheckDisabled)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    maxInstanceRequestConcurrency: ").append(toIndentedString(maxInstanceRequestConcurrency)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    scaling: ").append(toIndentedString(scaling)).append("\n");
    sb.append("    serviceAccount: ").append(toIndentedString(serviceAccount)).append("\n");
    sb.append("    sessionAffinity: ").append(toIndentedString(sessionAffinity)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("    vpcAccess: ").append(toIndentedString(vpcAccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotations");
    openapiFields.add("containers");
    openapiFields.add("encryptionKey");
    openapiFields.add("executionEnvironment");
    openapiFields.add("healthCheckDisabled");
    openapiFields.add("labels");
    openapiFields.add("maxInstanceRequestConcurrency");
    openapiFields.add("revision");
    openapiFields.add("scaling");
    openapiFields.add("serviceAccount");
    openapiFields.add("sessionAffinity");
    openapiFields.add("timeout");
    openapiFields.add("volumes");
    openapiFields.add("vpcAccess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRunV2RevisionTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRunV2RevisionTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRunV2RevisionTemplate is not found in the empty JSON string", GoogleCloudRunV2RevisionTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRunV2RevisionTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRunV2RevisionTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("containers") != null && !jsonObj.get("containers").isJsonNull()) {
        JsonArray jsonArraycontainers = jsonObj.getAsJsonArray("containers");
        if (jsonArraycontainers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("containers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `containers` to be an array in the JSON string but got `%s`", jsonObj.get("containers").toString()));
          }

          // validate the optional field `containers` (array)
          for (int i = 0; i < jsonArraycontainers.size(); i++) {
            GoogleCloudRunV2Container.validateJsonElement(jsonArraycontainers.get(i));
          };
        }
      }
      if ((jsonObj.get("encryptionKey") != null && !jsonObj.get("encryptionKey").isJsonNull()) && !jsonObj.get("encryptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionKey").toString()));
      }
      if ((jsonObj.get("executionEnvironment") != null && !jsonObj.get("executionEnvironment").isJsonNull()) && !jsonObj.get("executionEnvironment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionEnvironment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionEnvironment").toString()));
      }
      // validate the optional field `executionEnvironment`
      if (jsonObj.get("executionEnvironment") != null && !jsonObj.get("executionEnvironment").isJsonNull()) {
        ExecutionEnvironmentEnum.validateJsonElement(jsonObj.get("executionEnvironment"));
      }
      if ((jsonObj.get("revision") != null && !jsonObj.get("revision").isJsonNull()) && !jsonObj.get("revision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revision").toString()));
      }
      // validate the optional field `scaling`
      if (jsonObj.get("scaling") != null && !jsonObj.get("scaling").isJsonNull()) {
        GoogleCloudRunV2RevisionScaling.validateJsonElement(jsonObj.get("scaling"));
      }
      if ((jsonObj.get("serviceAccount") != null && !jsonObj.get("serviceAccount").isJsonNull()) && !jsonObj.get("serviceAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccount").toString()));
      }
      if ((jsonObj.get("timeout") != null && !jsonObj.get("timeout").isJsonNull()) && !jsonObj.get("timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeout").toString()));
      }
      if (jsonObj.get("volumes") != null && !jsonObj.get("volumes").isJsonNull()) {
        JsonArray jsonArrayvolumes = jsonObj.getAsJsonArray("volumes");
        if (jsonArrayvolumes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumes` to be an array in the JSON string but got `%s`", jsonObj.get("volumes").toString()));
          }

          // validate the optional field `volumes` (array)
          for (int i = 0; i < jsonArrayvolumes.size(); i++) {
            GoogleCloudRunV2Volume.validateJsonElement(jsonArrayvolumes.get(i));
          };
        }
      }
      // validate the optional field `vpcAccess`
      if (jsonObj.get("vpcAccess") != null && !jsonObj.get("vpcAccess").isJsonNull()) {
        GoogleCloudRunV2VpcAccess.validateJsonElement(jsonObj.get("vpcAccess"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRunV2RevisionTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRunV2RevisionTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRunV2RevisionTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRunV2RevisionTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRunV2RevisionTemplate>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRunV2RevisionTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRunV2RevisionTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRunV2RevisionTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRunV2RevisionTemplate
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRunV2RevisionTemplate
   */
  public static GoogleCloudRunV2RevisionTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRunV2RevisionTemplate.class);
  }

  /**
   * Convert an instance of GoogleCloudRunV2RevisionTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

