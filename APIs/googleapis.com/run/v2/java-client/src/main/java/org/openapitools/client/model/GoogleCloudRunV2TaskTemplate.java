/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudRunV2Container;
import org.openapitools.client.model.GoogleCloudRunV2Volume;
import org.openapitools.client.model.GoogleCloudRunV2VpcAccess;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaskTemplate describes the data a task should have when created from a template.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:07.645646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRunV2TaskTemplate {
  public static final String SERIALIZED_NAME_CONTAINERS = "containers";
  @SerializedName(SERIALIZED_NAME_CONTAINERS)
  private List<GoogleCloudRunV2Container> containers = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENCRYPTION_KEY = "encryptionKey";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY)
  private String encryptionKey;

  /**
   * The execution environment being used to host this Task.
   */
  @JsonAdapter(ExecutionEnvironmentEnum.Adapter.class)
  public enum ExecutionEnvironmentEnum {
    UNSPECIFIED("EXECUTION_ENVIRONMENT_UNSPECIFIED"),
    
    GEN1("EXECUTION_ENVIRONMENT_GEN1"),
    
    GEN2("EXECUTION_ENVIRONMENT_GEN2");

    private String value;

    ExecutionEnvironmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExecutionEnvironmentEnum fromValue(String value) {
      for (ExecutionEnvironmentEnum b : ExecutionEnvironmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExecutionEnvironmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExecutionEnvironmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExecutionEnvironmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExecutionEnvironmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExecutionEnvironmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXECUTION_ENVIRONMENT = "executionEnvironment";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ENVIRONMENT)
  private ExecutionEnvironmentEnum executionEnvironment;

  public static final String SERIALIZED_NAME_MAX_RETRIES = "maxRetries";
  @SerializedName(SERIALIZED_NAME_MAX_RETRIES)
  private Integer maxRetries;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT = "serviceAccount";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT)
  private String serviceAccount;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private String timeout;

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List<GoogleCloudRunV2Volume> volumes = new ArrayList<>();

  public static final String SERIALIZED_NAME_VPC_ACCESS = "vpcAccess";
  @SerializedName(SERIALIZED_NAME_VPC_ACCESS)
  private GoogleCloudRunV2VpcAccess vpcAccess;

  public GoogleCloudRunV2TaskTemplate() {
  }

  public GoogleCloudRunV2TaskTemplate containers(List<GoogleCloudRunV2Container> containers) {
    this.containers = containers;
    return this;
  }

  public GoogleCloudRunV2TaskTemplate addContainersItem(GoogleCloudRunV2Container containersItem) {
    if (this.containers == null) {
      this.containers = new ArrayList<>();
    }
    this.containers.add(containersItem);
    return this;
  }

  /**
   * Holds the single container that defines the unit of execution for this task.
   * @return containers
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRunV2Container> getContainers() {
    return containers;
  }

  public void setContainers(List<GoogleCloudRunV2Container> containers) {
    this.containers = containers;
  }


  public GoogleCloudRunV2TaskTemplate encryptionKey(String encryptionKey) {
    this.encryptionKey = encryptionKey;
    return this;
  }

  /**
   * A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
   * @return encryptionKey
   */
  @javax.annotation.Nullable
  public String getEncryptionKey() {
    return encryptionKey;
  }

  public void setEncryptionKey(String encryptionKey) {
    this.encryptionKey = encryptionKey;
  }


  public GoogleCloudRunV2TaskTemplate executionEnvironment(ExecutionEnvironmentEnum executionEnvironment) {
    this.executionEnvironment = executionEnvironment;
    return this;
  }

  /**
   * The execution environment being used to host this Task.
   * @return executionEnvironment
   */
  @javax.annotation.Nullable
  public ExecutionEnvironmentEnum getExecutionEnvironment() {
    return executionEnvironment;
  }

  public void setExecutionEnvironment(ExecutionEnvironmentEnum executionEnvironment) {
    this.executionEnvironment = executionEnvironment;
  }


  public GoogleCloudRunV2TaskTemplate maxRetries(Integer maxRetries) {
    this.maxRetries = maxRetries;
    return this;
  }

  /**
   * Number of retries allowed per Task, before marking this Task failed. Defaults to 3.
   * @return maxRetries
   */
  @javax.annotation.Nullable
  public Integer getMaxRetries() {
    return maxRetries;
  }

  public void setMaxRetries(Integer maxRetries) {
    this.maxRetries = maxRetries;
  }


  public GoogleCloudRunV2TaskTemplate serviceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

  /**
   * Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project&#39;s default service account.
   * @return serviceAccount
   */
  @javax.annotation.Nullable
  public String getServiceAccount() {
    return serviceAccount;
  }

  public void setServiceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
  }


  public GoogleCloudRunV2TaskTemplate timeout(String timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout. Defaults to 600 seconds.
   * @return timeout
   */
  @javax.annotation.Nullable
  public String getTimeout() {
    return timeout;
  }

  public void setTimeout(String timeout) {
    this.timeout = timeout;
  }


  public GoogleCloudRunV2TaskTemplate volumes(List<GoogleCloudRunV2Volume> volumes) {
    this.volumes = volumes;
    return this;
  }

  public GoogleCloudRunV2TaskTemplate addVolumesItem(GoogleCloudRunV2Volume volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

  /**
   * A list of Volumes to make available to containers.
   * @return volumes
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRunV2Volume> getVolumes() {
    return volumes;
  }

  public void setVolumes(List<GoogleCloudRunV2Volume> volumes) {
    this.volumes = volumes;
  }


  public GoogleCloudRunV2TaskTemplate vpcAccess(GoogleCloudRunV2VpcAccess vpcAccess) {
    this.vpcAccess = vpcAccess;
    return this;
  }

  /**
   * Get vpcAccess
   * @return vpcAccess
   */
  @javax.annotation.Nullable
  public GoogleCloudRunV2VpcAccess getVpcAccess() {
    return vpcAccess;
  }

  public void setVpcAccess(GoogleCloudRunV2VpcAccess vpcAccess) {
    this.vpcAccess = vpcAccess;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRunV2TaskTemplate googleCloudRunV2TaskTemplate = (GoogleCloudRunV2TaskTemplate) o;
    return Objects.equals(this.containers, googleCloudRunV2TaskTemplate.containers) &&
        Objects.equals(this.encryptionKey, googleCloudRunV2TaskTemplate.encryptionKey) &&
        Objects.equals(this.executionEnvironment, googleCloudRunV2TaskTemplate.executionEnvironment) &&
        Objects.equals(this.maxRetries, googleCloudRunV2TaskTemplate.maxRetries) &&
        Objects.equals(this.serviceAccount, googleCloudRunV2TaskTemplate.serviceAccount) &&
        Objects.equals(this.timeout, googleCloudRunV2TaskTemplate.timeout) &&
        Objects.equals(this.volumes, googleCloudRunV2TaskTemplate.volumes) &&
        Objects.equals(this.vpcAccess, googleCloudRunV2TaskTemplate.vpcAccess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containers, encryptionKey, executionEnvironment, maxRetries, serviceAccount, timeout, volumes, vpcAccess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRunV2TaskTemplate {\n");
    sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
    sb.append("    encryptionKey: ").append(toIndentedString(encryptionKey)).append("\n");
    sb.append("    executionEnvironment: ").append(toIndentedString(executionEnvironment)).append("\n");
    sb.append("    maxRetries: ").append(toIndentedString(maxRetries)).append("\n");
    sb.append("    serviceAccount: ").append(toIndentedString(serviceAccount)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("    vpcAccess: ").append(toIndentedString(vpcAccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containers");
    openapiFields.add("encryptionKey");
    openapiFields.add("executionEnvironment");
    openapiFields.add("maxRetries");
    openapiFields.add("serviceAccount");
    openapiFields.add("timeout");
    openapiFields.add("volumes");
    openapiFields.add("vpcAccess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRunV2TaskTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRunV2TaskTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRunV2TaskTemplate is not found in the empty JSON string", GoogleCloudRunV2TaskTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRunV2TaskTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRunV2TaskTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("containers") != null && !jsonObj.get("containers").isJsonNull()) {
        JsonArray jsonArraycontainers = jsonObj.getAsJsonArray("containers");
        if (jsonArraycontainers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("containers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `containers` to be an array in the JSON string but got `%s`", jsonObj.get("containers").toString()));
          }

          // validate the optional field `containers` (array)
          for (int i = 0; i < jsonArraycontainers.size(); i++) {
            GoogleCloudRunV2Container.validateJsonElement(jsonArraycontainers.get(i));
          };
        }
      }
      if ((jsonObj.get("encryptionKey") != null && !jsonObj.get("encryptionKey").isJsonNull()) && !jsonObj.get("encryptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionKey").toString()));
      }
      if ((jsonObj.get("executionEnvironment") != null && !jsonObj.get("executionEnvironment").isJsonNull()) && !jsonObj.get("executionEnvironment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionEnvironment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionEnvironment").toString()));
      }
      // validate the optional field `executionEnvironment`
      if (jsonObj.get("executionEnvironment") != null && !jsonObj.get("executionEnvironment").isJsonNull()) {
        ExecutionEnvironmentEnum.validateJsonElement(jsonObj.get("executionEnvironment"));
      }
      if ((jsonObj.get("serviceAccount") != null && !jsonObj.get("serviceAccount").isJsonNull()) && !jsonObj.get("serviceAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccount").toString()));
      }
      if ((jsonObj.get("timeout") != null && !jsonObj.get("timeout").isJsonNull()) && !jsonObj.get("timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeout").toString()));
      }
      if (jsonObj.get("volumes") != null && !jsonObj.get("volumes").isJsonNull()) {
        JsonArray jsonArrayvolumes = jsonObj.getAsJsonArray("volumes");
        if (jsonArrayvolumes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumes` to be an array in the JSON string but got `%s`", jsonObj.get("volumes").toString()));
          }

          // validate the optional field `volumes` (array)
          for (int i = 0; i < jsonArrayvolumes.size(); i++) {
            GoogleCloudRunV2Volume.validateJsonElement(jsonArrayvolumes.get(i));
          };
        }
      }
      // validate the optional field `vpcAccess`
      if (jsonObj.get("vpcAccess") != null && !jsonObj.get("vpcAccess").isJsonNull()) {
        GoogleCloudRunV2VpcAccess.validateJsonElement(jsonObj.get("vpcAccess"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRunV2TaskTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRunV2TaskTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRunV2TaskTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRunV2TaskTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRunV2TaskTemplate>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRunV2TaskTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRunV2TaskTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRunV2TaskTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRunV2TaskTemplate
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRunV2TaskTemplate
   */
  public static GoogleCloudRunV2TaskTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRunV2TaskTemplate.class);
  }

  /**
   * Convert an instance of GoogleCloudRunV2TaskTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

