/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudRunV2Condition;
import org.openapitools.client.model.GoogleCloudRunV2Container;
import org.openapitools.client.model.GoogleCloudRunV2RevisionScaling;
import org.openapitools.client.model.GoogleCloudRunV2RevisionScalingStatus;
import org.openapitools.client.model.GoogleCloudRunV2Volume;
import org.openapitools.client.model.GoogleCloudRunV2VpcAccess;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Revision is an immutable snapshot of code and configuration. A Revision references a container image. Revisions are only created by updates to its parent Service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:07.645646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRunV2Revision {
  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Map<String, String> annotations = new HashMap<>();

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<GoogleCloudRunV2Condition> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTAINERS = "containers";
  @SerializedName(SERIALIZED_NAME_CONTAINERS)
  private List<GoogleCloudRunV2Container> containers = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DELETE_TIME = "deleteTime";
  @SerializedName(SERIALIZED_NAME_DELETE_TIME)
  private String deleteTime;

  public static final String SERIALIZED_NAME_ENCRYPTION_KEY = "encryptionKey";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY)
  private String encryptionKey;

  /**
   * The action to take if the encryption key is revoked.
   */
  @JsonAdapter(EncryptionKeyRevocationActionEnum.Adapter.class)
  public enum EncryptionKeyRevocationActionEnum {
    ENCRYPTION_KEY_REVOCATION_ACTION_UNSPECIFIED("ENCRYPTION_KEY_REVOCATION_ACTION_UNSPECIFIED"),
    
    PREVENT_NEW("PREVENT_NEW"),
    
    SHUTDOWN("SHUTDOWN");

    private String value;

    EncryptionKeyRevocationActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncryptionKeyRevocationActionEnum fromValue(String value) {
      for (EncryptionKeyRevocationActionEnum b : EncryptionKeyRevocationActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncryptionKeyRevocationActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncryptionKeyRevocationActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncryptionKeyRevocationActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncryptionKeyRevocationActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncryptionKeyRevocationActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCRYPTION_KEY_REVOCATION_ACTION = "encryptionKeyRevocationAction";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY_REVOCATION_ACTION)
  private EncryptionKeyRevocationActionEnum encryptionKeyRevocationAction;

  public static final String SERIALIZED_NAME_ENCRYPTION_KEY_SHUTDOWN_DURATION = "encryptionKeyShutdownDuration";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY_SHUTDOWN_DURATION)
  private String encryptionKeyShutdownDuration;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  /**
   * The execution environment being used to host this Revision.
   */
  @JsonAdapter(ExecutionEnvironmentEnum.Adapter.class)
  public enum ExecutionEnvironmentEnum {
    UNSPECIFIED("EXECUTION_ENVIRONMENT_UNSPECIFIED"),
    
    GEN1("EXECUTION_ENVIRONMENT_GEN1"),
    
    GEN2("EXECUTION_ENVIRONMENT_GEN2");

    private String value;

    ExecutionEnvironmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExecutionEnvironmentEnum fromValue(String value) {
      for (ExecutionEnvironmentEnum b : ExecutionEnvironmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExecutionEnvironmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExecutionEnvironmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExecutionEnvironmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExecutionEnvironmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExecutionEnvironmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXECUTION_ENVIRONMENT = "executionEnvironment";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ENVIRONMENT)
  private ExecutionEnvironmentEnum executionEnvironment;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private String expireTime;

  public static final String SERIALIZED_NAME_GENERATION = "generation";
  @SerializedName(SERIALIZED_NAME_GENERATION)
  private String generation;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  /**
   * The least stable launch stage needed to create this resource, as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports &#x60;ALPHA&#x60;, &#x60;BETA&#x60;, and &#x60;GA&#x60;. Note that this value might not be what was used as input. For example, if ALPHA was provided as input in the parent resource, but only BETA and GA-level features are were, this field will be BETA.
   */
  @JsonAdapter(LaunchStageEnum.Adapter.class)
  public enum LaunchStageEnum {
    LAUNCH_STAGE_UNSPECIFIED("LAUNCH_STAGE_UNSPECIFIED"),
    
    UNIMPLEMENTED("UNIMPLEMENTED"),
    
    PRELAUNCH("PRELAUNCH"),
    
    EARLY_ACCESS("EARLY_ACCESS"),
    
    ALPHA("ALPHA"),
    
    BETA("BETA"),
    
    GA("GA"),
    
    DEPRECATED("DEPRECATED");

    private String value;

    LaunchStageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LaunchStageEnum fromValue(String value) {
      for (LaunchStageEnum b : LaunchStageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LaunchStageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LaunchStageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LaunchStageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LaunchStageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LaunchStageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LAUNCH_STAGE = "launchStage";
  @SerializedName(SERIALIZED_NAME_LAUNCH_STAGE)
  private LaunchStageEnum launchStage;

  public static final String SERIALIZED_NAME_LOG_URI = "logUri";
  @SerializedName(SERIALIZED_NAME_LOG_URI)
  private String logUri;

  public static final String SERIALIZED_NAME_MAX_INSTANCE_REQUEST_CONCURRENCY = "maxInstanceRequestConcurrency";
  @SerializedName(SERIALIZED_NAME_MAX_INSTANCE_REQUEST_CONCURRENCY)
  private Integer maxInstanceRequestConcurrency;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OBSERVED_GENERATION = "observedGeneration";
  @SerializedName(SERIALIZED_NAME_OBSERVED_GENERATION)
  private String observedGeneration;

  public static final String SERIALIZED_NAME_RECONCILING = "reconciling";
  @SerializedName(SERIALIZED_NAME_RECONCILING)
  private Boolean reconciling;

  public static final String SERIALIZED_NAME_SATISFIES_PZS = "satisfiesPzs";
  @SerializedName(SERIALIZED_NAME_SATISFIES_PZS)
  private Boolean satisfiesPzs;

  public static final String SERIALIZED_NAME_SCALING = "scaling";
  @SerializedName(SERIALIZED_NAME_SCALING)
  private GoogleCloudRunV2RevisionScaling scaling;

  public static final String SERIALIZED_NAME_SCALING_STATUS = "scalingStatus";
  @SerializedName(SERIALIZED_NAME_SCALING_STATUS)
  private GoogleCloudRunV2RevisionScalingStatus scalingStatus;

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private String service;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT = "serviceAccount";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT)
  private String serviceAccount;

  public static final String SERIALIZED_NAME_SESSION_AFFINITY = "sessionAffinity";
  @SerializedName(SERIALIZED_NAME_SESSION_AFFINITY)
  private Boolean sessionAffinity;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private String timeout;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List<GoogleCloudRunV2Volume> volumes = new ArrayList<>();

  public static final String SERIALIZED_NAME_VPC_ACCESS = "vpcAccess";
  @SerializedName(SERIALIZED_NAME_VPC_ACCESS)
  private GoogleCloudRunV2VpcAccess vpcAccess;

  public GoogleCloudRunV2Revision() {
  }

  public GoogleCloudRunV2Revision(
     Map<String, String> annotations, 
     List<GoogleCloudRunV2Condition> conditions, 
     String createTime, 
     String deleteTime, 
     String etag, 
     String expireTime, 
     String generation, 
     Map<String, String> labels, 
     String logUri, 
     String name, 
     String observedGeneration, 
     Boolean reconciling, 
     Boolean satisfiesPzs, 
     String service, 
     String uid, 
     String updateTime
  ) {
    this();
    this.annotations = annotations;
    this.conditions = conditions;
    this.createTime = createTime;
    this.deleteTime = deleteTime;
    this.etag = etag;
    this.expireTime = expireTime;
    this.generation = generation;
    this.labels = labels;
    this.logUri = logUri;
    this.name = name;
    this.observedGeneration = observedGeneration;
    this.reconciling = reconciling;
    this.satisfiesPzs = satisfiesPzs;
    this.service = service;
    this.uid = uid;
    this.updateTime = updateTime;
  }

  /**
   * Output only. Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
   * @return annotations
   */
  @javax.annotation.Nullable
  public Map<String, String> getAnnotations() {
    return annotations;
  }



  /**
   * Output only. The Condition of this Revision, containing its readiness status, and detailed error information in case it did not reach a serving state.
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRunV2Condition> getConditions() {
    return conditions;
  }



  public GoogleCloudRunV2Revision containers(List<GoogleCloudRunV2Container> containers) {
    this.containers = containers;
    return this;
  }

  public GoogleCloudRunV2Revision addContainersItem(GoogleCloudRunV2Container containersItem) {
    if (this.containers == null) {
      this.containers = new ArrayList<>();
    }
    this.containers.add(containersItem);
    return this;
  }

  /**
   * Holds the single container that defines the unit of execution for this Revision.
   * @return containers
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRunV2Container> getContainers() {
    return containers;
  }

  public void setContainers(List<GoogleCloudRunV2Container> containers) {
    this.containers = containers;
  }


  /**
   * Output only. The creation time.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. For a deleted resource, the deletion time. It is only populated as a response to a Delete request.
   * @return deleteTime
   */
  @javax.annotation.Nullable
  public String getDeleteTime() {
    return deleteTime;
  }



  public GoogleCloudRunV2Revision encryptionKey(String encryptionKey) {
    this.encryptionKey = encryptionKey;
    return this;
  }

  /**
   * A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
   * @return encryptionKey
   */
  @javax.annotation.Nullable
  public String getEncryptionKey() {
    return encryptionKey;
  }

  public void setEncryptionKey(String encryptionKey) {
    this.encryptionKey = encryptionKey;
  }


  public GoogleCloudRunV2Revision encryptionKeyRevocationAction(EncryptionKeyRevocationActionEnum encryptionKeyRevocationAction) {
    this.encryptionKeyRevocationAction = encryptionKeyRevocationAction;
    return this;
  }

  /**
   * The action to take if the encryption key is revoked.
   * @return encryptionKeyRevocationAction
   */
  @javax.annotation.Nullable
  public EncryptionKeyRevocationActionEnum getEncryptionKeyRevocationAction() {
    return encryptionKeyRevocationAction;
  }

  public void setEncryptionKeyRevocationAction(EncryptionKeyRevocationActionEnum encryptionKeyRevocationAction) {
    this.encryptionKeyRevocationAction = encryptionKeyRevocationAction;
  }


  public GoogleCloudRunV2Revision encryptionKeyShutdownDuration(String encryptionKeyShutdownDuration) {
    this.encryptionKeyShutdownDuration = encryptionKeyShutdownDuration;
    return this;
  }

  /**
   * If encryption_key_revocation_action is SHUTDOWN, the duration before shutting down all instances. The minimum increment is 1 hour.
   * @return encryptionKeyShutdownDuration
   */
  @javax.annotation.Nullable
  public String getEncryptionKeyShutdownDuration() {
    return encryptionKeyShutdownDuration;
  }

  public void setEncryptionKeyShutdownDuration(String encryptionKeyShutdownDuration) {
    this.encryptionKeyShutdownDuration = encryptionKeyShutdownDuration;
  }


  /**
   * Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }



  public GoogleCloudRunV2Revision executionEnvironment(ExecutionEnvironmentEnum executionEnvironment) {
    this.executionEnvironment = executionEnvironment;
    return this;
  }

  /**
   * The execution environment being used to host this Revision.
   * @return executionEnvironment
   */
  @javax.annotation.Nullable
  public ExecutionEnvironmentEnum getExecutionEnvironment() {
    return executionEnvironment;
  }

  public void setExecutionEnvironment(ExecutionEnvironmentEnum executionEnvironment) {
    this.executionEnvironment = executionEnvironment;
  }


  /**
   * Output only. For a deleted resource, the time after which it will be permamently deleted. It is only populated as a response to a Delete request.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }



  /**
   * Output only. A number that monotonically increases every time the user modifies the desired state.
   * @return generation
   */
  @javax.annotation.Nullable
  public String getGeneration() {
    return generation;
  }



  /**
   * Output only. Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google&#39;s billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }



  public GoogleCloudRunV2Revision launchStage(LaunchStageEnum launchStage) {
    this.launchStage = launchStage;
    return this;
  }

  /**
   * The least stable launch stage needed to create this resource, as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports &#x60;ALPHA&#x60;, &#x60;BETA&#x60;, and &#x60;GA&#x60;. Note that this value might not be what was used as input. For example, if ALPHA was provided as input in the parent resource, but only BETA and GA-level features are were, this field will be BETA.
   * @return launchStage
   */
  @javax.annotation.Nullable
  public LaunchStageEnum getLaunchStage() {
    return launchStage;
  }

  public void setLaunchStage(LaunchStageEnum launchStage) {
    this.launchStage = launchStage;
  }


  /**
   * Output only. The Google Console URI to obtain logs for the Revision.
   * @return logUri
   */
  @javax.annotation.Nullable
  public String getLogUri() {
    return logUri;
  }



  public GoogleCloudRunV2Revision maxInstanceRequestConcurrency(Integer maxInstanceRequestConcurrency) {
    this.maxInstanceRequestConcurrency = maxInstanceRequestConcurrency;
    return this;
  }

  /**
   * Sets the maximum number of requests that each serving instance can receive.
   * @return maxInstanceRequestConcurrency
   */
  @javax.annotation.Nullable
  public Integer getMaxInstanceRequestConcurrency() {
    return maxInstanceRequestConcurrency;
  }

  public void setMaxInstanceRequestConcurrency(Integer maxInstanceRequestConcurrency) {
    this.maxInstanceRequestConcurrency = maxInstanceRequestConcurrency;
  }


  /**
   * Output only. The unique name of this Revision.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. The generation of this Revision currently serving traffic. See comments in &#x60;reconciling&#x60; for additional information on reconciliation process in Cloud Run.
   * @return observedGeneration
   */
  @javax.annotation.Nullable
  public String getObservedGeneration() {
    return observedGeneration;
  }



  /**
   * Output only. Indicates whether the resource&#39;s reconciliation is still in progress. See comments in &#x60;Service.reconciling&#x60; for additional information on reconciliation process in Cloud Run.
   * @return reconciling
   */
  @javax.annotation.Nullable
  public Boolean getReconciling() {
    return reconciling;
  }



  /**
   * Output only. Reserved for future use.
   * @return satisfiesPzs
   */
  @javax.annotation.Nullable
  public Boolean getSatisfiesPzs() {
    return satisfiesPzs;
  }



  public GoogleCloudRunV2Revision scaling(GoogleCloudRunV2RevisionScaling scaling) {
    this.scaling = scaling;
    return this;
  }

  /**
   * Get scaling
   * @return scaling
   */
  @javax.annotation.Nullable
  public GoogleCloudRunV2RevisionScaling getScaling() {
    return scaling;
  }

  public void setScaling(GoogleCloudRunV2RevisionScaling scaling) {
    this.scaling = scaling;
  }


  public GoogleCloudRunV2Revision scalingStatus(GoogleCloudRunV2RevisionScalingStatus scalingStatus) {
    this.scalingStatus = scalingStatus;
    return this;
  }

  /**
   * Get scalingStatus
   * @return scalingStatus
   */
  @javax.annotation.Nullable
  public GoogleCloudRunV2RevisionScalingStatus getScalingStatus() {
    return scalingStatus;
  }

  public void setScalingStatus(GoogleCloudRunV2RevisionScalingStatus scalingStatus) {
    this.scalingStatus = scalingStatus;
  }


  /**
   * Output only. The name of the parent service.
   * @return service
   */
  @javax.annotation.Nullable
  public String getService() {
    return service;
  }



  public GoogleCloudRunV2Revision serviceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

  /**
   * Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has.
   * @return serviceAccount
   */
  @javax.annotation.Nullable
  public String getServiceAccount() {
    return serviceAccount;
  }

  public void setServiceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
  }


  public GoogleCloudRunV2Revision sessionAffinity(Boolean sessionAffinity) {
    this.sessionAffinity = sessionAffinity;
    return this;
  }

  /**
   * Enable session affinity.
   * @return sessionAffinity
   */
  @javax.annotation.Nullable
  public Boolean getSessionAffinity() {
    return sessionAffinity;
  }

  public void setSessionAffinity(Boolean sessionAffinity) {
    this.sessionAffinity = sessionAffinity;
  }


  public GoogleCloudRunV2Revision timeout(String timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Max allowed time for an instance to respond to a request.
   * @return timeout
   */
  @javax.annotation.Nullable
  public String getTimeout() {
    return timeout;
  }

  public void setTimeout(String timeout) {
    this.timeout = timeout;
  }


  /**
   * Output only. Server assigned unique identifier for the Revision. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. The last-modified time.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public GoogleCloudRunV2Revision volumes(List<GoogleCloudRunV2Volume> volumes) {
    this.volumes = volumes;
    return this;
  }

  public GoogleCloudRunV2Revision addVolumesItem(GoogleCloudRunV2Volume volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

  /**
   * A list of Volumes to make available to containers.
   * @return volumes
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRunV2Volume> getVolumes() {
    return volumes;
  }

  public void setVolumes(List<GoogleCloudRunV2Volume> volumes) {
    this.volumes = volumes;
  }


  public GoogleCloudRunV2Revision vpcAccess(GoogleCloudRunV2VpcAccess vpcAccess) {
    this.vpcAccess = vpcAccess;
    return this;
  }

  /**
   * Get vpcAccess
   * @return vpcAccess
   */
  @javax.annotation.Nullable
  public GoogleCloudRunV2VpcAccess getVpcAccess() {
    return vpcAccess;
  }

  public void setVpcAccess(GoogleCloudRunV2VpcAccess vpcAccess) {
    this.vpcAccess = vpcAccess;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRunV2Revision googleCloudRunV2Revision = (GoogleCloudRunV2Revision) o;
    return Objects.equals(this.annotations, googleCloudRunV2Revision.annotations) &&
        Objects.equals(this.conditions, googleCloudRunV2Revision.conditions) &&
        Objects.equals(this.containers, googleCloudRunV2Revision.containers) &&
        Objects.equals(this.createTime, googleCloudRunV2Revision.createTime) &&
        Objects.equals(this.deleteTime, googleCloudRunV2Revision.deleteTime) &&
        Objects.equals(this.encryptionKey, googleCloudRunV2Revision.encryptionKey) &&
        Objects.equals(this.encryptionKeyRevocationAction, googleCloudRunV2Revision.encryptionKeyRevocationAction) &&
        Objects.equals(this.encryptionKeyShutdownDuration, googleCloudRunV2Revision.encryptionKeyShutdownDuration) &&
        Objects.equals(this.etag, googleCloudRunV2Revision.etag) &&
        Objects.equals(this.executionEnvironment, googleCloudRunV2Revision.executionEnvironment) &&
        Objects.equals(this.expireTime, googleCloudRunV2Revision.expireTime) &&
        Objects.equals(this.generation, googleCloudRunV2Revision.generation) &&
        Objects.equals(this.labels, googleCloudRunV2Revision.labels) &&
        Objects.equals(this.launchStage, googleCloudRunV2Revision.launchStage) &&
        Objects.equals(this.logUri, googleCloudRunV2Revision.logUri) &&
        Objects.equals(this.maxInstanceRequestConcurrency, googleCloudRunV2Revision.maxInstanceRequestConcurrency) &&
        Objects.equals(this.name, googleCloudRunV2Revision.name) &&
        Objects.equals(this.observedGeneration, googleCloudRunV2Revision.observedGeneration) &&
        Objects.equals(this.reconciling, googleCloudRunV2Revision.reconciling) &&
        Objects.equals(this.satisfiesPzs, googleCloudRunV2Revision.satisfiesPzs) &&
        Objects.equals(this.scaling, googleCloudRunV2Revision.scaling) &&
        Objects.equals(this.scalingStatus, googleCloudRunV2Revision.scalingStatus) &&
        Objects.equals(this.service, googleCloudRunV2Revision.service) &&
        Objects.equals(this.serviceAccount, googleCloudRunV2Revision.serviceAccount) &&
        Objects.equals(this.sessionAffinity, googleCloudRunV2Revision.sessionAffinity) &&
        Objects.equals(this.timeout, googleCloudRunV2Revision.timeout) &&
        Objects.equals(this.uid, googleCloudRunV2Revision.uid) &&
        Objects.equals(this.updateTime, googleCloudRunV2Revision.updateTime) &&
        Objects.equals(this.volumes, googleCloudRunV2Revision.volumes) &&
        Objects.equals(this.vpcAccess, googleCloudRunV2Revision.vpcAccess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, conditions, containers, createTime, deleteTime, encryptionKey, encryptionKeyRevocationAction, encryptionKeyShutdownDuration, etag, executionEnvironment, expireTime, generation, labels, launchStage, logUri, maxInstanceRequestConcurrency, name, observedGeneration, reconciling, satisfiesPzs, scaling, scalingStatus, service, serviceAccount, sessionAffinity, timeout, uid, updateTime, volumes, vpcAccess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRunV2Revision {\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    deleteTime: ").append(toIndentedString(deleteTime)).append("\n");
    sb.append("    encryptionKey: ").append(toIndentedString(encryptionKey)).append("\n");
    sb.append("    encryptionKeyRevocationAction: ").append(toIndentedString(encryptionKeyRevocationAction)).append("\n");
    sb.append("    encryptionKeyShutdownDuration: ").append(toIndentedString(encryptionKeyShutdownDuration)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    executionEnvironment: ").append(toIndentedString(executionEnvironment)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    generation: ").append(toIndentedString(generation)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    launchStage: ").append(toIndentedString(launchStage)).append("\n");
    sb.append("    logUri: ").append(toIndentedString(logUri)).append("\n");
    sb.append("    maxInstanceRequestConcurrency: ").append(toIndentedString(maxInstanceRequestConcurrency)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    observedGeneration: ").append(toIndentedString(observedGeneration)).append("\n");
    sb.append("    reconciling: ").append(toIndentedString(reconciling)).append("\n");
    sb.append("    satisfiesPzs: ").append(toIndentedString(satisfiesPzs)).append("\n");
    sb.append("    scaling: ").append(toIndentedString(scaling)).append("\n");
    sb.append("    scalingStatus: ").append(toIndentedString(scalingStatus)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    serviceAccount: ").append(toIndentedString(serviceAccount)).append("\n");
    sb.append("    sessionAffinity: ").append(toIndentedString(sessionAffinity)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("    vpcAccess: ").append(toIndentedString(vpcAccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotations");
    openapiFields.add("conditions");
    openapiFields.add("containers");
    openapiFields.add("createTime");
    openapiFields.add("deleteTime");
    openapiFields.add("encryptionKey");
    openapiFields.add("encryptionKeyRevocationAction");
    openapiFields.add("encryptionKeyShutdownDuration");
    openapiFields.add("etag");
    openapiFields.add("executionEnvironment");
    openapiFields.add("expireTime");
    openapiFields.add("generation");
    openapiFields.add("labels");
    openapiFields.add("launchStage");
    openapiFields.add("logUri");
    openapiFields.add("maxInstanceRequestConcurrency");
    openapiFields.add("name");
    openapiFields.add("observedGeneration");
    openapiFields.add("reconciling");
    openapiFields.add("satisfiesPzs");
    openapiFields.add("scaling");
    openapiFields.add("scalingStatus");
    openapiFields.add("service");
    openapiFields.add("serviceAccount");
    openapiFields.add("sessionAffinity");
    openapiFields.add("timeout");
    openapiFields.add("uid");
    openapiFields.add("updateTime");
    openapiFields.add("volumes");
    openapiFields.add("vpcAccess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRunV2Revision
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRunV2Revision.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRunV2Revision is not found in the empty JSON string", GoogleCloudRunV2Revision.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRunV2Revision.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRunV2Revision` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            GoogleCloudRunV2Condition.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
      if (jsonObj.get("containers") != null && !jsonObj.get("containers").isJsonNull()) {
        JsonArray jsonArraycontainers = jsonObj.getAsJsonArray("containers");
        if (jsonArraycontainers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("containers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `containers` to be an array in the JSON string but got `%s`", jsonObj.get("containers").toString()));
          }

          // validate the optional field `containers` (array)
          for (int i = 0; i < jsonArraycontainers.size(); i++) {
            GoogleCloudRunV2Container.validateJsonElement(jsonArraycontainers.get(i));
          };
        }
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("deleteTime") != null && !jsonObj.get("deleteTime").isJsonNull()) && !jsonObj.get("deleteTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteTime").toString()));
      }
      if ((jsonObj.get("encryptionKey") != null && !jsonObj.get("encryptionKey").isJsonNull()) && !jsonObj.get("encryptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionKey").toString()));
      }
      if ((jsonObj.get("encryptionKeyRevocationAction") != null && !jsonObj.get("encryptionKeyRevocationAction").isJsonNull()) && !jsonObj.get("encryptionKeyRevocationAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionKeyRevocationAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionKeyRevocationAction").toString()));
      }
      // validate the optional field `encryptionKeyRevocationAction`
      if (jsonObj.get("encryptionKeyRevocationAction") != null && !jsonObj.get("encryptionKeyRevocationAction").isJsonNull()) {
        EncryptionKeyRevocationActionEnum.validateJsonElement(jsonObj.get("encryptionKeyRevocationAction"));
      }
      if ((jsonObj.get("encryptionKeyShutdownDuration") != null && !jsonObj.get("encryptionKeyShutdownDuration").isJsonNull()) && !jsonObj.get("encryptionKeyShutdownDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionKeyShutdownDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionKeyShutdownDuration").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("executionEnvironment") != null && !jsonObj.get("executionEnvironment").isJsonNull()) && !jsonObj.get("executionEnvironment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionEnvironment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionEnvironment").toString()));
      }
      // validate the optional field `executionEnvironment`
      if (jsonObj.get("executionEnvironment") != null && !jsonObj.get("executionEnvironment").isJsonNull()) {
        ExecutionEnvironmentEnum.validateJsonElement(jsonObj.get("executionEnvironment"));
      }
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      if ((jsonObj.get("generation") != null && !jsonObj.get("generation").isJsonNull()) && !jsonObj.get("generation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `generation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("generation").toString()));
      }
      if ((jsonObj.get("launchStage") != null && !jsonObj.get("launchStage").isJsonNull()) && !jsonObj.get("launchStage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `launchStage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("launchStage").toString()));
      }
      // validate the optional field `launchStage`
      if (jsonObj.get("launchStage") != null && !jsonObj.get("launchStage").isJsonNull()) {
        LaunchStageEnum.validateJsonElement(jsonObj.get("launchStage"));
      }
      if ((jsonObj.get("logUri") != null && !jsonObj.get("logUri").isJsonNull()) && !jsonObj.get("logUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logUri").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("observedGeneration") != null && !jsonObj.get("observedGeneration").isJsonNull()) && !jsonObj.get("observedGeneration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `observedGeneration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("observedGeneration").toString()));
      }
      // validate the optional field `scaling`
      if (jsonObj.get("scaling") != null && !jsonObj.get("scaling").isJsonNull()) {
        GoogleCloudRunV2RevisionScaling.validateJsonElement(jsonObj.get("scaling"));
      }
      // validate the optional field `scalingStatus`
      if (jsonObj.get("scalingStatus") != null && !jsonObj.get("scalingStatus").isJsonNull()) {
        GoogleCloudRunV2RevisionScalingStatus.validateJsonElement(jsonObj.get("scalingStatus"));
      }
      if ((jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) && !jsonObj.get("service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service").toString()));
      }
      if ((jsonObj.get("serviceAccount") != null && !jsonObj.get("serviceAccount").isJsonNull()) && !jsonObj.get("serviceAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccount").toString()));
      }
      if ((jsonObj.get("timeout") != null && !jsonObj.get("timeout").isJsonNull()) && !jsonObj.get("timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeout").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if (jsonObj.get("volumes") != null && !jsonObj.get("volumes").isJsonNull()) {
        JsonArray jsonArrayvolumes = jsonObj.getAsJsonArray("volumes");
        if (jsonArrayvolumes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumes` to be an array in the JSON string but got `%s`", jsonObj.get("volumes").toString()));
          }

          // validate the optional field `volumes` (array)
          for (int i = 0; i < jsonArrayvolumes.size(); i++) {
            GoogleCloudRunV2Volume.validateJsonElement(jsonArrayvolumes.get(i));
          };
        }
      }
      // validate the optional field `vpcAccess`
      if (jsonObj.get("vpcAccess") != null && !jsonObj.get("vpcAccess").isJsonNull()) {
        GoogleCloudRunV2VpcAccess.validateJsonElement(jsonObj.get("vpcAccess"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRunV2Revision.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRunV2Revision' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRunV2Revision> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRunV2Revision.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRunV2Revision>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRunV2Revision value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRunV2Revision read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRunV2Revision given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRunV2Revision
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRunV2Revision
   */
  public static GoogleCloudRunV2Revision fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRunV2Revision.class);
  }

  /**
   * Convert an instance of GoogleCloudRunV2Revision to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

