/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudRunV2ContainerOverride;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RunJob Overrides that contains Execution fields to be overridden.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:07.645646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRunV2Overrides {
  public static final String SERIALIZED_NAME_CONTAINER_OVERRIDES = "containerOverrides";
  @SerializedName(SERIALIZED_NAME_CONTAINER_OVERRIDES)
  private List<GoogleCloudRunV2ContainerOverride> containerOverrides = new ArrayList<>();

  public static final String SERIALIZED_NAME_TASK_COUNT = "taskCount";
  @SerializedName(SERIALIZED_NAME_TASK_COUNT)
  private Integer taskCount;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private String timeout;

  public GoogleCloudRunV2Overrides() {
  }

  public GoogleCloudRunV2Overrides containerOverrides(List<GoogleCloudRunV2ContainerOverride> containerOverrides) {
    this.containerOverrides = containerOverrides;
    return this;
  }

  public GoogleCloudRunV2Overrides addContainerOverridesItem(GoogleCloudRunV2ContainerOverride containerOverridesItem) {
    if (this.containerOverrides == null) {
      this.containerOverrides = new ArrayList<>();
    }
    this.containerOverrides.add(containerOverridesItem);
    return this;
  }

  /**
   * Per container override specification.
   * @return containerOverrides
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRunV2ContainerOverride> getContainerOverrides() {
    return containerOverrides;
  }

  public void setContainerOverrides(List<GoogleCloudRunV2ContainerOverride> containerOverrides) {
    this.containerOverrides = containerOverrides;
  }


  public GoogleCloudRunV2Overrides taskCount(Integer taskCount) {
    this.taskCount = taskCount;
    return this;
  }

  /**
   * Optional. The desired number of tasks the execution should run. Will replace existing task_count value.
   * @return taskCount
   */
  @javax.annotation.Nullable
  public Integer getTaskCount() {
    return taskCount;
  }

  public void setTaskCount(Integer taskCount) {
    this.taskCount = taskCount;
  }


  public GoogleCloudRunV2Overrides timeout(String timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Duration in seconds the task may be active before the system will actively try to mark it failed and kill associated containers. Will replace existing timeout_seconds value.
   * @return timeout
   */
  @javax.annotation.Nullable
  public String getTimeout() {
    return timeout;
  }

  public void setTimeout(String timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRunV2Overrides googleCloudRunV2Overrides = (GoogleCloudRunV2Overrides) o;
    return Objects.equals(this.containerOverrides, googleCloudRunV2Overrides.containerOverrides) &&
        Objects.equals(this.taskCount, googleCloudRunV2Overrides.taskCount) &&
        Objects.equals(this.timeout, googleCloudRunV2Overrides.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerOverrides, taskCount, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRunV2Overrides {\n");
    sb.append("    containerOverrides: ").append(toIndentedString(containerOverrides)).append("\n");
    sb.append("    taskCount: ").append(toIndentedString(taskCount)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containerOverrides");
    openapiFields.add("taskCount");
    openapiFields.add("timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRunV2Overrides
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRunV2Overrides.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRunV2Overrides is not found in the empty JSON string", GoogleCloudRunV2Overrides.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRunV2Overrides.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRunV2Overrides` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("containerOverrides") != null && !jsonObj.get("containerOverrides").isJsonNull()) {
        JsonArray jsonArraycontainerOverrides = jsonObj.getAsJsonArray("containerOverrides");
        if (jsonArraycontainerOverrides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("containerOverrides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `containerOverrides` to be an array in the JSON string but got `%s`", jsonObj.get("containerOverrides").toString()));
          }

          // validate the optional field `containerOverrides` (array)
          for (int i = 0; i < jsonArraycontainerOverrides.size(); i++) {
            GoogleCloudRunV2ContainerOverride.validateJsonElement(jsonArraycontainerOverrides.get(i));
          };
        }
      }
      if ((jsonObj.get("timeout") != null && !jsonObj.get("timeout").isJsonNull()) && !jsonObj.get("timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeout").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRunV2Overrides.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRunV2Overrides' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRunV2Overrides> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRunV2Overrides.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRunV2Overrides>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRunV2Overrides value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRunV2Overrides read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRunV2Overrides given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRunV2Overrides
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRunV2Overrides
   */
  public static GoogleCloudRunV2Overrides fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRunV2Overrides.class);
  }

  /**
   * Convert an instance of GoogleCloudRunV2Overrides to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

