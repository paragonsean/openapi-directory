/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudRunV2Condition;
import org.openapitools.client.model.GoogleCloudRunV2Container;
import org.openapitools.client.model.GoogleCloudRunV2TaskAttemptResult;
import org.openapitools.client.model.GoogleCloudRunV2Volume;
import org.openapitools.client.model.GoogleCloudRunV2VpcAccess;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Task represents a single run of a container to completion.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:07.645646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRunV2Task {
  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Map<String, String> annotations = new HashMap<>();

  public static final String SERIALIZED_NAME_COMPLETION_TIME = "completionTime";
  @SerializedName(SERIALIZED_NAME_COMPLETION_TIME)
  private String completionTime;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<GoogleCloudRunV2Condition> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTAINERS = "containers";
  @SerializedName(SERIALIZED_NAME_CONTAINERS)
  private List<GoogleCloudRunV2Container> containers = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DELETE_TIME = "deleteTime";
  @SerializedName(SERIALIZED_NAME_DELETE_TIME)
  private String deleteTime;

  public static final String SERIALIZED_NAME_ENCRYPTION_KEY = "encryptionKey";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY)
  private String encryptionKey;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_EXECUTION = "execution";
  @SerializedName(SERIALIZED_NAME_EXECUTION)
  private String execution;

  /**
   * The execution environment being used to host this Task.
   */
  @JsonAdapter(ExecutionEnvironmentEnum.Adapter.class)
  public enum ExecutionEnvironmentEnum {
    UNSPECIFIED("EXECUTION_ENVIRONMENT_UNSPECIFIED"),
    
    GEN1("EXECUTION_ENVIRONMENT_GEN1"),
    
    GEN2("EXECUTION_ENVIRONMENT_GEN2");

    private String value;

    ExecutionEnvironmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExecutionEnvironmentEnum fromValue(String value) {
      for (ExecutionEnvironmentEnum b : ExecutionEnvironmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExecutionEnvironmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExecutionEnvironmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExecutionEnvironmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExecutionEnvironmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExecutionEnvironmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXECUTION_ENVIRONMENT = "executionEnvironment";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ENVIRONMENT)
  private ExecutionEnvironmentEnum executionEnvironment;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private String expireTime;

  public static final String SERIALIZED_NAME_GENERATION = "generation";
  @SerializedName(SERIALIZED_NAME_GENERATION)
  private String generation;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_JOB = "job";
  @SerializedName(SERIALIZED_NAME_JOB)
  private String job;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_LAST_ATTEMPT_RESULT = "lastAttemptResult";
  @SerializedName(SERIALIZED_NAME_LAST_ATTEMPT_RESULT)
  private GoogleCloudRunV2TaskAttemptResult lastAttemptResult;

  public static final String SERIALIZED_NAME_LOG_URI = "logUri";
  @SerializedName(SERIALIZED_NAME_LOG_URI)
  private String logUri;

  public static final String SERIALIZED_NAME_MAX_RETRIES = "maxRetries";
  @SerializedName(SERIALIZED_NAME_MAX_RETRIES)
  private Integer maxRetries;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OBSERVED_GENERATION = "observedGeneration";
  @SerializedName(SERIALIZED_NAME_OBSERVED_GENERATION)
  private String observedGeneration;

  public static final String SERIALIZED_NAME_RECONCILING = "reconciling";
  @SerializedName(SERIALIZED_NAME_RECONCILING)
  private Boolean reconciling;

  public static final String SERIALIZED_NAME_RETRIED = "retried";
  @SerializedName(SERIALIZED_NAME_RETRIED)
  private Integer retried;

  public static final String SERIALIZED_NAME_SATISFIES_PZS = "satisfiesPzs";
  @SerializedName(SERIALIZED_NAME_SATISFIES_PZS)
  private Boolean satisfiesPzs;

  public static final String SERIALIZED_NAME_SCHEDULED_TIME = "scheduledTime";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TIME)
  private String scheduledTime;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT = "serviceAccount";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT)
  private String serviceAccount;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private String timeout;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List<GoogleCloudRunV2Volume> volumes = new ArrayList<>();

  public static final String SERIALIZED_NAME_VPC_ACCESS = "vpcAccess";
  @SerializedName(SERIALIZED_NAME_VPC_ACCESS)
  private GoogleCloudRunV2VpcAccess vpcAccess;

  public GoogleCloudRunV2Task() {
  }

  public GoogleCloudRunV2Task(
     Map<String, String> annotations, 
     String completionTime, 
     List<GoogleCloudRunV2Condition> conditions, 
     String createTime, 
     String deleteTime, 
     String encryptionKey, 
     String etag, 
     String execution, 
     String expireTime, 
     String generation, 
     Integer index, 
     String job, 
     Map<String, String> labels, 
     String logUri, 
     String name, 
     String observedGeneration, 
     Boolean reconciling, 
     Integer retried, 
     Boolean satisfiesPzs, 
     String scheduledTime, 
     String startTime, 
     String uid, 
     String updateTime
  ) {
    this();
    this.annotations = annotations;
    this.completionTime = completionTime;
    this.conditions = conditions;
    this.createTime = createTime;
    this.deleteTime = deleteTime;
    this.encryptionKey = encryptionKey;
    this.etag = etag;
    this.execution = execution;
    this.expireTime = expireTime;
    this.generation = generation;
    this.index = index;
    this.job = job;
    this.labels = labels;
    this.logUri = logUri;
    this.name = name;
    this.observedGeneration = observedGeneration;
    this.reconciling = reconciling;
    this.retried = retried;
    this.satisfiesPzs = satisfiesPzs;
    this.scheduledTime = scheduledTime;
    this.startTime = startTime;
    this.uid = uid;
    this.updateTime = updateTime;
  }

  /**
   * Output only. Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.
   * @return annotations
   */
  @javax.annotation.Nullable
  public Map<String, String> getAnnotations() {
    return annotations;
  }



  /**
   * Output only. Represents time when the Task was completed. It is not guaranteed to be set in happens-before order across separate operations.
   * @return completionTime
   */
  @javax.annotation.Nullable
  public String getCompletionTime() {
    return completionTime;
  }



  /**
   * Output only. The Condition of this Task, containing its readiness status, and detailed error information in case it did not reach the desired state.
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRunV2Condition> getConditions() {
    return conditions;
  }



  public GoogleCloudRunV2Task containers(List<GoogleCloudRunV2Container> containers) {
    this.containers = containers;
    return this;
  }

  public GoogleCloudRunV2Task addContainersItem(GoogleCloudRunV2Container containersItem) {
    if (this.containers == null) {
      this.containers = new ArrayList<>();
    }
    this.containers.add(containersItem);
    return this;
  }

  /**
   * Holds the single container that defines the unit of execution for this task.
   * @return containers
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRunV2Container> getContainers() {
    return containers;
  }

  public void setContainers(List<GoogleCloudRunV2Container> containers) {
    this.containers = containers;
  }


  /**
   * Output only. Represents time when the task was created by the system. It is not guaranteed to be set in happens-before order across separate operations.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. For a deleted resource, the deletion time. It is only populated as a response to a Delete request.
   * @return deleteTime
   */
  @javax.annotation.Nullable
  public String getDeleteTime() {
    return deleteTime;
  }



  /**
   * Output only. A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek
   * @return encryptionKey
   */
  @javax.annotation.Nullable
  public String getEncryptionKey() {
    return encryptionKey;
  }



  /**
   * Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }



  /**
   * Output only. The name of the parent Execution.
   * @return execution
   */
  @javax.annotation.Nullable
  public String getExecution() {
    return execution;
  }



  public GoogleCloudRunV2Task executionEnvironment(ExecutionEnvironmentEnum executionEnvironment) {
    this.executionEnvironment = executionEnvironment;
    return this;
  }

  /**
   * The execution environment being used to host this Task.
   * @return executionEnvironment
   */
  @javax.annotation.Nullable
  public ExecutionEnvironmentEnum getExecutionEnvironment() {
    return executionEnvironment;
  }

  public void setExecutionEnvironment(ExecutionEnvironmentEnum executionEnvironment) {
    this.executionEnvironment = executionEnvironment;
  }


  /**
   * Output only. For a deleted resource, the time after which it will be permamently deleted. It is only populated as a response to a Delete request.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }



  /**
   * Output only. A number that monotonically increases every time the user modifies the desired state.
   * @return generation
   */
  @javax.annotation.Nullable
  public String getGeneration() {
    return generation;
  }



  /**
   * Output only. Index of the Task, unique per execution, and beginning at 0.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }



  /**
   * Output only. The name of the parent Job.
   * @return job
   */
  @javax.annotation.Nullable
  public String getJob() {
    return job;
  }



  /**
   * Output only. Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google&#39;s billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }



  public GoogleCloudRunV2Task lastAttemptResult(GoogleCloudRunV2TaskAttemptResult lastAttemptResult) {
    this.lastAttemptResult = lastAttemptResult;
    return this;
  }

  /**
   * Get lastAttemptResult
   * @return lastAttemptResult
   */
  @javax.annotation.Nullable
  public GoogleCloudRunV2TaskAttemptResult getLastAttemptResult() {
    return lastAttemptResult;
  }

  public void setLastAttemptResult(GoogleCloudRunV2TaskAttemptResult lastAttemptResult) {
    this.lastAttemptResult = lastAttemptResult;
  }


  /**
   * Output only. URI where logs for this execution can be found in Cloud Console.
   * @return logUri
   */
  @javax.annotation.Nullable
  public String getLogUri() {
    return logUri;
  }



  public GoogleCloudRunV2Task maxRetries(Integer maxRetries) {
    this.maxRetries = maxRetries;
    return this;
  }

  /**
   * Number of retries allowed per Task, before marking this Task failed.
   * @return maxRetries
   */
  @javax.annotation.Nullable
  public Integer getMaxRetries() {
    return maxRetries;
  }

  public void setMaxRetries(Integer maxRetries) {
    this.maxRetries = maxRetries;
  }


  /**
   * Output only. The unique name of this Task.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. The generation of this Task. See comments in &#x60;Job.reconciling&#x60; for additional information on reconciliation process in Cloud Run.
   * @return observedGeneration
   */
  @javax.annotation.Nullable
  public String getObservedGeneration() {
    return observedGeneration;
  }



  /**
   * Output only. Indicates whether the resource&#39;s reconciliation is still in progress. See comments in &#x60;Job.reconciling&#x60; for additional information on reconciliation process in Cloud Run.
   * @return reconciling
   */
  @javax.annotation.Nullable
  public Boolean getReconciling() {
    return reconciling;
  }



  /**
   * Output only. The number of times this Task was retried. Tasks are retried when they fail up to the maxRetries limit.
   * @return retried
   */
  @javax.annotation.Nullable
  public Integer getRetried() {
    return retried;
  }



  /**
   * Output only. Reserved for future use.
   * @return satisfiesPzs
   */
  @javax.annotation.Nullable
  public Boolean getSatisfiesPzs() {
    return satisfiesPzs;
  }



  /**
   * Output only. Represents time when the task was scheduled to run by the system. It is not guaranteed to be set in happens-before order across separate operations.
   * @return scheduledTime
   */
  @javax.annotation.Nullable
  public String getScheduledTime() {
    return scheduledTime;
  }



  public GoogleCloudRunV2Task serviceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

  /**
   * Email address of the IAM service account associated with the Task of a Job. The service account represents the identity of the running task, and determines what permissions the task has. If not provided, the task will use the project&#39;s default service account.
   * @return serviceAccount
   */
  @javax.annotation.Nullable
  public String getServiceAccount() {
    return serviceAccount;
  }

  public void setServiceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
  }


  /**
   * Output only. Represents time when the task started to run. It is not guaranteed to be set in happens-before order across separate operations.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }



  public GoogleCloudRunV2Task timeout(String timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout.
   * @return timeout
   */
  @javax.annotation.Nullable
  public String getTimeout() {
    return timeout;
  }

  public void setTimeout(String timeout) {
    this.timeout = timeout;
  }


  /**
   * Output only. Server assigned unique identifier for the Task. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. The last-modified time.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public GoogleCloudRunV2Task volumes(List<GoogleCloudRunV2Volume> volumes) {
    this.volumes = volumes;
    return this;
  }

  public GoogleCloudRunV2Task addVolumesItem(GoogleCloudRunV2Volume volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

  /**
   * A list of Volumes to make available to containers.
   * @return volumes
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRunV2Volume> getVolumes() {
    return volumes;
  }

  public void setVolumes(List<GoogleCloudRunV2Volume> volumes) {
    this.volumes = volumes;
  }


  public GoogleCloudRunV2Task vpcAccess(GoogleCloudRunV2VpcAccess vpcAccess) {
    this.vpcAccess = vpcAccess;
    return this;
  }

  /**
   * Get vpcAccess
   * @return vpcAccess
   */
  @javax.annotation.Nullable
  public GoogleCloudRunV2VpcAccess getVpcAccess() {
    return vpcAccess;
  }

  public void setVpcAccess(GoogleCloudRunV2VpcAccess vpcAccess) {
    this.vpcAccess = vpcAccess;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRunV2Task googleCloudRunV2Task = (GoogleCloudRunV2Task) o;
    return Objects.equals(this.annotations, googleCloudRunV2Task.annotations) &&
        Objects.equals(this.completionTime, googleCloudRunV2Task.completionTime) &&
        Objects.equals(this.conditions, googleCloudRunV2Task.conditions) &&
        Objects.equals(this.containers, googleCloudRunV2Task.containers) &&
        Objects.equals(this.createTime, googleCloudRunV2Task.createTime) &&
        Objects.equals(this.deleteTime, googleCloudRunV2Task.deleteTime) &&
        Objects.equals(this.encryptionKey, googleCloudRunV2Task.encryptionKey) &&
        Objects.equals(this.etag, googleCloudRunV2Task.etag) &&
        Objects.equals(this.execution, googleCloudRunV2Task.execution) &&
        Objects.equals(this.executionEnvironment, googleCloudRunV2Task.executionEnvironment) &&
        Objects.equals(this.expireTime, googleCloudRunV2Task.expireTime) &&
        Objects.equals(this.generation, googleCloudRunV2Task.generation) &&
        Objects.equals(this.index, googleCloudRunV2Task.index) &&
        Objects.equals(this.job, googleCloudRunV2Task.job) &&
        Objects.equals(this.labels, googleCloudRunV2Task.labels) &&
        Objects.equals(this.lastAttemptResult, googleCloudRunV2Task.lastAttemptResult) &&
        Objects.equals(this.logUri, googleCloudRunV2Task.logUri) &&
        Objects.equals(this.maxRetries, googleCloudRunV2Task.maxRetries) &&
        Objects.equals(this.name, googleCloudRunV2Task.name) &&
        Objects.equals(this.observedGeneration, googleCloudRunV2Task.observedGeneration) &&
        Objects.equals(this.reconciling, googleCloudRunV2Task.reconciling) &&
        Objects.equals(this.retried, googleCloudRunV2Task.retried) &&
        Objects.equals(this.satisfiesPzs, googleCloudRunV2Task.satisfiesPzs) &&
        Objects.equals(this.scheduledTime, googleCloudRunV2Task.scheduledTime) &&
        Objects.equals(this.serviceAccount, googleCloudRunV2Task.serviceAccount) &&
        Objects.equals(this.startTime, googleCloudRunV2Task.startTime) &&
        Objects.equals(this.timeout, googleCloudRunV2Task.timeout) &&
        Objects.equals(this.uid, googleCloudRunV2Task.uid) &&
        Objects.equals(this.updateTime, googleCloudRunV2Task.updateTime) &&
        Objects.equals(this.volumes, googleCloudRunV2Task.volumes) &&
        Objects.equals(this.vpcAccess, googleCloudRunV2Task.vpcAccess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, completionTime, conditions, containers, createTime, deleteTime, encryptionKey, etag, execution, executionEnvironment, expireTime, generation, index, job, labels, lastAttemptResult, logUri, maxRetries, name, observedGeneration, reconciling, retried, satisfiesPzs, scheduledTime, serviceAccount, startTime, timeout, uid, updateTime, volumes, vpcAccess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRunV2Task {\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    completionTime: ").append(toIndentedString(completionTime)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    deleteTime: ").append(toIndentedString(deleteTime)).append("\n");
    sb.append("    encryptionKey: ").append(toIndentedString(encryptionKey)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    execution: ").append(toIndentedString(execution)).append("\n");
    sb.append("    executionEnvironment: ").append(toIndentedString(executionEnvironment)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    generation: ").append(toIndentedString(generation)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    job: ").append(toIndentedString(job)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    lastAttemptResult: ").append(toIndentedString(lastAttemptResult)).append("\n");
    sb.append("    logUri: ").append(toIndentedString(logUri)).append("\n");
    sb.append("    maxRetries: ").append(toIndentedString(maxRetries)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    observedGeneration: ").append(toIndentedString(observedGeneration)).append("\n");
    sb.append("    reconciling: ").append(toIndentedString(reconciling)).append("\n");
    sb.append("    retried: ").append(toIndentedString(retried)).append("\n");
    sb.append("    satisfiesPzs: ").append(toIndentedString(satisfiesPzs)).append("\n");
    sb.append("    scheduledTime: ").append(toIndentedString(scheduledTime)).append("\n");
    sb.append("    serviceAccount: ").append(toIndentedString(serviceAccount)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("    vpcAccess: ").append(toIndentedString(vpcAccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotations");
    openapiFields.add("completionTime");
    openapiFields.add("conditions");
    openapiFields.add("containers");
    openapiFields.add("createTime");
    openapiFields.add("deleteTime");
    openapiFields.add("encryptionKey");
    openapiFields.add("etag");
    openapiFields.add("execution");
    openapiFields.add("executionEnvironment");
    openapiFields.add("expireTime");
    openapiFields.add("generation");
    openapiFields.add("index");
    openapiFields.add("job");
    openapiFields.add("labels");
    openapiFields.add("lastAttemptResult");
    openapiFields.add("logUri");
    openapiFields.add("maxRetries");
    openapiFields.add("name");
    openapiFields.add("observedGeneration");
    openapiFields.add("reconciling");
    openapiFields.add("retried");
    openapiFields.add("satisfiesPzs");
    openapiFields.add("scheduledTime");
    openapiFields.add("serviceAccount");
    openapiFields.add("startTime");
    openapiFields.add("timeout");
    openapiFields.add("uid");
    openapiFields.add("updateTime");
    openapiFields.add("volumes");
    openapiFields.add("vpcAccess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRunV2Task
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRunV2Task.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRunV2Task is not found in the empty JSON string", GoogleCloudRunV2Task.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRunV2Task.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRunV2Task` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("completionTime") != null && !jsonObj.get("completionTime").isJsonNull()) && !jsonObj.get("completionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completionTime").toString()));
      }
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            GoogleCloudRunV2Condition.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
      if (jsonObj.get("containers") != null && !jsonObj.get("containers").isJsonNull()) {
        JsonArray jsonArraycontainers = jsonObj.getAsJsonArray("containers");
        if (jsonArraycontainers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("containers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `containers` to be an array in the JSON string but got `%s`", jsonObj.get("containers").toString()));
          }

          // validate the optional field `containers` (array)
          for (int i = 0; i < jsonArraycontainers.size(); i++) {
            GoogleCloudRunV2Container.validateJsonElement(jsonArraycontainers.get(i));
          };
        }
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("deleteTime") != null && !jsonObj.get("deleteTime").isJsonNull()) && !jsonObj.get("deleteTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteTime").toString()));
      }
      if ((jsonObj.get("encryptionKey") != null && !jsonObj.get("encryptionKey").isJsonNull()) && !jsonObj.get("encryptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionKey").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("execution") != null && !jsonObj.get("execution").isJsonNull()) && !jsonObj.get("execution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `execution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("execution").toString()));
      }
      if ((jsonObj.get("executionEnvironment") != null && !jsonObj.get("executionEnvironment").isJsonNull()) && !jsonObj.get("executionEnvironment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionEnvironment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionEnvironment").toString()));
      }
      // validate the optional field `executionEnvironment`
      if (jsonObj.get("executionEnvironment") != null && !jsonObj.get("executionEnvironment").isJsonNull()) {
        ExecutionEnvironmentEnum.validateJsonElement(jsonObj.get("executionEnvironment"));
      }
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      if ((jsonObj.get("generation") != null && !jsonObj.get("generation").isJsonNull()) && !jsonObj.get("generation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `generation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("generation").toString()));
      }
      if ((jsonObj.get("job") != null && !jsonObj.get("job").isJsonNull()) && !jsonObj.get("job").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job").toString()));
      }
      // validate the optional field `lastAttemptResult`
      if (jsonObj.get("lastAttemptResult") != null && !jsonObj.get("lastAttemptResult").isJsonNull()) {
        GoogleCloudRunV2TaskAttemptResult.validateJsonElement(jsonObj.get("lastAttemptResult"));
      }
      if ((jsonObj.get("logUri") != null && !jsonObj.get("logUri").isJsonNull()) && !jsonObj.get("logUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logUri").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("observedGeneration") != null && !jsonObj.get("observedGeneration").isJsonNull()) && !jsonObj.get("observedGeneration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `observedGeneration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("observedGeneration").toString()));
      }
      if ((jsonObj.get("scheduledTime") != null && !jsonObj.get("scheduledTime").isJsonNull()) && !jsonObj.get("scheduledTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduledTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduledTime").toString()));
      }
      if ((jsonObj.get("serviceAccount") != null && !jsonObj.get("serviceAccount").isJsonNull()) && !jsonObj.get("serviceAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccount").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("timeout") != null && !jsonObj.get("timeout").isJsonNull()) && !jsonObj.get("timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeout").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if (jsonObj.get("volumes") != null && !jsonObj.get("volumes").isJsonNull()) {
        JsonArray jsonArrayvolumes = jsonObj.getAsJsonArray("volumes");
        if (jsonArrayvolumes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumes` to be an array in the JSON string but got `%s`", jsonObj.get("volumes").toString()));
          }

          // validate the optional field `volumes` (array)
          for (int i = 0; i < jsonArrayvolumes.size(); i++) {
            GoogleCloudRunV2Volume.validateJsonElement(jsonArrayvolumes.get(i));
          };
        }
      }
      // validate the optional field `vpcAccess`
      if (jsonObj.get("vpcAccess") != null && !jsonObj.get("vpcAccess").isJsonNull()) {
        GoogleCloudRunV2VpcAccess.validateJsonElement(jsonObj.get("vpcAccess"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRunV2Task.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRunV2Task' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRunV2Task> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRunV2Task.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRunV2Task>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRunV2Task value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRunV2Task read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRunV2Task given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRunV2Task
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRunV2Task
   */
  public static GoogleCloudRunV2Task fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRunV2Task.class);
  }

  /**
   * Convert an instance of GoogleCloudRunV2Task to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

