/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a status condition for a resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:07.645646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRunV2Condition {
  /**
   * A reason for the execution condition.
   */
  @JsonAdapter(ExecutionReasonEnum.Adapter.class)
  public enum ExecutionReasonEnum {
    EXECUTION_REASON_UNDEFINED("EXECUTION_REASON_UNDEFINED"),
    
    JOB_STATUS_SERVICE_POLLING_ERROR("JOB_STATUS_SERVICE_POLLING_ERROR"),
    
    NON_ZERO_EXIT_CODE("NON_ZERO_EXIT_CODE"),
    
    CANCELLED("CANCELLED"),
    
    CANCELLING("CANCELLING"),
    
    DELETED("DELETED");

    private String value;

    ExecutionReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExecutionReasonEnum fromValue(String value) {
      for (ExecutionReasonEnum b : ExecutionReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExecutionReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExecutionReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExecutionReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExecutionReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExecutionReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXECUTION_REASON = "executionReason";
  @SerializedName(SERIALIZED_NAME_EXECUTION_REASON)
  private ExecutionReasonEnum executionReason;

  public static final String SERIALIZED_NAME_LAST_TRANSITION_TIME = "lastTransitionTime";
  @SerializedName(SERIALIZED_NAME_LAST_TRANSITION_TIME)
  private String lastTransitionTime;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  /**
   * A common (service-level) reason for this condition.
   */
  @JsonAdapter(ReasonEnum.Adapter.class)
  public enum ReasonEnum {
    COMMON_REASON_UNDEFINED("COMMON_REASON_UNDEFINED"),
    
    UNKNOWN("UNKNOWN"),
    
    REVISION_FAILED("REVISION_FAILED"),
    
    PROGRESS_DEADLINE_EXCEEDED("PROGRESS_DEADLINE_EXCEEDED"),
    
    CONTAINER_MISSING("CONTAINER_MISSING"),
    
    CONTAINER_PERMISSION_DENIED("CONTAINER_PERMISSION_DENIED"),
    
    CONTAINER_IMAGE_UNAUTHORIZED("CONTAINER_IMAGE_UNAUTHORIZED"),
    
    CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED("CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED"),
    
    ENCRYPTION_KEY_PERMISSION_DENIED("ENCRYPTION_KEY_PERMISSION_DENIED"),
    
    ENCRYPTION_KEY_CHECK_FAILED("ENCRYPTION_KEY_CHECK_FAILED"),
    
    SECRETS_ACCESS_CHECK_FAILED("SECRETS_ACCESS_CHECK_FAILED"),
    
    WAITING_FOR_OPERATION("WAITING_FOR_OPERATION"),
    
    IMMEDIATE_RETRY("IMMEDIATE_RETRY"),
    
    POSTPONED_RETRY("POSTPONED_RETRY"),
    
    INTERNAL("INTERNAL");

    private String value;

    ReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReasonEnum fromValue(String value) {
      for (ReasonEnum b : ReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private ReasonEnum reason;

  /**
   * A reason for the revision condition.
   */
  @JsonAdapter(RevisionReasonEnum.Adapter.class)
  public enum RevisionReasonEnum {
    REVISION_REASON_UNDEFINED("REVISION_REASON_UNDEFINED"),
    
    PENDING("PENDING"),
    
    RESERVE("RESERVE"),
    
    RETIRED("RETIRED"),
    
    RETIRING("RETIRING"),
    
    RECREATING("RECREATING"),
    
    HEALTH_CHECK_CONTAINER_ERROR("HEALTH_CHECK_CONTAINER_ERROR"),
    
    CUSTOMIZED_PATH_RESPONSE_PENDING("CUSTOMIZED_PATH_RESPONSE_PENDING"),
    
    MIN_INSTANCES_NOT_PROVISIONED("MIN_INSTANCES_NOT_PROVISIONED"),
    
    ACTIVE_REVISION_LIMIT_REACHED("ACTIVE_REVISION_LIMIT_REACHED"),
    
    NO_DEPLOYMENT("NO_DEPLOYMENT"),
    
    HEALTH_CHECK_SKIPPED("HEALTH_CHECK_SKIPPED"),
    
    MIN_INSTANCES_WARMING("MIN_INSTANCES_WARMING");

    private String value;

    RevisionReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RevisionReasonEnum fromValue(String value) {
      for (RevisionReasonEnum b : RevisionReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RevisionReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RevisionReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RevisionReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RevisionReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RevisionReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REVISION_REASON = "revisionReason";
  @SerializedName(SERIALIZED_NAME_REVISION_REASON)
  private RevisionReasonEnum revisionReason;

  /**
   * How to interpret failures of this condition, one of Error, Warning, Info
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    SEVERITY_UNSPECIFIED("SEVERITY_UNSPECIFIED"),
    
    ERROR("ERROR"),
    
    WARNING("WARNING"),
    
    INFO("INFO");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  /**
   * State of the condition.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CONDITION_PENDING("CONDITION_PENDING"),
    
    CONDITION_RECONCILING("CONDITION_RECONCILING"),
    
    CONDITION_FAILED("CONDITION_FAILED"),
    
    CONDITION_SUCCEEDED("CONDITION_SUCCEEDED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public GoogleCloudRunV2Condition() {
  }

  public GoogleCloudRunV2Condition executionReason(ExecutionReasonEnum executionReason) {
    this.executionReason = executionReason;
    return this;
  }

  /**
   * A reason for the execution condition.
   * @return executionReason
   */
  @javax.annotation.Nullable
  public ExecutionReasonEnum getExecutionReason() {
    return executionReason;
  }

  public void setExecutionReason(ExecutionReasonEnum executionReason) {
    this.executionReason = executionReason;
  }


  public GoogleCloudRunV2Condition lastTransitionTime(String lastTransitionTime) {
    this.lastTransitionTime = lastTransitionTime;
    return this;
  }

  /**
   * Last time the condition transitioned from one status to another.
   * @return lastTransitionTime
   */
  @javax.annotation.Nullable
  public String getLastTransitionTime() {
    return lastTransitionTime;
  }

  public void setLastTransitionTime(String lastTransitionTime) {
    this.lastTransitionTime = lastTransitionTime;
  }


  public GoogleCloudRunV2Condition message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Human readable message indicating details about the current status.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public GoogleCloudRunV2Condition reason(ReasonEnum reason) {
    this.reason = reason;
    return this;
  }

  /**
   * A common (service-level) reason for this condition.
   * @return reason
   */
  @javax.annotation.Nullable
  public ReasonEnum getReason() {
    return reason;
  }

  public void setReason(ReasonEnum reason) {
    this.reason = reason;
  }


  public GoogleCloudRunV2Condition revisionReason(RevisionReasonEnum revisionReason) {
    this.revisionReason = revisionReason;
    return this;
  }

  /**
   * A reason for the revision condition.
   * @return revisionReason
   */
  @javax.annotation.Nullable
  public RevisionReasonEnum getRevisionReason() {
    return revisionReason;
  }

  public void setRevisionReason(RevisionReasonEnum revisionReason) {
    this.revisionReason = revisionReason;
  }


  public GoogleCloudRunV2Condition severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

  /**
   * How to interpret failures of this condition, one of Error, Warning, Info
   * @return severity
   */
  @javax.annotation.Nullable
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public GoogleCloudRunV2Condition state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * State of the condition.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public GoogleCloudRunV2Condition type(String type) {
    this.type = type;
    return this;
  }

  /**
   * type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * \&quot;Ready\&quot;: True when the Resource is ready.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRunV2Condition googleCloudRunV2Condition = (GoogleCloudRunV2Condition) o;
    return Objects.equals(this.executionReason, googleCloudRunV2Condition.executionReason) &&
        Objects.equals(this.lastTransitionTime, googleCloudRunV2Condition.lastTransitionTime) &&
        Objects.equals(this.message, googleCloudRunV2Condition.message) &&
        Objects.equals(this.reason, googleCloudRunV2Condition.reason) &&
        Objects.equals(this.revisionReason, googleCloudRunV2Condition.revisionReason) &&
        Objects.equals(this.severity, googleCloudRunV2Condition.severity) &&
        Objects.equals(this.state, googleCloudRunV2Condition.state) &&
        Objects.equals(this.type, googleCloudRunV2Condition.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executionReason, lastTransitionTime, message, reason, revisionReason, severity, state, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRunV2Condition {\n");
    sb.append("    executionReason: ").append(toIndentedString(executionReason)).append("\n");
    sb.append("    lastTransitionTime: ").append(toIndentedString(lastTransitionTime)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    revisionReason: ").append(toIndentedString(revisionReason)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("executionReason");
    openapiFields.add("lastTransitionTime");
    openapiFields.add("message");
    openapiFields.add("reason");
    openapiFields.add("revisionReason");
    openapiFields.add("severity");
    openapiFields.add("state");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRunV2Condition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRunV2Condition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRunV2Condition is not found in the empty JSON string", GoogleCloudRunV2Condition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRunV2Condition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRunV2Condition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("executionReason") != null && !jsonObj.get("executionReason").isJsonNull()) && !jsonObj.get("executionReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionReason").toString()));
      }
      // validate the optional field `executionReason`
      if (jsonObj.get("executionReason") != null && !jsonObj.get("executionReason").isJsonNull()) {
        ExecutionReasonEnum.validateJsonElement(jsonObj.get("executionReason"));
      }
      if ((jsonObj.get("lastTransitionTime") != null && !jsonObj.get("lastTransitionTime").isJsonNull()) && !jsonObj.get("lastTransitionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastTransitionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastTransitionTime").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // validate the optional field `reason`
      if (jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) {
        ReasonEnum.validateJsonElement(jsonObj.get("reason"));
      }
      if ((jsonObj.get("revisionReason") != null && !jsonObj.get("revisionReason").isJsonNull()) && !jsonObj.get("revisionReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revisionReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revisionReason").toString()));
      }
      // validate the optional field `revisionReason`
      if (jsonObj.get("revisionReason") != null && !jsonObj.get("revisionReason").isJsonNull()) {
        RevisionReasonEnum.validateJsonElement(jsonObj.get("revisionReason"));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRunV2Condition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRunV2Condition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRunV2Condition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRunV2Condition.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRunV2Condition>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRunV2Condition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRunV2Condition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRunV2Condition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRunV2Condition
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRunV2Condition
   */
  public static GoogleCloudRunV2Condition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRunV2Condition.class);
  }

  /**
   * Convert an instance of GoogleCloudRunV2Condition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

