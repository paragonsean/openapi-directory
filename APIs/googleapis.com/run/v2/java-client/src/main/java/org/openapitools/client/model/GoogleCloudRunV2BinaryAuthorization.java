/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings for Binary Authorization feature.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:07.645646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRunV2BinaryAuthorization {
  public static final String SERIALIZED_NAME_BREAKGLASS_JUSTIFICATION = "breakglassJustification";
  @SerializedName(SERIALIZED_NAME_BREAKGLASS_JUSTIFICATION)
  private String breakglassJustification;

  public static final String SERIALIZED_NAME_USE_DEFAULT = "useDefault";
  @SerializedName(SERIALIZED_NAME_USE_DEFAULT)
  private Boolean useDefault;

  public GoogleCloudRunV2BinaryAuthorization() {
  }

  public GoogleCloudRunV2BinaryAuthorization breakglassJustification(String breakglassJustification) {
    this.breakglassJustification = breakglassJustification;
    return this;
  }

  /**
   * If present, indicates to use Breakglass using this justification. If use_default is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass
   * @return breakglassJustification
   */
  @javax.annotation.Nullable
  public String getBreakglassJustification() {
    return breakglassJustification;
  }

  public void setBreakglassJustification(String breakglassJustification) {
    this.breakglassJustification = breakglassJustification;
  }


  public GoogleCloudRunV2BinaryAuthorization useDefault(Boolean useDefault) {
    this.useDefault = useDefault;
    return this;
  }

  /**
   * If True, indicates to use the default project&#39;s binary authorization policy. If False, binary authorization will be disabled.
   * @return useDefault
   */
  @javax.annotation.Nullable
  public Boolean getUseDefault() {
    return useDefault;
  }

  public void setUseDefault(Boolean useDefault) {
    this.useDefault = useDefault;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRunV2BinaryAuthorization googleCloudRunV2BinaryAuthorization = (GoogleCloudRunV2BinaryAuthorization) o;
    return Objects.equals(this.breakglassJustification, googleCloudRunV2BinaryAuthorization.breakglassJustification) &&
        Objects.equals(this.useDefault, googleCloudRunV2BinaryAuthorization.useDefault);
  }

  @Override
  public int hashCode() {
    return Objects.hash(breakglassJustification, useDefault);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRunV2BinaryAuthorization {\n");
    sb.append("    breakglassJustification: ").append(toIndentedString(breakglassJustification)).append("\n");
    sb.append("    useDefault: ").append(toIndentedString(useDefault)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("breakglassJustification");
    openapiFields.add("useDefault");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRunV2BinaryAuthorization
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRunV2BinaryAuthorization.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRunV2BinaryAuthorization is not found in the empty JSON string", GoogleCloudRunV2BinaryAuthorization.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRunV2BinaryAuthorization.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRunV2BinaryAuthorization` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("breakglassJustification") != null && !jsonObj.get("breakglassJustification").isJsonNull()) && !jsonObj.get("breakglassJustification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `breakglassJustification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("breakglassJustification").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRunV2BinaryAuthorization.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRunV2BinaryAuthorization' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRunV2BinaryAuthorization> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRunV2BinaryAuthorization.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRunV2BinaryAuthorization>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRunV2BinaryAuthorization value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRunV2BinaryAuthorization read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRunV2BinaryAuthorization given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRunV2BinaryAuthorization
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRunV2BinaryAuthorization
   */
  public static GoogleCloudRunV2BinaryAuthorization fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRunV2BinaryAuthorization.class);
  }

  /**
   * Convert an instance of GoogleCloudRunV2BinaryAuthorization to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

