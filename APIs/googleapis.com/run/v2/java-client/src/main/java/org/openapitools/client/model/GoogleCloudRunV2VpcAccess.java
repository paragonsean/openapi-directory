/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudRunV2NetworkInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VPC Access settings. For more information on sending traffic to a VPC network, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:07.645646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRunV2VpcAccess {
  public static final String SERIALIZED_NAME_CONNECTOR = "connector";
  @SerializedName(SERIALIZED_NAME_CONNECTOR)
  private String connector;

  /**
   * Traffic VPC egress settings. If not provided, it defaults to PRIVATE_RANGES_ONLY.
   */
  @JsonAdapter(EgressEnum.Adapter.class)
  public enum EgressEnum {
    VPC_EGRESS_UNSPECIFIED("VPC_EGRESS_UNSPECIFIED"),
    
    ALL_TRAFFIC("ALL_TRAFFIC"),
    
    PRIVATE_RANGES_ONLY("PRIVATE_RANGES_ONLY");

    private String value;

    EgressEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EgressEnum fromValue(String value) {
      for (EgressEnum b : EgressEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EgressEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EgressEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EgressEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EgressEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EgressEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EGRESS = "egress";
  @SerializedName(SERIALIZED_NAME_EGRESS)
  private EgressEnum egress;

  public static final String SERIALIZED_NAME_NETWORK_INTERFACES = "networkInterfaces";
  @SerializedName(SERIALIZED_NAME_NETWORK_INTERFACES)
  private List<GoogleCloudRunV2NetworkInterface> networkInterfaces = new ArrayList<>();

  public GoogleCloudRunV2VpcAccess() {
  }

  public GoogleCloudRunV2VpcAccess connector(String connector) {
    this.connector = connector;
    return this;
  }

  /**
   * VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}, where {project} can be project id or number. For more information on sending traffic to a VPC network via a connector, visit https://cloud.google.com/run/docs/configuring/vpc-connectors.
   * @return connector
   */
  @javax.annotation.Nullable
  public String getConnector() {
    return connector;
  }

  public void setConnector(String connector) {
    this.connector = connector;
  }


  public GoogleCloudRunV2VpcAccess egress(EgressEnum egress) {
    this.egress = egress;
    return this;
  }

  /**
   * Traffic VPC egress settings. If not provided, it defaults to PRIVATE_RANGES_ONLY.
   * @return egress
   */
  @javax.annotation.Nullable
  public EgressEnum getEgress() {
    return egress;
  }

  public void setEgress(EgressEnum egress) {
    this.egress = egress;
  }


  public GoogleCloudRunV2VpcAccess networkInterfaces(List<GoogleCloudRunV2NetworkInterface> networkInterfaces) {
    this.networkInterfaces = networkInterfaces;
    return this;
  }

  public GoogleCloudRunV2VpcAccess addNetworkInterfacesItem(GoogleCloudRunV2NetworkInterface networkInterfacesItem) {
    if (this.networkInterfaces == null) {
      this.networkInterfaces = new ArrayList<>();
    }
    this.networkInterfaces.add(networkInterfacesItem);
    return this;
  }

  /**
   * Direct VPC egress settings. Currently only single network interface is supported.
   * @return networkInterfaces
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRunV2NetworkInterface> getNetworkInterfaces() {
    return networkInterfaces;
  }

  public void setNetworkInterfaces(List<GoogleCloudRunV2NetworkInterface> networkInterfaces) {
    this.networkInterfaces = networkInterfaces;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRunV2VpcAccess googleCloudRunV2VpcAccess = (GoogleCloudRunV2VpcAccess) o;
    return Objects.equals(this.connector, googleCloudRunV2VpcAccess.connector) &&
        Objects.equals(this.egress, googleCloudRunV2VpcAccess.egress) &&
        Objects.equals(this.networkInterfaces, googleCloudRunV2VpcAccess.networkInterfaces);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connector, egress, networkInterfaces);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRunV2VpcAccess {\n");
    sb.append("    connector: ").append(toIndentedString(connector)).append("\n");
    sb.append("    egress: ").append(toIndentedString(egress)).append("\n");
    sb.append("    networkInterfaces: ").append(toIndentedString(networkInterfaces)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connector");
    openapiFields.add("egress");
    openapiFields.add("networkInterfaces");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRunV2VpcAccess
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRunV2VpcAccess.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRunV2VpcAccess is not found in the empty JSON string", GoogleCloudRunV2VpcAccess.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRunV2VpcAccess.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRunV2VpcAccess` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connector") != null && !jsonObj.get("connector").isJsonNull()) && !jsonObj.get("connector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connector").toString()));
      }
      if ((jsonObj.get("egress") != null && !jsonObj.get("egress").isJsonNull()) && !jsonObj.get("egress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `egress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("egress").toString()));
      }
      // validate the optional field `egress`
      if (jsonObj.get("egress") != null && !jsonObj.get("egress").isJsonNull()) {
        EgressEnum.validateJsonElement(jsonObj.get("egress"));
      }
      if (jsonObj.get("networkInterfaces") != null && !jsonObj.get("networkInterfaces").isJsonNull()) {
        JsonArray jsonArraynetworkInterfaces = jsonObj.getAsJsonArray("networkInterfaces");
        if (jsonArraynetworkInterfaces != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networkInterfaces").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networkInterfaces` to be an array in the JSON string but got `%s`", jsonObj.get("networkInterfaces").toString()));
          }

          // validate the optional field `networkInterfaces` (array)
          for (int i = 0; i < jsonArraynetworkInterfaces.size(); i++) {
            GoogleCloudRunV2NetworkInterface.validateJsonElement(jsonArraynetworkInterfaces.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRunV2VpcAccess.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRunV2VpcAccess' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRunV2VpcAccess> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRunV2VpcAccess.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRunV2VpcAccess>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRunV2VpcAccess value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRunV2VpcAccess read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRunV2VpcAccess given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRunV2VpcAccess
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRunV2VpcAccess
   */
  public static GoogleCloudRunV2VpcAccess fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRunV2VpcAccess.class);
  }

  /**
   * Convert an instance of GoogleCloudRunV2VpcAccess to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

