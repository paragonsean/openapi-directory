/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResourceRequirements describes the compute resource requirements.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:07.645646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRunV2ResourceRequirements {
  public static final String SERIALIZED_NAME_CPU_IDLE = "cpuIdle";
  @SerializedName(SERIALIZED_NAME_CPU_IDLE)
  private Boolean cpuIdle;

  public static final String SERIALIZED_NAME_LIMITS = "limits";
  @SerializedName(SERIALIZED_NAME_LIMITS)
  private Map<String, String> limits = new HashMap<>();

  public static final String SERIALIZED_NAME_STARTUP_CPU_BOOST = "startupCpuBoost";
  @SerializedName(SERIALIZED_NAME_STARTUP_CPU_BOOST)
  private Boolean startupCpuBoost;

  public GoogleCloudRunV2ResourceRequirements() {
  }

  public GoogleCloudRunV2ResourceRequirements cpuIdle(Boolean cpuIdle) {
    this.cpuIdle = cpuIdle;
    return this;
  }

  /**
   * Determines whether CPU is only allocated during requests (true by default). However, if ResourceRequirements is set, the caller must explicitly set this field to true to preserve the default behavior.
   * @return cpuIdle
   */
  @javax.annotation.Nullable
  public Boolean getCpuIdle() {
    return cpuIdle;
  }

  public void setCpuIdle(Boolean cpuIdle) {
    this.cpuIdle = cpuIdle;
  }


  public GoogleCloudRunV2ResourceRequirements limits(Map<String, String> limits) {
    this.limits = limits;
    return this;
  }

  public GoogleCloudRunV2ResourceRequirements putLimitsItem(String key, String limitsItem) {
    if (this.limits == null) {
      this.limits = new HashMap<>();
    }
    this.limits.put(key, limitsItem);
    return this;
  }

  /**
   * Only &#x60;memory&#x60; and &#x60;cpu&#x60; keys in the map are supported. Notes: * The only supported values for CPU are &#39;1&#39;, &#39;2&#39;, &#39;4&#39;, and &#39;8&#39;. Setting 4 CPU requires at least 2Gi of memory. For more information, go to https://cloud.google.com/run/docs/configuring/cpu. * For supported &#39;memory&#39; values and syntax, go to https://cloud.google.com/run/docs/configuring/memory-limits
   * @return limits
   */
  @javax.annotation.Nullable
  public Map<String, String> getLimits() {
    return limits;
  }

  public void setLimits(Map<String, String> limits) {
    this.limits = limits;
  }


  public GoogleCloudRunV2ResourceRequirements startupCpuBoost(Boolean startupCpuBoost) {
    this.startupCpuBoost = startupCpuBoost;
    return this;
  }

  /**
   * Determines whether CPU should be boosted on startup of a new container instance above the requested CPU threshold, this can help reduce cold-start latency.
   * @return startupCpuBoost
   */
  @javax.annotation.Nullable
  public Boolean getStartupCpuBoost() {
    return startupCpuBoost;
  }

  public void setStartupCpuBoost(Boolean startupCpuBoost) {
    this.startupCpuBoost = startupCpuBoost;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRunV2ResourceRequirements googleCloudRunV2ResourceRequirements = (GoogleCloudRunV2ResourceRequirements) o;
    return Objects.equals(this.cpuIdle, googleCloudRunV2ResourceRequirements.cpuIdle) &&
        Objects.equals(this.limits, googleCloudRunV2ResourceRequirements.limits) &&
        Objects.equals(this.startupCpuBoost, googleCloudRunV2ResourceRequirements.startupCpuBoost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpuIdle, limits, startupCpuBoost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRunV2ResourceRequirements {\n");
    sb.append("    cpuIdle: ").append(toIndentedString(cpuIdle)).append("\n");
    sb.append("    limits: ").append(toIndentedString(limits)).append("\n");
    sb.append("    startupCpuBoost: ").append(toIndentedString(startupCpuBoost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cpuIdle");
    openapiFields.add("limits");
    openapiFields.add("startupCpuBoost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRunV2ResourceRequirements
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRunV2ResourceRequirements.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRunV2ResourceRequirements is not found in the empty JSON string", GoogleCloudRunV2ResourceRequirements.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRunV2ResourceRequirements.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRunV2ResourceRequirements` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRunV2ResourceRequirements.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRunV2ResourceRequirements' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRunV2ResourceRequirements> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRunV2ResourceRequirements.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRunV2ResourceRequirements>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRunV2ResourceRequirements value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRunV2ResourceRequirements read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRunV2ResourceRequirements given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRunV2ResourceRequirements
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRunV2ResourceRequirements
   */
  public static GoogleCloudRunV2ResourceRequirements fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRunV2ResourceRequirements.class);
  }

  /**
   * Convert an instance of GoogleCloudRunV2ResourceRequirements to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

