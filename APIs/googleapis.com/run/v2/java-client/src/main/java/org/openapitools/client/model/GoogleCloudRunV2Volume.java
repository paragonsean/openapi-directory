/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudRunV2CloudSqlInstance;
import org.openapitools.client.model.GoogleCloudRunV2EmptyDirVolumeSource;
import org.openapitools.client.model.GoogleCloudRunV2GCSVolumeSource;
import org.openapitools.client.model.GoogleCloudRunV2NFSVolumeSource;
import org.openapitools.client.model.GoogleCloudRunV2SecretVolumeSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Volume represents a named volume in a container.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:07.645646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRunV2Volume {
  public static final String SERIALIZED_NAME_CLOUD_SQL_INSTANCE = "cloudSqlInstance";
  @SerializedName(SERIALIZED_NAME_CLOUD_SQL_INSTANCE)
  private GoogleCloudRunV2CloudSqlInstance cloudSqlInstance;

  public static final String SERIALIZED_NAME_EMPTY_DIR = "emptyDir";
  @SerializedName(SERIALIZED_NAME_EMPTY_DIR)
  private GoogleCloudRunV2EmptyDirVolumeSource emptyDir;

  public static final String SERIALIZED_NAME_GCS = "gcs";
  @SerializedName(SERIALIZED_NAME_GCS)
  private GoogleCloudRunV2GCSVolumeSource gcs;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NFS = "nfs";
  @SerializedName(SERIALIZED_NAME_NFS)
  private GoogleCloudRunV2NFSVolumeSource nfs;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private GoogleCloudRunV2SecretVolumeSource secret;

  public GoogleCloudRunV2Volume() {
  }

  public GoogleCloudRunV2Volume cloudSqlInstance(GoogleCloudRunV2CloudSqlInstance cloudSqlInstance) {
    this.cloudSqlInstance = cloudSqlInstance;
    return this;
  }

  /**
   * Get cloudSqlInstance
   * @return cloudSqlInstance
   */
  @javax.annotation.Nullable
  public GoogleCloudRunV2CloudSqlInstance getCloudSqlInstance() {
    return cloudSqlInstance;
  }

  public void setCloudSqlInstance(GoogleCloudRunV2CloudSqlInstance cloudSqlInstance) {
    this.cloudSqlInstance = cloudSqlInstance;
  }


  public GoogleCloudRunV2Volume emptyDir(GoogleCloudRunV2EmptyDirVolumeSource emptyDir) {
    this.emptyDir = emptyDir;
    return this;
  }

  /**
   * Get emptyDir
   * @return emptyDir
   */
  @javax.annotation.Nullable
  public GoogleCloudRunV2EmptyDirVolumeSource getEmptyDir() {
    return emptyDir;
  }

  public void setEmptyDir(GoogleCloudRunV2EmptyDirVolumeSource emptyDir) {
    this.emptyDir = emptyDir;
  }


  public GoogleCloudRunV2Volume gcs(GoogleCloudRunV2GCSVolumeSource gcs) {
    this.gcs = gcs;
    return this;
  }

  /**
   * Get gcs
   * @return gcs
   */
  @javax.annotation.Nullable
  public GoogleCloudRunV2GCSVolumeSource getGcs() {
    return gcs;
  }

  public void setGcs(GoogleCloudRunV2GCSVolumeSource gcs) {
    this.gcs = gcs;
  }


  public GoogleCloudRunV2Volume name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Volume&#39;s name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudRunV2Volume nfs(GoogleCloudRunV2NFSVolumeSource nfs) {
    this.nfs = nfs;
    return this;
  }

  /**
   * Get nfs
   * @return nfs
   */
  @javax.annotation.Nullable
  public GoogleCloudRunV2NFSVolumeSource getNfs() {
    return nfs;
  }

  public void setNfs(GoogleCloudRunV2NFSVolumeSource nfs) {
    this.nfs = nfs;
  }


  public GoogleCloudRunV2Volume secret(GoogleCloudRunV2SecretVolumeSource secret) {
    this.secret = secret;
    return this;
  }

  /**
   * Get secret
   * @return secret
   */
  @javax.annotation.Nullable
  public GoogleCloudRunV2SecretVolumeSource getSecret() {
    return secret;
  }

  public void setSecret(GoogleCloudRunV2SecretVolumeSource secret) {
    this.secret = secret;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRunV2Volume googleCloudRunV2Volume = (GoogleCloudRunV2Volume) o;
    return Objects.equals(this.cloudSqlInstance, googleCloudRunV2Volume.cloudSqlInstance) &&
        Objects.equals(this.emptyDir, googleCloudRunV2Volume.emptyDir) &&
        Objects.equals(this.gcs, googleCloudRunV2Volume.gcs) &&
        Objects.equals(this.name, googleCloudRunV2Volume.name) &&
        Objects.equals(this.nfs, googleCloudRunV2Volume.nfs) &&
        Objects.equals(this.secret, googleCloudRunV2Volume.secret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudSqlInstance, emptyDir, gcs, name, nfs, secret);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRunV2Volume {\n");
    sb.append("    cloudSqlInstance: ").append(toIndentedString(cloudSqlInstance)).append("\n");
    sb.append("    emptyDir: ").append(toIndentedString(emptyDir)).append("\n");
    sb.append("    gcs: ").append(toIndentedString(gcs)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nfs: ").append(toIndentedString(nfs)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloudSqlInstance");
    openapiFields.add("emptyDir");
    openapiFields.add("gcs");
    openapiFields.add("name");
    openapiFields.add("nfs");
    openapiFields.add("secret");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRunV2Volume
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRunV2Volume.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRunV2Volume is not found in the empty JSON string", GoogleCloudRunV2Volume.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRunV2Volume.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRunV2Volume` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cloudSqlInstance`
      if (jsonObj.get("cloudSqlInstance") != null && !jsonObj.get("cloudSqlInstance").isJsonNull()) {
        GoogleCloudRunV2CloudSqlInstance.validateJsonElement(jsonObj.get("cloudSqlInstance"));
      }
      // validate the optional field `emptyDir`
      if (jsonObj.get("emptyDir") != null && !jsonObj.get("emptyDir").isJsonNull()) {
        GoogleCloudRunV2EmptyDirVolumeSource.validateJsonElement(jsonObj.get("emptyDir"));
      }
      // validate the optional field `gcs`
      if (jsonObj.get("gcs") != null && !jsonObj.get("gcs").isJsonNull()) {
        GoogleCloudRunV2GCSVolumeSource.validateJsonElement(jsonObj.get("gcs"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `nfs`
      if (jsonObj.get("nfs") != null && !jsonObj.get("nfs").isJsonNull()) {
        GoogleCloudRunV2NFSVolumeSource.validateJsonElement(jsonObj.get("nfs"));
      }
      // validate the optional field `secret`
      if (jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) {
        GoogleCloudRunV2SecretVolumeSource.validateJsonElement(jsonObj.get("secret"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRunV2Volume.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRunV2Volume' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRunV2Volume> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRunV2Volume.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRunV2Volume>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRunV2Volume value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRunV2Volume read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRunV2Volume given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRunV2Volume
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRunV2Volume
   */
  public static GoogleCloudRunV2Volume fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRunV2Volume.class);
  }

  /**
   * Convert an instance of GoogleCloudRunV2Volume to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

