/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudRunV2BinaryAuthorization;
import org.openapitools.client.model.GoogleCloudRunV2Condition;
import org.openapitools.client.model.GoogleCloudRunV2RevisionTemplate;
import org.openapitools.client.model.GoogleCloudRunV2ServiceScaling;
import org.openapitools.client.model.GoogleCloudRunV2TrafficTarget;
import org.openapitools.client.model.GoogleCloudRunV2TrafficTargetStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for GoogleCloudRunV2Service
 */
public class GoogleCloudRunV2ServiceTest {
    private final GoogleCloudRunV2Service model = new GoogleCloudRunV2Service();

    /**
     * Model tests for GoogleCloudRunV2Service
     */
    @Test
    public void testGoogleCloudRunV2Service() {
        // TODO: test GoogleCloudRunV2Service
    }

    /**
     * Test the property 'annotations'
     */
    @Test
    public void annotationsTest() {
        // TODO: test annotations
    }

    /**
     * Test the property 'binaryAuthorization'
     */
    @Test
    public void binaryAuthorizationTest() {
        // TODO: test binaryAuthorization
    }

    /**
     * Test the property 'client'
     */
    @Test
    public void clientTest() {
        // TODO: test client
    }

    /**
     * Test the property 'clientVersion'
     */
    @Test
    public void clientVersionTest() {
        // TODO: test clientVersion
    }

    /**
     * Test the property 'conditions'
     */
    @Test
    public void conditionsTest() {
        // TODO: test conditions
    }

    /**
     * Test the property 'createTime'
     */
    @Test
    public void createTimeTest() {
        // TODO: test createTime
    }

    /**
     * Test the property 'creator'
     */
    @Test
    public void creatorTest() {
        // TODO: test creator
    }

    /**
     * Test the property 'customAudiences'
     */
    @Test
    public void customAudiencesTest() {
        // TODO: test customAudiences
    }

    /**
     * Test the property 'defaultUriDisabled'
     */
    @Test
    public void defaultUriDisabledTest() {
        // TODO: test defaultUriDisabled
    }

    /**
     * Test the property 'deleteTime'
     */
    @Test
    public void deleteTimeTest() {
        // TODO: test deleteTime
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'etag'
     */
    @Test
    public void etagTest() {
        // TODO: test etag
    }

    /**
     * Test the property 'expireTime'
     */
    @Test
    public void expireTimeTest() {
        // TODO: test expireTime
    }

    /**
     * Test the property 'generation'
     */
    @Test
    public void generationTest() {
        // TODO: test generation
    }

    /**
     * Test the property 'ingress'
     */
    @Test
    public void ingressTest() {
        // TODO: test ingress
    }

    /**
     * Test the property 'labels'
     */
    @Test
    public void labelsTest() {
        // TODO: test labels
    }

    /**
     * Test the property 'lastModifier'
     */
    @Test
    public void lastModifierTest() {
        // TODO: test lastModifier
    }

    /**
     * Test the property 'latestCreatedRevision'
     */
    @Test
    public void latestCreatedRevisionTest() {
        // TODO: test latestCreatedRevision
    }

    /**
     * Test the property 'latestReadyRevision'
     */
    @Test
    public void latestReadyRevisionTest() {
        // TODO: test latestReadyRevision
    }

    /**
     * Test the property 'launchStage'
     */
    @Test
    public void launchStageTest() {
        // TODO: test launchStage
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'observedGeneration'
     */
    @Test
    public void observedGenerationTest() {
        // TODO: test observedGeneration
    }

    /**
     * Test the property 'reconciling'
     */
    @Test
    public void reconcilingTest() {
        // TODO: test reconciling
    }

    /**
     * Test the property 'satisfiesPzs'
     */
    @Test
    public void satisfiesPzsTest() {
        // TODO: test satisfiesPzs
    }

    /**
     * Test the property 'scaling'
     */
    @Test
    public void scalingTest() {
        // TODO: test scaling
    }

    /**
     * Test the property 'template'
     */
    @Test
    public void templateTest() {
        // TODO: test template
    }

    /**
     * Test the property 'terminalCondition'
     */
    @Test
    public void terminalConditionTest() {
        // TODO: test terminalCondition
    }

    /**
     * Test the property 'traffic'
     */
    @Test
    public void trafficTest() {
        // TODO: test traffic
    }

    /**
     * Test the property 'trafficStatuses'
     */
    @Test
    public void trafficStatusesTest() {
        // TODO: test trafficStatuses
    }

    /**
     * Test the property 'uid'
     */
    @Test
    public void uidTest() {
        // TODO: test uid
    }

    /**
     * Test the property 'updateTime'
     */
    @Test
    public void updateTimeTest() {
        // TODO: test updateTime
    }

    /**
     * Test the property 'uri'
     */
    @Test
    public void uriTest() {
        // TODO: test uri
    }

}
