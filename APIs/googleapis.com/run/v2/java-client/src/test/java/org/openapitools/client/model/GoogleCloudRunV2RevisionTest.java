/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudRunV2Condition;
import org.openapitools.client.model.GoogleCloudRunV2Container;
import org.openapitools.client.model.GoogleCloudRunV2RevisionScaling;
import org.openapitools.client.model.GoogleCloudRunV2RevisionScalingStatus;
import org.openapitools.client.model.GoogleCloudRunV2Volume;
import org.openapitools.client.model.GoogleCloudRunV2VpcAccess;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for GoogleCloudRunV2Revision
 */
public class GoogleCloudRunV2RevisionTest {
    private final GoogleCloudRunV2Revision model = new GoogleCloudRunV2Revision();

    /**
     * Model tests for GoogleCloudRunV2Revision
     */
    @Test
    public void testGoogleCloudRunV2Revision() {
        // TODO: test GoogleCloudRunV2Revision
    }

    /**
     * Test the property 'annotations'
     */
    @Test
    public void annotationsTest() {
        // TODO: test annotations
    }

    /**
     * Test the property 'conditions'
     */
    @Test
    public void conditionsTest() {
        // TODO: test conditions
    }

    /**
     * Test the property 'containers'
     */
    @Test
    public void containersTest() {
        // TODO: test containers
    }

    /**
     * Test the property 'createTime'
     */
    @Test
    public void createTimeTest() {
        // TODO: test createTime
    }

    /**
     * Test the property 'deleteTime'
     */
    @Test
    public void deleteTimeTest() {
        // TODO: test deleteTime
    }

    /**
     * Test the property 'encryptionKey'
     */
    @Test
    public void encryptionKeyTest() {
        // TODO: test encryptionKey
    }

    /**
     * Test the property 'encryptionKeyRevocationAction'
     */
    @Test
    public void encryptionKeyRevocationActionTest() {
        // TODO: test encryptionKeyRevocationAction
    }

    /**
     * Test the property 'encryptionKeyShutdownDuration'
     */
    @Test
    public void encryptionKeyShutdownDurationTest() {
        // TODO: test encryptionKeyShutdownDuration
    }

    /**
     * Test the property 'etag'
     */
    @Test
    public void etagTest() {
        // TODO: test etag
    }

    /**
     * Test the property 'executionEnvironment'
     */
    @Test
    public void executionEnvironmentTest() {
        // TODO: test executionEnvironment
    }

    /**
     * Test the property 'expireTime'
     */
    @Test
    public void expireTimeTest() {
        // TODO: test expireTime
    }

    /**
     * Test the property 'generation'
     */
    @Test
    public void generationTest() {
        // TODO: test generation
    }

    /**
     * Test the property 'labels'
     */
    @Test
    public void labelsTest() {
        // TODO: test labels
    }

    /**
     * Test the property 'launchStage'
     */
    @Test
    public void launchStageTest() {
        // TODO: test launchStage
    }

    /**
     * Test the property 'logUri'
     */
    @Test
    public void logUriTest() {
        // TODO: test logUri
    }

    /**
     * Test the property 'maxInstanceRequestConcurrency'
     */
    @Test
    public void maxInstanceRequestConcurrencyTest() {
        // TODO: test maxInstanceRequestConcurrency
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'observedGeneration'
     */
    @Test
    public void observedGenerationTest() {
        // TODO: test observedGeneration
    }

    /**
     * Test the property 'reconciling'
     */
    @Test
    public void reconcilingTest() {
        // TODO: test reconciling
    }

    /**
     * Test the property 'satisfiesPzs'
     */
    @Test
    public void satisfiesPzsTest() {
        // TODO: test satisfiesPzs
    }

    /**
     * Test the property 'scaling'
     */
    @Test
    public void scalingTest() {
        // TODO: test scaling
    }

    /**
     * Test the property 'scalingStatus'
     */
    @Test
    public void scalingStatusTest() {
        // TODO: test scalingStatus
    }

    /**
     * Test the property 'service'
     */
    @Test
    public void serviceTest() {
        // TODO: test service
    }

    /**
     * Test the property 'serviceAccount'
     */
    @Test
    public void serviceAccountTest() {
        // TODO: test serviceAccount
    }

    /**
     * Test the property 'sessionAffinity'
     */
    @Test
    public void sessionAffinityTest() {
        // TODO: test sessionAffinity
    }

    /**
     * Test the property 'timeout'
     */
    @Test
    public void timeoutTest() {
        // TODO: test timeout
    }

    /**
     * Test the property 'uid'
     */
    @Test
    public void uidTest() {
        // TODO: test uid
    }

    /**
     * Test the property 'updateTime'
     */
    @Test
    public void updateTimeTest() {
        // TODO: test updateTime
    }

    /**
     * Test the property 'volumes'
     */
    @Test
    public void volumesTest() {
        // TODO: test volumes
    }

    /**
     * Test the property 'vpcAccess'
     */
    @Test
    public void vpcAccessTest() {
        // TODO: test vpcAccess
    }

}
