/*
 * Cloud Run Admin API
 * Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API v1 follows the Knative Serving API specification, while v2 is aligned with Google Cloud AIP-based API standards, as described in https://google.aip.dev/.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GoogleCloudRunV2CancelExecutionRequest;
import org.openapitools.client.model.GoogleCloudRunV2Job;
import org.openapitools.client.model.GoogleCloudRunV2ListExecutionsResponse;
import org.openapitools.client.model.GoogleCloudRunV2ListJobsResponse;
import org.openapitools.client.model.GoogleCloudRunV2ListRevisionsResponse;
import org.openapitools.client.model.GoogleCloudRunV2ListServicesResponse;
import org.openapitools.client.model.GoogleCloudRunV2ListTasksResponse;
import org.openapitools.client.model.GoogleCloudRunV2Revision;
import org.openapitools.client.model.GoogleCloudRunV2RunJobRequest;
import org.openapitools.client.model.GoogleCloudRunV2Service;
import org.openapitools.client.model.GoogleIamV1Policy;
import org.openapitools.client.model.GoogleIamV1SetIamPolicyRequest;
import org.openapitools.client.model.GoogleIamV1TestIamPermissionsRequest;
import org.openapitools.client.model.GoogleIamV1TestIamPermissionsResponse;
import org.openapitools.client.model.GoogleLongrunningListOperationsResponse;
import org.openapitools.client.model.GoogleLongrunningOperation;
import org.openapitools.client.model.GoogleLongrunningWaitOperationRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates a Job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runProjectsLocationsJobsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String jobId = null;
        Boolean validateOnly = null;
        GoogleCloudRunV2Job googleCloudRunV2Job = null;
        GoogleLongrunningOperation response = api.runProjectsLocationsJobsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, jobId, validateOnly, googleCloudRunV2Job);
        // TODO: test validations
    }

    /**
     * Cancels an Execution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runProjectsLocationsJobsExecutionsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRunV2CancelExecutionRequest googleCloudRunV2CancelExecutionRequest = null;
        GoogleLongrunningOperation response = api.runProjectsLocationsJobsExecutionsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRunV2CancelExecutionRequest);
        // TODO: test validations
    }

    /**
     * Lists Executions from a Job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runProjectsLocationsJobsExecutionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        Boolean showDeleted = null;
        GoogleCloudRunV2ListExecutionsResponse response = api.runProjectsLocationsJobsExecutionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, showDeleted);
        // TODO: test validations
    }

    /**
     * Lists Tasks from an Execution of a Job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runProjectsLocationsJobsExecutionsTasksListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        Boolean showDeleted = null;
        GoogleCloudRunV2ListTasksResponse response = api.runProjectsLocationsJobsExecutionsTasksList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, showDeleted);
        // TODO: test validations
    }

    /**
     * Lists Jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runProjectsLocationsJobsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        Boolean showDeleted = null;
        GoogleCloudRunV2ListJobsResponse response = api.runProjectsLocationsJobsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, showDeleted);
        // TODO: test validations
    }

    /**
     * Triggers creation of a new Execution of this Job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runProjectsLocationsJobsRunTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRunV2RunJobRequest googleCloudRunV2RunJobRequest = null;
        GoogleLongrunningOperation response = api.runProjectsLocationsJobsRun(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRunV2RunJobRequest);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runProjectsLocationsOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleLongrunningListOperationsResponse response = api.runProjectsLocationsOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runProjectsLocationsOperationsWaitTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleLongrunningWaitOperationRequest googleLongrunningWaitOperationRequest = null;
        GoogleLongrunningOperation response = api.runProjectsLocationsOperationsWait(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleLongrunningWaitOperationRequest);
        // TODO: test validations
    }

    /**
     * Creates a new Service in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runProjectsLocationsServicesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String serviceId = null;
        Boolean validateOnly = null;
        GoogleCloudRunV2Service googleCloudRunV2Service = null;
        GoogleLongrunningOperation response = api.runProjectsLocationsServicesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, serviceId, validateOnly, googleCloudRunV2Service);
        // TODO: test validations
    }

    /**
     * Gets the IAM Access Control policy currently in effect for the given Cloud Run Service. This result does not include any inherited policies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runProjectsLocationsServicesGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer optionsRequestedPolicyVersion = null;
        GoogleIamV1Policy response = api.runProjectsLocationsServicesGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, optionsRequestedPolicyVersion);
        // TODO: test validations
    }

    /**
     * Lists Services.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runProjectsLocationsServicesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        Boolean showDeleted = null;
        GoogleCloudRunV2ListServicesResponse response = api.runProjectsLocationsServicesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, showDeleted);
        // TODO: test validations
    }

    /**
     * Updates a Service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runProjectsLocationsServicesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean allowMissing = null;
        Boolean validateOnly = null;
        GoogleCloudRunV2Service googleCloudRunV2Service = null;
        GoogleLongrunningOperation response = api.runProjectsLocationsServicesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allowMissing, validateOnly, googleCloudRunV2Service);
        // TODO: test validations
    }

    /**
     * Deletes a Revision.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runProjectsLocationsServicesRevisionsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String etag = null;
        Boolean validateOnly = null;
        GoogleLongrunningOperation response = api.runProjectsLocationsServicesRevisionsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, etag, validateOnly);
        // TODO: test validations
    }

    /**
     * Gets information about a Revision.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runProjectsLocationsServicesRevisionsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRunV2Revision response = api.runProjectsLocationsServicesRevisionsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists Revisions from a given Service, or from a given location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runProjectsLocationsServicesRevisionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        Boolean showDeleted = null;
        GoogleCloudRunV2ListRevisionsResponse response = api.runProjectsLocationsServicesRevisionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, showDeleted);
        // TODO: test validations
    }

    /**
     * Sets the IAM Access control policy for the specified Service. Overwrites any existing policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runProjectsLocationsServicesSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleIamV1SetIamPolicyRequest googleIamV1SetIamPolicyRequest = null;
        GoogleIamV1Policy response = api.runProjectsLocationsServicesSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleIamV1SetIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified Project. There are no permissions required for making this API call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runProjectsLocationsServicesTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleIamV1TestIamPermissionsRequest googleIamV1TestIamPermissionsRequest = null;
        GoogleIamV1TestIamPermissionsResponse response = api.runProjectsLocationsServicesTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleIamV1TestIamPermissionsRequest);
        // TODO: test validations
    }

}
