# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudRunV2Condition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, execution_reason: str=None, last_transition_time: str=None, message: str=None, reason: str=None, revision_reason: str=None, severity: str=None, state: str=None, type: str=None):
        """GoogleCloudRunV2Condition - a model defined in OpenAPI

        :param execution_reason: The execution_reason of this GoogleCloudRunV2Condition.
        :param last_transition_time: The last_transition_time of this GoogleCloudRunV2Condition.
        :param message: The message of this GoogleCloudRunV2Condition.
        :param reason: The reason of this GoogleCloudRunV2Condition.
        :param revision_reason: The revision_reason of this GoogleCloudRunV2Condition.
        :param severity: The severity of this GoogleCloudRunV2Condition.
        :param state: The state of this GoogleCloudRunV2Condition.
        :param type: The type of this GoogleCloudRunV2Condition.
        """
        self.openapi_types = {
            'execution_reason': str,
            'last_transition_time': str,
            'message': str,
            'reason': str,
            'revision_reason': str,
            'severity': str,
            'state': str,
            'type': str
        }

        self.attribute_map = {
            'execution_reason': 'executionReason',
            'last_transition_time': 'lastTransitionTime',
            'message': 'message',
            'reason': 'reason',
            'revision_reason': 'revisionReason',
            'severity': 'severity',
            'state': 'state',
            'type': 'type'
        }

        self._execution_reason = execution_reason
        self._last_transition_time = last_transition_time
        self._message = message
        self._reason = reason
        self._revision_reason = revision_reason
        self._severity = severity
        self._state = state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRunV2Condition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRunV2Condition of this GoogleCloudRunV2Condition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def execution_reason(self):
        """Gets the execution_reason of this GoogleCloudRunV2Condition.

        A reason for the execution condition.

        :return: The execution_reason of this GoogleCloudRunV2Condition.
        :rtype: str
        """
        return self._execution_reason

    @execution_reason.setter
    def execution_reason(self, execution_reason):
        """Sets the execution_reason of this GoogleCloudRunV2Condition.

        A reason for the execution condition.

        :param execution_reason: The execution_reason of this GoogleCloudRunV2Condition.
        :type execution_reason: str
        """
        allowed_values = ["EXECUTION_REASON_UNDEFINED", "JOB_STATUS_SERVICE_POLLING_ERROR", "NON_ZERO_EXIT_CODE", "CANCELLED", "CANCELLING", "DELETED"]  # noqa: E501
        if execution_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `execution_reason` ({0}), must be one of {1}"
                .format(execution_reason, allowed_values)
            )

        self._execution_reason = execution_reason

    @property
    def last_transition_time(self):
        """Gets the last_transition_time of this GoogleCloudRunV2Condition.

        Last time the condition transitioned from one status to another.

        :return: The last_transition_time of this GoogleCloudRunV2Condition.
        :rtype: str
        """
        return self._last_transition_time

    @last_transition_time.setter
    def last_transition_time(self, last_transition_time):
        """Sets the last_transition_time of this GoogleCloudRunV2Condition.

        Last time the condition transitioned from one status to another.

        :param last_transition_time: The last_transition_time of this GoogleCloudRunV2Condition.
        :type last_transition_time: str
        """

        self._last_transition_time = last_transition_time

    @property
    def message(self):
        """Gets the message of this GoogleCloudRunV2Condition.

        Human readable message indicating details about the current status.

        :return: The message of this GoogleCloudRunV2Condition.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GoogleCloudRunV2Condition.

        Human readable message indicating details about the current status.

        :param message: The message of this GoogleCloudRunV2Condition.
        :type message: str
        """

        self._message = message

    @property
    def reason(self):
        """Gets the reason of this GoogleCloudRunV2Condition.

        A common (service-level) reason for this condition.

        :return: The reason of this GoogleCloudRunV2Condition.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this GoogleCloudRunV2Condition.

        A common (service-level) reason for this condition.

        :param reason: The reason of this GoogleCloudRunV2Condition.
        :type reason: str
        """
        allowed_values = ["COMMON_REASON_UNDEFINED", "UNKNOWN", "REVISION_FAILED", "PROGRESS_DEADLINE_EXCEEDED", "CONTAINER_MISSING", "CONTAINER_PERMISSION_DENIED", "CONTAINER_IMAGE_UNAUTHORIZED", "CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED", "ENCRYPTION_KEY_PERMISSION_DENIED", "ENCRYPTION_KEY_CHECK_FAILED", "SECRETS_ACCESS_CHECK_FAILED", "WAITING_FOR_OPERATION", "IMMEDIATE_RETRY", "POSTPONED_RETRY", "INTERNAL"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def revision_reason(self):
        """Gets the revision_reason of this GoogleCloudRunV2Condition.

        A reason for the revision condition.

        :return: The revision_reason of this GoogleCloudRunV2Condition.
        :rtype: str
        """
        return self._revision_reason

    @revision_reason.setter
    def revision_reason(self, revision_reason):
        """Sets the revision_reason of this GoogleCloudRunV2Condition.

        A reason for the revision condition.

        :param revision_reason: The revision_reason of this GoogleCloudRunV2Condition.
        :type revision_reason: str
        """
        allowed_values = ["REVISION_REASON_UNDEFINED", "PENDING", "RESERVE", "RETIRED", "RETIRING", "RECREATING", "HEALTH_CHECK_CONTAINER_ERROR", "CUSTOMIZED_PATH_RESPONSE_PENDING", "MIN_INSTANCES_NOT_PROVISIONED", "ACTIVE_REVISION_LIMIT_REACHED", "NO_DEPLOYMENT", "HEALTH_CHECK_SKIPPED", "MIN_INSTANCES_WARMING"]  # noqa: E501
        if revision_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `revision_reason` ({0}), must be one of {1}"
                .format(revision_reason, allowed_values)
            )

        self._revision_reason = revision_reason

    @property
    def severity(self):
        """Gets the severity of this GoogleCloudRunV2Condition.

        How to interpret failures of this condition, one of Error, Warning, Info

        :return: The severity of this GoogleCloudRunV2Condition.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this GoogleCloudRunV2Condition.

        How to interpret failures of this condition, one of Error, Warning, Info

        :param severity: The severity of this GoogleCloudRunV2Condition.
        :type severity: str
        """
        allowed_values = ["SEVERITY_UNSPECIFIED", "ERROR", "WARNING", "INFO"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def state(self):
        """Gets the state of this GoogleCloudRunV2Condition.

        State of the condition.

        :return: The state of this GoogleCloudRunV2Condition.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudRunV2Condition.

        State of the condition.

        :param state: The state of this GoogleCloudRunV2Condition.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CONDITION_PENDING", "CONDITION_RECONCILING", "CONDITION_FAILED", "CONDITION_SUCCEEDED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this GoogleCloudRunV2Condition.

        type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * \"Ready\": True when the Resource is ready.

        :return: The type of this GoogleCloudRunV2Condition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudRunV2Condition.

        type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * \"Ready\": True when the Resource is ready.

        :param type: The type of this GoogleCloudRunV2Condition.
        :type type: str
        """

        self._type = type
