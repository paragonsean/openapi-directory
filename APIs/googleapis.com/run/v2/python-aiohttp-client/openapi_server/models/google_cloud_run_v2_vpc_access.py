# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_run_v2_network_interface import GoogleCloudRunV2NetworkInterface
from openapi_server import util


class GoogleCloudRunV2VpcAccess(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector: str=None, egress: str=None, network_interfaces: List[GoogleCloudRunV2NetworkInterface]=None):
        """GoogleCloudRunV2VpcAccess - a model defined in OpenAPI

        :param connector: The connector of this GoogleCloudRunV2VpcAccess.
        :param egress: The egress of this GoogleCloudRunV2VpcAccess.
        :param network_interfaces: The network_interfaces of this GoogleCloudRunV2VpcAccess.
        """
        self.openapi_types = {
            'connector': str,
            'egress': str,
            'network_interfaces': List[GoogleCloudRunV2NetworkInterface]
        }

        self.attribute_map = {
            'connector': 'connector',
            'egress': 'egress',
            'network_interfaces': 'networkInterfaces'
        }

        self._connector = connector
        self._egress = egress
        self._network_interfaces = network_interfaces

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRunV2VpcAccess':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRunV2VpcAccess of this GoogleCloudRunV2VpcAccess.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector(self):
        """Gets the connector of this GoogleCloudRunV2VpcAccess.

        VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}, where {project} can be project id or number. For more information on sending traffic to a VPC network via a connector, visit https://cloud.google.com/run/docs/configuring/vpc-connectors.

        :return: The connector of this GoogleCloudRunV2VpcAccess.
        :rtype: str
        """
        return self._connector

    @connector.setter
    def connector(self, connector):
        """Sets the connector of this GoogleCloudRunV2VpcAccess.

        VPC Access connector name. Format: projects/{project}/locations/{location}/connectors/{connector}, where {project} can be project id or number. For more information on sending traffic to a VPC network via a connector, visit https://cloud.google.com/run/docs/configuring/vpc-connectors.

        :param connector: The connector of this GoogleCloudRunV2VpcAccess.
        :type connector: str
        """

        self._connector = connector

    @property
    def egress(self):
        """Gets the egress of this GoogleCloudRunV2VpcAccess.

        Traffic VPC egress settings. If not provided, it defaults to PRIVATE_RANGES_ONLY.

        :return: The egress of this GoogleCloudRunV2VpcAccess.
        :rtype: str
        """
        return self._egress

    @egress.setter
    def egress(self, egress):
        """Sets the egress of this GoogleCloudRunV2VpcAccess.

        Traffic VPC egress settings. If not provided, it defaults to PRIVATE_RANGES_ONLY.

        :param egress: The egress of this GoogleCloudRunV2VpcAccess.
        :type egress: str
        """
        allowed_values = ["VPC_EGRESS_UNSPECIFIED", "ALL_TRAFFIC", "PRIVATE_RANGES_ONLY"]  # noqa: E501
        if egress not in allowed_values:
            raise ValueError(
                "Invalid value for `egress` ({0}), must be one of {1}"
                .format(egress, allowed_values)
            )

        self._egress = egress

    @property
    def network_interfaces(self):
        """Gets the network_interfaces of this GoogleCloudRunV2VpcAccess.

        Direct VPC egress settings. Currently only single network interface is supported.

        :return: The network_interfaces of this GoogleCloudRunV2VpcAccess.
        :rtype: List[GoogleCloudRunV2NetworkInterface]
        """
        return self._network_interfaces

    @network_interfaces.setter
    def network_interfaces(self, network_interfaces):
        """Sets the network_interfaces of this GoogleCloudRunV2VpcAccess.

        Direct VPC egress settings. Currently only single network interface is supported.

        :param network_interfaces: The network_interfaces of this GoogleCloudRunV2VpcAccess.
        :type network_interfaces: List[GoogleCloudRunV2NetworkInterface]
        """

        self._network_interfaces = network_interfaces
