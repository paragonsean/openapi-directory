# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudRunV2TrafficTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, percent: int=None, revision: str=None, tag: str=None, type: str=None):
        """GoogleCloudRunV2TrafficTarget - a model defined in OpenAPI

        :param percent: The percent of this GoogleCloudRunV2TrafficTarget.
        :param revision: The revision of this GoogleCloudRunV2TrafficTarget.
        :param tag: The tag of this GoogleCloudRunV2TrafficTarget.
        :param type: The type of this GoogleCloudRunV2TrafficTarget.
        """
        self.openapi_types = {
            'percent': int,
            'revision': str,
            'tag': str,
            'type': str
        }

        self.attribute_map = {
            'percent': 'percent',
            'revision': 'revision',
            'tag': 'tag',
            'type': 'type'
        }

        self._percent = percent
        self._revision = revision
        self._tag = tag
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRunV2TrafficTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRunV2TrafficTarget of this GoogleCloudRunV2TrafficTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def percent(self):
        """Gets the percent of this GoogleCloudRunV2TrafficTarget.

        Specifies percent of the traffic to this Revision. This defaults to zero if unspecified.

        :return: The percent of this GoogleCloudRunV2TrafficTarget.
        :rtype: int
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """Sets the percent of this GoogleCloudRunV2TrafficTarget.

        Specifies percent of the traffic to this Revision. This defaults to zero if unspecified.

        :param percent: The percent of this GoogleCloudRunV2TrafficTarget.
        :type percent: int
        """

        self._percent = percent

    @property
    def revision(self):
        """Gets the revision of this GoogleCloudRunV2TrafficTarget.

        Revision to which to send this portion of traffic, if traffic allocation is by revision.

        :return: The revision of this GoogleCloudRunV2TrafficTarget.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this GoogleCloudRunV2TrafficTarget.

        Revision to which to send this portion of traffic, if traffic allocation is by revision.

        :param revision: The revision of this GoogleCloudRunV2TrafficTarget.
        :type revision: str
        """

        self._revision = revision

    @property
    def tag(self):
        """Gets the tag of this GoogleCloudRunV2TrafficTarget.

        Indicates a string to be part of the URI to exclusively reference this target.

        :return: The tag of this GoogleCloudRunV2TrafficTarget.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this GoogleCloudRunV2TrafficTarget.

        Indicates a string to be part of the URI to exclusively reference this target.

        :param tag: The tag of this GoogleCloudRunV2TrafficTarget.
        :type tag: str
        """

        self._tag = tag

    @property
    def type(self):
        """Gets the type of this GoogleCloudRunV2TrafficTarget.

        The allocation type for this traffic target.

        :return: The type of this GoogleCloudRunV2TrafficTarget.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudRunV2TrafficTarget.

        The allocation type for this traffic target.

        :param type: The type of this GoogleCloudRunV2TrafficTarget.
        :type type: str
        """
        allowed_values = ["TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED", "TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST", "TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
