# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_run_v2_condition import GoogleCloudRunV2Condition
from openapi_server.models.google_cloud_run_v2_task_template import GoogleCloudRunV2TaskTemplate
from openapi_server import util


class GoogleCloudRunV2Execution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, cancelled_count: int=None, completion_time: str=None, conditions: List[GoogleCloudRunV2Condition]=None, create_time: str=None, delete_time: str=None, etag: str=None, expire_time: str=None, failed_count: int=None, generation: str=None, job: str=None, labels: Dict[str, str]=None, launch_stage: str=None, log_uri: str=None, name: str=None, observed_generation: str=None, parallelism: int=None, reconciling: bool=None, retried_count: int=None, running_count: int=None, satisfies_pzs: bool=None, start_time: str=None, succeeded_count: int=None, task_count: int=None, template: GoogleCloudRunV2TaskTemplate=None, uid: str=None, update_time: str=None):
        """GoogleCloudRunV2Execution - a model defined in OpenAPI

        :param annotations: The annotations of this GoogleCloudRunV2Execution.
        :param cancelled_count: The cancelled_count of this GoogleCloudRunV2Execution.
        :param completion_time: The completion_time of this GoogleCloudRunV2Execution.
        :param conditions: The conditions of this GoogleCloudRunV2Execution.
        :param create_time: The create_time of this GoogleCloudRunV2Execution.
        :param delete_time: The delete_time of this GoogleCloudRunV2Execution.
        :param etag: The etag of this GoogleCloudRunV2Execution.
        :param expire_time: The expire_time of this GoogleCloudRunV2Execution.
        :param failed_count: The failed_count of this GoogleCloudRunV2Execution.
        :param generation: The generation of this GoogleCloudRunV2Execution.
        :param job: The job of this GoogleCloudRunV2Execution.
        :param labels: The labels of this GoogleCloudRunV2Execution.
        :param launch_stage: The launch_stage of this GoogleCloudRunV2Execution.
        :param log_uri: The log_uri of this GoogleCloudRunV2Execution.
        :param name: The name of this GoogleCloudRunV2Execution.
        :param observed_generation: The observed_generation of this GoogleCloudRunV2Execution.
        :param parallelism: The parallelism of this GoogleCloudRunV2Execution.
        :param reconciling: The reconciling of this GoogleCloudRunV2Execution.
        :param retried_count: The retried_count of this GoogleCloudRunV2Execution.
        :param running_count: The running_count of this GoogleCloudRunV2Execution.
        :param satisfies_pzs: The satisfies_pzs of this GoogleCloudRunV2Execution.
        :param start_time: The start_time of this GoogleCloudRunV2Execution.
        :param succeeded_count: The succeeded_count of this GoogleCloudRunV2Execution.
        :param task_count: The task_count of this GoogleCloudRunV2Execution.
        :param template: The template of this GoogleCloudRunV2Execution.
        :param uid: The uid of this GoogleCloudRunV2Execution.
        :param update_time: The update_time of this GoogleCloudRunV2Execution.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'cancelled_count': int,
            'completion_time': str,
            'conditions': List[GoogleCloudRunV2Condition],
            'create_time': str,
            'delete_time': str,
            'etag': str,
            'expire_time': str,
            'failed_count': int,
            'generation': str,
            'job': str,
            'labels': Dict[str, str],
            'launch_stage': str,
            'log_uri': str,
            'name': str,
            'observed_generation': str,
            'parallelism': int,
            'reconciling': bool,
            'retried_count': int,
            'running_count': int,
            'satisfies_pzs': bool,
            'start_time': str,
            'succeeded_count': int,
            'task_count': int,
            'template': GoogleCloudRunV2TaskTemplate,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'cancelled_count': 'cancelledCount',
            'completion_time': 'completionTime',
            'conditions': 'conditions',
            'create_time': 'createTime',
            'delete_time': 'deleteTime',
            'etag': 'etag',
            'expire_time': 'expireTime',
            'failed_count': 'failedCount',
            'generation': 'generation',
            'job': 'job',
            'labels': 'labels',
            'launch_stage': 'launchStage',
            'log_uri': 'logUri',
            'name': 'name',
            'observed_generation': 'observedGeneration',
            'parallelism': 'parallelism',
            'reconciling': 'reconciling',
            'retried_count': 'retriedCount',
            'running_count': 'runningCount',
            'satisfies_pzs': 'satisfiesPzs',
            'start_time': 'startTime',
            'succeeded_count': 'succeededCount',
            'task_count': 'taskCount',
            'template': 'template',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._annotations = annotations
        self._cancelled_count = cancelled_count
        self._completion_time = completion_time
        self._conditions = conditions
        self._create_time = create_time
        self._delete_time = delete_time
        self._etag = etag
        self._expire_time = expire_time
        self._failed_count = failed_count
        self._generation = generation
        self._job = job
        self._labels = labels
        self._launch_stage = launch_stage
        self._log_uri = log_uri
        self._name = name
        self._observed_generation = observed_generation
        self._parallelism = parallelism
        self._reconciling = reconciling
        self._retried_count = retried_count
        self._running_count = running_count
        self._satisfies_pzs = satisfies_pzs
        self._start_time = start_time
        self._succeeded_count = succeeded_count
        self._task_count = task_count
        self._template = template
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudRunV2Execution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudRunV2Execution of this GoogleCloudRunV2Execution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this GoogleCloudRunV2Execution.

        Output only. Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.

        :return: The annotations of this GoogleCloudRunV2Execution.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this GoogleCloudRunV2Execution.

        Output only. Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.

        :param annotations: The annotations of this GoogleCloudRunV2Execution.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def cancelled_count(self):
        """Gets the cancelled_count of this GoogleCloudRunV2Execution.

        Output only. The number of tasks which reached phase Cancelled.

        :return: The cancelled_count of this GoogleCloudRunV2Execution.
        :rtype: int
        """
        return self._cancelled_count

    @cancelled_count.setter
    def cancelled_count(self, cancelled_count):
        """Sets the cancelled_count of this GoogleCloudRunV2Execution.

        Output only. The number of tasks which reached phase Cancelled.

        :param cancelled_count: The cancelled_count of this GoogleCloudRunV2Execution.
        :type cancelled_count: int
        """

        self._cancelled_count = cancelled_count

    @property
    def completion_time(self):
        """Gets the completion_time of this GoogleCloudRunV2Execution.

        Output only. Represents time when the execution was completed. It is not guaranteed to be set in happens-before order across separate operations.

        :return: The completion_time of this GoogleCloudRunV2Execution.
        :rtype: str
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this GoogleCloudRunV2Execution.

        Output only. Represents time when the execution was completed. It is not guaranteed to be set in happens-before order across separate operations.

        :param completion_time: The completion_time of this GoogleCloudRunV2Execution.
        :type completion_time: str
        """

        self._completion_time = completion_time

    @property
    def conditions(self):
        """Gets the conditions of this GoogleCloudRunV2Execution.

        Output only. The Condition of this Execution, containing its readiness status, and detailed error information in case it did not reach the desired state.

        :return: The conditions of this GoogleCloudRunV2Execution.
        :rtype: List[GoogleCloudRunV2Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this GoogleCloudRunV2Execution.

        Output only. The Condition of this Execution, containing its readiness status, and detailed error information in case it did not reach the desired state.

        :param conditions: The conditions of this GoogleCloudRunV2Execution.
        :type conditions: List[GoogleCloudRunV2Condition]
        """

        self._conditions = conditions

    @property
    def create_time(self):
        """Gets the create_time of this GoogleCloudRunV2Execution.

        Output only. Represents time when the execution was acknowledged by the execution controller. It is not guaranteed to be set in happens-before order across separate operations.

        :return: The create_time of this GoogleCloudRunV2Execution.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleCloudRunV2Execution.

        Output only. Represents time when the execution was acknowledged by the execution controller. It is not guaranteed to be set in happens-before order across separate operations.

        :param create_time: The create_time of this GoogleCloudRunV2Execution.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this GoogleCloudRunV2Execution.

        Output only. For a deleted resource, the deletion time. It is only populated as a response to a Delete request.

        :return: The delete_time of this GoogleCloudRunV2Execution.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this GoogleCloudRunV2Execution.

        Output only. For a deleted resource, the deletion time. It is only populated as a response to a Delete request.

        :param delete_time: The delete_time of this GoogleCloudRunV2Execution.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def etag(self):
        """Gets the etag of this GoogleCloudRunV2Execution.

        Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.

        :return: The etag of this GoogleCloudRunV2Execution.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this GoogleCloudRunV2Execution.

        Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.

        :param etag: The etag of this GoogleCloudRunV2Execution.
        :type etag: str
        """

        self._etag = etag

    @property
    def expire_time(self):
        """Gets the expire_time of this GoogleCloudRunV2Execution.

        Output only. For a deleted resource, the time after which it will be permamently deleted. It is only populated as a response to a Delete request.

        :return: The expire_time of this GoogleCloudRunV2Execution.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this GoogleCloudRunV2Execution.

        Output only. For a deleted resource, the time after which it will be permamently deleted. It is only populated as a response to a Delete request.

        :param expire_time: The expire_time of this GoogleCloudRunV2Execution.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def failed_count(self):
        """Gets the failed_count of this GoogleCloudRunV2Execution.

        Output only. The number of tasks which reached phase Failed.

        :return: The failed_count of this GoogleCloudRunV2Execution.
        :rtype: int
        """
        return self._failed_count

    @failed_count.setter
    def failed_count(self, failed_count):
        """Sets the failed_count of this GoogleCloudRunV2Execution.

        Output only. The number of tasks which reached phase Failed.

        :param failed_count: The failed_count of this GoogleCloudRunV2Execution.
        :type failed_count: int
        """

        self._failed_count = failed_count

    @property
    def generation(self):
        """Gets the generation of this GoogleCloudRunV2Execution.

        Output only. A number that monotonically increases every time the user modifies the desired state.

        :return: The generation of this GoogleCloudRunV2Execution.
        :rtype: str
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this GoogleCloudRunV2Execution.

        Output only. A number that monotonically increases every time the user modifies the desired state.

        :param generation: The generation of this GoogleCloudRunV2Execution.
        :type generation: str
        """

        self._generation = generation

    @property
    def job(self):
        """Gets the job of this GoogleCloudRunV2Execution.

        Output only. The name of the parent Job.

        :return: The job of this GoogleCloudRunV2Execution.
        :rtype: str
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this GoogleCloudRunV2Execution.

        Output only. The name of the parent Job.

        :param job: The job of this GoogleCloudRunV2Execution.
        :type job: str
        """

        self._job = job

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudRunV2Execution.

        Output only. Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels

        :return: The labels of this GoogleCloudRunV2Execution.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudRunV2Execution.

        Output only. Unstructured key value map that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels

        :param labels: The labels of this GoogleCloudRunV2Execution.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def launch_stage(self):
        """Gets the launch_stage of this GoogleCloudRunV2Execution.

        The least stable launch stage needed to create this resource, as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. Note that this value might not be what was used as input. For example, if ALPHA was provided as input in the parent resource, but only BETA and GA-level features are were, this field will be BETA.

        :return: The launch_stage of this GoogleCloudRunV2Execution.
        :rtype: str
        """
        return self._launch_stage

    @launch_stage.setter
    def launch_stage(self, launch_stage):
        """Sets the launch_stage of this GoogleCloudRunV2Execution.

        The least stable launch stage needed to create this resource, as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. Note that this value might not be what was used as input. For example, if ALPHA was provided as input in the parent resource, but only BETA and GA-level features are were, this field will be BETA.

        :param launch_stage: The launch_stage of this GoogleCloudRunV2Execution.
        :type launch_stage: str
        """
        allowed_values = ["LAUNCH_STAGE_UNSPECIFIED", "UNIMPLEMENTED", "PRELAUNCH", "EARLY_ACCESS", "ALPHA", "BETA", "GA", "DEPRECATED"]  # noqa: E501
        if launch_stage not in allowed_values:
            raise ValueError(
                "Invalid value for `launch_stage` ({0}), must be one of {1}"
                .format(launch_stage, allowed_values)
            )

        self._launch_stage = launch_stage

    @property
    def log_uri(self):
        """Gets the log_uri of this GoogleCloudRunV2Execution.

        Output only. URI where logs for this execution can be found in Cloud Console.

        :return: The log_uri of this GoogleCloudRunV2Execution.
        :rtype: str
        """
        return self._log_uri

    @log_uri.setter
    def log_uri(self, log_uri):
        """Sets the log_uri of this GoogleCloudRunV2Execution.

        Output only. URI where logs for this execution can be found in Cloud Console.

        :param log_uri: The log_uri of this GoogleCloudRunV2Execution.
        :type log_uri: str
        """

        self._log_uri = log_uri

    @property
    def name(self):
        """Gets the name of this GoogleCloudRunV2Execution.

        Output only. The unique name of this Execution.

        :return: The name of this GoogleCloudRunV2Execution.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudRunV2Execution.

        Output only. The unique name of this Execution.

        :param name: The name of this GoogleCloudRunV2Execution.
        :type name: str
        """

        self._name = name

    @property
    def observed_generation(self):
        """Gets the observed_generation of this GoogleCloudRunV2Execution.

        Output only. The generation of this Execution. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.

        :return: The observed_generation of this GoogleCloudRunV2Execution.
        :rtype: str
        """
        return self._observed_generation

    @observed_generation.setter
    def observed_generation(self, observed_generation):
        """Sets the observed_generation of this GoogleCloudRunV2Execution.

        Output only. The generation of this Execution. See comments in `reconciling` for additional information on reconciliation process in Cloud Run.

        :param observed_generation: The observed_generation of this GoogleCloudRunV2Execution.
        :type observed_generation: str
        """

        self._observed_generation = observed_generation

    @property
    def parallelism(self):
        """Gets the parallelism of this GoogleCloudRunV2Execution.

        Output only. Specifies the maximum desired number of tasks the execution should run at any given time. Must be <= task_count. The actual number of tasks running in steady state will be less than this number when ((.spec.task_count - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism.

        :return: The parallelism of this GoogleCloudRunV2Execution.
        :rtype: int
        """
        return self._parallelism

    @parallelism.setter
    def parallelism(self, parallelism):
        """Sets the parallelism of this GoogleCloudRunV2Execution.

        Output only. Specifies the maximum desired number of tasks the execution should run at any given time. Must be <= task_count. The actual number of tasks running in steady state will be less than this number when ((.spec.task_count - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism.

        :param parallelism: The parallelism of this GoogleCloudRunV2Execution.
        :type parallelism: int
        """

        self._parallelism = parallelism

    @property
    def reconciling(self):
        """Gets the reconciling of this GoogleCloudRunV2Execution.

        Output only. Indicates whether the resource's reconciliation is still in progress. See comments in `Job.reconciling` for additional information on reconciliation process in Cloud Run.

        :return: The reconciling of this GoogleCloudRunV2Execution.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this GoogleCloudRunV2Execution.

        Output only. Indicates whether the resource's reconciliation is still in progress. See comments in `Job.reconciling` for additional information on reconciliation process in Cloud Run.

        :param reconciling: The reconciling of this GoogleCloudRunV2Execution.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def retried_count(self):
        """Gets the retried_count of this GoogleCloudRunV2Execution.

        Output only. The number of tasks which have retried at least once.

        :return: The retried_count of this GoogleCloudRunV2Execution.
        :rtype: int
        """
        return self._retried_count

    @retried_count.setter
    def retried_count(self, retried_count):
        """Sets the retried_count of this GoogleCloudRunV2Execution.

        Output only. The number of tasks which have retried at least once.

        :param retried_count: The retried_count of this GoogleCloudRunV2Execution.
        :type retried_count: int
        """

        self._retried_count = retried_count

    @property
    def running_count(self):
        """Gets the running_count of this GoogleCloudRunV2Execution.

        Output only. The number of actively running tasks.

        :return: The running_count of this GoogleCloudRunV2Execution.
        :rtype: int
        """
        return self._running_count

    @running_count.setter
    def running_count(self, running_count):
        """Sets the running_count of this GoogleCloudRunV2Execution.

        Output only. The number of actively running tasks.

        :param running_count: The running_count of this GoogleCloudRunV2Execution.
        :type running_count: int
        """

        self._running_count = running_count

    @property
    def satisfies_pzs(self):
        """Gets the satisfies_pzs of this GoogleCloudRunV2Execution.

        Output only. Reserved for future use.

        :return: The satisfies_pzs of this GoogleCloudRunV2Execution.
        :rtype: bool
        """
        return self._satisfies_pzs

    @satisfies_pzs.setter
    def satisfies_pzs(self, satisfies_pzs):
        """Sets the satisfies_pzs of this GoogleCloudRunV2Execution.

        Output only. Reserved for future use.

        :param satisfies_pzs: The satisfies_pzs of this GoogleCloudRunV2Execution.
        :type satisfies_pzs: bool
        """

        self._satisfies_pzs = satisfies_pzs

    @property
    def start_time(self):
        """Gets the start_time of this GoogleCloudRunV2Execution.

        Output only. Represents time when the execution started to run. It is not guaranteed to be set in happens-before order across separate operations.

        :return: The start_time of this GoogleCloudRunV2Execution.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GoogleCloudRunV2Execution.

        Output only. Represents time when the execution started to run. It is not guaranteed to be set in happens-before order across separate operations.

        :param start_time: The start_time of this GoogleCloudRunV2Execution.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def succeeded_count(self):
        """Gets the succeeded_count of this GoogleCloudRunV2Execution.

        Output only. The number of tasks which reached phase Succeeded.

        :return: The succeeded_count of this GoogleCloudRunV2Execution.
        :rtype: int
        """
        return self._succeeded_count

    @succeeded_count.setter
    def succeeded_count(self, succeeded_count):
        """Sets the succeeded_count of this GoogleCloudRunV2Execution.

        Output only. The number of tasks which reached phase Succeeded.

        :param succeeded_count: The succeeded_count of this GoogleCloudRunV2Execution.
        :type succeeded_count: int
        """

        self._succeeded_count = succeeded_count

    @property
    def task_count(self):
        """Gets the task_count of this GoogleCloudRunV2Execution.

        Output only. Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution.

        :return: The task_count of this GoogleCloudRunV2Execution.
        :rtype: int
        """
        return self._task_count

    @task_count.setter
    def task_count(self, task_count):
        """Sets the task_count of this GoogleCloudRunV2Execution.

        Output only. Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution.

        :param task_count: The task_count of this GoogleCloudRunV2Execution.
        :type task_count: int
        """

        self._task_count = task_count

    @property
    def template(self):
        """Gets the template of this GoogleCloudRunV2Execution.


        :return: The template of this GoogleCloudRunV2Execution.
        :rtype: GoogleCloudRunV2TaskTemplate
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this GoogleCloudRunV2Execution.


        :param template: The template of this GoogleCloudRunV2Execution.
        :type template: GoogleCloudRunV2TaskTemplate
        """

        self._template = template

    @property
    def uid(self):
        """Gets the uid of this GoogleCloudRunV2Execution.

        Output only. Server assigned unique identifier for the Execution. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.

        :return: The uid of this GoogleCloudRunV2Execution.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this GoogleCloudRunV2Execution.

        Output only. Server assigned unique identifier for the Execution. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.

        :param uid: The uid of this GoogleCloudRunV2Execution.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this GoogleCloudRunV2Execution.

        Output only. The last-modified time.

        :return: The update_time of this GoogleCloudRunV2Execution.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GoogleCloudRunV2Execution.

        Output only. The last-modified time.

        :param update_time: The update_time of this GoogleCloudRunV2Execution.
        :type update_time: str
        """

        self._update_time = update_time
